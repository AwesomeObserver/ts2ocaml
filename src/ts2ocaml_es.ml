[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_min
module IteratorYieldResult =
  struct
    type 'TYield t = [ `IteratorYieldResult of 'TYield ] intf
    let rec t_of_js : 'TYield . (Ojs.t -> 'TYield) -> Ojs.t -> 'TYield t =
      fun _TYield -> Obj.magic
    and t_to_js : 'TYield . ('TYield -> Ojs.t) -> 'TYield t -> Ojs.t =
      fun _TYield -> Obj.magic
    type 'TYield t_1 = 'TYield t
    let rec t_1_of_js : 'TYield . (Ojs.t -> 'TYield) -> Ojs.t -> 'TYield t_1
      = fun (type __TYield) ->
      fun (__TYield_of_js : Ojs.t -> __TYield) ->
        fun (x3 : Ojs.t) -> t_of_js __TYield_of_js x3
    and t_1_to_js : 'TYield . ('TYield -> Ojs.t) -> 'TYield t_1 -> Ojs.t =
      fun (type __TYield) ->
      fun (__TYield_to_js : __TYield -> Ojs.t) ->
        fun (x1 : __TYield t) -> t_to_js __TYield_to_js x1
    type 'TYield tags = [ `IteratorYieldResult of 'TYield ]
    type 'TYield tags_1 = 'TYield tags
    type ('tags, 'TYield) this =
      'tags intf constraint 'tags = [> `IteratorYieldResult of 'TYield ]
    let rec this_of_js :
      'tags 'TYield .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'TYield) -> Ojs.t -> ('tags, 'TYield) this
      = fun (type __tags) -> fun (type __TYield) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__TYield_of_js : Ojs.t -> __TYield) ->
          fun (x7 : Ojs.t) -> intf_of_js __tags_of_js x7
    and this_to_js :
      'tags 'TYield .
        ('tags -> Ojs.t) ->
          ('TYield -> Ojs.t) -> ('tags, 'TYield) this -> Ojs.t
      = fun (type __tags) -> fun (type __TYield) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__TYield_to_js : __TYield -> Ojs.t) ->
          fun (x5 : __tags intf) -> intf_to_js __tags_to_js x5
    let (get_done : ('tags, 'TYield) this -> [ `L_b_false ]) =
      fun (x9 : ('tags, 'TYield) this) ->
        let x12 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x9) "done" in
        match Ojs.bool_of_js x12 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : ('tags, 'TYield) this -> [ `L_b_false ] -> unit) =
      fun (x13 : ('tags, 'TYield) this) ->
        fun (x14 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x13) "done"
            (match x14 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : ('tags, 'TYield) this -> 'TYield) =
      fun (x17 : ('tags, 'TYield) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x17) "value")
    let (set_value : ('tags, 'TYield) this -> 'TYield -> unit) =
      fun (x20 : ('tags, 'TYield) this) ->
        fun (x21 : 'TYield) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x20) "value"
            (Obj.magic x21)
    let cast_from = Obj.magic
  end
module IteratorReturnResult =
  struct
    type 'TReturn t = [ `IteratorReturnResult of 'TReturn ] intf
    let rec t_of_js : 'TReturn . (Ojs.t -> 'TReturn) -> Ojs.t -> 'TReturn t =
      fun _TReturn -> Obj.magic
    and t_to_js : 'TReturn . ('TReturn -> Ojs.t) -> 'TReturn t -> Ojs.t =
      fun _TReturn -> Obj.magic
    type 'TReturn t_1 = 'TReturn t
    let rec t_1_of_js :
      'TReturn . (Ojs.t -> 'TReturn) -> Ojs.t -> 'TReturn t_1 = fun (type
      __TReturn) ->
      fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
        fun (x26 : Ojs.t) -> t_of_js __TReturn_of_js x26
    and t_1_to_js : 'TReturn . ('TReturn -> Ojs.t) -> 'TReturn t_1 -> Ojs.t =
      fun (type __TReturn) ->
      fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
        fun (x24 : __TReturn t) -> t_to_js __TReturn_to_js x24
    type 'TReturn tags = [ `IteratorReturnResult of 'TReturn ]
    type 'TReturn tags_1 = 'TReturn tags
    type ('tags, 'TReturn) this =
      'tags intf constraint 'tags = [> `IteratorReturnResult of 'TReturn ]
    let rec this_of_js :
      'tags 'TReturn .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'TReturn) -> Ojs.t -> ('tags, 'TReturn) this
      = fun (type __tags) -> fun (type __TReturn) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (x30 : Ojs.t) -> intf_of_js __tags_of_js x30
    and this_to_js :
      'tags 'TReturn .
        ('tags -> Ojs.t) ->
          ('TReturn -> Ojs.t) -> ('tags, 'TReturn) this -> Ojs.t
      = fun (type __tags) -> fun (type __TReturn) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (x28 : __tags intf) -> intf_to_js __tags_to_js x28
    let (get_done : ('tags, 'TReturn) this -> [ `L_b_true ]) =
      fun (x32 : ('tags, 'TReturn) this) ->
        let x35 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x32) "done" in
        match Ojs.bool_of_js x35 with | true -> `L_b_true | _ -> assert false
    let (set_done : ('tags, 'TReturn) this -> [ `L_b_true ] -> unit) =
      fun (x36 : ('tags, 'TReturn) this) ->
        fun (x37 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x36) "done"
            (match x37 with | `L_b_true -> Ojs.bool_to_js true)
    let (get_value : ('tags, 'TReturn) this -> 'TReturn) =
      fun (x40 : ('tags, 'TReturn) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x40) "value")
    let (set_value : ('tags, 'TReturn) this -> 'TReturn -> unit) =
      fun (x43 : ('tags, 'TReturn) this) ->
        fun (x44 : 'TReturn) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x43) "value"
            (Obj.magic x44)
    let cast_from = Obj.magic
  end
module IteratorResult =
  struct
    type ('T, 'TReturn) t =
      [ `U_b_false of 'T IteratorYieldResult.t 
      | `U_b_true of 'TReturn IteratorReturnResult.t ]
    let rec t_of_js :
      'T 'TReturn .
        (Ojs.t -> 'T) -> (Ojs.t -> 'TReturn) -> Ojs.t -> ('T, 'TReturn) t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (x52 : Ojs.t) ->
            let x53 = x52 in
            match Ojs.bool_of_js (Ojs.get_prop_ascii x53 "done") with
            | false -> `U_b_false (IteratorYieldResult.t_of_js __T_of_js x53)
            | true ->
                `U_b_true (IteratorReturnResult.t_of_js __TReturn_of_js x53)
    and t_to_js :
      'T 'TReturn .
        ('T -> Ojs.t) -> ('TReturn -> Ojs.t) -> ('T, 'TReturn) t -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun
            (x47 :
              [ `U_b_false of __T IteratorYieldResult.t 
              | `U_b_true of __TReturn IteratorReturnResult.t ])
            ->
            match x47 with
            | `U_b_false x48 -> IteratorYieldResult.t_to_js __T_to_js x48
            | `U_b_true x50 ->
                IteratorReturnResult.t_to_js __TReturn_to_js x50
    type ('T, 'TReturn) t_2 = ('T, 'TReturn) t
    let rec t_2_of_js :
      'T 'TReturn .
        (Ojs.t -> 'T) -> (Ojs.t -> 'TReturn) -> Ojs.t -> ('T, 'TReturn) t_2
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (x59 : Ojs.t) -> t_of_js __T_of_js __TReturn_of_js x59
    and t_2_to_js :
      'T 'TReturn .
        ('T -> Ojs.t) -> ('TReturn -> Ojs.t) -> ('T, 'TReturn) t_2 -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (x56 : (__T, __TReturn) t) ->
            t_to_js __T_to_js __TReturn_to_js x56
    type 'T t_1 = ('T, any) t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x65 : Ojs.t) -> t_of_js __T_of_js any_of_js x65
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x62 : (__T, any) t) -> t_to_js __T_to_js any_to_js x62
  end
module Iterator =
  struct
    type ('T, 'TReturn, 'TNext) t =
      [ `Iterator of ('T * 'TReturn * 'TNext) ] intf
    let rec t_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t
      = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
    and t_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t -> Ojs.t
      = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
    type ('T, 'TReturn, 'TNext) t_3 = ('T, 'TReturn, 'TNext) t
    let rec t_3_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t_3
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (__TNext_of_js : Ojs.t -> __TNext) ->
            fun (x72 : Ojs.t) ->
              t_of_js __T_of_js __TReturn_of_js __TNext_of_js x72
    and t_3_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t_3 -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (__TNext_to_js : __TNext -> Ojs.t) ->
            fun (x68 : (__T, __TReturn, __TNext) t) ->
              t_to_js __T_to_js __TReturn_to_js __TNext_to_js x68
    type ('T, 'TReturn) t_2 = ('T, 'TReturn, never or_undefined) t
    let rec t_2_of_js :
      'T 'TReturn .
        (Ojs.t -> 'T) -> (Ojs.t -> 'TReturn) -> Ojs.t -> ('T, 'TReturn) t_2
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (x81 : Ojs.t) ->
            t_of_js __T_of_js __TReturn_of_js
              (fun (x84 : Ojs.t) -> or_undefined_of_js never_of_js x84) x81
    and t_2_to_js :
      'T 'TReturn .
        ('T -> Ojs.t) -> ('TReturn -> Ojs.t) -> ('T, 'TReturn) t_2 -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (x76 : (__T, __TReturn, never or_undefined) t) ->
            t_to_js __T_to_js __TReturn_to_js
              (fun (x79 : never or_undefined) ->
                 or_undefined_to_js never_to_js x79) x76
    type 'T t_1 = ('T, any, never or_undefined) t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x91 : Ojs.t) ->
          t_of_js __T_of_js any_of_js
            (fun (x94 : Ojs.t) -> or_undefined_of_js never_of_js x94) x91
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x86 : (__T, any, never or_undefined) t) ->
          t_to_js __T_to_js any_to_js
            (fun (x89 : never or_undefined) ->
               or_undefined_to_js never_to_js x89) x86
    type ('T, 'TReturn, 'TNext) tags =
      [ `Iterator of ('T * 'TReturn * 'TNext) ]
    type ('T, 'TReturn, 'TNext) tags_3 = ('T, 'TReturn, 'TNext) tags
    type ('T, 'TReturn) tags_2 = ('T, 'TReturn, never or_undefined) tags
    type 'T tags_1 = ('T, any, never or_undefined) tags
    type ('tags, 'T, 'TReturn, 'TNext) this =
      'tags intf constraint 'tags =
                  [> `Iterator of ('T * 'TReturn * 'TNext) ]
    let rec this_of_js :
      'tags 'T 'TReturn 'TNext .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'T) ->
            (Ojs.t -> 'TReturn) ->
              (Ojs.t -> 'TNext) ->
                Ojs.t -> ('tags, 'T, 'TReturn, 'TNext) this
      = fun (type __tags) -> fun (type __T) -> fun (type __TReturn) -> fun
      (type __TNext) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
            fun (__TNext_of_js : Ojs.t -> __TNext) ->
              fun (x98 : Ojs.t) -> intf_of_js __tags_of_js x98
    and this_to_js :
      'tags 'T 'TReturn 'TNext .
        ('tags -> Ojs.t) ->
          ('T -> Ojs.t) ->
            ('TReturn -> Ojs.t) ->
              ('TNext -> Ojs.t) ->
                ('tags, 'T, 'TReturn, 'TNext) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) -> fun (type __TReturn) -> fun
      (type __TNext) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
            fun (__TNext_to_js : __TNext -> Ojs.t) ->
              fun (x96 : __tags intf) -> intf_to_js __tags_to_js x96
    let (next :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        args:any list -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x103 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ~args:(x100 : any list) ->
          IteratorResult.t_of_js Obj.magic Obj.magic
            (let x108 =
               this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x103 in
             Ojs.call (Ojs.get_prop_ascii x108 "next") "apply"
               [|x108;((let x101 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x102 : any) ->
                             ignore
                               (Ojs.call x101 "push" [|(any_to_js x102)|]))
                          x100;
                        x101))|])
    let (return :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        ?value:'TReturn -> unit -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x114 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ?value:(x111 : 'TReturn option) ->
          fun () ->
            IteratorResult.t_of_js Obj.magic Obj.magic
              (let x119 =
                 this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x114 in
               Ojs.call (Ojs.get_prop_ascii x119 "return") "apply"
                 [|x119;((let x112 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x111 with
                           | Some x113 ->
                               ignore
                                 (Ojs.call x112 "push" [|(Obj.magic x113)|])
                           | None -> ());
                          x112))|])
    let (throw :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        ?e:any -> unit -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x125 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ?e:(x122 : any option) ->
          fun () ->
            IteratorResult.t_of_js Obj.magic Obj.magic
              (let x130 =
                 this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x125 in
               Ojs.call (Ojs.get_prop_ascii x130 "throw") "apply"
                 [|x130;((let x123 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x122 with
                           | Some x124 ->
                               ignore
                                 (Ojs.call x123 "push" [|(any_to_js x124)|])
                           | None -> ());
                          x123))|])
    let cast_from = Obj.magic
  end
module Iterable =
  struct
    type 'T t = [ `Iterable of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x135 : Ojs.t) -> t_of_js __T_of_js x135
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x133 : __T t) -> t_to_js __T_to_js x133
    type 'T tags = [ `Iterable of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `Iterable of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x139 : Ojs.t) -> intf_of_js __tags_of_js x139
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x137 : __tags intf) -> intf_to_js __tags_to_js x137
    let cast_from = Obj.magic
  end
module WeakSet =
  struct
    type 'T t = [ `WeakSet of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x143 : Ojs.t) -> t_of_js __T_of_js x143
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x141 : __T t) -> t_to_js __T_to_js x141
    type 'T tags = [ `WeakSet of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this = 'tags intf constraint 'tags = [> `WeakSet of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x147 : Ojs.t) -> intf_of_js __tags_of_js x147
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x145 : __tags intf) -> intf_to_js __tags_to_js x145
    let (add : ('tags, 'T) this -> value:'T -> ('tags, 'T) this) =
      fun (x150 : ('tags, 'T) this) ->
        fun ~value:(x149 : 'T) ->
          this_of_js Obj.magic Obj.magic
            (Ojs.call (this_to_js Obj.magic Obj.magic x150) "add"
               [|(Obj.magic x149)|])
    let (delete : ('tags, 'T) this -> value:'T -> bool) =
      fun (x156 : ('tags, 'T) this) ->
        fun ~value:(x155 : 'T) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic x156) "delete"
               [|(Obj.magic x155)|])
    let (has : ('tags, 'T) this -> value:'T -> bool) =
      fun (x160 : ('tags, 'T) this) ->
        fun ~value:(x159 : 'T) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic x160) "has"
               [|(Obj.magic x159)|])
    let (create : 'T Iterable.t -> 'T t) =
      fun (x163 : 'T Iterable.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WeakSet")
             [|(Iterable.t_to_js Obj.magic x163)|])
    let (create' : ?values:'T list or_null -> unit -> 'T t) =
      fun ?values:(x166 : 'T list or_null option) ->
        fun () ->
          t_of_js Obj.magic
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WeakSet")
               (let x167 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x166 with
                 | Some x168 ->
                     ignore
                       (Ojs.call x167 "push"
                          [|(or_null_to_js
                               (fun (x169 : 'T list) ->
                                  Ojs.list_to_js Obj.magic x169) x168)|])
                 | None -> ());
                x167))
    let (prototype : unit -> untyped_object t) =
      fun () ->
        t_of_js untyped_object_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WeakSet")
             "prototype")
    let cast_from = Obj.magic
  end
module WeakRef =
  struct
    type 'T t = [ `WeakRef of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x175 : Ojs.t) -> t_of_js __T_of_js x175
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x173 : __T t) -> t_to_js __T_to_js x173
    type 'T tags = [ `WeakRef of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this = 'tags intf constraint 'tags = [> `WeakRef of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x179 : Ojs.t) -> intf_of_js __tags_of_js x179
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x177 : __tags intf) -> intf_to_js __tags_to_js x177
    let (deref : ('tags, 'T) this -> 'T or_undefined) =
      fun (x181 : ('tags, 'T) this) ->
        or_undefined_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x181) "deref" [||])
    let (deref' : ('tags, 'T) this -> 'T or_undefined) =
      fun (x185 : ('tags, 'T) this) ->
        or_undefined_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x185) "deref" [||])
    let (prototype : unit -> any t) =
      fun () ->
        t_of_js any_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WeakRef")
             "prototype")
    let (create : ?target:'T -> unit -> 'T t) =
      fun ?target:(x190 : 'T option) ->
        fun () ->
          t_of_js Obj.magic
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WeakRef")
               (let x191 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x190 with
                 | Some x192 ->
                     ignore (Ojs.call x191 "push" [|(Obj.magic x192)|])
                 | None -> ());
                x191))
    let (prototype' : unit -> any t) =
      fun () ->
        t_of_js any_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WeakRef")
             "prototype")
    let (create' : 'T -> 'T t) =
      fun (x195 : 'T) ->
        t_of_js Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WeakRef")
             [|(Obj.magic x195)|])
    let cast_from = Obj.magic
  end
module WeakMap =
  struct
    type ('K, 'V) t = [ `WeakMap of ('K * 'V) ] intf
    let rec t_of_js :
      'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t =
      fun _K -> fun _V -> Obj.magic
    and t_to_js :
      'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t =
      fun _K -> fun _V -> Obj.magic
    type ('K, 'V) t_2 = ('K, 'V) t
    let rec t_2_of_js :
      'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t_2 = fun
      (type __K) -> fun (type __V) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__V_of_js : Ojs.t -> __V) ->
          fun (x200 : Ojs.t) -> t_of_js __K_of_js __V_of_js x200
    and t_2_to_js :
      'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t_2 -> Ojs.t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__V_to_js : __V -> Ojs.t) ->
          fun (x197 : (__K, __V) t) -> t_to_js __K_to_js __V_to_js x197
    type ('K, 'V) tags = [ `WeakMap of ('K * 'V) ]
    type ('K, 'V) tags_2 = ('K, 'V) tags
    type ('tags, 'K, 'V) this =
      'tags intf constraint 'tags = [> `WeakMap of ('K * 'V) ]
    let rec this_of_js :
      'tags 'K 'V .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('tags, 'K, 'V) this
      = fun (type __tags) -> fun (type __K) -> fun (type __V) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__K_of_js : Ojs.t -> __K) ->
          fun (__V_of_js : Ojs.t -> __V) ->
            fun (x205 : Ojs.t) -> intf_of_js __tags_of_js x205
    and this_to_js :
      'tags 'K 'V .
        ('tags -> Ojs.t) ->
          ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('tags, 'K, 'V) this -> Ojs.t
      = fun (type __tags) -> fun (type __K) -> fun (type __V) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) ->
          fun (__V_to_js : __V -> Ojs.t) ->
            fun (x203 : __tags intf) -> intf_to_js __tags_to_js x203
    let (delete : ('tags, 'K, 'V) this -> key:'K -> bool) =
      fun (x208 : ('tags, 'K, 'V) this) ->
        fun ~key:(x207 : 'K) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x208)
               "delete" [|(Obj.magic x207)|])
    let (get_ : ('tags, 'K, 'V) this -> key:'K -> 'V or_undefined) =
      fun (x213 : ('tags, 'K, 'V) this) ->
        fun ~key:(x212 : 'K) ->
          or_undefined_of_js Obj.magic
            (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x213) "get"
               [|(Obj.magic x212)|])
    let (has : ('tags, 'K, 'V) this -> key:'K -> bool) =
      fun (x219 : ('tags, 'K, 'V) this) ->
        fun ~key:(x218 : 'K) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x219) "has"
               [|(Obj.magic x218)|])
    let (set_ :
      ('tags, 'K, 'V) this -> key:'K -> value:'V -> ('tags, 'K, 'V) this) =
      fun (x225 : ('tags, 'K, 'V) this) ->
        fun ~key:(x223 : 'K) ->
          fun ~value:(x224 : 'V) ->
            this_of_js Obj.magic Obj.magic Obj.magic
              (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x225) "set"
                 [|(Obj.magic x223);(Obj.magic x224)|])
    let (create : ('K * 'V) Iterable.t -> ('K, 'V) t) =
      fun (x232 : ('K * 'V) Iterable.t) ->
        t_of_js Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WeakMap")
             [|(Iterable.t_to_js
                  (fun (x233 : ('K * 'V)) ->
                     let (x234, x235) = x233 in
                     let x236 = Ojs.array_make 2 in
                     Ojs.array_set x236 0 (Obj.magic x234);
                     Ojs.array_set x236 1 (Obj.magic x235);
                     x236) x232)|])
    let (create' : ?entries:('K * 'V) list or_null -> unit -> ('K, 'V) t) =
      fun ?entries:(x239 : ('K * 'V) list or_null option) ->
        fun () ->
          t_of_js Obj.magic Obj.magic
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WeakMap")
               (let x240 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x239 with
                 | Some x241 ->
                     ignore
                       (Ojs.call x240 "push"
                          [|(or_null_to_js
                               (fun (x242 : ('K * 'V) list) ->
                                  Ojs.list_to_js
                                    (fun (x243 : ('K * 'V)) ->
                                       let (x244, x245) = x243 in
                                       let x246 = Ojs.array_make 2 in
                                       Ojs.array_set x246 0 (Obj.magic x244);
                                       Ojs.array_set x246 1 (Obj.magic x245);
                                       x246) x242) x241)|])
                 | None -> ());
                x240))
    let (prototype : unit -> (untyped_object, any) t) =
      fun () ->
        t_of_js untyped_object_of_js any_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WeakMap")
             "prototype")
    let cast_from = Obj.magic
  end
module Uppercase =
  struct
    type 'S t = Ojs.t
    let rec t_of_js : 'S . (Ojs.t -> 'S) -> Ojs.t -> 'S t = fun (type __S) ->
      fun (__S_of_js : Ojs.t -> __S) -> fun (x252 : Ojs.t) -> x252
    and t_to_js : 'S . ('S -> Ojs.t) -> 'S t -> Ojs.t = fun (type __S) ->
      fun (__S_to_js : __S -> Ojs.t) -> fun (x251 : Ojs.t) -> x251
    type 'S t_1 = 'S t
    let rec t_1_of_js : 'S . (Ojs.t -> 'S) -> Ojs.t -> 'S t_1 = fun (type
      __S) ->
      fun (__S_of_js : Ojs.t -> __S) ->
        fun (x255 : Ojs.t) -> t_of_js __S_of_js x255
    and t_1_to_js : 'S . ('S -> Ojs.t) -> 'S t_1 -> Ojs.t = fun (type __S) ->
      fun (__S_to_js : __S -> Ojs.t) ->
        fun (x253 : __S t) -> t_to_js __S_to_js x253
  end
module Uncapitalize =
  struct
    type 'S t = Ojs.t
    let rec t_of_js : 'S . (Ojs.t -> 'S) -> Ojs.t -> 'S t = fun (type __S) ->
      fun (__S_of_js : Ojs.t -> __S) -> fun (x258 : Ojs.t) -> x258
    and t_to_js : 'S . ('S -> Ojs.t) -> 'S t -> Ojs.t = fun (type __S) ->
      fun (__S_to_js : __S -> Ojs.t) -> fun (x257 : Ojs.t) -> x257
    type 'S t_1 = 'S t
    let rec t_1_of_js : 'S . (Ojs.t -> 'S) -> Ojs.t -> 'S t_1 = fun (type
      __S) ->
      fun (__S_of_js : Ojs.t -> __S) ->
        fun (x261 : Ojs.t) -> t_of_js __S_of_js x261
    and t_1_to_js : 'S . ('S -> Ojs.t) -> 'S t_1 -> Ojs.t = fun (type __S) ->
      fun (__S_to_js : __S -> Ojs.t) ->
        fun (x259 : __S t) -> t_to_js __S_to_js x259
  end
module SharedArrayBuffer =
  struct
    type t = [ `SharedArrayBuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x264 : Ojs.t) -> t_of_js x264
    and t_0_to_js : t_0 -> Ojs.t = fun (x263 : t) -> t_to_js x263
    type tags = [ `SharedArrayBuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `SharedArrayBuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x267 : Ojs.t) -> intf_of_js __tags_of_js x267
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x265 : __tags intf) -> intf_to_js __tags_to_js x265
    let (get_byteLength : 'tags this -> float) =
      fun (x269 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x269) "byteLength")
    let (slice : 'tags this -> begin_:float -> ?end_:float -> unit -> t) =
      fun (x275 : 'tags this) ->
        fun ~begin_:(x271 : float) ->
          fun ?end_:(x272 : float option) ->
            fun () ->
              t_of_js
                (let x277 = this_to_js Obj.magic x275 in
                 Ojs.call (Ojs.get_prop_ascii x277 "slice") "apply"
                   [|x277;((let x273 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x273 "push"
                                 [|(Ojs.float_to_js x271)|]);
                            (match x272 with
                             | Some x274 ->
                                 ignore
                                   (Ojs.call x273 "push"
                                      [|(Ojs.float_to_js x274)|])
                             | None -> ());
                            x273))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SharedArrayBuffer") "prototype")
    let (create : float -> t) =
      fun (x278 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SharedArrayBuffer")
             [|(Ojs.float_to_js x278)|])
    let cast_from = Obj.magic
  end
module ArrayBuffer =
  struct
    type t = [ `ArrayBuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x280 : Ojs.t) -> t_of_js x280
    and t_0_to_js : t_0 -> Ojs.t = fun (x279 : t) -> t_to_js x279
    type tags = [ `ArrayBuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ArrayBuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x283 : Ojs.t) -> intf_of_js __tags_of_js x283
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x281 : __tags intf) -> intf_to_js __tags_to_js x281
    let (get_byteLength : 'tags this -> float) =
      fun (x285 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x285) "byteLength")
    let (slice : 'tags this -> begin_:float -> ?end_:float -> unit -> t) =
      fun (x291 : 'tags this) ->
        fun ~begin_:(x287 : float) ->
          fun ?end_:(x288 : float option) ->
            fun () ->
              t_of_js
                (let x293 = this_to_js Obj.magic x291 in
                 Ojs.call (Ojs.get_prop_ascii x293 "slice") "apply"
                   [|x293;((let x289 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x289 "push"
                                 [|(Ojs.float_to_js x287)|]);
                            (match x288 with
                             | Some x290 ->
                                 ignore
                                   (Ojs.call x289 "push"
                                      [|(Ojs.float_to_js x290)|])
                             | None -> ());
                            x289))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ArrayBuffer")
             "prototype")
    let (create : float -> t) =
      fun (x294 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ArrayBuffer")
             [|(Ojs.float_to_js x294)|])
    let (isView : any -> bool) =
      fun (x295 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "ArrayBuffer") "isView"
             [|(any_to_js x295)|])
    let cast_from = Obj.magic
  end
module ArrayBufferLike =
  struct
    type t = (ArrayBuffer.t, SharedArrayBuffer.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x299 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_of_js SharedArrayBuffer.t_of_js x299
    and t_to_js : t -> Ojs.t =
      fun (x296 : (ArrayBuffer.t, SharedArrayBuffer.t) union2) ->
        union2_to_js ArrayBuffer.t_to_js SharedArrayBuffer.t_to_js x296
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x303 : Ojs.t) -> t_of_js x303
    and t_0_to_js : t_0 -> Ojs.t = fun (x302 : t) -> t_to_js x302
  end
module IterableIterator =
  struct
    type 'T t =
      [ `IterableIterator of 'T 
      | `Iterator of ('T * any * never or_undefined) ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x306 : Ojs.t) -> t_of_js __T_of_js x306
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x304 : __T t) -> t_to_js __T_to_js x304
    type 'T tags =
      [ `IterableIterator of 'T 
      | `Iterator of ('T * any * never or_undefined) ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `IterableIterator of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x310 : Ojs.t) -> intf_of_js __tags_of_js x310
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x308 : __tags intf) -> intf_to_js __tags_to_js x308
    let cast_from = Obj.magic
  end
module ArrayLike =
  struct
    type 'T t = [ `ArrayLike of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x314 : Ojs.t) -> t_of_js __T_of_js x314
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x312 : __T t) -> t_to_js __T_to_js x312
    type 'T tags = [ `ArrayLike of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ArrayLike of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x318 : Ojs.t) -> intf_of_js __tags_of_js x318
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x316 : __tags intf) -> intf_to_js __tags_to_js x316
    let (get_length : ('tags, 'T) this -> float) =
      fun (x320 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x320) "length")
    let (get : ('tags, 'T) this -> float -> 'T) =
      fun (x323 : ('tags, 'T) this) ->
        fun (x326 : float) ->
          Obj.magic
            (Ojs.get_prop (this_to_js Obj.magic Obj.magic x323)
               (Ojs.float_to_js x326))
    let cast_from = Obj.magic
  end
module Uint8ClampedArray =
  struct
    type t =
      [ `ArrayLike of float  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) 
      | `Uint8ClampedArray ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x328 : Ojs.t) -> t_of_js x328
    and t_0_to_js : t_0 -> Ojs.t = fun (x327 : t) -> t_to_js x327
    type tags =
      [ `ArrayLike of float  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) 
      | `Uint8ClampedArray ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Uint8ClampedArray ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x331 : Ojs.t) -> intf_of_js __tags_of_js x331
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x329 : __tags intf) -> intf_to_js __tags_to_js x329
    let (entries : 'tags this -> (float * float) IterableIterator.t) =
      fun (x333 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x335 : Ojs.t) ->
             let x336 = x335 in
             ((Ojs.float_of_js (Ojs.array_get x336 0)),
               (Ojs.float_of_js (Ojs.array_get x336 1))))
          (Ojs.call (this_to_js Obj.magic x333) "entries" [||])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x337 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x337) "keys" [||])
    let (values : 'tags this -> float IterableIterator.t) =
      fun (x340 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x340) "values" [||])
    let (includes :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> bool)
      =
      fun (x347 : 'tags this) ->
        fun ~searchElement:(x343 : float) ->
          fun ?fromIndex:(x344 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x349 = this_to_js Obj.magic x347 in
                 Ojs.call (Ojs.get_prop_ascii x349 "includes") "apply"
                   [|x349;((let x345 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x345 "push"
                                 [|(Ojs.float_to_js x343)|]);
                            (match x344 with
                             | Some x346 ->
                                 ignore
                                   (Ojs.call x345 "push"
                                      [|(Ojs.float_to_js x346)|])
                             | None -> ());
                            x345))|])
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x350 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x350) "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x352 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x352) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x354 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x354) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x356 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x356) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x363 : 'tags this) ->
        fun ~target:(x358 : float) ->
          fun ~start:(x359 : float) ->
            fun ?end_:(x360 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x365 = this_to_js Obj.magic x363 in
                   Ojs.call (Ojs.get_prop_ascii x365 "copyWithin") "apply"
                     [|x365;((let x361 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x361 "push"
                                   [|(Ojs.float_to_js x358)|]);
                              ignore
                                (Ojs.call x361 "push"
                                   [|(Ojs.float_to_js x359)|]);
                              (match x360 with
                               | Some x362 ->
                                   ignore
                                     (Ojs.call x361 "push"
                                        [|(Ojs.float_to_js x362)|])
                               | None -> ());
                              x361))|])
    let (every :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x374 : 'tags this) ->
        fun
          ~predicate:(x367 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x368 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x376 = this_to_js Obj.magic x374 in
                 Ojs.call (Ojs.get_prop_ascii x376 "every") "apply"
                   [|x376;((let x369 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x369 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x371 : Ojs.t) ->
                                         fun (x372 : Ojs.t) ->
                                           fun (x373 : Ojs.t) ->
                                             unknown_to_js
                                               (x367
                                                  ~value:(Ojs.float_of_js
                                                            x371)
                                                  ~index:(Ojs.float_of_js
                                                            x372)
                                                  ~array:(t_of_js x373))))|]);
                            (match x368 with
                             | Some x370 ->
                                 ignore
                                   (Ojs.call x369 "push" [|(any_to_js x370)|])
                             | None -> ());
                            x369))|])
    let (fill :
      'tags this ->
        value:float -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x383 : 'tags this) ->
        fun ~value:(x377 : float) ->
          fun ?start:(x378 : float option) ->
            fun ?end_:(x379 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x385 = this_to_js Obj.magic x383 in
                   Ojs.call (Ojs.get_prop_ascii x385 "fill") "apply"
                     [|x385;((let x380 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x380 "push"
                                   [|(Ojs.float_to_js x377)|]);
                              (match x378 with
                               | Some x382 ->
                                   ignore
                                     (Ojs.call x380 "push"
                                        [|(Ojs.float_to_js x382)|])
                               | None -> ());
                              (match x379 with
                               | Some x381 ->
                                   ignore
                                     (Ojs.call x380 "push"
                                        [|(Ojs.float_to_js x381)|])
                               | None -> ());
                              x380))|])
    let (filter :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x394 : 'tags this) ->
        fun ~predicate:(x387 : value:float -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x388 : any option) ->
            fun () ->
              t_of_js
                (let x396 = this_to_js Obj.magic x394 in
                 Ojs.call (Ojs.get_prop_ascii x396 "filter") "apply"
                   [|x396;((let x389 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x389 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x391 : Ojs.t) ->
                                         fun (x392 : Ojs.t) ->
                                           fun (x393 : Ojs.t) ->
                                             any_to_js
                                               (x387
                                                  ~value:(Ojs.float_of_js
                                                            x391)
                                                  ~index:(Ojs.float_of_js
                                                            x392)
                                                  ~array:(t_of_js x393))))|]);
                            (match x388 with
                             | Some x390 ->
                                 ignore
                                   (Ojs.call x389 "push" [|(any_to_js x390)|])
                             | None -> ());
                            x389))|])
    let (find :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float or_undefined)
      =
      fun (x404 : 'tags this) ->
        fun ~predicate:(x397 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x398 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.float_of_js
                (let x406 = this_to_js Obj.magic x404 in
                 Ojs.call (Ojs.get_prop_ascii x406 "find") "apply"
                   [|x406;((let x399 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x399 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x401 : Ojs.t) ->
                                         fun (x402 : Ojs.t) ->
                                           fun (x403 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x397
                                                  ~value:(Ojs.float_of_js
                                                            x401)
                                                  ~index:(Ojs.float_of_js
                                                            x402)
                                                  ~obj:(t_of_js x403))))|]);
                            (match x398 with
                             | Some x400 ->
                                 ignore
                                   (Ojs.call x399 "push" [|(any_to_js x400)|])
                             | None -> ());
                            x399))|])
    let (findIndex :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x415 : 'tags this) ->
        fun ~predicate:(x408 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x409 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x417 = this_to_js Obj.magic x415 in
                 Ojs.call (Ojs.get_prop_ascii x417 "findIndex") "apply"
                   [|x417;((let x410 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x410 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x412 : Ojs.t) ->
                                         fun (x413 : Ojs.t) ->
                                           fun (x414 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x408
                                                  ~value:(Ojs.float_of_js
                                                            x412)
                                                  ~index:(Ojs.float_of_js
                                                            x413)
                                                  ~obj:(t_of_js x414))))|]);
                            (match x409 with
                             | Some x411 ->
                                 ignore
                                   (Ojs.call x410 "push" [|(any_to_js x411)|])
                             | None -> ());
                            x410))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x425 : 'tags this) ->
        fun
          ~callbackfn:(x418 : value:float -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x419 : any option) ->
            fun () ->
              ignore
                (let x427 = this_to_js Obj.magic x425 in
                 Ojs.call (Ojs.get_prop_ascii x427 "forEach") "apply"
                   [|x427;((let x420 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x420 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x422 : Ojs.t) ->
                                         fun (x423 : Ojs.t) ->
                                           fun (x424 : Ojs.t) ->
                                             x418
                                               ~value:(Ojs.float_of_js x422)
                                               ~index:(Ojs.float_of_js x423)
                                               ~array:(t_of_js x424)))|]);
                            (match x419 with
                             | Some x421 ->
                                 ignore
                                   (Ojs.call x420 "push" [|(any_to_js x421)|])
                             | None -> ());
                            x420))|])
    let (indexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x432 : 'tags this) ->
        fun ~searchElement:(x428 : float) ->
          fun ?fromIndex:(x429 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x434 = this_to_js Obj.magic x432 in
                 Ojs.call (Ojs.get_prop_ascii x434 "indexOf") "apply"
                   [|x434;((let x430 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x430 "push"
                                 [|(Ojs.float_to_js x428)|]);
                            (match x429 with
                             | Some x431 ->
                                 ignore
                                   (Ojs.call x430 "push"
                                      [|(Ojs.float_to_js x431)|])
                             | None -> ());
                            x430))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x438 : 'tags this) ->
        fun ?separator:(x435 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x440 = this_to_js Obj.magic x438 in
               Ojs.call (Ojs.get_prop_ascii x440 "join") "apply"
                 [|x440;((let x436 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x435 with
                           | Some x437 ->
                               ignore
                                 (Ojs.call x436 "push"
                                    [|(Ojs.string_to_js x437)|])
                           | None -> ());
                          x436))|])
    let (lastIndexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x445 : 'tags this) ->
        fun ~searchElement:(x441 : float) ->
          fun ?fromIndex:(x442 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x447 = this_to_js Obj.magic x445 in
                 Ojs.call (Ojs.get_prop_ascii x447 "lastIndexOf") "apply"
                   [|x447;((let x443 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x443 "push"
                                 [|(Ojs.float_to_js x441)|]);
                            (match x442 with
                             | Some x444 ->
                                 ignore
                                   (Ojs.call x443 "push"
                                      [|(Ojs.float_to_js x444)|])
                             | None -> ());
                            x443))|])
    let (get_length : 'tags this -> float) =
      fun (x448 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x448) "length")
    let (map :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> float) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x457 : 'tags this) ->
        fun
          ~callbackfn:(x450 : value:float -> index:float -> array:t -> float)
          ->
          fun ?thisArg:(x451 : any option) ->
            fun () ->
              t_of_js
                (let x459 = this_to_js Obj.magic x457 in
                 Ojs.call (Ojs.get_prop_ascii x459 "map") "apply"
                   [|x459;((let x452 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x452 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x454 : Ojs.t) ->
                                         fun (x455 : Ojs.t) ->
                                           fun (x456 : Ojs.t) ->
                                             Ojs.float_to_js
                                               (x450
                                                  ~value:(Ojs.float_of_js
                                                            x454)
                                                  ~index:(Ojs.float_of_js
                                                            x455)
                                                  ~array:(t_of_js x456))))|]);
                            (match x451 with
                             | Some x453 ->
                                 ignore
                                   (Ojs.call x452 "push" [|(any_to_js x453)|])
                             | None -> ());
                            x452))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x465 : 'tags this) ->
        fun
          ~callbackfn:(x460 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x465) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x461 : Ojs.t) ->
                       fun (x462 : Ojs.t) ->
                         fun (x463 : Ojs.t) ->
                           fun (x464 : Ojs.t) ->
                             Ojs.float_to_js
                               (x460 ~previousValue:(Ojs.float_of_js x461)
                                  ~currentValue:(Ojs.float_of_js x462)
                                  ~currentIndex:(Ojs.float_of_js x463)
                                  ~array:(t_of_js x464))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x473 : 'tags this) ->
        fun
          ~callbackfn:(x467 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x472 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x473) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x468 : Ojs.t) ->
                         fun (x469 : Ojs.t) ->
                           fun (x470 : Ojs.t) ->
                             fun (x471 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x467 ~previousValue:(Ojs.float_of_js x468)
                                    ~currentValue:(Ojs.float_of_js x469)
                                    ~currentIndex:(Ojs.float_of_js x470)
                                    ~array:(t_of_js x471))));(Ojs.float_to_js
                                                                x472)|])
    let (reduce'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x481 : 'tags this) ->
        fun
          ~callbackfn:(x475 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x480 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x481) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x476 : Ojs.t) ->
                         fun (x477 : Ojs.t) ->
                           fun (x478 : Ojs.t) ->
                             fun (x479 : Ojs.t) ->
                               Obj.magic
                                 (x475 ~previousValue:(Obj.magic x476)
                                    ~currentValue:(Ojs.float_of_js x477)
                                    ~currentIndex:(Ojs.float_of_js x478)
                                    ~array:(t_of_js x479))));(Obj.magic x480)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x488 : 'tags this) ->
        fun
          ~callbackfn:(x483 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x488) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x484 : Ojs.t) ->
                       fun (x485 : Ojs.t) ->
                         fun (x486 : Ojs.t) ->
                           fun (x487 : Ojs.t) ->
                             Ojs.float_to_js
                               (x483 ~previousValue:(Ojs.float_of_js x484)
                                  ~currentValue:(Ojs.float_of_js x485)
                                  ~currentIndex:(Ojs.float_of_js x486)
                                  ~array:(t_of_js x487))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x496 : 'tags this) ->
        fun
          ~callbackfn:(x490 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x495 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x496) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x491 : Ojs.t) ->
                         fun (x492 : Ojs.t) ->
                           fun (x493 : Ojs.t) ->
                             fun (x494 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x490 ~previousValue:(Ojs.float_of_js x491)
                                    ~currentValue:(Ojs.float_of_js x492)
                                    ~currentIndex:(Ojs.float_of_js x493)
                                    ~array:(t_of_js x494))));(Ojs.float_to_js
                                                                x495)|])
    let (reduceRight'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x504 : 'tags this) ->
        fun
          ~callbackfn:(x498 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x503 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x504) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x499 : Ojs.t) ->
                         fun (x500 : Ojs.t) ->
                           fun (x501 : Ojs.t) ->
                             fun (x502 : Ojs.t) ->
                               Obj.magic
                                 (x498 ~previousValue:(Obj.magic x499)
                                    ~currentValue:(Ojs.float_of_js x500)
                                    ~currentIndex:(Ojs.float_of_js x501)
                                    ~array:(t_of_js x502))));(Obj.magic x503)|])
    let (reverse : 'tags this -> t) =
      fun (x506 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x506) "reverse" [||])
    let (set_ :
      'tags this -> array:float ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x513 : 'tags this) ->
        fun ~array:(x508 : float ArrayLike.t) ->
          fun ?offset:(x509 : float option) ->
            fun () ->
              ignore
                (let x515 = this_to_js Obj.magic x513 in
                 Ojs.call (Ojs.get_prop_ascii x515 "set") "apply"
                   [|x515;((let x510 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x510 "push"
                                 [|(ArrayLike.t_to_js Ojs.float_to_js x508)|]);
                            (match x509 with
                             | Some x511 ->
                                 ignore
                                   (Ojs.call x510 "push"
                                      [|(Ojs.float_to_js x511)|])
                             | None -> ());
                            x510))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x521 : 'tags this) ->
        fun ?start:(x516 : float option) ->
          fun ?end_:(x517 : float option) ->
            fun () ->
              t_of_js
                (let x523 = this_to_js Obj.magic x521 in
                 Ojs.call (Ojs.get_prop_ascii x523 "slice") "apply"
                   [|x523;((let x518 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x516 with
                             | Some x520 ->
                                 ignore
                                   (Ojs.call x518 "push"
                                      [|(Ojs.float_to_js x520)|])
                             | None -> ());
                            (match x517 with
                             | Some x519 ->
                                 ignore
                                   (Ojs.call x518 "push"
                                      [|(Ojs.float_to_js x519)|])
                             | None -> ());
                            x518))|])
    let (some :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x531 : 'tags this) ->
        fun
          ~predicate:(x524 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x525 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x533 = this_to_js Obj.magic x531 in
                 Ojs.call (Ojs.get_prop_ascii x533 "some") "apply"
                   [|x533;((let x526 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x526 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x528 : Ojs.t) ->
                                         fun (x529 : Ojs.t) ->
                                           fun (x530 : Ojs.t) ->
                                             unknown_to_js
                                               (x524
                                                  ~value:(Ojs.float_of_js
                                                            x528)
                                                  ~index:(Ojs.float_of_js
                                                            x529)
                                                  ~array:(t_of_js x530))))|]);
                            (match x525 with
                             | Some x527 ->
                                 ignore
                                   (Ojs.call x526 "push" [|(any_to_js x527)|])
                             | None -> ());
                            x526))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:float -> b:float -> float) -> unit -> 'tags this)
      =
      fun (x539 : 'tags this) ->
        fun ?compareFn:(x534 : (a:float -> b:float -> float) option) ->
          fun () ->
            this_of_js Obj.magic
              (let x541 = this_to_js Obj.magic x539 in
               Ojs.call (Ojs.get_prop_ascii x541 "sort") "apply"
                 [|x541;((let x535 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x534 with
                           | Some x536 ->
                               ignore
                                 (Ojs.call x535 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x537 : Ojs.t) ->
                                            fun (x538 : Ojs.t) ->
                                              Ojs.float_to_js
                                                (x536
                                                   ~a:(Ojs.float_of_js x537)
                                                   ~b:(Ojs.float_of_js x538))))|])
                           | None -> ());
                          x535))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x548 : 'tags this) ->
        fun ?begin_:(x543 : float option) ->
          fun ?end_:(x544 : float option) ->
            fun () ->
              t_of_js
                (let x550 = this_to_js Obj.magic x548 in
                 Ojs.call (Ojs.get_prop_ascii x550 "subarray") "apply"
                   [|x550;((let x545 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x543 with
                             | Some x547 ->
                                 ignore
                                   (Ojs.call x545 "push"
                                      [|(Ojs.float_to_js x547)|])
                             | None -> ());
                            (match x544 with
                             | Some x546 ->
                                 ignore
                                   (Ojs.call x545 "push"
                                      [|(Ojs.float_to_js x546)|])
                             | None -> ());
                            x545))|])
    let (toLocaleString : 'tags this -> string) =
      fun (x551 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x551) "toLocaleString" [||])
    let (toString : 'tags this -> string) =
      fun (x553 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x553) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x555 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x555) "valueOf" [||])
    let (get : 'tags this -> float -> float) =
      fun (x557 : 'tags this) ->
        fun (x559 : float) ->
          Ojs.float_of_js
            (Ojs.get_prop (this_to_js Obj.magic x557) (Ojs.float_to_js x559))
    let (set : 'tags this -> float -> float -> unit) =
      fun (x560 : 'tags this) ->
        fun (x562 : float) ->
          fun (x563 : float) ->
            Ojs.set_prop (this_to_js Obj.magic x560) (Ojs.float_to_js x562)
              (Ojs.float_to_js x563)
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             [||])
    let (create' : float Iterable.t -> t) =
      fun (x564 : float Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             [|(Iterable.t_to_js Ojs.float_to_js x564)|])
    let (from :
      arrayLike:float Iterable.t ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x566 : float Iterable.t) ->
        fun ?mapfn:(x567 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x568 : any option) ->
            fun () ->
              t_of_js
                (let x575 = Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
                 Ojs.call (Ojs.get_prop_ascii x575 "from") "apply"
                   [|x575;((let x569 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x569 "push"
                                 [|(Iterable.t_to_js Ojs.float_to_js x566)|]);
                            (match x567 with
                             | Some x571 ->
                                 ignore
                                   (Ojs.call x569 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x572 : Ojs.t) ->
                                              fun (x573 : Ojs.t) ->
                                                Ojs.float_to_js
                                                  (x571
                                                     ~v:(Ojs.float_of_js x572)
                                                     ~k:(Ojs.float_of_js x573))))|])
                             | None -> ());
                            (match x568 with
                             | Some x570 ->
                                 ignore
                                   (Ojs.call x569 "push" [|(any_to_js x570)|])
                             | None -> ());
                            x569))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray") "prototype")
    let (create'' : float -> t) =
      fun (x576 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             [|(Ojs.float_to_js x576)|])
    let (create''' : (ArrayBufferLike.t, float ArrayLike.t) union2 -> t) =
      fun (x577 : (ArrayBufferLike.t, float ArrayLike.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             [|(union2_to_js ArrayBufferLike.t_to_js
                  (fun (x579 : float ArrayLike.t) ->
                     ArrayLike.t_to_js Ojs.float_to_js x579) x577)|])
    let (create'''' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x581 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x582 : float option) ->
          fun ?length:(x583 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
                   (let x584 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x584 "push"
                         [|(ArrayBufferLike.t_to_js x581)|]);
                    (match x582 with
                     | Some x586 ->
                         ignore
                           (Ojs.call x584 "push" [|(Ojs.float_to_js x586)|])
                     | None -> ());
                    (match x583 with
                     | Some x585 ->
                         ignore
                           (Ojs.call x584 "push" [|(Ojs.float_to_js x585)|])
                     | None -> ());
                    x584))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             "BYTES_PER_ELEMENT")
    let (of_ : float list -> t) =
      fun (x587 : float list) ->
        t_of_js
          (let x590 = Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
           Ojs.call (Ojs.get_prop_ascii x590 "of") "apply"
             [|x590;((let x588 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      List.iter
                        (fun (x589 : float) ->
                           ignore
                             (Ojs.call x588 "push" [|(Ojs.float_to_js x589)|]))
                        x587;
                      x588))|])
    let (from' : float ArrayLike.t -> t) =
      fun (x591 : float ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             "from" [|(ArrayLike.t_to_js Ojs.float_to_js x591)|])
    let (from'' :
      arrayLike:'T ArrayLike.t ->
        mapfn:(v:'T -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x593 : 'T ArrayLike.t) ->
        fun ~mapfn:(x594 : v:'T -> k:float -> float) ->
          fun ?thisArg:(x595 : any option) ->
            fun () ->
              t_of_js
                (let x601 = Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
                 Ojs.call (Ojs.get_prop_ascii x601 "from") "apply"
                   [|x601;((let x596 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x596 "push"
                                 [|(ArrayLike.t_to_js Obj.magic x593)|]);
                            ignore
                              (Ojs.call x596 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x598 : Ojs.t) ->
                                         fun (x599 : Ojs.t) ->
                                           Ojs.float_to_js
                                             (x594 ~v:(Obj.magic x598)
                                                ~k:(Ojs.float_of_js x599))))|]);
                            (match x595 with
                             | Some x597 ->
                                 ignore
                                   (Ojs.call x596 "push" [|(any_to_js x597)|])
                             | None -> ());
                            x596))|])
    let cast_from = Obj.magic
  end
module Error =
  struct
    type t = [ `Error ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x603 : Ojs.t) -> t_of_js x603
    and t_0_to_js : t_0 -> Ojs.t = fun (x602 : t) -> t_to_js x602
    type tags = [ `Error ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Error ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x606 : Ojs.t) -> intf_of_js __tags_of_js x606
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x604 : __tags intf) -> intf_to_js __tags_to_js x604
    let (get_name : 'tags this -> string) =
      fun (x608 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x608) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x610 : 'tags this) ->
        fun (x611 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x610) "name"
            (Ojs.string_to_js x611)
    let (get_message : 'tags this -> string) =
      fun (x613 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x613) "message")
    let (set_message : 'tags this -> string -> unit) =
      fun (x615 : 'tags this) ->
        fun (x616 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x615) "message"
            (Ojs.string_to_js x616)
    let (get_stack : 'tags this -> string) =
      fun (x618 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x618) "stack")
    let (set_stack : 'tags this -> string -> unit) =
      fun (x620 : 'tags this) ->
        fun (x621 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x620) "stack"
            (Ojs.string_to_js x621)
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x623 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Error")
               (let x624 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x623 with
                 | Some x625 ->
                     ignore
                       (Ojs.call x624 "push" [|(Ojs.string_to_js x625)|])
                 | None -> ());
                x624))
    let (invoke : ?message:string -> unit -> t) =
      fun ?message:(x626 : string option) ->
        fun () ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Error") "apply"
               [|Ojs.null;((let x627 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x626 with
                             | Some x628 ->
                                 ignore
                                   (Ojs.call x627 "push"
                                      [|(Ojs.string_to_js x628)|])
                             | None -> ());
                            x627))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Error")
             "prototype")
    let cast_from = Obj.magic
  end
module URIError =
  struct
    type t = [ `Error  | `URIError ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x630 : Ojs.t) -> t_of_js x630
    and t_0_to_js : t_0 -> Ojs.t = fun (x629 : t) -> t_to_js x629
    type tags = [ `Error  | `URIError ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URIError ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x633 : Ojs.t) -> intf_of_js __tags_of_js x633
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x631 : __tags intf) -> intf_to_js __tags_to_js x631
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x635 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URIError")
               (let x636 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x635 with
                 | Some x637 ->
                     ignore
                       (Ojs.call x636 "push" [|(Ojs.string_to_js x637)|])
                 | None -> ());
                x636))
    let (invoke : ?message:string -> unit -> t) =
      fun ?message:(x638 : string option) ->
        fun () ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "URIError") "apply"
               [|Ojs.null;((let x639 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x638 with
                             | Some x640 ->
                                 ignore
                                   (Ojs.call x639 "push"
                                      [|(Ojs.string_to_js x640)|])
                             | None -> ());
                            x639))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "URIError")
             "prototype")
    let cast_from = Obj.magic
  end
module TypeError =
  struct
    type t = [ `Error  | `TypeError ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x642 : Ojs.t) -> t_of_js x642
    and t_0_to_js : t_0 -> Ojs.t = fun (x641 : t) -> t_to_js x641
    type tags = [ `Error  | `TypeError ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TypeError ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x645 : Ojs.t) -> intf_of_js __tags_of_js x645
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x643 : __tags intf) -> intf_to_js __tags_to_js x643
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x647 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TypeError")
               (let x648 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x647 with
                 | Some x649 ->
                     ignore
                       (Ojs.call x648 "push" [|(Ojs.string_to_js x649)|])
                 | None -> ());
                x648))
    let (invoke : ?message:string -> unit -> t) =
      fun ?message:(x650 : string option) ->
        fun () ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "TypeError") "apply"
               [|Ojs.null;((let x651 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x650 with
                             | Some x652 ->
                                 ignore
                                   (Ojs.call x651 "push"
                                      [|(Ojs.string_to_js x652)|])
                             | None -> ());
                            x651))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TypeError")
             "prototype")
    let cast_from = Obj.magic
  end
module FlatArray =
  struct
    type ('Arr, 'Depth) t = any
    let rec t_of_js :
      'Arr 'Depth .
        (Ojs.t -> 'Arr) -> (Ojs.t -> 'Depth) -> Ojs.t -> ('Arr, 'Depth) t
      = fun (type __Arr) -> fun (type __Depth) ->
      fun (__Arr_of_js : Ojs.t -> __Arr) ->
        fun (__Depth_of_js : Ojs.t -> __Depth) ->
          fun (x654 : Ojs.t) -> any_of_js x654
    and t_to_js :
      'Arr 'Depth .
        ('Arr -> Ojs.t) -> ('Depth -> Ojs.t) -> ('Arr, 'Depth) t -> Ojs.t
      = fun (type __Arr) -> fun (type __Depth) ->
      fun (__Arr_to_js : __Arr -> Ojs.t) ->
        fun (__Depth_to_js : __Depth -> Ojs.t) ->
          fun (x653 : any) -> any_to_js x653
    type ('Arr, 'Depth) t_2 = ('Arr, 'Depth) t
    let rec t_2_of_js :
      'Arr 'Depth .
        (Ojs.t -> 'Arr) -> (Ojs.t -> 'Depth) -> Ojs.t -> ('Arr, 'Depth) t_2
      = fun (type __Arr) -> fun (type __Depth) ->
      fun (__Arr_of_js : Ojs.t -> __Arr) ->
        fun (__Depth_of_js : Ojs.t -> __Depth) ->
          fun (x658 : Ojs.t) -> t_of_js __Arr_of_js __Depth_of_js x658
    and t_2_to_js :
      'Arr 'Depth .
        ('Arr -> Ojs.t) -> ('Depth -> Ojs.t) -> ('Arr, 'Depth) t_2 -> Ojs.t
      = fun (type __Arr) -> fun (type __Depth) ->
      fun (__Arr_to_js : __Arr -> Ojs.t) ->
        fun (__Depth_to_js : __Depth -> Ojs.t) ->
          fun (x655 : (__Arr, __Depth) t) ->
            t_to_js __Arr_to_js __Depth_to_js x655
  end
module ConcatArray =
  struct
    type 'T t = [ `ArrayLike of 'T  | `ConcatArray of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x663 : Ojs.t) -> t_of_js __T_of_js x663
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x661 : __T t) -> t_to_js __T_to_js x661
    type 'T tags = [ `ArrayLike of 'T  | `ConcatArray of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ConcatArray of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x667 : Ojs.t) -> intf_of_js __tags_of_js x667
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x665 : __tags intf) -> intf_to_js __tags_to_js x665
    let (get_length : ('tags, 'T) this -> float) =
      fun (x669 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x669) "length")
    let (get : ('tags, 'T) this -> float -> 'T) =
      fun (x672 : ('tags, 'T) this) ->
        fun (x675 : float) ->
          Obj.magic
            (Ojs.get_prop (this_to_js Obj.magic Obj.magic x672)
               (Ojs.float_to_js x675))
    let (join : ('tags, 'T) this -> ?separator:string -> unit -> string) =
      fun (x679 : ('tags, 'T) this) ->
        fun ?separator:(x676 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x682 = this_to_js Obj.magic Obj.magic x679 in
               Ojs.call (Ojs.get_prop_ascii x682 "join") "apply"
                 [|x682;((let x677 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x676 with
                           | Some x678 ->
                               ignore
                                 (Ojs.call x677 "push"
                                    [|(Ojs.string_to_js x678)|])
                           | None -> ());
                          x677))|])
    let (slice :
      ('tags, 'T) this -> ?start:float -> ?end_:float -> unit -> 'T list) =
      fun (x688 : ('tags, 'T) this) ->
        fun ?start:(x683 : float option) ->
          fun ?end_:(x684 : float option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x691 = this_to_js Obj.magic Obj.magic x688 in
                 Ojs.call (Ojs.get_prop_ascii x691 "slice") "apply"
                   [|x691;((let x685 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x683 with
                             | Some x687 ->
                                 ignore
                                   (Ojs.call x685 "push"
                                      [|(Ojs.float_to_js x687)|])
                             | None -> ());
                            (match x684 with
                             | Some x686 ->
                                 ignore
                                   (Ojs.call x685 "push"
                                      [|(Ojs.float_to_js x686)|])
                             | None -> ());
                            x685))|])
    let cast_from = Obj.magic
  end
module ReadonlyArray =
  struct
    type 'T t =
      [ `ArrayLike of 'T  | `IterableIterator of 'T 
      | `Iterator of ('T * any * never or_undefined) 
      | `ReadonlyArray of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x695 : Ojs.t) -> t_of_js __T_of_js x695
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x693 : __T t) -> t_to_js __T_to_js x693
    type 'T tags =
      [ `ArrayLike of 'T  | `IterableIterator of 'T 
      | `Iterator of ('T * any * never or_undefined) 
      | `ReadonlyArray of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ReadonlyArray of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x699 : Ojs.t) -> intf_of_js __tags_of_js x699
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x697 : __tags intf) -> intf_to_js __tags_to_js x697
    let (entries : ('tags, 'T) this -> (float * 'T) IterableIterator.t) =
      fun (x701 : ('tags, 'T) this) ->
        IterableIterator.t_of_js
          (fun (x704 : Ojs.t) ->
             let x705 = x704 in
             ((Ojs.float_of_js (Ojs.array_get x705 0)),
               (Obj.magic (Ojs.array_get x705 1))))
          (Ojs.call (this_to_js Obj.magic Obj.magic x701) "entries" [||])
    let (keys : ('tags, 'T) this -> float IterableIterator.t) =
      fun (x706 : ('tags, 'T) this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x706) "keys" [||])
    let (values : ('tags, 'T) this -> 'T IterableIterator.t) =
      fun (x710 : ('tags, 'T) this) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x710) "values" [||])
    let (includes :
      ('tags, 'T) this ->
        searchElement:'T -> ?fromIndex:float -> unit -> bool)
      =
      fun (x718 : ('tags, 'T) this) ->
        fun ~searchElement:(x714 : 'T) ->
          fun ?fromIndex:(x715 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x721 = this_to_js Obj.magic Obj.magic x718 in
                 Ojs.call (Ojs.get_prop_ascii x721 "includes") "apply"
                   [|x721;((let x716 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x716 "push" [|(Obj.magic x714)|]);
                            (match x715 with
                             | Some x717 ->
                                 ignore
                                   (Ojs.call x716 "push"
                                      [|(Ojs.float_to_js x717)|])
                             | None -> ());
                            x716))|])
    let (find :
      ('tags, 'T) this ->
        predicate:(this:unit ->
                     value:'T -> index:float -> obj:'T list -> bool)
          -> ?thisArg:any -> unit -> 'S or_undefined)
      =
      fun (x731 : ('tags, 'T) this) ->
        fun
          ~predicate:(x722 :
                       this:unit ->
                         value:'T -> index:float -> obj:'T list -> bool)
          ->
          fun ?thisArg:(x723 : any option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x734 = this_to_js Obj.magic Obj.magic x731 in
                 Ojs.call (Ojs.get_prop_ascii x734 "find") "apply"
                   [|x734;((let x724 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x724 "push"
                                 [|(Ojs.fun_to_js 4
                                      (fun (x726 : Ojs.t) ->
                                         fun (x727 : Ojs.t) ->
                                           fun (x728 : Ojs.t) ->
                                             fun (x729 : Ojs.t) ->
                                               Ojs.bool_to_js
                                                 (x722
                                                    ~this:(Ojs.unit_of_js
                                                             x726)
                                                    ~value:(Obj.magic x727)
                                                    ~index:(Ojs.float_of_js
                                                              x728)
                                                    ~obj:(Ojs.list_of_js
                                                            Obj.magic x729))))|]);
                            (match x723 with
                             | Some x725 ->
                                 ignore
                                   (Ojs.call x724 "push" [|(any_to_js x725)|])
                             | None -> ());
                            x724))|])
    let (find' :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> obj:'T list -> unknown) ->
          ?thisArg:any -> unit -> 'T or_undefined)
      =
      fun (x744 : ('tags, 'T) this) ->
        fun
          ~predicate:(x736 :
                       value:'T -> index:float -> obj:'T list -> unknown)
          ->
          fun ?thisArg:(x737 : any option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x747 = this_to_js Obj.magic Obj.magic x744 in
                 Ojs.call (Ojs.get_prop_ascii x747 "find") "apply"
                   [|x747;((let x738 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x738 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x740 : Ojs.t) ->
                                         fun (x741 : Ojs.t) ->
                                           fun (x742 : Ojs.t) ->
                                             unknown_to_js
                                               (x736 ~value:(Obj.magic x740)
                                                  ~index:(Ojs.float_of_js
                                                            x741)
                                                  ~obj:(Ojs.list_of_js
                                                          Obj.magic x742))))|]);
                            (match x737 with
                             | Some x739 ->
                                 ignore
                                   (Ojs.call x738 "push" [|(any_to_js x739)|])
                             | None -> ());
                            x738))|])
    let (findIndex :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> obj:'T list -> unknown) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x757 : ('tags, 'T) this) ->
        fun
          ~predicate:(x749 :
                       value:'T -> index:float -> obj:'T list -> unknown)
          ->
          fun ?thisArg:(x750 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x760 = this_to_js Obj.magic Obj.magic x757 in
                 Ojs.call (Ojs.get_prop_ascii x760 "findIndex") "apply"
                   [|x760;((let x751 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x751 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x753 : Ojs.t) ->
                                         fun (x754 : Ojs.t) ->
                                           fun (x755 : Ojs.t) ->
                                             unknown_to_js
                                               (x749 ~value:(Obj.magic x753)
                                                  ~index:(Ojs.float_of_js
                                                            x754)
                                                  ~obj:(Ojs.list_of_js
                                                          Obj.magic x755))))|]);
                            (match x750 with
                             | Some x752 ->
                                 ignore
                                   (Ojs.call x751 "push" [|(any_to_js x752)|])
                             | None -> ());
                            x751))|])
    let (flatMap :
      ('tags, 'T) this ->
        callback:(this:'This ->
                    value:'T ->
                      index:float -> array:'T list -> ('U, 'U t) union2)
          -> ?thisArg:'This -> unit -> 'U list)
      =
      fun (x773 : ('tags, 'T) this) ->
        fun
          ~callback:(x761 :
                      this:'This ->
                        value:'T ->
                          index:float -> array:'T list -> ('U, 'U t) union2)
          ->
          fun ?thisArg:(x762 : 'This option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x776 = this_to_js Obj.magic Obj.magic x773 in
                 Ojs.call (Ojs.get_prop_ascii x776 "flatMap") "apply"
                   [|x776;((let x763 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x763 "push"
                                 [|(Ojs.fun_to_js 4
                                      (fun (x765 : Ojs.t) ->
                                         fun (x766 : Ojs.t) ->
                                           fun (x767 : Ojs.t) ->
                                             fun (x768 : Ojs.t) ->
                                               union2_to_js Obj.magic
                                                 (fun (x771 : 'U t) ->
                                                    t_to_js Obj.magic x771)
                                                 (x761 ~this:(Obj.magic x765)
                                                    ~value:(Obj.magic x766)
                                                    ~index:(Ojs.float_of_js
                                                              x767)
                                                    ~array:(Ojs.list_of_js
                                                              Obj.magic x768))))|]);
                            (match x762 with
                             | Some x764 ->
                                 ignore
                                   (Ojs.call x763 "push" [|(Obj.magic x764)|])
                             | None -> ());
                            x763))|])
    let (flat :
      ('tags, 'T) this ->
        this:'A -> ?depth:'D -> unit -> ('A, 'D) FlatArray.t list)
      =
      fun (x782 : ('tags, 'T) this) ->
        fun ~this:(x778 : 'A) ->
          fun ?depth:(x779 : 'D option) ->
            fun () ->
              Ojs.list_of_js
                (fun (x786 : Ojs.t) ->
                   FlatArray.t_of_js Obj.magic Obj.magic x786)
                (let x785 = this_to_js Obj.magic Obj.magic x782 in
                 Ojs.call (Ojs.get_prop_ascii x785 "flat") "apply"
                   [|x785;((let x780 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x780 "push" [|(Obj.magic x778)|]);
                            (match x779 with
                             | Some x781 ->
                                 ignore
                                   (Ojs.call x780 "push" [|(Obj.magic x781)|])
                             | None -> ());
                            x780))|])
    let (get_length : ('tags, 'T) this -> float) =
      fun (x789 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x789) "length")
    let (toString : ('tags, 'T) this -> string) =
      fun (x792 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x792) "toString" [||])
    let (toLocaleString : ('tags, 'T) this -> string) =
      fun (x795 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x795) "toLocaleString"
             [||])
    let (concat : ('tags, 'T) this -> items:'T ConcatArray.t list -> 'T list)
      =
      fun (x802 : ('tags, 'T) this) ->
        fun ~items:(x798 : 'T ConcatArray.t list) ->
          Ojs.list_of_js Obj.magic
            (let x805 = this_to_js Obj.magic Obj.magic x802 in
             Ojs.call (Ojs.get_prop_ascii x805 "concat") "apply"
               [|x805;((let x799 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x800 : 'T ConcatArray.t) ->
                             ignore
                               (Ojs.call x799 "push"
                                  [|(ConcatArray.t_to_js Obj.magic x800)|]))
                          x798;
                        x799))|])
    let (concat' :
      ('tags, 'T) this -> items:('T, 'T ConcatArray.t) union2 list -> 'T list)
      =
      fun (x813 : ('tags, 'T) this) ->
        fun ~items:(x807 : ('T, 'T ConcatArray.t) union2 list) ->
          Ojs.list_of_js Obj.magic
            (let x816 = this_to_js Obj.magic Obj.magic x813 in
             Ojs.call (Ojs.get_prop_ascii x816 "concat") "apply"
               [|x816;((let x808 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x809 : ('T, 'T ConcatArray.t) union2) ->
                             ignore
                               (Ojs.call x808 "push"
                                  [|(union2_to_js Obj.magic
                                       (fun (x811 : 'T ConcatArray.t) ->
                                          ConcatArray.t_to_js Obj.magic x811)
                                       x809)|])) x807;
                        x808))|])
    let (join : ('tags, 'T) this -> ?separator:string -> unit -> string) =
      fun (x821 : ('tags, 'T) this) ->
        fun ?separator:(x818 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x824 = this_to_js Obj.magic Obj.magic x821 in
               Ojs.call (Ojs.get_prop_ascii x824 "join") "apply"
                 [|x824;((let x819 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x818 with
                           | Some x820 ->
                               ignore
                                 (Ojs.call x819 "push"
                                    [|(Ojs.string_to_js x820)|])
                           | None -> ());
                          x819))|])
    let (slice :
      ('tags, 'T) this -> ?start:float -> ?end_:float -> unit -> 'T list) =
      fun (x830 : ('tags, 'T) this) ->
        fun ?start:(x825 : float option) ->
          fun ?end_:(x826 : float option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x833 = this_to_js Obj.magic Obj.magic x830 in
                 Ojs.call (Ojs.get_prop_ascii x833 "slice") "apply"
                   [|x833;((let x827 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x825 with
                             | Some x829 ->
                                 ignore
                                   (Ojs.call x827 "push"
                                      [|(Ojs.float_to_js x829)|])
                             | None -> ());
                            (match x826 with
                             | Some x828 ->
                                 ignore
                                   (Ojs.call x827 "push"
                                      [|(Ojs.float_to_js x828)|])
                             | None -> ());
                            x827))|])
    let (indexOf :
      ('tags, 'T) this ->
        searchElement:'T -> ?fromIndex:float -> unit -> float)
      =
      fun (x839 : ('tags, 'T) this) ->
        fun ~searchElement:(x835 : 'T) ->
          fun ?fromIndex:(x836 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x842 = this_to_js Obj.magic Obj.magic x839 in
                 Ojs.call (Ojs.get_prop_ascii x842 "indexOf") "apply"
                   [|x842;((let x837 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x837 "push" [|(Obj.magic x835)|]);
                            (match x836 with
                             | Some x838 ->
                                 ignore
                                   (Ojs.call x837 "push"
                                      [|(Ojs.float_to_js x838)|])
                             | None -> ());
                            x837))|])
    let (lastIndexOf :
      ('tags, 'T) this ->
        searchElement:'T -> ?fromIndex:float -> unit -> float)
      =
      fun (x847 : ('tags, 'T) this) ->
        fun ~searchElement:(x843 : 'T) ->
          fun ?fromIndex:(x844 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x850 = this_to_js Obj.magic Obj.magic x847 in
                 Ojs.call (Ojs.get_prop_ascii x850 "lastIndexOf") "apply"
                   [|x850;((let x845 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x845 "push" [|(Obj.magic x843)|]);
                            (match x844 with
                             | Some x846 ->
                                 ignore
                                   (Ojs.call x845 "push"
                                      [|(Ojs.float_to_js x846)|])
                             | None -> ());
                            x845))|])
    let (every :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x859 : ('tags, 'T) this) ->
        fun
          ~predicate:(x851 :
                       value:'T -> index:float -> array:'T list -> bool)
          ->
          fun ?thisArg:(x852 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x862 = this_to_js Obj.magic Obj.magic x859 in
                 Ojs.call (Ojs.get_prop_ascii x862 "every") "apply"
                   [|x862;((let x853 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x853 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x855 : Ojs.t) ->
                                         fun (x856 : Ojs.t) ->
                                           fun (x857 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x851 ~value:(Obj.magic x855)
                                                  ~index:(Ojs.float_of_js
                                                            x856)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x857))))|]);
                            (match x852 with
                             | Some x854 ->
                                 ignore
                                   (Ojs.call x853 "push" [|(any_to_js x854)|])
                             | None -> ());
                            x853))|])
    let (every' :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x871 : ('tags, 'T) this) ->
        fun
          ~predicate:(x863 :
                       value:'T -> index:float -> array:'T list -> unknown)
          ->
          fun ?thisArg:(x864 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x874 = this_to_js Obj.magic Obj.magic x871 in
                 Ojs.call (Ojs.get_prop_ascii x874 "every") "apply"
                   [|x874;((let x865 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x865 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x867 : Ojs.t) ->
                                         fun (x868 : Ojs.t) ->
                                           fun (x869 : Ojs.t) ->
                                             unknown_to_js
                                               (x863 ~value:(Obj.magic x867)
                                                  ~index:(Ojs.float_of_js
                                                            x868)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x869))))|]);
                            (match x864 with
                             | Some x866 ->
                                 ignore
                                   (Ojs.call x865 "push" [|(any_to_js x866)|])
                             | None -> ());
                            x865))|])
    let (some :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x883 : ('tags, 'T) this) ->
        fun
          ~predicate:(x875 :
                       value:'T -> index:float -> array:'T list -> unknown)
          ->
          fun ?thisArg:(x876 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x886 = this_to_js Obj.magic Obj.magic x883 in
                 Ojs.call (Ojs.get_prop_ascii x886 "some") "apply"
                   [|x886;((let x877 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x877 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x879 : Ojs.t) ->
                                         fun (x880 : Ojs.t) ->
                                           fun (x881 : Ojs.t) ->
                                             unknown_to_js
                                               (x875 ~value:(Obj.magic x879)
                                                  ~index:(Ojs.float_of_js
                                                            x880)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x881))))|]);
                            (match x876 with
                             | Some x878 ->
                                 ignore
                                   (Ojs.call x877 "push" [|(any_to_js x878)|])
                             | None -> ());
                            x877))|])
    let (forEach :
      ('tags, 'T) this ->
        callbackfn:(value:'T -> index:float -> array:'T list -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x895 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x887 :
                        value:'T -> index:float -> array:'T list -> unit)
          ->
          fun ?thisArg:(x888 : any option) ->
            fun () ->
              ignore
                (let x898 = this_to_js Obj.magic Obj.magic x895 in
                 Ojs.call (Ojs.get_prop_ascii x898 "forEach") "apply"
                   [|x898;((let x889 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x889 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x891 : Ojs.t) ->
                                         fun (x892 : Ojs.t) ->
                                           fun (x893 : Ojs.t) ->
                                             x887 ~value:(Obj.magic x891)
                                               ~index:(Ojs.float_of_js x892)
                                               ~array:(Ojs.list_of_js
                                                         Obj.magic x893)))|]);
                            (match x888 with
                             | Some x890 ->
                                 ignore
                                   (Ojs.call x889 "push" [|(any_to_js x890)|])
                             | None -> ());
                            x889))|])
    let (map :
      ('tags, 'T) this ->
        callbackfn:(value:'T -> index:float -> array:'T list -> 'U) ->
          ?thisArg:any -> unit -> 'U list)
      =
      fun (x907 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x899 : value:'T -> index:float -> array:'T list -> 'U)
          ->
          fun ?thisArg:(x900 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x910 = this_to_js Obj.magic Obj.magic x907 in
                 Ojs.call (Ojs.get_prop_ascii x910 "map") "apply"
                   [|x910;((let x901 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x901 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x903 : Ojs.t) ->
                                         fun (x904 : Ojs.t) ->
                                           fun (x905 : Ojs.t) ->
                                             Obj.magic
                                               (x899 ~value:(Obj.magic x903)
                                                  ~index:(Ojs.float_of_js
                                                            x904)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x905))))|]);
                            (match x900 with
                             | Some x902 ->
                                 ignore
                                   (Ojs.call x901 "push" [|(any_to_js x902)|])
                             | None -> ());
                            x901))|])
    let (filter :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> 'S list)
      =
      fun (x920 : ('tags, 'T) this) ->
        fun
          ~predicate:(x912 :
                       value:'T -> index:float -> array:'T list -> bool)
          ->
          fun ?thisArg:(x913 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x923 = this_to_js Obj.magic Obj.magic x920 in
                 Ojs.call (Ojs.get_prop_ascii x923 "filter") "apply"
                   [|x923;((let x914 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x914 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x916 : Ojs.t) ->
                                         fun (x917 : Ojs.t) ->
                                           fun (x918 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x912 ~value:(Obj.magic x916)
                                                  ~index:(Ojs.float_of_js
                                                            x917)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x918))))|]);
                            (match x913 with
                             | Some x915 ->
                                 ignore
                                   (Ojs.call x914 "push" [|(any_to_js x915)|])
                             | None -> ());
                            x914))|])
    let (filter' :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> 'T list)
      =
      fun (x933 : ('tags, 'T) this) ->
        fun
          ~predicate:(x925 :
                       value:'T -> index:float -> array:'T list -> unknown)
          ->
          fun ?thisArg:(x926 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x936 = this_to_js Obj.magic Obj.magic x933 in
                 Ojs.call (Ojs.get_prop_ascii x936 "filter") "apply"
                   [|x936;((let x927 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x927 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x929 : Ojs.t) ->
                                         fun (x930 : Ojs.t) ->
                                           fun (x931 : Ojs.t) ->
                                             unknown_to_js
                                               (x925 ~value:(Obj.magic x929)
                                                  ~index:(Ojs.float_of_js
                                                            x930)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x931))))|]);
                            (match x926 with
                             | Some x928 ->
                                 ignore
                                   (Ojs.call x927 "push" [|(any_to_js x928)|])
                             | None -> ());
                            x927))|])
    let (reduce :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x944 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x938 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic Obj.magic x944) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x939 : Ojs.t) ->
                       fun (x940 : Ojs.t) ->
                         fun (x941 : Ojs.t) ->
                           fun (x942 : Ojs.t) ->
                             Obj.magic
                               (x938 ~previousValue:(Obj.magic x939)
                                  ~currentValue:(Obj.magic x940)
                                  ~currentIndex:(Ojs.float_of_js x941)
                                  ~array:(Ojs.list_of_js Obj.magic x942))))|])
    let (reduce' :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x954 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x947 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x953 : 'T) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic Obj.magic x954) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x948 : Ojs.t) ->
                         fun (x949 : Ojs.t) ->
                           fun (x950 : Ojs.t) ->
                             fun (x951 : Ojs.t) ->
                               Obj.magic
                                 (x947 ~previousValue:(Obj.magic x948)
                                    ~currentValue:(Obj.magic x949)
                                    ~currentIndex:(Ojs.float_of_js x950)
                                    ~array:(Ojs.list_of_js Obj.magic x951))));(
                   Obj.magic x953)|])
    let (reduce'' :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x964 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x957 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x963 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic Obj.magic x964) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x958 : Ojs.t) ->
                         fun (x959 : Ojs.t) ->
                           fun (x960 : Ojs.t) ->
                             fun (x961 : Ojs.t) ->
                               Obj.magic
                                 (x957 ~previousValue:(Obj.magic x958)
                                    ~currentValue:(Obj.magic x959)
                                    ~currentIndex:(Ojs.float_of_js x960)
                                    ~array:(Ojs.list_of_js Obj.magic x961))));(
                   Obj.magic x963)|])
    let (reduceRight :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x973 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x967 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic Obj.magic x973) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x968 : Ojs.t) ->
                       fun (x969 : Ojs.t) ->
                         fun (x970 : Ojs.t) ->
                           fun (x971 : Ojs.t) ->
                             Obj.magic
                               (x967 ~previousValue:(Obj.magic x968)
                                  ~currentValue:(Obj.magic x969)
                                  ~currentIndex:(Ojs.float_of_js x970)
                                  ~array:(Ojs.list_of_js Obj.magic x971))))|])
    let (reduceRight' :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x983 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x976 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x982 : 'T) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic Obj.magic x983) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x977 : Ojs.t) ->
                         fun (x978 : Ojs.t) ->
                           fun (x979 : Ojs.t) ->
                             fun (x980 : Ojs.t) ->
                               Obj.magic
                                 (x976 ~previousValue:(Obj.magic x977)
                                    ~currentValue:(Obj.magic x978)
                                    ~currentIndex:(Ojs.float_of_js x979)
                                    ~array:(Ojs.list_of_js Obj.magic x980))));(
                   Obj.magic x982)|])
    let (reduceRight'' :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x993 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x986 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x992 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic Obj.magic x993) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x987 : Ojs.t) ->
                         fun (x988 : Ojs.t) ->
                           fun (x989 : Ojs.t) ->
                             fun (x990 : Ojs.t) ->
                               Obj.magic
                                 (x986 ~previousValue:(Obj.magic x987)
                                    ~currentValue:(Obj.magic x988)
                                    ~currentIndex:(Ojs.float_of_js x989)
                                    ~array:(Ojs.list_of_js Obj.magic x990))));(
                   Obj.magic x992)|])
    let (get : ('tags, 'T) this -> float -> 'T) =
      fun (x996 : ('tags, 'T) this) ->
        fun (x999 : float) ->
          Obj.magic
            (Ojs.get_prop (this_to_js Obj.magic Obj.magic x996)
               (Ojs.float_to_js x999))
    let cast_from = Obj.magic
    let (to_ml : 'T t -> 'T list) =
      fun (x1000 : 'T t) ->
        Ojs.list_of_js Obj.magic (t_to_js Obj.magic x1000)
    let (of_ml : 'T list -> 'T t) =
      fun (x1003 : 'T list) ->
        t_of_js Obj.magic (Ojs.list_to_js Obj.magic x1003)
  end
module TemplateStringsArray =
  struct
    type t =
      [ `ArrayLike of string  | `IterableIterator of string 
      | `Iterator of (string * any * never or_undefined) 
      | `ReadonlyArray of string  | `ReadonlyArray of string 
      | `TemplateStringsArray ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1007 : Ojs.t) -> t_of_js x1007
    and t_0_to_js : t_0 -> Ojs.t = fun (x1006 : t) -> t_to_js x1006
    type tags =
      [ `ArrayLike of string  | `IterableIterator of string 
      | `Iterator of (string * any * never or_undefined) 
      | `ReadonlyArray of string  | `ReadonlyArray of string 
      | `TemplateStringsArray ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `TemplateStringsArray ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1010 : Ojs.t) -> intf_of_js __tags_of_js x1010
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1008 : __tags intf) -> intf_to_js __tags_to_js x1008
    let (get_raw : 'tags this -> string list) =
      fun (x1012 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1012) "raw")
    let cast_from = Obj.magic
  end
module SyntaxError =
  struct
    type t = [ `Error  | `SyntaxError ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1016 : Ojs.t) -> t_of_js x1016
    and t_0_to_js : t_0 -> Ojs.t = fun (x1015 : t) -> t_to_js x1015
    type tags = [ `Error  | `SyntaxError ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `SyntaxError ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1019 : Ojs.t) -> intf_of_js __tags_of_js x1019
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1017 : __tags intf) -> intf_to_js __tags_to_js x1017
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1021 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "SyntaxError")
               (let x1022 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1021 with
                 | Some x1023 ->
                     ignore
                       (Ojs.call x1022 "push" [|(Ojs.string_to_js x1023)|])
                 | None -> ());
                x1022))
    let (invoke : ?message:string -> unit -> t) =
      fun ?message:(x1024 : string option) ->
        fun () ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "SyntaxError") "apply"
               [|Ojs.null;((let x1025 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x1024 with
                             | Some x1026 ->
                                 ignore
                                   (Ojs.call x1025 "push"
                                      [|(Ojs.string_to_js x1026)|])
                             | None -> ());
                            x1025))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SyntaxError")
             "prototype")
    let cast_from = Obj.magic
  end
module Symbol =
  struct
    type t = [ `Symbol ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1028 : Ojs.t) -> t_of_js x1028
    and t_0_to_js : t_0 -> Ojs.t = fun (x1027 : t) -> t_to_js x1027
    type tags = [ `Symbol ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Symbol ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1031 : Ojs.t) -> intf_of_js __tags_of_js x1031
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1029 : __tags intf) -> intf_to_js __tags_to_js x1029
    let (toString : 'tags this -> string) =
      fun (x1033 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x1033) "toString" [||])
    let (valueOf : 'tags this -> symbol) =
      fun (x1035 : 'tags this) ->
        symbol_of_js (Ojs.call (this_to_js Obj.magic x1035) "valueOf" [||])
    let (get_description : 'tags this -> string or_undefined) =
      fun (x1037 : 'tags this) ->
        or_undefined_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1037) "description")
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "prototype")
    let (invoke : ?description:string or_number -> unit -> symbol) =
      fun ?description:(x1040 : string or_number option) ->
        fun () ->
          symbol_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Symbol") "apply"
               [|Ojs.null;((let x1041 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x1040 with
                             | Some x1042 ->
                                 ignore
                                   (Ojs.call x1041 "push"
                                      [|(or_number_to_js Ojs.string_to_js
                                           x1042)|])
                             | None -> ());
                            x1041))|])
    let (for_ : string -> symbol) =
      fun (x1044 : string) ->
        symbol_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Symbol") "for"
             [|(Ojs.string_to_js x1044)|])
    let (keyFor : symbol -> string or_undefined) =
      fun (x1045 : symbol) ->
        or_undefined_of_js Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Symbol") "keyFor"
             [|(symbol_to_js x1045)|])
    let (hasInstance : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "hasInstance")
    let (isConcatSpreadable : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "isConcatSpreadable")
    let (match_ : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "match")
    let (replace : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "replace")
    let (search : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "search")
    let (species : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "species")
    let (split : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "split")
    let (toPrimitive : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "toPrimitive")
    let (toStringTag : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "toStringTag")
    let (unscopables : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "unscopables")
    let (iterator : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "iterator")
    let (matchAll : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "matchAll")
    let (asyncIterator : unit -> symbol) =
      fun () ->
        symbol_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Symbol")
             "asyncIterator")
    let cast_from = Obj.magic
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1048 : Ojs.t) -> x1048
    and t_to_js : t -> Ojs.t = fun (x1047 : Ojs.t) -> x1047
    let (get_copyWithin : t -> bool) =
      fun (x1049 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1049) "copyWithin")
    let (set_copyWithin : t -> bool -> unit) =
      fun (x1050 : t) ->
        fun (x1051 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1050) "copyWithin"
            (Ojs.bool_to_js x1051)
    let (get_entries : t -> bool) =
      fun (x1052 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1052) "entries")
    let (set_entries : t -> bool -> unit) =
      fun (x1053 : t) ->
        fun (x1054 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1053) "entries" (Ojs.bool_to_js x1054)
    let (get_fill : t -> bool) =
      fun (x1055 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1055) "fill")
    let (set_fill : t -> bool -> unit) =
      fun (x1056 : t) ->
        fun (x1057 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1056) "fill" (Ojs.bool_to_js x1057)
    let (get_find : t -> bool) =
      fun (x1058 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1058) "find")
    let (set_find : t -> bool -> unit) =
      fun (x1059 : t) ->
        fun (x1060 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1059) "find" (Ojs.bool_to_js x1060)
    let (get_findIndex : t -> bool) =
      fun (x1061 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1061) "findIndex")
    let (set_findIndex : t -> bool -> unit) =
      fun (x1062 : t) ->
        fun (x1063 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1062) "findIndex"
            (Ojs.bool_to_js x1063)
    let (get_keys : t -> bool) =
      fun (x1064 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1064) "keys")
    let (set_keys : t -> bool -> unit) =
      fun (x1065 : t) ->
        fun (x1066 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1065) "keys" (Ojs.bool_to_js x1066)
    let (get_values : t -> bool) =
      fun (x1067 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1067) "values")
    let (set_values : t -> bool -> unit) =
      fun (x1068 : t) ->
        fun (x1069 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1068) "values" (Ojs.bool_to_js x1069)
  end
module Array =
  struct
    type 'T t =
      [ `Array of 'T  | `ArrayLike of 'T  | `IterableIterator of 'T 
      | `Iterator of ('T * any * never or_undefined) ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x1072 : Ojs.t) -> t_of_js __T_of_js x1072
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x1070 : __T t) -> t_to_js __T_to_js x1070
    type 'T tags =
      [ `Array of 'T  | `ArrayLike of 'T  | `IterableIterator of 'T 
      | `Iterator of ('T * any * never or_undefined) ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this = 'tags intf constraint 'tags = [> `Array of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1076 : Ojs.t) -> intf_of_js __tags_of_js x1076
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1074 : __tags intf) -> intf_to_js __tags_to_js x1074
    let (entries : ('tags, 'T) this -> (float * 'T) IterableIterator.t) =
      fun (x1078 : ('tags, 'T) this) ->
        IterableIterator.t_of_js
          (fun (x1081 : Ojs.t) ->
             let x1082 = x1081 in
             ((Ojs.float_of_js (Ojs.array_get x1082 0)),
               (Obj.magic (Ojs.array_get x1082 1))))
          (Ojs.call (this_to_js Obj.magic Obj.magic x1078) "entries" [||])
    let (keys : ('tags, 'T) this -> float IterableIterator.t) =
      fun (x1083 : ('tags, 'T) this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x1083) "keys" [||])
    let (values : ('tags, 'T) this -> 'T IterableIterator.t) =
      fun (x1087 : ('tags, 'T) this) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x1087) "values" [||])
    let (includes :
      ('tags, 'T) this ->
        searchElement:'T -> ?fromIndex:float -> unit -> bool)
      =
      fun (x1095 : ('tags, 'T) this) ->
        fun ~searchElement:(x1091 : 'T) ->
          fun ?fromIndex:(x1092 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1098 = this_to_js Obj.magic Obj.magic x1095 in
                 Ojs.call (Ojs.get_prop_ascii x1098 "includes") "apply"
                   [|x1098;((let x1093 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1093 "push" [|(Obj.magic x1091)|]);
                             (match x1092 with
                              | Some x1094 ->
                                  ignore
                                    (Ojs.call x1093 "push"
                                       [|(Ojs.float_to_js x1094)|])
                              | None -> ());
                             x1093))|])
    let (find :
      ('tags, 'T) this ->
        predicate:(this:unit ->
                     value:'T -> index:float -> obj:'T list -> bool)
          -> ?thisArg:any -> unit -> 'S or_undefined)
      =
      fun (x1108 : ('tags, 'T) this) ->
        fun
          ~predicate:(x1099 :
                       this:unit ->
                         value:'T -> index:float -> obj:'T list -> bool)
          ->
          fun ?thisArg:(x1100 : any option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x1111 = this_to_js Obj.magic Obj.magic x1108 in
                 Ojs.call (Ojs.get_prop_ascii x1111 "find") "apply"
                   [|x1111;((let x1101 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1101 "push"
                                  [|(Ojs.fun_to_js 4
                                       (fun (x1103 : Ojs.t) ->
                                          fun (x1104 : Ojs.t) ->
                                            fun (x1105 : Ojs.t) ->
                                              fun (x1106 : Ojs.t) ->
                                                Ojs.bool_to_js
                                                  (x1099
                                                     ~this:(Ojs.unit_of_js
                                                              x1103)
                                                     ~value:(Obj.magic x1104)
                                                     ~index:(Ojs.float_of_js
                                                               x1105)
                                                     ~obj:(Ojs.list_of_js
                                                             Obj.magic x1106))))|]);
                             (match x1100 with
                              | Some x1102 ->
                                  ignore
                                    (Ojs.call x1101 "push"
                                       [|(any_to_js x1102)|])
                              | None -> ());
                             x1101))|])
    let (find' :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> obj:'T list -> unknown) ->
          ?thisArg:any -> unit -> 'T or_undefined)
      =
      fun (x1121 : ('tags, 'T) this) ->
        fun
          ~predicate:(x1113 :
                       value:'T -> index:float -> obj:'T list -> unknown)
          ->
          fun ?thisArg:(x1114 : any option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x1124 = this_to_js Obj.magic Obj.magic x1121 in
                 Ojs.call (Ojs.get_prop_ascii x1124 "find") "apply"
                   [|x1124;((let x1115 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1115 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1117 : Ojs.t) ->
                                          fun (x1118 : Ojs.t) ->
                                            fun (x1119 : Ojs.t) ->
                                              unknown_to_js
                                                (x1113
                                                   ~value:(Obj.magic x1117)
                                                   ~index:(Ojs.float_of_js
                                                             x1118)
                                                   ~obj:(Ojs.list_of_js
                                                           Obj.magic x1119))))|]);
                             (match x1114 with
                              | Some x1116 ->
                                  ignore
                                    (Ojs.call x1115 "push"
                                       [|(any_to_js x1116)|])
                              | None -> ());
                             x1115))|])
    let (findIndex :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> obj:'T list -> unknown) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x1134 : ('tags, 'T) this) ->
        fun
          ~predicate:(x1126 :
                       value:'T -> index:float -> obj:'T list -> unknown)
          ->
          fun ?thisArg:(x1127 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x1137 = this_to_js Obj.magic Obj.magic x1134 in
                 Ojs.call (Ojs.get_prop_ascii x1137 "findIndex") "apply"
                   [|x1137;((let x1128 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1128 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1130 : Ojs.t) ->
                                          fun (x1131 : Ojs.t) ->
                                            fun (x1132 : Ojs.t) ->
                                              unknown_to_js
                                                (x1126
                                                   ~value:(Obj.magic x1130)
                                                   ~index:(Ojs.float_of_js
                                                             x1131)
                                                   ~obj:(Ojs.list_of_js
                                                           Obj.magic x1132))))|]);
                             (match x1127 with
                              | Some x1129 ->
                                  ignore
                                    (Ojs.call x1128 "push"
                                       [|(any_to_js x1129)|])
                              | None -> ());
                             x1128))|])
    let (fill :
      ('tags, 'T) this ->
        value:'T -> ?start:float -> ?end_:float -> unit -> ('tags, 'T) this)
      =
      fun (x1144 : ('tags, 'T) this) ->
        fun ~value:(x1138 : 'T) ->
          fun ?start:(x1139 : float option) ->
            fun ?end_:(x1140 : float option) ->
              fun () ->
                this_of_js Obj.magic Obj.magic
                  (let x1147 = this_to_js Obj.magic Obj.magic x1144 in
                   Ojs.call (Ojs.get_prop_ascii x1147 "fill") "apply"
                     [|x1147;((let x1141 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1141 "push" [|(Obj.magic x1138)|]);
                               (match x1139 with
                                | Some x1143 ->
                                    ignore
                                      (Ojs.call x1141 "push"
                                         [|(Ojs.float_to_js x1143)|])
                                | None -> ());
                               (match x1140 with
                                | Some x1142 ->
                                    ignore
                                      (Ojs.call x1141 "push"
                                         [|(Ojs.float_to_js x1142)|])
                                | None -> ());
                               x1141))|])
    let (copyWithin :
      ('tags, 'T) this ->
        target:float ->
          start:float -> ?end_:float -> unit -> ('tags, 'T) this)
      =
      fun (x1155 : ('tags, 'T) this) ->
        fun ~target:(x1150 : float) ->
          fun ~start:(x1151 : float) ->
            fun ?end_:(x1152 : float option) ->
              fun () ->
                this_of_js Obj.magic Obj.magic
                  (let x1158 = this_to_js Obj.magic Obj.magic x1155 in
                   Ojs.call (Ojs.get_prop_ascii x1158 "copyWithin") "apply"
                     [|x1158;((let x1153 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1153 "push"
                                    [|(Ojs.float_to_js x1150)|]);
                               ignore
                                 (Ojs.call x1153 "push"
                                    [|(Ojs.float_to_js x1151)|]);
                               (match x1152 with
                                | Some x1154 ->
                                    ignore
                                      (Ojs.call x1153 "push"
                                         [|(Ojs.float_to_js x1154)|])
                                | None -> ());
                               x1153))|])
    let (flatMap :
      ('tags, 'T) this ->
        callback:(this:'This ->
                    value:'T ->
                      index:float ->
                        array:'T list -> ('U, 'U ReadonlyArray.t) union2)
          -> ?thisArg:'This -> unit -> 'U list)
      =
      fun (x1173 : ('tags, 'T) this) ->
        fun
          ~callback:(x1161 :
                      this:'This ->
                        value:'T ->
                          index:float ->
                            array:'T list -> ('U, 'U ReadonlyArray.t) union2)
          ->
          fun ?thisArg:(x1162 : 'This option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1176 = this_to_js Obj.magic Obj.magic x1173 in
                 Ojs.call (Ojs.get_prop_ascii x1176 "flatMap") "apply"
                   [|x1176;((let x1163 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1163 "push"
                                  [|(Ojs.fun_to_js 4
                                       (fun (x1165 : Ojs.t) ->
                                          fun (x1166 : Ojs.t) ->
                                            fun (x1167 : Ojs.t) ->
                                              fun (x1168 : Ojs.t) ->
                                                union2_to_js Obj.magic
                                                  (fun
                                                     (x1171 :
                                                       'U ReadonlyArray.t)
                                                     ->
                                                     ReadonlyArray.t_to_js
                                                       Obj.magic x1171)
                                                  (x1161
                                                     ~this:(Obj.magic x1165)
                                                     ~value:(Obj.magic x1166)
                                                     ~index:(Ojs.float_of_js
                                                               x1167)
                                                     ~array:(Ojs.list_of_js
                                                               Obj.magic
                                                               x1168))))|]);
                             (match x1162 with
                              | Some x1164 ->
                                  ignore
                                    (Ojs.call x1163 "push"
                                       [|(Obj.magic x1164)|])
                              | None -> ());
                             x1163))|])
    let (flat :
      ('tags, 'T) this ->
        this:'A -> ?depth:'D -> unit -> ('A, 'D) FlatArray.t list)
      =
      fun (x1182 : ('tags, 'T) this) ->
        fun ~this:(x1178 : 'A) ->
          fun ?depth:(x1179 : 'D option) ->
            fun () ->
              Ojs.list_of_js
                (fun (x1186 : Ojs.t) ->
                   FlatArray.t_of_js Obj.magic Obj.magic x1186)
                (let x1185 = this_to_js Obj.magic Obj.magic x1182 in
                 Ojs.call (Ojs.get_prop_ascii x1185 "flat") "apply"
                   [|x1185;((let x1180 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1180 "push" [|(Obj.magic x1178)|]);
                             (match x1179 with
                              | Some x1181 ->
                                  ignore
                                    (Ojs.call x1180 "push"
                                       [|(Obj.magic x1181)|])
                              | None -> ());
                             x1180))|])
    let (get_length : ('tags, 'T) this -> float) =
      fun (x1189 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1189) "length")
    let (set_length : ('tags, 'T) this -> float -> unit) =
      fun (x1192 : ('tags, 'T) this) ->
        fun (x1193 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1192) "length"
            (Ojs.float_to_js x1193)
    let (toString : ('tags, 'T) this -> string) =
      fun (x1196 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x1196) "toString" [||])
    let (toLocaleString : ('tags, 'T) this -> string) =
      fun (x1199 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x1199) "toLocaleString"
             [||])
    let (pop : ('tags, 'T) this -> 'T or_undefined) =
      fun (x1202 : ('tags, 'T) this) ->
        or_undefined_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x1202) "pop" [||])
    let (push : ('tags, 'T) this -> items:'T list -> float) =
      fun (x1209 : ('tags, 'T) this) ->
        fun ~items:(x1206 : 'T list) ->
          Ojs.float_of_js
            (let x1212 = this_to_js Obj.magic Obj.magic x1209 in
             Ojs.call (Ojs.get_prop_ascii x1212 "push") "apply"
               [|x1212;((let x1207 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1208 : 'T) ->
                              ignore
                                (Ojs.call x1207 "push" [|(Obj.magic x1208)|]))
                           x1206;
                         x1207))|])
    let (concat : ('tags, 'T) this -> items:'T ConcatArray.t list -> 'T list)
      =
      fun (x1217 : ('tags, 'T) this) ->
        fun ~items:(x1213 : 'T ConcatArray.t list) ->
          Ojs.list_of_js Obj.magic
            (let x1220 = this_to_js Obj.magic Obj.magic x1217 in
             Ojs.call (Ojs.get_prop_ascii x1220 "concat") "apply"
               [|x1220;((let x1214 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1215 : 'T ConcatArray.t) ->
                              ignore
                                (Ojs.call x1214 "push"
                                   [|(ConcatArray.t_to_js Obj.magic x1215)|]))
                           x1213;
                         x1214))|])
    let (concat' :
      ('tags, 'T) this -> items:('T, 'T ConcatArray.t) union2 list -> 'T list)
      =
      fun (x1228 : ('tags, 'T) this) ->
        fun ~items:(x1222 : ('T, 'T ConcatArray.t) union2 list) ->
          Ojs.list_of_js Obj.magic
            (let x1231 = this_to_js Obj.magic Obj.magic x1228 in
             Ojs.call (Ojs.get_prop_ascii x1231 "concat") "apply"
               [|x1231;((let x1223 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1224 : ('T, 'T ConcatArray.t) union2) ->
                              ignore
                                (Ojs.call x1223 "push"
                                   [|(union2_to_js Obj.magic
                                        (fun (x1226 : 'T ConcatArray.t) ->
                                           ConcatArray.t_to_js Obj.magic
                                             x1226) x1224)|])) x1222;
                         x1223))|])
    let (join : ('tags, 'T) this -> ?separator:string -> unit -> string) =
      fun (x1236 : ('tags, 'T) this) ->
        fun ?separator:(x1233 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x1239 = this_to_js Obj.magic Obj.magic x1236 in
               Ojs.call (Ojs.get_prop_ascii x1239 "join") "apply"
                 [|x1239;((let x1234 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1233 with
                            | Some x1235 ->
                                ignore
                                  (Ojs.call x1234 "push"
                                     [|(Ojs.string_to_js x1235)|])
                            | None -> ());
                           x1234))|])
    let (reverse : ('tags, 'T) this -> 'T list) =
      fun (x1240 : ('tags, 'T) this) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x1240) "reverse" [||])
    let (shift : ('tags, 'T) this -> 'T or_undefined) =
      fun (x1244 : ('tags, 'T) this) ->
        or_undefined_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x1244) "shift" [||])
    let (slice :
      ('tags, 'T) this -> ?start:float -> ?end_:float -> unit -> 'T list) =
      fun (x1253 : ('tags, 'T) this) ->
        fun ?start:(x1248 : float option) ->
          fun ?end_:(x1249 : float option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1256 = this_to_js Obj.magic Obj.magic x1253 in
                 Ojs.call (Ojs.get_prop_ascii x1256 "slice") "apply"
                   [|x1256;((let x1250 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1248 with
                              | Some x1252 ->
                                  ignore
                                    (Ojs.call x1250 "push"
                                       [|(Ojs.float_to_js x1252)|])
                              | None -> ());
                             (match x1249 with
                              | Some x1251 ->
                                  ignore
                                    (Ojs.call x1250 "push"
                                       [|(Ojs.float_to_js x1251)|])
                              | None -> ());
                             x1250))|])
    let (sort :
      ('tags, 'T) this ->
        ?compareFn:(a:'T -> b:'T -> float) -> unit -> ('tags, 'T) this)
      =
      fun (x1263 : ('tags, 'T) this) ->
        fun ?compareFn:(x1258 : (a:'T -> b:'T -> float) option) ->
          fun () ->
            this_of_js Obj.magic Obj.magic
              (let x1266 = this_to_js Obj.magic Obj.magic x1263 in
               Ojs.call (Ojs.get_prop_ascii x1266 "sort") "apply"
                 [|x1266;((let x1259 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1258 with
                            | Some x1260 ->
                                ignore
                                  (Ojs.call x1259 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x1261 : Ojs.t) ->
                                             fun (x1262 : Ojs.t) ->
                                               Ojs.float_to_js
                                                 (x1260 ~a:(Obj.magic x1261)
                                                    ~b:(Obj.magic x1262))))|])
                            | None -> ());
                           x1259))|])
    let (splice :
      ('tags, 'T) this ->
        start:float -> ?deleteCount:float -> unit -> 'T list)
      =
      fun (x1273 : ('tags, 'T) this) ->
        fun ~start:(x1269 : float) ->
          fun ?deleteCount:(x1270 : float option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1276 = this_to_js Obj.magic Obj.magic x1273 in
                 Ojs.call (Ojs.get_prop_ascii x1276 "splice") "apply"
                   [|x1276;((let x1271 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1271 "push"
                                  [|(Ojs.float_to_js x1269)|]);
                             (match x1270 with
                              | Some x1272 ->
                                  ignore
                                    (Ojs.call x1271 "push"
                                       [|(Ojs.float_to_js x1272)|])
                              | None -> ());
                             x1271))|])
    let (splice' :
      ('tags, 'T) this ->
        start:float -> deleteCount:float -> items:'T list -> 'T list)
      =
      fun (x1283 : ('tags, 'T) this) ->
        fun ~start:(x1278 : float) ->
          fun ~deleteCount:(x1279 : float) ->
            fun ~items:(x1280 : 'T list) ->
              Ojs.list_of_js Obj.magic
                (let x1286 = this_to_js Obj.magic Obj.magic x1283 in
                 Ojs.call (Ojs.get_prop_ascii x1286 "splice") "apply"
                   [|x1286;((let x1281 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1281 "push"
                                  [|(Ojs.float_to_js x1278)|]);
                             ignore
                               (Ojs.call x1281 "push"
                                  [|(Ojs.float_to_js x1279)|]);
                             List.iter
                               (fun (x1282 : 'T) ->
                                  ignore
                                    (Ojs.call x1281 "push"
                                       [|(Obj.magic x1282)|])) x1280;
                             x1281))|])
    let (unshift : ('tags, 'T) this -> items:'T list -> float) =
      fun (x1291 : ('tags, 'T) this) ->
        fun ~items:(x1288 : 'T list) ->
          Ojs.float_of_js
            (let x1294 = this_to_js Obj.magic Obj.magic x1291 in
             Ojs.call (Ojs.get_prop_ascii x1294 "unshift") "apply"
               [|x1294;((let x1289 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1290 : 'T) ->
                              ignore
                                (Ojs.call x1289 "push" [|(Obj.magic x1290)|]))
                           x1288;
                         x1289))|])
    let (indexOf :
      ('tags, 'T) this ->
        searchElement:'T -> ?fromIndex:float -> unit -> float)
      =
      fun (x1299 : ('tags, 'T) this) ->
        fun ~searchElement:(x1295 : 'T) ->
          fun ?fromIndex:(x1296 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x1302 = this_to_js Obj.magic Obj.magic x1299 in
                 Ojs.call (Ojs.get_prop_ascii x1302 "indexOf") "apply"
                   [|x1302;((let x1297 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1297 "push" [|(Obj.magic x1295)|]);
                             (match x1296 with
                              | Some x1298 ->
                                  ignore
                                    (Ojs.call x1297 "push"
                                       [|(Ojs.float_to_js x1298)|])
                              | None -> ());
                             x1297))|])
    let (lastIndexOf :
      ('tags, 'T) this ->
        searchElement:'T -> ?fromIndex:float -> unit -> float)
      =
      fun (x1307 : ('tags, 'T) this) ->
        fun ~searchElement:(x1303 : 'T) ->
          fun ?fromIndex:(x1304 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x1310 = this_to_js Obj.magic Obj.magic x1307 in
                 Ojs.call (Ojs.get_prop_ascii x1310 "lastIndexOf") "apply"
                   [|x1310;((let x1305 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1305 "push" [|(Obj.magic x1303)|]);
                             (match x1304 with
                              | Some x1306 ->
                                  ignore
                                    (Ojs.call x1305 "push"
                                       [|(Ojs.float_to_js x1306)|])
                              | None -> ());
                             x1305))|])
    let (every :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x1319 : ('tags, 'T) this) ->
        fun
          ~predicate:(x1311 :
                       value:'T -> index:float -> array:'T list -> bool)
          ->
          fun ?thisArg:(x1312 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1322 = this_to_js Obj.magic Obj.magic x1319 in
                 Ojs.call (Ojs.get_prop_ascii x1322 "every") "apply"
                   [|x1322;((let x1313 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1313 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1315 : Ojs.t) ->
                                          fun (x1316 : Ojs.t) ->
                                            fun (x1317 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x1311
                                                   ~value:(Obj.magic x1315)
                                                   ~index:(Ojs.float_of_js
                                                             x1316)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1317))))|]);
                             (match x1312 with
                              | Some x1314 ->
                                  ignore
                                    (Ojs.call x1313 "push"
                                       [|(any_to_js x1314)|])
                              | None -> ());
                             x1313))|])
    let (every' :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x1331 : ('tags, 'T) this) ->
        fun
          ~predicate:(x1323 :
                       value:'T -> index:float -> array:'T list -> unknown)
          ->
          fun ?thisArg:(x1324 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1334 = this_to_js Obj.magic Obj.magic x1331 in
                 Ojs.call (Ojs.get_prop_ascii x1334 "every") "apply"
                   [|x1334;((let x1325 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1325 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1327 : Ojs.t) ->
                                          fun (x1328 : Ojs.t) ->
                                            fun (x1329 : Ojs.t) ->
                                              unknown_to_js
                                                (x1323
                                                   ~value:(Obj.magic x1327)
                                                   ~index:(Ojs.float_of_js
                                                             x1328)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1329))))|]);
                             (match x1324 with
                              | Some x1326 ->
                                  ignore
                                    (Ojs.call x1325 "push"
                                       [|(any_to_js x1326)|])
                              | None -> ());
                             x1325))|])
    let (some :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x1343 : ('tags, 'T) this) ->
        fun
          ~predicate:(x1335 :
                       value:'T -> index:float -> array:'T list -> unknown)
          ->
          fun ?thisArg:(x1336 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1346 = this_to_js Obj.magic Obj.magic x1343 in
                 Ojs.call (Ojs.get_prop_ascii x1346 "some") "apply"
                   [|x1346;((let x1337 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1337 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1339 : Ojs.t) ->
                                          fun (x1340 : Ojs.t) ->
                                            fun (x1341 : Ojs.t) ->
                                              unknown_to_js
                                                (x1335
                                                   ~value:(Obj.magic x1339)
                                                   ~index:(Ojs.float_of_js
                                                             x1340)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1341))))|]);
                             (match x1336 with
                              | Some x1338 ->
                                  ignore
                                    (Ojs.call x1337 "push"
                                       [|(any_to_js x1338)|])
                              | None -> ());
                             x1337))|])
    let (forEach :
      ('tags, 'T) this ->
        callbackfn:(value:'T -> index:float -> array:'T list -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x1355 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x1347 :
                        value:'T -> index:float -> array:'T list -> unit)
          ->
          fun ?thisArg:(x1348 : any option) ->
            fun () ->
              ignore
                (let x1358 = this_to_js Obj.magic Obj.magic x1355 in
                 Ojs.call (Ojs.get_prop_ascii x1358 "forEach") "apply"
                   [|x1358;((let x1349 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1349 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1351 : Ojs.t) ->
                                          fun (x1352 : Ojs.t) ->
                                            fun (x1353 : Ojs.t) ->
                                              x1347 ~value:(Obj.magic x1351)
                                                ~index:(Ojs.float_of_js x1352)
                                                ~array:(Ojs.list_of_js
                                                          Obj.magic x1353)))|]);
                             (match x1348 with
                              | Some x1350 ->
                                  ignore
                                    (Ojs.call x1349 "push"
                                       [|(any_to_js x1350)|])
                              | None -> ());
                             x1349))|])
    let (map :
      ('tags, 'T) this ->
        callbackfn:(value:'T -> index:float -> array:'T list -> 'U) ->
          ?thisArg:any -> unit -> 'U list)
      =
      fun (x1367 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x1359 :
                        value:'T -> index:float -> array:'T list -> 'U)
          ->
          fun ?thisArg:(x1360 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1370 = this_to_js Obj.magic Obj.magic x1367 in
                 Ojs.call (Ojs.get_prop_ascii x1370 "map") "apply"
                   [|x1370;((let x1361 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1361 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1363 : Ojs.t) ->
                                          fun (x1364 : Ojs.t) ->
                                            fun (x1365 : Ojs.t) ->
                                              Obj.magic
                                                (x1359
                                                   ~value:(Obj.magic x1363)
                                                   ~index:(Ojs.float_of_js
                                                             x1364)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1365))))|]);
                             (match x1360 with
                              | Some x1362 ->
                                  ignore
                                    (Ojs.call x1361 "push"
                                       [|(any_to_js x1362)|])
                              | None -> ());
                             x1361))|])
    let (filter :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> 'S list)
      =
      fun (x1380 : ('tags, 'T) this) ->
        fun
          ~predicate:(x1372 :
                       value:'T -> index:float -> array:'T list -> bool)
          ->
          fun ?thisArg:(x1373 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1383 = this_to_js Obj.magic Obj.magic x1380 in
                 Ojs.call (Ojs.get_prop_ascii x1383 "filter") "apply"
                   [|x1383;((let x1374 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1374 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1376 : Ojs.t) ->
                                          fun (x1377 : Ojs.t) ->
                                            fun (x1378 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x1372
                                                   ~value:(Obj.magic x1376)
                                                   ~index:(Ojs.float_of_js
                                                             x1377)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1378))))|]);
                             (match x1373 with
                              | Some x1375 ->
                                  ignore
                                    (Ojs.call x1374 "push"
                                       [|(any_to_js x1375)|])
                              | None -> ());
                             x1374))|])
    let (filter' :
      ('tags, 'T) this ->
        predicate:(value:'T -> index:float -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> 'T list)
      =
      fun (x1393 : ('tags, 'T) this) ->
        fun
          ~predicate:(x1385 :
                       value:'T -> index:float -> array:'T list -> unknown)
          ->
          fun ?thisArg:(x1386 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1396 = this_to_js Obj.magic Obj.magic x1393 in
                 Ojs.call (Ojs.get_prop_ascii x1396 "filter") "apply"
                   [|x1396;((let x1387 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1387 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1389 : Ojs.t) ->
                                          fun (x1390 : Ojs.t) ->
                                            fun (x1391 : Ojs.t) ->
                                              unknown_to_js
                                                (x1385
                                                   ~value:(Obj.magic x1389)
                                                   ~index:(Ojs.float_of_js
                                                             x1390)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1391))))|]);
                             (match x1386 with
                              | Some x1388 ->
                                  ignore
                                    (Ojs.call x1387 "push"
                                       [|(any_to_js x1388)|])
                              | None -> ());
                             x1387))|])
    let (reduce :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x1404 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x1398 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic Obj.magic x1404) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x1399 : Ojs.t) ->
                       fun (x1400 : Ojs.t) ->
                         fun (x1401 : Ojs.t) ->
                           fun (x1402 : Ojs.t) ->
                             Obj.magic
                               (x1398 ~previousValue:(Obj.magic x1399)
                                  ~currentValue:(Obj.magic x1400)
                                  ~currentIndex:(Ojs.float_of_js x1401)
                                  ~array:(Ojs.list_of_js Obj.magic x1402))))|])
    let (reduce' :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x1414 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x1407 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x1413 : 'T) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic Obj.magic x1414) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x1408 : Ojs.t) ->
                         fun (x1409 : Ojs.t) ->
                           fun (x1410 : Ojs.t) ->
                             fun (x1411 : Ojs.t) ->
                               Obj.magic
                                 (x1407 ~previousValue:(Obj.magic x1408)
                                    ~currentValue:(Obj.magic x1409)
                                    ~currentIndex:(Ojs.float_of_js x1410)
                                    ~array:(Ojs.list_of_js Obj.magic x1411))));(
                   Obj.magic x1413)|])
    let (reduce'' :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x1424 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x1417 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x1423 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic Obj.magic x1424) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x1418 : Ojs.t) ->
                         fun (x1419 : Ojs.t) ->
                           fun (x1420 : Ojs.t) ->
                             fun (x1421 : Ojs.t) ->
                               Obj.magic
                                 (x1417 ~previousValue:(Obj.magic x1418)
                                    ~currentValue:(Obj.magic x1419)
                                    ~currentIndex:(Ojs.float_of_js x1420)
                                    ~array:(Ojs.list_of_js Obj.magic x1421))));(
                   Obj.magic x1423)|])
    let (reduceRight :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x1433 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x1427 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic Obj.magic x1433) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x1428 : Ojs.t) ->
                       fun (x1429 : Ojs.t) ->
                         fun (x1430 : Ojs.t) ->
                           fun (x1431 : Ojs.t) ->
                             Obj.magic
                               (x1427 ~previousValue:(Obj.magic x1428)
                                  ~currentValue:(Obj.magic x1429)
                                  ~currentIndex:(Ojs.float_of_js x1430)
                                  ~array:(Ojs.list_of_js Obj.magic x1431))))|])
    let (reduceRight' :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x1443 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x1436 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x1442 : 'T) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic Obj.magic x1443) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x1437 : Ojs.t) ->
                         fun (x1438 : Ojs.t) ->
                           fun (x1439 : Ojs.t) ->
                             fun (x1440 : Ojs.t) ->
                               Obj.magic
                                 (x1436 ~previousValue:(Obj.magic x1437)
                                    ~currentValue:(Obj.magic x1438)
                                    ~currentIndex:(Ojs.float_of_js x1439)
                                    ~array:(Ojs.list_of_js Obj.magic x1440))));(
                   Obj.magic x1442)|])
    let (reduceRight'' :
      ('tags, 'T) this ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:float -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x1453 : ('tags, 'T) this) ->
        fun
          ~callbackfn:(x1446 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:float -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x1452 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic Obj.magic x1453) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x1447 : Ojs.t) ->
                         fun (x1448 : Ojs.t) ->
                           fun (x1449 : Ojs.t) ->
                             fun (x1450 : Ojs.t) ->
                               Obj.magic
                                 (x1446 ~previousValue:(Obj.magic x1447)
                                    ~currentValue:(Obj.magic x1448)
                                    ~currentIndex:(Ojs.float_of_js x1449)
                                    ~array:(Ojs.list_of_js Obj.magic x1450))));(
                   Obj.magic x1452)|])
    let (get : ('tags, 'T) this -> float -> 'T) =
      fun (x1456 : ('tags, 'T) this) ->
        fun (x1459 : float) ->
          Obj.magic
            (Ojs.get_prop (this_to_js Obj.magic Obj.magic x1456)
               (Ojs.float_to_js x1459))
    let (set : ('tags, 'T) this -> float -> 'T -> unit) =
      fun (x1460 : ('tags, 'T) this) ->
        fun (x1463 : float) ->
          fun (x1464 : 'T) ->
            Ojs.set_prop (this_to_js Obj.magic Obj.magic x1460)
              (Ojs.float_to_js x1463) (Obj.magic x1464)
    let (from : ('T ArrayLike.t, 'T Iterable.t) union2 -> 'T list) =
      fun (x1465 : ('T ArrayLike.t, 'T Iterable.t) union2) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "from"
             [|(union2_to_js
                  (fun (x1466 : 'T ArrayLike.t) ->
                     ArrayLike.t_to_js Obj.magic x1466)
                  (fun (x1468 : 'T Iterable.t) ->
                     Iterable.t_to_js Obj.magic x1468) x1465)|])
    let (from' :
      iterable:('T ArrayLike.t, 'T Iterable.t) union2 ->
        mapfn:(v:'T -> k:float -> 'U) -> ?thisArg:any -> unit -> 'U list)
      =
      fun ~iterable:(x1471 : ('T ArrayLike.t, 'T Iterable.t) union2) ->
        fun ~mapfn:(x1472 : v:'T -> k:float -> 'U) ->
          fun ?thisArg:(x1473 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1482 = Ojs.get_prop_ascii Ojs.global "Array" in
                 Ojs.call (Ojs.get_prop_ascii x1482 "from") "apply"
                   [|x1482;((let x1474 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1474 "push"
                                  [|(union2_to_js
                                       (fun (x1478 : 'T ArrayLike.t) ->
                                          ArrayLike.t_to_js Obj.magic x1478)
                                       (fun (x1480 : 'T Iterable.t) ->
                                          Iterable.t_to_js Obj.magic x1480)
                                       x1471)|]);
                             ignore
                               (Ojs.call x1474 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x1476 : Ojs.t) ->
                                          fun (x1477 : Ojs.t) ->
                                            Obj.magic
                                              (x1472 ~v:(Obj.magic x1476)
                                                 ~k:(Ojs.float_of_js x1477))))|]);
                             (match x1473 with
                              | Some x1475 ->
                                  ignore
                                    (Ojs.call x1474 "push"
                                       [|(any_to_js x1475)|])
                              | None -> ());
                             x1474))|])
    let (from'' : 'T ArrayLike.t -> 'T list) =
      fun (x1484 : 'T ArrayLike.t) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "from"
             [|(ArrayLike.t_to_js Obj.magic x1484)|])
    let (from''' :
      arrayLike:'T ArrayLike.t ->
        mapfn:(v:'T -> k:float -> 'U) -> ?thisArg:any -> unit -> 'U list)
      =
      fun ~arrayLike:(x1487 : 'T ArrayLike.t) ->
        fun ~mapfn:(x1488 : v:'T -> k:float -> 'U) ->
          fun ?thisArg:(x1489 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1495 = Ojs.get_prop_ascii Ojs.global "Array" in
                 Ojs.call (Ojs.get_prop_ascii x1495 "from") "apply"
                   [|x1495;((let x1490 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1490 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x1487)|]);
                             ignore
                               (Ojs.call x1490 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x1492 : Ojs.t) ->
                                          fun (x1493 : Ojs.t) ->
                                            Obj.magic
                                              (x1488 ~v:(Obj.magic x1492)
                                                 ~k:(Ojs.float_of_js x1493))))|]);
                             (match x1489 with
                              | Some x1491 ->
                                  ignore
                                    (Ojs.call x1490 "push"
                                       [|(any_to_js x1491)|])
                              | None -> ());
                             x1490))|])
    let (of_ : 'T list -> 'T list) =
      fun (x1497 : 'T list) ->
        Ojs.list_of_js Obj.magic
          (let x1500 = Ojs.get_prop_ascii Ojs.global "Array" in
           Ojs.call (Ojs.get_prop_ascii x1500 "of") "apply"
             [|x1500;((let x1498 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x1499 : 'T) ->
                            ignore
                              (Ojs.call x1498 "push" [|(Obj.magic x1499)|]))
                         x1497;
                       x1498))|])
    let (create : ?arrayLength:float -> unit -> any list) =
      fun ?arrayLength:(x1502 : float option) ->
        fun () ->
          Ojs.list_of_js any_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Array")
               (let x1503 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1502 with
                 | Some x1504 ->
                     ignore
                       (Ojs.call x1503 "push" [|(Ojs.float_to_js x1504)|])
                 | None -> ());
                x1503))
    let (create' : float -> 'T list) =
      fun (x1506 : float) ->
        Ojs.list_of_js Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
             [|(Ojs.float_to_js x1506)|])
    let (create'' : 'T list -> 'T list) =
      fun (x1508 : 'T list) ->
        Ojs.list_of_js Obj.magic
          (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Array")
             (let x1509 =
                Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
              List.iter
                (fun (x1510 : 'T) ->
                   ignore (Ojs.call x1509 "push" [|(Obj.magic x1510)|]))
                x1508;
              x1509))
    let (invoke : ?arrayLength:float -> unit -> any list) =
      fun ?arrayLength:(x1512 : float option) ->
        fun () ->
          Ojs.list_of_js any_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "apply"
               [|Ojs.null;((let x1513 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x1512 with
                             | Some x1514 ->
                                 ignore
                                   (Ojs.call x1513 "push"
                                      [|(Ojs.float_to_js x1514)|])
                             | None -> ());
                            x1513))|])
    let (invoke' : float -> 'T list) =
      fun (x1516 : float) ->
        Ojs.list_of_js Obj.magic
          (Ojs.apply (Ojs.get_prop_ascii Ojs.global "Array")
             [|(Ojs.float_to_js x1516)|])
    let (invoke'' : 'T list -> 'T list) =
      fun (x1518 : 'T list) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "apply"
             [|Ojs.null;((let x1519 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x1520 : 'T) ->
                               ignore
                                 (Ojs.call x1519 "push" [|(Obj.magic x1520)|]))
                            x1518;
                          x1519))|])
    let (isArray : any -> bool) =
      fun (x1522 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "isArray"
             [|(any_to_js x1522)|])
    let (prototype : unit -> any list) =
      fun () ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Array")
             "prototype")
    let cast_from = Obj.magic
    let (to_ml : 'T t -> 'T list) =
      fun (x1524 : 'T t) ->
        Ojs.list_of_js Obj.magic (t_to_js Obj.magic x1524)
    let (of_ml : 'T list -> 'T t) =
      fun (x1527 : 'T list) ->
        t_of_js Obj.magic (Ojs.list_to_js Obj.magic x1527)
  end
module AnonymousInterface6 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1531 : Ojs.t) -> x1531
    and t_to_js : t -> Ojs.t = fun (x1530 : Ojs.t) -> x1530
    let (get : t -> string -> string) =
      fun (x1532 : t) ->
        fun (x1533 : string) ->
          Ojs.string_of_js
            (Ojs.get_prop (t_to_js x1532) (Ojs.string_to_js x1533))
    let (set : t -> string -> string -> unit) =
      fun (x1534 : t) ->
        fun (x1535 : string) ->
          fun (x1536 : string) ->
            Ojs.set_prop (t_to_js x1534) (Ojs.string_to_js x1535)
              (Ojs.string_to_js x1536)
  end
module RegExpExecArray =
  struct
    type t =
      [ `Array of string  | `Array of string  | `ArrayLike of string 
      | `IterableIterator of string 
      | `Iterator of (string * any * never or_undefined) 
      | `RegExpExecArray ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1538 : Ojs.t) -> t_of_js x1538
    and t_0_to_js : t_0 -> Ojs.t = fun (x1537 : t) -> t_to_js x1537
    type tags =
      [ `Array of string  | `Array of string  | `ArrayLike of string 
      | `IterableIterator of string 
      | `Iterator of (string * any * never or_undefined) 
      | `RegExpExecArray ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegExpExecArray ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1541 : Ojs.t) -> intf_of_js __tags_of_js x1541
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1539 : __tags intf) -> intf_to_js __tags_to_js x1539
    let (get_index : 'tags this -> float) =
      fun (x1543 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1543) "index")
    let (set_index : 'tags this -> float -> unit) =
      fun (x1545 : 'tags this) ->
        fun (x1546 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1545) "index"
            (Ojs.float_to_js x1546)
    let (get_input : 'tags this -> string) =
      fun (x1548 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1548) "input")
    let (set_input : 'tags this -> string -> unit) =
      fun (x1550 : 'tags this) ->
        fun (x1551 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1550) "input"
            (Ojs.string_to_js x1551)
    let (get_groups : 'tags this -> AnonymousInterface6.t) =
      fun (x1553 : 'tags this) ->
        AnonymousInterface6.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1553) "groups")
    let (set_groups : 'tags this -> AnonymousInterface6.t -> unit) =
      fun (x1555 : 'tags this) ->
        fun (x1556 : AnonymousInterface6.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1555) "groups"
            (AnonymousInterface6.t_to_js x1556)
    let cast_from = Obj.magic
  end
module RegExpMatchArray =
  struct
    type t =
      [ `Array of string  | `Array of string  | `ArrayLike of string 
      | `IterableIterator of string 
      | `Iterator of (string * any * never or_undefined) 
      | `RegExpMatchArray ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1559 : Ojs.t) -> t_of_js x1559
    and t_0_to_js : t_0 -> Ojs.t = fun (x1558 : t) -> t_to_js x1558
    type tags =
      [ `Array of string  | `Array of string  | `ArrayLike of string 
      | `IterableIterator of string 
      | `Iterator of (string * any * never or_undefined) 
      | `RegExpMatchArray ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegExpMatchArray ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1562 : Ojs.t) -> intf_of_js __tags_of_js x1562
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1560 : __tags intf) -> intf_to_js __tags_to_js x1560
    let (get_index : 'tags this -> float) =
      fun (x1564 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1564) "index")
    let (set_index : 'tags this -> float -> unit) =
      fun (x1566 : 'tags this) ->
        fun (x1567 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1566) "index"
            (Ojs.float_to_js x1567)
    let (get_input : 'tags this -> string) =
      fun (x1569 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1569) "input")
    let (set_input : 'tags this -> string -> unit) =
      fun (x1571 : 'tags this) ->
        fun (x1572 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1571) "input"
            (Ojs.string_to_js x1572)
    let (get_groups : 'tags this -> AnonymousInterface6.t) =
      fun (x1574 : 'tags this) ->
        AnonymousInterface6.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1574) "groups")
    let (set_groups : 'tags this -> AnonymousInterface6.t -> unit) =
      fun (x1576 : 'tags this) ->
        fun (x1577 : AnonymousInterface6.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1576) "groups"
            (AnonymousInterface6.t_to_js x1577)
    let cast_from = Obj.magic
  end
module RegExp =
  struct
    type t = [ `RegExp ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1580 : Ojs.t) -> t_of_js x1580
    and t_0_to_js : t_0 -> Ojs.t = fun (x1579 : t) -> t_to_js x1579
    type tags = [ `RegExp ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegExp ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1583 : Ojs.t) -> intf_of_js __tags_of_js x1583
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1581 : __tags intf) -> intf_to_js __tags_to_js x1581
    let (get_flags : 'tags this -> string) =
      fun (x1585 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1585) "flags")
    let (get_sticky : 'tags this -> bool) =
      fun (x1587 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1587) "sticky")
    let (get_unicode : 'tags this -> bool) =
      fun (x1589 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1589) "unicode")
    let (exec : 'tags this -> string:string -> RegExpExecArray.t or_null) =
      fun (x1592 : 'tags this) ->
        fun ~string:(x1591 : string) ->
          or_null_of_js RegExpExecArray.t_of_js
            (Ojs.call (this_to_js Obj.magic x1592) "exec"
               [|(Ojs.string_to_js x1591)|])
    let (test : 'tags this -> string:string -> bool) =
      fun (x1596 : 'tags this) ->
        fun ~string:(x1595 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1596) "test"
               [|(Ojs.string_to_js x1595)|])
    let (get_source : 'tags this -> string) =
      fun (x1598 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1598) "source")
    let (get_global : 'tags this -> bool) =
      fun (x1600 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1600) "global")
    let (get_ignoreCase : 'tags this -> bool) =
      fun (x1602 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1602) "ignoreCase")
    let (get_multiline : 'tags this -> bool) =
      fun (x1604 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1604) "multiline")
    let (get_lastIndex : 'tags this -> float) =
      fun (x1606 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1606) "lastIndex")
    let (set_lastIndex : 'tags this -> float -> unit) =
      fun (x1608 : 'tags this) ->
        fun (x1609 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1608) "lastIndex"
            (Ojs.float_to_js x1609)
    let (compile :
      'tags this -> pattern:string -> ?flags:string -> unit -> 'tags this) =
      fun (x1615 : 'tags this) ->
        fun ~pattern:(x1611 : string) ->
          fun ?flags:(x1612 : string option) ->
            fun () ->
              this_of_js Obj.magic
                (let x1617 = this_to_js Obj.magic x1615 in
                 Ojs.call (Ojs.get_prop_ascii x1617 "compile") "apply"
                   [|x1617;((let x1613 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1613 "push"
                                  [|(Ojs.string_to_js x1611)|]);
                             (match x1612 with
                              | Some x1614 ->
                                  ignore
                                    (Ojs.call x1613 "push"
                                       [|(Ojs.string_to_js x1614)|])
                              | None -> ());
                             x1613))|])
    let (get_dotAll : 'tags this -> bool) =
      fun (x1619 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1619) "dotAll")
    let (create : pattern:t or_string -> ?flags:string -> unit -> t) =
      fun ~pattern:(x1621 : t or_string) ->
        fun ?flags:(x1622 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "RegExp")
                 (let x1623 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x1623 "push"
                       [|(or_string_to_js t_to_js x1621)|]);
                  (match x1622 with
                   | Some x1624 ->
                       ignore
                         (Ojs.call x1623 "push" [|(Ojs.string_to_js x1624)|])
                   | None -> ());
                  x1623))
    let (invoke : pattern:t or_string -> ?flags:string -> unit -> t) =
      fun ~pattern:(x1626 : t or_string) ->
        fun ?flags:(x1627 : string option) ->
          fun () ->
            t_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "apply"
                 [|Ojs.null;((let x1628 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x1628 "push"
                                   [|(or_string_to_js t_to_js x1626)|]);
                              (match x1627 with
                               | Some x1629 ->
                                   ignore
                                     (Ojs.call x1628 "push"
                                        [|(Ojs.string_to_js x1629)|])
                               | None -> ());
                              x1628))|])
    let (create' : t or_string -> t) =
      fun (x1631 : t or_string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RegExp")
             [|(or_string_to_js t_to_js x1631)|])
    let (create'' : pattern:string -> ?flags:string -> unit -> t) =
      fun ~pattern:(x1633 : string) ->
        fun ?flags:(x1634 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "RegExp")
                 (let x1635 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x1635 "push" [|(Ojs.string_to_js x1633)|]);
                  (match x1634 with
                   | Some x1636 ->
                       ignore
                         (Ojs.call x1635 "push" [|(Ojs.string_to_js x1636)|])
                   | None -> ());
                  x1635))
    let (invoke' : t or_string -> t) =
      fun (x1637 : t or_string) ->
        t_of_js
          (Ojs.apply (Ojs.get_prop_ascii Ojs.global "RegExp")
             [|(or_string_to_js t_to_js x1637)|])
    let (invoke'' : pattern:string -> ?flags:string -> unit -> t) =
      fun ~pattern:(x1639 : string) ->
        fun ?flags:(x1640 : string option) ->
          fun () ->
            t_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "apply"
                 [|Ojs.null;((let x1641 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x1641 "push"
                                   [|(Ojs.string_to_js x1639)|]);
                              (match x1640 with
                               | Some x1642 ->
                                   ignore
                                     (Ojs.call x1641 "push"
                                        [|(Ojs.string_to_js x1642)|])
                               | None -> ());
                              x1641))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp")
             "prototype")
    let (_1 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$1")
    let (_2 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$2")
    let (_3 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$3")
    let (_4 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$4")
    let (_5 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$5")
    let (_6 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$6")
    let (_7 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$7")
    let (_8 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$8")
    let (_9 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$9")
    let (input : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp")
             "input")
    let (__ : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$_")
    let (lastMatch : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp")
             "lastMatch")
    let (__' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$&")
    let (lastParen : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp")
             "lastParen")
    let (__'' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$+")
    let (leftContext : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp")
             "leftContext")
    let (__''' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$`")
    let (rightContext : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp")
             "rightContext")
    let (__'''' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RegExp") "$'")
    let cast_from = Obj.magic
  end
module AnonymousInterface5 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1644 : Ojs.t) -> x1644
    and t_to_js : t -> Ojs.t = fun (x1643 : Ojs.t) -> x1643
    let (get_raw : t -> (string ArrayLike.t, string list) union2) =
      fun (x1645 : t) ->
        union2_of_js
          (fun (x1646 : Ojs.t) -> ArrayLike.t_of_js Ojs.string_of_js x1646)
          (fun (x1648 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x1648)
          (Ojs.get_prop_ascii (t_to_js x1645) "raw")
    let (set_raw : t -> (string ArrayLike.t, string list) union2 -> unit) =
      fun (x1650 : t) ->
        fun (x1651 : (string ArrayLike.t, string list) union2) ->
          Ojs.set_prop_ascii (t_to_js x1650) "raw"
            (union2_to_js
               (fun (x1652 : string ArrayLike.t) ->
                  ArrayLike.t_to_js Ojs.string_to_js x1652)
               (fun (x1654 : string list) ->
                  Ojs.list_to_js Ojs.string_to_js x1654) x1651)
  end
module AnonymousInterface17 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1657 : Ojs.t) -> x1657
    and t_to_js : t -> Ojs.t = fun (x1656 : Ojs.t) -> x1656
  end
module AnonymousInterface16 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1659 : Ojs.t) -> x1659
    and t_to_js : t -> Ojs.t = fun (x1658 : Ojs.t) -> x1658
  end
module AnonymousInterface15 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1661 : Ojs.t) -> x1661
    and t_to_js : t -> Ojs.t = fun (x1660 : Ojs.t) -> x1660
  end
module AnonymousInterface14 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1663 : Ojs.t) -> x1663
    and t_to_js : t -> Ojs.t = fun (x1662 : Ojs.t) -> x1662
  end
module AnonymousInterface13 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1665 : Ojs.t) -> x1665
    and t_to_js : t -> Ojs.t = fun (x1664 : Ojs.t) -> x1664
  end
module Partial =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x1667 : Ojs.t) -> any_of_js x1667
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x1666 : any) -> any_to_js x1666
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x1670 : Ojs.t) -> t_of_js __T_of_js x1670
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x1668 : __T t) -> t_to_js __T_to_js x1668
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1673 : Ojs.t) -> x1673
    and t_to_js : t -> Ojs.t = fun (x1672 : Ojs.t) -> x1672
    let (get_localeMatcher : t -> [ `L_s24_best_fit  | `L_s56_lookup ]) =
      fun (x1674 : t) ->
        let x1675 = Ojs.get_prop_ascii (t_to_js x1674) "localeMatcher" in
        match Ojs.string_of_js x1675 with
        | "best fit" -> `L_s24_best_fit
        | "lookup" -> `L_s56_lookup
        | _ -> assert false
    let (set_localeMatcher :
      t -> [ `L_s24_best_fit  | `L_s56_lookup ] -> unit) =
      fun (x1676 : t) ->
        fun (x1677 : [ `L_s24_best_fit  | `L_s56_lookup ]) ->
          Ojs.set_prop_ascii (t_to_js x1676) "localeMatcher"
            (match x1677 with
             | `L_s24_best_fit -> Ojs.string_to_js "best fit"
             | `L_s56_lookup -> Ojs.string_to_js "lookup")
  end
module rec
  AnonymousInterface10:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val create :
                           t ->
                             ?locales:string list or_string ->
                               ?options:Intl.NumberFormatOptions.t ->
                                 unit -> Intl.NumberFormat.t
                         val apply :
                           t ->
                             ?locales:string list or_string ->
                               ?options:Intl.NumberFormatOptions.t ->
                                 unit -> Intl.NumberFormat.t
                         val supportedLocalesOf :
                           t ->
                             locales:string list or_string ->
                               ?options:Intl.NumberFormatOptions.t ->
                                 unit -> string list
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1679 : Ojs.t) -> x1679
    and t_to_js : t -> Ojs.t = fun (x1678 : Ojs.t) -> x1678
    let (create :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.NumberFormatOptions.t -> unit -> Intl.NumberFormat.t)
      =
      fun (x1687 : t) ->
        fun ?locales:(x1680 : string list or_string option) ->
          fun ?options:(x1681 : Intl.NumberFormatOptions.t option) ->
            fun () ->
              Intl.NumberFormat.t_of_js
                (Ojs.new_obj_arr (t_to_js x1687)
                   (let x1682 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x1680 with
                     | Some x1684 ->
                         ignore
                           (Ojs.call x1682 "push"
                              [|(or_string_to_js
                                   (fun (x1685 : string list) ->
                                      Ojs.list_to_js Ojs.string_to_js x1685)
                                   x1684)|])
                     | None -> ());
                    (match x1681 with
                     | Some x1683 ->
                         ignore
                           (Ojs.call x1682 "push"
                              [|(Intl.NumberFormatOptions.t_to_js x1683)|])
                     | None -> ());
                    x1682))
    let (apply :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.NumberFormatOptions.t -> unit -> Intl.NumberFormat.t)
      =
      fun (x1695 : t) ->
        fun ?locales:(x1688 : string list or_string option) ->
          fun ?options:(x1689 : Intl.NumberFormatOptions.t option) ->
            fun () ->
              Intl.NumberFormat.t_of_js
                (Ojs.call (t_to_js x1695) "apply"
                   [|Ojs.null;((let x1690 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x1688 with
                                 | Some x1692 ->
                                     ignore
                                       (Ojs.call x1690 "push"
                                          [|(or_string_to_js
                                               (fun (x1693 : string list) ->
                                                  Ojs.list_to_js
                                                    Ojs.string_to_js x1693)
                                               x1692)|])
                                 | None -> ());
                                (match x1689 with
                                 | Some x1691 ->
                                     ignore
                                       (Ojs.call x1690 "push"
                                          [|(Intl.NumberFormatOptions.t_to_js
                                               x1691)|])
                                 | None -> ());
                                x1690))|])
    let (supportedLocalesOf :
      t ->
        locales:string list or_string ->
          ?options:Intl.NumberFormatOptions.t -> unit -> string list)
      =
      fun (x1702 : t) ->
        fun ~locales:(x1696 : string list or_string) ->
          fun ?options:(x1697 : Intl.NumberFormatOptions.t option) ->
            fun () ->
              Ojs.list_of_js Ojs.string_of_js
                (let x1703 = t_to_js x1702 in
                 Ojs.call (Ojs.get_prop_ascii x1703 "supportedLocalesOf")
                   "apply"
                   [|x1703;((let x1698 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1698 "push"
                                  [|(or_string_to_js
                                       (fun (x1700 : string list) ->
                                          Ojs.list_to_js Ojs.string_to_js
                                            x1700) x1696)|]);
                             (match x1697 with
                              | Some x1699 ->
                                  ignore
                                    (Ojs.call x1698 "push"
                                       [|(Intl.NumberFormatOptions.t_to_js
                                            x1699)|])
                              | None -> ());
                             x1698))|])
  end
 and
  AnonymousInterface11:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val create :
                           t ->
                             ?locales:string list or_string ->
                               ?options:Intl.PluralRulesOptions.t ->
                                 unit -> Intl.PluralRules.t
                         val apply :
                           t ->
                             ?locales:string list or_string ->
                               ?options:Intl.PluralRulesOptions.t ->
                                 unit -> Intl.PluralRules.t
                         val supportedLocalesOf :
                           t ->
                             locales:string list or_string ->
                               ?options:AnonymousInterface3.t ->
                                 unit -> string list
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1706 : Ojs.t) -> x1706
    and t_to_js : t -> Ojs.t = fun (x1705 : Ojs.t) -> x1705
    let (create :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.PluralRulesOptions.t -> unit -> Intl.PluralRules.t)
      =
      fun (x1714 : t) ->
        fun ?locales:(x1707 : string list or_string option) ->
          fun ?options:(x1708 : Intl.PluralRulesOptions.t option) ->
            fun () ->
              Intl.PluralRules.t_of_js
                (Ojs.new_obj_arr (t_to_js x1714)
                   (let x1709 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x1707 with
                     | Some x1711 ->
                         ignore
                           (Ojs.call x1709 "push"
                              [|(or_string_to_js
                                   (fun (x1712 : string list) ->
                                      Ojs.list_to_js Ojs.string_to_js x1712)
                                   x1711)|])
                     | None -> ());
                    (match x1708 with
                     | Some x1710 ->
                         ignore
                           (Ojs.call x1709 "push"
                              [|(Intl.PluralRulesOptions.t_to_js x1710)|])
                     | None -> ());
                    x1709))
    let (apply :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.PluralRulesOptions.t -> unit -> Intl.PluralRules.t)
      =
      fun (x1722 : t) ->
        fun ?locales:(x1715 : string list or_string option) ->
          fun ?options:(x1716 : Intl.PluralRulesOptions.t option) ->
            fun () ->
              Intl.PluralRules.t_of_js
                (Ojs.call (t_to_js x1722) "apply"
                   [|Ojs.null;((let x1717 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x1715 with
                                 | Some x1719 ->
                                     ignore
                                       (Ojs.call x1717 "push"
                                          [|(or_string_to_js
                                               (fun (x1720 : string list) ->
                                                  Ojs.list_to_js
                                                    Ojs.string_to_js x1720)
                                               x1719)|])
                                 | None -> ());
                                (match x1716 with
                                 | Some x1718 ->
                                     ignore
                                       (Ojs.call x1717 "push"
                                          [|(Intl.PluralRulesOptions.t_to_js
                                               x1718)|])
                                 | None -> ());
                                x1717))|])
    let (supportedLocalesOf :
      t ->
        locales:string list or_string ->
          ?options:AnonymousInterface3.t -> unit -> string list)
      =
      fun (x1729 : t) ->
        fun ~locales:(x1723 : string list or_string) ->
          fun ?options:(x1724 : AnonymousInterface3.t option) ->
            fun () ->
              Ojs.list_of_js Ojs.string_of_js
                (let x1730 = t_to_js x1729 in
                 Ojs.call (Ojs.get_prop_ascii x1730 "supportedLocalesOf")
                   "apply"
                   [|x1730;((let x1725 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1725 "push"
                                  [|(or_string_to_js
                                       (fun (x1727 : string list) ->
                                          Ojs.list_to_js Ojs.string_to_js
                                            x1727) x1723)|]);
                             (match x1724 with
                              | Some x1726 ->
                                  ignore
                                    (Ojs.call x1725 "push"
                                       [|(AnonymousInterface3.t_to_js x1726)|])
                              | None -> ());
                             x1725))|])
  end and
       AnonymousInterface12:sig
                              type t = private Ojs.t
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val create :
                                t ->
                                  ?tag:Intl.BCP47LanguageTag.t ->
                                    ?options:Intl.LocaleOptions.t ->
                                      unit -> Intl.Locale.t
                            end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x1733 : Ojs.t) -> x1733
         and t_to_js : t -> Ojs.t = fun (x1732 : Ojs.t) -> x1732
         let (create :
           t ->
             ?tag:Intl.BCP47LanguageTag.t ->
               ?options:Intl.LocaleOptions.t -> unit -> Intl.Locale.t)
           =
           fun (x1739 : t) ->
             fun ?tag:(x1734 : Intl.BCP47LanguageTag.t option) ->
               fun ?options:(x1735 : Intl.LocaleOptions.t option) ->
                 fun () ->
                   Intl.Locale.t_of_js
                     (Ojs.new_obj_arr (t_to_js x1739)
                        (let x1736 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x1734 with
                          | Some x1738 ->
                              ignore
                                (Ojs.call x1736 "push"
                                   [|(Intl.BCP47LanguageTag.t_to_js x1738)|])
                          | None -> ());
                         (match x1735 with
                          | Some x1737 ->
                              ignore
                                (Ojs.call x1736 "push"
                                   [|(Intl.LocaleOptions.t_to_js x1737)|])
                          | None -> ());
                         x1736))
       end and
            AnonymousInterface2:sig
                                  type t = private Ojs.t
                                  val t_to_js : t -> Ojs.t
                                  val t_of_js : Ojs.t -> t
                                  val get_localeMatcher :
                                    t ->
                                      Intl.RelativeTimeFormatLocaleMatcher.t
                                  val set_localeMatcher :
                                    t ->
                                      Intl.RelativeTimeFormatLocaleMatcher.t
                                        -> unit
                                end =
            struct
              type t = Ojs.t
              let rec t_of_js : Ojs.t -> t = fun (x1741 : Ojs.t) -> x1741
              and t_to_js : t -> Ojs.t = fun (x1740 : Ojs.t) -> x1740
              let (get_localeMatcher :
                t -> Intl.RelativeTimeFormatLocaleMatcher.t) =
                fun (x1742 : t) ->
                  Intl.RelativeTimeFormatLocaleMatcher.t_of_js
                    (Ojs.get_prop_ascii (t_to_js x1742) "localeMatcher")
              let (set_localeMatcher :
                t -> Intl.RelativeTimeFormatLocaleMatcher.t -> unit) =
                fun (x1743 : t) ->
                  fun (x1744 : Intl.RelativeTimeFormatLocaleMatcher.t) ->
                    Ojs.set_prop_ascii (t_to_js x1743) "localeMatcher"
                      (Intl.RelativeTimeFormatLocaleMatcher.t_to_js x1744)
            end and
                 AnonymousInterface20:sig
                                        type t = private Ojs.t
                                        val t_to_js : t -> Ojs.t
                                        val t_of_js : Ojs.t -> t
                                        val create :
                                          t ->
                                            ?locales:(Intl.UnicodeBCP47LocaleIdentifier.t,
                                              Intl.UnicodeBCP47LocaleIdentifier.t)
                                              or_array ->
                                              ?options:Intl.RelativeTimeFormatOptions.t
                                                ->
                                                unit ->
                                                  Intl.RelativeTimeFormat.t
                                        val supportedLocalesOf :
                                          t ->
                                            ?locales:(Intl.UnicodeBCP47LocaleIdentifier.t,
                                              Intl.UnicodeBCP47LocaleIdentifier.t)
                                              or_array ->
                                              ?options:Intl.RelativeTimeFormatOptions.t
                                                ->
                                                unit ->
                                                  Intl.UnicodeBCP47LocaleIdentifier.t
                                                    list
                                      end =
                 struct
                   type t = Ojs.t
                   let rec t_of_js : Ojs.t -> t =
                     fun (x1746 : Ojs.t) -> x1746
                   and t_to_js : t -> Ojs.t = fun (x1745 : Ojs.t) -> x1745
                   let (create :
                     t ->
                       ?locales:(Intl.UnicodeBCP47LocaleIdentifier.t,
                         Intl.UnicodeBCP47LocaleIdentifier.t) or_array ->
                         ?options:Intl.RelativeTimeFormatOptions.t ->
                           unit -> Intl.RelativeTimeFormat.t)
                     =
                     fun (x1754 : t) ->
                       fun
                         ?locales:(x1747 :
                                    (Intl.UnicodeBCP47LocaleIdentifier.t,
                                      Intl.UnicodeBCP47LocaleIdentifier.t)
                                      or_array option)
                         ->
                         fun
                           ?options:(x1748 :
                                      Intl.RelativeTimeFormatOptions.t option)
                           ->
                           fun () ->
                             Intl.RelativeTimeFormat.t_of_js
                               (Ojs.new_obj_arr (t_to_js x1754)
                                  (let x1749 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   (match x1747 with
                                    | Some x1751 ->
                                        ignore
                                          (Ojs.call x1749 "push"
                                             [|(or_array_to_js
                                                  Intl.UnicodeBCP47LocaleIdentifier.t_to_js
                                                  Intl.UnicodeBCP47LocaleIdentifier.t_to_js
                                                  x1751)|])
                                    | None -> ());
                                   (match x1748 with
                                    | Some x1750 ->
                                        ignore
                                          (Ojs.call x1749 "push"
                                             [|(Intl.RelativeTimeFormatOptions.t_to_js
                                                  x1750)|])
                                    | None -> ());
                                   x1749))
                   let (supportedLocalesOf :
                     t ->
                       ?locales:(Intl.UnicodeBCP47LocaleIdentifier.t,
                         Intl.UnicodeBCP47LocaleIdentifier.t) or_array ->
                         ?options:Intl.RelativeTimeFormatOptions.t ->
                           unit -> Intl.UnicodeBCP47LocaleIdentifier.t list)
                     =
                     fun (x1762 : t) ->
                       fun
                         ?locales:(x1755 :
                                    (Intl.UnicodeBCP47LocaleIdentifier.t,
                                      Intl.UnicodeBCP47LocaleIdentifier.t)
                                      or_array option)
                         ->
                         fun
                           ?options:(x1756 :
                                      Intl.RelativeTimeFormatOptions.t option)
                           ->
                           fun () ->
                             Ojs.list_of_js
                               Intl.UnicodeBCP47LocaleIdentifier.t_of_js
                               (let x1763 = t_to_js x1762 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x1763
                                     "supportedLocalesOf") "apply"
                                  [|x1763;((let x1757 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1755 with
                                             | Some x1759 ->
                                                 ignore
                                                   (Ojs.call x1757 "push"
                                                      [|(or_array_to_js
                                                           Intl.UnicodeBCP47LocaleIdentifier.t_to_js
                                                           Intl.UnicodeBCP47LocaleIdentifier.t_to_js
                                                           x1759)|])
                                             | None -> ());
                                            (match x1756 with
                                             | Some x1758 ->
                                                 ignore
                                                   (Ojs.call x1757 "push"
                                                      [|(Intl.RelativeTimeFormatOptions.t_to_js
                                                           x1758)|])
                                             | None -> ());
                                            x1757))|])
                 end and
                      AnonymousInterface4:sig
                                            type t = private Ojs.t
                                            val t_to_js : t -> Ojs.t
                                            val t_of_js : Ojs.t -> t
                                            val get_prototype :
                                              t -> Intl.DisplayNames.t
                                            val set_prototype :
                                              t ->
                                                Intl.DisplayNames.t -> unit
                                            val create :
                                              t ->
                                                ?locales:(Intl.BCP47LanguageTag.t,
                                                  Intl.BCP47LanguageTag.t)
                                                  or_array ->
                                                  ?options:Intl.DisplayNamesOptions.t
                                                    Partial.t ->
                                                    unit ->
                                                      Intl.DisplayNames.t
                                            val supportedLocalesOf :
                                              t ->
                                                locales:(Intl.BCP47LanguageTag.t,
                                                  Intl.BCP47LanguageTag.t)
                                                  or_array ->
                                                  ?options:AnonymousInterface2.t
                                                    ->
                                                    unit ->
                                                      Intl.BCP47LanguageTag.t
                                                        list
                                          end =
                      struct
                        type t = Ojs.t
                        let rec t_of_js : Ojs.t -> t =
                          fun (x1766 : Ojs.t) -> x1766
                        and t_to_js : t -> Ojs.t =
                          fun (x1765 : Ojs.t) -> x1765
                        let (get_prototype : t -> Intl.DisplayNames.t) =
                          fun (x1767 : t) ->
                            Intl.DisplayNames.t_of_js
                              (Ojs.get_prop_ascii (t_to_js x1767) "prototype")
                        let (set_prototype :
                          t -> Intl.DisplayNames.t -> unit) =
                          fun (x1768 : t) ->
                            fun (x1769 : Intl.DisplayNames.t) ->
                              Ojs.set_prop_ascii (t_to_js x1768) "prototype"
                                (Intl.DisplayNames.t_to_js x1769)
                        let (create :
                          t ->
                            ?locales:(Intl.BCP47LanguageTag.t,
                              Intl.BCP47LanguageTag.t) or_array ->
                              ?options:Intl.DisplayNamesOptions.t Partial.t
                                -> unit -> Intl.DisplayNames.t)
                          =
                          fun (x1778 : t) ->
                            fun
                              ?locales:(x1770 :
                                         (Intl.BCP47LanguageTag.t,
                                           Intl.BCP47LanguageTag.t) or_array
                                           option)
                              ->
                              fun
                                ?options:(x1771 :
                                           Intl.DisplayNamesOptions.t
                                             Partial.t option)
                                ->
                                fun () ->
                                  Intl.DisplayNames.t_of_js
                                    (Ojs.new_obj_arr (t_to_js x1778)
                                       (let x1772 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        (match x1770 with
                                         | Some x1775 ->
                                             ignore
                                               (Ojs.call x1772 "push"
                                                  [|(or_array_to_js
                                                       Intl.BCP47LanguageTag.t_to_js
                                                       Intl.BCP47LanguageTag.t_to_js
                                                       x1775)|])
                                         | None -> ());
                                        (match x1771 with
                                         | Some x1773 ->
                                             ignore
                                               (Ojs.call x1772 "push"
                                                  [|(Partial.t_to_js
                                                       Intl.DisplayNamesOptions.t_to_js
                                                       x1773)|])
                                         | None -> ());
                                        x1772))
                        let (supportedLocalesOf :
                          t ->
                            locales:(Intl.BCP47LanguageTag.t,
                              Intl.BCP47LanguageTag.t) or_array ->
                              ?options:AnonymousInterface2.t ->
                                unit -> Intl.BCP47LanguageTag.t list)
                          =
                          fun (x1785 : t) ->
                            fun
                              ~locales:(x1779 :
                                         (Intl.BCP47LanguageTag.t,
                                           Intl.BCP47LanguageTag.t) or_array)
                              ->
                              fun
                                ?options:(x1780 :
                                           AnonymousInterface2.t option)
                                ->
                                fun () ->
                                  Ojs.list_of_js
                                    Intl.BCP47LanguageTag.t_of_js
                                    (let x1786 = t_to_js x1785 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x1786
                                          "supportedLocalesOf") "apply"
                                       [|x1786;((let x1781 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x1781 "push"
                                                      [|(or_array_to_js
                                                           Intl.BCP47LanguageTag.t_to_js
                                                           Intl.BCP47LanguageTag.t_to_js
                                                           x1779)|]);
                                                 (match x1780 with
                                                  | Some x1782 ->
                                                      ignore
                                                        (Ojs.call x1781
                                                           "push"
                                                           [|(AnonymousInterface2.t_to_js
                                                                x1782)|])
                                                  | None -> ());
                                                 x1781))|])
                      end and
                           AnonymousInterface8:sig
                                                 type t = private Ojs.t
                                                 val t_to_js : t -> Ojs.t
                                                 val t_of_js : Ojs.t -> t
                                                 val create :
                                                   t ->
                                                     ?locales:string list
                                                       or_string ->
                                                       ?options:Intl.CollatorOptions.t
                                                         ->
                                                         unit ->
                                                           Intl.Collator.t
                                                 val apply :
                                                   t ->
                                                     ?locales:string list
                                                       or_string ->
                                                       ?options:Intl.CollatorOptions.t
                                                         ->
                                                         unit ->
                                                           Intl.Collator.t
                                                 val supportedLocalesOf :
                                                   t ->
                                                     locales:string list
                                                       or_string ->
                                                       ?options:Intl.CollatorOptions.t
                                                         ->
                                                         unit -> string list
                                               end =
                           struct
                             type t = Ojs.t
                             let rec t_of_js : Ojs.t -> t =
                               fun (x1789 : Ojs.t) -> x1789
                             and t_to_js : t -> Ojs.t =
                               fun (x1788 : Ojs.t) -> x1788
                             let (create :
                               t ->
                                 ?locales:string list or_string ->
                                   ?options:Intl.CollatorOptions.t ->
                                     unit -> Intl.Collator.t)
                               =
                               fun (x1797 : t) ->
                                 fun
                                   ?locales:(x1790 :
                                              string list or_string option)
                                   ->
                                   fun
                                     ?options:(x1791 :
                                                Intl.CollatorOptions.t option)
                                     ->
                                     fun () ->
                                       Intl.Collator.t_of_js
                                         (Ojs.new_obj_arr (t_to_js x1797)
                                            (let x1792 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             (match x1790 with
                                              | Some x1794 ->
                                                  ignore
                                                    (Ojs.call x1792 "push"
                                                       [|(or_string_to_js
                                                            (fun
                                                               (x1795 :
                                                                 string list)
                                                               ->
                                                               Ojs.list_to_js
                                                                 Ojs.string_to_js
                                                                 x1795) x1794)|])
                                              | None -> ());
                                             (match x1791 with
                                              | Some x1793 ->
                                                  ignore
                                                    (Ojs.call x1792 "push"
                                                       [|(Intl.CollatorOptions.t_to_js
                                                            x1793)|])
                                              | None -> ());
                                             x1792))
                             let (apply :
                               t ->
                                 ?locales:string list or_string ->
                                   ?options:Intl.CollatorOptions.t ->
                                     unit -> Intl.Collator.t)
                               =
                               fun (x1805 : t) ->
                                 fun
                                   ?locales:(x1798 :
                                              string list or_string option)
                                   ->
                                   fun
                                     ?options:(x1799 :
                                                Intl.CollatorOptions.t option)
                                     ->
                                     fun () ->
                                       Intl.Collator.t_of_js
                                         (Ojs.call (t_to_js x1805) "apply"
                                            [|Ojs.null;((let x1800 =
                                                           Ojs.new_obj
                                                             (Ojs.get_prop_ascii
                                                                Ojs.global
                                                                "Array") 
                                                             [||] in
                                                         (match x1798 with
                                                          | Some x1802 ->
                                                              ignore
                                                                (Ojs.call
                                                                   x1800
                                                                   "push"
                                                                   [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1803 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1803)
                                                                    x1802)|])
                                                          | None -> ());
                                                         (match x1799 with
                                                          | Some x1801 ->
                                                              ignore
                                                                (Ojs.call
                                                                   x1800
                                                                   "push"
                                                                   [|(
                                                                    Intl.CollatorOptions.t_to_js
                                                                    x1801)|])
                                                          | None -> ());
                                                         x1800))|])
                             let (supportedLocalesOf :
                               t ->
                                 locales:string list or_string ->
                                   ?options:Intl.CollatorOptions.t ->
                                     unit -> string list)
                               =
                               fun (x1812 : t) ->
                                 fun ~locales:(x1806 : string list or_string)
                                   ->
                                   fun
                                     ?options:(x1807 :
                                                Intl.CollatorOptions.t option)
                                     ->
                                     fun () ->
                                       Ojs.list_of_js Ojs.string_of_js
                                         (let x1813 = t_to_js x1812 in
                                          Ojs.call
                                            (Ojs.get_prop_ascii x1813
                                               "supportedLocalesOf") "apply"
                                            [|x1813;((let x1808 =
                                                        Ojs.new_obj
                                                          (Ojs.get_prop_ascii
                                                             Ojs.global
                                                             "Array") 
                                                          [||] in
                                                      ignore
                                                        (Ojs.call x1808
                                                           "push"
                                                           [|(or_string_to_js
                                                                (fun
                                                                   (x1810 :
                                                                    string
                                                                    list)
                                                                   ->
                                                                   Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1810)
                                                                x1806)|]);
                                                      (match x1807 with
                                                       | Some x1809 ->
                                                           ignore
                                                             (Ojs.call x1808
                                                                "push"
                                                                [|(Intl.CollatorOptions.t_to_js
                                                                    x1809)|])
                                                       | None -> ());
                                                      x1808))|])
                           end and
                                AnonymousInterface9:sig
                                                      type t = private Ojs.t
                                                      val t_to_js :
                                                        t -> Ojs.t
                                                      val t_of_js :
                                                        Ojs.t -> t
                                                      val create :
                                                        t ->
                                                          ?locales:string
                                                            list or_string ->
                                                            ?options:Intl.DateTimeFormatOptions.t
                                                              ->
                                                              unit ->
                                                                Intl.DateTimeFormat.t
                                                      val apply :
                                                        t ->
                                                          ?locales:string
                                                            list or_string ->
                                                            ?options:Intl.DateTimeFormatOptions.t
                                                              ->
                                                              unit ->
                                                                Intl.DateTimeFormat.t
                                                      val supportedLocalesOf
                                                        :
                                                        t ->
                                                          locales:string list
                                                            or_string ->
                                                            ?options:Intl.DateTimeFormatOptions.t
                                                              ->
                                                              unit ->
                                                                string list
                                                    end =
                                struct
                                  type t = Ojs.t
                                  let rec t_of_js : Ojs.t -> t =
                                    fun (x1816 : Ojs.t) -> x1816
                                  and t_to_js : t -> Ojs.t =
                                    fun (x1815 : Ojs.t) -> x1815
                                  let (create :
                                    t ->
                                      ?locales:string list or_string ->
                                        ?options:Intl.DateTimeFormatOptions.t
                                          -> unit -> Intl.DateTimeFormat.t)
                                    =
                                    fun (x1824 : t) ->
                                      fun
                                        ?locales:(x1817 :
                                                   string list or_string
                                                     option)
                                        ->
                                        fun
                                          ?options:(x1818 :
                                                     Intl.DateTimeFormatOptions.t
                                                       option)
                                          ->
                                          fun () ->
                                            Intl.DateTimeFormat.t_of_js
                                              (Ojs.new_obj_arr
                                                 (t_to_js x1824)
                                                 (let x1819 =
                                                    Ojs.new_obj
                                                      (Ojs.get_prop_ascii
                                                         Ojs.global "Array")
                                                      [||] in
                                                  (match x1817 with
                                                   | Some x1821 ->
                                                       ignore
                                                         (Ojs.call x1819
                                                            "push"
                                                            [|(or_string_to_js
                                                                 (fun
                                                                    (x1822 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1822)
                                                                 x1821)|])
                                                   | None -> ());
                                                  (match x1818 with
                                                   | Some x1820 ->
                                                       ignore
                                                         (Ojs.call x1819
                                                            "push"
                                                            [|(Intl.DateTimeFormatOptions.t_to_js
                                                                 x1820)|])
                                                   | None -> ());
                                                  x1819))
                                  let (apply :
                                    t ->
                                      ?locales:string list or_string ->
                                        ?options:Intl.DateTimeFormatOptions.t
                                          -> unit -> Intl.DateTimeFormat.t)
                                    =
                                    fun (x1832 : t) ->
                                      fun
                                        ?locales:(x1825 :
                                                   string list or_string
                                                     option)
                                        ->
                                        fun
                                          ?options:(x1826 :
                                                     Intl.DateTimeFormatOptions.t
                                                       option)
                                          ->
                                          fun () ->
                                            Intl.DateTimeFormat.t_of_js
                                              (Ojs.call (t_to_js x1832)
                                                 "apply"
                                                 [|Ojs.null;((let x1827 =
                                                                Ojs.new_obj
                                                                  (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                  [||] in
                                                              (match x1825
                                                               with
                                                               | Some x1829
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x1827
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1830 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1830)
                                                                    x1829)|])
                                                               | None -> ());
                                                              (match x1826
                                                               with
                                                               | Some x1828
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x1827
                                                                    "push"
                                                                    [|(
                                                                    Intl.DateTimeFormatOptions.t_to_js
                                                                    x1828)|])
                                                               | None -> ());
                                                              x1827))|])
                                  let (supportedLocalesOf :
                                    t ->
                                      locales:string list or_string ->
                                        ?options:Intl.DateTimeFormatOptions.t
                                          -> unit -> string list)
                                    =
                                    fun (x1839 : t) ->
                                      fun
                                        ~locales:(x1833 :
                                                   string list or_string)
                                        ->
                                        fun
                                          ?options:(x1834 :
                                                     Intl.DateTimeFormatOptions.t
                                                       option)
                                          ->
                                          fun () ->
                                            Ojs.list_of_js Ojs.string_of_js
                                              (let x1840 = t_to_js x1839 in
                                               Ojs.call
                                                 (Ojs.get_prop_ascii x1840
                                                    "supportedLocalesOf")
                                                 "apply"
                                                 [|x1840;((let x1835 =
                                                             Ojs.new_obj
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "Array")
                                                               [||] in
                                                           ignore
                                                             (Ojs.call x1835
                                                                "push"
                                                                [|(or_string_to_js
                                                                    (fun
                                                                    (x1837 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1837)
                                                                    x1833)|]);
                                                           (match x1834 with
                                                            | Some x1836 ->
                                                                ignore
                                                                  (Ojs.call
                                                                    x1835
                                                                    "push"
                                                                    [|(
                                                                    Intl.DateTimeFormatOptions.t_to_js
                                                                    x1836)|])
                                                            | None -> ());
                                                           x1835))|])
                                end and
                                     Date:sig
                                            type t = [ `Date ] intf
                                            type t_0 = t
                                            [@@@js.stop ]
                                            type tags = [ `Date ]
                                            type tags_0 = tags
                                            [@@@js.start ]
                                            [@@@js.implem
                                              type tags = [ `Date ]
                                              type tags_0 = tags]
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [> `Date ]
                                            val t_to_js : t -> Ojs.t
                                            val t_of_js : Ojs.t -> t
                                            val t_0_to_js : t_0 -> Ojs.t
                                            val t_0_of_js : Ojs.t -> t_0
                                            val toLocaleString :
                                              'tags this ->
                                                ?locales:string list
                                                  or_string ->
                                                  ?options:Intl.DateTimeFormatOptions.t
                                                    -> unit -> string
                                            val toLocaleDateString :
                                              'tags this ->
                                                ?locales:string list
                                                  or_string ->
                                                  ?options:Intl.DateTimeFormatOptions.t
                                                    -> unit -> string
                                            val toLocaleTimeString :
                                              'tags this ->
                                                ?locales:string list
                                                  or_string ->
                                                  ?options:Intl.DateTimeFormatOptions.t
                                                    -> unit -> string
                                            val toString :
                                              'tags this -> string
                                            val toDateString :
                                              'tags this -> string
                                            val toTimeString :
                                              'tags this -> string
                                            val toLocaleString' :
                                              'tags this -> string
                                            val toLocaleDateString' :
                                              'tags this -> string
                                            val toLocaleTimeString' :
                                              'tags this -> string
                                            val valueOf : 'tags this -> float
                                            val getTime : 'tags this -> float
                                            val getFullYear :
                                              'tags this -> float
                                            val getUTCFullYear :
                                              'tags this -> float
                                            val getMonth :
                                              'tags this -> float
                                            val getUTCMonth :
                                              'tags this -> float
                                            val getDate : 'tags this -> float
                                            val getUTCDate :
                                              'tags this -> float
                                            val getDay : 'tags this -> float
                                            val getUTCDay :
                                              'tags this -> float
                                            val getHours :
                                              'tags this -> float
                                            val getUTCHours :
                                              'tags this -> float
                                            val getMinutes :
                                              'tags this -> float
                                            val getUTCMinutes :
                                              'tags this -> float
                                            val getSeconds :
                                              'tags this -> float
                                            val getUTCSeconds :
                                              'tags this -> float
                                            val getMilliseconds :
                                              'tags this -> float
                                            val getUTCMilliseconds :
                                              'tags this -> float
                                            val getTimezoneOffset :
                                              'tags this -> float
                                            val setTime :
                                              'tags this ->
                                                time:float -> float
                                            val setMilliseconds :
                                              'tags this -> ms:float -> float
                                            val setUTCMilliseconds :
                                              'tags this -> ms:float -> float
                                            val setSeconds :
                                              'tags this ->
                                                sec:float ->
                                                  ?ms:float -> unit -> float
                                            val setUTCSeconds :
                                              'tags this ->
                                                sec:float ->
                                                  ?ms:float -> unit -> float
                                            val setMinutes :
                                              'tags this ->
                                                min:float ->
                                                  ?sec:float ->
                                                    ?ms:float ->
                                                      unit -> float
                                            val setUTCMinutes :
                                              'tags this ->
                                                min:float ->
                                                  ?sec:float ->
                                                    ?ms:float ->
                                                      unit -> float
                                            val setHours :
                                              'tags this ->
                                                hours:float ->
                                                  ?min:float ->
                                                    ?sec:float ->
                                                      ?ms:float ->
                                                        unit -> float
                                            val setUTCHours :
                                              'tags this ->
                                                hours:float ->
                                                  ?min:float ->
                                                    ?sec:float ->
                                                      ?ms:float ->
                                                        unit -> float
                                            val setDate :
                                              'tags this ->
                                                date:float -> float
                                            val setUTCDate :
                                              'tags this ->
                                                date:float -> float
                                            val setMonth :
                                              'tags this ->
                                                month:float ->
                                                  ?date:float ->
                                                    unit -> float
                                            val setUTCMonth :
                                              'tags this ->
                                                month:float ->
                                                  ?date:float ->
                                                    unit -> float
                                            val setFullYear :
                                              'tags this ->
                                                year:float ->
                                                  ?month:float ->
                                                    ?date:float ->
                                                      unit -> float
                                            val setUTCFullYear :
                                              'tags this ->
                                                year:float ->
                                                  ?month:float ->
                                                    ?date:float ->
                                                      unit -> float
                                            val toUTCString :
                                              'tags this -> string
                                            val toISOString :
                                              'tags this -> string
                                            val toJSON :
                                              'tags this ->
                                                ?key:any -> unit -> string
                                            val create :
                                              t or_string or_number -> t
                                            val create' : unit -> t
                                            val create'' :
                                              string or_number -> t
                                            val create''' :
                                              year:float ->
                                                month:float ->
                                                  ?date:float ->
                                                    ?hours:float ->
                                                      ?minutes:float ->
                                                        ?seconds:float ->
                                                          ?ms:float ->
                                                            unit -> t
                                            val invoke : unit -> string
                                            val prototype : unit -> t
                                            val parse : string -> float
                                            val utc :
                                              year:float ->
                                                month:float ->
                                                  ?date:float ->
                                                    ?hours:float ->
                                                      ?minutes:float ->
                                                        ?seconds:float ->
                                                          ?ms:float ->
                                                            unit -> float
                                            val now : unit -> float
                                            val cast_from : 'tags this -> t
                                          end =
                                     struct
                                       type t = [ `Date ] intf
                                       let rec t_of_js : Ojs.t -> t =
                                         Obj.magic
                                       and t_to_js : t -> Ojs.t = Obj.magic
                                       type t_0 = t
                                       let rec t_0_of_js : Ojs.t -> t_0 =
                                         fun (x1843 : Ojs.t) -> t_of_js x1843
                                       and t_0_to_js : t_0 -> Ojs.t =
                                         fun (x1842 : t) -> t_to_js x1842
                                       type tags = [ `Date ]
                                       type tags_0 = tags
                                       type 'tags this =
                                         'tags intf constraint 'tags =
                                                     [> `Date ]
                                       let rec this_of_js :
                                         'tags .
                                           (Ojs.t -> 'tags) ->
                                             Ojs.t -> 'tags this
                                         = fun (type __tags) ->
                                         fun (__tags_of_js : Ojs.t -> __tags)
                                           ->
                                           fun (x1846 : Ojs.t) ->
                                             intf_of_js __tags_of_js x1846
                                       and this_to_js :
                                         'tags .
                                           ('tags -> Ojs.t) ->
                                             'tags this -> Ojs.t
                                         = fun (type __tags) ->
                                         fun (__tags_to_js : __tags -> Ojs.t)
                                           ->
                                           fun (x1844 : __tags intf) ->
                                             intf_to_js __tags_to_js x1844
                                       let (toLocaleString :
                                         'tags this ->
                                           ?locales:string list or_string ->
                                             ?options:Intl.DateTimeFormatOptions.t
                                               -> unit -> string)
                                         =
                                         fun (x1855 : 'tags this) ->
                                           fun
                                             ?locales:(x1848 :
                                                        string list or_string
                                                          option)
                                             ->
                                             fun
                                               ?options:(x1849 :
                                                          Intl.DateTimeFormatOptions.t
                                                            option)
                                               ->
                                               fun () ->
                                                 Ojs.string_of_js
                                                   (let x1857 =
                                                      this_to_js Obj.magic
                                                        x1855 in
                                                    Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         x1857
                                                         "toLocaleString")
                                                      "apply"
                                                      [|x1857;((let x1850 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                (match x1848
                                                                 with
                                                                 | Some x1852
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1850
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1853 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1853)
                                                                    x1852)|])
                                                                 | None -> ());
                                                                (match x1849
                                                                 with
                                                                 | Some x1851
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1850
                                                                    "push"
                                                                    [|(
                                                                    Intl.DateTimeFormatOptions.t_to_js
                                                                    x1851)|])
                                                                 | None -> ());
                                                                x1850))|])
                                       let (toLocaleDateString :
                                         'tags this ->
                                           ?locales:string list or_string ->
                                             ?options:Intl.DateTimeFormatOptions.t
                                               -> unit -> string)
                                         =
                                         fun (x1865 : 'tags this) ->
                                           fun
                                             ?locales:(x1858 :
                                                        string list or_string
                                                          option)
                                             ->
                                             fun
                                               ?options:(x1859 :
                                                          Intl.DateTimeFormatOptions.t
                                                            option)
                                               ->
                                               fun () ->
                                                 Ojs.string_of_js
                                                   (let x1867 =
                                                      this_to_js Obj.magic
                                                        x1865 in
                                                    Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         x1867
                                                         "toLocaleDateString")
                                                      "apply"
                                                      [|x1867;((let x1860 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                (match x1858
                                                                 with
                                                                 | Some x1862
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1860
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1863 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1863)
                                                                    x1862)|])
                                                                 | None -> ());
                                                                (match x1859
                                                                 with
                                                                 | Some x1861
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1860
                                                                    "push"
                                                                    [|(
                                                                    Intl.DateTimeFormatOptions.t_to_js
                                                                    x1861)|])
                                                                 | None -> ());
                                                                x1860))|])
                                       let (toLocaleTimeString :
                                         'tags this ->
                                           ?locales:string list or_string ->
                                             ?options:Intl.DateTimeFormatOptions.t
                                               -> unit -> string)
                                         =
                                         fun (x1875 : 'tags this) ->
                                           fun
                                             ?locales:(x1868 :
                                                        string list or_string
                                                          option)
                                             ->
                                             fun
                                               ?options:(x1869 :
                                                          Intl.DateTimeFormatOptions.t
                                                            option)
                                               ->
                                               fun () ->
                                                 Ojs.string_of_js
                                                   (let x1877 =
                                                      this_to_js Obj.magic
                                                        x1875 in
                                                    Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         x1877
                                                         "toLocaleTimeString")
                                                      "apply"
                                                      [|x1877;((let x1870 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                (match x1868
                                                                 with
                                                                 | Some x1872
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1870
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1873 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1873)
                                                                    x1872)|])
                                                                 | None -> ());
                                                                (match x1869
                                                                 with
                                                                 | Some x1871
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1870
                                                                    "push"
                                                                    [|(
                                                                    Intl.DateTimeFormatOptions.t_to_js
                                                                    x1871)|])
                                                                 | None -> ());
                                                                x1870))|])
                                       let (toString : 'tags this -> string)
                                         =
                                         fun (x1878 : 'tags this) ->
                                           Ojs.string_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1878)
                                                "toString" [||])
                                       let (toDateString :
                                         'tags this -> string) =
                                         fun (x1880 : 'tags this) ->
                                           Ojs.string_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1880)
                                                "toDateString" [||])
                                       let (toTimeString :
                                         'tags this -> string) =
                                         fun (x1882 : 'tags this) ->
                                           Ojs.string_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1882)
                                                "toTimeString" [||])
                                       let (toLocaleString' :
                                         'tags this -> string) =
                                         fun (x1884 : 'tags this) ->
                                           Ojs.string_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1884)
                                                "toLocaleString" [||])
                                       let (toLocaleDateString' :
                                         'tags this -> string) =
                                         fun (x1886 : 'tags this) ->
                                           Ojs.string_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1886)
                                                "toLocaleDateString" 
                                                [||])
                                       let (toLocaleTimeString' :
                                         'tags this -> string) =
                                         fun (x1888 : 'tags this) ->
                                           Ojs.string_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1888)
                                                "toLocaleTimeString" 
                                                [||])
                                       let (valueOf : 'tags this -> float) =
                                         fun (x1890 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1890)
                                                "valueOf" [||])
                                       let (getTime : 'tags this -> float) =
                                         fun (x1892 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1892)
                                                "getTime" [||])
                                       let (getFullYear :
                                         'tags this -> float) =
                                         fun (x1894 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1894)
                                                "getFullYear" [||])
                                       let (getUTCFullYear :
                                         'tags this -> float) =
                                         fun (x1896 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1896)
                                                "getUTCFullYear" [||])
                                       let (getMonth : 'tags this -> float) =
                                         fun (x1898 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1898)
                                                "getMonth" [||])
                                       let (getUTCMonth :
                                         'tags this -> float) =
                                         fun (x1900 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1900)
                                                "getUTCMonth" [||])
                                       let (getDate : 'tags this -> float) =
                                         fun (x1902 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1902)
                                                "getDate" [||])
                                       let (getUTCDate : 'tags this -> float)
                                         =
                                         fun (x1904 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1904)
                                                "getUTCDate" [||])
                                       let (getDay : 'tags this -> float) =
                                         fun (x1906 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1906)
                                                "getDay" [||])
                                       let (getUTCDay : 'tags this -> float)
                                         =
                                         fun (x1908 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1908)
                                                "getUTCDay" [||])
                                       let (getHours : 'tags this -> float) =
                                         fun (x1910 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1910)
                                                "getHours" [||])
                                       let (getUTCHours :
                                         'tags this -> float) =
                                         fun (x1912 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1912)
                                                "getUTCHours" [||])
                                       let (getMinutes : 'tags this -> float)
                                         =
                                         fun (x1914 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1914)
                                                "getMinutes" [||])
                                       let (getUTCMinutes :
                                         'tags this -> float) =
                                         fun (x1916 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1916)
                                                "getUTCMinutes" [||])
                                       let (getSeconds : 'tags this -> float)
                                         =
                                         fun (x1918 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1918)
                                                "getSeconds" [||])
                                       let (getUTCSeconds :
                                         'tags this -> float) =
                                         fun (x1920 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1920)
                                                "getUTCSeconds" [||])
                                       let (getMilliseconds :
                                         'tags this -> float) =
                                         fun (x1922 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1922)
                                                "getMilliseconds" [||])
                                       let (getUTCMilliseconds :
                                         'tags this -> float) =
                                         fun (x1924 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1924)
                                                "getUTCMilliseconds" 
                                                [||])
                                       let (getTimezoneOffset :
                                         'tags this -> float) =
                                         fun (x1926 : 'tags this) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x1926)
                                                "getTimezoneOffset" [||])
                                       let (setTime :
                                         'tags this -> time:float -> float) =
                                         fun (x1929 : 'tags this) ->
                                           fun ~time:(x1928 : float) ->
                                             Ojs.float_of_js
                                               (Ojs.call
                                                  (this_to_js Obj.magic x1929)
                                                  "setTime"
                                                  [|(Ojs.float_to_js x1928)|])
                                       let (setMilliseconds :
                                         'tags this -> ms:float -> float) =
                                         fun (x1932 : 'tags this) ->
                                           fun ~ms:(x1931 : float) ->
                                             Ojs.float_of_js
                                               (Ojs.call
                                                  (this_to_js Obj.magic x1932)
                                                  "setMilliseconds"
                                                  [|(Ojs.float_to_js x1931)|])
                                       let (setUTCMilliseconds :
                                         'tags this -> ms:float -> float) =
                                         fun (x1935 : 'tags this) ->
                                           fun ~ms:(x1934 : float) ->
                                             Ojs.float_of_js
                                               (Ojs.call
                                                  (this_to_js Obj.magic x1935)
                                                  "setUTCMilliseconds"
                                                  [|(Ojs.float_to_js x1934)|])
                                       let (setSeconds :
                                         'tags this ->
                                           sec:float ->
                                             ?ms:float -> unit -> float)
                                         =
                                         fun (x1941 : 'tags this) ->
                                           fun ~sec:(x1937 : float) ->
                                             fun ?ms:(x1938 : float option)
                                               ->
                                               fun () ->
                                                 Ojs.float_of_js
                                                   (let x1943 =
                                                      this_to_js Obj.magic
                                                        x1941 in
                                                    Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         x1943 "setSeconds")
                                                      "apply"
                                                      [|x1943;((let x1939 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                ignore
                                                                  (Ojs.call
                                                                    x1939
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1937)|]);
                                                                (match x1938
                                                                 with
                                                                 | Some x1940
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1939
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1940)|])
                                                                 | None -> ());
                                                                x1939))|])
                                       let (setUTCSeconds :
                                         'tags this ->
                                           sec:float ->
                                             ?ms:float -> unit -> float)
                                         =
                                         fun (x1948 : 'tags this) ->
                                           fun ~sec:(x1944 : float) ->
                                             fun ?ms:(x1945 : float option)
                                               ->
                                               fun () ->
                                                 Ojs.float_of_js
                                                   (let x1950 =
                                                      this_to_js Obj.magic
                                                        x1948 in
                                                    Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         x1950
                                                         "setUTCSeconds")
                                                      "apply"
                                                      [|x1950;((let x1946 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                ignore
                                                                  (Ojs.call
                                                                    x1946
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1944)|]);
                                                                (match x1945
                                                                 with
                                                                 | Some x1947
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1946
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1947)|])
                                                                 | None -> ());
                                                                x1946))|])
                                       let (setMinutes :
                                         'tags this ->
                                           min:float ->
                                             ?sec:float ->
                                               ?ms:float -> unit -> float)
                                         =
                                         fun (x1957 : 'tags this) ->
                                           fun ~min:(x1951 : float) ->
                                             fun ?sec:(x1952 : float option)
                                               ->
                                               fun ?ms:(x1953 : float option)
                                                 ->
                                                 fun () ->
                                                   Ojs.float_of_js
                                                     (let x1959 =
                                                        this_to_js Obj.magic
                                                          x1957 in
                                                      Ojs.call
                                                        (Ojs.get_prop_ascii
                                                           x1959 "setMinutes")
                                                        "apply"
                                                        [|x1959;((let x1954 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x1954
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1951)|]);
                                                                  (match x1952
                                                                   with
                                                                   | 
                                                                   Some x1956
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1954
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1956)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x1953
                                                                   with
                                                                   | 
                                                                   Some x1955
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1954
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1955)|])
                                                                   | 
                                                                   None -> ());
                                                                  x1954))|])
                                       let (setUTCMinutes :
                                         'tags this ->
                                           min:float ->
                                             ?sec:float ->
                                               ?ms:float -> unit -> float)
                                         =
                                         fun (x1966 : 'tags this) ->
                                           fun ~min:(x1960 : float) ->
                                             fun ?sec:(x1961 : float option)
                                               ->
                                               fun ?ms:(x1962 : float option)
                                                 ->
                                                 fun () ->
                                                   Ojs.float_of_js
                                                     (let x1968 =
                                                        this_to_js Obj.magic
                                                          x1966 in
                                                      Ojs.call
                                                        (Ojs.get_prop_ascii
                                                           x1968
                                                           "setUTCMinutes")
                                                        "apply"
                                                        [|x1968;((let x1963 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x1963
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1960)|]);
                                                                  (match x1961
                                                                   with
                                                                   | 
                                                                   Some x1965
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1963
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1965)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x1962
                                                                   with
                                                                   | 
                                                                   Some x1964
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1963
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1964)|])
                                                                   | 
                                                                   None -> ());
                                                                  x1963))|])
                                       let (setHours :
                                         'tags this ->
                                           hours:float ->
                                             ?min:float ->
                                               ?sec:float ->
                                                 ?ms:float -> unit -> float)
                                         =
                                         fun (x1977 : 'tags this) ->
                                           fun ~hours:(x1969 : float) ->
                                             fun ?min:(x1970 : float option)
                                               ->
                                               fun
                                                 ?sec:(x1971 : float option)
                                                 ->
                                                 fun
                                                   ?ms:(x1972 : float option)
                                                   ->
                                                   fun () ->
                                                     Ojs.float_of_js
                                                       (let x1979 =
                                                          this_to_js
                                                            Obj.magic x1977 in
                                                        Ojs.call
                                                          (Ojs.get_prop_ascii
                                                             x1979 "setHours")
                                                          "apply"
                                                          [|x1979;((let x1973
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1973
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1969)|]);
                                                                    (
                                                                    match x1970
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1976 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1973
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1976)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1971
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1975 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1973
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1975)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1972
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1974 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1973
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1974)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1973))|])
                                       let (setUTCHours :
                                         'tags this ->
                                           hours:float ->
                                             ?min:float ->
                                               ?sec:float ->
                                                 ?ms:float -> unit -> float)
                                         =
                                         fun (x1988 : 'tags this) ->
                                           fun ~hours:(x1980 : float) ->
                                             fun ?min:(x1981 : float option)
                                               ->
                                               fun
                                                 ?sec:(x1982 : float option)
                                                 ->
                                                 fun
                                                   ?ms:(x1983 : float option)
                                                   ->
                                                   fun () ->
                                                     Ojs.float_of_js
                                                       (let x1990 =
                                                          this_to_js
                                                            Obj.magic x1988 in
                                                        Ojs.call
                                                          (Ojs.get_prop_ascii
                                                             x1990
                                                             "setUTCHours")
                                                          "apply"
                                                          [|x1990;((let x1984
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1984
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1980)|]);
                                                                    (
                                                                    match x1981
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1987 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1984
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1987)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1982
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1986 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1984
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1986)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1983
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1985 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1984
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1985)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1984))|])
                                       let (setDate :
                                         'tags this -> date:float -> float) =
                                         fun (x1992 : 'tags this) ->
                                           fun ~date:(x1991 : float) ->
                                             Ojs.float_of_js
                                               (Ojs.call
                                                  (this_to_js Obj.magic x1992)
                                                  "setDate"
                                                  [|(Ojs.float_to_js x1991)|])
                                       let (setUTCDate :
                                         'tags this -> date:float -> float) =
                                         fun (x1995 : 'tags this) ->
                                           fun ~date:(x1994 : float) ->
                                             Ojs.float_of_js
                                               (Ojs.call
                                                  (this_to_js Obj.magic x1995)
                                                  "setUTCDate"
                                                  [|(Ojs.float_to_js x1994)|])
                                       let (setMonth :
                                         'tags this ->
                                           month:float ->
                                             ?date:float -> unit -> float)
                                         =
                                         fun (x2001 : 'tags this) ->
                                           fun ~month:(x1997 : float) ->
                                             fun ?date:(x1998 : float option)
                                               ->
                                               fun () ->
                                                 Ojs.float_of_js
                                                   (let x2003 =
                                                      this_to_js Obj.magic
                                                        x2001 in
                                                    Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         x2003 "setMonth")
                                                      "apply"
                                                      [|x2003;((let x1999 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                ignore
                                                                  (Ojs.call
                                                                    x1999
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1997)|]);
                                                                (match x1998
                                                                 with
                                                                 | Some x2000
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1999
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2000)|])
                                                                 | None -> ());
                                                                x1999))|])
                                       let (setUTCMonth :
                                         'tags this ->
                                           month:float ->
                                             ?date:float -> unit -> float)
                                         =
                                         fun (x2008 : 'tags this) ->
                                           fun ~month:(x2004 : float) ->
                                             fun ?date:(x2005 : float option)
                                               ->
                                               fun () ->
                                                 Ojs.float_of_js
                                                   (let x2010 =
                                                      this_to_js Obj.magic
                                                        x2008 in
                                                    Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         x2010 "setUTCMonth")
                                                      "apply"
                                                      [|x2010;((let x2006 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                ignore
                                                                  (Ojs.call
                                                                    x2006
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2004)|]);
                                                                (match x2005
                                                                 with
                                                                 | Some x2007
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2006
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2007)|])
                                                                 | None -> ());
                                                                x2006))|])
                                       let (setFullYear :
                                         'tags this ->
                                           year:float ->
                                             ?month:float ->
                                               ?date:float -> unit -> float)
                                         =
                                         fun (x2017 : 'tags this) ->
                                           fun ~year:(x2011 : float) ->
                                             fun
                                               ?month:(x2012 : float option)
                                               ->
                                               fun
                                                 ?date:(x2013 : float option)
                                                 ->
                                                 fun () ->
                                                   Ojs.float_of_js
                                                     (let x2019 =
                                                        this_to_js Obj.magic
                                                          x2017 in
                                                      Ojs.call
                                                        (Ojs.get_prop_ascii
                                                           x2019
                                                           "setFullYear")
                                                        "apply"
                                                        [|x2019;((let x2014 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x2014
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2011)|]);
                                                                  (match x2012
                                                                   with
                                                                   | 
                                                                   Some x2016
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2014
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2016)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x2013
                                                                   with
                                                                   | 
                                                                   Some x2015
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2014
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2015)|])
                                                                   | 
                                                                   None -> ());
                                                                  x2014))|])
                                       let (setUTCFullYear :
                                         'tags this ->
                                           year:float ->
                                             ?month:float ->
                                               ?date:float -> unit -> float)
                                         =
                                         fun (x2026 : 'tags this) ->
                                           fun ~year:(x2020 : float) ->
                                             fun
                                               ?month:(x2021 : float option)
                                               ->
                                               fun
                                                 ?date:(x2022 : float option)
                                                 ->
                                                 fun () ->
                                                   Ojs.float_of_js
                                                     (let x2028 =
                                                        this_to_js Obj.magic
                                                          x2026 in
                                                      Ojs.call
                                                        (Ojs.get_prop_ascii
                                                           x2028
                                                           "setUTCFullYear")
                                                        "apply"
                                                        [|x2028;((let x2023 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x2023
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2020)|]);
                                                                  (match x2021
                                                                   with
                                                                   | 
                                                                   Some x2025
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2023
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2025)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x2022
                                                                   with
                                                                   | 
                                                                   Some x2024
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2023
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2024)|])
                                                                   | 
                                                                   None -> ());
                                                                  x2023))|])
                                       let (toUTCString :
                                         'tags this -> string) =
                                         fun (x2029 : 'tags this) ->
                                           Ojs.string_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x2029)
                                                "toUTCString" [||])
                                       let (toISOString :
                                         'tags this -> string) =
                                         fun (x2031 : 'tags this) ->
                                           Ojs.string_of_js
                                             (Ojs.call
                                                (this_to_js Obj.magic x2031)
                                                "toISOString" [||])
                                       let (toJSON :
                                         'tags this ->
                                           ?key:any -> unit -> string)
                                         =
                                         fun (x2036 : 'tags this) ->
                                           fun ?key:(x2033 : any option) ->
                                             fun () ->
                                               Ojs.string_of_js
                                                 (let x2038 =
                                                    this_to_js Obj.magic
                                                      x2036 in
                                                  Ojs.call
                                                    (Ojs.get_prop_ascii x2038
                                                       "toJSON") "apply"
                                                    [|x2038;((let x2034 =
                                                                Ojs.new_obj
                                                                  (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                  [||] in
                                                              (match x2033
                                                               with
                                                               | Some x2035
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2034
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x2035)|])
                                                               | None -> ());
                                                              x2034))|])
                                       let (create :
                                         t or_string or_number -> t) =
                                         fun (x2039 : t or_string or_number)
                                           ->
                                           t_of_js
                                             (Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Date")
                                                [|(or_number_to_js
                                                     (fun
                                                        (x2040 : t or_string)
                                                        ->
                                                        or_string_to_js
                                                          t_to_js x2040)
                                                     x2039)|])
                                       let (create' : unit -> t) =
                                         fun () ->
                                           t_of_js
                                             (Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Date") 
                                                [||])
                                       let (create'' : string or_number -> t)
                                         =
                                         fun (x2042 : string or_number) ->
                                           t_of_js
                                             (Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Date")
                                                [|(or_number_to_js
                                                     Ojs.string_to_js x2042)|])
                                       let (create''' :
                                         year:float ->
                                           month:float ->
                                             ?date:float ->
                                               ?hours:float ->
                                                 ?minutes:float ->
                                                   ?seconds:float ->
                                                     ?ms:float -> unit -> t)
                                         =
                                         fun ~year:(x2044 : float) ->
                                           fun ~month:(x2045 : float) ->
                                             fun ?date:(x2046 : float option)
                                               ->
                                               fun
                                                 ?hours:(x2047 :
                                                          float option)
                                                 ->
                                                 fun
                                                   ?minutes:(x2048 :
                                                              float option)
                                                   ->
                                                   fun
                                                     ?seconds:(x2049 :
                                                                float option)
                                                     ->
                                                     fun
                                                       ?ms:(x2050 :
                                                             float option)
                                                       ->
                                                       fun () ->
                                                         t_of_js
                                                           (Ojs.new_obj_arr
                                                              (Ojs.get_prop_ascii
                                                                 Ojs.global
                                                                 "Date")
                                                              (let x2051 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x2051
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2044)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x2051
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2045)|]);
                                                               (match x2046
                                                                with
                                                                | Some x2056
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2051
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2056)|])
                                                                | None -> ());
                                                               (match x2047
                                                                with
                                                                | Some x2055
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2051
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2055)|])
                                                                | None -> ());
                                                               (match x2048
                                                                with
                                                                | Some x2054
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2051
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2054)|])
                                                                | None -> ());
                                                               (match x2049
                                                                with
                                                                | Some x2053
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2051
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2053)|])
                                                                | None -> ());
                                                               (match x2050
                                                                with
                                                                | Some x2052
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2051
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2052)|])
                                                                | None -> ());
                                                               x2051))
                                       let (invoke : unit -> string) =
                                         fun () ->
                                           Ojs.string_of_js
                                             (Ojs.apply
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Date") 
                                                [||])
                                       let (prototype : unit -> t) =
                                         fun () ->
                                           t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Date")
                                                "prototype")
                                       let (parse : string -> float) =
                                         fun (x2057 : string) ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Date") "parse"
                                                [|(Ojs.string_to_js x2057)|])
                                       let (utc :
                                         year:float ->
                                           month:float ->
                                             ?date:float ->
                                               ?hours:float ->
                                                 ?minutes:float ->
                                                   ?seconds:float ->
                                                     ?ms:float ->
                                                       unit -> float)
                                         =
                                         fun ~year:(x2058 : float) ->
                                           fun ~month:(x2059 : float) ->
                                             fun ?date:(x2060 : float option)
                                               ->
                                               fun
                                                 ?hours:(x2061 :
                                                          float option)
                                                 ->
                                                 fun
                                                   ?minutes:(x2062 :
                                                              float option)
                                                   ->
                                                   fun
                                                     ?seconds:(x2063 :
                                                                float option)
                                                     ->
                                                     fun
                                                       ?ms:(x2064 :
                                                             float option)
                                                       ->
                                                       fun () ->
                                                         Ojs.float_of_js
                                                           (let x2071 =
                                                              Ojs.get_prop_ascii
                                                                Ojs.global
                                                                "Date" in
                                                            Ojs.call
                                                              (Ojs.get_prop_ascii
                                                                 x2071 "UTC")
                                                              "apply"
                                                              [|x2071;((
                                                                let x2065 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                ignore
                                                                  (Ojs.call
                                                                    x2065
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2058)|]);
                                                                ignore
                                                                  (Ojs.call
                                                                    x2065
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2059)|]);
                                                                (match x2060
                                                                 with
                                                                 | Some x2070
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2065
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2070)|])
                                                                 | None -> ());
                                                                (match x2061
                                                                 with
                                                                 | Some x2069
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2065
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2069)|])
                                                                 | None -> ());
                                                                (match x2062
                                                                 with
                                                                 | Some x2068
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2065
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2068)|])
                                                                 | None -> ());
                                                                (match x2063
                                                                 with
                                                                 | Some x2067
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2065
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2067)|])
                                                                 | None -> ());
                                                                (match x2064
                                                                 with
                                                                 | Some x2066
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2065
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x2066)|])
                                                                 | None -> ());
                                                                x2065))|])
                                       let (now : unit -> float) =
                                         fun () ->
                                           Ojs.float_of_js
                                             (Ojs.call
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Date") "now"
                                                [||])
                                       let cast_from = Obj.magic
                                     end and
                                          Intl:sig
                                                 module
                                                 UnicodeBCP47LocaleIdentifier
                                                 :
                                                 sig
                                                   type t = string
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module
                                                 RelativeTimeFormatNumeric :
                                                 sig
                                                   type t =
                                                     [ `L_s21_always 
                                                     | `L_s22_auto ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module
                                                 RelativeTimeFormatStyle :
                                                 sig
                                                   type t =
                                                     [ `L_s55_long 
                                                     | `L_s67_narrow 
                                                     | `L_s88_short ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module
                                                 ResolvedRelativeTimeFormatOptions
                                                 :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_ResolvedRelativeTimeFormatOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_ResolvedRelativeTimeFormatOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_ResolvedRelativeTimeFormatOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_ResolvedRelativeTimeFormatOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_locale :
                                                     'tags this ->
                                                       UnicodeBCP47LocaleIdentifier.t
                                                   val set_locale :
                                                     'tags this ->
                                                       UnicodeBCP47LocaleIdentifier.t
                                                         -> unit
                                                   val get_style :
                                                     'tags this ->
                                                       RelativeTimeFormatStyle.t
                                                   val set_style :
                                                     'tags this ->
                                                       RelativeTimeFormatStyle.t
                                                         -> unit
                                                   val get_numeric :
                                                     'tags this ->
                                                       RelativeTimeFormatNumeric.t
                                                   val set_numeric :
                                                     'tags this ->
                                                       RelativeTimeFormatNumeric.t
                                                         -> unit
                                                   val get_numberingSystem :
                                                     'tags this -> string
                                                   val set_numberingSystem :
                                                     'tags this ->
                                                       string -> unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module
                                                 RelativeTimeFormatUnit :
                                                 sig
                                                   type t =
                                                     [ `L_s100_weeks 
                                                     | `L_s101_year 
                                                     | `L_s102_years 
                                                     | `L_s29_day 
                                                     | `L_s31_days 
                                                     | `L_s49_hour 
                                                     | `L_s50_hours 
                                                     | `L_s61_minute 
                                                     | `L_s62_minutes 
                                                     | `L_s63_month 
                                                     | `L_s64_months 
                                                     | `L_s80_quarter 
                                                     | `L_s81_quarters 
                                                     | `L_s86_second 
                                                     | `L_s87_seconds 
                                                     | `L_s98_week ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module
                                                 RelativeTimeFormatPart :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_RelativeTimeFormatPart
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_RelativeTimeFormatPart
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_RelativeTimeFormatPart
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_RelativeTimeFormatPart
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_type :
                                                     'tags this -> string
                                                   val set_type :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_value :
                                                     'tags this -> string
                                                   val set_value :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_unit :
                                                     'tags this ->
                                                       RelativeTimeFormatUnit.t
                                                   val set_unit :
                                                     'tags this ->
                                                       RelativeTimeFormatUnit.t
                                                         -> unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module
                                                 RelativeTimeFormatLocaleMatcher
                                                 :
                                                 sig
                                                   type t =
                                                     [ `L_s24_best_fit 
                                                     | `L_s56_lookup ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module
                                                 RelativeTimeFormatOptions :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_RelativeTimeFormatOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_RelativeTimeFormatOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_RelativeTimeFormatOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_RelativeTimeFormatOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_localeMatcher :
                                                     'tags this ->
                                                       RelativeTimeFormatLocaleMatcher.t
                                                   val set_localeMatcher :
                                                     'tags this ->
                                                       RelativeTimeFormatLocaleMatcher.t
                                                         -> unit
                                                   val get_numeric :
                                                     'tags this ->
                                                       RelativeTimeFormatNumeric.t
                                                   val set_numeric :
                                                     'tags this ->
                                                       RelativeTimeFormatNumeric.t
                                                         -> unit
                                                   val get_style :
                                                     'tags this ->
                                                       RelativeTimeFormatStyle.t
                                                   val set_style :
                                                     'tags this ->
                                                       RelativeTimeFormatStyle.t
                                                         -> unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module RelativeTimeFormat :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_RelativeTimeFormat
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_RelativeTimeFormat
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_RelativeTimeFormat
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_RelativeTimeFormat
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val format :
                                                     'tags this ->
                                                       value:float ->
                                                         unit:RelativeTimeFormatUnit.t
                                                           -> string
                                                   val formatToParts :
                                                     'tags this ->
                                                       value:float ->
                                                         unit:RelativeTimeFormatUnit.t
                                                           ->
                                                           RelativeTimeFormatPart.t
                                                             list
                                                   val resolvedOptions :
                                                     'tags this ->
                                                       ResolvedRelativeTimeFormatOptions.t
                                                   val cast_from :
                                                     'tags this -> t
                                                   val create :
                                                     ?locales:(UnicodeBCP47LocaleIdentifier.t,
                                                       UnicodeBCP47LocaleIdentifier.t)
                                                       or_array ->
                                                       ?options:RelativeTimeFormatOptions.t
                                                         -> unit -> t
                                                   val supportedLocalesOf :
                                                     ?locales:(UnicodeBCP47LocaleIdentifier.t,
                                                       UnicodeBCP47LocaleIdentifier.t)
                                                       or_array ->
                                                       ?options:RelativeTimeFormatOptions.t
                                                         ->
                                                         unit ->
                                                           UnicodeBCP47LocaleIdentifier.t
                                                             list
                                                 end
                                                 module PluralRuleType :
                                                 sig
                                                   type t =
                                                     [ `L_s25_cardinal 
                                                     | `L_s75_ordinal ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module LDMLPluralRule :
                                                 sig
                                                   type t =
                                                     [ `L_s103_zero 
                                                     | `L_s40_few 
                                                     | `L_s58_many 
                                                     | `L_s74_one 
                                                     | `L_s76_other 
                                                     | `L_s94_two ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module
                                                 ResolvedPluralRulesOptions :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_ResolvedPluralRulesOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_ResolvedPluralRulesOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_ResolvedPluralRulesOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_ResolvedPluralRulesOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_locale :
                                                     'tags this -> string
                                                   val set_locale :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_pluralCategories :
                                                     'tags this ->
                                                       LDMLPluralRule.t list
                                                   val set_pluralCategories :
                                                     'tags this ->
                                                       LDMLPluralRule.t list
                                                         -> unit
                                                   val get_type :
                                                     'tags this ->
                                                       PluralRuleType.t
                                                   val set_type :
                                                     'tags this ->
                                                       PluralRuleType.t ->
                                                         unit
                                                   val
                                                     get_minimumIntegerDigits
                                                     : 'tags this -> float
                                                   val
                                                     set_minimumIntegerDigits
                                                     :
                                                     'tags this ->
                                                       float -> unit
                                                   val
                                                     get_minimumFractionDigits
                                                     : 'tags this -> float
                                                   val
                                                     set_minimumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float -> unit
                                                   val
                                                     get_maximumFractionDigits
                                                     : 'tags this -> float
                                                   val
                                                     set_maximumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float -> unit
                                                   val
                                                     get_minimumSignificantDigits
                                                     : 'tags this -> float
                                                   val
                                                     set_minimumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float -> unit
                                                   val
                                                     get_maximumSignificantDigits
                                                     : 'tags this -> float
                                                   val
                                                     set_maximumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float -> unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module PluralRulesOptions :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_PluralRulesOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_PluralRulesOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_PluralRulesOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_PluralRulesOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_localeMatcher :
                                                     'tags this ->
                                                       [ `L_s24_best_fit 
                                                       | `L_s56_lookup ]
                                                         or_undefined
                                                   val set_localeMatcher :
                                                     'tags this ->
                                                       [ `L_s24_best_fit 
                                                       | `L_s56_lookup ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_type :
                                                     'tags this ->
                                                       PluralRuleType.t
                                                         or_undefined
                                                   val set_type :
                                                     'tags this ->
                                                       PluralRuleType.t
                                                         or_undefined -> 
                                                         unit
                                                   val
                                                     get_minimumIntegerDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined
                                                   val
                                                     set_minimumIntegerDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined ->
                                                         unit
                                                   val
                                                     get_minimumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined
                                                   val
                                                     set_minimumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined ->
                                                         unit
                                                   val
                                                     get_maximumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined
                                                   val
                                                     set_maximumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined ->
                                                         unit
                                                   val
                                                     get_minimumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined
                                                   val
                                                     set_minimumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined ->
                                                         unit
                                                   val
                                                     get_maximumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined
                                                   val
                                                     set_maximumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined ->
                                                         unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module PluralRules :
                                                 sig
                                                   type t =
                                                     [ `Intl_PluralRules ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [ `Intl_PluralRules ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [ `Intl_PluralRules ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_PluralRules
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val resolvedOptions :
                                                     'tags this ->
                                                       ResolvedPluralRulesOptions.t
                                                   val select :
                                                     'tags this ->
                                                       n:float ->
                                                         LDMLPluralRule.t
                                                   val cast_from :
                                                     'tags this -> t
                                                   val create :
                                                     ?locales:string list
                                                       or_string ->
                                                       ?options:PluralRulesOptions.t
                                                         -> unit -> t
                                                   val invoke :
                                                     ?locales:string list
                                                       or_string ->
                                                       ?options:PluralRulesOptions.t
                                                         -> unit -> t
                                                   val supportedLocalesOf :
                                                     locales:string list
                                                       or_string ->
                                                       ?options:AnonymousInterface3.t
                                                         ->
                                                         unit -> string list
                                                 end
                                                 module
                                                 ResolvedNumberFormatOptions
                                                 :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_ResolvedNumberFormatOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_ResolvedNumberFormatOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_ResolvedNumberFormatOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_ResolvedNumberFormatOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_compactDisplay :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s88_short ]
                                                   val set_compactDisplay :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s88_short ] ->
                                                         unit
                                                   val get_notation :
                                                     'tags this ->
                                                       [ `L_s27_compact 
                                                       | `L_s34_engineering 
                                                       | `L_s84_scientific 
                                                       | `L_s89_standard ]
                                                   val set_notation :
                                                     'tags this ->
                                                       [ `L_s27_compact 
                                                       | `L_s34_engineering 
                                                       | `L_s84_scientific 
                                                       | `L_s89_standard ] ->
                                                         unit
                                                   val get_signDisplay :
                                                     'tags this ->
                                                       [ `L_s21_always 
                                                       | `L_s22_auto 
                                                       | `L_s68_never ]
                                                   val set_signDisplay :
                                                     'tags this ->
                                                       [ `L_s21_always 
                                                       | `L_s22_auto 
                                                       | `L_s68_never ] ->
                                                         unit
                                                   val get_unit :
                                                     'tags this -> string
                                                   val set_unit :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_unitDisplay :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                   val set_unitDisplay :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ] ->
                                                         unit
                                                   val get_locale :
                                                     'tags this -> string
                                                   val set_locale :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_numberingSystem :
                                                     'tags this -> string
                                                   val set_numberingSystem :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_style :
                                                     'tags this -> string
                                                   val set_style :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_currency :
                                                     'tags this -> string
                                                   val set_currency :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_currencyDisplay :
                                                     'tags this -> string
                                                   val set_currencyDisplay :
                                                     'tags this ->
                                                       string -> unit
                                                   val
                                                     get_minimumIntegerDigits
                                                     : 'tags this -> float
                                                   val
                                                     set_minimumIntegerDigits
                                                     :
                                                     'tags this ->
                                                       float -> unit
                                                   val
                                                     get_minimumFractionDigits
                                                     : 'tags this -> float
                                                   val
                                                     set_minimumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float -> unit
                                                   val
                                                     get_maximumFractionDigits
                                                     : 'tags this -> float
                                                   val
                                                     set_maximumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float -> unit
                                                   val
                                                     get_minimumSignificantDigits
                                                     : 'tags this -> float
                                                   val
                                                     set_minimumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float -> unit
                                                   val
                                                     get_maximumSignificantDigits
                                                     : 'tags this -> float
                                                   val
                                                     set_maximumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float -> unit
                                                   val get_useGrouping :
                                                     'tags this -> bool
                                                   val set_useGrouping :
                                                     'tags this ->
                                                       bool -> unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module
                                                 ES2020NumberFormatPartType :
                                                 sig
                                                   type t =
                                                     [ `L_s27_compact 
                                                     | `L_s36_exponentInteger 
                                                     | `L_s37_exponentMinusSign
                                                          | `L_s38_exponentSeparator
                                                               | `L_s95_unit 
                                                     | `L_s96_unknown ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module
                                                 ES2018NumberFormatPartType :
                                                 sig
                                                   type t =
                                                     [ `L_s26_code 
                                                     | `L_s28_currency 
                                                     | `L_s32_decimal 
                                                     | `L_s41_fraction 
                                                     | `L_s44_group 
                                                     | `L_s51_infinity 
                                                     | `L_s52_integer 
                                                     | `L_s54_literal 
                                                     | `L_s60_minusSign 
                                                     | `L_s65_name 
                                                     | `L_s66_nan 
                                                     | `L_s77_percent 
                                                     | `L_s78_percentSign 
                                                     | `L_s79_plusSign 
                                                     | `L_s91_symbol ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module NumberFormatPartTypes
                                                 :
                                                 sig
                                                   type t =
                                                     [ `L_s26_code 
                                                     | `L_s27_compact 
                                                     | `L_s28_currency 
                                                     | `L_s32_decimal 
                                                     | `L_s36_exponentInteger 
                                                     | `L_s37_exponentMinusSign
                                                          | `L_s38_exponentSeparator
                                                               | `L_s41_fraction
                                                                    | 
                                                       `L_s44_group 
                                                     | `L_s51_infinity 
                                                     | `L_s52_integer 
                                                     | `L_s54_literal 
                                                     | `L_s60_minusSign 
                                                     | `L_s65_name 
                                                     | `L_s66_nan 
                                                     | `L_s77_percent 
                                                     | `L_s78_percentSign 
                                                     | `L_s79_plusSign 
                                                     | `L_s91_symbol 
                                                     | `L_s95_unit 
                                                     | `L_s96_unknown ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module NumberFormatPart :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_NumberFormatPart ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_NumberFormatPart ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_NumberFormatPart
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_NumberFormatPart
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_type :
                                                     'tags this ->
                                                       NumberFormatPartTypes.t
                                                   val set_type :
                                                     'tags this ->
                                                       NumberFormatPartTypes.t
                                                         -> unit
                                                   val get_value :
                                                     'tags this -> string
                                                   val set_value :
                                                     'tags this ->
                                                       string -> unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module NumberFormatOptions :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_NumberFormatOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_NumberFormatOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_NumberFormatOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_NumberFormatOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_compactDisplay :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_compactDisplay :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_notation :
                                                     'tags this ->
                                                       [ `L_s27_compact 
                                                       | `L_s34_engineering 
                                                       | `L_s84_scientific 
                                                       | `L_s89_standard ]
                                                         or_undefined
                                                   val set_notation :
                                                     'tags this ->
                                                       [ `L_s27_compact 
                                                       | `L_s34_engineering 
                                                       | `L_s84_scientific 
                                                       | `L_s89_standard ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_signDisplay :
                                                     'tags this ->
                                                       [ `L_s21_always 
                                                       | `L_s22_auto 
                                                       | `L_s68_never ]
                                                         or_undefined
                                                   val set_signDisplay :
                                                     'tags this ->
                                                       [ `L_s21_always 
                                                       | `L_s22_auto 
                                                       | `L_s68_never ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_unit :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_unit :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_unitDisplay :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_unitDisplay :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_localeMatcher :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_localeMatcher :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_style :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_style :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_currency :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_currency :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_currencyDisplay :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_currencyDisplay :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_currencySign :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_currencySign :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_useGrouping :
                                                     'tags this ->
                                                       bool or_undefined
                                                   val set_useGrouping :
                                                     'tags this ->
                                                       bool or_undefined ->
                                                         unit
                                                   val
                                                     get_minimumIntegerDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined
                                                   val
                                                     set_minimumIntegerDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined ->
                                                         unit
                                                   val
                                                     get_minimumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined
                                                   val
                                                     set_minimumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined ->
                                                         unit
                                                   val
                                                     get_maximumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined
                                                   val
                                                     set_maximumFractionDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined ->
                                                         unit
                                                   val
                                                     get_minimumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined
                                                   val
                                                     set_minimumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined ->
                                                         unit
                                                   val
                                                     get_maximumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined
                                                   val
                                                     set_maximumSignificantDigits
                                                     :
                                                     'tags this ->
                                                       float or_undefined ->
                                                         unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module NumberFormat :
                                                 sig
                                                   type t =
                                                     [ `Intl_NumberFormat ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [ `Intl_NumberFormat ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [ `Intl_NumberFormat ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_NumberFormat
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val format :
                                                     'tags this ->
                                                       value:bigint or_number
                                                         -> string
                                                   val resolvedOptions :
                                                     'tags this ->
                                                       ResolvedNumberFormatOptions.t
                                                   val formatToParts :
                                                     'tags this ->
                                                       ?number:bigint
                                                         or_number ->
                                                         unit ->
                                                           NumberFormatPart.t
                                                             list
                                                   val format' :
                                                     'tags this ->
                                                       value:float -> string
                                                   val resolvedOptions' :
                                                     'tags this ->
                                                       ResolvedNumberFormatOptions.t
                                                   val formatRange :
                                                     'tags this ->
                                                       startDate:bigint
                                                         or_number ->
                                                         endDate:bigint
                                                           or_number ->
                                                           string
                                                   val formatRangeToParts :
                                                     'tags this ->
                                                       startDate:bigint
                                                         or_number ->
                                                         endDate:bigint
                                                           or_number ->
                                                           NumberFormatPart.t
                                                             list
                                                   val cast_from :
                                                     'tags this -> t
                                                   val create :
                                                     ?locales:string list
                                                       or_string ->
                                                       ?options:NumberFormatOptions.t
                                                         -> unit -> t
                                                   val invoke :
                                                     ?locales:string list
                                                       or_string ->
                                                       ?options:NumberFormatOptions.t
                                                         -> unit -> t
                                                   val supportedLocalesOf :
                                                     locales:string list
                                                       or_string ->
                                                       ?options:NumberFormatOptions.t
                                                         ->
                                                         unit -> string list
                                                 end
                                                 module LocaleHourCycleKey :
                                                 sig
                                                   type t =
                                                     [ `L_s45_h11 
                                                     | `L_s46_h12 
                                                     | `L_s47_h23 
                                                     | `L_s48_h24 ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module
                                                 LocaleCollationCaseFirst :
                                                 sig
                                                   type t =
                                                     [ `L_s39_false 
                                                     | `L_s57_lower 
                                                     | `L_s97_upper ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module LocaleOptions :
                                                 sig
                                                   type t =
                                                     [ `Intl_LocaleOptions ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [ `Intl_LocaleOptions ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_LocaleOptions ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_LocaleOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_baseName :
                                                     'tags this -> string
                                                   val set_baseName :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_calendar :
                                                     'tags this -> string
                                                   val set_calendar :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_caseFirst :
                                                     'tags this ->
                                                       LocaleCollationCaseFirst.t
                                                   val set_caseFirst :
                                                     'tags this ->
                                                       LocaleCollationCaseFirst.t
                                                         -> unit
                                                   val get_collation :
                                                     'tags this -> string
                                                   val set_collation :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_hourCycle :
                                                     'tags this ->
                                                       LocaleHourCycleKey.t
                                                   val set_hourCycle :
                                                     'tags this ->
                                                       LocaleHourCycleKey.t
                                                         -> unit
                                                   val get_language :
                                                     'tags this -> string
                                                   val set_language :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_numberingSystem :
                                                     'tags this -> string
                                                   val set_numberingSystem :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_numeric :
                                                     'tags this -> bool
                                                   val set_numeric :
                                                     'tags this ->
                                                       bool -> unit
                                                   val get_region :
                                                     'tags this -> string
                                                   val set_region :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_script :
                                                     'tags this -> string
                                                   val set_script :
                                                     'tags this ->
                                                       string -> unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module BCP47LanguageTag :
                                                 sig
                                                   type t = string
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module Locale :
                                                 sig
                                                   type t =
                                                     [ `Intl_Locale 
                                                     | `Intl_LocaleOptions ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [ `Intl_Locale 
                                                     | `Intl_LocaleOptions ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [ `Intl_Locale 
                                                       | `Intl_LocaleOptions ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_Locale
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val maximize :
                                                     'tags this -> t
                                                   val minimize :
                                                     'tags this -> t
                                                   val toString :
                                                     'tags this ->
                                                       BCP47LanguageTag.t
                                                   val cast_from :
                                                     'tags this -> t
                                                   val create :
                                                     ?tag:BCP47LanguageTag.t
                                                       ->
                                                       ?options:LocaleOptions.t
                                                         -> unit -> t
                                                 end
                                                 module DisplayNamesOptions :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_DisplayNamesOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_DisplayNamesOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_DisplayNamesOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_DisplayNamesOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_localeMatcher :
                                                     'tags this ->
                                                       RelativeTimeFormatLocaleMatcher.t
                                                   val set_localeMatcher :
                                                     'tags this ->
                                                       RelativeTimeFormatLocaleMatcher.t
                                                         -> unit
                                                   val get_style :
                                                     'tags this ->
                                                       RelativeTimeFormatStyle.t
                                                   val set_style :
                                                     'tags this ->
                                                       RelativeTimeFormatStyle.t
                                                         -> unit
                                                   val get_type :
                                                     'tags this ->
                                                       [ `L_s28_currency 
                                                       | `L_s53_language 
                                                       | `L_s82_region 
                                                       | `L_s85_script ]
                                                   val set_type :
                                                     'tags this ->
                                                       [ `L_s28_currency 
                                                       | `L_s53_language 
                                                       | `L_s82_region 
                                                       | `L_s85_script ] ->
                                                         unit
                                                   val get_fallback :
                                                     'tags this ->
                                                       [ `L_s26_code 
                                                       | `L_s69_none ]
                                                   val set_fallback :
                                                     'tags this ->
                                                       [ `L_s26_code 
                                                       | `L_s69_none ] ->
                                                         unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module DisplayNames :
                                                 sig
                                                   type t =
                                                     [ `Intl_DisplayNames ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [ `Intl_DisplayNames ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [ `Intl_DisplayNames ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_DisplayNames
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val of_ :
                                                     'tags this ->
                                                       code:string -> string
                                                   val resolvedOptions :
                                                     'tags this ->
                                                       DisplayNamesOptions.t
                                                   val cast_from :
                                                     'tags this -> t
                                                   val prototype : unit -> t
                                                   val create :
                                                     ?locales:(BCP47LanguageTag.t,
                                                       BCP47LanguageTag.t)
                                                       or_array ->
                                                       ?options:DisplayNamesOptions.t
                                                         Partial.t ->
                                                         unit -> t
                                                   val supportedLocalesOf :
                                                     locales:(BCP47LanguageTag.t,
                                                       BCP47LanguageTag.t)
                                                       or_array ->
                                                       ?options:AnonymousInterface2.t
                                                         ->
                                                         unit ->
                                                           BCP47LanguageTag.t
                                                             list
                                                 end
                                                 module
                                                 ResolvedDateTimeFormatOptions
                                                 :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_ResolvedDateTimeFormatOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_ResolvedDateTimeFormatOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_ResolvedDateTimeFormatOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_ResolvedDateTimeFormatOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_locale :
                                                     'tags this -> string
                                                   val set_locale :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_calendar :
                                                     'tags this -> string
                                                   val set_calendar :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_numberingSystem :
                                                     'tags this -> string
                                                   val set_numberingSystem :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_timeZone :
                                                     'tags this -> string
                                                   val set_timeZone :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_hour12 :
                                                     'tags this -> bool
                                                   val set_hour12 :
                                                     'tags this ->
                                                       bool -> unit
                                                   val get_weekday :
                                                     'tags this -> string
                                                   val set_weekday :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_era :
                                                     'tags this -> string
                                                   val set_era :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_year :
                                                     'tags this -> string
                                                   val set_year :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_month :
                                                     'tags this -> string
                                                   val set_month :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_day :
                                                     'tags this -> string
                                                   val set_day :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_hour :
                                                     'tags this -> string
                                                   val set_hour :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_minute :
                                                     'tags this -> string
                                                   val set_minute :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_second :
                                                     'tags this -> string
                                                   val set_second :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_timeZoneName :
                                                     'tags this -> string
                                                   val set_timeZoneName :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_formatMatcher :
                                                     'tags this ->
                                                       [ `L_s23_basic 
                                                       | `L_s24_best_fit ]
                                                   val set_formatMatcher :
                                                     'tags this ->
                                                       [ `L_s23_basic 
                                                       | `L_s24_best_fit ] ->
                                                         unit
                                                   val get_dateStyle :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ]
                                                   val set_dateStyle :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ] ->
                                                         unit
                                                   val get_timeStyle :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ]
                                                   val set_timeStyle :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ] ->
                                                         unit
                                                   val get_hourCycle :
                                                     'tags this ->
                                                       [ `L_s45_h11 
                                                       | `L_s46_h12 
                                                       | `L_s47_h23 
                                                       | `L_s48_h24 ]
                                                   val set_hourCycle :
                                                     'tags this ->
                                                       [ `L_s45_h11 
                                                       | `L_s46_h12 
                                                       | `L_s47_h23 
                                                       | `L_s48_h24 ] -> 
                                                         unit
                                                   val get_dayPeriod :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                   val set_dayPeriod :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ] ->
                                                         unit
                                                   val
                                                     get_fractionalSecondDigits
                                                     :
                                                     'tags this ->
                                                       [ `L_n_0  | `L_n_1 
                                                       | `L_n_2  | `L_n_3 ]
                                                   val
                                                     set_fractionalSecondDigits
                                                     :
                                                     'tags this ->
                                                       [ `L_n_0  | `L_n_1 
                                                       | `L_n_2  | `L_n_3 ]
                                                         -> unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module
                                                 DateTimeFormatPartTypes :
                                                 sig
                                                   type t =
                                                     [ `L_s101_year 
                                                     | `L_s29_day 
                                                     | `L_s30_dayPeriod 
                                                     | `L_s35_era 
                                                     | `L_s49_hour 
                                                     | `L_s54_literal 
                                                     | `L_s61_minute 
                                                     | `L_s63_month 
                                                     | `L_s86_second 
                                                     | `L_s92_timeZoneName 
                                                     | `L_s99_weekday ]
                                                   type t_0 = t
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                 end
                                                 module DateTimeFormatPart :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_DateTimeFormatPart
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_DateTimeFormatPart
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_DateTimeFormatPart
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_DateTimeFormatPart
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_type :
                                                     'tags this ->
                                                       DateTimeFormatPartTypes.t
                                                   val set_type :
                                                     'tags this ->
                                                       DateTimeFormatPartTypes.t
                                                         -> unit
                                                   val get_value :
                                                     'tags this -> string
                                                   val set_value :
                                                     'tags this ->
                                                       string -> unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module DateTimeFormatOptions
                                                 :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_DateTimeFormatOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_DateTimeFormatOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_DateTimeFormatOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_DateTimeFormatOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_calendar :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_calendar :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_dayPeriod :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_dayPeriod :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_numberingSystem :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_numberingSystem :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_dateStyle :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_dateStyle :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_timeStyle :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_timeStyle :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_hourCycle :
                                                     'tags this ->
                                                       [ `L_s45_h11 
                                                       | `L_s46_h12 
                                                       | `L_s47_h23 
                                                       | `L_s48_h24 ]
                                                         or_undefined
                                                   val set_hourCycle :
                                                     'tags this ->
                                                       [ `L_s45_h11 
                                                       | `L_s46_h12 
                                                       | `L_s47_h23 
                                                       | `L_s48_h24 ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_localeMatcher :
                                                     'tags this ->
                                                       [ `L_s24_best_fit 
                                                       | `L_s56_lookup ]
                                                         or_undefined
                                                   val set_localeMatcher :
                                                     'tags this ->
                                                       [ `L_s24_best_fit 
                                                       | `L_s56_lookup ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_weekday :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_weekday :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_era :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_era :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_year :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s72_numeric ]
                                                         or_undefined
                                                   val set_year :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s72_numeric ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_month :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s72_numeric 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_month :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s72_numeric 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_day :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s72_numeric ]
                                                         or_undefined
                                                   val set_day :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s72_numeric ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_hour :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s72_numeric ]
                                                         or_undefined
                                                   val set_hour :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s72_numeric ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_minute :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s72_numeric ]
                                                         or_undefined
                                                   val set_minute :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s72_numeric ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_second :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s72_numeric ]
                                                         or_undefined
                                                   val set_second :
                                                     'tags this ->
                                                       [ `L_s0_2_digit 
                                                       | `L_s72_numeric ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_timeZoneName :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_timeZoneName :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_formatMatcher :
                                                     'tags this ->
                                                       [ `L_s23_basic 
                                                       | `L_s24_best_fit ]
                                                         or_undefined
                                                   val set_formatMatcher :
                                                     'tags this ->
                                                       [ `L_s23_basic 
                                                       | `L_s24_best_fit ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_hour12 :
                                                     'tags this ->
                                                       bool or_undefined
                                                   val set_hour12 :
                                                     'tags this ->
                                                       bool or_undefined ->
                                                         unit
                                                   val get_timeZone :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_timeZone :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_formatMatcher' :
                                                     'tags this ->
                                                       [ `L_s23_basic 
                                                       | `L_s24_best_fit ]
                                                         or_undefined
                                                   val set_formatMatcher' :
                                                     'tags this ->
                                                       [ `L_s23_basic 
                                                       | `L_s24_best_fit ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_dateStyle' :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_dateStyle' :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_timeStyle' :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_timeStyle' :
                                                     'tags this ->
                                                       [ `L_s43_full 
                                                       | `L_s55_long 
                                                       | `L_s59_medium 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val get_dayPeriod' :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                         or_undefined
                                                   val set_dayPeriod' :
                                                     'tags this ->
                                                       [ `L_s55_long 
                                                       | `L_s67_narrow 
                                                       | `L_s88_short ]
                                                         or_undefined -> 
                                                         unit
                                                   val
                                                     get_fractionalSecondDigits
                                                     :
                                                     'tags this ->
                                                       [ `L_n_0  | `L_n_1 
                                                       | `L_n_2  | `L_n_3 ]
                                                         or_undefined
                                                   val
                                                     set_fractionalSecondDigits
                                                     :
                                                     'tags this ->
                                                       [ `L_n_0  | `L_n_1 
                                                       | `L_n_2  | `L_n_3 ]
                                                         or_undefined -> 
                                                         unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module DateTimeFormat :
                                                 sig
                                                   type t =
                                                     [ `Intl_DateTimeFormat ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [ `Intl_DateTimeFormat ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_DateTimeFormat ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_DateTimeFormat
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val formatToParts :
                                                     'tags this ->
                                                       ?date:Date.t or_number
                                                         ->
                                                         unit ->
                                                           DateTimeFormatPart.t
                                                             list
                                                   val format :
                                                     'tags this ->
                                                       ?date:Date.t or_number
                                                         -> unit -> string
                                                   val resolvedOptions :
                                                     'tags this ->
                                                       ResolvedDateTimeFormatOptions.t
                                                   val cast_from :
                                                     'tags this -> t
                                                   val create :
                                                     ?locales:string list
                                                       or_string ->
                                                       ?options:DateTimeFormatOptions.t
                                                         -> unit -> t
                                                   val invoke :
                                                     ?locales:string list
                                                       or_string ->
                                                       ?options:DateTimeFormatOptions.t
                                                         -> unit -> t
                                                   val supportedLocalesOf :
                                                     locales:string list
                                                       or_string ->
                                                       ?options:DateTimeFormatOptions.t
                                                         ->
                                                         unit -> string list
                                                 end
                                                 module
                                                 ResolvedCollatorOptions :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_ResolvedCollatorOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_ResolvedCollatorOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_ResolvedCollatorOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_ResolvedCollatorOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_locale :
                                                     'tags this -> string
                                                   val set_locale :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_usage :
                                                     'tags this -> string
                                                   val set_usage :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_sensitivity :
                                                     'tags this -> string
                                                   val set_sensitivity :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_ignorePunctuation
                                                     : 'tags this -> bool
                                                   val set_ignorePunctuation
                                                     :
                                                     'tags this ->
                                                       bool -> unit
                                                   val get_collation :
                                                     'tags this -> string
                                                   val set_collation :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_caseFirst :
                                                     'tags this -> string
                                                   val set_caseFirst :
                                                     'tags this ->
                                                       string -> unit
                                                   val get_numeric :
                                                     'tags this -> bool
                                                   val set_numeric :
                                                     'tags this ->
                                                       bool -> unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module CollatorOptions :
                                                 sig
                                                   type t =
                                                     [
                                                       `Intl_CollatorOptions ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `Intl_CollatorOptions ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `Intl_CollatorOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_CollatorOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_usage :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_usage :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_localeMatcher :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_localeMatcher :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_numeric :
                                                     'tags this ->
                                                       bool or_undefined
                                                   val set_numeric :
                                                     'tags this ->
                                                       bool or_undefined ->
                                                         unit
                                                   val get_caseFirst :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_caseFirst :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_sensitivity :
                                                     'tags this ->
                                                       string or_undefined
                                                   val set_sensitivity :
                                                     'tags this ->
                                                       string or_undefined ->
                                                         unit
                                                   val get_ignorePunctuation
                                                     :
                                                     'tags this ->
                                                       bool or_undefined
                                                   val set_ignorePunctuation
                                                     :
                                                     'tags this ->
                                                       bool or_undefined ->
                                                         unit
                                                   val cast_from :
                                                     'tags this -> t
                                                 end
                                                 module Collator :
                                                 sig
                                                   type t =
                                                     [ `Intl_Collator ] intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [ `Intl_Collator ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [ `Intl_Collator ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `Intl_Collator
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val compare :
                                                     'tags this ->
                                                       x:string ->
                                                         y:string -> float
                                                   val resolvedOptions :
                                                     'tags this ->
                                                       ResolvedCollatorOptions.t
                                                   val cast_from :
                                                     'tags this -> t
                                                   val create :
                                                     ?locales:string list
                                                       or_string ->
                                                       ?options:CollatorOptions.t
                                                         -> unit -> t
                                                   val invoke :
                                                     ?locales:string list
                                                       or_string ->
                                                       ?options:CollatorOptions.t
                                                         -> unit -> t
                                                   val supportedLocalesOf :
                                                     locales:string list
                                                       or_string ->
                                                       ?options:CollatorOptions.t
                                                         ->
                                                         unit -> string list
                                                 end
                                                 val collator :
                                                   unit ->
                                                     AnonymousInterface8.t
                                                 val numberFormat :
                                                   unit ->
                                                     AnonymousInterface10.t
                                                 val dateTimeFormat :
                                                   unit ->
                                                     AnonymousInterface9.t
                                                 val pluralRules :
                                                   unit ->
                                                     AnonymousInterface11.t
                                                 val relativeTimeFormat :
                                                   unit ->
                                                     AnonymousInterface20.t
                                                 val locale :
                                                   unit ->
                                                     AnonymousInterface12.t
                                                 val displayNames :
                                                   unit ->
                                                     AnonymousInterface4.t
                                               end =
                                          struct
                                            module UnicodeBCP47LocaleIdentifier =
                                              struct
                                                type t = string
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2073 : Ojs.t) ->
                                                    Ojs.string_of_js x2073
                                                and t_to_js : t -> Ojs.t =
                                                  fun (x2072 : string) ->
                                                    Ojs.string_to_js x2072
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2075 : Ojs.t) ->
                                                    t_of_js x2075
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2074 : t) ->
                                                    t_to_js x2074
                                              end
                                            module RelativeTimeFormatNumeric =
                                              struct
                                                type t =
                                                  [ `L_s21_always 
                                                  | `L_s22_auto ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2077 : Ojs.t) ->
                                                    let x2078 = x2077 in
                                                    match Ojs.string_of_js
                                                            x2078
                                                    with
                                                    | "always" ->
                                                        `L_s21_always
                                                    | "auto" -> `L_s22_auto
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2076 :
                                                      [ `L_s21_always 
                                                      | `L_s22_auto ])
                                                    ->
                                                    match x2076 with
                                                    | `L_s21_always ->
                                                        Ojs.string_to_js
                                                          "always"
                                                    | `L_s22_auto ->
                                                        Ojs.string_to_js
                                                          "auto"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2080 : Ojs.t) ->
                                                    t_of_js x2080
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2079 : t) ->
                                                    t_to_js x2079
                                              end
                                            module RelativeTimeFormatStyle =
                                              struct
                                                type t =
                                                  [ `L_s55_long 
                                                  | `L_s67_narrow 
                                                  | `L_s88_short ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2082 : Ojs.t) ->
                                                    let x2083 = x2082 in
                                                    match Ojs.string_of_js
                                                            x2083
                                                    with
                                                    | "long" -> `L_s55_long
                                                    | "narrow" ->
                                                        `L_s67_narrow
                                                    | "short" -> `L_s88_short
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2081 :
                                                      [ `L_s55_long 
                                                      | `L_s67_narrow 
                                                      | `L_s88_short ])
                                                    ->
                                                    match x2081 with
                                                    | `L_s55_long ->
                                                        Ojs.string_to_js
                                                          "long"
                                                    | `L_s67_narrow ->
                                                        Ojs.string_to_js
                                                          "narrow"
                                                    | `L_s88_short ->
                                                        Ojs.string_to_js
                                                          "short"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2085 : Ojs.t) ->
                                                    t_of_js x2085
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2084 : t) ->
                                                    t_to_js x2084
                                              end
                                            module ResolvedRelativeTimeFormatOptions =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_ResolvedRelativeTimeFormatOptions
                                                      ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2087 : Ojs.t) ->
                                                    t_of_js x2087
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2086 : t) ->
                                                    t_to_js x2086
                                                type tags =
                                                  [
                                                    `Intl_ResolvedRelativeTimeFormatOptions
                                                      ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_ResolvedRelativeTimeFormatOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2090 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2090
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2088 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2088
                                                let (get_locale :
                                                  'tags this ->
                                                    UnicodeBCP47LocaleIdentifier.t)
                                                  =
                                                  fun (x2092 : 'tags this) ->
                                                    UnicodeBCP47LocaleIdentifier.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2092)
                                                         "locale")
                                                let (set_locale :
                                                  'tags this ->
                                                    UnicodeBCP47LocaleIdentifier.t
                                                      -> unit)
                                                  =
                                                  fun (x2094 : 'tags this) ->
                                                    fun
                                                      (x2095 :
                                                        UnicodeBCP47LocaleIdentifier.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2094) "locale"
                                                        (UnicodeBCP47LocaleIdentifier.t_to_js
                                                           x2095)
                                                let (get_style :
                                                  'tags this ->
                                                    RelativeTimeFormatStyle.t)
                                                  =
                                                  fun (x2097 : 'tags this) ->
                                                    RelativeTimeFormatStyle.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2097)
                                                         "style")
                                                let (set_style :
                                                  'tags this ->
                                                    RelativeTimeFormatStyle.t
                                                      -> unit)
                                                  =
                                                  fun (x2099 : 'tags this) ->
                                                    fun
                                                      (x2100 :
                                                        RelativeTimeFormatStyle.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2099) "style"
                                                        (RelativeTimeFormatStyle.t_to_js
                                                           x2100)
                                                let (get_numeric :
                                                  'tags this ->
                                                    RelativeTimeFormatNumeric.t)
                                                  =
                                                  fun (x2102 : 'tags this) ->
                                                    RelativeTimeFormatNumeric.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2102)
                                                         "numeric")
                                                let (set_numeric :
                                                  'tags this ->
                                                    RelativeTimeFormatNumeric.t
                                                      -> unit)
                                                  =
                                                  fun (x2104 : 'tags this) ->
                                                    fun
                                                      (x2105 :
                                                        RelativeTimeFormatNumeric.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2104) "numeric"
                                                        (RelativeTimeFormatNumeric.t_to_js
                                                           x2105)
                                                let (get_numberingSystem :
                                                  'tags this -> string) =
                                                  fun (x2107 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2107)
                                                         "numberingSystem")
                                                let (set_numberingSystem :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2109 : 'tags this) ->
                                                    fun (x2110 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2109)
                                                        "numberingSystem"
                                                        (Ojs.string_to_js
                                                           x2110)
                                                let cast_from = Obj.magic
                                              end
                                            module RelativeTimeFormatUnit =
                                              struct
                                                type t =
                                                  [ `L_s100_weeks 
                                                  | `L_s101_year 
                                                  | `L_s102_years 
                                                  | `L_s29_day 
                                                  | `L_s31_days 
                                                  | `L_s49_hour 
                                                  | `L_s50_hours 
                                                  | `L_s61_minute 
                                                  | `L_s62_minutes 
                                                  | `L_s63_month 
                                                  | `L_s64_months 
                                                  | `L_s80_quarter 
                                                  | `L_s81_quarters 
                                                  | `L_s86_second 
                                                  | `L_s87_seconds 
                                                  | `L_s98_week ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2113 : Ojs.t) ->
                                                    let x2114 = x2113 in
                                                    match Ojs.string_of_js
                                                            x2114
                                                    with
                                                    | "weeks" ->
                                                        `L_s100_weeks
                                                    | "year" -> `L_s101_year
                                                    | "years" ->
                                                        `L_s102_years
                                                    | "day" -> `L_s29_day
                                                    | "days" -> `L_s31_days
                                                    | "hour" -> `L_s49_hour
                                                    | "hours" -> `L_s50_hours
                                                    | "minute" ->
                                                        `L_s61_minute
                                                    | "minutes" ->
                                                        `L_s62_minutes
                                                    | "month" -> `L_s63_month
                                                    | "months" ->
                                                        `L_s64_months
                                                    | "quarter" ->
                                                        `L_s80_quarter
                                                    | "quarters" ->
                                                        `L_s81_quarters
                                                    | "second" ->
                                                        `L_s86_second
                                                    | "seconds" ->
                                                        `L_s87_seconds
                                                    | "week" -> `L_s98_week
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2112 :
                                                      [ `L_s100_weeks 
                                                      | `L_s101_year 
                                                      | `L_s102_years 
                                                      | `L_s29_day 
                                                      | `L_s31_days 
                                                      | `L_s49_hour 
                                                      | `L_s50_hours 
                                                      | `L_s61_minute 
                                                      | `L_s62_minutes 
                                                      | `L_s63_month 
                                                      | `L_s64_months 
                                                      | `L_s80_quarter 
                                                      | `L_s81_quarters 
                                                      | `L_s86_second 
                                                      | `L_s87_seconds 
                                                      | `L_s98_week ])
                                                    ->
                                                    match x2112 with
                                                    | `L_s100_weeks ->
                                                        Ojs.string_to_js
                                                          "weeks"
                                                    | `L_s101_year ->
                                                        Ojs.string_to_js
                                                          "year"
                                                    | `L_s102_years ->
                                                        Ojs.string_to_js
                                                          "years"
                                                    | `L_s29_day ->
                                                        Ojs.string_to_js
                                                          "day"
                                                    | `L_s31_days ->
                                                        Ojs.string_to_js
                                                          "days"
                                                    | `L_s49_hour ->
                                                        Ojs.string_to_js
                                                          "hour"
                                                    | `L_s50_hours ->
                                                        Ojs.string_to_js
                                                          "hours"
                                                    | `L_s61_minute ->
                                                        Ojs.string_to_js
                                                          "minute"
                                                    | `L_s62_minutes ->
                                                        Ojs.string_to_js
                                                          "minutes"
                                                    | `L_s63_month ->
                                                        Ojs.string_to_js
                                                          "month"
                                                    | `L_s64_months ->
                                                        Ojs.string_to_js
                                                          "months"
                                                    | `L_s80_quarter ->
                                                        Ojs.string_to_js
                                                          "quarter"
                                                    | `L_s81_quarters ->
                                                        Ojs.string_to_js
                                                          "quarters"
                                                    | `L_s86_second ->
                                                        Ojs.string_to_js
                                                          "second"
                                                    | `L_s87_seconds ->
                                                        Ojs.string_to_js
                                                          "seconds"
                                                    | `L_s98_week ->
                                                        Ojs.string_to_js
                                                          "week"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2116 : Ojs.t) ->
                                                    t_of_js x2116
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2115 : t) ->
                                                    t_to_js x2115
                                              end
                                            module RelativeTimeFormatPart =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_RelativeTimeFormatPart
                                                      ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2118 : Ojs.t) ->
                                                    t_of_js x2118
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2117 : t) ->
                                                    t_to_js x2117
                                                type tags =
                                                  [
                                                    `Intl_RelativeTimeFormatPart
                                                      ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_RelativeTimeFormatPart
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2121 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2121
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2119 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2119
                                                let (get_type :
                                                  'tags this -> string) =
                                                  fun (x2123 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2123)
                                                         "type")
                                                let (set_type :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2125 : 'tags this) ->
                                                    fun (x2126 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2125) "type"
                                                        (Ojs.string_to_js
                                                           x2126)
                                                let (get_value :
                                                  'tags this -> string) =
                                                  fun (x2128 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2128)
                                                         "value")
                                                let (set_value :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2130 : 'tags this) ->
                                                    fun (x2131 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2130) "value"
                                                        (Ojs.string_to_js
                                                           x2131)
                                                let (get_unit :
                                                  'tags this ->
                                                    RelativeTimeFormatUnit.t)
                                                  =
                                                  fun (x2133 : 'tags this) ->
                                                    RelativeTimeFormatUnit.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2133)
                                                         "unit")
                                                let (set_unit :
                                                  'tags this ->
                                                    RelativeTimeFormatUnit.t
                                                      -> unit)
                                                  =
                                                  fun (x2135 : 'tags this) ->
                                                    fun
                                                      (x2136 :
                                                        RelativeTimeFormatUnit.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2135) "unit"
                                                        (RelativeTimeFormatUnit.t_to_js
                                                           x2136)
                                                let cast_from = Obj.magic
                                              end
                                            module RelativeTimeFormatLocaleMatcher =
                                              struct
                                                type t =
                                                  [ `L_s24_best_fit 
                                                  | `L_s56_lookup ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2139 : Ojs.t) ->
                                                    let x2140 = x2139 in
                                                    match Ojs.string_of_js
                                                            x2140
                                                    with
                                                    | "best fit" ->
                                                        `L_s24_best_fit
                                                    | "lookup" ->
                                                        `L_s56_lookup
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2138 :
                                                      [ `L_s24_best_fit 
                                                      | `L_s56_lookup ])
                                                    ->
                                                    match x2138 with
                                                    | `L_s24_best_fit ->
                                                        Ojs.string_to_js
                                                          "best fit"
                                                    | `L_s56_lookup ->
                                                        Ojs.string_to_js
                                                          "lookup"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2142 : Ojs.t) ->
                                                    t_of_js x2142
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2141 : t) ->
                                                    t_to_js x2141
                                              end
                                            module RelativeTimeFormatOptions =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_RelativeTimeFormatOptions
                                                      ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2144 : Ojs.t) ->
                                                    t_of_js x2144
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2143 : t) ->
                                                    t_to_js x2143
                                                type tags =
                                                  [
                                                    `Intl_RelativeTimeFormatOptions
                                                      ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_RelativeTimeFormatOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2147 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2147
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2145 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2145
                                                let (get_localeMatcher :
                                                  'tags this ->
                                                    RelativeTimeFormatLocaleMatcher.t)
                                                  =
                                                  fun (x2149 : 'tags this) ->
                                                    RelativeTimeFormatLocaleMatcher.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2149)
                                                         "localeMatcher")
                                                let (set_localeMatcher :
                                                  'tags this ->
                                                    RelativeTimeFormatLocaleMatcher.t
                                                      -> unit)
                                                  =
                                                  fun (x2151 : 'tags this) ->
                                                    fun
                                                      (x2152 :
                                                        RelativeTimeFormatLocaleMatcher.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2151)
                                                        "localeMatcher"
                                                        (RelativeTimeFormatLocaleMatcher.t_to_js
                                                           x2152)
                                                let (get_numeric :
                                                  'tags this ->
                                                    RelativeTimeFormatNumeric.t)
                                                  =
                                                  fun (x2154 : 'tags this) ->
                                                    RelativeTimeFormatNumeric.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2154)
                                                         "numeric")
                                                let (set_numeric :
                                                  'tags this ->
                                                    RelativeTimeFormatNumeric.t
                                                      -> unit)
                                                  =
                                                  fun (x2156 : 'tags this) ->
                                                    fun
                                                      (x2157 :
                                                        RelativeTimeFormatNumeric.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2156) "numeric"
                                                        (RelativeTimeFormatNumeric.t_to_js
                                                           x2157)
                                                let (get_style :
                                                  'tags this ->
                                                    RelativeTimeFormatStyle.t)
                                                  =
                                                  fun (x2159 : 'tags this) ->
                                                    RelativeTimeFormatStyle.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2159)
                                                         "style")
                                                let (set_style :
                                                  'tags this ->
                                                    RelativeTimeFormatStyle.t
                                                      -> unit)
                                                  =
                                                  fun (x2161 : 'tags this) ->
                                                    fun
                                                      (x2162 :
                                                        RelativeTimeFormatStyle.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2161) "style"
                                                        (RelativeTimeFormatStyle.t_to_js
                                                           x2162)
                                                let cast_from = Obj.magic
                                              end
                                            module RelativeTimeFormat =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_RelativeTimeFormat ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2165 : Ojs.t) ->
                                                    t_of_js x2165
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2164 : t) ->
                                                    t_to_js x2164
                                                type tags =
                                                  [
                                                    `Intl_RelativeTimeFormat ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_RelativeTimeFormat
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2168 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2168
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2166 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2166
                                                let (format :
                                                  'tags this ->
                                                    value:float ->
                                                      unit:RelativeTimeFormatUnit.t
                                                        -> string)
                                                  =
                                                  fun (x2172 : 'tags this) ->
                                                    fun
                                                      ~value:(x2170 : float)
                                                      ->
                                                      fun
                                                        ~unit:(x2171 :
                                                                RelativeTimeFormatUnit.t)
                                                        ->
                                                        Ojs.string_of_js
                                                          (Ojs.call
                                                             (this_to_js
                                                                Obj.magic
                                                                x2172)
                                                             "format"
                                                             [|(Ojs.float_to_js
                                                                  x2170);(
                                                               RelativeTimeFormatUnit.t_to_js
                                                                 x2171)|])
                                                let (formatToParts :
                                                  'tags this ->
                                                    value:float ->
                                                      unit:RelativeTimeFormatUnit.t
                                                        ->
                                                        RelativeTimeFormatPart.t
                                                          list)
                                                  =
                                                  fun (x2176 : 'tags this) ->
                                                    fun
                                                      ~value:(x2174 : float)
                                                      ->
                                                      fun
                                                        ~unit:(x2175 :
                                                                RelativeTimeFormatUnit.t)
                                                        ->
                                                        Ojs.list_of_js
                                                          RelativeTimeFormatPart.t_of_js
                                                          (Ojs.call
                                                             (this_to_js
                                                                Obj.magic
                                                                x2176)
                                                             "formatToParts"
                                                             [|(Ojs.float_to_js
                                                                  x2174);(
                                                               RelativeTimeFormatUnit.t_to_js
                                                                 x2175)|])
                                                let (resolvedOptions :
                                                  'tags this ->
                                                    ResolvedRelativeTimeFormatOptions.t)
                                                  =
                                                  fun (x2179 : 'tags this) ->
                                                    ResolvedRelativeTimeFormatOptions.t_of_js
                                                      (Ojs.call
                                                         (this_to_js
                                                            Obj.magic x2179)
                                                         "resolvedOptions"
                                                         [||])
                                                let cast_from = Obj.magic
                                                let (create :
                                                  ?locales:(UnicodeBCP47LocaleIdentifier.t,
                                                    UnicodeBCP47LocaleIdentifier.t)
                                                    or_array ->
                                                    ?options:RelativeTimeFormatOptions.t
                                                      -> unit -> t)
                                                  =
                                                  fun
                                                    ?locales:(x2181 :
                                                               (UnicodeBCP47LocaleIdentifier.t,
                                                                 UnicodeBCP47LocaleIdentifier.t)
                                                                 or_array
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x2182 :
                                                                 RelativeTimeFormatOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.new_obj_arr
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "RelativeTimeFormat")
                                                             (let x2183 =
                                                                Ojs.new_obj
                                                                  (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                  [||] in
                                                              (match x2181
                                                               with
                                                               | Some x2185
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2183
                                                                    "push"
                                                                    [|(
                                                                    or_array_to_js
                                                                    UnicodeBCP47LocaleIdentifier.t_to_js
                                                                    UnicodeBCP47LocaleIdentifier.t_to_js
                                                                    x2185)|])
                                                               | None -> ());
                                                              (match x2182
                                                               with
                                                               | Some x2184
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2183
                                                                    "push"
                                                                    [|(
                                                                    RelativeTimeFormatOptions.t_to_js
                                                                    x2184)|])
                                                               | None -> ());
                                                              x2183))
                                                let (supportedLocalesOf :
                                                  ?locales:(UnicodeBCP47LocaleIdentifier.t,
                                                    UnicodeBCP47LocaleIdentifier.t)
                                                    or_array ->
                                                    ?options:RelativeTimeFormatOptions.t
                                                      ->
                                                      unit ->
                                                        UnicodeBCP47LocaleIdentifier.t
                                                          list)
                                                  =
                                                  fun
                                                    ?locales:(x2188 :
                                                               (UnicodeBCP47LocaleIdentifier.t,
                                                                 UnicodeBCP47LocaleIdentifier.t)
                                                                 or_array
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x2189 :
                                                                 RelativeTimeFormatOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        Ojs.list_of_js
                                                          UnicodeBCP47LocaleIdentifier.t_of_js
                                                          (let x2195 =
                                                             Ojs.get_prop_ascii
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "Intl")
                                                               "RelativeTimeFormat" in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x2195
                                                                "supportedLocalesOf")
                                                             "apply"
                                                             [|x2195;((
                                                               let x2190 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               (match x2188
                                                                with
                                                                | Some x2192
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2190
                                                                    "push"
                                                                    [|(
                                                                    or_array_to_js
                                                                    UnicodeBCP47LocaleIdentifier.t_to_js
                                                                    UnicodeBCP47LocaleIdentifier.t_to_js
                                                                    x2192)|])
                                                                | None -> ());
                                                               (match x2189
                                                                with
                                                                | Some x2191
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2190
                                                                    "push"
                                                                    [|(
                                                                    RelativeTimeFormatOptions.t_to_js
                                                                    x2191)|])
                                                                | None -> ());
                                                               x2190))|])
                                              end
                                            module PluralRuleType =
                                              struct
                                                type t =
                                                  [ `L_s25_cardinal 
                                                  | `L_s75_ordinal ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2198 : Ojs.t) ->
                                                    let x2199 = x2198 in
                                                    match Ojs.string_of_js
                                                            x2199
                                                    with
                                                    | "cardinal" ->
                                                        `L_s25_cardinal
                                                    | "ordinal" ->
                                                        `L_s75_ordinal
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2197 :
                                                      [ `L_s25_cardinal 
                                                      | `L_s75_ordinal ])
                                                    ->
                                                    match x2197 with
                                                    | `L_s25_cardinal ->
                                                        Ojs.string_to_js
                                                          "cardinal"
                                                    | `L_s75_ordinal ->
                                                        Ojs.string_to_js
                                                          "ordinal"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2201 : Ojs.t) ->
                                                    t_of_js x2201
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2200 : t) ->
                                                    t_to_js x2200
                                              end
                                            module LDMLPluralRule =
                                              struct
                                                type t =
                                                  [ `L_s103_zero 
                                                  | `L_s40_few 
                                                  | `L_s58_many 
                                                  | `L_s74_one 
                                                  | `L_s76_other 
                                                  | `L_s94_two ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2203 : Ojs.t) ->
                                                    let x2204 = x2203 in
                                                    match Ojs.string_of_js
                                                            x2204
                                                    with
                                                    | "zero" -> `L_s103_zero
                                                    | "few" -> `L_s40_few
                                                    | "many" -> `L_s58_many
                                                    | "one" -> `L_s74_one
                                                    | "other" -> `L_s76_other
                                                    | "two" -> `L_s94_two
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2202 :
                                                      [ `L_s103_zero 
                                                      | `L_s40_few 
                                                      | `L_s58_many 
                                                      | `L_s74_one 
                                                      | `L_s76_other 
                                                      | `L_s94_two ])
                                                    ->
                                                    match x2202 with
                                                    | `L_s103_zero ->
                                                        Ojs.string_to_js
                                                          "zero"
                                                    | `L_s40_few ->
                                                        Ojs.string_to_js
                                                          "few"
                                                    | `L_s58_many ->
                                                        Ojs.string_to_js
                                                          "many"
                                                    | `L_s74_one ->
                                                        Ojs.string_to_js
                                                          "one"
                                                    | `L_s76_other ->
                                                        Ojs.string_to_js
                                                          "other"
                                                    | `L_s94_two ->
                                                        Ojs.string_to_js
                                                          "two"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2206 : Ojs.t) ->
                                                    t_of_js x2206
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2205 : t) ->
                                                    t_to_js x2205
                                              end
                                            module ResolvedPluralRulesOptions =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_ResolvedPluralRulesOptions
                                                      ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2208 : Ojs.t) ->
                                                    t_of_js x2208
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2207 : t) ->
                                                    t_to_js x2207
                                                type tags =
                                                  [
                                                    `Intl_ResolvedPluralRulesOptions
                                                      ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_ResolvedPluralRulesOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2211 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2211
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2209 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2209
                                                let (get_locale :
                                                  'tags this -> string) =
                                                  fun (x2213 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2213)
                                                         "locale")
                                                let (set_locale :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2215 : 'tags this) ->
                                                    fun (x2216 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2215) "locale"
                                                        (Ojs.string_to_js
                                                           x2216)
                                                let (get_pluralCategories :
                                                  'tags this ->
                                                    LDMLPluralRule.t list)
                                                  =
                                                  fun (x2218 : 'tags this) ->
                                                    Ojs.list_of_js
                                                      LDMLPluralRule.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2218)
                                                         "pluralCategories")
                                                let (set_pluralCategories :
                                                  'tags this ->
                                                    LDMLPluralRule.t list ->
                                                      unit)
                                                  =
                                                  fun (x2221 : 'tags this) ->
                                                    fun
                                                      (x2222 :
                                                        LDMLPluralRule.t list)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2221)
                                                        "pluralCategories"
                                                        (Ojs.list_to_js
                                                           LDMLPluralRule.t_to_js
                                                           x2222)
                                                let (get_type :
                                                  'tags this ->
                                                    PluralRuleType.t)
                                                  =
                                                  fun (x2225 : 'tags this) ->
                                                    PluralRuleType.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2225)
                                                         "type")
                                                let (set_type :
                                                  'tags this ->
                                                    PluralRuleType.t -> unit)
                                                  =
                                                  fun (x2227 : 'tags this) ->
                                                    fun
                                                      (x2228 :
                                                        PluralRuleType.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2227) "type"
                                                        (PluralRuleType.t_to_js
                                                           x2228)
                                                let (get_minimumIntegerDigits
                                                  : 'tags this -> float) =
                                                  fun (x2230 : 'tags this) ->
                                                    Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2230)
                                                         "minimumIntegerDigits")
                                                let (set_minimumIntegerDigits
                                                  :
                                                  'tags this -> float -> unit)
                                                  =
                                                  fun (x2232 : 'tags this) ->
                                                    fun (x2233 : float) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2232)
                                                        "minimumIntegerDigits"
                                                        (Ojs.float_to_js
                                                           x2233)
                                                let (get_minimumFractionDigits
                                                  : 'tags this -> float) =
                                                  fun (x2235 : 'tags this) ->
                                                    Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2235)
                                                         "minimumFractionDigits")
                                                let (set_minimumFractionDigits
                                                  :
                                                  'tags this -> float -> unit)
                                                  =
                                                  fun (x2237 : 'tags this) ->
                                                    fun (x2238 : float) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2237)
                                                        "minimumFractionDigits"
                                                        (Ojs.float_to_js
                                                           x2238)
                                                let (get_maximumFractionDigits
                                                  : 'tags this -> float) =
                                                  fun (x2240 : 'tags this) ->
                                                    Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2240)
                                                         "maximumFractionDigits")
                                                let (set_maximumFractionDigits
                                                  :
                                                  'tags this -> float -> unit)
                                                  =
                                                  fun (x2242 : 'tags this) ->
                                                    fun (x2243 : float) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2242)
                                                        "maximumFractionDigits"
                                                        (Ojs.float_to_js
                                                           x2243)
                                                let (get_minimumSignificantDigits
                                                  : 'tags this -> float) =
                                                  fun (x2245 : 'tags this) ->
                                                    Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2245)
                                                         "minimumSignificantDigits")
                                                let (set_minimumSignificantDigits
                                                  :
                                                  'tags this -> float -> unit)
                                                  =
                                                  fun (x2247 : 'tags this) ->
                                                    fun (x2248 : float) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2247)
                                                        "minimumSignificantDigits"
                                                        (Ojs.float_to_js
                                                           x2248)
                                                let (get_maximumSignificantDigits
                                                  : 'tags this -> float) =
                                                  fun (x2250 : 'tags this) ->
                                                    Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2250)
                                                         "maximumSignificantDigits")
                                                let (set_maximumSignificantDigits
                                                  :
                                                  'tags this -> float -> unit)
                                                  =
                                                  fun (x2252 : 'tags this) ->
                                                    fun (x2253 : float) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2252)
                                                        "maximumSignificantDigits"
                                                        (Ojs.float_to_js
                                                           x2253)
                                                let cast_from = Obj.magic
                                              end
                                            module PluralRulesOptions =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_PluralRulesOptions ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2256 : Ojs.t) ->
                                                    t_of_js x2256
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2255 : t) ->
                                                    t_to_js x2255
                                                type tags =
                                                  [
                                                    `Intl_PluralRulesOptions ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_PluralRulesOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2259 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2259
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2257 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2257
                                                let (get_localeMatcher :
                                                  'tags this ->
                                                    [ `L_s24_best_fit 
                                                    | `L_s56_lookup ]
                                                      or_undefined)
                                                  =
                                                  fun (x2261 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2263 : Ojs.t) ->
                                                         let x2264 = x2263 in
                                                         match Ojs.string_of_js
                                                                 x2264
                                                         with
                                                         | "best fit" ->
                                                             `L_s24_best_fit
                                                         | "lookup" ->
                                                             `L_s56_lookup
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2261)
                                                         "localeMatcher")
                                                let (set_localeMatcher :
                                                  'tags this ->
                                                    [ `L_s24_best_fit 
                                                    | `L_s56_lookup ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2265 : 'tags this) ->
                                                    fun
                                                      (x2266 :
                                                        [ `L_s24_best_fit 
                                                        | `L_s56_lookup ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2265)
                                                        "localeMatcher"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2267 :
                                                                [
                                                                  `L_s24_best_fit
                                                                     | 
                                                                  `L_s56_lookup
                                                                    ])
                                                              ->
                                                              match x2267
                                                              with
                                                              | `L_s24_best_fit
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "best fit"
                                                              | `L_s56_lookup
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "lookup")
                                                           x2266)
                                                let (get_type :
                                                  'tags this ->
                                                    PluralRuleType.t
                                                      or_undefined)
                                                  =
                                                  fun (x2269 : 'tags this) ->
                                                    or_undefined_of_js
                                                      PluralRuleType.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2269)
                                                         "type")
                                                let (set_type :
                                                  'tags this ->
                                                    PluralRuleType.t
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2272 : 'tags this) ->
                                                    fun
                                                      (x2273 :
                                                        PluralRuleType.t
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2272) "type"
                                                        (or_undefined_to_js
                                                           PluralRuleType.t_to_js
                                                           x2273)
                                                let (get_minimumIntegerDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined)
                                                  =
                                                  fun (x2276 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2276)
                                                         "minimumIntegerDigits")
                                                let (set_minimumIntegerDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2279 : 'tags this) ->
                                                    fun
                                                      (x2280 :
                                                        float or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2279)
                                                        "minimumIntegerDigits"
                                                        (or_undefined_to_js
                                                           Ojs.float_to_js
                                                           x2280)
                                                let (get_minimumFractionDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined)
                                                  =
                                                  fun (x2283 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2283)
                                                         "minimumFractionDigits")
                                                let (set_minimumFractionDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2286 : 'tags this) ->
                                                    fun
                                                      (x2287 :
                                                        float or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2286)
                                                        "minimumFractionDigits"
                                                        (or_undefined_to_js
                                                           Ojs.float_to_js
                                                           x2287)
                                                let (get_maximumFractionDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined)
                                                  =
                                                  fun (x2290 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2290)
                                                         "maximumFractionDigits")
                                                let (set_maximumFractionDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2293 : 'tags this) ->
                                                    fun
                                                      (x2294 :
                                                        float or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2293)
                                                        "maximumFractionDigits"
                                                        (or_undefined_to_js
                                                           Ojs.float_to_js
                                                           x2294)
                                                let (get_minimumSignificantDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined)
                                                  =
                                                  fun (x2297 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2297)
                                                         "minimumSignificantDigits")
                                                let (set_minimumSignificantDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2300 : 'tags this) ->
                                                    fun
                                                      (x2301 :
                                                        float or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2300)
                                                        "minimumSignificantDigits"
                                                        (or_undefined_to_js
                                                           Ojs.float_to_js
                                                           x2301)
                                                let (get_maximumSignificantDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined)
                                                  =
                                                  fun (x2304 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2304)
                                                         "maximumSignificantDigits")
                                                let (set_maximumSignificantDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2307 : 'tags this) ->
                                                    fun
                                                      (x2308 :
                                                        float or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2307)
                                                        "maximumSignificantDigits"
                                                        (or_undefined_to_js
                                                           Ojs.float_to_js
                                                           x2308)
                                                let cast_from = Obj.magic
                                              end
                                            module PluralRules =
                                              struct
                                                type t =
                                                  [ `Intl_PluralRules ] intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2312 : Ojs.t) ->
                                                    t_of_js x2312
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2311 : t) ->
                                                    t_to_js x2311
                                                type tags =
                                                  [ `Intl_PluralRules ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_PluralRules
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2315 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2315
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2313 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2313
                                                let (resolvedOptions :
                                                  'tags this ->
                                                    ResolvedPluralRulesOptions.t)
                                                  =
                                                  fun (x2317 : 'tags this) ->
                                                    ResolvedPluralRulesOptions.t_of_js
                                                      (Ojs.call
                                                         (this_to_js
                                                            Obj.magic x2317)
                                                         "resolvedOptions"
                                                         [||])
                                                let (select :
                                                  'tags this ->
                                                    n:float ->
                                                      LDMLPluralRule.t)
                                                  =
                                                  fun (x2320 : 'tags this) ->
                                                    fun ~n:(x2319 : float) ->
                                                      LDMLPluralRule.t_of_js
                                                        (Ojs.call
                                                           (this_to_js
                                                              Obj.magic x2320)
                                                           "select"
                                                           [|(Ojs.float_to_js
                                                                x2319)|])
                                                let cast_from = Obj.magic
                                                let (create :
                                                  ?locales:string list
                                                    or_string ->
                                                    ?options:PluralRulesOptions.t
                                                      -> unit -> t)
                                                  =
                                                  fun
                                                    ?locales:(x2322 :
                                                               string list
                                                                 or_string
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x2323 :
                                                                 PluralRulesOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.new_obj_arr
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "PluralRules")
                                                             (let x2324 =
                                                                Ojs.new_obj
                                                                  (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                  [||] in
                                                              (match x2322
                                                               with
                                                               | Some x2326
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2324
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x2327 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x2327)
                                                                    x2326)|])
                                                               | None -> ());
                                                              (match x2323
                                                               with
                                                               | Some x2325
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2324
                                                                    "push"
                                                                    [|(
                                                                    PluralRulesOptions.t_to_js
                                                                    x2325)|])
                                                               | None -> ());
                                                              x2324))
                                                let (invoke :
                                                  ?locales:string list
                                                    or_string ->
                                                    ?options:PluralRulesOptions.t
                                                      -> unit -> t)
                                                  =
                                                  fun
                                                    ?locales:(x2329 :
                                                               string list
                                                                 or_string
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x2330 :
                                                                 PluralRulesOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "PluralRules")
                                                             "apply"
                                                             [|Ojs.null;((
                                                               let x2331 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               (match x2329
                                                                with
                                                                | Some x2333
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2331
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x2334 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x2334)
                                                                    x2333)|])
                                                                | None -> ());
                                                               (match x2330
                                                                with
                                                                | Some x2332
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2331
                                                                    "push"
                                                                    [|(
                                                                    PluralRulesOptions.t_to_js
                                                                    x2332)|])
                                                                | None -> ());
                                                               x2331))|])
                                                let (supportedLocalesOf :
                                                  locales:string list
                                                    or_string ->
                                                    ?options:AnonymousInterface3.t
                                                      -> unit -> string list)
                                                  =
                                                  fun
                                                    ~locales:(x2336 :
                                                               string list
                                                                 or_string)
                                                    ->
                                                    fun
                                                      ?options:(x2337 :
                                                                 AnonymousInterface3.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        Ojs.list_of_js
                                                          Ojs.string_of_js
                                                          (let x2342 =
                                                             Ojs.get_prop_ascii
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "Intl")
                                                               "PluralRules" in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x2342
                                                                "supportedLocalesOf")
                                                             "apply"
                                                             [|x2342;((
                                                               let x2338 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x2338
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x2340 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x2340)
                                                                    x2336)|]);
                                                               (match x2337
                                                                with
                                                                | Some x2339
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2338
                                                                    "push"
                                                                    [|(
                                                                    AnonymousInterface3.t_to_js
                                                                    x2339)|])
                                                                | None -> ());
                                                               x2338))|])
                                              end
                                            module ResolvedNumberFormatOptions =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_ResolvedNumberFormatOptions
                                                      ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2345 : Ojs.t) ->
                                                    t_of_js x2345
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2344 : t) ->
                                                    t_to_js x2344
                                                type tags =
                                                  [
                                                    `Intl_ResolvedNumberFormatOptions
                                                      ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_ResolvedNumberFormatOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2348 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2348
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2346 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2346
                                                let (get_compactDisplay :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s88_short ])
                                                  =
                                                  fun (x2350 : 'tags this) ->
                                                    let x2352 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2350)
                                                        "compactDisplay" in
                                                    match Ojs.string_of_js
                                                            x2352
                                                    with
                                                    | "long" -> `L_s55_long
                                                    | "short" -> `L_s88_short
                                                    | _ -> assert false
                                                let (set_compactDisplay :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s88_short ] -> 
                                                      unit)
                                                  =
                                                  fun (x2353 : 'tags this) ->
                                                    fun
                                                      (x2354 :
                                                        [ `L_s55_long 
                                                        | `L_s88_short ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2353)
                                                        "compactDisplay"
                                                        (match x2354 with
                                                         | `L_s55_long ->
                                                             Ojs.string_to_js
                                                               "long"
                                                         | `L_s88_short ->
                                                             Ojs.string_to_js
                                                               "short")
                                                let (get_notation :
                                                  'tags this ->
                                                    [ `L_s27_compact 
                                                    | `L_s34_engineering 
                                                    | `L_s84_scientific 
                                                    | `L_s89_standard ])
                                                  =
                                                  fun (x2356 : 'tags this) ->
                                                    let x2358 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2356) "notation" in
                                                    match Ojs.string_of_js
                                                            x2358
                                                    with
                                                    | "compact" ->
                                                        `L_s27_compact
                                                    | "engineering" ->
                                                        `L_s34_engineering
                                                    | "scientific" ->
                                                        `L_s84_scientific
                                                    | "standard" ->
                                                        `L_s89_standard
                                                    | _ -> assert false
                                                let (set_notation :
                                                  'tags this ->
                                                    [ `L_s27_compact 
                                                    | `L_s34_engineering 
                                                    | `L_s84_scientific 
                                                    | `L_s89_standard ] ->
                                                      unit)
                                                  =
                                                  fun (x2359 : 'tags this) ->
                                                    fun
                                                      (x2360 :
                                                        [ `L_s27_compact 
                                                        | `L_s34_engineering 
                                                        | `L_s84_scientific 
                                                        | `L_s89_standard ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2359) "notation"
                                                        (match x2360 with
                                                         | `L_s27_compact ->
                                                             Ojs.string_to_js
                                                               "compact"
                                                         | `L_s34_engineering
                                                             ->
                                                             Ojs.string_to_js
                                                               "engineering"
                                                         | `L_s84_scientific
                                                             ->
                                                             Ojs.string_to_js
                                                               "scientific"
                                                         | `L_s89_standard ->
                                                             Ojs.string_to_js
                                                               "standard")
                                                let (get_signDisplay :
                                                  'tags this ->
                                                    [ `L_s21_always 
                                                    | `L_s22_auto 
                                                    | `L_s68_never ])
                                                  =
                                                  fun (x2362 : 'tags this) ->
                                                    let x2364 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2362)
                                                        "signDisplay" in
                                                    match Ojs.string_of_js
                                                            x2364
                                                    with
                                                    | "always" ->
                                                        `L_s21_always
                                                    | "auto" -> `L_s22_auto
                                                    | "never" -> `L_s68_never
                                                    | _ -> assert false
                                                let (set_signDisplay :
                                                  'tags this ->
                                                    [ `L_s21_always 
                                                    | `L_s22_auto 
                                                    | `L_s68_never ] -> 
                                                      unit)
                                                  =
                                                  fun (x2365 : 'tags this) ->
                                                    fun
                                                      (x2366 :
                                                        [ `L_s21_always 
                                                        | `L_s22_auto 
                                                        | `L_s68_never ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2365)
                                                        "signDisplay"
                                                        (match x2366 with
                                                         | `L_s21_always ->
                                                             Ojs.string_to_js
                                                               "always"
                                                         | `L_s22_auto ->
                                                             Ojs.string_to_js
                                                               "auto"
                                                         | `L_s68_never ->
                                                             Ojs.string_to_js
                                                               "never")
                                                let (get_unit :
                                                  'tags this -> string) =
                                                  fun (x2368 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2368)
                                                         "unit")
                                                let (set_unit :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2370 : 'tags this) ->
                                                    fun (x2371 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2370) "unit"
                                                        (Ojs.string_to_js
                                                           x2371)
                                                let (get_unitDisplay :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ])
                                                  =
                                                  fun (x2373 : 'tags this) ->
                                                    let x2375 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2373)
                                                        "unitDisplay" in
                                                    match Ojs.string_of_js
                                                            x2375
                                                    with
                                                    | "long" -> `L_s55_long
                                                    | "narrow" ->
                                                        `L_s67_narrow
                                                    | "short" -> `L_s88_short
                                                    | _ -> assert false
                                                let (set_unitDisplay :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ] -> 
                                                      unit)
                                                  =
                                                  fun (x2376 : 'tags this) ->
                                                    fun
                                                      (x2377 :
                                                        [ `L_s55_long 
                                                        | `L_s67_narrow 
                                                        | `L_s88_short ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2376)
                                                        "unitDisplay"
                                                        (match x2377 with
                                                         | `L_s55_long ->
                                                             Ojs.string_to_js
                                                               "long"
                                                         | `L_s67_narrow ->
                                                             Ojs.string_to_js
                                                               "narrow"
                                                         | `L_s88_short ->
                                                             Ojs.string_to_js
                                                               "short")
                                                let (get_locale :
                                                  'tags this -> string) =
                                                  fun (x2379 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2379)
                                                         "locale")
                                                let (set_locale :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2381 : 'tags this) ->
                                                    fun (x2382 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2381) "locale"
                                                        (Ojs.string_to_js
                                                           x2382)
                                                let (get_numberingSystem :
                                                  'tags this -> string) =
                                                  fun (x2384 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2384)
                                                         "numberingSystem")
                                                let (set_numberingSystem :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2386 : 'tags this) ->
                                                    fun (x2387 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2386)
                                                        "numberingSystem"
                                                        (Ojs.string_to_js
                                                           x2387)
                                                let (get_style :
                                                  'tags this -> string) =
                                                  fun (x2389 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2389)
                                                         "style")
                                                let (set_style :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2391 : 'tags this) ->
                                                    fun (x2392 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2391) "style"
                                                        (Ojs.string_to_js
                                                           x2392)
                                                let (get_currency :
                                                  'tags this -> string) =
                                                  fun (x2394 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2394)
                                                         "currency")
                                                let (set_currency :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2396 : 'tags this) ->
                                                    fun (x2397 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2396) "currency"
                                                        (Ojs.string_to_js
                                                           x2397)
                                                let (get_currencyDisplay :
                                                  'tags this -> string) =
                                                  fun (x2399 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2399)
                                                         "currencyDisplay")
                                                let (set_currencyDisplay :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2401 : 'tags this) ->
                                                    fun (x2402 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2401)
                                                        "currencyDisplay"
                                                        (Ojs.string_to_js
                                                           x2402)
                                                let (get_minimumIntegerDigits
                                                  : 'tags this -> float) =
                                                  fun (x2404 : 'tags this) ->
                                                    Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2404)
                                                         "minimumIntegerDigits")
                                                let (set_minimumIntegerDigits
                                                  :
                                                  'tags this -> float -> unit)
                                                  =
                                                  fun (x2406 : 'tags this) ->
                                                    fun (x2407 : float) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2406)
                                                        "minimumIntegerDigits"
                                                        (Ojs.float_to_js
                                                           x2407)
                                                let (get_minimumFractionDigits
                                                  : 'tags this -> float) =
                                                  fun (x2409 : 'tags this) ->
                                                    Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2409)
                                                         "minimumFractionDigits")
                                                let (set_minimumFractionDigits
                                                  :
                                                  'tags this -> float -> unit)
                                                  =
                                                  fun (x2411 : 'tags this) ->
                                                    fun (x2412 : float) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2411)
                                                        "minimumFractionDigits"
                                                        (Ojs.float_to_js
                                                           x2412)
                                                let (get_maximumFractionDigits
                                                  : 'tags this -> float) =
                                                  fun (x2414 : 'tags this) ->
                                                    Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2414)
                                                         "maximumFractionDigits")
                                                let (set_maximumFractionDigits
                                                  :
                                                  'tags this -> float -> unit)
                                                  =
                                                  fun (x2416 : 'tags this) ->
                                                    fun (x2417 : float) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2416)
                                                        "maximumFractionDigits"
                                                        (Ojs.float_to_js
                                                           x2417)
                                                let (get_minimumSignificantDigits
                                                  : 'tags this -> float) =
                                                  fun (x2419 : 'tags this) ->
                                                    Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2419)
                                                         "minimumSignificantDigits")
                                                let (set_minimumSignificantDigits
                                                  :
                                                  'tags this -> float -> unit)
                                                  =
                                                  fun (x2421 : 'tags this) ->
                                                    fun (x2422 : float) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2421)
                                                        "minimumSignificantDigits"
                                                        (Ojs.float_to_js
                                                           x2422)
                                                let (get_maximumSignificantDigits
                                                  : 'tags this -> float) =
                                                  fun (x2424 : 'tags this) ->
                                                    Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2424)
                                                         "maximumSignificantDigits")
                                                let (set_maximumSignificantDigits
                                                  :
                                                  'tags this -> float -> unit)
                                                  =
                                                  fun (x2426 : 'tags this) ->
                                                    fun (x2427 : float) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2426)
                                                        "maximumSignificantDigits"
                                                        (Ojs.float_to_js
                                                           x2427)
                                                let (get_useGrouping :
                                                  'tags this -> bool) =
                                                  fun (x2429 : 'tags this) ->
                                                    Ojs.bool_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2429)
                                                         "useGrouping")
                                                let (set_useGrouping :
                                                  'tags this -> bool -> unit)
                                                  =
                                                  fun (x2431 : 'tags this) ->
                                                    fun (x2432 : bool) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2431)
                                                        "useGrouping"
                                                        (Ojs.bool_to_js x2432)
                                                let cast_from = Obj.magic
                                              end
                                            module ES2020NumberFormatPartType =
                                              struct
                                                type t =
                                                  [ `L_s27_compact 
                                                  | `L_s36_exponentInteger 
                                                  | `L_s37_exponentMinusSign 
                                                  | `L_s38_exponentSeparator 
                                                  | `L_s95_unit 
                                                  | `L_s96_unknown ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2435 : Ojs.t) ->
                                                    let x2436 = x2435 in
                                                    match Ojs.string_of_js
                                                            x2436
                                                    with
                                                    | "compact" ->
                                                        `L_s27_compact
                                                    | "exponentInteger" ->
                                                        `L_s36_exponentInteger
                                                    | "exponentMinusSign" ->
                                                        `L_s37_exponentMinusSign
                                                    | "exponentSeparator" ->
                                                        `L_s38_exponentSeparator
                                                    | "unit" -> `L_s95_unit
                                                    | "unknown" ->
                                                        `L_s96_unknown
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2434 :
                                                      [ `L_s27_compact 
                                                      | `L_s36_exponentInteger
                                                           | `L_s37_exponentMinusSign
                                                                | `L_s38_exponentSeparator
                                                                     | 
                                                        `L_s95_unit 
                                                      | `L_s96_unknown ])
                                                    ->
                                                    match x2434 with
                                                    | `L_s27_compact ->
                                                        Ojs.string_to_js
                                                          "compact"
                                                    | `L_s36_exponentInteger
                                                        ->
                                                        Ojs.string_to_js
                                                          "exponentInteger"
                                                    | `L_s37_exponentMinusSign
                                                        ->
                                                        Ojs.string_to_js
                                                          "exponentMinusSign"
                                                    | `L_s38_exponentSeparator
                                                        ->
                                                        Ojs.string_to_js
                                                          "exponentSeparator"
                                                    | `L_s95_unit ->
                                                        Ojs.string_to_js
                                                          "unit"
                                                    | `L_s96_unknown ->
                                                        Ojs.string_to_js
                                                          "unknown"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2438 : Ojs.t) ->
                                                    t_of_js x2438
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2437 : t) ->
                                                    t_to_js x2437
                                              end
                                            module ES2018NumberFormatPartType =
                                              struct
                                                type t =
                                                  [ `L_s26_code 
                                                  | `L_s28_currency 
                                                  | `L_s32_decimal 
                                                  | `L_s41_fraction 
                                                  | `L_s44_group 
                                                  | `L_s51_infinity 
                                                  | `L_s52_integer 
                                                  | `L_s54_literal 
                                                  | `L_s60_minusSign 
                                                  | `L_s65_name 
                                                  | `L_s66_nan 
                                                  | `L_s77_percent 
                                                  | `L_s78_percentSign 
                                                  | `L_s79_plusSign 
                                                  | `L_s91_symbol ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2440 : Ojs.t) ->
                                                    let x2441 = x2440 in
                                                    match Ojs.string_of_js
                                                            x2441
                                                    with
                                                    | "code" -> `L_s26_code
                                                    | "currency" ->
                                                        `L_s28_currency
                                                    | "decimal" ->
                                                        `L_s32_decimal
                                                    | "fraction" ->
                                                        `L_s41_fraction
                                                    | "group" -> `L_s44_group
                                                    | "infinity" ->
                                                        `L_s51_infinity
                                                    | "integer" ->
                                                        `L_s52_integer
                                                    | "literal" ->
                                                        `L_s54_literal
                                                    | "minusSign" ->
                                                        `L_s60_minusSign
                                                    | "name" -> `L_s65_name
                                                    | "nan" -> `L_s66_nan
                                                    | "percent" ->
                                                        `L_s77_percent
                                                    | "percentSign" ->
                                                        `L_s78_percentSign
                                                    | "plusSign" ->
                                                        `L_s79_plusSign
                                                    | "symbol" ->
                                                        `L_s91_symbol
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2439 :
                                                      [ `L_s26_code 
                                                      | `L_s28_currency 
                                                      | `L_s32_decimal 
                                                      | `L_s41_fraction 
                                                      | `L_s44_group 
                                                      | `L_s51_infinity 
                                                      | `L_s52_integer 
                                                      | `L_s54_literal 
                                                      | `L_s60_minusSign 
                                                      | `L_s65_name 
                                                      | `L_s66_nan 
                                                      | `L_s77_percent 
                                                      | `L_s78_percentSign 
                                                      | `L_s79_plusSign 
                                                      | `L_s91_symbol ])
                                                    ->
                                                    match x2439 with
                                                    | `L_s26_code ->
                                                        Ojs.string_to_js
                                                          "code"
                                                    | `L_s28_currency ->
                                                        Ojs.string_to_js
                                                          "currency"
                                                    | `L_s32_decimal ->
                                                        Ojs.string_to_js
                                                          "decimal"
                                                    | `L_s41_fraction ->
                                                        Ojs.string_to_js
                                                          "fraction"
                                                    | `L_s44_group ->
                                                        Ojs.string_to_js
                                                          "group"
                                                    | `L_s51_infinity ->
                                                        Ojs.string_to_js
                                                          "infinity"
                                                    | `L_s52_integer ->
                                                        Ojs.string_to_js
                                                          "integer"
                                                    | `L_s54_literal ->
                                                        Ojs.string_to_js
                                                          "literal"
                                                    | `L_s60_minusSign ->
                                                        Ojs.string_to_js
                                                          "minusSign"
                                                    | `L_s65_name ->
                                                        Ojs.string_to_js
                                                          "name"
                                                    | `L_s66_nan ->
                                                        Ojs.string_to_js
                                                          "nan"
                                                    | `L_s77_percent ->
                                                        Ojs.string_to_js
                                                          "percent"
                                                    | `L_s78_percentSign ->
                                                        Ojs.string_to_js
                                                          "percentSign"
                                                    | `L_s79_plusSign ->
                                                        Ojs.string_to_js
                                                          "plusSign"
                                                    | `L_s91_symbol ->
                                                        Ojs.string_to_js
                                                          "symbol"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2443 : Ojs.t) ->
                                                    t_of_js x2443
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2442 : t) ->
                                                    t_to_js x2442
                                              end
                                            module NumberFormatPartTypes =
                                              struct
                                                type t =
                                                  [ `L_s26_code 
                                                  | `L_s27_compact 
                                                  | `L_s28_currency 
                                                  | `L_s32_decimal 
                                                  | `L_s36_exponentInteger 
                                                  | `L_s37_exponentMinusSign 
                                                  | `L_s38_exponentSeparator 
                                                  | `L_s41_fraction 
                                                  | `L_s44_group 
                                                  | `L_s51_infinity 
                                                  | `L_s52_integer 
                                                  | `L_s54_literal 
                                                  | `L_s60_minusSign 
                                                  | `L_s65_name 
                                                  | `L_s66_nan 
                                                  | `L_s77_percent 
                                                  | `L_s78_percentSign 
                                                  | `L_s79_plusSign 
                                                  | `L_s91_symbol 
                                                  | `L_s95_unit 
                                                  | `L_s96_unknown ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2445 : Ojs.t) ->
                                                    let x2446 = x2445 in
                                                    match Ojs.string_of_js
                                                            x2446
                                                    with
                                                    | "code" -> `L_s26_code
                                                    | "compact" ->
                                                        `L_s27_compact
                                                    | "currency" ->
                                                        `L_s28_currency
                                                    | "decimal" ->
                                                        `L_s32_decimal
                                                    | "exponentInteger" ->
                                                        `L_s36_exponentInteger
                                                    | "exponentMinusSign" ->
                                                        `L_s37_exponentMinusSign
                                                    | "exponentSeparator" ->
                                                        `L_s38_exponentSeparator
                                                    | "fraction" ->
                                                        `L_s41_fraction
                                                    | "group" -> `L_s44_group
                                                    | "infinity" ->
                                                        `L_s51_infinity
                                                    | "integer" ->
                                                        `L_s52_integer
                                                    | "literal" ->
                                                        `L_s54_literal
                                                    | "minusSign" ->
                                                        `L_s60_minusSign
                                                    | "name" -> `L_s65_name
                                                    | "nan" -> `L_s66_nan
                                                    | "percent" ->
                                                        `L_s77_percent
                                                    | "percentSign" ->
                                                        `L_s78_percentSign
                                                    | "plusSign" ->
                                                        `L_s79_plusSign
                                                    | "symbol" ->
                                                        `L_s91_symbol
                                                    | "unit" -> `L_s95_unit
                                                    | "unknown" ->
                                                        `L_s96_unknown
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2444 :
                                                      [ `L_s26_code 
                                                      | `L_s27_compact 
                                                      | `L_s28_currency 
                                                      | `L_s32_decimal 
                                                      | `L_s36_exponentInteger
                                                           | `L_s37_exponentMinusSign
                                                                | `L_s38_exponentSeparator
                                                                     | 
                                                        `L_s41_fraction 
                                                      | `L_s44_group 
                                                      | `L_s51_infinity 
                                                      | `L_s52_integer 
                                                      | `L_s54_literal 
                                                      | `L_s60_minusSign 
                                                      | `L_s65_name 
                                                      | `L_s66_nan 
                                                      | `L_s77_percent 
                                                      | `L_s78_percentSign 
                                                      | `L_s79_plusSign 
                                                      | `L_s91_symbol 
                                                      | `L_s95_unit 
                                                      | `L_s96_unknown ])
                                                    ->
                                                    match x2444 with
                                                    | `L_s26_code ->
                                                        Ojs.string_to_js
                                                          "code"
                                                    | `L_s27_compact ->
                                                        Ojs.string_to_js
                                                          "compact"
                                                    | `L_s28_currency ->
                                                        Ojs.string_to_js
                                                          "currency"
                                                    | `L_s32_decimal ->
                                                        Ojs.string_to_js
                                                          "decimal"
                                                    | `L_s36_exponentInteger
                                                        ->
                                                        Ojs.string_to_js
                                                          "exponentInteger"
                                                    | `L_s37_exponentMinusSign
                                                        ->
                                                        Ojs.string_to_js
                                                          "exponentMinusSign"
                                                    | `L_s38_exponentSeparator
                                                        ->
                                                        Ojs.string_to_js
                                                          "exponentSeparator"
                                                    | `L_s41_fraction ->
                                                        Ojs.string_to_js
                                                          "fraction"
                                                    | `L_s44_group ->
                                                        Ojs.string_to_js
                                                          "group"
                                                    | `L_s51_infinity ->
                                                        Ojs.string_to_js
                                                          "infinity"
                                                    | `L_s52_integer ->
                                                        Ojs.string_to_js
                                                          "integer"
                                                    | `L_s54_literal ->
                                                        Ojs.string_to_js
                                                          "literal"
                                                    | `L_s60_minusSign ->
                                                        Ojs.string_to_js
                                                          "minusSign"
                                                    | `L_s65_name ->
                                                        Ojs.string_to_js
                                                          "name"
                                                    | `L_s66_nan ->
                                                        Ojs.string_to_js
                                                          "nan"
                                                    | `L_s77_percent ->
                                                        Ojs.string_to_js
                                                          "percent"
                                                    | `L_s78_percentSign ->
                                                        Ojs.string_to_js
                                                          "percentSign"
                                                    | `L_s79_plusSign ->
                                                        Ojs.string_to_js
                                                          "plusSign"
                                                    | `L_s91_symbol ->
                                                        Ojs.string_to_js
                                                          "symbol"
                                                    | `L_s95_unit ->
                                                        Ojs.string_to_js
                                                          "unit"
                                                    | `L_s96_unknown ->
                                                        Ojs.string_to_js
                                                          "unknown"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2448 : Ojs.t) ->
                                                    t_of_js x2448
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2447 : t) ->
                                                    t_to_js x2447
                                              end
                                            module NumberFormatPart =
                                              struct
                                                type t =
                                                  [ `Intl_NumberFormatPart ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2450 : Ojs.t) ->
                                                    t_of_js x2450
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2449 : t) ->
                                                    t_to_js x2449
                                                type tags =
                                                  [ `Intl_NumberFormatPart ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_NumberFormatPart
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2453 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2453
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2451 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2451
                                                let (get_type :
                                                  'tags this ->
                                                    NumberFormatPartTypes.t)
                                                  =
                                                  fun (x2455 : 'tags this) ->
                                                    NumberFormatPartTypes.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2455)
                                                         "type")
                                                let (set_type :
                                                  'tags this ->
                                                    NumberFormatPartTypes.t
                                                      -> unit)
                                                  =
                                                  fun (x2457 : 'tags this) ->
                                                    fun
                                                      (x2458 :
                                                        NumberFormatPartTypes.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2457) "type"
                                                        (NumberFormatPartTypes.t_to_js
                                                           x2458)
                                                let (get_value :
                                                  'tags this -> string) =
                                                  fun (x2460 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2460)
                                                         "value")
                                                let (set_value :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2462 : 'tags this) ->
                                                    fun (x2463 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2462) "value"
                                                        (Ojs.string_to_js
                                                           x2463)
                                                let cast_from = Obj.magic
                                              end
                                            module NumberFormatOptions =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_NumberFormatOptions ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2466 : Ojs.t) ->
                                                    t_of_js x2466
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2465 : t) ->
                                                    t_to_js x2465
                                                type tags =
                                                  [
                                                    `Intl_NumberFormatOptions ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_NumberFormatOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2469 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2469
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2467 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2467
                                                let (get_compactDisplay :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x2471 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2473 : Ojs.t) ->
                                                         let x2474 = x2473 in
                                                         match Ojs.string_of_js
                                                                 x2474
                                                         with
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2471)
                                                         "compactDisplay")
                                                let (set_compactDisplay :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2475 : 'tags this) ->
                                                    fun
                                                      (x2476 :
                                                        [ `L_s55_long 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2475)
                                                        "compactDisplay"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2477 :
                                                                [
                                                                  `L_s55_long 
                                                                | `L_s88_short
                                                                    ])
                                                              ->
                                                              match x2477
                                                              with
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x2476)
                                                let (get_notation :
                                                  'tags this ->
                                                    [ `L_s27_compact 
                                                    | `L_s34_engineering 
                                                    | `L_s84_scientific 
                                                    | `L_s89_standard ]
                                                      or_undefined)
                                                  =
                                                  fun (x2479 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2481 : Ojs.t) ->
                                                         let x2482 = x2481 in
                                                         match Ojs.string_of_js
                                                                 x2482
                                                         with
                                                         | "compact" ->
                                                             `L_s27_compact
                                                         | "engineering" ->
                                                             `L_s34_engineering
                                                         | "scientific" ->
                                                             `L_s84_scientific
                                                         | "standard" ->
                                                             `L_s89_standard
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2479)
                                                         "notation")
                                                let (set_notation :
                                                  'tags this ->
                                                    [ `L_s27_compact 
                                                    | `L_s34_engineering 
                                                    | `L_s84_scientific 
                                                    | `L_s89_standard ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2483 : 'tags this) ->
                                                    fun
                                                      (x2484 :
                                                        [ `L_s27_compact 
                                                        | `L_s34_engineering 
                                                        | `L_s84_scientific 
                                                        | `L_s89_standard ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2483) "notation"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2485 :
                                                                [
                                                                  `L_s27_compact
                                                                     | 
                                                                  `L_s34_engineering
                                                                     | 
                                                                  `L_s84_scientific
                                                                     | 
                                                                  `L_s89_standard
                                                                    ])
                                                              ->
                                                              match x2485
                                                              with
                                                              | `L_s27_compact
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "compact"
                                                              | `L_s34_engineering
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "engineering"
                                                              | `L_s84_scientific
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "scientific"
                                                              | `L_s89_standard
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "standard")
                                                           x2484)
                                                let (get_signDisplay :
                                                  'tags this ->
                                                    [ `L_s21_always 
                                                    | `L_s22_auto 
                                                    | `L_s68_never ]
                                                      or_undefined)
                                                  =
                                                  fun (x2487 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2489 : Ojs.t) ->
                                                         let x2490 = x2489 in
                                                         match Ojs.string_of_js
                                                                 x2490
                                                         with
                                                         | "always" ->
                                                             `L_s21_always
                                                         | "auto" ->
                                                             `L_s22_auto
                                                         | "never" ->
                                                             `L_s68_never
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2487)
                                                         "signDisplay")
                                                let (set_signDisplay :
                                                  'tags this ->
                                                    [ `L_s21_always 
                                                    | `L_s22_auto 
                                                    | `L_s68_never ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2491 : 'tags this) ->
                                                    fun
                                                      (x2492 :
                                                        [ `L_s21_always 
                                                        | `L_s22_auto 
                                                        | `L_s68_never ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2491)
                                                        "signDisplay"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2493 :
                                                                [
                                                                  `L_s21_always
                                                                     | 
                                                                  `L_s22_auto 
                                                                | `L_s68_never
                                                                    ])
                                                              ->
                                                              match x2493
                                                              with
                                                              | `L_s21_always
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "always"
                                                              | `L_s22_auto
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "auto"
                                                              | `L_s68_never
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "never")
                                                           x2492)
                                                let (get_unit :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x2495 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2495)
                                                         "unit")
                                                let (set_unit :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2498 : 'tags this) ->
                                                    fun
                                                      (x2499 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2498) "unit"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x2499)
                                                let (get_unitDisplay :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x2502 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2504 : Ojs.t) ->
                                                         let x2505 = x2504 in
                                                         match Ojs.string_of_js
                                                                 x2505
                                                         with
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "narrow" ->
                                                             `L_s67_narrow
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2502)
                                                         "unitDisplay")
                                                let (set_unitDisplay :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2506 : 'tags this) ->
                                                    fun
                                                      (x2507 :
                                                        [ `L_s55_long 
                                                        | `L_s67_narrow 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2506)
                                                        "unitDisplay"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2508 :
                                                                [
                                                                  `L_s55_long 
                                                                | `L_s67_narrow
                                                                     | 
                                                                  `L_s88_short
                                                                    ])
                                                              ->
                                                              match x2508
                                                              with
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s67_narrow
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "narrow"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x2507)
                                                let (get_localeMatcher :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x2510 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2510)
                                                         "localeMatcher")
                                                let (set_localeMatcher :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2513 : 'tags this) ->
                                                    fun
                                                      (x2514 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2513)
                                                        "localeMatcher"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x2514)
                                                let (get_style :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x2517 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2517)
                                                         "style")
                                                let (set_style :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2520 : 'tags this) ->
                                                    fun
                                                      (x2521 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2520) "style"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x2521)
                                                let (get_currency :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x2524 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2524)
                                                         "currency")
                                                let (set_currency :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2527 : 'tags this) ->
                                                    fun
                                                      (x2528 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2527) "currency"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x2528)
                                                let (get_currencyDisplay :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x2531 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2531)
                                                         "currencyDisplay")
                                                let (set_currencyDisplay :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2534 : 'tags this) ->
                                                    fun
                                                      (x2535 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2534)
                                                        "currencyDisplay"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x2535)
                                                let (get_currencySign :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x2538 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2538)
                                                         "currencySign")
                                                let (set_currencySign :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2541 : 'tags this) ->
                                                    fun
                                                      (x2542 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2541)
                                                        "currencySign"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x2542)
                                                let (get_useGrouping :
                                                  'tags this ->
                                                    bool or_undefined)
                                                  =
                                                  fun (x2545 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.bool_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2545)
                                                         "useGrouping")
                                                let (set_useGrouping :
                                                  'tags this ->
                                                    bool or_undefined -> unit)
                                                  =
                                                  fun (x2548 : 'tags this) ->
                                                    fun
                                                      (x2549 :
                                                        bool or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2548)
                                                        "useGrouping"
                                                        (or_undefined_to_js
                                                           Ojs.bool_to_js
                                                           x2549)
                                                let (get_minimumIntegerDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined)
                                                  =
                                                  fun (x2552 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2552)
                                                         "minimumIntegerDigits")
                                                let (set_minimumIntegerDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2555 : 'tags this) ->
                                                    fun
                                                      (x2556 :
                                                        float or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2555)
                                                        "minimumIntegerDigits"
                                                        (or_undefined_to_js
                                                           Ojs.float_to_js
                                                           x2556)
                                                let (get_minimumFractionDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined)
                                                  =
                                                  fun (x2559 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2559)
                                                         "minimumFractionDigits")
                                                let (set_minimumFractionDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2562 : 'tags this) ->
                                                    fun
                                                      (x2563 :
                                                        float or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2562)
                                                        "minimumFractionDigits"
                                                        (or_undefined_to_js
                                                           Ojs.float_to_js
                                                           x2563)
                                                let (get_maximumFractionDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined)
                                                  =
                                                  fun (x2566 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2566)
                                                         "maximumFractionDigits")
                                                let (set_maximumFractionDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2569 : 'tags this) ->
                                                    fun
                                                      (x2570 :
                                                        float or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2569)
                                                        "maximumFractionDigits"
                                                        (or_undefined_to_js
                                                           Ojs.float_to_js
                                                           x2570)
                                                let (get_minimumSignificantDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined)
                                                  =
                                                  fun (x2573 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2573)
                                                         "minimumSignificantDigits")
                                                let (set_minimumSignificantDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2576 : 'tags this) ->
                                                    fun
                                                      (x2577 :
                                                        float or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2576)
                                                        "minimumSignificantDigits"
                                                        (or_undefined_to_js
                                                           Ojs.float_to_js
                                                           x2577)
                                                let (get_maximumSignificantDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined)
                                                  =
                                                  fun (x2580 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.float_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2580)
                                                         "maximumSignificantDigits")
                                                let (set_maximumSignificantDigits
                                                  :
                                                  'tags this ->
                                                    float or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2583 : 'tags this) ->
                                                    fun
                                                      (x2584 :
                                                        float or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2583)
                                                        "maximumSignificantDigits"
                                                        (or_undefined_to_js
                                                           Ojs.float_to_js
                                                           x2584)
                                                let cast_from = Obj.magic
                                              end
                                            module NumberFormat =
                                              struct
                                                type t =
                                                  [ `Intl_NumberFormat ] intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2588 : Ojs.t) ->
                                                    t_of_js x2588
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2587 : t) ->
                                                    t_to_js x2587
                                                type tags =
                                                  [ `Intl_NumberFormat ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_NumberFormat
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2591 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2591
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2589 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2589
                                                let (format :
                                                  'tags this ->
                                                    value:bigint or_number ->
                                                      string)
                                                  =
                                                  fun (x2595 : 'tags this) ->
                                                    fun
                                                      ~value:(x2593 :
                                                               bigint
                                                                 or_number)
                                                      ->
                                                      Ojs.string_of_js
                                                        (Ojs.call
                                                           (this_to_js
                                                              Obj.magic x2595)
                                                           "format"
                                                           [|(or_number_to_js
                                                                bigint_to_js
                                                                x2593)|])
                                                let (resolvedOptions :
                                                  'tags this ->
                                                    ResolvedNumberFormatOptions.t)
                                                  =
                                                  fun (x2597 : 'tags this) ->
                                                    ResolvedNumberFormatOptions.t_of_js
                                                      (Ojs.call
                                                         (this_to_js
                                                            Obj.magic x2597)
                                                         "resolvedOptions"
                                                         [||])
                                                let (formatToParts :
                                                  'tags this ->
                                                    ?number:bigint or_number
                                                      ->
                                                      unit ->
                                                        NumberFormatPart.t
                                                          list)
                                                  =
                                                  fun (x2603 : 'tags this) ->
                                                    fun
                                                      ?number:(x2599 :
                                                                bigint
                                                                  or_number
                                                                  option)
                                                      ->
                                                      fun () ->
                                                        Ojs.list_of_js
                                                          NumberFormatPart.t_of_js
                                                          (let x2605 =
                                                             this_to_js
                                                               Obj.magic
                                                               x2603 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x2605
                                                                "formatToParts")
                                                             "apply"
                                                             [|x2605;((
                                                               let x2600 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               (match x2599
                                                                with
                                                                | Some x2601
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2600
                                                                    "push"
                                                                    [|(
                                                                    or_number_to_js
                                                                    bigint_to_js
                                                                    x2601)|])
                                                                | None -> ());
                                                               x2600))|])
                                                let (format' :
                                                  'tags this ->
                                                    value:float -> string)
                                                  =
                                                  fun (x2608 : 'tags this) ->
                                                    fun
                                                      ~value:(x2607 : float)
                                                      ->
                                                      Ojs.string_of_js
                                                        (Ojs.call
                                                           (this_to_js
                                                              Obj.magic x2608)
                                                           "format"
                                                           [|(Ojs.float_to_js
                                                                x2607)|])
                                                let (resolvedOptions' :
                                                  'tags this ->
                                                    ResolvedNumberFormatOptions.t)
                                                  =
                                                  fun (x2610 : 'tags this) ->
                                                    ResolvedNumberFormatOptions.t_of_js
                                                      (Ojs.call
                                                         (this_to_js
                                                            Obj.magic x2610)
                                                         "resolvedOptions"
                                                         [||])
                                                let (formatRange :
                                                  'tags this ->
                                                    startDate:bigint
                                                      or_number ->
                                                      endDate:bigint
                                                        or_number -> 
                                                        string)
                                                  =
                                                  fun (x2616 : 'tags this) ->
                                                    fun
                                                      ~startDate:(x2612 :
                                                                   bigint
                                                                    or_number)
                                                      ->
                                                      fun
                                                        ~endDate:(x2614 :
                                                                   bigint
                                                                    or_number)
                                                        ->
                                                        Ojs.string_of_js
                                                          (Ojs.call
                                                             (this_to_js
                                                                Obj.magic
                                                                x2616)
                                                             "formatRange"
                                                             [|(or_number_to_js
                                                                  bigint_to_js
                                                                  x2612);(
                                                               or_number_to_js
                                                                 bigint_to_js
                                                                 x2614)|])
                                                let (formatRangeToParts :
                                                  'tags this ->
                                                    startDate:bigint
                                                      or_number ->
                                                      endDate:bigint
                                                        or_number ->
                                                        NumberFormatPart.t
                                                          list)
                                                  =
                                                  fun (x2622 : 'tags this) ->
                                                    fun
                                                      ~startDate:(x2618 :
                                                                   bigint
                                                                    or_number)
                                                      ->
                                                      fun
                                                        ~endDate:(x2620 :
                                                                   bigint
                                                                    or_number)
                                                        ->
                                                        Ojs.list_of_js
                                                          NumberFormatPart.t_of_js
                                                          (Ojs.call
                                                             (this_to_js
                                                                Obj.magic
                                                                x2622)
                                                             "formatRangeToParts"
                                                             [|(or_number_to_js
                                                                  bigint_to_js
                                                                  x2618);(
                                                               or_number_to_js
                                                                 bigint_to_js
                                                                 x2620)|])
                                                let cast_from = Obj.magic
                                                let (create :
                                                  ?locales:string list
                                                    or_string ->
                                                    ?options:NumberFormatOptions.t
                                                      -> unit -> t)
                                                  =
                                                  fun
                                                    ?locales:(x2625 :
                                                               string list
                                                                 or_string
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x2626 :
                                                                 NumberFormatOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.new_obj_arr
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "NumberFormat")
                                                             (let x2627 =
                                                                Ojs.new_obj
                                                                  (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                  [||] in
                                                              (match x2625
                                                               with
                                                               | Some x2629
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2627
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x2630 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x2630)
                                                                    x2629)|])
                                                               | None -> ());
                                                              (match x2626
                                                               with
                                                               | Some x2628
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2627
                                                                    "push"
                                                                    [|(
                                                                    NumberFormatOptions.t_to_js
                                                                    x2628)|])
                                                               | None -> ());
                                                              x2627))
                                                let (invoke :
                                                  ?locales:string list
                                                    or_string ->
                                                    ?options:NumberFormatOptions.t
                                                      -> unit -> t)
                                                  =
                                                  fun
                                                    ?locales:(x2632 :
                                                               string list
                                                                 or_string
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x2633 :
                                                                 NumberFormatOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "NumberFormat")
                                                             "apply"
                                                             [|Ojs.null;((
                                                               let x2634 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               (match x2632
                                                                with
                                                                | Some x2636
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2634
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x2637 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x2637)
                                                                    x2636)|])
                                                                | None -> ());
                                                               (match x2633
                                                                with
                                                                | Some x2635
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2634
                                                                    "push"
                                                                    [|(
                                                                    NumberFormatOptions.t_to_js
                                                                    x2635)|])
                                                                | None -> ());
                                                               x2634))|])
                                                let (supportedLocalesOf :
                                                  locales:string list
                                                    or_string ->
                                                    ?options:NumberFormatOptions.t
                                                      -> unit -> string list)
                                                  =
                                                  fun
                                                    ~locales:(x2639 :
                                                               string list
                                                                 or_string)
                                                    ->
                                                    fun
                                                      ?options:(x2640 :
                                                                 NumberFormatOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        Ojs.list_of_js
                                                          Ojs.string_of_js
                                                          (let x2645 =
                                                             Ojs.get_prop_ascii
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "Intl")
                                                               "NumberFormat" in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x2645
                                                                "supportedLocalesOf")
                                                             "apply"
                                                             [|x2645;((
                                                               let x2641 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x2641
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x2643 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x2643)
                                                                    x2639)|]);
                                                               (match x2640
                                                                with
                                                                | Some x2642
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2641
                                                                    "push"
                                                                    [|(
                                                                    NumberFormatOptions.t_to_js
                                                                    x2642)|])
                                                                | None -> ());
                                                               x2641))|])
                                              end
                                            module LocaleHourCycleKey =
                                              struct
                                                type t =
                                                  [ `L_s45_h11  | `L_s46_h12 
                                                  | `L_s47_h23 
                                                  | `L_s48_h24 ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2648 : Ojs.t) ->
                                                    let x2649 = x2648 in
                                                    match Ojs.string_of_js
                                                            x2649
                                                    with
                                                    | "h11" -> `L_s45_h11
                                                    | "h12" -> `L_s46_h12
                                                    | "h23" -> `L_s47_h23
                                                    | "h24" -> `L_s48_h24
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2647 :
                                                      [ `L_s45_h11 
                                                      | `L_s46_h12 
                                                      | `L_s47_h23 
                                                      | `L_s48_h24 ])
                                                    ->
                                                    match x2647 with
                                                    | `L_s45_h11 ->
                                                        Ojs.string_to_js
                                                          "h11"
                                                    | `L_s46_h12 ->
                                                        Ojs.string_to_js
                                                          "h12"
                                                    | `L_s47_h23 ->
                                                        Ojs.string_to_js
                                                          "h23"
                                                    | `L_s48_h24 ->
                                                        Ojs.string_to_js
                                                          "h24"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2651 : Ojs.t) ->
                                                    t_of_js x2651
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2650 : t) ->
                                                    t_to_js x2650
                                              end
                                            module LocaleCollationCaseFirst =
                                              struct
                                                type t =
                                                  [ `L_s39_false 
                                                  | `L_s57_lower 
                                                  | `L_s97_upper ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2653 : Ojs.t) ->
                                                    let x2654 = x2653 in
                                                    match Ojs.string_of_js
                                                            x2654
                                                    with
                                                    | "false" -> `L_s39_false
                                                    | "lower" -> `L_s57_lower
                                                    | "upper" -> `L_s97_upper
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2652 :
                                                      [ `L_s39_false 
                                                      | `L_s57_lower 
                                                      | `L_s97_upper ])
                                                    ->
                                                    match x2652 with
                                                    | `L_s39_false ->
                                                        Ojs.string_to_js
                                                          "false"
                                                    | `L_s57_lower ->
                                                        Ojs.string_to_js
                                                          "lower"
                                                    | `L_s97_upper ->
                                                        Ojs.string_to_js
                                                          "upper"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2656 : Ojs.t) ->
                                                    t_of_js x2656
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2655 : t) ->
                                                    t_to_js x2655
                                              end
                                            module LocaleOptions =
                                              struct
                                                type t =
                                                  [ `Intl_LocaleOptions ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2658 : Ojs.t) ->
                                                    t_of_js x2658
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2657 : t) ->
                                                    t_to_js x2657
                                                type tags =
                                                  [ `Intl_LocaleOptions ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_LocaleOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2661 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2661
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2659 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2659
                                                let (get_baseName :
                                                  'tags this -> string) =
                                                  fun (x2663 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2663)
                                                         "baseName")
                                                let (set_baseName :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2665 : 'tags this) ->
                                                    fun (x2666 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2665) "baseName"
                                                        (Ojs.string_to_js
                                                           x2666)
                                                let (get_calendar :
                                                  'tags this -> string) =
                                                  fun (x2668 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2668)
                                                         "calendar")
                                                let (set_calendar :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2670 : 'tags this) ->
                                                    fun (x2671 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2670) "calendar"
                                                        (Ojs.string_to_js
                                                           x2671)
                                                let (get_caseFirst :
                                                  'tags this ->
                                                    LocaleCollationCaseFirst.t)
                                                  =
                                                  fun (x2673 : 'tags this) ->
                                                    LocaleCollationCaseFirst.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2673)
                                                         "caseFirst")
                                                let (set_caseFirst :
                                                  'tags this ->
                                                    LocaleCollationCaseFirst.t
                                                      -> unit)
                                                  =
                                                  fun (x2675 : 'tags this) ->
                                                    fun
                                                      (x2676 :
                                                        LocaleCollationCaseFirst.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2675) "caseFirst"
                                                        (LocaleCollationCaseFirst.t_to_js
                                                           x2676)
                                                let (get_collation :
                                                  'tags this -> string) =
                                                  fun (x2678 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2678)
                                                         "collation")
                                                let (set_collation :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2680 : 'tags this) ->
                                                    fun (x2681 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2680) "collation"
                                                        (Ojs.string_to_js
                                                           x2681)
                                                let (get_hourCycle :
                                                  'tags this ->
                                                    LocaleHourCycleKey.t)
                                                  =
                                                  fun (x2683 : 'tags this) ->
                                                    LocaleHourCycleKey.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2683)
                                                         "hourCycle")
                                                let (set_hourCycle :
                                                  'tags this ->
                                                    LocaleHourCycleKey.t ->
                                                      unit)
                                                  =
                                                  fun (x2685 : 'tags this) ->
                                                    fun
                                                      (x2686 :
                                                        LocaleHourCycleKey.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2685) "hourCycle"
                                                        (LocaleHourCycleKey.t_to_js
                                                           x2686)
                                                let (get_language :
                                                  'tags this -> string) =
                                                  fun (x2688 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2688)
                                                         "language")
                                                let (set_language :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2690 : 'tags this) ->
                                                    fun (x2691 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2690) "language"
                                                        (Ojs.string_to_js
                                                           x2691)
                                                let (get_numberingSystem :
                                                  'tags this -> string) =
                                                  fun (x2693 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2693)
                                                         "numberingSystem")
                                                let (set_numberingSystem :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2695 : 'tags this) ->
                                                    fun (x2696 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2695)
                                                        "numberingSystem"
                                                        (Ojs.string_to_js
                                                           x2696)
                                                let (get_numeric :
                                                  'tags this -> bool) =
                                                  fun (x2698 : 'tags this) ->
                                                    Ojs.bool_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2698)
                                                         "numeric")
                                                let (set_numeric :
                                                  'tags this -> bool -> unit)
                                                  =
                                                  fun (x2700 : 'tags this) ->
                                                    fun (x2701 : bool) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2700) "numeric"
                                                        (Ojs.bool_to_js x2701)
                                                let (get_region :
                                                  'tags this -> string) =
                                                  fun (x2703 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2703)
                                                         "region")
                                                let (set_region :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2705 : 'tags this) ->
                                                    fun (x2706 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2705) "region"
                                                        (Ojs.string_to_js
                                                           x2706)
                                                let (get_script :
                                                  'tags this -> string) =
                                                  fun (x2708 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2708)
                                                         "script")
                                                let (set_script :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2710 : 'tags this) ->
                                                    fun (x2711 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2710) "script"
                                                        (Ojs.string_to_js
                                                           x2711)
                                                let cast_from = Obj.magic
                                              end
                                            module BCP47LanguageTag =
                                              struct
                                                type t = string
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2714 : Ojs.t) ->
                                                    Ojs.string_of_js x2714
                                                and t_to_js : t -> Ojs.t =
                                                  fun (x2713 : string) ->
                                                    Ojs.string_to_js x2713
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2716 : Ojs.t) ->
                                                    t_of_js x2716
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2715 : t) ->
                                                    t_to_js x2715
                                              end
                                            module Locale =
                                              struct
                                                type t =
                                                  [ `Intl_Locale 
                                                  | `Intl_LocaleOptions ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2718 : Ojs.t) ->
                                                    t_of_js x2718
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2717 : t) ->
                                                    t_to_js x2717
                                                type tags =
                                                  [ `Intl_Locale 
                                                  | `Intl_LocaleOptions ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_Locale ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2721 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2721
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2719 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2719
                                                let (maximize :
                                                  'tags this -> t) =
                                                  fun (x2723 : 'tags this) ->
                                                    t_of_js
                                                      (Ojs.call
                                                         (this_to_js
                                                            Obj.magic x2723)
                                                         "maximize" [||])
                                                let (minimize :
                                                  'tags this -> t) =
                                                  fun (x2725 : 'tags this) ->
                                                    t_of_js
                                                      (Ojs.call
                                                         (this_to_js
                                                            Obj.magic x2725)
                                                         "minimize" [||])
                                                let (toString :
                                                  'tags this ->
                                                    BCP47LanguageTag.t)
                                                  =
                                                  fun (x2727 : 'tags this) ->
                                                    BCP47LanguageTag.t_of_js
                                                      (Ojs.call
                                                         (this_to_js
                                                            Obj.magic x2727)
                                                         "toString" [||])
                                                let cast_from = Obj.magic
                                                let (create :
                                                  ?tag:BCP47LanguageTag.t ->
                                                    ?options:LocaleOptions.t
                                                      -> unit -> t)
                                                  =
                                                  fun
                                                    ?tag:(x2729 :
                                                           BCP47LanguageTag.t
                                                             option)
                                                    ->
                                                    fun
                                                      ?options:(x2730 :
                                                                 LocaleOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.new_obj_arr
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "Locale")
                                                             (let x2731 =
                                                                Ojs.new_obj
                                                                  (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                  [||] in
                                                              (match x2729
                                                               with
                                                               | Some x2733
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2731
                                                                    "push"
                                                                    [|(
                                                                    BCP47LanguageTag.t_to_js
                                                                    x2733)|])
                                                               | None -> ());
                                                              (match x2730
                                                               with
                                                               | Some x2732
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2731
                                                                    "push"
                                                                    [|(
                                                                    LocaleOptions.t_to_js
                                                                    x2732)|])
                                                               | None -> ());
                                                              x2731))
                                              end
                                            module DisplayNamesOptions =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_DisplayNamesOptions ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2735 : Ojs.t) ->
                                                    t_of_js x2735
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2734 : t) ->
                                                    t_to_js x2734
                                                type tags =
                                                  [
                                                    `Intl_DisplayNamesOptions ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_DisplayNamesOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2738 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2738
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2736 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2736
                                                let (get_localeMatcher :
                                                  'tags this ->
                                                    RelativeTimeFormatLocaleMatcher.t)
                                                  =
                                                  fun (x2740 : 'tags this) ->
                                                    RelativeTimeFormatLocaleMatcher.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2740)
                                                         "localeMatcher")
                                                let (set_localeMatcher :
                                                  'tags this ->
                                                    RelativeTimeFormatLocaleMatcher.t
                                                      -> unit)
                                                  =
                                                  fun (x2742 : 'tags this) ->
                                                    fun
                                                      (x2743 :
                                                        RelativeTimeFormatLocaleMatcher.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2742)
                                                        "localeMatcher"
                                                        (RelativeTimeFormatLocaleMatcher.t_to_js
                                                           x2743)
                                                let (get_style :
                                                  'tags this ->
                                                    RelativeTimeFormatStyle.t)
                                                  =
                                                  fun (x2745 : 'tags this) ->
                                                    RelativeTimeFormatStyle.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2745)
                                                         "style")
                                                let (set_style :
                                                  'tags this ->
                                                    RelativeTimeFormatStyle.t
                                                      -> unit)
                                                  =
                                                  fun (x2747 : 'tags this) ->
                                                    fun
                                                      (x2748 :
                                                        RelativeTimeFormatStyle.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2747) "style"
                                                        (RelativeTimeFormatStyle.t_to_js
                                                           x2748)
                                                let (get_type :
                                                  'tags this ->
                                                    [ `L_s28_currency 
                                                    | `L_s53_language 
                                                    | `L_s82_region 
                                                    | `L_s85_script ])
                                                  =
                                                  fun (x2750 : 'tags this) ->
                                                    let x2752 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2750) "type" in
                                                    match Ojs.string_of_js
                                                            x2752
                                                    with
                                                    | "currency" ->
                                                        `L_s28_currency
                                                    | "language" ->
                                                        `L_s53_language
                                                    | "region" ->
                                                        `L_s82_region
                                                    | "script" ->
                                                        `L_s85_script
                                                    | _ -> assert false
                                                let (set_type :
                                                  'tags this ->
                                                    [ `L_s28_currency 
                                                    | `L_s53_language 
                                                    | `L_s82_region 
                                                    | `L_s85_script ] -> 
                                                      unit)
                                                  =
                                                  fun (x2753 : 'tags this) ->
                                                    fun
                                                      (x2754 :
                                                        [ `L_s28_currency 
                                                        | `L_s53_language 
                                                        | `L_s82_region 
                                                        | `L_s85_script ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2753) "type"
                                                        (match x2754 with
                                                         | `L_s28_currency ->
                                                             Ojs.string_to_js
                                                               "currency"
                                                         | `L_s53_language ->
                                                             Ojs.string_to_js
                                                               "language"
                                                         | `L_s82_region ->
                                                             Ojs.string_to_js
                                                               "region"
                                                         | `L_s85_script ->
                                                             Ojs.string_to_js
                                                               "script")
                                                let (get_fallback :
                                                  'tags this ->
                                                    [ `L_s26_code 
                                                    | `L_s69_none ])
                                                  =
                                                  fun (x2756 : 'tags this) ->
                                                    let x2758 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2756) "fallback" in
                                                    match Ojs.string_of_js
                                                            x2758
                                                    with
                                                    | "code" -> `L_s26_code
                                                    | "none" -> `L_s69_none
                                                    | _ -> assert false
                                                let (set_fallback :
                                                  'tags this ->
                                                    [ `L_s26_code 
                                                    | `L_s69_none ] -> 
                                                      unit)
                                                  =
                                                  fun (x2759 : 'tags this) ->
                                                    fun
                                                      (x2760 :
                                                        [ `L_s26_code 
                                                        | `L_s69_none ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2759) "fallback"
                                                        (match x2760 with
                                                         | `L_s26_code ->
                                                             Ojs.string_to_js
                                                               "code"
                                                         | `L_s69_none ->
                                                             Ojs.string_to_js
                                                               "none")
                                                let cast_from = Obj.magic
                                              end
                                            module DisplayNames =
                                              struct
                                                type t =
                                                  [ `Intl_DisplayNames ] intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2763 : Ojs.t) ->
                                                    t_of_js x2763
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2762 : t) ->
                                                    t_to_js x2762
                                                type tags =
                                                  [ `Intl_DisplayNames ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_DisplayNames
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2766 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2766
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2764 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2764
                                                let (of_ :
                                                  'tags this ->
                                                    code:string -> string)
                                                  =
                                                  fun (x2769 : 'tags this) ->
                                                    fun
                                                      ~code:(x2768 : string)
                                                      ->
                                                      Ojs.string_of_js
                                                        (Ojs.call
                                                           (this_to_js
                                                              Obj.magic x2769)
                                                           "of"
                                                           [|(Ojs.string_to_js
                                                                x2768)|])
                                                let (resolvedOptions :
                                                  'tags this ->
                                                    DisplayNamesOptions.t)
                                                  =
                                                  fun (x2771 : 'tags this) ->
                                                    DisplayNamesOptions.t_of_js
                                                      (Ojs.call
                                                         (this_to_js
                                                            Obj.magic x2771)
                                                         "resolvedOptions"
                                                         [||])
                                                let cast_from = Obj.magic
                                                let (prototype : unit -> t) =
                                                  fun () ->
                                                    t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (Ojs.get_prop_ascii
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Intl")
                                                            "DisplayNames")
                                                         "prototype")
                                                let (create :
                                                  ?locales:(BCP47LanguageTag.t,
                                                    BCP47LanguageTag.t)
                                                    or_array ->
                                                    ?options:DisplayNamesOptions.t
                                                      Partial.t -> unit -> t)
                                                  =
                                                  fun
                                                    ?locales:(x2773 :
                                                               (BCP47LanguageTag.t,
                                                                 BCP47LanguageTag.t)
                                                                 or_array
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x2774 :
                                                                 DisplayNamesOptions.t
                                                                   Partial.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.new_obj_arr
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "DisplayNames")
                                                             (let x2775 =
                                                                Ojs.new_obj
                                                                  (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                  [||] in
                                                              (match x2773
                                                               with
                                                               | Some x2778
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2775
                                                                    "push"
                                                                    [|(
                                                                    or_array_to_js
                                                                    BCP47LanguageTag.t_to_js
                                                                    BCP47LanguageTag.t_to_js
                                                                    x2778)|])
                                                               | None -> ());
                                                              (match x2774
                                                               with
                                                               | Some x2776
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x2775
                                                                    "push"
                                                                    [|(
                                                                    Partial.t_to_js
                                                                    DisplayNamesOptions.t_to_js
                                                                    x2776)|])
                                                               | None -> ());
                                                              x2775))
                                                let (supportedLocalesOf :
                                                  locales:(BCP47LanguageTag.t,
                                                    BCP47LanguageTag.t)
                                                    or_array ->
                                                    ?options:AnonymousInterface2.t
                                                      ->
                                                      unit ->
                                                        BCP47LanguageTag.t
                                                          list)
                                                  =
                                                  fun
                                                    ~locales:(x2781 :
                                                               (BCP47LanguageTag.t,
                                                                 BCP47LanguageTag.t)
                                                                 or_array)
                                                    ->
                                                    fun
                                                      ?options:(x2782 :
                                                                 AnonymousInterface2.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        Ojs.list_of_js
                                                          BCP47LanguageTag.t_of_js
                                                          (let x2787 =
                                                             Ojs.get_prop_ascii
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "Intl")
                                                               "DisplayNames" in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x2787
                                                                "supportedLocalesOf")
                                                             "apply"
                                                             [|x2787;((
                                                               let x2783 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x2783
                                                                    "push"
                                                                    [|(
                                                                    or_array_to_js
                                                                    BCP47LanguageTag.t_to_js
                                                                    BCP47LanguageTag.t_to_js
                                                                    x2781)|]);
                                                               (match x2782
                                                                with
                                                                | Some x2784
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x2783
                                                                    "push"
                                                                    [|(
                                                                    AnonymousInterface2.t_to_js
                                                                    x2784)|])
                                                                | None -> ());
                                                               x2783))|])
                                              end
                                            module ResolvedDateTimeFormatOptions =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_ResolvedDateTimeFormatOptions
                                                      ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2790 : Ojs.t) ->
                                                    t_of_js x2790
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2789 : t) ->
                                                    t_to_js x2789
                                                type tags =
                                                  [
                                                    `Intl_ResolvedDateTimeFormatOptions
                                                      ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_ResolvedDateTimeFormatOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2793 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2793
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2791 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2791
                                                let (get_locale :
                                                  'tags this -> string) =
                                                  fun (x2795 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2795)
                                                         "locale")
                                                let (set_locale :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2797 : 'tags this) ->
                                                    fun (x2798 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2797) "locale"
                                                        (Ojs.string_to_js
                                                           x2798)
                                                let (get_calendar :
                                                  'tags this -> string) =
                                                  fun (x2800 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2800)
                                                         "calendar")
                                                let (set_calendar :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2802 : 'tags this) ->
                                                    fun (x2803 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2802) "calendar"
                                                        (Ojs.string_to_js
                                                           x2803)
                                                let (get_numberingSystem :
                                                  'tags this -> string) =
                                                  fun (x2805 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2805)
                                                         "numberingSystem")
                                                let (set_numberingSystem :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2807 : 'tags this) ->
                                                    fun (x2808 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2807)
                                                        "numberingSystem"
                                                        (Ojs.string_to_js
                                                           x2808)
                                                let (get_timeZone :
                                                  'tags this -> string) =
                                                  fun (x2810 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2810)
                                                         "timeZone")
                                                let (set_timeZone :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2812 : 'tags this) ->
                                                    fun (x2813 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2812) "timeZone"
                                                        (Ojs.string_to_js
                                                           x2813)
                                                let (get_hour12 :
                                                  'tags this -> bool) =
                                                  fun (x2815 : 'tags this) ->
                                                    Ojs.bool_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2815)
                                                         "hour12")
                                                let (set_hour12 :
                                                  'tags this -> bool -> unit)
                                                  =
                                                  fun (x2817 : 'tags this) ->
                                                    fun (x2818 : bool) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2817) "hour12"
                                                        (Ojs.bool_to_js x2818)
                                                let (get_weekday :
                                                  'tags this -> string) =
                                                  fun (x2820 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2820)
                                                         "weekday")
                                                let (set_weekday :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2822 : 'tags this) ->
                                                    fun (x2823 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2822) "weekday"
                                                        (Ojs.string_to_js
                                                           x2823)
                                                let (get_era :
                                                  'tags this -> string) =
                                                  fun (x2825 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2825)
                                                         "era")
                                                let (set_era :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2827 : 'tags this) ->
                                                    fun (x2828 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2827) "era"
                                                        (Ojs.string_to_js
                                                           x2828)
                                                let (get_year :
                                                  'tags this -> string) =
                                                  fun (x2830 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2830)
                                                         "year")
                                                let (set_year :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2832 : 'tags this) ->
                                                    fun (x2833 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2832) "year"
                                                        (Ojs.string_to_js
                                                           x2833)
                                                let (get_month :
                                                  'tags this -> string) =
                                                  fun (x2835 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2835)
                                                         "month")
                                                let (set_month :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2837 : 'tags this) ->
                                                    fun (x2838 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2837) "month"
                                                        (Ojs.string_to_js
                                                           x2838)
                                                let (get_day :
                                                  'tags this -> string) =
                                                  fun (x2840 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2840)
                                                         "day")
                                                let (set_day :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2842 : 'tags this) ->
                                                    fun (x2843 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2842) "day"
                                                        (Ojs.string_to_js
                                                           x2843)
                                                let (get_hour :
                                                  'tags this -> string) =
                                                  fun (x2845 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2845)
                                                         "hour")
                                                let (set_hour :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2847 : 'tags this) ->
                                                    fun (x2848 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2847) "hour"
                                                        (Ojs.string_to_js
                                                           x2848)
                                                let (get_minute :
                                                  'tags this -> string) =
                                                  fun (x2850 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2850)
                                                         "minute")
                                                let (set_minute :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2852 : 'tags this) ->
                                                    fun (x2853 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2852) "minute"
                                                        (Ojs.string_to_js
                                                           x2853)
                                                let (get_second :
                                                  'tags this -> string) =
                                                  fun (x2855 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2855)
                                                         "second")
                                                let (set_second :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2857 : 'tags this) ->
                                                    fun (x2858 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2857) "second"
                                                        (Ojs.string_to_js
                                                           x2858)
                                                let (get_timeZoneName :
                                                  'tags this -> string) =
                                                  fun (x2860 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2860)
                                                         "timeZoneName")
                                                let (set_timeZoneName :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2862 : 'tags this) ->
                                                    fun (x2863 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2862)
                                                        "timeZoneName"
                                                        (Ojs.string_to_js
                                                           x2863)
                                                let (get_formatMatcher :
                                                  'tags this ->
                                                    [ `L_s23_basic 
                                                    | `L_s24_best_fit ])
                                                  =
                                                  fun (x2865 : 'tags this) ->
                                                    let x2867 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2865)
                                                        "formatMatcher" in
                                                    match Ojs.string_of_js
                                                            x2867
                                                    with
                                                    | "basic" -> `L_s23_basic
                                                    | "best fit" ->
                                                        `L_s24_best_fit
                                                    | _ -> assert false
                                                let (set_formatMatcher :
                                                  'tags this ->
                                                    [ `L_s23_basic 
                                                    | `L_s24_best_fit ] ->
                                                      unit)
                                                  =
                                                  fun (x2868 : 'tags this) ->
                                                    fun
                                                      (x2869 :
                                                        [ `L_s23_basic 
                                                        | `L_s24_best_fit ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2868)
                                                        "formatMatcher"
                                                        (match x2869 with
                                                         | `L_s23_basic ->
                                                             Ojs.string_to_js
                                                               "basic"
                                                         | `L_s24_best_fit ->
                                                             Ojs.string_to_js
                                                               "best fit")
                                                let (get_dateStyle :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ])
                                                  =
                                                  fun (x2871 : 'tags this) ->
                                                    let x2873 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2871) "dateStyle" in
                                                    match Ojs.string_of_js
                                                            x2873
                                                    with
                                                    | "full" -> `L_s43_full
                                                    | "long" -> `L_s55_long
                                                    | "medium" ->
                                                        `L_s59_medium
                                                    | "short" -> `L_s88_short
                                                    | _ -> assert false
                                                let (set_dateStyle :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ] -> 
                                                      unit)
                                                  =
                                                  fun (x2874 : 'tags this) ->
                                                    fun
                                                      (x2875 :
                                                        [ `L_s43_full 
                                                        | `L_s55_long 
                                                        | `L_s59_medium 
                                                        | `L_s88_short ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2874) "dateStyle"
                                                        (match x2875 with
                                                         | `L_s43_full ->
                                                             Ojs.string_to_js
                                                               "full"
                                                         | `L_s55_long ->
                                                             Ojs.string_to_js
                                                               "long"
                                                         | `L_s59_medium ->
                                                             Ojs.string_to_js
                                                               "medium"
                                                         | `L_s88_short ->
                                                             Ojs.string_to_js
                                                               "short")
                                                let (get_timeStyle :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ])
                                                  =
                                                  fun (x2877 : 'tags this) ->
                                                    let x2879 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2877) "timeStyle" in
                                                    match Ojs.string_of_js
                                                            x2879
                                                    with
                                                    | "full" -> `L_s43_full
                                                    | "long" -> `L_s55_long
                                                    | "medium" ->
                                                        `L_s59_medium
                                                    | "short" -> `L_s88_short
                                                    | _ -> assert false
                                                let (set_timeStyle :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ] -> 
                                                      unit)
                                                  =
                                                  fun (x2880 : 'tags this) ->
                                                    fun
                                                      (x2881 :
                                                        [ `L_s43_full 
                                                        | `L_s55_long 
                                                        | `L_s59_medium 
                                                        | `L_s88_short ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2880) "timeStyle"
                                                        (match x2881 with
                                                         | `L_s43_full ->
                                                             Ojs.string_to_js
                                                               "full"
                                                         | `L_s55_long ->
                                                             Ojs.string_to_js
                                                               "long"
                                                         | `L_s59_medium ->
                                                             Ojs.string_to_js
                                                               "medium"
                                                         | `L_s88_short ->
                                                             Ojs.string_to_js
                                                               "short")
                                                let (get_hourCycle :
                                                  'tags this ->
                                                    [ `L_s45_h11 
                                                    | `L_s46_h12 
                                                    | `L_s47_h23 
                                                    | `L_s48_h24 ])
                                                  =
                                                  fun (x2883 : 'tags this) ->
                                                    let x2885 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2883) "hourCycle" in
                                                    match Ojs.string_of_js
                                                            x2885
                                                    with
                                                    | "h11" -> `L_s45_h11
                                                    | "h12" -> `L_s46_h12
                                                    | "h23" -> `L_s47_h23
                                                    | "h24" -> `L_s48_h24
                                                    | _ -> assert false
                                                let (set_hourCycle :
                                                  'tags this ->
                                                    [ `L_s45_h11 
                                                    | `L_s46_h12 
                                                    | `L_s47_h23 
                                                    | `L_s48_h24 ] -> 
                                                      unit)
                                                  =
                                                  fun (x2886 : 'tags this) ->
                                                    fun
                                                      (x2887 :
                                                        [ `L_s45_h11 
                                                        | `L_s46_h12 
                                                        | `L_s47_h23 
                                                        | `L_s48_h24 ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2886) "hourCycle"
                                                        (match x2887 with
                                                         | `L_s45_h11 ->
                                                             Ojs.string_to_js
                                                               "h11"
                                                         | `L_s46_h12 ->
                                                             Ojs.string_to_js
                                                               "h12"
                                                         | `L_s47_h23 ->
                                                             Ojs.string_to_js
                                                               "h23"
                                                         | `L_s48_h24 ->
                                                             Ojs.string_to_js
                                                               "h24")
                                                let (get_dayPeriod :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ])
                                                  =
                                                  fun (x2889 : 'tags this) ->
                                                    let x2891 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2889) "dayPeriod" in
                                                    match Ojs.string_of_js
                                                            x2891
                                                    with
                                                    | "long" -> `L_s55_long
                                                    | "narrow" ->
                                                        `L_s67_narrow
                                                    | "short" -> `L_s88_short
                                                    | _ -> assert false
                                                let (set_dayPeriod :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ] -> 
                                                      unit)
                                                  =
                                                  fun (x2892 : 'tags this) ->
                                                    fun
                                                      (x2893 :
                                                        [ `L_s55_long 
                                                        | `L_s67_narrow 
                                                        | `L_s88_short ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2892) "dayPeriod"
                                                        (match x2893 with
                                                         | `L_s55_long ->
                                                             Ojs.string_to_js
                                                               "long"
                                                         | `L_s67_narrow ->
                                                             Ojs.string_to_js
                                                               "narrow"
                                                         | `L_s88_short ->
                                                             Ojs.string_to_js
                                                               "short")
                                                let (get_fractionalSecondDigits
                                                  :
                                                  'tags this ->
                                                    [ `L_n_0  | `L_n_1 
                                                    | `L_n_2  | `L_n_3 ])
                                                  =
                                                  fun (x2895 : 'tags this) ->
                                                    let x2897 =
                                                      Ojs.get_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2895)
                                                        "fractionalSecondDigits" in
                                                    match Ojs.int_of_js x2897
                                                    with
                                                    | 0 -> `L_n_0
                                                    | 1 -> `L_n_1
                                                    | 2 -> `L_n_2
                                                    | 3 -> `L_n_3
                                                    | _ -> assert false
                                                let (set_fractionalSecondDigits
                                                  :
                                                  'tags this ->
                                                    [ `L_n_0  | `L_n_1 
                                                    | `L_n_2  | `L_n_3 ] ->
                                                      unit)
                                                  =
                                                  fun (x2898 : 'tags this) ->
                                                    fun
                                                      (x2899 :
                                                        [ `L_n_0  | `L_n_1 
                                                        | `L_n_2  | `L_n_3 ])
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2898)
                                                        "fractionalSecondDigits"
                                                        (match x2899 with
                                                         | `L_n_0 ->
                                                             Ojs.int_to_js 0
                                                         | `L_n_1 ->
                                                             Ojs.int_to_js 1
                                                         | `L_n_2 ->
                                                             Ojs.int_to_js 2
                                                         | `L_n_3 ->
                                                             Ojs.int_to_js 3)
                                                let cast_from = Obj.magic
                                              end
                                            module DateTimeFormatPartTypes =
                                              struct
                                                type t =
                                                  [ `L_s101_year 
                                                  | `L_s29_day 
                                                  | `L_s30_dayPeriod 
                                                  | `L_s35_era 
                                                  | `L_s49_hour 
                                                  | `L_s54_literal 
                                                  | `L_s61_minute 
                                                  | `L_s63_month 
                                                  | `L_s86_second 
                                                  | `L_s92_timeZoneName 
                                                  | `L_s99_weekday ]
                                                let rec t_of_js : Ojs.t -> t
                                                  =
                                                  fun (x2902 : Ojs.t) ->
                                                    let x2903 = x2902 in
                                                    match Ojs.string_of_js
                                                            x2903
                                                    with
                                                    | "year" -> `L_s101_year
                                                    | "day" -> `L_s29_day
                                                    | "dayPeriod" ->
                                                        `L_s30_dayPeriod
                                                    | "era" -> `L_s35_era
                                                    | "hour" -> `L_s49_hour
                                                    | "literal" ->
                                                        `L_s54_literal
                                                    | "minute" ->
                                                        `L_s61_minute
                                                    | "month" -> `L_s63_month
                                                    | "second" ->
                                                        `L_s86_second
                                                    | "timeZoneName" ->
                                                        `L_s92_timeZoneName
                                                    | "weekday" ->
                                                        `L_s99_weekday
                                                    | _ -> assert false
                                                and t_to_js : t -> Ojs.t =
                                                  fun
                                                    (x2901 :
                                                      [ `L_s101_year 
                                                      | `L_s29_day 
                                                      | `L_s30_dayPeriod 
                                                      | `L_s35_era 
                                                      | `L_s49_hour 
                                                      | `L_s54_literal 
                                                      | `L_s61_minute 
                                                      | `L_s63_month 
                                                      | `L_s86_second 
                                                      | `L_s92_timeZoneName 
                                                      | `L_s99_weekday ])
                                                    ->
                                                    match x2901 with
                                                    | `L_s101_year ->
                                                        Ojs.string_to_js
                                                          "year"
                                                    | `L_s29_day ->
                                                        Ojs.string_to_js
                                                          "day"
                                                    | `L_s30_dayPeriod ->
                                                        Ojs.string_to_js
                                                          "dayPeriod"
                                                    | `L_s35_era ->
                                                        Ojs.string_to_js
                                                          "era"
                                                    | `L_s49_hour ->
                                                        Ojs.string_to_js
                                                          "hour"
                                                    | `L_s54_literal ->
                                                        Ojs.string_to_js
                                                          "literal"
                                                    | `L_s61_minute ->
                                                        Ojs.string_to_js
                                                          "minute"
                                                    | `L_s63_month ->
                                                        Ojs.string_to_js
                                                          "month"
                                                    | `L_s86_second ->
                                                        Ojs.string_to_js
                                                          "second"
                                                    | `L_s92_timeZoneName ->
                                                        Ojs.string_to_js
                                                          "timeZoneName"
                                                    | `L_s99_weekday ->
                                                        Ojs.string_to_js
                                                          "weekday"
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2905 : Ojs.t) ->
                                                    t_of_js x2905
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2904 : t) ->
                                                    t_to_js x2904
                                              end
                                            module DateTimeFormatPart =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_DateTimeFormatPart ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2907 : Ojs.t) ->
                                                    t_of_js x2907
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2906 : t) ->
                                                    t_to_js x2906
                                                type tags =
                                                  [
                                                    `Intl_DateTimeFormatPart ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_DateTimeFormatPart
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2910 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2910
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2908 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2908
                                                let (get_type :
                                                  'tags this ->
                                                    DateTimeFormatPartTypes.t)
                                                  =
                                                  fun (x2912 : 'tags this) ->
                                                    DateTimeFormatPartTypes.t_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2912)
                                                         "type")
                                                let (set_type :
                                                  'tags this ->
                                                    DateTimeFormatPartTypes.t
                                                      -> unit)
                                                  =
                                                  fun (x2914 : 'tags this) ->
                                                    fun
                                                      (x2915 :
                                                        DateTimeFormatPartTypes.t)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2914) "type"
                                                        (DateTimeFormatPartTypes.t_to_js
                                                           x2915)
                                                let (get_value :
                                                  'tags this -> string) =
                                                  fun (x2917 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2917)
                                                         "value")
                                                let (set_value :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x2919 : 'tags this) ->
                                                    fun (x2920 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2919) "value"
                                                        (Ojs.string_to_js
                                                           x2920)
                                                let cast_from = Obj.magic
                                              end
                                            module DateTimeFormatOptions =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_DateTimeFormatOptions
                                                      ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x2923 : Ojs.t) ->
                                                    t_of_js x2923
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x2922 : t) ->
                                                    t_to_js x2922
                                                type tags =
                                                  [
                                                    `Intl_DateTimeFormatOptions
                                                      ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_DateTimeFormatOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x2926 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x2926
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x2924 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x2924
                                                let (get_calendar :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x2928 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2928)
                                                         "calendar")
                                                let (set_calendar :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2931 : 'tags this) ->
                                                    fun
                                                      (x2932 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2931) "calendar"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x2932)
                                                let (get_dayPeriod :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x2935 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2937 : Ojs.t) ->
                                                         let x2938 = x2937 in
                                                         match Ojs.string_of_js
                                                                 x2938
                                                         with
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "narrow" ->
                                                             `L_s67_narrow
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2935)
                                                         "dayPeriod")
                                                let (set_dayPeriod :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2939 : 'tags this) ->
                                                    fun
                                                      (x2940 :
                                                        [ `L_s55_long 
                                                        | `L_s67_narrow 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2939) "dayPeriod"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2941 :
                                                                [
                                                                  `L_s55_long 
                                                                | `L_s67_narrow
                                                                     | 
                                                                  `L_s88_short
                                                                    ])
                                                              ->
                                                              match x2941
                                                              with
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s67_narrow
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "narrow"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x2940)
                                                let (get_numberingSystem :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x2943 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2943)
                                                         "numberingSystem")
                                                let (set_numberingSystem :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x2946 : 'tags this) ->
                                                    fun
                                                      (x2947 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2946)
                                                        "numberingSystem"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x2947)
                                                let (get_dateStyle :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x2950 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2952 : Ojs.t) ->
                                                         let x2953 = x2952 in
                                                         match Ojs.string_of_js
                                                                 x2953
                                                         with
                                                         | "full" ->
                                                             `L_s43_full
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "medium" ->
                                                             `L_s59_medium
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2950)
                                                         "dateStyle")
                                                let (set_dateStyle :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2954 : 'tags this) ->
                                                    fun
                                                      (x2955 :
                                                        [ `L_s43_full 
                                                        | `L_s55_long 
                                                        | `L_s59_medium 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2954) "dateStyle"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2956 :
                                                                [
                                                                  `L_s43_full 
                                                                | `L_s55_long 
                                                                | `L_s59_medium
                                                                     | 
                                                                  `L_s88_short
                                                                    ])
                                                              ->
                                                              match x2956
                                                              with
                                                              | `L_s43_full
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "full"
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s59_medium
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "medium"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x2955)
                                                let (get_timeStyle :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x2958 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2960 : Ojs.t) ->
                                                         let x2961 = x2960 in
                                                         match Ojs.string_of_js
                                                                 x2961
                                                         with
                                                         | "full" ->
                                                             `L_s43_full
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "medium" ->
                                                             `L_s59_medium
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2958)
                                                         "timeStyle")
                                                let (set_timeStyle :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2962 : 'tags this) ->
                                                    fun
                                                      (x2963 :
                                                        [ `L_s43_full 
                                                        | `L_s55_long 
                                                        | `L_s59_medium 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2962) "timeStyle"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2964 :
                                                                [
                                                                  `L_s43_full 
                                                                | `L_s55_long 
                                                                | `L_s59_medium
                                                                     | 
                                                                  `L_s88_short
                                                                    ])
                                                              ->
                                                              match x2964
                                                              with
                                                              | `L_s43_full
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "full"
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s59_medium
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "medium"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x2963)
                                                let (get_hourCycle :
                                                  'tags this ->
                                                    [ `L_s45_h11 
                                                    | `L_s46_h12 
                                                    | `L_s47_h23 
                                                    | `L_s48_h24 ]
                                                      or_undefined)
                                                  =
                                                  fun (x2966 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2968 : Ojs.t) ->
                                                         let x2969 = x2968 in
                                                         match Ojs.string_of_js
                                                                 x2969
                                                         with
                                                         | "h11" ->
                                                             `L_s45_h11
                                                         | "h12" ->
                                                             `L_s46_h12
                                                         | "h23" ->
                                                             `L_s47_h23
                                                         | "h24" ->
                                                             `L_s48_h24
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2966)
                                                         "hourCycle")
                                                let (set_hourCycle :
                                                  'tags this ->
                                                    [ `L_s45_h11 
                                                    | `L_s46_h12 
                                                    | `L_s47_h23 
                                                    | `L_s48_h24 ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2970 : 'tags this) ->
                                                    fun
                                                      (x2971 :
                                                        [ `L_s45_h11 
                                                        | `L_s46_h12 
                                                        | `L_s47_h23 
                                                        | `L_s48_h24 ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2970) "hourCycle"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2972 :
                                                                [ `L_s45_h11 
                                                                | `L_s46_h12 
                                                                | `L_s47_h23 
                                                                | `L_s48_h24 ])
                                                              ->
                                                              match x2972
                                                              with
                                                              | `L_s45_h11 ->
                                                                  Ojs.string_to_js
                                                                    "h11"
                                                              | `L_s46_h12 ->
                                                                  Ojs.string_to_js
                                                                    "h12"
                                                              | `L_s47_h23 ->
                                                                  Ojs.string_to_js
                                                                    "h23"
                                                              | `L_s48_h24 ->
                                                                  Ojs.string_to_js
                                                                    "h24")
                                                           x2971)
                                                let (get_localeMatcher :
                                                  'tags this ->
                                                    [ `L_s24_best_fit 
                                                    | `L_s56_lookup ]
                                                      or_undefined)
                                                  =
                                                  fun (x2974 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2976 : Ojs.t) ->
                                                         let x2977 = x2976 in
                                                         match Ojs.string_of_js
                                                                 x2977
                                                         with
                                                         | "best fit" ->
                                                             `L_s24_best_fit
                                                         | "lookup" ->
                                                             `L_s56_lookup
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2974)
                                                         "localeMatcher")
                                                let (set_localeMatcher :
                                                  'tags this ->
                                                    [ `L_s24_best_fit 
                                                    | `L_s56_lookup ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2978 : 'tags this) ->
                                                    fun
                                                      (x2979 :
                                                        [ `L_s24_best_fit 
                                                        | `L_s56_lookup ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2978)
                                                        "localeMatcher"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2980 :
                                                                [
                                                                  `L_s24_best_fit
                                                                     | 
                                                                  `L_s56_lookup
                                                                    ])
                                                              ->
                                                              match x2980
                                                              with
                                                              | `L_s24_best_fit
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "best fit"
                                                              | `L_s56_lookup
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "lookup")
                                                           x2979)
                                                let (get_weekday :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x2982 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2984 : Ojs.t) ->
                                                         let x2985 = x2984 in
                                                         match Ojs.string_of_js
                                                                 x2985
                                                         with
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "narrow" ->
                                                             `L_s67_narrow
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2982)
                                                         "weekday")
                                                let (set_weekday :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2986 : 'tags this) ->
                                                    fun
                                                      (x2987 :
                                                        [ `L_s55_long 
                                                        | `L_s67_narrow 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2986) "weekday"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2988 :
                                                                [
                                                                  `L_s55_long 
                                                                | `L_s67_narrow
                                                                     | 
                                                                  `L_s88_short
                                                                    ])
                                                              ->
                                                              match x2988
                                                              with
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s67_narrow
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "narrow"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x2987)
                                                let (get_era :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x2990 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x2992 : Ojs.t) ->
                                                         let x2993 = x2992 in
                                                         match Ojs.string_of_js
                                                                 x2993
                                                         with
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "narrow" ->
                                                             `L_s67_narrow
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2990)
                                                         "era")
                                                let (set_era :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x2994 : 'tags this) ->
                                                    fun
                                                      (x2995 :
                                                        [ `L_s55_long 
                                                        | `L_s67_narrow 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x2994) "era"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x2996 :
                                                                [
                                                                  `L_s55_long 
                                                                | `L_s67_narrow
                                                                     | 
                                                                  `L_s88_short
                                                                    ])
                                                              ->
                                                              match x2996
                                                              with
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s67_narrow
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "narrow"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x2995)
                                                let (get_year :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s72_numeric ]
                                                      or_undefined)
                                                  =
                                                  fun (x2998 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3000 : Ojs.t) ->
                                                         let x3001 = x3000 in
                                                         match Ojs.string_of_js
                                                                 x3001
                                                         with
                                                         | "2-digit" ->
                                                             `L_s0_2_digit
                                                         | "numeric" ->
                                                             `L_s72_numeric
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x2998)
                                                         "year")
                                                let (set_year :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s72_numeric ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3002 : 'tags this) ->
                                                    fun
                                                      (x3003 :
                                                        [ `L_s0_2_digit 
                                                        | `L_s72_numeric ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3002) "year"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3004 :
                                                                [
                                                                  `L_s0_2_digit
                                                                     | 
                                                                  `L_s72_numeric
                                                                    ])
                                                              ->
                                                              match x3004
                                                              with
                                                              | `L_s0_2_digit
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "2-digit"
                                                              | `L_s72_numeric
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "numeric")
                                                           x3003)
                                                let (get_month :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s72_numeric 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x3006 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3008 : Ojs.t) ->
                                                         let x3009 = x3008 in
                                                         match Ojs.string_of_js
                                                                 x3009
                                                         with
                                                         | "2-digit" ->
                                                             `L_s0_2_digit
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "narrow" ->
                                                             `L_s67_narrow
                                                         | "numeric" ->
                                                             `L_s72_numeric
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3006)
                                                         "month")
                                                let (set_month :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s72_numeric 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3010 : 'tags this) ->
                                                    fun
                                                      (x3011 :
                                                        [ `L_s0_2_digit 
                                                        | `L_s55_long 
                                                        | `L_s67_narrow 
                                                        | `L_s72_numeric 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3010) "month"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3012 :
                                                                [
                                                                  `L_s0_2_digit
                                                                     | 
                                                                  `L_s55_long 
                                                                | `L_s67_narrow
                                                                     | 
                                                                  `L_s72_numeric
                                                                     | 
                                                                  `L_s88_short
                                                                    ])
                                                              ->
                                                              match x3012
                                                              with
                                                              | `L_s0_2_digit
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "2-digit"
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s67_narrow
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "narrow"
                                                              | `L_s72_numeric
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "numeric"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x3011)
                                                let (get_day :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s72_numeric ]
                                                      or_undefined)
                                                  =
                                                  fun (x3014 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3016 : Ojs.t) ->
                                                         let x3017 = x3016 in
                                                         match Ojs.string_of_js
                                                                 x3017
                                                         with
                                                         | "2-digit" ->
                                                             `L_s0_2_digit
                                                         | "numeric" ->
                                                             `L_s72_numeric
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3014)
                                                         "day")
                                                let (set_day :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s72_numeric ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3018 : 'tags this) ->
                                                    fun
                                                      (x3019 :
                                                        [ `L_s0_2_digit 
                                                        | `L_s72_numeric ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3018) "day"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3020 :
                                                                [
                                                                  `L_s0_2_digit
                                                                     | 
                                                                  `L_s72_numeric
                                                                    ])
                                                              ->
                                                              match x3020
                                                              with
                                                              | `L_s0_2_digit
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "2-digit"
                                                              | `L_s72_numeric
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "numeric")
                                                           x3019)
                                                let (get_hour :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s72_numeric ]
                                                      or_undefined)
                                                  =
                                                  fun (x3022 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3024 : Ojs.t) ->
                                                         let x3025 = x3024 in
                                                         match Ojs.string_of_js
                                                                 x3025
                                                         with
                                                         | "2-digit" ->
                                                             `L_s0_2_digit
                                                         | "numeric" ->
                                                             `L_s72_numeric
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3022)
                                                         "hour")
                                                let (set_hour :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s72_numeric ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3026 : 'tags this) ->
                                                    fun
                                                      (x3027 :
                                                        [ `L_s0_2_digit 
                                                        | `L_s72_numeric ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3026) "hour"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3028 :
                                                                [
                                                                  `L_s0_2_digit
                                                                     | 
                                                                  `L_s72_numeric
                                                                    ])
                                                              ->
                                                              match x3028
                                                              with
                                                              | `L_s0_2_digit
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "2-digit"
                                                              | `L_s72_numeric
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "numeric")
                                                           x3027)
                                                let (get_minute :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s72_numeric ]
                                                      or_undefined)
                                                  =
                                                  fun (x3030 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3032 : Ojs.t) ->
                                                         let x3033 = x3032 in
                                                         match Ojs.string_of_js
                                                                 x3033
                                                         with
                                                         | "2-digit" ->
                                                             `L_s0_2_digit
                                                         | "numeric" ->
                                                             `L_s72_numeric
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3030)
                                                         "minute")
                                                let (set_minute :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s72_numeric ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3034 : 'tags this) ->
                                                    fun
                                                      (x3035 :
                                                        [ `L_s0_2_digit 
                                                        | `L_s72_numeric ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3034) "minute"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3036 :
                                                                [
                                                                  `L_s0_2_digit
                                                                     | 
                                                                  `L_s72_numeric
                                                                    ])
                                                              ->
                                                              match x3036
                                                              with
                                                              | `L_s0_2_digit
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "2-digit"
                                                              | `L_s72_numeric
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "numeric")
                                                           x3035)
                                                let (get_second :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s72_numeric ]
                                                      or_undefined)
                                                  =
                                                  fun (x3038 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3040 : Ojs.t) ->
                                                         let x3041 = x3040 in
                                                         match Ojs.string_of_js
                                                                 x3041
                                                         with
                                                         | "2-digit" ->
                                                             `L_s0_2_digit
                                                         | "numeric" ->
                                                             `L_s72_numeric
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3038)
                                                         "second")
                                                let (set_second :
                                                  'tags this ->
                                                    [ `L_s0_2_digit 
                                                    | `L_s72_numeric ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3042 : 'tags this) ->
                                                    fun
                                                      (x3043 :
                                                        [ `L_s0_2_digit 
                                                        | `L_s72_numeric ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3042) "second"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3044 :
                                                                [
                                                                  `L_s0_2_digit
                                                                     | 
                                                                  `L_s72_numeric
                                                                    ])
                                                              ->
                                                              match x3044
                                                              with
                                                              | `L_s0_2_digit
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "2-digit"
                                                              | `L_s72_numeric
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "numeric")
                                                           x3043)
                                                let (get_timeZoneName :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x3046 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3048 : Ojs.t) ->
                                                         let x3049 = x3048 in
                                                         match Ojs.string_of_js
                                                                 x3049
                                                         with
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3046)
                                                         "timeZoneName")
                                                let (set_timeZoneName :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3050 : 'tags this) ->
                                                    fun
                                                      (x3051 :
                                                        [ `L_s55_long 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3050)
                                                        "timeZoneName"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3052 :
                                                                [
                                                                  `L_s55_long 
                                                                | `L_s88_short
                                                                    ])
                                                              ->
                                                              match x3052
                                                              with
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x3051)
                                                let (get_formatMatcher :
                                                  'tags this ->
                                                    [ `L_s23_basic 
                                                    | `L_s24_best_fit ]
                                                      or_undefined)
                                                  =
                                                  fun (x3054 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3056 : Ojs.t) ->
                                                         let x3057 = x3056 in
                                                         match Ojs.string_of_js
                                                                 x3057
                                                         with
                                                         | "basic" ->
                                                             `L_s23_basic
                                                         | "best fit" ->
                                                             `L_s24_best_fit
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3054)
                                                         "formatMatcher")
                                                let (set_formatMatcher :
                                                  'tags this ->
                                                    [ `L_s23_basic 
                                                    | `L_s24_best_fit ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3058 : 'tags this) ->
                                                    fun
                                                      (x3059 :
                                                        [ `L_s23_basic 
                                                        | `L_s24_best_fit ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3058)
                                                        "formatMatcher"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3060 :
                                                                [
                                                                  `L_s23_basic
                                                                     | 
                                                                  `L_s24_best_fit
                                                                    ])
                                                              ->
                                                              match x3060
                                                              with
                                                              | `L_s23_basic
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "basic"
                                                              | `L_s24_best_fit
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "best fit")
                                                           x3059)
                                                let (get_hour12 :
                                                  'tags this ->
                                                    bool or_undefined)
                                                  =
                                                  fun (x3062 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.bool_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3062)
                                                         "hour12")
                                                let (set_hour12 :
                                                  'tags this ->
                                                    bool or_undefined -> unit)
                                                  =
                                                  fun (x3065 : 'tags this) ->
                                                    fun
                                                      (x3066 :
                                                        bool or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3065) "hour12"
                                                        (or_undefined_to_js
                                                           Ojs.bool_to_js
                                                           x3066)
                                                let (get_timeZone :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x3069 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3069)
                                                         "timeZone")
                                                let (set_timeZone :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x3072 : 'tags this) ->
                                                    fun
                                                      (x3073 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3072) "timeZone"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x3073)
                                                let (get_formatMatcher' :
                                                  'tags this ->
                                                    [ `L_s23_basic 
                                                    | `L_s24_best_fit ]
                                                      or_undefined)
                                                  =
                                                  fun (x3076 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3078 : Ojs.t) ->
                                                         let x3079 = x3078 in
                                                         match Ojs.string_of_js
                                                                 x3079
                                                         with
                                                         | "basic" ->
                                                             `L_s23_basic
                                                         | "best fit" ->
                                                             `L_s24_best_fit
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3076)
                                                         "formatMatcher")
                                                let (set_formatMatcher' :
                                                  'tags this ->
                                                    [ `L_s23_basic 
                                                    | `L_s24_best_fit ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3080 : 'tags this) ->
                                                    fun
                                                      (x3081 :
                                                        [ `L_s23_basic 
                                                        | `L_s24_best_fit ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3080)
                                                        "formatMatcher"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3082 :
                                                                [
                                                                  `L_s23_basic
                                                                     | 
                                                                  `L_s24_best_fit
                                                                    ])
                                                              ->
                                                              match x3082
                                                              with
                                                              | `L_s23_basic
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "basic"
                                                              | `L_s24_best_fit
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "best fit")
                                                           x3081)
                                                let (get_dateStyle' :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x3084 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3086 : Ojs.t) ->
                                                         let x3087 = x3086 in
                                                         match Ojs.string_of_js
                                                                 x3087
                                                         with
                                                         | "full" ->
                                                             `L_s43_full
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "medium" ->
                                                             `L_s59_medium
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3084)
                                                         "dateStyle")
                                                let (set_dateStyle' :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3088 : 'tags this) ->
                                                    fun
                                                      (x3089 :
                                                        [ `L_s43_full 
                                                        | `L_s55_long 
                                                        | `L_s59_medium 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3088) "dateStyle"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3090 :
                                                                [
                                                                  `L_s43_full 
                                                                | `L_s55_long 
                                                                | `L_s59_medium
                                                                     | 
                                                                  `L_s88_short
                                                                    ])
                                                              ->
                                                              match x3090
                                                              with
                                                              | `L_s43_full
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "full"
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s59_medium
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "medium"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x3089)
                                                let (get_timeStyle' :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x3092 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3094 : Ojs.t) ->
                                                         let x3095 = x3094 in
                                                         match Ojs.string_of_js
                                                                 x3095
                                                         with
                                                         | "full" ->
                                                             `L_s43_full
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "medium" ->
                                                             `L_s59_medium
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3092)
                                                         "timeStyle")
                                                let (set_timeStyle' :
                                                  'tags this ->
                                                    [ `L_s43_full 
                                                    | `L_s55_long 
                                                    | `L_s59_medium 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3096 : 'tags this) ->
                                                    fun
                                                      (x3097 :
                                                        [ `L_s43_full 
                                                        | `L_s55_long 
                                                        | `L_s59_medium 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3096) "timeStyle"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3098 :
                                                                [
                                                                  `L_s43_full 
                                                                | `L_s55_long 
                                                                | `L_s59_medium
                                                                     | 
                                                                  `L_s88_short
                                                                    ])
                                                              ->
                                                              match x3098
                                                              with
                                                              | `L_s43_full
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "full"
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s59_medium
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "medium"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x3097)
                                                let (get_dayPeriod' :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ]
                                                      or_undefined)
                                                  =
                                                  fun (x3100 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3102 : Ojs.t) ->
                                                         let x3103 = x3102 in
                                                         match Ojs.string_of_js
                                                                 x3103
                                                         with
                                                         | "long" ->
                                                             `L_s55_long
                                                         | "narrow" ->
                                                             `L_s67_narrow
                                                         | "short" ->
                                                             `L_s88_short
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3100)
                                                         "dayPeriod")
                                                let (set_dayPeriod' :
                                                  'tags this ->
                                                    [ `L_s55_long 
                                                    | `L_s67_narrow 
                                                    | `L_s88_short ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3104 : 'tags this) ->
                                                    fun
                                                      (x3105 :
                                                        [ `L_s55_long 
                                                        | `L_s67_narrow 
                                                        | `L_s88_short ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3104) "dayPeriod"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3106 :
                                                                [
                                                                  `L_s55_long 
                                                                | `L_s67_narrow
                                                                     | 
                                                                  `L_s88_short
                                                                    ])
                                                              ->
                                                              match x3106
                                                              with
                                                              | `L_s55_long
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "long"
                                                              | `L_s67_narrow
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "narrow"
                                                              | `L_s88_short
                                                                  ->
                                                                  Ojs.string_to_js
                                                                    "short")
                                                           x3105)
                                                let (get_fractionalSecondDigits
                                                  :
                                                  'tags this ->
                                                    [ `L_n_0  | `L_n_1 
                                                    | `L_n_2  | `L_n_3 ]
                                                      or_undefined)
                                                  =
                                                  fun (x3108 : 'tags this) ->
                                                    or_undefined_of_js
                                                      (fun (x3110 : Ojs.t) ->
                                                         let x3111 = x3110 in
                                                         match Ojs.int_of_js
                                                                 x3111
                                                         with
                                                         | 0 -> `L_n_0
                                                         | 1 -> `L_n_1
                                                         | 2 -> `L_n_2
                                                         | 3 -> `L_n_3
                                                         | _ -> assert false)
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3108)
                                                         "fractionalSecondDigits")
                                                let (set_fractionalSecondDigits
                                                  :
                                                  'tags this ->
                                                    [ `L_n_0  | `L_n_1 
                                                    | `L_n_2  | `L_n_3 ]
                                                      or_undefined -> 
                                                      unit)
                                                  =
                                                  fun (x3112 : 'tags this) ->
                                                    fun
                                                      (x3113 :
                                                        [ `L_n_0  | `L_n_1 
                                                        | `L_n_2  | `L_n_3 ]
                                                          or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3112)
                                                        "fractionalSecondDigits"
                                                        (or_undefined_to_js
                                                           (fun
                                                              (x3114 :
                                                                [ `L_n_0 
                                                                | `L_n_1 
                                                                | `L_n_2 
                                                                | `L_n_3 ])
                                                              ->
                                                              match x3114
                                                              with
                                                              | `L_n_0 ->
                                                                  Ojs.int_to_js
                                                                    0
                                                              | `L_n_1 ->
                                                                  Ojs.int_to_js
                                                                    1
                                                              | `L_n_2 ->
                                                                  Ojs.int_to_js
                                                                    2
                                                              | `L_n_3 ->
                                                                  Ojs.int_to_js
                                                                    3) x3113)
                                                let cast_from = Obj.magic
                                              end
                                            module DateTimeFormat =
                                              struct
                                                type t =
                                                  [ `Intl_DateTimeFormat ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x3117 : Ojs.t) ->
                                                    t_of_js x3117
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x3116 : t) ->
                                                    t_to_js x3116
                                                type tags =
                                                  [ `Intl_DateTimeFormat ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_DateTimeFormat
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x3120 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x3120
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x3118 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x3118
                                                let (formatToParts :
                                                  'tags this ->
                                                    ?date:Date.t or_number ->
                                                      unit ->
                                                        DateTimeFormatPart.t
                                                          list)
                                                  =
                                                  fun (x3126 : 'tags this) ->
                                                    fun
                                                      ?date:(x3122 :
                                                              Date.t
                                                                or_number
                                                                option)
                                                      ->
                                                      fun () ->
                                                        Ojs.list_of_js
                                                          DateTimeFormatPart.t_of_js
                                                          (let x3128 =
                                                             this_to_js
                                                               Obj.magic
                                                               x3126 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x3128
                                                                "formatToParts")
                                                             "apply"
                                                             [|x3128;((
                                                               let x3123 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               (match x3122
                                                                with
                                                                | Some x3124
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x3123
                                                                    "push"
                                                                    [|(
                                                                    or_number_to_js
                                                                    Date.t_to_js
                                                                    x3124)|])
                                                                | None -> ());
                                                               x3123))|])
                                                let (format :
                                                  'tags this ->
                                                    ?date:Date.t or_number ->
                                                      unit -> string)
                                                  =
                                                  fun (x3134 : 'tags this) ->
                                                    fun
                                                      ?date:(x3130 :
                                                              Date.t
                                                                or_number
                                                                option)
                                                      ->
                                                      fun () ->
                                                        Ojs.string_of_js
                                                          (let x3136 =
                                                             this_to_js
                                                               Obj.magic
                                                               x3134 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x3136
                                                                "format")
                                                             "apply"
                                                             [|x3136;((
                                                               let x3131 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               (match x3130
                                                                with
                                                                | Some x3132
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x3131
                                                                    "push"
                                                                    [|(
                                                                    or_number_to_js
                                                                    Date.t_to_js
                                                                    x3132)|])
                                                                | None -> ());
                                                               x3131))|])
                                                let (resolvedOptions :
                                                  'tags this ->
                                                    ResolvedDateTimeFormatOptions.t)
                                                  =
                                                  fun (x3137 : 'tags this) ->
                                                    ResolvedDateTimeFormatOptions.t_of_js
                                                      (Ojs.call
                                                         (this_to_js
                                                            Obj.magic x3137)
                                                         "resolvedOptions"
                                                         [||])
                                                let cast_from = Obj.magic
                                                let (create :
                                                  ?locales:string list
                                                    or_string ->
                                                    ?options:DateTimeFormatOptions.t
                                                      -> unit -> t)
                                                  =
                                                  fun
                                                    ?locales:(x3139 :
                                                               string list
                                                                 or_string
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x3140 :
                                                                 DateTimeFormatOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.new_obj_arr
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "DateTimeFormat")
                                                             (let x3141 =
                                                                Ojs.new_obj
                                                                  (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                  [||] in
                                                              (match x3139
                                                               with
                                                               | Some x3143
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x3141
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x3144 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x3144)
                                                                    x3143)|])
                                                               | None -> ());
                                                              (match x3140
                                                               with
                                                               | Some x3142
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x3141
                                                                    "push"
                                                                    [|(
                                                                    DateTimeFormatOptions.t_to_js
                                                                    x3142)|])
                                                               | None -> ());
                                                              x3141))
                                                let (invoke :
                                                  ?locales:string list
                                                    or_string ->
                                                    ?options:DateTimeFormatOptions.t
                                                      -> unit -> t)
                                                  =
                                                  fun
                                                    ?locales:(x3146 :
                                                               string list
                                                                 or_string
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x3147 :
                                                                 DateTimeFormatOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "DateTimeFormat")
                                                             "apply"
                                                             [|Ojs.null;((
                                                               let x3148 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               (match x3146
                                                                with
                                                                | Some x3150
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x3148
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x3151 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x3151)
                                                                    x3150)|])
                                                                | None -> ());
                                                               (match x3147
                                                                with
                                                                | Some x3149
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x3148
                                                                    "push"
                                                                    [|(
                                                                    DateTimeFormatOptions.t_to_js
                                                                    x3149)|])
                                                                | None -> ());
                                                               x3148))|])
                                                let (supportedLocalesOf :
                                                  locales:string list
                                                    or_string ->
                                                    ?options:DateTimeFormatOptions.t
                                                      -> unit -> string list)
                                                  =
                                                  fun
                                                    ~locales:(x3153 :
                                                               string list
                                                                 or_string)
                                                    ->
                                                    fun
                                                      ?options:(x3154 :
                                                                 DateTimeFormatOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        Ojs.list_of_js
                                                          Ojs.string_of_js
                                                          (let x3159 =
                                                             Ojs.get_prop_ascii
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "Intl")
                                                               "DateTimeFormat" in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x3159
                                                                "supportedLocalesOf")
                                                             "apply"
                                                             [|x3159;((
                                                               let x3155 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x3155
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x3157 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x3157)
                                                                    x3153)|]);
                                                               (match x3154
                                                                with
                                                                | Some x3156
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x3155
                                                                    "push"
                                                                    [|(
                                                                    DateTimeFormatOptions.t_to_js
                                                                    x3156)|])
                                                                | None -> ());
                                                               x3155))|])
                                              end
                                            module ResolvedCollatorOptions =
                                              struct
                                                type t =
                                                  [
                                                    `Intl_ResolvedCollatorOptions
                                                      ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x3162 : Ojs.t) ->
                                                    t_of_js x3162
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x3161 : t) ->
                                                    t_to_js x3161
                                                type tags =
                                                  [
                                                    `Intl_ResolvedCollatorOptions
                                                      ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_ResolvedCollatorOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x3165 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x3165
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x3163 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x3163
                                                let (get_locale :
                                                  'tags this -> string) =
                                                  fun (x3167 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3167)
                                                         "locale")
                                                let (set_locale :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x3169 : 'tags this) ->
                                                    fun (x3170 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3169) "locale"
                                                        (Ojs.string_to_js
                                                           x3170)
                                                let (get_usage :
                                                  'tags this -> string) =
                                                  fun (x3172 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3172)
                                                         "usage")
                                                let (set_usage :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x3174 : 'tags this) ->
                                                    fun (x3175 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3174) "usage"
                                                        (Ojs.string_to_js
                                                           x3175)
                                                let (get_sensitivity :
                                                  'tags this -> string) =
                                                  fun (x3177 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3177)
                                                         "sensitivity")
                                                let (set_sensitivity :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x3179 : 'tags this) ->
                                                    fun (x3180 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3179)
                                                        "sensitivity"
                                                        (Ojs.string_to_js
                                                           x3180)
                                                let (get_ignorePunctuation :
                                                  'tags this -> bool) =
                                                  fun (x3182 : 'tags this) ->
                                                    Ojs.bool_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3182)
                                                         "ignorePunctuation")
                                                let (set_ignorePunctuation :
                                                  'tags this -> bool -> unit)
                                                  =
                                                  fun (x3184 : 'tags this) ->
                                                    fun (x3185 : bool) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3184)
                                                        "ignorePunctuation"
                                                        (Ojs.bool_to_js x3185)
                                                let (get_collation :
                                                  'tags this -> string) =
                                                  fun (x3187 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3187)
                                                         "collation")
                                                let (set_collation :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x3189 : 'tags this) ->
                                                    fun (x3190 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3189) "collation"
                                                        (Ojs.string_to_js
                                                           x3190)
                                                let (get_caseFirst :
                                                  'tags this -> string) =
                                                  fun (x3192 : 'tags this) ->
                                                    Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3192)
                                                         "caseFirst")
                                                let (set_caseFirst :
                                                  'tags this ->
                                                    string -> unit)
                                                  =
                                                  fun (x3194 : 'tags this) ->
                                                    fun (x3195 : string) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3194) "caseFirst"
                                                        (Ojs.string_to_js
                                                           x3195)
                                                let (get_numeric :
                                                  'tags this -> bool) =
                                                  fun (x3197 : 'tags this) ->
                                                    Ojs.bool_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3197)
                                                         "numeric")
                                                let (set_numeric :
                                                  'tags this -> bool -> unit)
                                                  =
                                                  fun (x3199 : 'tags this) ->
                                                    fun (x3200 : bool) ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3199) "numeric"
                                                        (Ojs.bool_to_js x3200)
                                                let cast_from = Obj.magic
                                              end
                                            module CollatorOptions =
                                              struct
                                                type t =
                                                  [ `Intl_CollatorOptions ]
                                                    intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x3203 : Ojs.t) ->
                                                    t_of_js x3203
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x3202 : t) ->
                                                    t_to_js x3202
                                                type tags =
                                                  [ `Intl_CollatorOptions ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_CollatorOptions
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x3206 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x3206
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x3204 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x3204
                                                let (get_usage :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x3208 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3208)
                                                         "usage")
                                                let (set_usage :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x3211 : 'tags this) ->
                                                    fun
                                                      (x3212 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3211) "usage"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x3212)
                                                let (get_localeMatcher :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x3215 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3215)
                                                         "localeMatcher")
                                                let (set_localeMatcher :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x3218 : 'tags this) ->
                                                    fun
                                                      (x3219 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3218)
                                                        "localeMatcher"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x3219)
                                                let (get_numeric :
                                                  'tags this ->
                                                    bool or_undefined)
                                                  =
                                                  fun (x3222 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.bool_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3222)
                                                         "numeric")
                                                let (set_numeric :
                                                  'tags this ->
                                                    bool or_undefined -> unit)
                                                  =
                                                  fun (x3225 : 'tags this) ->
                                                    fun
                                                      (x3226 :
                                                        bool or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3225) "numeric"
                                                        (or_undefined_to_js
                                                           Ojs.bool_to_js
                                                           x3226)
                                                let (get_caseFirst :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x3229 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3229)
                                                         "caseFirst")
                                                let (set_caseFirst :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x3232 : 'tags this) ->
                                                    fun
                                                      (x3233 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3232) "caseFirst"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x3233)
                                                let (get_sensitivity :
                                                  'tags this ->
                                                    string or_undefined)
                                                  =
                                                  fun (x3236 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.string_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3236)
                                                         "sensitivity")
                                                let (set_sensitivity :
                                                  'tags this ->
                                                    string or_undefined ->
                                                      unit)
                                                  =
                                                  fun (x3239 : 'tags this) ->
                                                    fun
                                                      (x3240 :
                                                        string or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3239)
                                                        "sensitivity"
                                                        (or_undefined_to_js
                                                           Ojs.string_to_js
                                                           x3240)
                                                let (get_ignorePunctuation :
                                                  'tags this ->
                                                    bool or_undefined)
                                                  =
                                                  fun (x3243 : 'tags this) ->
                                                    or_undefined_of_js
                                                      Ojs.bool_of_js
                                                      (Ojs.get_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x3243)
                                                         "ignorePunctuation")
                                                let (set_ignorePunctuation :
                                                  'tags this ->
                                                    bool or_undefined -> unit)
                                                  =
                                                  fun (x3246 : 'tags this) ->
                                                    fun
                                                      (x3247 :
                                                        bool or_undefined)
                                                      ->
                                                      Ojs.set_prop_ascii
                                                        (this_to_js Obj.magic
                                                           x3246)
                                                        "ignorePunctuation"
                                                        (or_undefined_to_js
                                                           Ojs.bool_to_js
                                                           x3247)
                                                let cast_from = Obj.magic
                                              end
                                            module Collator =
                                              struct
                                                type t =
                                                  [ `Intl_Collator ] intf
                                                let rec t_of_js : Ojs.t -> t
                                                  = Obj.magic
                                                and t_to_js : t -> Ojs.t =
                                                  Obj.magic
                                                type t_0 = t
                                                let rec t_0_of_js :
                                                  Ojs.t -> t_0 =
                                                  fun (x3251 : Ojs.t) ->
                                                    t_of_js x3251
                                                and t_0_to_js : t_0 -> Ojs.t
                                                  =
                                                  fun (x3250 : t) ->
                                                    t_to_js x3250
                                                type tags =
                                                  [ `Intl_Collator ]
                                                type tags_0 = tags
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `Intl_Collator
                                                                  ]
                                                let rec this_of_js :
                                                  'tags .
                                                    (Ojs.t -> 'tags) ->
                                                      Ojs.t -> 'tags this
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_of_js :
                                                      Ojs.t -> __tags)
                                                    ->
                                                    fun (x3254 : Ojs.t) ->
                                                      intf_of_js __tags_of_js
                                                        x3254
                                                and this_to_js :
                                                  'tags .
                                                    ('tags -> Ojs.t) ->
                                                      'tags this -> Ojs.t
                                                  = fun (type __tags) ->
                                                  fun
                                                    (__tags_to_js :
                                                      __tags -> Ojs.t)
                                                    ->
                                                    fun (x3252 : __tags intf)
                                                      ->
                                                      intf_to_js __tags_to_js
                                                        x3252
                                                let (compare :
                                                  'tags this ->
                                                    x:string ->
                                                      y:string -> float)
                                                  =
                                                  fun (x3258 : 'tags this) ->
                                                    fun ~x:(x3256 : string)
                                                      ->
                                                      fun ~y:(x3257 : string)
                                                        ->
                                                        Ojs.float_of_js
                                                          (Ojs.call
                                                             (this_to_js
                                                                Obj.magic
                                                                x3258)
                                                             "compare"
                                                             [|(Ojs.string_to_js
                                                                  x3256);(
                                                               Ojs.string_to_js
                                                                 x3257)|])
                                                let (resolvedOptions :
                                                  'tags this ->
                                                    ResolvedCollatorOptions.t)
                                                  =
                                                  fun (x3260 : 'tags this) ->
                                                    ResolvedCollatorOptions.t_of_js
                                                      (Ojs.call
                                                         (this_to_js
                                                            Obj.magic x3260)
                                                         "resolvedOptions"
                                                         [||])
                                                let cast_from = Obj.magic
                                                let (create :
                                                  ?locales:string list
                                                    or_string ->
                                                    ?options:CollatorOptions.t
                                                      -> unit -> t)
                                                  =
                                                  fun
                                                    ?locales:(x3262 :
                                                               string list
                                                                 or_string
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x3263 :
                                                                 CollatorOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.new_obj_arr
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "Collator")
                                                             (let x3264 =
                                                                Ojs.new_obj
                                                                  (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                  [||] in
                                                              (match x3262
                                                               with
                                                               | Some x3266
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x3264
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x3267 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x3267)
                                                                    x3266)|])
                                                               | None -> ());
                                                              (match x3263
                                                               with
                                                               | Some x3265
                                                                   ->
                                                                   ignore
                                                                    (Ojs.call
                                                                    x3264
                                                                    "push"
                                                                    [|(
                                                                    CollatorOptions.t_to_js
                                                                    x3265)|])
                                                               | None -> ());
                                                              x3264))
                                                let (invoke :
                                                  ?locales:string list
                                                    or_string ->
                                                    ?options:CollatorOptions.t
                                                      -> unit -> t)
                                                  =
                                                  fun
                                                    ?locales:(x3269 :
                                                               string list
                                                                 or_string
                                                                 option)
                                                    ->
                                                    fun
                                                      ?options:(x3270 :
                                                                 CollatorOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        t_of_js
                                                          (Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Intl")
                                                                "Collator")
                                                             "apply"
                                                             [|Ojs.null;((
                                                               let x3271 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               (match x3269
                                                                with
                                                                | Some x3273
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x3271
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x3274 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x3274)
                                                                    x3273)|])
                                                                | None -> ());
                                                               (match x3270
                                                                with
                                                                | Some x3272
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x3271
                                                                    "push"
                                                                    [|(
                                                                    CollatorOptions.t_to_js
                                                                    x3272)|])
                                                                | None -> ());
                                                               x3271))|])
                                                let (supportedLocalesOf :
                                                  locales:string list
                                                    or_string ->
                                                    ?options:CollatorOptions.t
                                                      -> unit -> string list)
                                                  =
                                                  fun
                                                    ~locales:(x3276 :
                                                               string list
                                                                 or_string)
                                                    ->
                                                    fun
                                                      ?options:(x3277 :
                                                                 CollatorOptions.t
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        Ojs.list_of_js
                                                          Ojs.string_of_js
                                                          (let x3282 =
                                                             Ojs.get_prop_ascii
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "Intl")
                                                               "Collator" in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x3282
                                                                "supportedLocalesOf")
                                                             "apply"
                                                             [|x3282;((
                                                               let x3278 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x3278
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x3280 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x3280)
                                                                    x3276)|]);
                                                               (match x3277
                                                                with
                                                                | Some x3279
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x3278
                                                                    "push"
                                                                    [|(
                                                                    CollatorOptions.t_to_js
                                                                    x3279)|])
                                                                | None -> ());
                                                               x3278))|])
                                              end
                                            let (collator :
                                              unit -> AnonymousInterface8.t)
                                              =
                                              fun () ->
                                                AnonymousInterface8.t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Intl")
                                                     "Collator")
                                            let (numberFormat :
                                              unit -> AnonymousInterface10.t)
                                              =
                                              fun () ->
                                                AnonymousInterface10.t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Intl")
                                                     "NumberFormat")
                                            let (dateTimeFormat :
                                              unit -> AnonymousInterface9.t)
                                              =
                                              fun () ->
                                                AnonymousInterface9.t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Intl")
                                                     "DateTimeFormat")
                                            let (pluralRules :
                                              unit -> AnonymousInterface11.t)
                                              =
                                              fun () ->
                                                AnonymousInterface11.t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Intl")
                                                     "PluralRules")
                                            let (relativeTimeFormat :
                                              unit -> AnonymousInterface20.t)
                                              =
                                              fun () ->
                                                AnonymousInterface20.t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Intl")
                                                     "RelativeTimeFormat")
                                            let (locale :
                                              unit -> AnonymousInterface12.t)
                                              =
                                              fun () ->
                                                AnonymousInterface12.t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Intl")
                                                     "Locale")
                                            let (displayNames :
                                              unit -> AnonymousInterface4.t)
                                              =
                                              fun () ->
                                                AnonymousInterface4.t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Intl")
                                                     "DisplayNames")
                                          end
module String =
  struct
    type t =
      [ `ArrayLike of string  | `IterableIterator of string 
      | `Iterator of (string * any * never or_undefined)  | `String ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3285 : Ojs.t) -> t_of_js x3285
    and t_0_to_js : t_0 -> Ojs.t = fun (x3284 : t) -> t_to_js x3284
    type tags =
      [ `ArrayLike of string  | `IterableIterator of string 
      | `Iterator of (string * any * never or_undefined)  | `String ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `String ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3288 : Ojs.t) -> intf_of_js __tags_of_js x3288
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3286 : __tags intf) -> intf_to_js __tags_to_js x3286
    let (replaceAll :
      'tags this ->
        searchValue:RegExp.t or_string -> replaceValue:string -> string)
      =
      fun (x3293 : 'tags this) ->
        fun ~searchValue:(x3290 : RegExp.t or_string) ->
          fun ~replaceValue:(x3292 : string) ->
            Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x3293) "replaceAll"
                 [|(or_string_to_js RegExp.t_to_js x3290);(Ojs.string_to_js
                                                             x3292)|])
    let (replaceAll' :
      'tags this ->
        searchValue:RegExp.t or_string ->
          replacer:(substring:string -> args:any list -> string) -> string)
      =
      fun (x3300 : 'tags this) ->
        fun ~searchValue:(x3295 : RegExp.t or_string) ->
          fun ~replacer:(x3297 : substring:string -> args:any list -> string)
            ->
            Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x3300) "replaceAll"
                 [|(or_string_to_js RegExp.t_to_js x3295);(Ojs.fun_to_js_args
                                                             (fun (x3298 : _)
                                                                ->
                                                                Ojs.string_to_js
                                                                  (x3297
                                                                    ~substring:(
                                                                    Ojs.string_of_js
                                                                    (Ojs.array_get
                                                                    x3298 0))
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x3298 1))))|])
    let (match_ :
      'tags this ->
        matcher:AnonymousInterface13.t -> RegExpMatchArray.t or_null)
      =
      fun (x3303 : 'tags this) ->
        fun ~matcher:(x3302 : AnonymousInterface13.t) ->
          or_null_of_js RegExpMatchArray.t_of_js
            (Ojs.call (this_to_js Obj.magic x3303) "match"
               [|(AnonymousInterface13.t_to_js x3302)|])
    let (replace :
      'tags this ->
        searchValue:AnonymousInterface14.t -> replaceValue:string -> string)
      =
      fun (x3308 : 'tags this) ->
        fun ~searchValue:(x3306 : AnonymousInterface14.t) ->
          fun ~replaceValue:(x3307 : string) ->
            Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x3308) "replace"
                 [|(AnonymousInterface14.t_to_js x3306);(Ojs.string_to_js
                                                           x3307)|])
    let (replace' :
      'tags this ->
        searchValue:AnonymousInterface15.t ->
          replacer:(substring:string -> args:any list -> string) -> string)
      =
      fun (x3314 : 'tags this) ->
        fun ~searchValue:(x3310 : AnonymousInterface15.t) ->
          fun ~replacer:(x3311 : substring:string -> args:any list -> string)
            ->
            Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x3314) "replace"
                 [|(AnonymousInterface15.t_to_js x3310);(Ojs.fun_to_js_args
                                                           (fun (x3312 : _)
                                                              ->
                                                              Ojs.string_to_js
                                                                (x3311
                                                                   ~substring:(
                                                                   Ojs.string_of_js
                                                                    (Ojs.array_get
                                                                    x3312 0))
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x3312 1))))|])
    let (search : 'tags this -> searcher:AnonymousInterface16.t -> float) =
      fun (x3317 : 'tags this) ->
        fun ~searcher:(x3316 : AnonymousInterface16.t) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x3317) "search"
               [|(AnonymousInterface16.t_to_js x3316)|])
    let (split :
      'tags this ->
        splitter:AnonymousInterface17.t ->
          ?limit:float -> unit -> string list)
      =
      fun (x3323 : 'tags this) ->
        fun ~splitter:(x3319 : AnonymousInterface17.t) ->
          fun ?limit:(x3320 : float option) ->
            fun () ->
              Ojs.list_of_js Ojs.string_of_js
                (let x3325 = this_to_js Obj.magic x3323 in
                 Ojs.call (Ojs.get_prop_ascii x3325 "split") "apply"
                   [|x3325;((let x3321 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3321 "push"
                                  [|(AnonymousInterface17.t_to_js x3319)|]);
                             (match x3320 with
                              | Some x3322 ->
                                  ignore
                                    (Ojs.call x3321 "push"
                                       [|(Ojs.float_to_js x3322)|])
                              | None -> ());
                             x3321))|])
    let (padStart :
      'tags this -> maxLength:float -> ?fillString:string -> unit -> string)
      =
      fun (x3331 : 'tags this) ->
        fun ~maxLength:(x3327 : float) ->
          fun ?fillString:(x3328 : string option) ->
            fun () ->
              Ojs.string_of_js
                (let x3333 = this_to_js Obj.magic x3331 in
                 Ojs.call (Ojs.get_prop_ascii x3333 "padStart") "apply"
                   [|x3333;((let x3329 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3329 "push"
                                  [|(Ojs.float_to_js x3327)|]);
                             (match x3328 with
                              | Some x3330 ->
                                  ignore
                                    (Ojs.call x3329 "push"
                                       [|(Ojs.string_to_js x3330)|])
                              | None -> ());
                             x3329))|])
    let (padEnd :
      'tags this -> maxLength:float -> ?fillString:string -> unit -> string)
      =
      fun (x3338 : 'tags this) ->
        fun ~maxLength:(x3334 : float) ->
          fun ?fillString:(x3335 : string option) ->
            fun () ->
              Ojs.string_of_js
                (let x3340 = this_to_js Obj.magic x3338 in
                 Ojs.call (Ojs.get_prop_ascii x3340 "padEnd") "apply"
                   [|x3340;((let x3336 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3336 "push"
                                  [|(Ojs.float_to_js x3334)|]);
                             (match x3335 with
                              | Some x3337 ->
                                  ignore
                                    (Ojs.call x3336 "push"
                                       [|(Ojs.string_to_js x3337)|])
                              | None -> ());
                             x3336))|])
    let (matchAll :
      'tags this -> regexp:RegExp.t -> RegExpMatchArray.t IterableIterator.t)
      =
      fun (x3342 : 'tags this) ->
        fun ~regexp:(x3341 : RegExp.t) ->
          IterableIterator.t_of_js RegExpMatchArray.t_of_js
            (Ojs.call (this_to_js Obj.magic x3342) "matchAll"
               [|(RegExp.t_to_js x3341)|])
    let (codePointAt : 'tags this -> pos:float -> float or_undefined) =
      fun (x3346 : 'tags this) ->
        fun ~pos:(x3345 : float) ->
          or_undefined_of_js Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x3346) "codePointAt"
               [|(Ojs.float_to_js x3345)|])
    let (includes :
      'tags this -> searchString:string -> ?position:float -> unit -> bool) =
      fun (x3353 : 'tags this) ->
        fun ~searchString:(x3349 : string) ->
          fun ?position:(x3350 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3355 = this_to_js Obj.magic x3353 in
                 Ojs.call (Ojs.get_prop_ascii x3355 "includes") "apply"
                   [|x3355;((let x3351 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3351 "push"
                                  [|(Ojs.string_to_js x3349)|]);
                             (match x3350 with
                              | Some x3352 ->
                                  ignore
                                    (Ojs.call x3351 "push"
                                       [|(Ojs.float_to_js x3352)|])
                              | None -> ());
                             x3351))|])
    let (endsWith :
      'tags this -> searchString:string -> ?endPosition:float -> unit -> bool)
      =
      fun (x3360 : 'tags this) ->
        fun ~searchString:(x3356 : string) ->
          fun ?endPosition:(x3357 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3362 = this_to_js Obj.magic x3360 in
                 Ojs.call (Ojs.get_prop_ascii x3362 "endsWith") "apply"
                   [|x3362;((let x3358 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3358 "push"
                                  [|(Ojs.string_to_js x3356)|]);
                             (match x3357 with
                              | Some x3359 ->
                                  ignore
                                    (Ojs.call x3358 "push"
                                       [|(Ojs.float_to_js x3359)|])
                              | None -> ());
                             x3358))|])
    let (normalize :
      'tags this ->
        form:[ `L_s11_NFC  | `L_s12_NFD  | `L_s13_NFKC  | `L_s14_NFKD ] ->
          string)
      =
      fun (x3364 : 'tags this) ->
        fun
          ~form:(x3363 :
                  [ `L_s11_NFC  | `L_s12_NFD  | `L_s13_NFKC  | `L_s14_NFKD ])
          ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3364) "normalize"
               [|((match x3363 with
                   | `L_s11_NFC -> Ojs.string_to_js "NFC"
                   | `L_s12_NFD -> Ojs.string_to_js "NFD"
                   | `L_s13_NFKC -> Ojs.string_to_js "NFKC"
                   | `L_s14_NFKD -> Ojs.string_to_js "NFKD"))|])
    let (normalize' : 'tags this -> ?form:string -> unit -> string) =
      fun (x3369 : 'tags this) ->
        fun ?form:(x3366 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3371 = this_to_js Obj.magic x3369 in
               Ojs.call (Ojs.get_prop_ascii x3371 "normalize") "apply"
                 [|x3371;((let x3367 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3366 with
                            | Some x3368 ->
                                ignore
                                  (Ojs.call x3367 "push"
                                     [|(Ojs.string_to_js x3368)|])
                            | None -> ());
                           x3367))|])
    let (repeat : 'tags this -> count:float -> string) =
      fun (x3373 : 'tags this) ->
        fun ~count:(x3372 : float) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3373) "repeat"
               [|(Ojs.float_to_js x3372)|])
    let (startsWith :
      'tags this -> searchString:string -> ?position:float -> unit -> bool) =
      fun (x3379 : 'tags this) ->
        fun ~searchString:(x3375 : string) ->
          fun ?position:(x3376 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3381 = this_to_js Obj.magic x3379 in
                 Ojs.call (Ojs.get_prop_ascii x3381 "startsWith") "apply"
                   [|x3381;((let x3377 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3377 "push"
                                  [|(Ojs.string_to_js x3375)|]);
                             (match x3376 with
                              | Some x3378 ->
                                  ignore
                                    (Ojs.call x3377 "push"
                                       [|(Ojs.float_to_js x3378)|])
                              | None -> ());
                             x3377))|])
    let (anchor : 'tags this -> name:string -> string) =
      fun (x3383 : 'tags this) ->
        fun ~name:(x3382 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3383) "anchor"
               [|(Ojs.string_to_js x3382)|])
    let (big : 'tags this -> string) =
      fun (x3385 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x3385) "big" [||])
    let (blink : 'tags this -> string) =
      fun (x3387 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x3387) "blink" [||])
    let (bold : 'tags this -> string) =
      fun (x3389 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x3389) "bold" [||])
    let (fixed : 'tags this -> string) =
      fun (x3391 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x3391) "fixed" [||])
    let (fontcolor : 'tags this -> color:string -> string) =
      fun (x3394 : 'tags this) ->
        fun ~color:(x3393 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3394) "fontcolor"
               [|(Ojs.string_to_js x3393)|])
    let (fontsize : 'tags this -> size:float -> string) =
      fun (x3397 : 'tags this) ->
        fun ~size:(x3396 : float) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3397) "fontsize"
               [|(Ojs.float_to_js x3396)|])
    let (fontsize' : 'tags this -> size:string -> string) =
      fun (x3400 : 'tags this) ->
        fun ~size:(x3399 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3400) "fontsize"
               [|(Ojs.string_to_js x3399)|])
    let (italics : 'tags this -> string) =
      fun (x3402 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3402) "italics" [||])
    let (link : 'tags this -> url:string -> string) =
      fun (x3405 : 'tags this) ->
        fun ~url:(x3404 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3405) "link"
               [|(Ojs.string_to_js x3404)|])
    let (small : 'tags this -> string) =
      fun (x3407 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x3407) "small" [||])
    let (strike : 'tags this -> string) =
      fun (x3409 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3409) "strike" [||])
    let (sub : 'tags this -> string) =
      fun (x3411 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x3411) "sub" [||])
    let (sup : 'tags this -> string) =
      fun (x3413 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x3413) "sup" [||])
    let (trimEnd : 'tags this -> string) =
      fun (x3415 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3415) "trimEnd" [||])
    let (trimStart : 'tags this -> string) =
      fun (x3417 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3417) "trimStart" [||])
    let (trimLeft : 'tags this -> string) =
      fun (x3419 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3419) "trimLeft" [||])
    let (trimRight : 'tags this -> string) =
      fun (x3421 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3421) "trimRight" [||])
    let (localeCompare :
      'tags this ->
        that:string ->
          ?locales:string list or_string ->
            ?options:Intl.CollatorOptions.t -> unit -> float)
      =
      fun (x3431 : 'tags this) ->
        fun ~that:(x3423 : string) ->
          fun ?locales:(x3424 : string list or_string option) ->
            fun ?options:(x3425 : Intl.CollatorOptions.t option) ->
              fun () ->
                Ojs.float_of_js
                  (let x3433 = this_to_js Obj.magic x3431 in
                   Ojs.call (Ojs.get_prop_ascii x3433 "localeCompare")
                     "apply"
                     [|x3433;((let x3426 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3426 "push"
                                    [|(Ojs.string_to_js x3423)|]);
                               (match x3424 with
                                | Some x3428 ->
                                    ignore
                                      (Ojs.call x3426 "push"
                                         [|(or_string_to_js
                                              (fun (x3429 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x3429)
                                              x3428)|])
                                | None -> ());
                               (match x3425 with
                                | Some x3427 ->
                                    ignore
                                      (Ojs.call x3426 "push"
                                         [|(Intl.CollatorOptions.t_to_js
                                              x3427)|])
                                | None -> ());
                               x3426))|])
    let (toString : 'tags this -> string) =
      fun (x3434 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3434) "toString" [||])
    let (charAt : 'tags this -> pos:float -> string) =
      fun (x3437 : 'tags this) ->
        fun ~pos:(x3436 : float) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3437) "charAt"
               [|(Ojs.float_to_js x3436)|])
    let (charCodeAt : 'tags this -> index:float -> float) =
      fun (x3440 : 'tags this) ->
        fun ~index:(x3439 : float) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x3440) "charCodeAt"
               [|(Ojs.float_to_js x3439)|])
    let (concat : 'tags this -> strings:string list -> string) =
      fun (x3445 : 'tags this) ->
        fun ~strings:(x3442 : string list) ->
          Ojs.string_of_js
            (let x3447 = this_to_js Obj.magic x3445 in
             Ojs.call (Ojs.get_prop_ascii x3447 "concat") "apply"
               [|x3447;((let x3443 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x3444 : string) ->
                              ignore
                                (Ojs.call x3443 "push"
                                   [|(Ojs.string_to_js x3444)|])) x3442;
                         x3443))|])
    let (indexOf :
      'tags this -> searchString:string -> ?position:float -> unit -> float)
      =
      fun (x3452 : 'tags this) ->
        fun ~searchString:(x3448 : string) ->
          fun ?position:(x3449 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x3454 = this_to_js Obj.magic x3452 in
                 Ojs.call (Ojs.get_prop_ascii x3454 "indexOf") "apply"
                   [|x3454;((let x3450 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3450 "push"
                                  [|(Ojs.string_to_js x3448)|]);
                             (match x3449 with
                              | Some x3451 ->
                                  ignore
                                    (Ojs.call x3450 "push"
                                       [|(Ojs.float_to_js x3451)|])
                              | None -> ());
                             x3450))|])
    let (lastIndexOf :
      'tags this -> searchString:string -> ?position:float -> unit -> float)
      =
      fun (x3459 : 'tags this) ->
        fun ~searchString:(x3455 : string) ->
          fun ?position:(x3456 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x3461 = this_to_js Obj.magic x3459 in
                 Ojs.call (Ojs.get_prop_ascii x3461 "lastIndexOf") "apply"
                   [|x3461;((let x3457 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3457 "push"
                                  [|(Ojs.string_to_js x3455)|]);
                             (match x3456 with
                              | Some x3458 ->
                                  ignore
                                    (Ojs.call x3457 "push"
                                       [|(Ojs.float_to_js x3458)|])
                              | None -> ());
                             x3457))|])
    let (localeCompare' : 'tags this -> that:string -> float) =
      fun (x3463 : 'tags this) ->
        fun ~that:(x3462 : string) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x3463) "localeCompare"
               [|(Ojs.string_to_js x3462)|])
    let (match_' :
      'tags this -> regexp:RegExp.t or_string -> RegExpMatchArray.t or_null)
      =
      fun (x3467 : 'tags this) ->
        fun ~regexp:(x3465 : RegExp.t or_string) ->
          or_null_of_js RegExpMatchArray.t_of_js
            (Ojs.call (this_to_js Obj.magic x3467) "match"
               [|(or_string_to_js RegExp.t_to_js x3465)|])
    let (replace'' :
      'tags this ->
        searchValue:RegExp.t or_string -> replaceValue:string -> string)
      =
      fun (x3473 : 'tags this) ->
        fun ~searchValue:(x3470 : RegExp.t or_string) ->
          fun ~replaceValue:(x3472 : string) ->
            Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x3473) "replace"
                 [|(or_string_to_js RegExp.t_to_js x3470);(Ojs.string_to_js
                                                             x3472)|])
    let (replace''' :
      'tags this ->
        searchValue:RegExp.t or_string ->
          replacer:(substring:string -> args:any list -> string) -> string)
      =
      fun (x3480 : 'tags this) ->
        fun ~searchValue:(x3475 : RegExp.t or_string) ->
          fun ~replacer:(x3477 : substring:string -> args:any list -> string)
            ->
            Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x3480) "replace"
                 [|(or_string_to_js RegExp.t_to_js x3475);(Ojs.fun_to_js_args
                                                             (fun (x3478 : _)
                                                                ->
                                                                Ojs.string_to_js
                                                                  (x3477
                                                                    ~substring:(
                                                                    Ojs.string_of_js
                                                                    (Ojs.array_get
                                                                    x3478 0))
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x3478 1))))|])
    let (search' : 'tags this -> regexp:RegExp.t or_string -> float) =
      fun (x3484 : 'tags this) ->
        fun ~regexp:(x3482 : RegExp.t or_string) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x3484) "search"
               [|(or_string_to_js RegExp.t_to_js x3482)|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> string)
      =
      fun (x3491 : 'tags this) ->
        fun ?start:(x3486 : float option) ->
          fun ?end_:(x3487 : float option) ->
            fun () ->
              Ojs.string_of_js
                (let x3493 = this_to_js Obj.magic x3491 in
                 Ojs.call (Ojs.get_prop_ascii x3493 "slice") "apply"
                   [|x3493;((let x3488 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3486 with
                              | Some x3490 ->
                                  ignore
                                    (Ojs.call x3488 "push"
                                       [|(Ojs.float_to_js x3490)|])
                              | None -> ());
                             (match x3487 with
                              | Some x3489 ->
                                  ignore
                                    (Ojs.call x3488 "push"
                                       [|(Ojs.float_to_js x3489)|])
                              | None -> ());
                             x3488))|])
    let (split' :
      'tags this ->
        separator:RegExp.t or_string -> ?limit:float -> unit -> string list)
      =
      fun (x3499 : 'tags this) ->
        fun ~separator:(x3494 : RegExp.t or_string) ->
          fun ?limit:(x3495 : float option) ->
            fun () ->
              Ojs.list_of_js Ojs.string_of_js
                (let x3501 = this_to_js Obj.magic x3499 in
                 Ojs.call (Ojs.get_prop_ascii x3501 "split") "apply"
                   [|x3501;((let x3496 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3496 "push"
                                  [|(or_string_to_js RegExp.t_to_js x3494)|]);
                             (match x3495 with
                              | Some x3497 ->
                                  ignore
                                    (Ojs.call x3496 "push"
                                       [|(Ojs.float_to_js x3497)|])
                              | None -> ());
                             x3496))|])
    let (substring :
      'tags this -> start:float -> ?end_:float -> unit -> string) =
      fun (x3507 : 'tags this) ->
        fun ~start:(x3503 : float) ->
          fun ?end_:(x3504 : float option) ->
            fun () ->
              Ojs.string_of_js
                (let x3509 = this_to_js Obj.magic x3507 in
                 Ojs.call (Ojs.get_prop_ascii x3509 "substring") "apply"
                   [|x3509;((let x3505 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3505 "push"
                                  [|(Ojs.float_to_js x3503)|]);
                             (match x3504 with
                              | Some x3506 ->
                                  ignore
                                    (Ojs.call x3505 "push"
                                       [|(Ojs.float_to_js x3506)|])
                              | None -> ());
                             x3505))|])
    let (toLowerCase : 'tags this -> string) =
      fun (x3510 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3510) "toLowerCase" [||])
    let (toLocaleLowerCase :
      'tags this -> ?locales:string list or_string -> unit -> string) =
      fun (x3517 : 'tags this) ->
        fun ?locales:(x3512 : string list or_string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3519 = this_to_js Obj.magic x3517 in
               Ojs.call (Ojs.get_prop_ascii x3519 "toLocaleLowerCase")
                 "apply"
                 [|x3519;((let x3513 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3512 with
                            | Some x3514 ->
                                ignore
                                  (Ojs.call x3513 "push"
                                     [|(or_string_to_js
                                          (fun (x3515 : string list) ->
                                             Ojs.list_to_js Ojs.string_to_js
                                               x3515) x3514)|])
                            | None -> ());
                           x3513))|])
    let (toUpperCase : 'tags this -> string) =
      fun (x3520 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3520) "toUpperCase" [||])
    let (toLocaleUpperCase :
      'tags this -> ?locales:string list or_string -> unit -> string) =
      fun (x3527 : 'tags this) ->
        fun ?locales:(x3522 : string list or_string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3529 = this_to_js Obj.magic x3527 in
               Ojs.call (Ojs.get_prop_ascii x3529 "toLocaleUpperCase")
                 "apply"
                 [|x3529;((let x3523 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3522 with
                            | Some x3524 ->
                                ignore
                                  (Ojs.call x3523 "push"
                                     [|(or_string_to_js
                                          (fun (x3525 : string list) ->
                                             Ojs.list_to_js Ojs.string_to_js
                                               x3525) x3524)|])
                            | None -> ());
                           x3523))|])
    let (trim : 'tags this -> string) =
      fun (x3530 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x3530) "trim" [||])
    let (get_length : 'tags this -> float) =
      fun (x3532 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3532) "length")
    let (substr :
      'tags this -> from:float -> ?length:float -> unit -> string) =
      fun (x3538 : 'tags this) ->
        fun ~from:(x3534 : float) ->
          fun ?length:(x3535 : float option) ->
            fun () ->
              Ojs.string_of_js
                (let x3540 = this_to_js Obj.magic x3538 in
                 Ojs.call (Ojs.get_prop_ascii x3540 "substr") "apply"
                   [|x3540;((let x3536 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3536 "push"
                                  [|(Ojs.float_to_js x3534)|]);
                             (match x3535 with
                              | Some x3537 ->
                                  ignore
                                    (Ojs.call x3536 "push"
                                       [|(Ojs.float_to_js x3537)|])
                              | None -> ());
                             x3536))|])
    let (valueOf : 'tags this -> string) =
      fun (x3541 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3541) "valueOf" [||])
    let (get : 'tags this -> float -> string) =
      fun (x3543 : 'tags this) ->
        fun (x3545 : float) ->
          Ojs.string_of_js
            (Ojs.get_prop (this_to_js Obj.magic x3543)
               (Ojs.float_to_js x3545))
    let (replaceAll'' :
      'tags this ->
        searchValue:RegExp.t or_string -> replaceValue:string -> string)
      =
      fun (x3549 : 'tags this) ->
        fun ~searchValue:(x3546 : RegExp.t or_string) ->
          fun ~replaceValue:(x3548 : string) ->
            Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x3549) "replaceAll"
                 [|(or_string_to_js RegExp.t_to_js x3546);(Ojs.string_to_js
                                                             x3548)|])
    let (replaceAll''' :
      'tags this ->
        searchValue:RegExp.t or_string ->
          replacer:(substring:string -> args:any list -> string) -> string)
      =
      fun (x3556 : 'tags this) ->
        fun ~searchValue:(x3551 : RegExp.t or_string) ->
          fun ~replacer:(x3553 : substring:string -> args:any list -> string)
            ->
            Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x3556) "replaceAll"
                 [|(or_string_to_js RegExp.t_to_js x3551);(Ojs.fun_to_js_args
                                                             (fun (x3554 : _)
                                                                ->
                                                                Ojs.string_to_js
                                                                  (x3553
                                                                    ~substring:(
                                                                    Ojs.string_of_js
                                                                    (Ojs.array_get
                                                                    x3554 0))
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x3554 1))))|])
    let (fromCodePoint : float list -> string) =
      fun (x3558 : float list) ->
        Ojs.string_of_js
          (let x3561 = Ojs.get_prop_ascii Ojs.global "String" in
           Ojs.call (Ojs.get_prop_ascii x3561 "fromCodePoint") "apply"
             [|x3561;((let x3559 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3560 : float) ->
                            ignore
                              (Ojs.call x3559 "push"
                                 [|(Ojs.float_to_js x3560)|])) x3558;
                       x3559))|])
    let (raw :
      template:AnonymousInterface5.t -> substitutions:any list -> string) =
      fun ~template:(x3562 : AnonymousInterface5.t) ->
        fun ~substitutions:(x3563 : any list) ->
          Ojs.string_of_js
            (let x3566 = Ojs.get_prop_ascii Ojs.global "String" in
             Ojs.call (Ojs.get_prop_ascii x3566 "raw") "apply"
               [|x3566;((let x3564 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x3564 "push"
                              [|(AnonymousInterface5.t_to_js x3562)|]);
                         List.iter
                           (fun (x3565 : any) ->
                              ignore
                                (Ojs.call x3564 "push" [|(any_to_js x3565)|]))
                           x3563;
                         x3564))|])
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x3567 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "String")
               (let x3568 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x3567 with
                 | Some x3569 ->
                     ignore (Ojs.call x3568 "push" [|(any_to_js x3569)|])
                 | None -> ());
                x3568))
    let (invoke : ?value:any -> unit -> string) =
      fun ?value:(x3570 : any option) ->
        fun () ->
          Ojs.string_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "String") "apply"
               [|Ojs.null;((let x3571 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x3570 with
                             | Some x3572 ->
                                 ignore
                                   (Ojs.call x3571 "push"
                                      [|(any_to_js x3572)|])
                             | None -> ());
                            x3571))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "String")
             "prototype")
    let (fromCharCode : float list -> string) =
      fun (x3573 : float list) ->
        Ojs.string_of_js
          (let x3576 = Ojs.get_prop_ascii Ojs.global "String" in
           Ojs.call (Ojs.get_prop_ascii x3576 "fromCharCode") "apply"
             [|x3576;((let x3574 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3575 : float) ->
                            ignore
                              (Ojs.call x3574 "push"
                                 [|(Ojs.float_to_js x3575)|])) x3573;
                       x3574))|])
    let cast_from = Obj.magic
  end
module Set =
  struct
    type 'T t =
      [ `IterableIterator of 'T 
      | `Iterator of ('T * any * never or_undefined)  | `Set of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3579 : Ojs.t) -> t_of_js __T_of_js x3579
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3577 : __T t) -> t_to_js __T_to_js x3577
    type 'T tags =
      [ `IterableIterator of 'T 
      | `Iterator of ('T * any * never or_undefined)  | `Set of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this = 'tags intf constraint 'tags = [> `Set of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3583 : Ojs.t) -> intf_of_js __tags_of_js x3583
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3581 : __tags intf) -> intf_to_js __tags_to_js x3581
    let (entries : ('tags, 'T) this -> ('T * 'T) IterableIterator.t) =
      fun (x3585 : ('tags, 'T) this) ->
        IterableIterator.t_of_js
          (fun (x3588 : Ojs.t) ->
             let x3589 = x3588 in
             ((Obj.magic (Ojs.array_get x3589 0)),
               (Obj.magic (Ojs.array_get x3589 1))))
          (Ojs.call (this_to_js Obj.magic Obj.magic x3585) "entries" [||])
    let (keys : ('tags, 'T) this -> 'T IterableIterator.t) =
      fun (x3590 : ('tags, 'T) this) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x3590) "keys" [||])
    let (values : ('tags, 'T) this -> 'T IterableIterator.t) =
      fun (x3594 : ('tags, 'T) this) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x3594) "values" [||])
    let (add : ('tags, 'T) this -> value:'T -> ('tags, 'T) this) =
      fun (x3599 : ('tags, 'T) this) ->
        fun ~value:(x3598 : 'T) ->
          this_of_js Obj.magic Obj.magic
            (Ojs.call (this_to_js Obj.magic Obj.magic x3599) "add"
               [|(Obj.magic x3598)|])
    let (clear : ('tags, 'T) this -> unit) =
      fun (x3604 : ('tags, 'T) this) ->
        ignore (Ojs.call (this_to_js Obj.magic Obj.magic x3604) "clear" [||])
    let (delete : ('tags, 'T) this -> value:'T -> bool) =
      fun (x3608 : ('tags, 'T) this) ->
        fun ~value:(x3607 : 'T) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic x3608) "delete"
               [|(Obj.magic x3607)|])
    let (forEach :
      ('tags, 'T) this ->
        callbackfn:(value:'T -> value2:'T -> set_:'T t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3619 : ('tags, 'T) this) ->
        fun ~callbackfn:(x3611 : value:'T -> value2:'T -> set_:'T t -> unit)
          ->
          fun ?thisArg:(x3612 : any option) ->
            fun () ->
              ignore
                (let x3622 = this_to_js Obj.magic Obj.magic x3619 in
                 Ojs.call (Ojs.get_prop_ascii x3622 "forEach") "apply"
                   [|x3622;((let x3613 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3613 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3615 : Ojs.t) ->
                                          fun (x3616 : Ojs.t) ->
                                            fun (x3617 : Ojs.t) ->
                                              x3611 ~value:(Obj.magic x3615)
                                                ~value2:(Obj.magic x3616)
                                                ~set_:(t_of_js Obj.magic
                                                         x3617)))|]);
                             (match x3612 with
                              | Some x3614 ->
                                  ignore
                                    (Ojs.call x3613 "push"
                                       [|(any_to_js x3614)|])
                              | None -> ());
                             x3613))|])
    let (has : ('tags, 'T) this -> value:'T -> bool) =
      fun (x3624 : ('tags, 'T) this) ->
        fun ~value:(x3623 : 'T) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic x3624) "has"
               [|(Obj.magic x3623)|])
    let (get_size : ('tags, 'T) this -> float) =
      fun (x3627 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3627) "size")
    let (create : ?iterable:'T Iterable.t or_null -> unit -> 'T t) =
      fun ?iterable:(x3630 : 'T Iterable.t or_null option) ->
        fun () ->
          t_of_js Obj.magic
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Set")
               (let x3631 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x3630 with
                 | Some x3632 ->
                     ignore
                       (Ojs.call x3631 "push"
                          [|(or_null_to_js
                               (fun (x3633 : 'T Iterable.t) ->
                                  Iterable.t_to_js Obj.magic x3633) x3632)|])
                 | None -> ());
                x3631))
    let (create' : ?values:'T list or_null -> unit -> 'T t) =
      fun ?values:(x3636 : 'T list or_null option) ->
        fun () ->
          t_of_js Obj.magic
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Set")
               (let x3637 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x3636 with
                 | Some x3638 ->
                     ignore
                       (Ojs.call x3637 "push"
                          [|(or_null_to_js
                               (fun (x3639 : 'T list) ->
                                  Ojs.list_to_js Obj.magic x3639) x3638)|])
                 | None -> ());
                x3637))
    let (prototype : unit -> any t) =
      fun () ->
        t_of_js any_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Set")
             "prototype")
    let cast_from = Obj.magic
  end
module ReturnType =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3644 : Ojs.t) -> any_of_js x3644
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x3643 : any) -> any_to_js x3643
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3647 : Ojs.t) -> t_of_js __T_of_js x3647
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3645 : __T t) -> t_to_js __T_to_js x3645
  end
module Required =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3650 : Ojs.t) -> any_of_js x3650
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x3649 : any) -> any_to_js x3649
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3653 : Ojs.t) -> t_of_js __T_of_js x3653
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3651 : __T t) -> t_to_js __T_to_js x3651
  end
module PropertyKey =
  struct
    type t = symbol or_string or_number
    let rec t_of_js : Ojs.t -> t =
      fun (x3658 : Ojs.t) ->
        or_number_of_js
          (fun (x3659 : Ojs.t) -> or_string_of_js symbol_of_js x3659) x3658
    and t_to_js : t -> Ojs.t =
      fun (x3655 : symbol or_string or_number) ->
        or_number_to_js
          (fun (x3656 : symbol or_string) ->
             or_string_to_js symbol_to_js x3656) x3655
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3662 : Ojs.t) -> t_of_js x3662
    and t_0_to_js : t_0 -> Ojs.t = fun (x3661 : t) -> t_to_js x3661
  end
module Function =
  struct
    type t = [ `Function ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3664 : Ojs.t) -> t_of_js x3664
    and t_0_to_js : t_0 -> Ojs.t = fun (x3663 : t) -> t_to_js x3663
    type tags = [ `Function ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Function ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3667 : Ojs.t) -> intf_of_js __tags_of_js x3667
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3665 : __tags intf) -> intf_to_js __tags_to_js x3665
    let (get_name : 'tags this -> string) =
      fun (x3669 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3669) "name")
    let (apply_ :
      'tags this -> this:t -> thisArg:any -> ?argArray:any -> unit -> any) =
      fun (x3676 : 'tags this) ->
        fun ~this:(x3671 : t) ->
          fun ~thisArg:(x3672 : any) ->
            fun ?argArray:(x3673 : any option) ->
              fun () ->
                any_of_js
                  (let x3678 = this_to_js Obj.magic x3676 in
                   Ojs.call (Ojs.get_prop_ascii x3678 "apply") "apply"
                     [|x3678;((let x3674 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3674 "push" [|(t_to_js x3671)|]);
                               ignore
                                 (Ojs.call x3674 "push" [|(any_to_js x3672)|]);
                               (match x3673 with
                                | Some x3675 ->
                                    ignore
                                      (Ojs.call x3674 "push"
                                         [|(any_to_js x3675)|])
                                | None -> ());
                               x3674))|])
    let (call :
      'tags this -> this:t -> thisArg:any -> argArray:any list -> any) =
      fun (x3684 : 'tags this) ->
        fun ~this:(x3679 : t) ->
          fun ~thisArg:(x3680 : any) ->
            fun ~argArray:(x3681 : any list) ->
              any_of_js
                (let x3686 = this_to_js Obj.magic x3684 in
                 Ojs.call (Ojs.get_prop_ascii x3686 "call") "apply"
                   [|x3686;((let x3682 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3682 "push" [|(t_to_js x3679)|]);
                             ignore
                               (Ojs.call x3682 "push" [|(any_to_js x3680)|]);
                             List.iter
                               (fun (x3683 : any) ->
                                  ignore
                                    (Ojs.call x3682 "push"
                                       [|(any_to_js x3683)|])) x3681;
                             x3682))|])
    let (bind :
      'tags this -> this:t -> thisArg:any -> argArray:any list -> any) =
      fun (x3692 : 'tags this) ->
        fun ~this:(x3687 : t) ->
          fun ~thisArg:(x3688 : any) ->
            fun ~argArray:(x3689 : any list) ->
              any_of_js
                (let x3694 = this_to_js Obj.magic x3692 in
                 Ojs.call (Ojs.get_prop_ascii x3694 "bind") "apply"
                   [|x3694;((let x3690 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3690 "push" [|(t_to_js x3687)|]);
                             ignore
                               (Ojs.call x3690 "push" [|(any_to_js x3688)|]);
                             List.iter
                               (fun (x3691 : any) ->
                                  ignore
                                    (Ojs.call x3690 "push"
                                       [|(any_to_js x3691)|])) x3689;
                             x3690))|])
    let (toString : 'tags this -> string) =
      fun (x3695 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3695) "toString" [||])
    let (get_prototype : 'tags this -> any) =
      fun (x3697 : 'tags this) ->
        any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3697) "prototype")
    let (set_prototype : 'tags this -> any -> unit) =
      fun (x3699 : 'tags this) ->
        fun (x3700 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3699) "prototype"
            (any_to_js x3700)
    let (get_length : 'tags this -> float) =
      fun (x3702 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3702) "length")
    let (get_arguments : 'tags this -> any) =
      fun (x3704 : 'tags this) ->
        any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3704) "arguments")
    let (set_arguments : 'tags this -> any -> unit) =
      fun (x3706 : 'tags this) ->
        fun (x3707 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3706) "arguments"
            (any_to_js x3707)
    let (get_caller : 'tags this -> t) =
      fun (x3709 : 'tags this) ->
        t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x3709) "caller")
    let (set_caller : 'tags this -> t -> unit) =
      fun (x3711 : 'tags this) ->
        fun (x3712 : t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3711) "caller"
            (t_to_js x3712)
    let (create : string list -> t) =
      fun (x3714 : string list) ->
        t_of_js
          (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Function")
             (let x3715 =
                Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
              List.iter
                (fun (x3716 : string) ->
                   ignore
                     (Ojs.call x3715 "push" [|(Ojs.string_to_js x3716)|]))
                x3714;
              x3715))
    let (invoke : string list -> t) =
      fun (x3717 : string list) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Function") "apply"
             [|Ojs.null;((let x3718 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x3719 : string) ->
                               ignore
                                 (Ojs.call x3718 "push"
                                    [|(Ojs.string_to_js x3719)|])) x3717;
                          x3718))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Function")
             "prototype")
    let cast_from = Obj.magic
  end
module PropertyDescriptor =
  struct
    type t = [ `PropertyDescriptor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3721 : Ojs.t) -> t_of_js x3721
    and t_0_to_js : t_0 -> Ojs.t = fun (x3720 : t) -> t_to_js x3720
    type tags = [ `PropertyDescriptor ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PropertyDescriptor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3724 : Ojs.t) -> intf_of_js __tags_of_js x3724
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3722 : __tags intf) -> intf_to_js __tags_to_js x3722
    let (get_configurable : 'tags this -> bool) =
      fun (x3726 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3726) "configurable")
    let (set_configurable : 'tags this -> bool -> unit) =
      fun (x3728 : 'tags this) ->
        fun (x3729 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3728) "configurable"
            (Ojs.bool_to_js x3729)
    let (get_enumerable : 'tags this -> bool) =
      fun (x3731 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3731) "enumerable")
    let (set_enumerable : 'tags this -> bool -> unit) =
      fun (x3733 : 'tags this) ->
        fun (x3734 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3733) "enumerable"
            (Ojs.bool_to_js x3734)
    let (get_value : 'tags this -> any) =
      fun (x3736 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x3736) "value")
    let (set_value : 'tags this -> any -> unit) =
      fun (x3738 : 'tags this) ->
        fun (x3739 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3738) "value"
            (any_to_js x3739)
    let (get_writable : 'tags this -> bool) =
      fun (x3741 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3741) "writable")
    let (set_writable : 'tags this -> bool -> unit) =
      fun (x3743 : 'tags this) ->
        fun (x3744 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3743) "writable"
            (Ojs.bool_to_js x3744)
    let (get_ : 'tags this -> any) =
      fun (x3746 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x3746) "get" [||])
    let (set_ : 'tags this -> v:any -> unit) =
      fun (x3749 : 'tags this) ->
        fun ~v:(x3748 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x3749) "set"
               [|(any_to_js x3748)|])
    let cast_from = Obj.magic
  end
module Reflect =
  struct
    let (apply_ :
      target:Function.t ->
        thisArgument:any -> argumentsList:any ArrayLike.t -> any)
      =
      fun ~target:(x3751 : Function.t) ->
        fun ~thisArgument:(x3752 : any) ->
          fun ~argumentsList:(x3753 : any ArrayLike.t) ->
            any_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Reflect") "apply"
                 [|(Function.t_to_js x3751);(any_to_js x3752);(ArrayLike.t_to_js
                                                                 any_to_js
                                                                 x3753)|])
    let (construct :
      target:Function.t ->
        argumentsList:any ArrayLike.t -> ?newTarget:Function.t -> unit -> any)
      =
      fun ~target:(x3755 : Function.t) ->
        fun ~argumentsList:(x3756 : any ArrayLike.t) ->
          fun ?newTarget:(x3757 : Function.t option) ->
            fun () ->
              any_of_js
                (let x3761 = Ojs.get_prop_ascii Ojs.global "Reflect" in
                 Ojs.call (Ojs.get_prop_ascii x3761 "construct") "apply"
                   [|x3761;((let x3758 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3758 "push"
                                  [|(Function.t_to_js x3755)|]);
                             ignore
                               (Ojs.call x3758 "push"
                                  [|(ArrayLike.t_to_js any_to_js x3756)|]);
                             (match x3757 with
                              | Some x3759 ->
                                  ignore
                                    (Ojs.call x3758 "push"
                                       [|(Function.t_to_js x3759)|])
                              | None -> ());
                             x3758))|])
    let (defineProperty :
      target:untyped_object ->
        propertyKey:PropertyKey.t -> attributes:PropertyDescriptor.t -> bool)
      =
      fun ~target:(x3762 : untyped_object) ->
        fun ~propertyKey:(x3763 : PropertyKey.t) ->
          fun ~attributes:(x3764 : PropertyDescriptor.t) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Reflect")
                 "defineProperty"
                 [|(untyped_object_to_js x3762);(PropertyKey.t_to_js x3763);(
                   PropertyDescriptor.t_to_js x3764)|])
    let (deleteProperty :
      target:untyped_object -> propertyKey:PropertyKey.t -> bool) =
      fun ~target:(x3765 : untyped_object) ->
        fun ~propertyKey:(x3766 : PropertyKey.t) ->
          Ojs.bool_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Reflect")
               "deleteProperty"
               [|(untyped_object_to_js x3765);(PropertyKey.t_to_js x3766)|])
    let (get_ :
      target:untyped_object ->
        propertyKey:PropertyKey.t -> ?receiver:any -> unit -> any)
      =
      fun ~target:(x3767 : untyped_object) ->
        fun ~propertyKey:(x3768 : PropertyKey.t) ->
          fun ?receiver:(x3769 : any option) ->
            fun () ->
              any_of_js
                (let x3772 = Ojs.get_prop_ascii Ojs.global "Reflect" in
                 Ojs.call (Ojs.get_prop_ascii x3772 "get") "apply"
                   [|x3772;((let x3770 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3770 "push"
                                  [|(untyped_object_to_js x3767)|]);
                             ignore
                               (Ojs.call x3770 "push"
                                  [|(PropertyKey.t_to_js x3768)|]);
                             (match x3769 with
                              | Some x3771 ->
                                  ignore
                                    (Ojs.call x3770 "push"
                                       [|(any_to_js x3771)|])
                              | None -> ());
                             x3770))|])
    let (getOwnPropertyDescriptor :
      target:untyped_object ->
        propertyKey:PropertyKey.t -> PropertyDescriptor.t or_undefined)
      =
      fun ~target:(x3773 : untyped_object) ->
        fun ~propertyKey:(x3774 : PropertyKey.t) ->
          or_undefined_of_js PropertyDescriptor.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Reflect")
               "getOwnPropertyDescriptor"
               [|(untyped_object_to_js x3773);(PropertyKey.t_to_js x3774)|])
    let (getPrototypeOf : untyped_object -> untyped_object or_null) =
      fun (x3776 : untyped_object) ->
        or_null_of_js untyped_object_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Reflect")
             "getPrototypeOf" [|(untyped_object_to_js x3776)|])
    let (has : target:untyped_object -> propertyKey:PropertyKey.t -> bool) =
      fun ~target:(x3778 : untyped_object) ->
        fun ~propertyKey:(x3779 : PropertyKey.t) ->
          Ojs.bool_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Reflect") "has"
               [|(untyped_object_to_js x3778);(PropertyKey.t_to_js x3779)|])
    let (isExtensible : untyped_object -> bool) =
      fun (x3780 : untyped_object) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Reflect") "isExtensible"
             [|(untyped_object_to_js x3780)|])
    let (ownKeys : untyped_object -> symbol or_string list) =
      fun (x3781 : untyped_object) ->
        Ojs.list_of_js
          (fun (x3782 : Ojs.t) -> or_string_of_js symbol_of_js x3782)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Reflect") "ownKeys"
             [|(untyped_object_to_js x3781)|])
    let (preventExtensions : untyped_object -> bool) =
      fun (x3784 : untyped_object) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Reflect")
             "preventExtensions" [|(untyped_object_to_js x3784)|])
    let (set_ :
      target:untyped_object ->
        propertyKey:PropertyKey.t ->
          value:any -> ?receiver:any -> unit -> bool)
      =
      fun ~target:(x3785 : untyped_object) ->
        fun ~propertyKey:(x3786 : PropertyKey.t) ->
          fun ~value:(x3787 : any) ->
            fun ?receiver:(x3788 : any option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x3791 = Ojs.get_prop_ascii Ojs.global "Reflect" in
                   Ojs.call (Ojs.get_prop_ascii x3791 "set") "apply"
                     [|x3791;((let x3789 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3789 "push"
                                    [|(untyped_object_to_js x3785)|]);
                               ignore
                                 (Ojs.call x3789 "push"
                                    [|(PropertyKey.t_to_js x3786)|]);
                               ignore
                                 (Ojs.call x3789 "push" [|(any_to_js x3787)|]);
                               (match x3788 with
                                | Some x3790 ->
                                    ignore
                                      (Ojs.call x3789 "push"
                                         [|(any_to_js x3790)|])
                                | None -> ());
                               x3789))|])
    let (setPrototypeOf :
      target:untyped_object -> proto:untyped_object or_null -> bool) =
      fun ~target:(x3792 : untyped_object) ->
        fun ~proto:(x3793 : untyped_object or_null) ->
          Ojs.bool_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Reflect")
               "setPrototypeOf"
               [|(untyped_object_to_js x3792);(or_null_to_js
                                                 untyped_object_to_js x3793)|])
  end
module ReferenceError =
  struct
    type t = [ `Error  | `ReferenceError ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3796 : Ojs.t) -> t_of_js x3796
    and t_0_to_js : t_0 -> Ojs.t = fun (x3795 : t) -> t_to_js x3795
    type tags = [ `Error  | `ReferenceError ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ReferenceError ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3799 : Ojs.t) -> intf_of_js __tags_of_js x3799
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3797 : __tags intf) -> intf_to_js __tags_to_js x3797
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x3801 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ReferenceError")
               (let x3802 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x3801 with
                 | Some x3803 ->
                     ignore
                       (Ojs.call x3802 "push" [|(Ojs.string_to_js x3803)|])
                 | None -> ());
                x3802))
    let (invoke : ?message:string -> unit -> t) =
      fun ?message:(x3804 : string option) ->
        fun () ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "ReferenceError")
               "apply"
               [|Ojs.null;((let x3805 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x3804 with
                             | Some x3806 ->
                                 ignore
                                   (Ojs.call x3805 "push"
                                      [|(Ojs.string_to_js x3806)|])
                             | None -> ());
                            x3805))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReferenceError") "prototype")
    let cast_from = Obj.magic
  end
module Record =
  struct
    type ('K, 'T) t = any
    let rec t_of_js :
      'K 'T . (Ojs.t -> 'K) -> (Ojs.t -> 'T) -> Ojs.t -> ('K, 'T) t = fun
      (type __K) -> fun (type __T) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3808 : Ojs.t) -> any_of_js x3808
    and t_to_js :
      'K 'T . ('K -> Ojs.t) -> ('T -> Ojs.t) -> ('K, 'T) t -> Ojs.t = fun
      (type __K) -> fun (type __T) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3807 : any) -> any_to_js x3807
    type ('K, 'T) t_2 = ('K, 'T) t
    let rec t_2_of_js :
      'K 'T . (Ojs.t -> 'K) -> (Ojs.t -> 'T) -> Ojs.t -> ('K, 'T) t_2 = fun
      (type __K) -> fun (type __T) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3812 : Ojs.t) -> t_of_js __K_of_js __T_of_js x3812
    and t_2_to_js :
      'K 'T . ('K -> Ojs.t) -> ('T -> Ojs.t) -> ('K, 'T) t_2 -> Ojs.t = fun
      (type __K) -> fun (type __T) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3809 : (__K, __T) t) -> t_to_js __K_to_js __T_to_js x3809
  end
module ReadonlySet =
  struct
    type 'T t =
      [ `IterableIterator of 'T 
      | `Iterator of ('T * any * never or_undefined)  | `ReadonlySet of 'T ]
        intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3817 : Ojs.t) -> t_of_js __T_of_js x3817
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3815 : __T t) -> t_to_js __T_to_js x3815
    type 'T tags =
      [ `IterableIterator of 'T 
      | `Iterator of ('T * any * never or_undefined)  | `ReadonlySet of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ReadonlySet of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3821 : Ojs.t) -> intf_of_js __tags_of_js x3821
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3819 : __tags intf) -> intf_to_js __tags_to_js x3819
    let (entries : ('tags, 'T) this -> ('T * 'T) IterableIterator.t) =
      fun (x3823 : ('tags, 'T) this) ->
        IterableIterator.t_of_js
          (fun (x3826 : Ojs.t) ->
             let x3827 = x3826 in
             ((Obj.magic (Ojs.array_get x3827 0)),
               (Obj.magic (Ojs.array_get x3827 1))))
          (Ojs.call (this_to_js Obj.magic Obj.magic x3823) "entries" [||])
    let (keys : ('tags, 'T) this -> 'T IterableIterator.t) =
      fun (x3828 : ('tags, 'T) this) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x3828) "keys" [||])
    let (values : ('tags, 'T) this -> 'T IterableIterator.t) =
      fun (x3832 : ('tags, 'T) this) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x3832) "values" [||])
    let (forEach :
      ('tags, 'T) this ->
        callbackfn:(value:'T -> value2:'T -> set_:'T t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3844 : ('tags, 'T) this) ->
        fun ~callbackfn:(x3836 : value:'T -> value2:'T -> set_:'T t -> unit)
          ->
          fun ?thisArg:(x3837 : any option) ->
            fun () ->
              ignore
                (let x3847 = this_to_js Obj.magic Obj.magic x3844 in
                 Ojs.call (Ojs.get_prop_ascii x3847 "forEach") "apply"
                   [|x3847;((let x3838 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3838 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3840 : Ojs.t) ->
                                          fun (x3841 : Ojs.t) ->
                                            fun (x3842 : Ojs.t) ->
                                              x3836 ~value:(Obj.magic x3840)
                                                ~value2:(Obj.magic x3841)
                                                ~set_:(t_of_js Obj.magic
                                                         x3842)))|]);
                             (match x3837 with
                              | Some x3839 ->
                                  ignore
                                    (Ojs.call x3838 "push"
                                       [|(any_to_js x3839)|])
                              | None -> ());
                             x3838))|])
    let (has : ('tags, 'T) this -> value:'T -> bool) =
      fun (x3849 : ('tags, 'T) this) ->
        fun ~value:(x3848 : 'T) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic x3849) "has"
               [|(Obj.magic x3848)|])
    let (get_size : ('tags, 'T) this -> float) =
      fun (x3852 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3852) "size")
    let cast_from = Obj.magic
  end
module ReadonlyMap =
  struct
    type ('K, 'V) t =
      [ `IterableIterator of ('K * 'V) 
      | `Iterator of (('K * 'V) * any * never or_undefined) 
      | `ReadonlyMap of ('K * 'V) ] intf
    let rec t_of_js :
      'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t =
      fun _K -> fun _V -> Obj.magic
    and t_to_js :
      'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t =
      fun _K -> fun _V -> Obj.magic
    type ('K, 'V) t_2 = ('K, 'V) t
    let rec t_2_of_js :
      'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t_2 = fun
      (type __K) -> fun (type __V) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__V_of_js : Ojs.t -> __V) ->
          fun (x3858 : Ojs.t) -> t_of_js __K_of_js __V_of_js x3858
    and t_2_to_js :
      'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t_2 -> Ojs.t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__V_to_js : __V -> Ojs.t) ->
          fun (x3855 : (__K, __V) t) -> t_to_js __K_to_js __V_to_js x3855
    type ('K, 'V) tags =
      [ `IterableIterator of ('K * 'V) 
      | `Iterator of (('K * 'V) * any * never or_undefined) 
      | `ReadonlyMap of ('K * 'V) ]
    type ('K, 'V) tags_2 = ('K, 'V) tags
    type ('tags, 'K, 'V) this =
      'tags intf constraint 'tags = [> `ReadonlyMap of ('K * 'V) ]
    let rec this_of_js :
      'tags 'K 'V .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('tags, 'K, 'V) this
      = fun (type __tags) -> fun (type __K) -> fun (type __V) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__K_of_js : Ojs.t -> __K) ->
          fun (__V_of_js : Ojs.t -> __V) ->
            fun (x3863 : Ojs.t) -> intf_of_js __tags_of_js x3863
    and this_to_js :
      'tags 'K 'V .
        ('tags -> Ojs.t) ->
          ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('tags, 'K, 'V) this -> Ojs.t
      = fun (type __tags) -> fun (type __K) -> fun (type __V) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) ->
          fun (__V_to_js : __V -> Ojs.t) ->
            fun (x3861 : __tags intf) -> intf_to_js __tags_to_js x3861
    let (entries : ('tags, 'K, 'V) this -> ('K * 'V) IterableIterator.t) =
      fun (x3865 : ('tags, 'K, 'V) this) ->
        IterableIterator.t_of_js
          (fun (x3869 : Ojs.t) ->
             let x3870 = x3869 in
             ((Obj.magic (Ojs.array_get x3870 0)),
               (Obj.magic (Ojs.array_get x3870 1))))
          (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x3865)
             "entries" [||])
    let (keys : ('tags, 'K, 'V) this -> 'K IterableIterator.t) =
      fun (x3871 : ('tags, 'K, 'V) this) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x3871) "keys"
             [||])
    let (values : ('tags, 'K, 'V) this -> 'V IterableIterator.t) =
      fun (x3876 : ('tags, 'K, 'V) this) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x3876) "values"
             [||])
    let (forEach :
      ('tags, 'K, 'V) this ->
        callbackfn:(value:'V -> key:'K -> map:('K, 'V) t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3890 : ('tags, 'K, 'V) this) ->
        fun
          ~callbackfn:(x3881 : value:'V -> key:'K -> map:('K, 'V) t -> unit)
          ->
          fun ?thisArg:(x3882 : any option) ->
            fun () ->
              ignore
                (let x3894 = this_to_js Obj.magic Obj.magic Obj.magic x3890 in
                 Ojs.call (Ojs.get_prop_ascii x3894 "forEach") "apply"
                   [|x3894;((let x3883 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3883 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3885 : Ojs.t) ->
                                          fun (x3886 : Ojs.t) ->
                                            fun (x3887 : Ojs.t) ->
                                              x3881 ~value:(Obj.magic x3885)
                                                ~key:(Obj.magic x3886)
                                                ~map:(t_of_js Obj.magic
                                                        Obj.magic x3887)))|]);
                             (match x3882 with
                              | Some x3884 ->
                                  ignore
                                    (Ojs.call x3883 "push"
                                       [|(any_to_js x3884)|])
                              | None -> ());
                             x3883))|])
    let (get_ : ('tags, 'K, 'V) this -> key:'K -> 'V or_undefined) =
      fun (x3896 : ('tags, 'K, 'V) this) ->
        fun ~key:(x3895 : 'K) ->
          or_undefined_of_js Obj.magic
            (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x3896) "get"
               [|(Obj.magic x3895)|])
    let (has : ('tags, 'K, 'V) this -> key:'K -> bool) =
      fun (x3902 : ('tags, 'K, 'V) this) ->
        fun ~key:(x3901 : 'K) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x3902) "has"
               [|(Obj.magic x3901)|])
    let (get_size : ('tags, 'K, 'V) this -> float) =
      fun (x3906 : ('tags, 'K, 'V) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x3906) "size")
    let cast_from = Obj.magic
  end
module RangeError =
  struct
    type t = [ `Error  | `RangeError ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3911 : Ojs.t) -> t_of_js x3911
    and t_0_to_js : t_0 -> Ojs.t = fun (x3910 : t) -> t_to_js x3910
    type tags = [ `Error  | `RangeError ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RangeError ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3914 : Ojs.t) -> intf_of_js __tags_of_js x3914
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3912 : __tags intf) -> intf_to_js __tags_to_js x3912
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x3916 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "RangeError")
               (let x3917 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x3916 with
                 | Some x3918 ->
                     ignore
                       (Ojs.call x3917 "push" [|(Ojs.string_to_js x3918)|])
                 | None -> ());
                x3917))
    let (invoke : ?message:string -> unit -> t) =
      fun ?message:(x3919 : string option) ->
        fun () ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "RangeError") "apply"
               [|Ojs.null;((let x3920 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x3919 with
                             | Some x3921 ->
                                 ignore
                                   (Ojs.call x3920 "push"
                                      [|(Ojs.string_to_js x3921)|])
                             | None -> ());
                            x3920))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "RangeError")
             "prototype")
    let cast_from = Obj.magic
  end
module ProxyHandler =
  struct
    type 'T t = [ `ProxyHandler of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3924 : Ojs.t) -> t_of_js __T_of_js x3924
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3922 : __T t) -> t_to_js __T_to_js x3922
    type 'T tags = [ `ProxyHandler of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ProxyHandler of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3928 : Ojs.t) -> intf_of_js __tags_of_js x3928
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3926 : __tags intf) -> intf_to_js __tags_to_js x3926
    let (apply_ :
      ('tags, 'T) this ->
        target:'T -> thisArg:any -> argArray:any list -> any)
      =
      fun (x3934 : ('tags, 'T) this) ->
        fun ~target:(x3930 : 'T) ->
          fun ~thisArg:(x3931 : any) ->
            fun ~argArray:(x3932 : any list) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic Obj.magic x3934) "apply"
                   [|(Obj.magic x3930);(any_to_js x3931);(Ojs.list_to_js
                                                            any_to_js x3932)|])
    let (construct :
      ('tags, 'T) this ->
        target:'T ->
          argArray:any list -> newTarget:Function.t -> untyped_object)
      =
      fun (x3941 : ('tags, 'T) this) ->
        fun ~target:(x3937 : 'T) ->
          fun ~argArray:(x3938 : any list) ->
            fun ~newTarget:(x3940 : Function.t) ->
              untyped_object_of_js
                (Ojs.call (this_to_js Obj.magic Obj.magic x3941) "construct"
                   [|(Obj.magic x3937);(Ojs.list_to_js any_to_js x3938);(
                     Function.t_to_js x3940)|])
    let (defineProperty :
      ('tags, 'T) this ->
        target:'T ->
          p:symbol or_string -> attributes:PropertyDescriptor.t -> bool)
      =
      fun (x3948 : ('tags, 'T) this) ->
        fun ~target:(x3944 : 'T) ->
          fun ~p:(x3945 : symbol or_string) ->
            fun ~attributes:(x3947 : PropertyDescriptor.t) ->
              Ojs.bool_of_js
                (Ojs.call (this_to_js Obj.magic Obj.magic x3948)
                   "defineProperty"
                   [|(Obj.magic x3944);(or_string_to_js symbol_to_js x3945);(
                     PropertyDescriptor.t_to_js x3947)|])
    let (deleteProperty :
      ('tags, 'T) this -> target:'T -> p:symbol or_string -> bool) =
      fun (x3954 : ('tags, 'T) this) ->
        fun ~target:(x3951 : 'T) ->
          fun ~p:(x3952 : symbol or_string) ->
            Ojs.bool_of_js
              (Ojs.call (this_to_js Obj.magic Obj.magic x3954)
                 "deleteProperty"
                 [|(Obj.magic x3951);(or_string_to_js symbol_to_js x3952)|])
    let (get_ :
      ('tags, 'T) this ->
        target:'T -> p:symbol or_string -> receiver:any -> any)
      =
      fun (x3961 : ('tags, 'T) this) ->
        fun ~target:(x3957 : 'T) ->
          fun ~p:(x3958 : symbol or_string) ->
            fun ~receiver:(x3960 : any) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic Obj.magic x3961) "get"
                   [|(Obj.magic x3957);(or_string_to_js symbol_to_js x3958);(
                     any_to_js x3960)|])
    let (getOwnPropertyDescriptor :
      ('tags, 'T) this ->
        target:'T -> p:symbol or_string -> PropertyDescriptor.t or_undefined)
      =
      fun (x3967 : ('tags, 'T) this) ->
        fun ~target:(x3964 : 'T) ->
          fun ~p:(x3965 : symbol or_string) ->
            or_undefined_of_js PropertyDescriptor.t_of_js
              (Ojs.call (this_to_js Obj.magic Obj.magic x3967)
                 "getOwnPropertyDescriptor"
                 [|(Obj.magic x3964);(or_string_to_js symbol_to_js x3965)|])
    let (getPrototypeOf :
      ('tags, 'T) this -> target:'T -> untyped_object or_null) =
      fun (x3972 : ('tags, 'T) this) ->
        fun ~target:(x3971 : 'T) ->
          or_null_of_js untyped_object_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic x3972) "getPrototypeOf"
               [|(Obj.magic x3971)|])
    let (has : ('tags, 'T) this -> target:'T -> p:symbol or_string -> bool) =
      fun (x3979 : ('tags, 'T) this) ->
        fun ~target:(x3976 : 'T) ->
          fun ~p:(x3977 : symbol or_string) ->
            Ojs.bool_of_js
              (Ojs.call (this_to_js Obj.magic Obj.magic x3979) "has"
                 [|(Obj.magic x3976);(or_string_to_js symbol_to_js x3977)|])
    let (isExtensible : ('tags, 'T) this -> target:'T -> bool) =
      fun (x3983 : ('tags, 'T) this) ->
        fun ~target:(x3982 : 'T) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic x3983) "isExtensible"
               [|(Obj.magic x3982)|])
    let (ownKeys :
      ('tags, 'T) this -> target:'T -> symbol or_string ArrayLike.t) =
      fun (x3987 : ('tags, 'T) this) ->
        fun ~target:(x3986 : 'T) ->
          ArrayLike.t_of_js
            (fun (x3990 : Ojs.t) -> or_string_of_js symbol_of_js x3990)
            (Ojs.call (this_to_js Obj.magic Obj.magic x3987) "ownKeys"
               [|(Obj.magic x3986)|])
    let (preventExtensions : ('tags, 'T) this -> target:'T -> bool) =
      fun (x3993 : ('tags, 'T) this) ->
        fun ~target:(x3992 : 'T) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic x3993)
               "preventExtensions" [|(Obj.magic x3992)|])
    let (set_ :
      ('tags, 'T) this ->
        target:'T -> p:symbol or_string -> value:any -> receiver:any -> bool)
      =
      fun (x4001 : ('tags, 'T) this) ->
        fun ~target:(x3996 : 'T) ->
          fun ~p:(x3997 : symbol or_string) ->
            fun ~value:(x3999 : any) ->
              fun ~receiver:(x4000 : any) ->
                Ojs.bool_of_js
                  (Ojs.call (this_to_js Obj.magic Obj.magic x4001) "set"
                     [|(Obj.magic x3996);(or_string_to_js symbol_to_js x3997);(
                       any_to_js x3999);(any_to_js x4000)|])
    let (setPrototypeOf :
      ('tags, 'T) this -> target:'T -> v:untyped_object or_null -> bool) =
      fun (x4007 : ('tags, 'T) this) ->
        fun ~target:(x4004 : 'T) ->
          fun ~v:(x4005 : untyped_object or_null) ->
            Ojs.bool_of_js
              (Ojs.call (this_to_js Obj.magic Obj.magic x4007)
                 "setPrototypeOf"
                 [|(Obj.magic x4004);(or_null_to_js untyped_object_to_js
                                        x4005)|])
    let cast_from = Obj.magic
  end
module AnonymousInterface28 =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x4011 : Ojs.t) -> x4011
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x4010 : Ojs.t) -> x4010
    let (get_proxy : 'T t -> 'T) =
      fun (x4012 : 'T t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x4012) "proxy")
    let (set_proxy : 'T t -> 'T -> unit) =
      fun (x4014 : 'T t) ->
        fun (x4015 : 'T) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x4014) "proxy"
            (Obj.magic x4015)
    let (revoke : 'T t -> unit) =
      fun (x4017 : 'T t) ->
        ignore (Ojs.call (t_to_js Obj.magic x4017) "revoke" [||])
  end
module ProxyStatic =
  struct
    let (revocable :
      target:'T -> handler:'T ProxyHandler.t -> 'T AnonymousInterface28.t) =
      fun ~target:(x4019 : 'T) ->
        fun ~handler:(x4020 : 'T ProxyHandler.t) ->
          AnonymousInterface28.t_of_js Obj.magic
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Proxy") "revocable"
               [|(Obj.magic x4019);(ProxyHandler.t_to_js Obj.magic x4020)|])
    let (create : target:'T -> handler:'T ProxyHandler.t -> 'T) =
      fun ~target:(x4023 : 'T) ->
        fun ~handler:(x4024 : 'T ProxyHandler.t) ->
          Obj.magic
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Proxy")
               [|(Obj.magic x4023);(ProxyHandler.t_to_js Obj.magic x4024)|])
  end
module ProxyConstructor =
  struct
    type t = [ `ProxyConstructor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4027 : Ojs.t) -> t_of_js x4027
    and t_0_to_js : t_0 -> Ojs.t = fun (x4026 : t) -> t_to_js x4026
    type tags = [ `ProxyConstructor ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ProxyConstructor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4030 : Ojs.t) -> intf_of_js __tags_of_js x4030
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4028 : __tags intf) -> intf_to_js __tags_to_js x4028
    let (revocable :
      'tags this ->
        target:'T -> handler:'T ProxyHandler.t -> 'T AnonymousInterface28.t)
      =
      fun (x4035 : 'tags this) ->
        fun ~target:(x4032 : 'T) ->
          fun ~handler:(x4033 : 'T ProxyHandler.t) ->
            AnonymousInterface28.t_of_js Obj.magic
              (Ojs.call (this_to_js Obj.magic x4035) "revocable"
                 [|(Obj.magic x4032);(ProxyHandler.t_to_js Obj.magic x4033)|])
    let (create : 'tags this -> target:'T -> handler:'T ProxyHandler.t -> 'T)
      =
      fun (x4041 : 'tags this) ->
        fun ~target:(x4038 : 'T) ->
          fun ~handler:(x4039 : 'T ProxyHandler.t) ->
            Obj.magic
              (Ojs.new_obj (this_to_js Obj.magic x4041)
                 [|(Obj.magic x4038);(ProxyHandler.t_to_js Obj.magic x4039)|])
    let cast_from = Obj.magic
  end
module ThisType =
  struct
    type 'T t = [ `ThisType of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4045 : Ojs.t) -> t_of_js __T_of_js x4045
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4043 : __T t) -> t_to_js __T_to_js x4043
    type 'T tags = [ `ThisType of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ThisType of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4049 : Ojs.t) -> intf_of_js __tags_of_js x4049
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4047 : __tags intf) -> intf_to_js __tags_to_js x4047
    let cast_from = Obj.magic
  end
module Readonly =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4052 : Ojs.t) -> any_of_js x4052
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x4051 : any) -> any_to_js x4051
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4055 : Ojs.t) -> t_of_js __T_of_js x4055
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4053 : __T t) -> t_to_js __T_to_js x4053
  end
module PropertyDescriptorMap =
  struct
    type t = [ `PropertyDescriptorMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4058 : Ojs.t) -> t_of_js x4058
    and t_0_to_js : t_0 -> Ojs.t = fun (x4057 : t) -> t_to_js x4057
    type tags = [ `PropertyDescriptorMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PropertyDescriptorMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4061 : Ojs.t) -> intf_of_js __tags_of_js x4061
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4059 : __tags intf) -> intf_to_js __tags_to_js x4059
    let (get : 'tags this -> string -> PropertyDescriptor.t) =
      fun (x4063 : 'tags this) ->
        fun (x4065 : string) ->
          PropertyDescriptor.t_of_js
            (Ojs.get_prop (this_to_js Obj.magic x4063)
               (Ojs.string_to_js x4065))
    let (set : 'tags this -> string -> PropertyDescriptor.t -> unit) =
      fun (x4066 : 'tags this) ->
        fun (x4068 : string) ->
          fun (x4069 : PropertyDescriptor.t) ->
            Ojs.set_prop (this_to_js Obj.magic x4066)
              (Ojs.string_to_js x4068) (PropertyDescriptor.t_to_js x4069)
    let cast_from = Obj.magic
  end
module AnonymousInterface7 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4071 : Ojs.t) -> x4071
    and t_to_js : t -> Ojs.t = fun (x4070 : Ojs.t) -> x4070
    let (get : t -> string -> PropertyDescriptor.t) =
      fun (x4072 : t) ->
        fun (x4073 : string) ->
          PropertyDescriptor.t_of_js
            (Ojs.get_prop (t_to_js x4072) (Ojs.string_to_js x4073))
    let (set : t -> string -> PropertyDescriptor.t -> unit) =
      fun (x4074 : t) ->
        fun (x4075 : string) ->
          fun (x4076 : PropertyDescriptor.t) ->
            Ojs.set_prop (t_to_js x4074) (Ojs.string_to_js x4075)
              (PropertyDescriptor.t_to_js x4076)
  end
module AnonymousInterface30 =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x4078 : Ojs.t) -> x4078
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x4077 : Ojs.t) -> x4077
    let (get : 'T t -> string -> 'T) =
      fun (x4079 : 'T t) ->
        fun (x4081 : string) ->
          Obj.magic
            (Ojs.get_prop (t_to_js Obj.magic x4079) (Ojs.string_to_js x4081))
    let (set : 'T t -> string -> 'T -> unit) =
      fun (x4082 : 'T t) ->
        fun (x4084 : string) ->
          fun (x4085 : 'T) ->
            Ojs.set_prop (t_to_js Obj.magic x4082) (Ojs.string_to_js x4084)
              (Obj.magic x4085)
  end
module AnonymousInterface29 =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x4087 : Ojs.t) -> x4087
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x4086 : Ojs.t) -> x4086
    let (get : 'T t -> string -> 'T) =
      fun (x4088 : 'T t) ->
        fun (x4090 : string) ->
          Obj.magic
            (Ojs.get_prop (t_to_js Obj.magic x4088) (Ojs.string_to_js x4090))
    let (set : 'T t -> string -> 'T -> unit) =
      fun (x4091 : 'T t) ->
        fun (x4093 : string) ->
          fun (x4094 : 'T) ->
            Ojs.set_prop (t_to_js Obj.magic x4091) (Ojs.string_to_js x4093)
              (Obj.magic x4094)
  end
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4096 : Ojs.t) -> x4096
    and t_to_js : t -> Ojs.t = fun (x4095 : Ojs.t) -> x4095
  end
module Object =
  struct
    type t = [ `Object ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4098 : Ojs.t) -> t_of_js x4098
    and t_0_to_js : t_0 -> Ojs.t = fun (x4097 : t) -> t_to_js x4097
    type tags = [ `Object ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Object ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4101 : Ojs.t) -> intf_of_js __tags_of_js x4101
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4099 : __tags intf) -> intf_to_js __tags_to_js x4099
    let (get_constructor : 'tags this -> Function.t) =
      fun (x4103 : 'tags this) ->
        Function.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4103) "constructor")
    let (set_constructor : 'tags this -> Function.t -> unit) =
      fun (x4105 : 'tags this) ->
        fun (x4106 : Function.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4105) "constructor"
            (Function.t_to_js x4106)
    let (toString : 'tags this -> string) =
      fun (x4108 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4108) "toString" [||])
    let (toLocaleString : 'tags this -> string) =
      fun (x4110 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4110) "toLocaleString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x4112 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4112) "valueOf" [||])
    let (hasOwnProperty : 'tags this -> v:PropertyKey.t -> bool) =
      fun (x4115 : 'tags this) ->
        fun ~v:(x4114 : PropertyKey.t) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4115) "hasOwnProperty"
               [|(PropertyKey.t_to_js x4114)|])
    let (isPrototypeOf : 'tags this -> v:t -> bool) =
      fun (x4118 : 'tags this) ->
        fun ~v:(x4117 : t) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4118) "isPrototypeOf"
               [|(t_to_js x4117)|])
    let (propertyIsEnumerable : 'tags this -> v:PropertyKey.t -> bool) =
      fun (x4121 : 'tags this) ->
        fun ~v:(x4120 : PropertyKey.t) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4121) "propertyIsEnumerable"
               [|(PropertyKey.t_to_js x4120)|])
    let (values :
      ('T ArrayLike.t, 'T AnonymousInterface30.t) union2 -> 'T list) =
      fun (x4123 : ('T ArrayLike.t, 'T AnonymousInterface30.t) union2) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "values"
             [|(union2_to_js
                  (fun (x4124 : 'T ArrayLike.t) ->
                     ArrayLike.t_to_js Obj.magic x4124)
                  (fun (x4126 : 'T AnonymousInterface30.t) ->
                     AnonymousInterface30.t_to_js Obj.magic x4126) x4123)|])
    let (values' : AnonymousInterface0.t -> any list) =
      fun (x4129 : AnonymousInterface0.t) ->
        Ojs.list_of_js any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "values"
             [|(AnonymousInterface0.t_to_js x4129)|])
    let (entries :
      ('T ArrayLike.t, 'T AnonymousInterface30.t) union2 ->
        (string * 'T) list)
      =
      fun (x4131 : ('T ArrayLike.t, 'T AnonymousInterface30.t) union2) ->
        Ojs.list_of_js
          (fun (x4136 : Ojs.t) ->
             let x4137 = x4136 in
             ((Ojs.string_of_js (Ojs.array_get x4137 0)),
               (Obj.magic (Ojs.array_get x4137 1))))
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "entries"
             [|(union2_to_js
                  (fun (x4132 : 'T ArrayLike.t) ->
                     ArrayLike.t_to_js Obj.magic x4132)
                  (fun (x4134 : 'T AnonymousInterface30.t) ->
                     AnonymousInterface30.t_to_js Obj.magic x4134) x4131)|])
    let (entries' : AnonymousInterface0.t -> (string * any) list) =
      fun (x4138 : AnonymousInterface0.t) ->
        Ojs.list_of_js
          (fun (x4139 : Ojs.t) ->
             let x4140 = x4139 in
             ((Ojs.string_of_js (Ojs.array_get x4140 0)),
               (any_of_js (Ojs.array_get x4140 1))))
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "entries"
             [|(AnonymousInterface0.t_to_js x4138)|])
    let (getOwnPropertyDescriptors :
      'T -> (any, AnonymousInterface7.t) intersection2) =
      fun (x4141 : 'T) ->
        intersection2_of_js any_of_js AnonymousInterface7.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
             "getOwnPropertyDescriptors" [|(Obj.magic x4141)|])
    let (assign : target:'T -> source:'U -> ('T, 'U) intersection2) =
      fun ~target:(x4144 : 'T) ->
        fun ~source:(x4145 : 'U) ->
          intersection2_of_js Obj.magic Obj.magic
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "assign"
               [|(Obj.magic x4144);(Obj.magic x4145)|])
    let (assign' :
      target:'T -> source1:'U -> source2:'V -> ('T, 'U, 'V) intersection3) =
      fun ~target:(x4148 : 'T) ->
        fun ~source1:(x4149 : 'U) ->
          fun ~source2:(x4150 : 'V) ->
            intersection3_of_js Obj.magic Obj.magic Obj.magic
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "assign"
                 [|(Obj.magic x4148);(Obj.magic x4149);(Obj.magic x4150)|])
    let (assign'' :
      target:'T ->
        source1:'U ->
          source2:'V -> source3:'W -> ('T, 'U, 'V, 'W) intersection4)
      =
      fun ~target:(x4154 : 'T) ->
        fun ~source1:(x4155 : 'U) ->
          fun ~source2:(x4156 : 'V) ->
            fun ~source3:(x4157 : 'W) ->
              intersection4_of_js Obj.magic Obj.magic Obj.magic Obj.magic
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "assign"
                   [|(Obj.magic x4154);(Obj.magic x4155);(Obj.magic x4156);(
                     Obj.magic x4157)|])
    let (assign''' : target:untyped_object -> sources:any list -> any) =
      fun ~target:(x4162 : untyped_object) ->
        fun ~sources:(x4163 : any list) ->
          any_of_js
            (let x4166 = Ojs.get_prop_ascii Ojs.global "Object" in
             Ojs.call (Ojs.get_prop_ascii x4166 "assign") "apply"
               [|x4166;((let x4164 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x4164 "push"
                              [|(untyped_object_to_js x4162)|]);
                         List.iter
                           (fun (x4165 : any) ->
                              ignore
                                (Ojs.call x4164 "push" [|(any_to_js x4165)|]))
                           x4163;
                         x4164))|])
    let (getOwnPropertySymbols : any -> symbol list) =
      fun (x4167 : any) ->
        Ojs.list_of_js symbol_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
             "getOwnPropertySymbols" [|(any_to_js x4167)|])
    let (keys : AnonymousInterface0.t -> string list) =
      fun (x4169 : AnonymousInterface0.t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "keys"
             [|(AnonymousInterface0.t_to_js x4169)|])
    let (is : value1:any -> value2:any -> bool) =
      fun ~value1:(x4171 : any) ->
        fun ~value2:(x4172 : any) ->
          Ojs.bool_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "is"
               [|(any_to_js x4171);(any_to_js x4172)|])
    let (setPrototypeOf : o:any -> proto:untyped_object or_null -> any) =
      fun ~o:(x4173 : any) ->
        fun ~proto:(x4174 : untyped_object or_null) ->
          any_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
               "setPrototypeOf"
               [|(any_to_js x4173);(or_null_to_js untyped_object_to_js x4174)|])
    let (fromEntries :
      (PropertyKey.t * 'T) Iterable.t -> 'T AnonymousInterface29.t) =
      fun (x4176 : (PropertyKey.t * 'T) Iterable.t) ->
        AnonymousInterface29.t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "fromEntries"
             [|(Iterable.t_to_js
                  (fun (x4177 : (PropertyKey.t * 'T)) ->
                     let (x4178, x4179) = x4177 in
                     let x4180 = Ojs.array_make 2 in
                     Ojs.array_set x4180 0 (PropertyKey.t_to_js x4178);
                     Ojs.array_set x4180 1 (Obj.magic x4179);
                     x4180) x4176)|])
    let (fromEntries' : any list Iterable.t -> any) =
      fun (x4182 : any list Iterable.t) ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "fromEntries"
             [|(Iterable.t_to_js
                  (fun (x4183 : any list) -> Ojs.list_to_js any_to_js x4183)
                  x4182)|])
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x4185 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Object")
               (let x4186 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4185 with
                 | Some x4187 ->
                     ignore (Ojs.call x4186 "push" [|(any_to_js x4187)|])
                 | None -> ());
                x4186))
    let (invoke : unit -> any) =
      fun () ->
        any_of_js (Ojs.apply (Ojs.get_prop_ascii Ojs.global "Object") [||])
    let (invoke' : any -> any) =
      fun (x4188 : any) ->
        any_of_js
          (Ojs.apply (Ojs.get_prop_ascii Ojs.global "Object")
             [|(any_to_js x4188)|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Object")
             "prototype")
    let (getPrototypeOf : any -> any) =
      fun (x4189 : any) ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "getPrototypeOf"
             [|(any_to_js x4189)|])
    let (getOwnPropertyDescriptor :
      o:any -> p:PropertyKey.t -> PropertyDescriptor.t or_undefined) =
      fun ~o:(x4190 : any) ->
        fun ~p:(x4191 : PropertyKey.t) ->
          or_undefined_of_js PropertyDescriptor.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
               "getOwnPropertyDescriptor"
               [|(any_to_js x4190);(PropertyKey.t_to_js x4191)|])
    let (getOwnPropertyNames : any -> string list) =
      fun (x4193 : any) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
             "getOwnPropertyNames" [|(any_to_js x4193)|])
    let (create_ : untyped_object or_null -> any) =
      fun (x4195 : untyped_object or_null) ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "create"
             [|(or_null_to_js untyped_object_to_js x4195)|])
    let (create_' :
      o:untyped_object or_null ->
        properties:(PropertyDescriptorMap.t, any ThisType.t) intersection2 ->
          any)
      =
      fun ~o:(x4197 : untyped_object or_null) ->
        fun
          ~properties:(x4199 :
                        (PropertyDescriptorMap.t, any ThisType.t)
                          intersection2)
          ->
          any_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "create"
               [|(or_null_to_js untyped_object_to_js x4197);(intersection2_to_js
                                                               PropertyDescriptorMap.t_to_js
                                                               (fun
                                                                  (x4201 :
                                                                    any
                                                                    ThisType.t)
                                                                  ->
                                                                  ThisType.t_to_js
                                                                    any_to_js
                                                                    x4201)
                                                               x4199)|])
    let (defineProperty :
      o:'T ->
        p:PropertyKey.t ->
          attributes:(PropertyDescriptor.t, any ThisType.t) intersection2 ->
            'T)
      =
      fun ~o:(x4203 : 'T) ->
        fun ~p:(x4204 : PropertyKey.t) ->
          fun
            ~attributes:(x4205 :
                          (PropertyDescriptor.t, any ThisType.t)
                            intersection2)
            ->
            Obj.magic
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
                 "defineProperty"
                 [|(Obj.magic x4203);(PropertyKey.t_to_js x4204);(intersection2_to_js
                                                                    PropertyDescriptor.t_to_js
                                                                    (
                                                                    fun
                                                                    (x4207 :
                                                                    any
                                                                    ThisType.t)
                                                                    ->
                                                                    ThisType.t_to_js
                                                                    any_to_js
                                                                    x4207)
                                                                    x4205)|])
    let (defineProperties :
      o:'T ->
        properties:(PropertyDescriptorMap.t, any ThisType.t) intersection2 ->
          'T)
      =
      fun ~o:(x4209 : 'T) ->
        fun
          ~properties:(x4210 :
                        (PropertyDescriptorMap.t, any ThisType.t)
                          intersection2)
          ->
          Obj.magic
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
               "defineProperties"
               [|(Obj.magic x4209);(intersection2_to_js
                                      PropertyDescriptorMap.t_to_js
                                      (fun (x4212 : any ThisType.t) ->
                                         ThisType.t_to_js any_to_js x4212)
                                      x4210)|])
    let (seal : 'T -> 'T) =
      fun (x4214 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "seal"
             [|(Obj.magic x4214)|])
    let (freeze : 'T list -> 'T list) =
      fun (x4215 : 'T list) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "freeze"
             [|(Ojs.list_to_js Obj.magic x4215)|])
    let (freeze' : 'T -> 'T) =
      fun (x4218 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "freeze"
             [|(Obj.magic x4218)|])
    let (freeze'' : 'T -> 'T Readonly.t) =
      fun (x4219 : 'T) ->
        Readonly.t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "freeze"
             [|(Obj.magic x4219)|])
    let (preventExtensions : 'T -> 'T) =
      fun (x4221 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
             "preventExtensions" [|(Obj.magic x4221)|])
    let (isSealed : any -> bool) =
      fun (x4222 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "isSealed"
             [|(any_to_js x4222)|])
    let (isFrozen : any -> bool) =
      fun (x4223 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "isFrozen"
             [|(any_to_js x4223)|])
    let (isExtensible : any -> bool) =
      fun (x4224 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "isExtensible"
             [|(any_to_js x4224)|])
    let (keys' : untyped_object -> string list) =
      fun (x4225 : untyped_object) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "keys"
             [|(untyped_object_to_js x4225)|])
    let cast_from = Obj.magic
  end
module PropertyDecorator =
  struct
    type t = [ `PropertyDecorator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4228 : Ojs.t) -> t_of_js x4228
    and t_0_to_js : t_0 -> Ojs.t = fun (x4227 : t) -> t_to_js x4227
    type tags = [ `PropertyDecorator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PropertyDecorator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4231 : Ojs.t) -> intf_of_js __tags_of_js x4231
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4229 : __tags intf) -> intf_to_js __tags_to_js x4229
    let (apply :
      'tags this -> target:Object.t -> propertyKey:symbol or_string -> unit)
      =
      fun (x4236 : 'tags this) ->
        fun ~target:(x4233 : Object.t) ->
          fun ~propertyKey:(x4234 : symbol or_string) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic x4236)
                 [|(Object.t_to_js x4233);(or_string_to_js symbol_to_js x4234)|])
    let cast_from = Obj.magic
  end
module PromiseLike =
  struct
    type 'T t = [ `PromiseLike of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4240 : Ojs.t) -> t_of_js __T_of_js x4240
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4238 : __T t) -> t_to_js __T_to_js x4238
    type 'T tags = [ `PromiseLike of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `PromiseLike of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4244 : Ojs.t) -> intf_of_js __tags_of_js x4244
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4242 : __tags intf) -> intf_to_js __tags_to_js x4242
    let (then_ :
      ('tags, 'T) this ->
        ?onfulfilled:('T -> ('TResult1, 'TResult1 t) union2)
          or_null_or_undefined ->
          ?onrejected:(any -> ('TResult2, 'TResult2 t) union2)
            or_null_or_undefined -> unit -> ('TResult1, 'TResult2) union2 t)
      =
      fun (x4261 : ('tags, 'T) this) ->
        fun
          ?onfulfilled:(x4246 :
                         ('T -> ('TResult1, 'TResult1 t) union2)
                           or_null_or_undefined option)
          ->
          fun
            ?onrejected:(x4247 :
                          (any -> ('TResult2, 'TResult2 t) union2)
                            or_null_or_undefined option)
            ->
            fun () ->
              t_of_js
                (fun (x4265 : Ojs.t) ->
                   union2_of_js Obj.magic Obj.magic x4265)
                (let x4264 = this_to_js Obj.magic Obj.magic x4261 in
                 Ojs.call (Ojs.get_prop_ascii x4264 "then") "apply"
                   [|x4264;((let x4248 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4246 with
                              | Some x4255 ->
                                  ignore
                                    (Ojs.call x4248 "push"
                                       [|(or_null_or_undefined_to_js
                                            (fun
                                               (x4256 :
                                                 'T ->
                                                   ('TResult1, 'TResult1 t)
                                                     union2)
                                               ->
                                               Ojs.fun_to_js 1
                                                 (fun (x4257 : Ojs.t) ->
                                                    union2_to_js Obj.magic
                                                      (fun
                                                         (x4259 :
                                                           'TResult1 t)
                                                         ->
                                                         t_to_js Obj.magic
                                                           x4259)
                                                      (x4256
                                                         (Obj.magic x4257))))
                                            x4255)|])
                              | None -> ());
                             (match x4247 with
                              | Some x4249 ->
                                  ignore
                                    (Ojs.call x4248 "push"
                                       [|(or_null_or_undefined_to_js
                                            (fun
                                               (x4250 :
                                                 any ->
                                                   ('TResult2, 'TResult2 t)
                                                     union2)
                                               ->
                                               Ojs.fun_to_js 1
                                                 (fun (x4251 : Ojs.t) ->
                                                    union2_to_js Obj.magic
                                                      (fun
                                                         (x4253 :
                                                           'TResult2 t)
                                                         ->
                                                         t_to_js Obj.magic
                                                           x4253)
                                                      (x4250
                                                         (any_of_js x4251))))
                                            x4249)|])
                              | None -> ());
                             x4248))|])
    let cast_from = Obj.magic
  end
module AnonymousInterface19 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4269 : Ojs.t) -> x4269
    and t_to_js : t -> Ojs.t = fun (x4268 : Ojs.t) -> x4268
    let (create :
      t ->
        executor:(resolve:(('T, 'T PromiseLike.t) union2 -> unit) ->
                    reject:(?reason:any -> unit -> unit) -> unit)
          -> 'T PromiseLike.t)
      =
      fun (x4280 : t) ->
        fun
          ~executor:(x4270 :
                      resolve:(('T, 'T PromiseLike.t) union2 -> unit) ->
                        reject:(?reason:any -> unit -> unit) -> unit)
          ->
          PromiseLike.t_of_js Obj.magic
            (Ojs.new_obj (t_to_js x4280)
               [|(Ojs.fun_to_js 2
                    (fun (x4271 : Ojs.t) ->
                       fun (x4276 : Ojs.t) ->
                         x4270
                           ~resolve:(fun
                                       (x4272 :
                                         ('T, 'T PromiseLike.t) union2)
                                       ->
                                       ignore
                                         (Ojs.apply x4271
                                            [|(union2_to_js Obj.magic
                                                 (fun
                                                    (x4274 :
                                                      'T PromiseLike.t)
                                                    ->
                                                    PromiseLike.t_to_js
                                                      Obj.magic x4274) x4272)|]))
                           ~reject:(fun ?reason:(x4277 : any option) ->
                                      fun () ->
                                        ignore
                                          (Ojs.call x4276 "apply"
                                             [|Ojs.null;((let x4278 =
                                                            Ojs.new_obj
                                                              (Ojs.get_prop_ascii
                                                                 Ojs.global
                                                                 "Array")
                                                              [||] in
                                                          (match x4277 with
                                                           | Some x4279 ->
                                                               ignore
                                                                 (Ojs.call
                                                                    x4278
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x4279)|])
                                                           | None -> ());
                                                          x4278))|]))))|])
  end
module PromiseConstructorLike =
  struct
    type t = AnonymousInterface19.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4283 : Ojs.t) -> AnonymousInterface19.t_of_js x4283
    and t_to_js : t -> Ojs.t =
      fun (x4282 : AnonymousInterface19.t) ->
        AnonymousInterface19.t_to_js x4282
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4285 : Ojs.t) -> t_of_js x4285
    and t_0_to_js : t_0 -> Ojs.t = fun (x4284 : t) -> t_to_js x4284
  end
module Parameters =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4287 : Ojs.t) -> any_of_js x4287
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x4286 : any) -> any_to_js x4286
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4290 : Ojs.t) -> t_of_js __T_of_js x4290
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4288 : __T t) -> t_to_js __T_to_js x4288
  end
module ParameterDecorator =
  struct
    type t = [ `ParameterDecorator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4293 : Ojs.t) -> t_of_js x4293
    and t_0_to_js : t_0 -> Ojs.t = fun (x4292 : t) -> t_to_js x4292
    type tags = [ `ParameterDecorator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ParameterDecorator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4296 : Ojs.t) -> intf_of_js __tags_of_js x4296
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4294 : __tags intf) -> intf_to_js __tags_to_js x4294
    let (apply :
      'tags this ->
        target:Object.t ->
          propertyKey:symbol or_string -> parameterIndex:float -> unit)
      =
      fun (x4302 : 'tags this) ->
        fun ~target:(x4298 : Object.t) ->
          fun ~propertyKey:(x4299 : symbol or_string) ->
            fun ~parameterIndex:(x4301 : float) ->
              ignore
                (Ojs.apply (this_to_js Obj.magic x4302)
                   [|(Object.t_to_js x4298);(or_string_to_js symbol_to_js
                                               x4299);(Ojs.float_to_js x4301)|])
    let cast_from = Obj.magic
  end
module Pick =
  struct
    type ('T, 'K) t = any
    let rec t_of_js :
      'T 'K . (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__K_of_js : Ojs.t -> __K) ->
          fun (x4305 : Ojs.t) -> any_of_js x4305
    and t_to_js :
      'T 'K . ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t -> Ojs.t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) ->
          fun (x4304 : any) -> any_to_js x4304
    type ('T, 'K) t_2 = ('T, 'K) t
    let rec t_2_of_js :
      'T 'K . (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t_2 = fun
      (type __T) -> fun (type __K) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__K_of_js : Ojs.t -> __K) ->
          fun (x4309 : Ojs.t) -> t_of_js __T_of_js __K_of_js x4309
    and t_2_to_js :
      'T 'K . ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t_2 -> Ojs.t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) ->
          fun (x4306 : (__T, __K) t) -> t_to_js __T_to_js __K_to_js x4306
  end
module Exclude =
  struct
    type ('T, 'U) t = any
    let rec t_of_js :
      'T 'U . (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__U_of_js : Ojs.t -> __U) ->
          fun (x4313 : Ojs.t) -> any_of_js x4313
    and t_to_js :
      'T 'U . ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t -> Ojs.t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__U_to_js : __U -> Ojs.t) ->
          fun (x4312 : any) -> any_to_js x4312
    type ('T, 'U) t_2 = ('T, 'U) t
    let rec t_2_of_js :
      'T 'U . (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t_2 = fun
      (type __T) -> fun (type __U) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__U_of_js : Ojs.t -> __U) ->
          fun (x4317 : Ojs.t) -> t_of_js __T_of_js __U_of_js x4317
    and t_2_to_js :
      'T 'U . ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t_2 -> Ojs.t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__U_to_js : __U -> Ojs.t) ->
          fun (x4314 : (__T, __U) t) -> t_to_js __T_to_js __U_to_js x4314
  end
module Omit =
  struct
    type ('T, 'K) t = ('T, (any, 'K) Exclude.t) Pick.t
    let rec t_of_js :
      'T 'K . (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__K_of_js : Ojs.t -> __K) ->
          fun (x4325 : Ojs.t) ->
            Pick.t_of_js __T_of_js
              (fun (x4327 : Ojs.t) ->
                 Exclude.t_of_js any_of_js __K_of_js x4327) x4325
    and t_to_js :
      'T 'K . ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t -> Ojs.t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) ->
          fun (x4320 : (__T, (any, __K) Exclude.t) Pick.t) ->
            Pick.t_to_js __T_to_js
              (fun (x4322 : (any, __K) Exclude.t) ->
                 Exclude.t_to_js any_to_js __K_to_js x4322) x4320
    type ('T, 'K) t_2 = ('T, 'K) t
    let rec t_2_of_js :
      'T 'K . (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t_2 = fun
      (type __T) -> fun (type __K) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__K_of_js : Ojs.t -> __K) ->
          fun (x4333 : Ojs.t) -> t_of_js __T_of_js __K_of_js x4333
    and t_2_to_js :
      'T 'K . ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t_2 -> Ojs.t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) ->
          fun (x4330 : (__T, __K) t) -> t_to_js __T_to_js __K_to_js x4330
  end
module Number =
  struct
    type t = [ `Number ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4337 : Ojs.t) -> t_of_js x4337
    and t_0_to_js : t_0 -> Ojs.t = fun (x4336 : t) -> t_to_js x4336
    type tags = [ `Number ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Number ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4340 : Ojs.t) -> intf_of_js __tags_of_js x4340
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4338 : __tags intf) -> intf_to_js __tags_to_js x4338
    let (toLocaleString :
      'tags this ->
        ?locales:string list or_string ->
          ?options:Intl.NumberFormatOptions.t -> unit -> string)
      =
      fun (x4349 : 'tags this) ->
        fun ?locales:(x4342 : string list or_string option) ->
          fun ?options:(x4343 : Intl.NumberFormatOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x4351 = this_to_js Obj.magic x4349 in
                 Ojs.call (Ojs.get_prop_ascii x4351 "toLocaleString") "apply"
                   [|x4351;((let x4344 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4342 with
                              | Some x4346 ->
                                  ignore
                                    (Ojs.call x4344 "push"
                                       [|(or_string_to_js
                                            (fun (x4347 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x4347)
                                            x4346)|])
                              | None -> ());
                             (match x4343 with
                              | Some x4345 ->
                                  ignore
                                    (Ojs.call x4344 "push"
                                       [|(Intl.NumberFormatOptions.t_to_js
                                            x4345)|])
                              | None -> ());
                             x4344))|])
    let (toString : 'tags this -> ?radix:float -> unit -> string) =
      fun (x4355 : 'tags this) ->
        fun ?radix:(x4352 : float option) ->
          fun () ->
            Ojs.string_of_js
              (let x4357 = this_to_js Obj.magic x4355 in
               Ojs.call (Ojs.get_prop_ascii x4357 "toString") "apply"
                 [|x4357;((let x4353 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4352 with
                            | Some x4354 ->
                                ignore
                                  (Ojs.call x4353 "push"
                                     [|(Ojs.float_to_js x4354)|])
                            | None -> ());
                           x4353))|])
    let (toFixed : 'tags this -> ?fractionDigits:float -> unit -> string) =
      fun (x4361 : 'tags this) ->
        fun ?fractionDigits:(x4358 : float option) ->
          fun () ->
            Ojs.string_of_js
              (let x4363 = this_to_js Obj.magic x4361 in
               Ojs.call (Ojs.get_prop_ascii x4363 "toFixed") "apply"
                 [|x4363;((let x4359 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4358 with
                            | Some x4360 ->
                                ignore
                                  (Ojs.call x4359 "push"
                                     [|(Ojs.float_to_js x4360)|])
                            | None -> ());
                           x4359))|])
    let (toExponential :
      'tags this -> ?fractionDigits:float -> unit -> string) =
      fun (x4367 : 'tags this) ->
        fun ?fractionDigits:(x4364 : float option) ->
          fun () ->
            Ojs.string_of_js
              (let x4369 = this_to_js Obj.magic x4367 in
               Ojs.call (Ojs.get_prop_ascii x4369 "toExponential") "apply"
                 [|x4369;((let x4365 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4364 with
                            | Some x4366 ->
                                ignore
                                  (Ojs.call x4365 "push"
                                     [|(Ojs.float_to_js x4366)|])
                            | None -> ());
                           x4365))|])
    let (toPrecision : 'tags this -> ?precision:float -> unit -> string) =
      fun (x4373 : 'tags this) ->
        fun ?precision:(x4370 : float option) ->
          fun () ->
            Ojs.string_of_js
              (let x4375 = this_to_js Obj.magic x4373 in
               Ojs.call (Ojs.get_prop_ascii x4375 "toPrecision") "apply"
                 [|x4375;((let x4371 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4370 with
                            | Some x4372 ->
                                ignore
                                  (Ojs.call x4371 "push"
                                     [|(Ojs.float_to_js x4372)|])
                            | None -> ());
                           x4371))|])
    let (valueOf : 'tags this -> float) =
      fun (x4376 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x4376) "valueOf" [||])
    let (epsilon : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
             "EPSILON")
    let (isFinite : unknown -> bool) =
      fun (x4378 : unknown) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Number") "isFinite"
             [|(unknown_to_js x4378)|])
    let (isInteger : unknown -> bool) =
      fun (x4379 : unknown) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Number") "isInteger"
             [|(unknown_to_js x4379)|])
    let (isNaN : unknown -> bool) =
      fun (x4380 : unknown) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Number") "isNaN"
             [|(unknown_to_js x4380)|])
    let (isSafeInteger : unknown -> bool) =
      fun (x4381 : unknown) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Number") "isSafeInteger"
             [|(unknown_to_js x4381)|])
    let (max_safe_integer : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
             "MAX_SAFE_INTEGER")
    let (min_safe_integer : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
             "MIN_SAFE_INTEGER")
    let (parseFloat : string -> float) =
      fun (x4382 : string) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Number") "parseFloat"
             [|(Ojs.string_to_js x4382)|])
    let (parseInt : string:string -> ?radix:float -> unit -> float) =
      fun ~string:(x4383 : string) ->
        fun ?radix:(x4384 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x4387 = Ojs.get_prop_ascii Ojs.global "Number" in
               Ojs.call (Ojs.get_prop_ascii x4387 "parseInt") "apply"
                 [|x4387;((let x4385 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4385 "push"
                                [|(Ojs.string_to_js x4383)|]);
                           (match x4384 with
                            | Some x4386 ->
                                ignore
                                  (Ojs.call x4385 "push"
                                     [|(Ojs.float_to_js x4386)|])
                            | None -> ());
                           x4385))|])
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x4388 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Number")
               (let x4389 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4388 with
                 | Some x4390 ->
                     ignore (Ojs.call x4389 "push" [|(any_to_js x4390)|])
                 | None -> ());
                x4389))
    let (invoke : ?value:any -> unit -> float) =
      fun ?value:(x4391 : any option) ->
        fun () ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Number") "apply"
               [|Ojs.null;((let x4392 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x4391 with
                             | Some x4393 ->
                                 ignore
                                   (Ojs.call x4392 "push"
                                      [|(any_to_js x4393)|])
                             | None -> ());
                            x4392))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
             "prototype")
    let (max_value : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
             "MAX_VALUE")
    let (min_value : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
             "MIN_VALUE")
    let (nan : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number") "NaN")
    let (negative_infinity : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
             "NEGATIVE_INFINITY")
    let (positive_infinity : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
             "POSITIVE_INFINITY")
    let cast_from = Obj.magic
  end
module NonNullable =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4395 : Ojs.t) -> any_of_js x4395
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x4394 : any) -> any_to_js x4394
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4398 : Ojs.t) -> t_of_js __T_of_js x4398
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4396 : __T t) -> t_to_js __T_to_js x4396
  end
module AnonymousInterface31 =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x4401 : Ojs.t) -> x4401
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x4400 : Ojs.t) -> x4400
    let (create : 'T t -> 'T) =
      fun (x4402 : 'T t) ->
        Obj.magic (Ojs.new_obj (t_to_js Obj.magic x4402) [||])
  end
module AnonymousInterface27 =
  struct
    type ('AX, 'R) t = Ojs.t
    let rec t_of_js :
      'AX 'R . (Ojs.t -> 'AX) -> (Ojs.t -> 'R) -> Ojs.t -> ('AX, 'R) t = fun
      (type __AX) -> fun (type __R) ->
      fun (__AX_of_js : Ojs.t -> __AX) ->
        fun (__R_of_js : Ojs.t -> __R) -> fun (x4405 : Ojs.t) -> x4405
    and t_to_js :
      'AX 'R . ('AX -> Ojs.t) -> ('R -> Ojs.t) -> ('AX, 'R) t -> Ojs.t = fun
      (type __AX) -> fun (type __R) ->
      fun (__AX_to_js : __AX -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) -> fun (x4404 : Ojs.t) -> x4404
    let (create : ('AX, 'R) t -> args:'AX list -> 'R) =
      fun (x4409 : ('AX, 'R) t) ->
        fun ~args:(x4406 : 'AX list) ->
          Obj.magic
            (Ojs.new_obj_arr (t_to_js Obj.magic Obj.magic x4409)
               (let x4407 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x4408 : 'AX) ->
                     ignore (Ojs.call x4407 "push" [|(Obj.magic x4408)|]))
                  x4406;
                x4407))
  end
module AnonymousInterface26 =
  struct
    type ('A, 'T) t = Ojs.t
    let rec t_of_js :
      'A 'T . (Ojs.t -> 'A) -> (Ojs.t -> 'T) -> Ojs.t -> ('A, 'T) t = fun
      (type __A) -> fun (type __T) ->
      fun (__A_of_js : Ojs.t -> __A) ->
        fun (__T_of_js : Ojs.t -> __T) -> fun (x4413 : Ojs.t) -> x4413
    and t_to_js :
      'A 'T . ('A -> Ojs.t) -> ('T -> Ojs.t) -> ('A, 'T) t -> Ojs.t = fun
      (type __A) -> fun (type __T) ->
      fun (__A_to_js : __A -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) -> fun (x4412 : Ojs.t) -> x4412
    let (create : ('A, 'T) t -> args:any list -> 'T) =
      fun (x4417 : ('A, 'T) t) ->
        fun ~args:(x4414 : any list) ->
          Obj.magic
            (Ojs.new_obj_arr (t_to_js Obj.magic Obj.magic x4417)
               (let x4415 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x4416 : any) ->
                     ignore (Ojs.call x4415 "push" [|(any_to_js x4416)|]))
                  x4414;
                x4415))
  end
module AnonymousInterface25 =
  struct
    type ('A, 'R) t = Ojs.t
    let rec t_of_js :
      'A 'R . (Ojs.t -> 'A) -> (Ojs.t -> 'R) -> Ojs.t -> ('A, 'R) t = fun
      (type __A) -> fun (type __R) ->
      fun (__A_of_js : Ojs.t -> __A) ->
        fun (__R_of_js : Ojs.t -> __R) -> fun (x4421 : Ojs.t) -> x4421
    and t_to_js :
      'A 'R . ('A -> Ojs.t) -> ('R -> Ojs.t) -> ('A, 'R) t -> Ojs.t = fun
      (type __A) -> fun (type __R) ->
      fun (__A_to_js : __A -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) -> fun (x4420 : Ojs.t) -> x4420
    let (create : ('A, 'R) t -> args:any list -> 'R) =
      fun (x4425 : ('A, 'R) t) ->
        fun ~args:(x4422 : any list) ->
          Obj.magic
            (Ojs.new_obj_arr (t_to_js Obj.magic Obj.magic x4425)
               (let x4423 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x4424 : any) ->
                     ignore (Ojs.call x4423 "push" [|(any_to_js x4424)|]))
                  x4422;
                x4423))
  end
module AnonymousInterface24 =
  struct
    type ('A, 'A0, 'R) t = Ojs.t
    let rec t_of_js :
      'A 'A0 'R .
        (Ojs.t -> 'A) ->
          (Ojs.t -> 'A0) -> (Ojs.t -> 'R) -> Ojs.t -> ('A, 'A0, 'R) t
      = fun (type __A) -> fun (type __A0) -> fun (type __R) ->
      fun (__A_of_js : Ojs.t -> __A) ->
        fun (__A0_of_js : Ojs.t -> __A0) ->
          fun (__R_of_js : Ojs.t -> __R) -> fun (x4429 : Ojs.t) -> x4429
    and t_to_js :
      'A 'A0 'R .
        ('A -> Ojs.t) ->
          ('A0 -> Ojs.t) -> ('R -> Ojs.t) -> ('A, 'A0, 'R) t -> Ojs.t
      = fun (type __A) -> fun (type __A0) -> fun (type __R) ->
      fun (__A_to_js : __A -> Ojs.t) ->
        fun (__A0_to_js : __A0 -> Ojs.t) ->
          fun (__R_to_js : __R -> Ojs.t) -> fun (x4428 : Ojs.t) -> x4428
    let (create : ('A, 'A0, 'R) t -> arg0:'A0 -> args:any list -> 'R) =
      fun (x4434 : ('A, 'A0, 'R) t) ->
        fun ~arg0:(x4430 : 'A0) ->
          fun ~args:(x4431 : any list) ->
            Obj.magic
              (Ojs.new_obj_arr (t_to_js Obj.magic Obj.magic Obj.magic x4434)
                 (let x4432 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4432 "push" [|(Obj.magic x4430)|]);
                  List.iter
                    (fun (x4433 : any) ->
                       ignore (Ojs.call x4432 "push" [|(any_to_js x4433)|]))
                    x4431;
                  x4432))
  end
module AnonymousInterface23 =
  struct
    type ('A, 'A0, 'A1, 'R) t = Ojs.t
    let rec t_of_js :
      'A 'A0 'A1 'R .
        (Ojs.t -> 'A) ->
          (Ojs.t -> 'A0) ->
            (Ojs.t -> 'A1) -> (Ojs.t -> 'R) -> Ojs.t -> ('A, 'A0, 'A1, 'R) t
      = fun (type __A) -> fun (type __A0) -> fun (type __A1) -> fun (type
      __R) ->
      fun (__A_of_js : Ojs.t -> __A) ->
        fun (__A0_of_js : Ojs.t -> __A0) ->
          fun (__A1_of_js : Ojs.t -> __A1) ->
            fun (__R_of_js : Ojs.t -> __R) -> fun (x4439 : Ojs.t) -> x4439
    and t_to_js :
      'A 'A0 'A1 'R .
        ('A -> Ojs.t) ->
          ('A0 -> Ojs.t) ->
            ('A1 -> Ojs.t) -> ('R -> Ojs.t) -> ('A, 'A0, 'A1, 'R) t -> Ojs.t
      = fun (type __A) -> fun (type __A0) -> fun (type __A1) -> fun (type
      __R) ->
      fun (__A_to_js : __A -> Ojs.t) ->
        fun (__A0_to_js : __A0 -> Ojs.t) ->
          fun (__A1_to_js : __A1 -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) -> fun (x4438 : Ojs.t) -> x4438
    let (create :
      ('A, 'A0, 'A1, 'R) t -> arg0:'A0 -> arg1:'A1 -> args:any list -> 'R) =
      fun (x4445 : ('A, 'A0, 'A1, 'R) t) ->
        fun ~arg0:(x4440 : 'A0) ->
          fun ~arg1:(x4441 : 'A1) ->
            fun ~args:(x4442 : any list) ->
              Obj.magic
                (Ojs.new_obj_arr
                   (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic x4445)
                   (let x4443 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore (Ojs.call x4443 "push" [|(Obj.magic x4440)|]);
                    ignore (Ojs.call x4443 "push" [|(Obj.magic x4441)|]);
                    List.iter
                      (fun (x4444 : any) ->
                         ignore (Ojs.call x4443 "push" [|(any_to_js x4444)|]))
                      x4442;
                    x4443))
  end
module AnonymousInterface22 =
  struct
    type ('A, 'A0, 'A1, 'A2, 'R) t = Ojs.t
    let rec t_of_js :
      'A 'A0 'A1 'A2 'R .
        (Ojs.t -> 'A) ->
          (Ojs.t -> 'A0) ->
            (Ojs.t -> 'A1) ->
              (Ojs.t -> 'A2) ->
                (Ojs.t -> 'R) -> Ojs.t -> ('A, 'A0, 'A1, 'A2, 'R) t
      = fun (type __A) -> fun (type __A0) -> fun (type __A1) -> fun (type
      __A2) -> fun (type __R) ->
      fun (__A_of_js : Ojs.t -> __A) ->
        fun (__A0_of_js : Ojs.t -> __A0) ->
          fun (__A1_of_js : Ojs.t -> __A1) ->
            fun (__A2_of_js : Ojs.t -> __A2) ->
              fun (__R_of_js : Ojs.t -> __R) -> fun (x4451 : Ojs.t) -> x4451
    and t_to_js :
      'A 'A0 'A1 'A2 'R .
        ('A -> Ojs.t) ->
          ('A0 -> Ojs.t) ->
            ('A1 -> Ojs.t) ->
              ('A2 -> Ojs.t) ->
                ('R -> Ojs.t) -> ('A, 'A0, 'A1, 'A2, 'R) t -> Ojs.t
      = fun (type __A) -> fun (type __A0) -> fun (type __A1) -> fun (type
      __A2) -> fun (type __R) ->
      fun (__A_to_js : __A -> Ojs.t) ->
        fun (__A0_to_js : __A0 -> Ojs.t) ->
          fun (__A1_to_js : __A1 -> Ojs.t) ->
            fun (__A2_to_js : __A2 -> Ojs.t) ->
              fun (__R_to_js : __R -> Ojs.t) -> fun (x4450 : Ojs.t) -> x4450
    let (create :
      ('A, 'A0, 'A1, 'A2, 'R) t ->
        arg0:'A0 -> arg1:'A1 -> arg2:'A2 -> args:any list -> 'R)
      =
      fun (x4458 : ('A, 'A0, 'A1, 'A2, 'R) t) ->
        fun ~arg0:(x4452 : 'A0) ->
          fun ~arg1:(x4453 : 'A1) ->
            fun ~arg2:(x4454 : 'A2) ->
              fun ~args:(x4455 : any list) ->
                Obj.magic
                  (Ojs.new_obj_arr
                     (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic
                        Obj.magic x4458)
                     (let x4456 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x4456 "push" [|(Obj.magic x4452)|]);
                      ignore (Ojs.call x4456 "push" [|(Obj.magic x4453)|]);
                      ignore (Ojs.call x4456 "push" [|(Obj.magic x4454)|]);
                      List.iter
                        (fun (x4457 : any) ->
                           ignore
                             (Ojs.call x4456 "push" [|(any_to_js x4457)|]))
                        x4455;
                      x4456))
  end
module AnonymousInterface21 =
  struct
    type ('A, 'A0, 'A1, 'A2, 'A3, 'R) t = Ojs.t
    let rec t_of_js :
      'A 'A0 'A1 'A2 'A3 'R .
        (Ojs.t -> 'A) ->
          (Ojs.t -> 'A0) ->
            (Ojs.t -> 'A1) ->
              (Ojs.t -> 'A2) ->
                (Ojs.t -> 'A3) ->
                  (Ojs.t -> 'R) -> Ojs.t -> ('A, 'A0, 'A1, 'A2, 'A3, 'R) t
      = fun (type __A) -> fun (type __A0) -> fun (type __A1) -> fun (type
      __A2) -> fun (type __A3) -> fun (type __R) ->
      fun (__A_of_js : Ojs.t -> __A) ->
        fun (__A0_of_js : Ojs.t -> __A0) ->
          fun (__A1_of_js : Ojs.t -> __A1) ->
            fun (__A2_of_js : Ojs.t -> __A2) ->
              fun (__A3_of_js : Ojs.t -> __A3) ->
                fun (__R_of_js : Ojs.t -> __R) ->
                  fun (x4465 : Ojs.t) -> x4465
    and t_to_js :
      'A 'A0 'A1 'A2 'A3 'R .
        ('A -> Ojs.t) ->
          ('A0 -> Ojs.t) ->
            ('A1 -> Ojs.t) ->
              ('A2 -> Ojs.t) ->
                ('A3 -> Ojs.t) ->
                  ('R -> Ojs.t) -> ('A, 'A0, 'A1, 'A2, 'A3, 'R) t -> Ojs.t
      = fun (type __A) -> fun (type __A0) -> fun (type __A1) -> fun (type
      __A2) -> fun (type __A3) -> fun (type __R) ->
      fun (__A_to_js : __A -> Ojs.t) ->
        fun (__A0_to_js : __A0 -> Ojs.t) ->
          fun (__A1_to_js : __A1 -> Ojs.t) ->
            fun (__A2_to_js : __A2 -> Ojs.t) ->
              fun (__A3_to_js : __A3 -> Ojs.t) ->
                fun (__R_to_js : __R -> Ojs.t) ->
                  fun (x4464 : Ojs.t) -> x4464
    let (create :
      ('A, 'A0, 'A1, 'A2, 'A3, 'R) t ->
        arg0:'A0 -> arg1:'A1 -> arg2:'A2 -> arg3:'A3 -> args:any list -> 'R)
      =
      fun (x4473 : ('A, 'A0, 'A1, 'A2, 'A3, 'R) t) ->
        fun ~arg0:(x4466 : 'A0) ->
          fun ~arg1:(x4467 : 'A1) ->
            fun ~arg2:(x4468 : 'A2) ->
              fun ~arg3:(x4469 : 'A3) ->
                fun ~args:(x4470 : any list) ->
                  Obj.magic
                    (Ojs.new_obj_arr
                       (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic
                          Obj.magic Obj.magic x4473)
                       (let x4471 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore (Ojs.call x4471 "push" [|(Obj.magic x4466)|]);
                        ignore (Ojs.call x4471 "push" [|(Obj.magic x4467)|]);
                        ignore (Ojs.call x4471 "push" [|(Obj.magic x4468)|]);
                        ignore (Ojs.call x4471 "push" [|(Obj.magic x4469)|]);
                        List.iter
                          (fun (x4472 : any) ->
                             ignore
                               (Ojs.call x4471 "push" [|(any_to_js x4472)|]))
                          x4470;
                        x4471))
  end
module NewableFunction =
  struct
    type t = [ `Function  | `Function  | `NewableFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4481 : Ojs.t) -> t_of_js x4481
    and t_0_to_js : t_0 -> Ojs.t = fun (x4480 : t) -> t_to_js x4480
    type tags = [ `Function  | `Function  | `NewableFunction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NewableFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4484 : Ojs.t) -> intf_of_js __tags_of_js x4484
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4482 : __tags intf) -> intf_to_js __tags_to_js x4482
    let (apply_ :
      'tags this -> this:'T AnonymousInterface31.t -> thisArg:'T -> unit) =
      fun (x4489 : 'tags this) ->
        fun ~this:(x4486 : 'T AnonymousInterface31.t) ->
          fun ~thisArg:(x4488 : 'T) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4489) "apply"
                 [|(AnonymousInterface31.t_to_js Obj.magic x4486);(Obj.magic
                                                                    x4488)|])
    let (apply_' :
      'tags this ->
        this:('A, 'T) AnonymousInterface26.t -> thisArg:'T -> args:'A -> unit)
      =
      fun (x4496 : 'tags this) ->
        fun ~this:(x4491 : ('A, 'T) AnonymousInterface26.t) ->
          fun ~thisArg:(x4494 : 'T) ->
            fun ~args:(x4495 : 'A) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x4496) "apply"
                   [|(AnonymousInterface26.t_to_js Obj.magic Obj.magic x4491);(
                     Obj.magic x4494);(Obj.magic x4495)|])
    let (call :
      'tags this ->
        this:('A, 'T) AnonymousInterface26.t ->
          thisArg:'T -> args:any list -> unit)
      =
      fun (x4505 : 'tags this) ->
        fun ~this:(x4498 : ('A, 'T) AnonymousInterface26.t) ->
          fun ~thisArg:(x4499 : 'T) ->
            fun ~args:(x4500 : any list) ->
              ignore
                (let x4507 = this_to_js Obj.magic x4505 in
                 Ojs.call (Ojs.get_prop_ascii x4507 "call") "apply"
                   [|x4507;((let x4501 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4501 "push"
                                  [|(AnonymousInterface26.t_to_js Obj.magic
                                       Obj.magic x4498)|]);
                             ignore
                               (Ojs.call x4501 "push" [|(Obj.magic x4499)|]);
                             List.iter
                               (fun (x4502 : any) ->
                                  ignore
                                    (Ojs.call x4501 "push"
                                       [|(any_to_js x4502)|])) x4500;
                             x4501))|])
    let (bind : 'tags this -> this:'T -> thisArg:any -> 'T) =
      fun (x4510 : 'tags this) ->
        fun ~this:(x4508 : 'T) ->
          fun ~thisArg:(x4509 : any) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x4510) "bind"
                 [|(Obj.magic x4508);(any_to_js x4509)|])
    let (bind' :
      'tags this ->
        this:('A, 'A0, 'R) AnonymousInterface24.t ->
          thisArg:any -> arg0:'A0 -> ('A, 'R) AnonymousInterface25.t)
      =
      fun (x4518 : 'tags this) ->
        fun ~this:(x4512 : ('A, 'A0, 'R) AnonymousInterface24.t) ->
          fun ~thisArg:(x4516 : any) ->
            fun ~arg0:(x4517 : 'A0) ->
              AnonymousInterface25.t_of_js Obj.magic Obj.magic
                (Ojs.call (this_to_js Obj.magic x4518) "bind"
                   [|(AnonymousInterface24.t_to_js Obj.magic Obj.magic
                        Obj.magic x4512);(any_to_js x4516);(Obj.magic x4517)|])
    let (bind'' :
      'tags this ->
        this:('A, 'A0, 'A1, 'R) AnonymousInterface23.t ->
          thisArg:any ->
            arg0:'A0 -> arg1:'A1 -> ('A, 'R) AnonymousInterface25.t)
      =
      fun (x4530 : 'tags this) ->
        fun ~this:(x4522 : ('A, 'A0, 'A1, 'R) AnonymousInterface23.t) ->
          fun ~thisArg:(x4527 : any) ->
            fun ~arg0:(x4528 : 'A0) ->
              fun ~arg1:(x4529 : 'A1) ->
                AnonymousInterface25.t_of_js Obj.magic Obj.magic
                  (Ojs.call (this_to_js Obj.magic x4530) "bind"
                     [|(AnonymousInterface23.t_to_js Obj.magic Obj.magic
                          Obj.magic Obj.magic x4522);(any_to_js x4527);(
                       Obj.magic x4528);(Obj.magic x4529)|])
    let (bind''' :
      'tags this ->
        this:('A, 'A0, 'A1, 'A2, 'R) AnonymousInterface22.t ->
          thisArg:any ->
            arg0:'A0 ->
              arg1:'A1 -> arg2:'A2 -> ('A, 'R) AnonymousInterface25.t)
      =
      fun (x4544 : 'tags this) ->
        fun ~this:(x4534 : ('A, 'A0, 'A1, 'A2, 'R) AnonymousInterface22.t) ->
          fun ~thisArg:(x4540 : any) ->
            fun ~arg0:(x4541 : 'A0) ->
              fun ~arg1:(x4542 : 'A1) ->
                fun ~arg2:(x4543 : 'A2) ->
                  AnonymousInterface25.t_of_js Obj.magic Obj.magic
                    (Ojs.call (this_to_js Obj.magic x4544) "bind"
                       [|(AnonymousInterface22.t_to_js Obj.magic Obj.magic
                            Obj.magic Obj.magic Obj.magic x4534);(any_to_js
                                                                    x4540);(
                         Obj.magic x4541);(Obj.magic x4542);(Obj.magic x4543)|])
    let (bind'''' :
      'tags this ->
        this:('A, 'A0, 'A1, 'A2, 'A3, 'R) AnonymousInterface21.t ->
          thisArg:any ->
            arg0:'A0 ->
              arg1:'A1 ->
                arg2:'A2 -> arg3:'A3 -> ('A, 'R) AnonymousInterface25.t)
      =
      fun (x4560 : 'tags this) ->
        fun
          ~this:(x4548 : ('A, 'A0, 'A1, 'A2, 'A3, 'R) AnonymousInterface21.t)
          ->
          fun ~thisArg:(x4555 : any) ->
            fun ~arg0:(x4556 : 'A0) ->
              fun ~arg1:(x4557 : 'A1) ->
                fun ~arg2:(x4558 : 'A2) ->
                  fun ~arg3:(x4559 : 'A3) ->
                    AnonymousInterface25.t_of_js Obj.magic Obj.magic
                      (Ojs.call (this_to_js Obj.magic x4560) "bind"
                         [|(AnonymousInterface21.t_to_js Obj.magic Obj.magic
                              Obj.magic Obj.magic Obj.magic Obj.magic x4548);(
                           any_to_js x4555);(Obj.magic x4556);(Obj.magic
                                                                 x4557);(
                           Obj.magic x4558);(Obj.magic x4559)|])
    let (bind''''' :
      'tags this ->
        this:('AX, 'R) AnonymousInterface27.t ->
          thisArg:any -> args:'AX list -> ('AX, 'R) AnonymousInterface27.t)
      =
      fun (x4571 : 'tags this) ->
        fun ~this:(x4564 : ('AX, 'R) AnonymousInterface27.t) ->
          fun ~thisArg:(x4565 : any) ->
            fun ~args:(x4566 : 'AX list) ->
              AnonymousInterface27.t_of_js Obj.magic Obj.magic
                (let x4573 = this_to_js Obj.magic x4571 in
                 Ojs.call (Ojs.get_prop_ascii x4573 "bind") "apply"
                   [|x4573;((let x4567 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4567 "push"
                                  [|(AnonymousInterface27.t_to_js Obj.magic
                                       Obj.magic x4564)|]);
                             ignore
                               (Ojs.call x4567 "push" [|(any_to_js x4565)|]);
                             List.iter
                               (fun (x4568 : 'AX) ->
                                  ignore
                                    (Ojs.call x4567 "push"
                                       [|(Obj.magic x4568)|])) x4566;
                             x4567))|])
    let cast_from = Obj.magic
  end
module TypedPropertyDescriptor =
  struct
    type 'T t = [ `TypedPropertyDescriptor of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4578 : Ojs.t) -> t_of_js __T_of_js x4578
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4576 : __T t) -> t_to_js __T_to_js x4576
    type 'T tags = [ `TypedPropertyDescriptor of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `TypedPropertyDescriptor of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4582 : Ojs.t) -> intf_of_js __tags_of_js x4582
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4580 : __tags intf) -> intf_to_js __tags_to_js x4580
    let (get_enumerable : ('tags, 'T) this -> bool) =
      fun (x4584 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4584)
             "enumerable")
    let (set_enumerable : ('tags, 'T) this -> bool -> unit) =
      fun (x4587 : ('tags, 'T) this) ->
        fun (x4588 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x4587)
            "enumerable" (Ojs.bool_to_js x4588)
    let (get_configurable : ('tags, 'T) this -> bool) =
      fun (x4591 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4591)
             "configurable")
    let (set_configurable : ('tags, 'T) this -> bool -> unit) =
      fun (x4594 : ('tags, 'T) this) ->
        fun (x4595 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x4594)
            "configurable" (Ojs.bool_to_js x4595)
    let (get_writable : ('tags, 'T) this -> bool) =
      fun (x4598 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4598)
             "writable")
    let (set_writable : ('tags, 'T) this -> bool -> unit) =
      fun (x4601 : ('tags, 'T) this) ->
        fun (x4602 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x4601)
            "writable" (Ojs.bool_to_js x4602)
    let (get_value : ('tags, 'T) this -> 'T) =
      fun (x4605 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4605) "value")
    let (set_value : ('tags, 'T) this -> 'T -> unit) =
      fun (x4608 : ('tags, 'T) this) ->
        fun (x4609 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x4608) "value"
            (Obj.magic x4609)
    let (get_ : ('tags, 'T) this -> 'T) =
      fun (x4612 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x4612) "get" [||])
    let (set_ : ('tags, 'T) this -> value:'T -> unit) =
      fun (x4616 : ('tags, 'T) this) ->
        fun ~value:(x4615 : 'T) ->
          ignore
            (Ojs.call (this_to_js Obj.magic Obj.magic x4616) "set"
               [|(Obj.magic x4615)|])
    let cast_from = Obj.magic
  end
module MethodDecorator =
  struct
    type t = [ `MethodDecorator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4620 : Ojs.t) -> t_of_js x4620
    and t_0_to_js : t_0 -> Ojs.t = fun (x4619 : t) -> t_to_js x4619
    type tags = [ `MethodDecorator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MethodDecorator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4623 : Ojs.t) -> intf_of_js __tags_of_js x4623
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4621 : __tags intf) -> intf_to_js __tags_to_js x4621
    let (apply :
      'tags this ->
        target:Object.t ->
          propertyKey:symbol or_string ->
            descriptor:'T TypedPropertyDescriptor.t ->
              (unit, 'T TypedPropertyDescriptor.t) union2)
      =
      fun (x4630 : 'tags this) ->
        fun ~target:(x4625 : Object.t) ->
          fun ~propertyKey:(x4626 : symbol or_string) ->
            fun ~descriptor:(x4628 : 'T TypedPropertyDescriptor.t) ->
              union2_of_js Ojs.unit_of_js
                (fun (x4633 : Ojs.t) ->
                   TypedPropertyDescriptor.t_of_js Obj.magic x4633)
                (Ojs.apply (this_to_js Obj.magic x4630)
                   [|(Object.t_to_js x4625);(or_string_to_js symbol_to_js
                                               x4626);(TypedPropertyDescriptor.t_to_js
                                                         Obj.magic x4628)|])
    let cast_from = Obj.magic
  end
module Math =
  struct
    let (clz32 : float -> float) =
      fun (x4635 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "clz32"
             [|(Ojs.float_to_js x4635)|])
    let (imul : x:float -> y:float -> float) =
      fun ~x:(x4636 : float) ->
        fun ~y:(x4637 : float) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "imul"
               [|(Ojs.float_to_js x4636);(Ojs.float_to_js x4637)|])
    let (sign : float -> float) =
      fun (x4638 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "sign"
             [|(Ojs.float_to_js x4638)|])
    let (log10 : float -> float) =
      fun (x4639 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "log10"
             [|(Ojs.float_to_js x4639)|])
    let (log2 : float -> float) =
      fun (x4640 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "log2"
             [|(Ojs.float_to_js x4640)|])
    let (log1p : float -> float) =
      fun (x4641 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "log1p"
             [|(Ojs.float_to_js x4641)|])
    let (expm1 : float -> float) =
      fun (x4642 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "expm1"
             [|(Ojs.float_to_js x4642)|])
    let (cosh : float -> float) =
      fun (x4643 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "cosh"
             [|(Ojs.float_to_js x4643)|])
    let (sinh : float -> float) =
      fun (x4644 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "sinh"
             [|(Ojs.float_to_js x4644)|])
    let (tanh : float -> float) =
      fun (x4645 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "tanh"
             [|(Ojs.float_to_js x4645)|])
    let (acosh : float -> float) =
      fun (x4646 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "acosh"
             [|(Ojs.float_to_js x4646)|])
    let (asinh : float -> float) =
      fun (x4647 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "asinh"
             [|(Ojs.float_to_js x4647)|])
    let (atanh : float -> float) =
      fun (x4648 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "atanh"
             [|(Ojs.float_to_js x4648)|])
    let (hypot : float list -> float) =
      fun (x4649 : float list) ->
        Ojs.float_of_js
          (let x4652 = Ojs.get_prop_ascii Ojs.global "Math" in
           Ojs.call (Ojs.get_prop_ascii x4652 "hypot") "apply"
             [|x4652;((let x4650 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4651 : float) ->
                            ignore
                              (Ojs.call x4650 "push"
                                 [|(Ojs.float_to_js x4651)|])) x4649;
                       x4650))|])
    let (trunc : float -> float) =
      fun (x4653 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "trunc"
             [|(Ojs.float_to_js x4653)|])
    let (fround : float -> float) =
      fun (x4654 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "fround"
             [|(Ojs.float_to_js x4654)|])
    let (cbrt : float -> float) =
      fun (x4655 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "cbrt"
             [|(Ojs.float_to_js x4655)|])
    let (e : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "E")
    let (ln10 : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LN10")
    let (ln2 : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LN2")
    let (log2e : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LOG2E")
    let (log10e : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LOG10E")
    let (pi : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "PI")
    let (sqrt1_2 : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math")
             "SQRT1_2")
    let (sqrt2 : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "SQRT2")
    let (abs : float -> float) =
      fun (x4656 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "abs"
             [|(Ojs.float_to_js x4656)|])
    let (acos : float -> float) =
      fun (x4657 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "acos"
             [|(Ojs.float_to_js x4657)|])
    let (asin : float -> float) =
      fun (x4658 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "asin"
             [|(Ojs.float_to_js x4658)|])
    let (atan : float -> float) =
      fun (x4659 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "atan"
             [|(Ojs.float_to_js x4659)|])
    let (atan2 : y:float -> x:float -> float) =
      fun ~y:(x4660 : float) ->
        fun ~x:(x4661 : float) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "atan2"
               [|(Ojs.float_to_js x4660);(Ojs.float_to_js x4661)|])
    let (ceil : float -> float) =
      fun (x4662 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "ceil"
             [|(Ojs.float_to_js x4662)|])
    let (cos : float -> float) =
      fun (x4663 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "cos"
             [|(Ojs.float_to_js x4663)|])
    let (exp : float -> float) =
      fun (x4664 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "exp"
             [|(Ojs.float_to_js x4664)|])
    let (floor : float -> float) =
      fun (x4665 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "floor"
             [|(Ojs.float_to_js x4665)|])
    let (log : float -> float) =
      fun (x4666 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "log"
             [|(Ojs.float_to_js x4666)|])
    let (max : float list -> float) =
      fun (x4667 : float list) ->
        Ojs.float_of_js
          (let x4670 = Ojs.get_prop_ascii Ojs.global "Math" in
           Ojs.call (Ojs.get_prop_ascii x4670 "max") "apply"
             [|x4670;((let x4668 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4669 : float) ->
                            ignore
                              (Ojs.call x4668 "push"
                                 [|(Ojs.float_to_js x4669)|])) x4667;
                       x4668))|])
    let (min : float list -> float) =
      fun (x4671 : float list) ->
        Ojs.float_of_js
          (let x4674 = Ojs.get_prop_ascii Ojs.global "Math" in
           Ojs.call (Ojs.get_prop_ascii x4674 "min") "apply"
             [|x4674;((let x4672 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4673 : float) ->
                            ignore
                              (Ojs.call x4672 "push"
                                 [|(Ojs.float_to_js x4673)|])) x4671;
                       x4672))|])
    let (pow : x:float -> y:float -> float) =
      fun ~x:(x4675 : float) ->
        fun ~y:(x4676 : float) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "pow"
               [|(Ojs.float_to_js x4675);(Ojs.float_to_js x4676)|])
    let (random : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "random" [||])
    let (round : float -> float) =
      fun (x4677 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "round"
             [|(Ojs.float_to_js x4677)|])
    let (sin : float -> float) =
      fun (x4678 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "sin"
             [|(Ojs.float_to_js x4678)|])
    let (sqrt : float -> float) =
      fun (x4679 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "sqrt"
             [|(Ojs.float_to_js x4679)|])
    let (tan : float -> float) =
      fun (x4680 : float) ->
        Ojs.float_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "tan"
             [|(Ojs.float_to_js x4680)|])
  end
module Map =
  struct
    type ('K, 'V) t =
      [ `IterableIterator of ('K * 'V) 
      | `Iterator of (('K * 'V) * any * never or_undefined) 
      | `Map of ('K * 'V) ] intf
    let rec t_of_js :
      'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t =
      fun _K -> fun _V -> Obj.magic
    and t_to_js :
      'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t =
      fun _K -> fun _V -> Obj.magic
    type ('K, 'V) t_2 = ('K, 'V) t
    let rec t_2_of_js :
      'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t_2 = fun
      (type __K) -> fun (type __V) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__V_of_js : Ojs.t -> __V) ->
          fun (x4684 : Ojs.t) -> t_of_js __K_of_js __V_of_js x4684
    and t_2_to_js :
      'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t_2 -> Ojs.t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__V_to_js : __V -> Ojs.t) ->
          fun (x4681 : (__K, __V) t) -> t_to_js __K_to_js __V_to_js x4681
    type ('K, 'V) tags =
      [ `IterableIterator of ('K * 'V) 
      | `Iterator of (('K * 'V) * any * never or_undefined) 
      | `Map of ('K * 'V) ]
    type ('K, 'V) tags_2 = ('K, 'V) tags
    type ('tags, 'K, 'V) this =
      'tags intf constraint 'tags = [> `Map of ('K * 'V) ]
    let rec this_of_js :
      'tags 'K 'V .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('tags, 'K, 'V) this
      = fun (type __tags) -> fun (type __K) -> fun (type __V) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__K_of_js : Ojs.t -> __K) ->
          fun (__V_of_js : Ojs.t -> __V) ->
            fun (x4689 : Ojs.t) -> intf_of_js __tags_of_js x4689
    and this_to_js :
      'tags 'K 'V .
        ('tags -> Ojs.t) ->
          ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('tags, 'K, 'V) this -> Ojs.t
      = fun (type __tags) -> fun (type __K) -> fun (type __V) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) ->
          fun (__V_to_js : __V -> Ojs.t) ->
            fun (x4687 : __tags intf) -> intf_to_js __tags_to_js x4687
    let (entries : ('tags, 'K, 'V) this -> ('K * 'V) IterableIterator.t) =
      fun (x4691 : ('tags, 'K, 'V) this) ->
        IterableIterator.t_of_js
          (fun (x4695 : Ojs.t) ->
             let x4696 = x4695 in
             ((Obj.magic (Ojs.array_get x4696 0)),
               (Obj.magic (Ojs.array_get x4696 1))))
          (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x4691)
             "entries" [||])
    let (keys : ('tags, 'K, 'V) this -> 'K IterableIterator.t) =
      fun (x4697 : ('tags, 'K, 'V) this) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x4697) "keys"
             [||])
    let (values : ('tags, 'K, 'V) this -> 'V IterableIterator.t) =
      fun (x4702 : ('tags, 'K, 'V) this) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x4702) "values"
             [||])
    let (clear : ('tags, 'K, 'V) this -> unit) =
      fun (x4707 : ('tags, 'K, 'V) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x4707) "clear"
             [||])
    let (delete : ('tags, 'K, 'V) this -> key:'K -> bool) =
      fun (x4712 : ('tags, 'K, 'V) this) ->
        fun ~key:(x4711 : 'K) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x4712)
               "delete" [|(Obj.magic x4711)|])
    let (forEach :
      ('tags, 'K, 'V) this ->
        callbackfn:(value:'V -> key:'K -> map:('K, 'V) t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4725 : ('tags, 'K, 'V) this) ->
        fun
          ~callbackfn:(x4716 : value:'V -> key:'K -> map:('K, 'V) t -> unit)
          ->
          fun ?thisArg:(x4717 : any option) ->
            fun () ->
              ignore
                (let x4729 = this_to_js Obj.magic Obj.magic Obj.magic x4725 in
                 Ojs.call (Ojs.get_prop_ascii x4729 "forEach") "apply"
                   [|x4729;((let x4718 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4718 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4720 : Ojs.t) ->
                                          fun (x4721 : Ojs.t) ->
                                            fun (x4722 : Ojs.t) ->
                                              x4716 ~value:(Obj.magic x4720)
                                                ~key:(Obj.magic x4721)
                                                ~map:(t_of_js Obj.magic
                                                        Obj.magic x4722)))|]);
                             (match x4717 with
                              | Some x4719 ->
                                  ignore
                                    (Ojs.call x4718 "push"
                                       [|(any_to_js x4719)|])
                              | None -> ());
                             x4718))|])
    let (get_ : ('tags, 'K, 'V) this -> key:'K -> 'V or_undefined) =
      fun (x4731 : ('tags, 'K, 'V) this) ->
        fun ~key:(x4730 : 'K) ->
          or_undefined_of_js Obj.magic
            (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x4731) "get"
               [|(Obj.magic x4730)|])
    let (has : ('tags, 'K, 'V) this -> key:'K -> bool) =
      fun (x4737 : ('tags, 'K, 'V) this) ->
        fun ~key:(x4736 : 'K) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x4737) "has"
               [|(Obj.magic x4736)|])
    let (set_ :
      ('tags, 'K, 'V) this -> key:'K -> value:'V -> ('tags, 'K, 'V) this) =
      fun (x4743 : ('tags, 'K, 'V) this) ->
        fun ~key:(x4741 : 'K) ->
          fun ~value:(x4742 : 'V) ->
            this_of_js Obj.magic Obj.magic Obj.magic
              (Ojs.call (this_to_js Obj.magic Obj.magic Obj.magic x4743)
                 "set" [|(Obj.magic x4741);(Obj.magic x4742)|])
    let (get_size : ('tags, 'K, 'V) this -> float) =
      fun (x4750 : ('tags, 'K, 'V) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x4750) "size")
    let (create : ('K * 'V) Iterable.t -> ('K, 'V) t) =
      fun (x4754 : ('K * 'V) Iterable.t) ->
        t_of_js Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Map")
             [|(Iterable.t_to_js
                  (fun (x4755 : ('K * 'V)) ->
                     let (x4756, x4757) = x4755 in
                     let x4758 = Ojs.array_make 2 in
                     Ojs.array_set x4758 0 (Obj.magic x4756);
                     Ojs.array_set x4758 1 (Obj.magic x4757);
                     x4758) x4754)|])
    let (create' : unit -> (any, any) t) =
      fun () ->
        t_of_js any_of_js any_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Map") [||])
    let (create'' : ?entries:('K * 'V) list or_null -> unit -> ('K, 'V) t) =
      fun ?entries:(x4763 : ('K * 'V) list or_null option) ->
        fun () ->
          t_of_js Obj.magic Obj.magic
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Map")
               (let x4764 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4763 with
                 | Some x4765 ->
                     ignore
                       (Ojs.call x4764 "push"
                          [|(or_null_to_js
                               (fun (x4766 : ('K * 'V) list) ->
                                  Ojs.list_to_js
                                    (fun (x4767 : ('K * 'V)) ->
                                       let (x4768, x4769) = x4767 in
                                       let x4770 = Ojs.array_make 2 in
                                       Ojs.array_set x4770 0
                                         (Obj.magic x4768);
                                       Ojs.array_set x4770 1
                                         (Obj.magic x4769);
                                       x4770) x4766) x4765)|])
                 | None -> ());
                x4764))
    let (prototype : unit -> (any, any) t) =
      fun () ->
        t_of_js any_of_js any_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Map")
             "prototype")
    let cast_from = Obj.magic
  end
module Lowercase =
  struct
    type 'S t = Ojs.t
    let rec t_of_js : 'S . (Ojs.t -> 'S) -> Ojs.t -> 'S t = fun (type __S) ->
      fun (__S_of_js : Ojs.t -> __S) -> fun (x4776 : Ojs.t) -> x4776
    and t_to_js : 'S . ('S -> Ojs.t) -> 'S t -> Ojs.t = fun (type __S) ->
      fun (__S_to_js : __S -> Ojs.t) -> fun (x4775 : Ojs.t) -> x4775
    type 'S t_1 = 'S t
    let rec t_1_of_js : 'S . (Ojs.t -> 'S) -> Ojs.t -> 'S t_1 = fun (type
      __S) ->
      fun (__S_of_js : Ojs.t -> __S) ->
        fun (x4779 : Ojs.t) -> t_of_js __S_of_js x4779
    and t_1_to_js : 'S . ('S -> Ojs.t) -> 'S t_1 -> Ojs.t = fun (type __S) ->
      fun (__S_to_js : __S -> Ojs.t) ->
        fun (x4777 : __S t) -> t_to_js __S_to_js x4777
  end
module JSON =
  struct
    let (parse :
      text:string ->
        ?reviver:(this:any -> key:string -> value:any -> any) -> unit -> any)
      =
      fun ~text:(x4781 : string) ->
        fun
          ?reviver:(x4782 :
                     (this:any -> key:string -> value:any -> any) option)
          ->
          fun () ->
            any_of_js
              (let x4788 = Ojs.get_prop_ascii Ojs.global "JSON" in
               Ojs.call (Ojs.get_prop_ascii x4788 "parse") "apply"
                 [|x4788;((let x4783 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4783 "push"
                                [|(Ojs.string_to_js x4781)|]);
                           (match x4782 with
                            | Some x4784 ->
                                ignore
                                  (Ojs.call x4783 "push"
                                     [|(Ojs.fun_to_js 3
                                          (fun (x4785 : Ojs.t) ->
                                             fun (x4786 : Ojs.t) ->
                                               fun (x4787 : Ojs.t) ->
                                                 any_to_js
                                                   (x4784
                                                      ~this:(any_of_js x4785)
                                                      ~key:(Ojs.string_of_js
                                                              x4786)
                                                      ~value:(any_of_js x4787))))|])
                            | None -> ());
                           x4783))|])
    let (stringify :
      value:any ->
        ?replacer:(this:any -> key:string -> value:any -> any) ->
          ?space:string or_number -> unit -> string)
      =
      fun ~value:(x4789 : any) ->
        fun
          ?replacer:(x4790 :
                      (this:any -> key:string -> value:any -> any) option)
          ->
          fun ?space:(x4791 : string or_number option) ->
            fun () ->
              Ojs.string_of_js
                (let x4799 = Ojs.get_prop_ascii Ojs.global "JSON" in
                 Ojs.call (Ojs.get_prop_ascii x4799 "stringify") "apply"
                   [|x4799;((let x4792 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4792 "push" [|(any_to_js x4789)|]);
                             (match x4790 with
                              | Some x4795 ->
                                  ignore
                                    (Ojs.call x4792 "push"
                                       [|(Ojs.fun_to_js 3
                                            (fun (x4796 : Ojs.t) ->
                                               fun (x4797 : Ojs.t) ->
                                                 fun (x4798 : Ojs.t) ->
                                                   any_to_js
                                                     (x4795
                                                        ~this:(any_of_js
                                                                 x4796)
                                                        ~key:(Ojs.string_of_js
                                                                x4797)
                                                        ~value:(any_of_js
                                                                  x4798))))|])
                              | None -> ());
                             (match x4791 with
                              | Some x4793 ->
                                  ignore
                                    (Ojs.call x4792 "push"
                                       [|(or_number_to_js Ojs.string_to_js
                                            x4793)|])
                              | None -> ());
                             x4792))|])
    let (stringify' :
      value:any ->
        ?replacer:string or_number list or_null ->
          ?space:string or_number -> unit -> string)
      =
      fun ~value:(x4800 : any) ->
        fun ?replacer:(x4801 : string or_number list or_null option) ->
          fun ?space:(x4802 : string or_number option) ->
            fun () ->
              Ojs.string_of_js
                (let x4810 = Ojs.get_prop_ascii Ojs.global "JSON" in
                 Ojs.call (Ojs.get_prop_ascii x4810 "stringify") "apply"
                   [|x4810;((let x4803 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4803 "push" [|(any_to_js x4800)|]);
                             (match x4801 with
                              | Some x4806 ->
                                  ignore
                                    (Ojs.call x4803 "push"
                                       [|(or_null_to_js
                                            (fun
                                               (x4807 :
                                                 string or_number list)
                                               ->
                                               Ojs.list_to_js
                                                 (fun
                                                    (x4808 :
                                                      string or_number)
                                                    ->
                                                    or_number_to_js
                                                      Ojs.string_to_js x4808)
                                                 x4807) x4806)|])
                              | None -> ());
                             (match x4802 with
                              | Some x4804 ->
                                  ignore
                                    (Ojs.call x4803 "push"
                                       [|(or_number_to_js Ojs.string_to_js
                                            x4804)|])
                              | None -> ());
                             x4803))|])
  end
module AnonymousInterface18 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4812 : Ojs.t) -> x4812
    and t_to_js : t -> Ojs.t = fun (x4811 : Ojs.t) -> x4811
    let (create : t -> args:any list -> any) =
      fun (x4816 : t) ->
        fun ~args:(x4813 : any list) ->
          any_of_js
            (Ojs.new_obj_arr (t_to_js x4816)
               (let x4814 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x4815 : any) ->
                     ignore (Ojs.call x4814 "push" [|(any_to_js x4815)|]))
                  x4813;
                x4814))
  end
module InstanceType =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4818 : Ojs.t) -> any_of_js x4818
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x4817 : any) -> any_to_js x4817
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4821 : Ojs.t) -> t_of_js __T_of_js x4821
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4819 : __T t) -> t_to_js __T_to_js x4819
  end
module ImportMeta =
  struct
    type t = [ `ImportMeta ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4824 : Ojs.t) -> t_of_js x4824
    and t_0_to_js : t_0 -> Ojs.t = fun (x4823 : t) -> t_to_js x4823
    type tags = [ `ImportMeta ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4827 : Ojs.t) -> intf_of_js __tags_of_js x4827
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4825 : __tags intf) -> intf_to_js __tags_to_js x4825
    let cast_from = Obj.magic
  end
module ImportAssertions =
  struct
    type t = [ `ImportAssertions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4830 : Ojs.t) -> t_of_js x4830
    and t_0_to_js : t_0 -> Ojs.t = fun (x4829 : t) -> t_to_js x4829
    type tags = [ `ImportAssertions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportAssertions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4833 : Ojs.t) -> intf_of_js __tags_of_js x4833
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4831 : __tags intf) -> intf_to_js __tags_to_js x4831
    let (get : 'tags this -> string -> string) =
      fun (x4835 : 'tags this) ->
        fun (x4837 : string) ->
          Ojs.string_of_js
            (Ojs.get_prop (this_to_js Obj.magic x4835)
               (Ojs.string_to_js x4837))
    let (set : 'tags this -> string -> string -> unit) =
      fun (x4838 : 'tags this) ->
        fun (x4840 : string) ->
          fun (x4841 : string) ->
            Ojs.set_prop (this_to_js Obj.magic x4838)
              (Ojs.string_to_js x4840) (Ojs.string_to_js x4841)
    let cast_from = Obj.magic
  end
module ImportCallOptions =
  struct
    type t = [ `ImportCallOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4843 : Ojs.t) -> t_of_js x4843
    and t_0_to_js : t_0 -> Ojs.t = fun (x4842 : t) -> t_to_js x4842
    type tags = [ `ImportCallOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportCallOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4846 : Ojs.t) -> intf_of_js __tags_of_js x4846
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4844 : __tags intf) -> intf_to_js __tags_to_js x4844
    let (get_assert : 'tags this -> ImportAssertions.t) =
      fun (x4848 : 'tags this) ->
        ImportAssertions.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4848) "assert")
    let (set_assert : 'tags this -> ImportAssertions.t -> unit) =
      fun (x4850 : 'tags this) ->
        fun (x4851 : ImportAssertions.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4850) "assert"
            (ImportAssertions.t_to_js x4851)
    let cast_from = Obj.magic
  end
module IArguments =
  struct
    type t =
      [ `ArrayLike of any  | `IArguments  | `IterableIterator of any 
      | `Iterator of (any * any * never or_undefined) ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4854 : Ojs.t) -> t_of_js x4854
    and t_0_to_js : t_0 -> Ojs.t = fun (x4853 : t) -> t_to_js x4853
    type tags =
      [ `ArrayLike of any  | `IArguments  | `IterableIterator of any 
      | `Iterator of (any * any * never or_undefined) ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IArguments ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4857 : Ojs.t) -> intf_of_js __tags_of_js x4857
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4855 : __tags intf) -> intf_to_js __tags_to_js x4855
    let (get : 'tags this -> float -> any) =
      fun (x4859 : 'tags this) ->
        fun (x4861 : float) ->
          any_of_js
            (Ojs.get_prop (this_to_js Obj.magic x4859)
               (Ojs.float_to_js x4861))
    let (set : 'tags this -> float -> any -> unit) =
      fun (x4862 : 'tags this) ->
        fun (x4864 : float) ->
          fun (x4865 : any) ->
            Ojs.set_prop (this_to_js Obj.magic x4862) (Ojs.float_to_js x4864)
              (any_to_js x4865)
    let (get_length : 'tags this -> float) =
      fun (x4866 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4866) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x4868 : 'tags this) ->
        fun (x4869 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4868) "length"
            (Ojs.float_to_js x4869)
    let (get_callee : 'tags this -> Function.t) =
      fun (x4871 : 'tags this) ->
        Function.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4871) "callee")
    let (set_callee : 'tags this -> Function.t -> unit) =
      fun (x4873 : 'tags this) ->
        fun (x4874 : Function.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4873) "callee"
            (Function.t_to_js x4874)
    let cast_from = Obj.magic
  end
module Generator =
  struct
    type ('T, 'TReturn, 'TNext) t =
      [ `Generator of ('T * 'TReturn * 'TNext) 
      | `Iterator of ('T * 'TReturn * 'TNext) ] intf
    let rec t_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t
      = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
    and t_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t -> Ojs.t
      = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
    type ('T, 'TReturn, 'TNext) t_3 = ('T, 'TReturn, 'TNext) t
    let rec t_3_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t_3
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (__TNext_of_js : Ojs.t -> __TNext) ->
            fun (x4880 : Ojs.t) ->
              t_of_js __T_of_js __TReturn_of_js __TNext_of_js x4880
    and t_3_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t_3 -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (__TNext_to_js : __TNext -> Ojs.t) ->
            fun (x4876 : (__T, __TReturn, __TNext) t) ->
              t_to_js __T_to_js __TReturn_to_js __TNext_to_js x4876
    type ('T, 'TReturn) t_2 = ('T, 'TReturn, unknown) t
    let rec t_2_of_js :
      'T 'TReturn .
        (Ojs.t -> 'T) -> (Ojs.t -> 'TReturn) -> Ojs.t -> ('T, 'TReturn) t_2
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (x4888 : Ojs.t) ->
            t_of_js __T_of_js __TReturn_of_js unknown_of_js x4888
    and t_2_to_js :
      'T 'TReturn .
        ('T -> Ojs.t) -> ('TReturn -> Ojs.t) -> ('T, 'TReturn) t_2 -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (x4884 : (__T, __TReturn, unknown) t) ->
            t_to_js __T_to_js __TReturn_to_js unknown_to_js x4884
    type 'T t_1 = ('T, any, unknown) t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4896 : Ojs.t) ->
          t_of_js __T_of_js any_of_js unknown_of_js x4896
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4892 : (__T, any, unknown) t) ->
          t_to_js __T_to_js any_to_js unknown_to_js x4892
    type t_0 = (unknown, any, unknown) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4904 : Ojs.t) ->
        t_of_js unknown_of_js any_of_js unknown_of_js x4904
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4900 : (unknown, any, unknown) t) ->
        t_to_js unknown_to_js any_to_js unknown_to_js x4900
    type ('T, 'TReturn, 'TNext) tags =
      [ `Generator of ('T * 'TReturn * 'TNext) 
      | `Iterator of ('T * 'TReturn * 'TNext) ]
    type ('T, 'TReturn, 'TNext) tags_3 = ('T, 'TReturn, 'TNext) tags
    type ('T, 'TReturn) tags_2 = ('T, 'TReturn, unknown) tags
    type 'T tags_1 = ('T, any, unknown) tags
    type tags_0 = (unknown, any, unknown) tags
    type ('tags, 'T, 'TReturn, 'TNext) this =
      'tags intf constraint 'tags =
                  [> `Generator of ('T * 'TReturn * 'TNext) ]
    let rec this_of_js :
      'tags 'T 'TReturn 'TNext .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'T) ->
            (Ojs.t -> 'TReturn) ->
              (Ojs.t -> 'TNext) ->
                Ojs.t -> ('tags, 'T, 'TReturn, 'TNext) this
      = fun (type __tags) -> fun (type __T) -> fun (type __TReturn) -> fun
      (type __TNext) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
            fun (__TNext_of_js : Ojs.t -> __TNext) ->
              fun (x4910 : Ojs.t) -> intf_of_js __tags_of_js x4910
    and this_to_js :
      'tags 'T 'TReturn 'TNext .
        ('tags -> Ojs.t) ->
          ('T -> Ojs.t) ->
            ('TReturn -> Ojs.t) ->
              ('TNext -> Ojs.t) ->
                ('tags, 'T, 'TReturn, 'TNext) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) -> fun (type __TReturn) -> fun
      (type __TNext) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
            fun (__TNext_to_js : __TNext -> Ojs.t) ->
              fun (x4908 : __tags intf) -> intf_to_js __tags_to_js x4908
    let (next :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        args:any list -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x4915 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ~args:(x4912 : any list) ->
          IteratorResult.t_of_js Obj.magic Obj.magic
            (let x4920 =
               this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x4915 in
             Ojs.call (Ojs.get_prop_ascii x4920 "next") "apply"
               [|x4920;((let x4913 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x4914 : any) ->
                              ignore
                                (Ojs.call x4913 "push" [|(any_to_js x4914)|]))
                           x4912;
                         x4913))|])
    let (return :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        value:'TReturn -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x4924 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ~value:(x4923 : 'TReturn) ->
          IteratorResult.t_of_js Obj.magic Obj.magic
            (Ojs.call
               (this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x4924)
               "return" [|(Obj.magic x4923)|])
    let (throw :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        e:any -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x4932 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ~e:(x4931 : any) ->
          IteratorResult.t_of_js Obj.magic Obj.magic
            (Ojs.call
               (this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x4932)
               "throw" [|(any_to_js x4931)|])
    let cast_from = Obj.magic
  end
module GeneratorFunction =
  struct
    type t = [ `GeneratorFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4940 : Ojs.t) -> t_of_js x4940
    and t_0_to_js : t_0 -> Ojs.t = fun (x4939 : t) -> t_to_js x4939
    type tags = [ `GeneratorFunction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `GeneratorFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4943 : Ojs.t) -> intf_of_js __tags_of_js x4943
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4941 : __tags intf) -> intf_to_js __tags_to_js x4941
    let (create : 'tags this -> args:any list -> Generator.t_0) =
      fun (x4948 : 'tags this) ->
        fun ~args:(x4945 : any list) ->
          Generator.t_0_of_js
            (Ojs.new_obj_arr (this_to_js Obj.magic x4948)
               (let x4946 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x4947 : any) ->
                     ignore (Ojs.call x4946 "push" [|(any_to_js x4947)|]))
                  x4945;
                x4946))
    let (apply : 'tags this -> args:any list -> Generator.t_0) =
      fun (x4953 : 'tags this) ->
        fun ~args:(x4950 : any list) ->
          Generator.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x4953) "apply"
               [|Ojs.null;((let x4951 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x4952 : any) ->
                                 ignore
                                   (Ojs.call x4951 "push"
                                      [|(any_to_js x4952)|])) x4950;
                            x4951))|])
    let (get_length : 'tags this -> float) =
      fun (x4955 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4955) "length")
    let (get_name : 'tags this -> string) =
      fun (x4957 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4957) "name")
    let (get_prototype : 'tags this -> Generator.t_0) =
      fun (x4959 : 'tags this) ->
        Generator.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4959) "prototype")
    let cast_from = Obj.magic
  end
module GeneratorFunctionConstructor =
  struct
    type t = [ `GeneratorFunctionConstructor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4962 : Ojs.t) -> t_of_js x4962
    and t_0_to_js : t_0 -> Ojs.t = fun (x4961 : t) -> t_to_js x4961
    type tags = [ `GeneratorFunctionConstructor ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GeneratorFunctionConstructor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4965 : Ojs.t) -> intf_of_js __tags_of_js x4965
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4963 : __tags intf) -> intf_to_js __tags_to_js x4963
    let (create : 'tags this -> args:string list -> GeneratorFunction.t) =
      fun (x4970 : 'tags this) ->
        fun ~args:(x4967 : string list) ->
          GeneratorFunction.t_of_js
            (Ojs.new_obj_arr (this_to_js Obj.magic x4970)
               (let x4968 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x4969 : string) ->
                     ignore
                       (Ojs.call x4968 "push" [|(Ojs.string_to_js x4969)|]))
                  x4967;
                x4968))
    let (apply : 'tags this -> args:string list -> GeneratorFunction.t) =
      fun (x4975 : 'tags this) ->
        fun ~args:(x4972 : string list) ->
          GeneratorFunction.t_of_js
            (Ojs.call (this_to_js Obj.magic x4975) "apply"
               [|Ojs.null;((let x4973 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x4974 : string) ->
                                 ignore
                                   (Ojs.call x4973 "push"
                                      [|(Ojs.string_to_js x4974)|])) x4972;
                            x4973))|])
    let (get_length : 'tags this -> float) =
      fun (x4977 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4977) "length")
    let (get_name : 'tags this -> string) =
      fun (x4979 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4979) "name")
    let (get_prototype : 'tags this -> GeneratorFunction.t) =
      fun (x4981 : 'tags this) ->
        GeneratorFunction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4981) "prototype")
    let cast_from = Obj.magic
  end
module Float64Array =
  struct
    type t =
      [ `ArrayLike of float  | `Float64Array  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4984 : Ojs.t) -> t_of_js x4984
    and t_0_to_js : t_0 -> Ojs.t = fun (x4983 : t) -> t_to_js x4983
    type tags =
      [ `ArrayLike of float  | `Float64Array  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Float64Array ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4987 : Ojs.t) -> intf_of_js __tags_of_js x4987
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4985 : __tags intf) -> intf_to_js __tags_to_js x4985
    let (entries : 'tags this -> (float * float) IterableIterator.t) =
      fun (x4989 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x4991 : Ojs.t) ->
             let x4992 = x4991 in
             ((Ojs.float_of_js (Ojs.array_get x4992 0)),
               (Ojs.float_of_js (Ojs.array_get x4992 1))))
          (Ojs.call (this_to_js Obj.magic x4989) "entries" [||])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x4993 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x4993) "keys" [||])
    let (values : 'tags this -> float IterableIterator.t) =
      fun (x4996 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x4996) "values" [||])
    let (includes :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> bool)
      =
      fun (x5003 : 'tags this) ->
        fun ~searchElement:(x4999 : float) ->
          fun ?fromIndex:(x5000 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x5005 = this_to_js Obj.magic x5003 in
                 Ojs.call (Ojs.get_prop_ascii x5005 "includes") "apply"
                   [|x5005;((let x5001 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5001 "push"
                                  [|(Ojs.float_to_js x4999)|]);
                             (match x5000 with
                              | Some x5002 ->
                                  ignore
                                    (Ojs.call x5001 "push"
                                       [|(Ojs.float_to_js x5002)|])
                              | None -> ());
                             x5001))|])
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x5006 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5006)
             "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x5008 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5008) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x5010 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5010) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x5012 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5012) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x5019 : 'tags this) ->
        fun ~target:(x5014 : float) ->
          fun ~start:(x5015 : float) ->
            fun ?end_:(x5016 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x5021 = this_to_js Obj.magic x5019 in
                   Ojs.call (Ojs.get_prop_ascii x5021 "copyWithin") "apply"
                     [|x5021;((let x5017 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5017 "push"
                                    [|(Ojs.float_to_js x5014)|]);
                               ignore
                                 (Ojs.call x5017 "push"
                                    [|(Ojs.float_to_js x5015)|]);
                               (match x5016 with
                                | Some x5018 ->
                                    ignore
                                      (Ojs.call x5017 "push"
                                         [|(Ojs.float_to_js x5018)|])
                                | None -> ());
                               x5017))|])
    let (every :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x5030 : 'tags this) ->
        fun
          ~predicate:(x5023 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x5024 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x5032 = this_to_js Obj.magic x5030 in
                 Ojs.call (Ojs.get_prop_ascii x5032 "every") "apply"
                   [|x5032;((let x5025 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5025 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5027 : Ojs.t) ->
                                          fun (x5028 : Ojs.t) ->
                                            fun (x5029 : Ojs.t) ->
                                              unknown_to_js
                                                (x5023
                                                   ~value:(Ojs.float_of_js
                                                             x5027)
                                                   ~index:(Ojs.float_of_js
                                                             x5028)
                                                   ~array:(t_of_js x5029))))|]);
                             (match x5024 with
                              | Some x5026 ->
                                  ignore
                                    (Ojs.call x5025 "push"
                                       [|(any_to_js x5026)|])
                              | None -> ());
                             x5025))|])
    let (fill :
      'tags this ->
        value:float -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x5039 : 'tags this) ->
        fun ~value:(x5033 : float) ->
          fun ?start:(x5034 : float option) ->
            fun ?end_:(x5035 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x5041 = this_to_js Obj.magic x5039 in
                   Ojs.call (Ojs.get_prop_ascii x5041 "fill") "apply"
                     [|x5041;((let x5036 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5036 "push"
                                    [|(Ojs.float_to_js x5033)|]);
                               (match x5034 with
                                | Some x5038 ->
                                    ignore
                                      (Ojs.call x5036 "push"
                                         [|(Ojs.float_to_js x5038)|])
                                | None -> ());
                               (match x5035 with
                                | Some x5037 ->
                                    ignore
                                      (Ojs.call x5036 "push"
                                         [|(Ojs.float_to_js x5037)|])
                                | None -> ());
                               x5036))|])
    let (filter :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x5050 : 'tags this) ->
        fun ~predicate:(x5043 : value:float -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x5044 : any option) ->
            fun () ->
              t_of_js
                (let x5052 = this_to_js Obj.magic x5050 in
                 Ojs.call (Ojs.get_prop_ascii x5052 "filter") "apply"
                   [|x5052;((let x5045 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5045 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5047 : Ojs.t) ->
                                          fun (x5048 : Ojs.t) ->
                                            fun (x5049 : Ojs.t) ->
                                              any_to_js
                                                (x5043
                                                   ~value:(Ojs.float_of_js
                                                             x5047)
                                                   ~index:(Ojs.float_of_js
                                                             x5048)
                                                   ~array:(t_of_js x5049))))|]);
                             (match x5044 with
                              | Some x5046 ->
                                  ignore
                                    (Ojs.call x5045 "push"
                                       [|(any_to_js x5046)|])
                              | None -> ());
                             x5045))|])
    let (find :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float or_undefined)
      =
      fun (x5060 : 'tags this) ->
        fun ~predicate:(x5053 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x5054 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.float_of_js
                (let x5062 = this_to_js Obj.magic x5060 in
                 Ojs.call (Ojs.get_prop_ascii x5062 "find") "apply"
                   [|x5062;((let x5055 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5055 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5057 : Ojs.t) ->
                                          fun (x5058 : Ojs.t) ->
                                            fun (x5059 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x5053
                                                   ~value:(Ojs.float_of_js
                                                             x5057)
                                                   ~index:(Ojs.float_of_js
                                                             x5058)
                                                   ~obj:(t_of_js x5059))))|]);
                             (match x5054 with
                              | Some x5056 ->
                                  ignore
                                    (Ojs.call x5055 "push"
                                       [|(any_to_js x5056)|])
                              | None -> ());
                             x5055))|])
    let (findIndex :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x5071 : 'tags this) ->
        fun ~predicate:(x5064 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x5065 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x5073 = this_to_js Obj.magic x5071 in
                 Ojs.call (Ojs.get_prop_ascii x5073 "findIndex") "apply"
                   [|x5073;((let x5066 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5066 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5068 : Ojs.t) ->
                                          fun (x5069 : Ojs.t) ->
                                            fun (x5070 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x5064
                                                   ~value:(Ojs.float_of_js
                                                             x5068)
                                                   ~index:(Ojs.float_of_js
                                                             x5069)
                                                   ~obj:(t_of_js x5070))))|]);
                             (match x5065 with
                              | Some x5067 ->
                                  ignore
                                    (Ojs.call x5066 "push"
                                       [|(any_to_js x5067)|])
                              | None -> ());
                             x5066))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x5081 : 'tags this) ->
        fun
          ~callbackfn:(x5074 : value:float -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x5075 : any option) ->
            fun () ->
              ignore
                (let x5083 = this_to_js Obj.magic x5081 in
                 Ojs.call (Ojs.get_prop_ascii x5083 "forEach") "apply"
                   [|x5083;((let x5076 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5076 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5078 : Ojs.t) ->
                                          fun (x5079 : Ojs.t) ->
                                            fun (x5080 : Ojs.t) ->
                                              x5074
                                                ~value:(Ojs.float_of_js x5078)
                                                ~index:(Ojs.float_of_js x5079)
                                                ~array:(t_of_js x5080)))|]);
                             (match x5075 with
                              | Some x5077 ->
                                  ignore
                                    (Ojs.call x5076 "push"
                                       [|(any_to_js x5077)|])
                              | None -> ());
                             x5076))|])
    let (indexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x5088 : 'tags this) ->
        fun ~searchElement:(x5084 : float) ->
          fun ?fromIndex:(x5085 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x5090 = this_to_js Obj.magic x5088 in
                 Ojs.call (Ojs.get_prop_ascii x5090 "indexOf") "apply"
                   [|x5090;((let x5086 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5086 "push"
                                  [|(Ojs.float_to_js x5084)|]);
                             (match x5085 with
                              | Some x5087 ->
                                  ignore
                                    (Ojs.call x5086 "push"
                                       [|(Ojs.float_to_js x5087)|])
                              | None -> ());
                             x5086))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x5094 : 'tags this) ->
        fun ?separator:(x5091 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x5096 = this_to_js Obj.magic x5094 in
               Ojs.call (Ojs.get_prop_ascii x5096 "join") "apply"
                 [|x5096;((let x5092 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x5091 with
                            | Some x5093 ->
                                ignore
                                  (Ojs.call x5092 "push"
                                     [|(Ojs.string_to_js x5093)|])
                            | None -> ());
                           x5092))|])
    let (lastIndexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x5101 : 'tags this) ->
        fun ~searchElement:(x5097 : float) ->
          fun ?fromIndex:(x5098 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x5103 = this_to_js Obj.magic x5101 in
                 Ojs.call (Ojs.get_prop_ascii x5103 "lastIndexOf") "apply"
                   [|x5103;((let x5099 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5099 "push"
                                  [|(Ojs.float_to_js x5097)|]);
                             (match x5098 with
                              | Some x5100 ->
                                  ignore
                                    (Ojs.call x5099 "push"
                                       [|(Ojs.float_to_js x5100)|])
                              | None -> ());
                             x5099))|])
    let (get_length : 'tags this -> float) =
      fun (x5104 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5104) "length")
    let (map :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> float) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x5113 : 'tags this) ->
        fun
          ~callbackfn:(x5106 :
                        value:float -> index:float -> array:t -> float)
          ->
          fun ?thisArg:(x5107 : any option) ->
            fun () ->
              t_of_js
                (let x5115 = this_to_js Obj.magic x5113 in
                 Ojs.call (Ojs.get_prop_ascii x5115 "map") "apply"
                   [|x5115;((let x5108 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5108 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5110 : Ojs.t) ->
                                          fun (x5111 : Ojs.t) ->
                                            fun (x5112 : Ojs.t) ->
                                              Ojs.float_to_js
                                                (x5106
                                                   ~value:(Ojs.float_of_js
                                                             x5110)
                                                   ~index:(Ojs.float_of_js
                                                             x5111)
                                                   ~array:(t_of_js x5112))))|]);
                             (match x5107 with
                              | Some x5109 ->
                                  ignore
                                    (Ojs.call x5108 "push"
                                       [|(any_to_js x5109)|])
                              | None -> ());
                             x5108))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x5121 : 'tags this) ->
        fun
          ~callbackfn:(x5116 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x5121) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x5117 : Ojs.t) ->
                       fun (x5118 : Ojs.t) ->
                         fun (x5119 : Ojs.t) ->
                           fun (x5120 : Ojs.t) ->
                             Ojs.float_to_js
                               (x5116 ~previousValue:(Ojs.float_of_js x5117)
                                  ~currentValue:(Ojs.float_of_js x5118)
                                  ~currentIndex:(Ojs.float_of_js x5119)
                                  ~array:(t_of_js x5120))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x5129 : 'tags this) ->
        fun
          ~callbackfn:(x5123 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x5128 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x5129) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x5124 : Ojs.t) ->
                         fun (x5125 : Ojs.t) ->
                           fun (x5126 : Ojs.t) ->
                             fun (x5127 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x5123
                                    ~previousValue:(Ojs.float_of_js x5124)
                                    ~currentValue:(Ojs.float_of_js x5125)
                                    ~currentIndex:(Ojs.float_of_js x5126)
                                    ~array:(t_of_js x5127))));(Ojs.float_to_js
                                                                 x5128)|])
    let (reduce'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x5137 : 'tags this) ->
        fun
          ~callbackfn:(x5131 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x5136 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x5137) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x5132 : Ojs.t) ->
                         fun (x5133 : Ojs.t) ->
                           fun (x5134 : Ojs.t) ->
                             fun (x5135 : Ojs.t) ->
                               Obj.magic
                                 (x5131 ~previousValue:(Obj.magic x5132)
                                    ~currentValue:(Ojs.float_of_js x5133)
                                    ~currentIndex:(Ojs.float_of_js x5134)
                                    ~array:(t_of_js x5135))));(Obj.magic
                                                                 x5136)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x5144 : 'tags this) ->
        fun
          ~callbackfn:(x5139 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x5144) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x5140 : Ojs.t) ->
                       fun (x5141 : Ojs.t) ->
                         fun (x5142 : Ojs.t) ->
                           fun (x5143 : Ojs.t) ->
                             Ojs.float_to_js
                               (x5139 ~previousValue:(Ojs.float_of_js x5140)
                                  ~currentValue:(Ojs.float_of_js x5141)
                                  ~currentIndex:(Ojs.float_of_js x5142)
                                  ~array:(t_of_js x5143))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x5152 : 'tags this) ->
        fun
          ~callbackfn:(x5146 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x5151 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x5152) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x5147 : Ojs.t) ->
                         fun (x5148 : Ojs.t) ->
                           fun (x5149 : Ojs.t) ->
                             fun (x5150 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x5146
                                    ~previousValue:(Ojs.float_of_js x5147)
                                    ~currentValue:(Ojs.float_of_js x5148)
                                    ~currentIndex:(Ojs.float_of_js x5149)
                                    ~array:(t_of_js x5150))));(Ojs.float_to_js
                                                                 x5151)|])
    let (reduceRight'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x5160 : 'tags this) ->
        fun
          ~callbackfn:(x5154 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x5159 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x5160) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x5155 : Ojs.t) ->
                         fun (x5156 : Ojs.t) ->
                           fun (x5157 : Ojs.t) ->
                             fun (x5158 : Ojs.t) ->
                               Obj.magic
                                 (x5154 ~previousValue:(Obj.magic x5155)
                                    ~currentValue:(Ojs.float_of_js x5156)
                                    ~currentIndex:(Ojs.float_of_js x5157)
                                    ~array:(t_of_js x5158))));(Obj.magic
                                                                 x5159)|])
    let (reverse : 'tags this -> t) =
      fun (x5162 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x5162) "reverse" [||])
    let (set_ :
      'tags this -> array:float ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x5169 : 'tags this) ->
        fun ~array:(x5164 : float ArrayLike.t) ->
          fun ?offset:(x5165 : float option) ->
            fun () ->
              ignore
                (let x5171 = this_to_js Obj.magic x5169 in
                 Ojs.call (Ojs.get_prop_ascii x5171 "set") "apply"
                   [|x5171;((let x5166 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5166 "push"
                                  [|(ArrayLike.t_to_js Ojs.float_to_js x5164)|]);
                             (match x5165 with
                              | Some x5167 ->
                                  ignore
                                    (Ojs.call x5166 "push"
                                       [|(Ojs.float_to_js x5167)|])
                              | None -> ());
                             x5166))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x5177 : 'tags this) ->
        fun ?start:(x5172 : float option) ->
          fun ?end_:(x5173 : float option) ->
            fun () ->
              t_of_js
                (let x5179 = this_to_js Obj.magic x5177 in
                 Ojs.call (Ojs.get_prop_ascii x5179 "slice") "apply"
                   [|x5179;((let x5174 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x5172 with
                              | Some x5176 ->
                                  ignore
                                    (Ojs.call x5174 "push"
                                       [|(Ojs.float_to_js x5176)|])
                              | None -> ());
                             (match x5173 with
                              | Some x5175 ->
                                  ignore
                                    (Ojs.call x5174 "push"
                                       [|(Ojs.float_to_js x5175)|])
                              | None -> ());
                             x5174))|])
    let (some :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x5187 : 'tags this) ->
        fun
          ~predicate:(x5180 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x5181 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x5189 = this_to_js Obj.magic x5187 in
                 Ojs.call (Ojs.get_prop_ascii x5189 "some") "apply"
                   [|x5189;((let x5182 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5182 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5184 : Ojs.t) ->
                                          fun (x5185 : Ojs.t) ->
                                            fun (x5186 : Ojs.t) ->
                                              unknown_to_js
                                                (x5180
                                                   ~value:(Ojs.float_of_js
                                                             x5184)
                                                   ~index:(Ojs.float_of_js
                                                             x5185)
                                                   ~array:(t_of_js x5186))))|]);
                             (match x5181 with
                              | Some x5183 ->
                                  ignore
                                    (Ojs.call x5182 "push"
                                       [|(any_to_js x5183)|])
                              | None -> ());
                             x5182))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:float -> b:float -> float) -> unit -> 'tags this)
      =
      fun (x5195 : 'tags this) ->
        fun ?compareFn:(x5190 : (a:float -> b:float -> float) option) ->
          fun () ->
            this_of_js Obj.magic
              (let x5197 = this_to_js Obj.magic x5195 in
               Ojs.call (Ojs.get_prop_ascii x5197 "sort") "apply"
                 [|x5197;((let x5191 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x5190 with
                            | Some x5192 ->
                                ignore
                                  (Ojs.call x5191 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x5193 : Ojs.t) ->
                                             fun (x5194 : Ojs.t) ->
                                               Ojs.float_to_js
                                                 (x5192
                                                    ~a:(Ojs.float_of_js x5193)
                                                    ~b:(Ojs.float_of_js x5194))))|])
                            | None -> ());
                           x5191))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x5204 : 'tags this) ->
        fun ?begin_:(x5199 : float option) ->
          fun ?end_:(x5200 : float option) ->
            fun () ->
              t_of_js
                (let x5206 = this_to_js Obj.magic x5204 in
                 Ojs.call (Ojs.get_prop_ascii x5206 "subarray") "apply"
                   [|x5206;((let x5201 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x5199 with
                              | Some x5203 ->
                                  ignore
                                    (Ojs.call x5201 "push"
                                       [|(Ojs.float_to_js x5203)|])
                              | None -> ());
                             (match x5200 with
                              | Some x5202 ->
                                  ignore
                                    (Ojs.call x5201 "push"
                                       [|(Ojs.float_to_js x5202)|])
                              | None -> ());
                             x5201))|])
    let (toString : 'tags this -> string) =
      fun (x5207 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x5207) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x5209 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x5209) "valueOf" [||])
    let (get : 'tags this -> float -> float) =
      fun (x5211 : 'tags this) ->
        fun (x5213 : float) ->
          Ojs.float_of_js
            (Ojs.get_prop (this_to_js Obj.magic x5211)
               (Ojs.float_to_js x5213))
    let (set : 'tags this -> float -> float -> unit) =
      fun (x5214 : 'tags this) ->
        fun (x5216 : float) ->
          fun (x5217 : float) ->
            Ojs.set_prop (this_to_js Obj.magic x5214) (Ojs.float_to_js x5216)
              (Ojs.float_to_js x5217)
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float64Array") [||])
    let (create' : float Iterable.t -> t) =
      fun (x5218 : float Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float64Array")
             [|(Iterable.t_to_js Ojs.float_to_js x5218)|])
    let (from :
      arrayLike:float Iterable.t ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x5220 : float Iterable.t) ->
        fun ?mapfn:(x5221 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x5222 : any option) ->
            fun () ->
              t_of_js
                (let x5229 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
                 Ojs.call (Ojs.get_prop_ascii x5229 "from") "apply"
                   [|x5229;((let x5223 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5223 "push"
                                  [|(Iterable.t_to_js Ojs.float_to_js x5220)|]);
                             (match x5221 with
                              | Some x5225 ->
                                  ignore
                                    (Ojs.call x5223 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x5226 : Ojs.t) ->
                                               fun (x5227 : Ojs.t) ->
                                                 Ojs.float_to_js
                                                   (x5225
                                                      ~v:(Ojs.float_of_js
                                                            x5226)
                                                      ~k:(Ojs.float_of_js
                                                            x5227))))|])
                              | None -> ());
                             (match x5222 with
                              | Some x5224 ->
                                  ignore
                                    (Ojs.call x5223 "push"
                                       [|(any_to_js x5224)|])
                              | None -> ());
                             x5223))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Float64Array")
             "prototype")
    let (create'' : float -> t) =
      fun (x5230 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float64Array")
             [|(Ojs.float_to_js x5230)|])
    let (create''' : (ArrayBufferLike.t, float ArrayLike.t) union2 -> t) =
      fun (x5231 : (ArrayBufferLike.t, float ArrayLike.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float64Array")
             [|(union2_to_js ArrayBufferLike.t_to_js
                  (fun (x5233 : float ArrayLike.t) ->
                     ArrayLike.t_to_js Ojs.float_to_js x5233) x5231)|])
    let (create'''' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x5235 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x5236 : float option) ->
          fun ?length:(x5237 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Float64Array")
                   (let x5238 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5238 "push"
                         [|(ArrayBufferLike.t_to_js x5235)|]);
                    (match x5236 with
                     | Some x5240 ->
                         ignore
                           (Ojs.call x5238 "push" [|(Ojs.float_to_js x5240)|])
                     | None -> ());
                    (match x5237 with
                     | Some x5239 ->
                         ignore
                           (Ojs.call x5238 "push" [|(Ojs.float_to_js x5239)|])
                     | None -> ());
                    x5238))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Float64Array")
             "BYTES_PER_ELEMENT")
    let (of_ : float list -> t) =
      fun (x5241 : float list) ->
        t_of_js
          (let x5244 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
           Ojs.call (Ojs.get_prop_ascii x5244 "of") "apply"
             [|x5244;((let x5242 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x5243 : float) ->
                            ignore
                              (Ojs.call x5242 "push"
                                 [|(Ojs.float_to_js x5243)|])) x5241;
                       x5242))|])
    let (from' : float ArrayLike.t -> t) =
      fun (x5245 : float ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Float64Array") "from"
             [|(ArrayLike.t_to_js Ojs.float_to_js x5245)|])
    let (from'' :
      arrayLike:'T ArrayLike.t ->
        mapfn:(v:'T -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x5247 : 'T ArrayLike.t) ->
        fun ~mapfn:(x5248 : v:'T -> k:float -> float) ->
          fun ?thisArg:(x5249 : any option) ->
            fun () ->
              t_of_js
                (let x5255 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
                 Ojs.call (Ojs.get_prop_ascii x5255 "from") "apply"
                   [|x5255;((let x5250 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5250 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x5247)|]);
                             ignore
                               (Ojs.call x5250 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x5252 : Ojs.t) ->
                                          fun (x5253 : Ojs.t) ->
                                            Ojs.float_to_js
                                              (x5248 ~v:(Obj.magic x5252)
                                                 ~k:(Ojs.float_of_js x5253))))|]);
                             (match x5249 with
                              | Some x5251 ->
                                  ignore
                                    (Ojs.call x5250 "push"
                                       [|(any_to_js x5251)|])
                              | None -> ());
                             x5250))|])
    let cast_from = Obj.magic
  end
module Float32Array =
  struct
    type t =
      [ `ArrayLike of float  | `Float32Array  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5257 : Ojs.t) -> t_of_js x5257
    and t_0_to_js : t_0 -> Ojs.t = fun (x5256 : t) -> t_to_js x5256
    type tags =
      [ `ArrayLike of float  | `Float32Array  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Float32Array ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5260 : Ojs.t) -> intf_of_js __tags_of_js x5260
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5258 : __tags intf) -> intf_to_js __tags_to_js x5258
    let (entries : 'tags this -> (float * float) IterableIterator.t) =
      fun (x5262 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x5264 : Ojs.t) ->
             let x5265 = x5264 in
             ((Ojs.float_of_js (Ojs.array_get x5265 0)),
               (Ojs.float_of_js (Ojs.array_get x5265 1))))
          (Ojs.call (this_to_js Obj.magic x5262) "entries" [||])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x5266 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x5266) "keys" [||])
    let (values : 'tags this -> float IterableIterator.t) =
      fun (x5269 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x5269) "values" [||])
    let (includes :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> bool)
      =
      fun (x5276 : 'tags this) ->
        fun ~searchElement:(x5272 : float) ->
          fun ?fromIndex:(x5273 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x5278 = this_to_js Obj.magic x5276 in
                 Ojs.call (Ojs.get_prop_ascii x5278 "includes") "apply"
                   [|x5278;((let x5274 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5274 "push"
                                  [|(Ojs.float_to_js x5272)|]);
                             (match x5273 with
                              | Some x5275 ->
                                  ignore
                                    (Ojs.call x5274 "push"
                                       [|(Ojs.float_to_js x5275)|])
                              | None -> ());
                             x5274))|])
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x5279 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5279)
             "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x5281 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5281) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x5283 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5283) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x5285 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5285) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x5292 : 'tags this) ->
        fun ~target:(x5287 : float) ->
          fun ~start:(x5288 : float) ->
            fun ?end_:(x5289 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x5294 = this_to_js Obj.magic x5292 in
                   Ojs.call (Ojs.get_prop_ascii x5294 "copyWithin") "apply"
                     [|x5294;((let x5290 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5290 "push"
                                    [|(Ojs.float_to_js x5287)|]);
                               ignore
                                 (Ojs.call x5290 "push"
                                    [|(Ojs.float_to_js x5288)|]);
                               (match x5289 with
                                | Some x5291 ->
                                    ignore
                                      (Ojs.call x5290 "push"
                                         [|(Ojs.float_to_js x5291)|])
                                | None -> ());
                               x5290))|])
    let (every :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x5303 : 'tags this) ->
        fun
          ~predicate:(x5296 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x5297 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x5305 = this_to_js Obj.magic x5303 in
                 Ojs.call (Ojs.get_prop_ascii x5305 "every") "apply"
                   [|x5305;((let x5298 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5298 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5300 : Ojs.t) ->
                                          fun (x5301 : Ojs.t) ->
                                            fun (x5302 : Ojs.t) ->
                                              unknown_to_js
                                                (x5296
                                                   ~value:(Ojs.float_of_js
                                                             x5300)
                                                   ~index:(Ojs.float_of_js
                                                             x5301)
                                                   ~array:(t_of_js x5302))))|]);
                             (match x5297 with
                              | Some x5299 ->
                                  ignore
                                    (Ojs.call x5298 "push"
                                       [|(any_to_js x5299)|])
                              | None -> ());
                             x5298))|])
    let (fill :
      'tags this ->
        value:float -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x5312 : 'tags this) ->
        fun ~value:(x5306 : float) ->
          fun ?start:(x5307 : float option) ->
            fun ?end_:(x5308 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x5314 = this_to_js Obj.magic x5312 in
                   Ojs.call (Ojs.get_prop_ascii x5314 "fill") "apply"
                     [|x5314;((let x5309 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5309 "push"
                                    [|(Ojs.float_to_js x5306)|]);
                               (match x5307 with
                                | Some x5311 ->
                                    ignore
                                      (Ojs.call x5309 "push"
                                         [|(Ojs.float_to_js x5311)|])
                                | None -> ());
                               (match x5308 with
                                | Some x5310 ->
                                    ignore
                                      (Ojs.call x5309 "push"
                                         [|(Ojs.float_to_js x5310)|])
                                | None -> ());
                               x5309))|])
    let (filter :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x5323 : 'tags this) ->
        fun ~predicate:(x5316 : value:float -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x5317 : any option) ->
            fun () ->
              t_of_js
                (let x5325 = this_to_js Obj.magic x5323 in
                 Ojs.call (Ojs.get_prop_ascii x5325 "filter") "apply"
                   [|x5325;((let x5318 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5318 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5320 : Ojs.t) ->
                                          fun (x5321 : Ojs.t) ->
                                            fun (x5322 : Ojs.t) ->
                                              any_to_js
                                                (x5316
                                                   ~value:(Ojs.float_of_js
                                                             x5320)
                                                   ~index:(Ojs.float_of_js
                                                             x5321)
                                                   ~array:(t_of_js x5322))))|]);
                             (match x5317 with
                              | Some x5319 ->
                                  ignore
                                    (Ojs.call x5318 "push"
                                       [|(any_to_js x5319)|])
                              | None -> ());
                             x5318))|])
    let (find :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float or_undefined)
      =
      fun (x5333 : 'tags this) ->
        fun ~predicate:(x5326 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x5327 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.float_of_js
                (let x5335 = this_to_js Obj.magic x5333 in
                 Ojs.call (Ojs.get_prop_ascii x5335 "find") "apply"
                   [|x5335;((let x5328 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5328 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5330 : Ojs.t) ->
                                          fun (x5331 : Ojs.t) ->
                                            fun (x5332 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x5326
                                                   ~value:(Ojs.float_of_js
                                                             x5330)
                                                   ~index:(Ojs.float_of_js
                                                             x5331)
                                                   ~obj:(t_of_js x5332))))|]);
                             (match x5327 with
                              | Some x5329 ->
                                  ignore
                                    (Ojs.call x5328 "push"
                                       [|(any_to_js x5329)|])
                              | None -> ());
                             x5328))|])
    let (findIndex :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x5344 : 'tags this) ->
        fun ~predicate:(x5337 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x5338 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x5346 = this_to_js Obj.magic x5344 in
                 Ojs.call (Ojs.get_prop_ascii x5346 "findIndex") "apply"
                   [|x5346;((let x5339 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5339 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5341 : Ojs.t) ->
                                          fun (x5342 : Ojs.t) ->
                                            fun (x5343 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x5337
                                                   ~value:(Ojs.float_of_js
                                                             x5341)
                                                   ~index:(Ojs.float_of_js
                                                             x5342)
                                                   ~obj:(t_of_js x5343))))|]);
                             (match x5338 with
                              | Some x5340 ->
                                  ignore
                                    (Ojs.call x5339 "push"
                                       [|(any_to_js x5340)|])
                              | None -> ());
                             x5339))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x5354 : 'tags this) ->
        fun
          ~callbackfn:(x5347 : value:float -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x5348 : any option) ->
            fun () ->
              ignore
                (let x5356 = this_to_js Obj.magic x5354 in
                 Ojs.call (Ojs.get_prop_ascii x5356 "forEach") "apply"
                   [|x5356;((let x5349 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5349 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5351 : Ojs.t) ->
                                          fun (x5352 : Ojs.t) ->
                                            fun (x5353 : Ojs.t) ->
                                              x5347
                                                ~value:(Ojs.float_of_js x5351)
                                                ~index:(Ojs.float_of_js x5352)
                                                ~array:(t_of_js x5353)))|]);
                             (match x5348 with
                              | Some x5350 ->
                                  ignore
                                    (Ojs.call x5349 "push"
                                       [|(any_to_js x5350)|])
                              | None -> ());
                             x5349))|])
    let (indexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x5361 : 'tags this) ->
        fun ~searchElement:(x5357 : float) ->
          fun ?fromIndex:(x5358 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x5363 = this_to_js Obj.magic x5361 in
                 Ojs.call (Ojs.get_prop_ascii x5363 "indexOf") "apply"
                   [|x5363;((let x5359 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5359 "push"
                                  [|(Ojs.float_to_js x5357)|]);
                             (match x5358 with
                              | Some x5360 ->
                                  ignore
                                    (Ojs.call x5359 "push"
                                       [|(Ojs.float_to_js x5360)|])
                              | None -> ());
                             x5359))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x5367 : 'tags this) ->
        fun ?separator:(x5364 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x5369 = this_to_js Obj.magic x5367 in
               Ojs.call (Ojs.get_prop_ascii x5369 "join") "apply"
                 [|x5369;((let x5365 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x5364 with
                            | Some x5366 ->
                                ignore
                                  (Ojs.call x5365 "push"
                                     [|(Ojs.string_to_js x5366)|])
                            | None -> ());
                           x5365))|])
    let (lastIndexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x5374 : 'tags this) ->
        fun ~searchElement:(x5370 : float) ->
          fun ?fromIndex:(x5371 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x5376 = this_to_js Obj.magic x5374 in
                 Ojs.call (Ojs.get_prop_ascii x5376 "lastIndexOf") "apply"
                   [|x5376;((let x5372 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5372 "push"
                                  [|(Ojs.float_to_js x5370)|]);
                             (match x5371 with
                              | Some x5373 ->
                                  ignore
                                    (Ojs.call x5372 "push"
                                       [|(Ojs.float_to_js x5373)|])
                              | None -> ());
                             x5372))|])
    let (get_length : 'tags this -> float) =
      fun (x5377 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5377) "length")
    let (map :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> float) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x5386 : 'tags this) ->
        fun
          ~callbackfn:(x5379 :
                        value:float -> index:float -> array:t -> float)
          ->
          fun ?thisArg:(x5380 : any option) ->
            fun () ->
              t_of_js
                (let x5388 = this_to_js Obj.magic x5386 in
                 Ojs.call (Ojs.get_prop_ascii x5388 "map") "apply"
                   [|x5388;((let x5381 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5381 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5383 : Ojs.t) ->
                                          fun (x5384 : Ojs.t) ->
                                            fun (x5385 : Ojs.t) ->
                                              Ojs.float_to_js
                                                (x5379
                                                   ~value:(Ojs.float_of_js
                                                             x5383)
                                                   ~index:(Ojs.float_of_js
                                                             x5384)
                                                   ~array:(t_of_js x5385))))|]);
                             (match x5380 with
                              | Some x5382 ->
                                  ignore
                                    (Ojs.call x5381 "push"
                                       [|(any_to_js x5382)|])
                              | None -> ());
                             x5381))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x5394 : 'tags this) ->
        fun
          ~callbackfn:(x5389 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x5394) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x5390 : Ojs.t) ->
                       fun (x5391 : Ojs.t) ->
                         fun (x5392 : Ojs.t) ->
                           fun (x5393 : Ojs.t) ->
                             Ojs.float_to_js
                               (x5389 ~previousValue:(Ojs.float_of_js x5390)
                                  ~currentValue:(Ojs.float_of_js x5391)
                                  ~currentIndex:(Ojs.float_of_js x5392)
                                  ~array:(t_of_js x5393))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x5402 : 'tags this) ->
        fun
          ~callbackfn:(x5396 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x5401 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x5402) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x5397 : Ojs.t) ->
                         fun (x5398 : Ojs.t) ->
                           fun (x5399 : Ojs.t) ->
                             fun (x5400 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x5396
                                    ~previousValue:(Ojs.float_of_js x5397)
                                    ~currentValue:(Ojs.float_of_js x5398)
                                    ~currentIndex:(Ojs.float_of_js x5399)
                                    ~array:(t_of_js x5400))));(Ojs.float_to_js
                                                                 x5401)|])
    let (reduce'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x5410 : 'tags this) ->
        fun
          ~callbackfn:(x5404 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x5409 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x5410) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x5405 : Ojs.t) ->
                         fun (x5406 : Ojs.t) ->
                           fun (x5407 : Ojs.t) ->
                             fun (x5408 : Ojs.t) ->
                               Obj.magic
                                 (x5404 ~previousValue:(Obj.magic x5405)
                                    ~currentValue:(Ojs.float_of_js x5406)
                                    ~currentIndex:(Ojs.float_of_js x5407)
                                    ~array:(t_of_js x5408))));(Obj.magic
                                                                 x5409)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x5417 : 'tags this) ->
        fun
          ~callbackfn:(x5412 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x5417) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x5413 : Ojs.t) ->
                       fun (x5414 : Ojs.t) ->
                         fun (x5415 : Ojs.t) ->
                           fun (x5416 : Ojs.t) ->
                             Ojs.float_to_js
                               (x5412 ~previousValue:(Ojs.float_of_js x5413)
                                  ~currentValue:(Ojs.float_of_js x5414)
                                  ~currentIndex:(Ojs.float_of_js x5415)
                                  ~array:(t_of_js x5416))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x5425 : 'tags this) ->
        fun
          ~callbackfn:(x5419 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x5424 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x5425) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x5420 : Ojs.t) ->
                         fun (x5421 : Ojs.t) ->
                           fun (x5422 : Ojs.t) ->
                             fun (x5423 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x5419
                                    ~previousValue:(Ojs.float_of_js x5420)
                                    ~currentValue:(Ojs.float_of_js x5421)
                                    ~currentIndex:(Ojs.float_of_js x5422)
                                    ~array:(t_of_js x5423))));(Ojs.float_to_js
                                                                 x5424)|])
    let (reduceRight'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x5433 : 'tags this) ->
        fun
          ~callbackfn:(x5427 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x5432 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x5433) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x5428 : Ojs.t) ->
                         fun (x5429 : Ojs.t) ->
                           fun (x5430 : Ojs.t) ->
                             fun (x5431 : Ojs.t) ->
                               Obj.magic
                                 (x5427 ~previousValue:(Obj.magic x5428)
                                    ~currentValue:(Ojs.float_of_js x5429)
                                    ~currentIndex:(Ojs.float_of_js x5430)
                                    ~array:(t_of_js x5431))));(Obj.magic
                                                                 x5432)|])
    let (reverse : 'tags this -> t) =
      fun (x5435 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x5435) "reverse" [||])
    let (set_ :
      'tags this -> array:float ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x5442 : 'tags this) ->
        fun ~array:(x5437 : float ArrayLike.t) ->
          fun ?offset:(x5438 : float option) ->
            fun () ->
              ignore
                (let x5444 = this_to_js Obj.magic x5442 in
                 Ojs.call (Ojs.get_prop_ascii x5444 "set") "apply"
                   [|x5444;((let x5439 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5439 "push"
                                  [|(ArrayLike.t_to_js Ojs.float_to_js x5437)|]);
                             (match x5438 with
                              | Some x5440 ->
                                  ignore
                                    (Ojs.call x5439 "push"
                                       [|(Ojs.float_to_js x5440)|])
                              | None -> ());
                             x5439))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x5450 : 'tags this) ->
        fun ?start:(x5445 : float option) ->
          fun ?end_:(x5446 : float option) ->
            fun () ->
              t_of_js
                (let x5452 = this_to_js Obj.magic x5450 in
                 Ojs.call (Ojs.get_prop_ascii x5452 "slice") "apply"
                   [|x5452;((let x5447 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x5445 with
                              | Some x5449 ->
                                  ignore
                                    (Ojs.call x5447 "push"
                                       [|(Ojs.float_to_js x5449)|])
                              | None -> ());
                             (match x5446 with
                              | Some x5448 ->
                                  ignore
                                    (Ojs.call x5447 "push"
                                       [|(Ojs.float_to_js x5448)|])
                              | None -> ());
                             x5447))|])
    let (some :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x5460 : 'tags this) ->
        fun
          ~predicate:(x5453 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x5454 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x5462 = this_to_js Obj.magic x5460 in
                 Ojs.call (Ojs.get_prop_ascii x5462 "some") "apply"
                   [|x5462;((let x5455 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5455 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x5457 : Ojs.t) ->
                                          fun (x5458 : Ojs.t) ->
                                            fun (x5459 : Ojs.t) ->
                                              unknown_to_js
                                                (x5453
                                                   ~value:(Ojs.float_of_js
                                                             x5457)
                                                   ~index:(Ojs.float_of_js
                                                             x5458)
                                                   ~array:(t_of_js x5459))))|]);
                             (match x5454 with
                              | Some x5456 ->
                                  ignore
                                    (Ojs.call x5455 "push"
                                       [|(any_to_js x5456)|])
                              | None -> ());
                             x5455))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:float -> b:float -> float) -> unit -> 'tags this)
      =
      fun (x5468 : 'tags this) ->
        fun ?compareFn:(x5463 : (a:float -> b:float -> float) option) ->
          fun () ->
            this_of_js Obj.magic
              (let x5470 = this_to_js Obj.magic x5468 in
               Ojs.call (Ojs.get_prop_ascii x5470 "sort") "apply"
                 [|x5470;((let x5464 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x5463 with
                            | Some x5465 ->
                                ignore
                                  (Ojs.call x5464 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x5466 : Ojs.t) ->
                                             fun (x5467 : Ojs.t) ->
                                               Ojs.float_to_js
                                                 (x5465
                                                    ~a:(Ojs.float_of_js x5466)
                                                    ~b:(Ojs.float_of_js x5467))))|])
                            | None -> ());
                           x5464))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x5477 : 'tags this) ->
        fun ?begin_:(x5472 : float option) ->
          fun ?end_:(x5473 : float option) ->
            fun () ->
              t_of_js
                (let x5479 = this_to_js Obj.magic x5477 in
                 Ojs.call (Ojs.get_prop_ascii x5479 "subarray") "apply"
                   [|x5479;((let x5474 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x5472 with
                              | Some x5476 ->
                                  ignore
                                    (Ojs.call x5474 "push"
                                       [|(Ojs.float_to_js x5476)|])
                              | None -> ());
                             (match x5473 with
                              | Some x5475 ->
                                  ignore
                                    (Ojs.call x5474 "push"
                                       [|(Ojs.float_to_js x5475)|])
                              | None -> ());
                             x5474))|])
    let (toLocaleString : 'tags this -> string) =
      fun (x5480 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x5480) "toLocaleString" [||])
    let (toString : 'tags this -> string) =
      fun (x5482 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x5482) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x5484 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x5484) "valueOf" [||])
    let (get : 'tags this -> float -> float) =
      fun (x5486 : 'tags this) ->
        fun (x5488 : float) ->
          Ojs.float_of_js
            (Ojs.get_prop (this_to_js Obj.magic x5486)
               (Ojs.float_to_js x5488))
    let (set : 'tags this -> float -> float -> unit) =
      fun (x5489 : 'tags this) ->
        fun (x5491 : float) ->
          fun (x5492 : float) ->
            Ojs.set_prop (this_to_js Obj.magic x5489) (Ojs.float_to_js x5491)
              (Ojs.float_to_js x5492)
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float32Array") [||])
    let (create' : float Iterable.t -> t) =
      fun (x5493 : float Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float32Array")
             [|(Iterable.t_to_js Ojs.float_to_js x5493)|])
    let (from :
      arrayLike:float Iterable.t ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x5495 : float Iterable.t) ->
        fun ?mapfn:(x5496 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x5497 : any option) ->
            fun () ->
              t_of_js
                (let x5504 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
                 Ojs.call (Ojs.get_prop_ascii x5504 "from") "apply"
                   [|x5504;((let x5498 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5498 "push"
                                  [|(Iterable.t_to_js Ojs.float_to_js x5495)|]);
                             (match x5496 with
                              | Some x5500 ->
                                  ignore
                                    (Ojs.call x5498 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x5501 : Ojs.t) ->
                                               fun (x5502 : Ojs.t) ->
                                                 Ojs.float_to_js
                                                   (x5500
                                                      ~v:(Ojs.float_of_js
                                                            x5501)
                                                      ~k:(Ojs.float_of_js
                                                            x5502))))|])
                              | None -> ());
                             (match x5497 with
                              | Some x5499 ->
                                  ignore
                                    (Ojs.call x5498 "push"
                                       [|(any_to_js x5499)|])
                              | None -> ());
                             x5498))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Float32Array")
             "prototype")
    let (create'' : float -> t) =
      fun (x5505 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float32Array")
             [|(Ojs.float_to_js x5505)|])
    let (create''' : (ArrayBufferLike.t, float ArrayLike.t) union2 -> t) =
      fun (x5506 : (ArrayBufferLike.t, float ArrayLike.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float32Array")
             [|(union2_to_js ArrayBufferLike.t_to_js
                  (fun (x5508 : float ArrayLike.t) ->
                     ArrayLike.t_to_js Ojs.float_to_js x5508) x5506)|])
    let (create'''' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x5510 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x5511 : float option) ->
          fun ?length:(x5512 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Float32Array")
                   (let x5513 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5513 "push"
                         [|(ArrayBufferLike.t_to_js x5510)|]);
                    (match x5511 with
                     | Some x5515 ->
                         ignore
                           (Ojs.call x5513 "push" [|(Ojs.float_to_js x5515)|])
                     | None -> ());
                    (match x5512 with
                     | Some x5514 ->
                         ignore
                           (Ojs.call x5513 "push" [|(Ojs.float_to_js x5514)|])
                     | None -> ());
                    x5513))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Float32Array")
             "BYTES_PER_ELEMENT")
    let (of_ : float list -> t) =
      fun (x5516 : float list) ->
        t_of_js
          (let x5519 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
           Ojs.call (Ojs.get_prop_ascii x5519 "of") "apply"
             [|x5519;((let x5517 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x5518 : float) ->
                            ignore
                              (Ojs.call x5517 "push"
                                 [|(Ojs.float_to_js x5518)|])) x5516;
                       x5517))|])
    let (from' : float ArrayLike.t -> t) =
      fun (x5520 : float ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Float32Array") "from"
             [|(ArrayLike.t_to_js Ojs.float_to_js x5520)|])
    let (from'' :
      arrayLike:'T ArrayLike.t ->
        mapfn:(v:'T -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x5522 : 'T ArrayLike.t) ->
        fun ~mapfn:(x5523 : v:'T -> k:float -> float) ->
          fun ?thisArg:(x5524 : any option) ->
            fun () ->
              t_of_js
                (let x5530 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
                 Ojs.call (Ojs.get_prop_ascii x5530 "from") "apply"
                   [|x5530;((let x5525 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5525 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x5522)|]);
                             ignore
                               (Ojs.call x5525 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x5527 : Ojs.t) ->
                                          fun (x5528 : Ojs.t) ->
                                            Ojs.float_to_js
                                              (x5523 ~v:(Obj.magic x5527)
                                                 ~k:(Ojs.float_of_js x5528))))|]);
                             (match x5524 with
                              | Some x5526 ->
                                  ignore
                                    (Ojs.call x5525 "push"
                                       [|(any_to_js x5526)|])
                              | None -> ());
                             x5525))|])
    let cast_from = Obj.magic
  end
module FinalizationRegistry =
  struct
    type 'T t = [ `FinalizationRegistry of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5533 : Ojs.t) -> t_of_js __T_of_js x5533
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x5531 : __T t) -> t_to_js __T_to_js x5531
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5537 : Ojs.t) -> t_of_js any_of_js x5537
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5535 : any t) -> t_to_js any_to_js x5535
    type 'T tags = [ `FinalizationRegistry of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `FinalizationRegistry of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5541 : Ojs.t) -> intf_of_js __tags_of_js x5541
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5539 : __tags intf) -> intf_to_js __tags_to_js x5539
    let (register :
      ('tags, 'T) this ->
        target:untyped_object ->
          heldValue:any -> ?unregisterToken:untyped_object -> unit -> unit)
      =
      fun (x5548 : ('tags, 'T) this) ->
        fun ~target:(x5543 : untyped_object) ->
          fun ~heldValue:(x5544 : any) ->
            fun ?unregisterToken:(x5545 : untyped_object option) ->
              fun () ->
                ignore
                  (let x5551 = this_to_js Obj.magic Obj.magic x5548 in
                   Ojs.call (Ojs.get_prop_ascii x5551 "register") "apply"
                     [|x5551;((let x5546 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5546 "push"
                                    [|(untyped_object_to_js x5543)|]);
                               ignore
                                 (Ojs.call x5546 "push" [|(any_to_js x5544)|]);
                               (match x5545 with
                                | Some x5547 ->
                                    ignore
                                      (Ojs.call x5546 "push"
                                         [|(untyped_object_to_js x5547)|])
                                | None -> ());
                               x5546))|])
    let (unregister :
      ('tags, 'T) this -> unregisterToken:untyped_object -> unit) =
      fun (x5553 : ('tags, 'T) this) ->
        fun ~unregisterToken:(x5552 : untyped_object) ->
          ignore
            (Ojs.call (this_to_js Obj.magic Obj.magic x5553) "unregister"
               [|(untyped_object_to_js x5552)|])
    let (register' :
      ('tags, 'T) this ->
        target:untyped_object ->
          heldValue:'T -> ?unregisterToken:untyped_object -> unit -> unit)
      =
      fun (x5561 : ('tags, 'T) this) ->
        fun ~target:(x5556 : untyped_object) ->
          fun ~heldValue:(x5557 : 'T) ->
            fun ?unregisterToken:(x5558 : untyped_object option) ->
              fun () ->
                ignore
                  (let x5564 = this_to_js Obj.magic Obj.magic x5561 in
                   Ojs.call (Ojs.get_prop_ascii x5564 "register") "apply"
                     [|x5564;((let x5559 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5559 "push"
                                    [|(untyped_object_to_js x5556)|]);
                               ignore
                                 (Ojs.call x5559 "push" [|(Obj.magic x5557)|]);
                               (match x5558 with
                                | Some x5560 ->
                                    ignore
                                      (Ojs.call x5559 "push"
                                         [|(untyped_object_to_js x5560)|])
                                | None -> ());
                               x5559))|])
    let (unregister' :
      ('tags, 'T) this -> unregisterToken:untyped_object -> unit) =
      fun (x5566 : ('tags, 'T) this) ->
        fun ~unregisterToken:(x5565 : untyped_object) ->
          ignore
            (Ojs.call (this_to_js Obj.magic Obj.magic x5566) "unregister"
               [|(untyped_object_to_js x5565)|])
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FinalizationRegistry")
             "prototype")
    let (create : (any -> unit) -> t_0) =
      fun (x5569 : any -> unit) ->
        t_0_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FinalizationRegistry")
             [|(Ojs.fun_to_js 1
                  (fun (x5570 : Ojs.t) -> x5569 (any_of_js x5570)))|])
    let (prototype' : unit -> any t) =
      fun () ->
        t_of_js any_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FinalizationRegistry")
             "prototype")
    let (create' : ('T -> unit) -> 'T t) =
      fun (x5572 : 'T -> unit) ->
        t_of_js Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FinalizationRegistry")
             [|(Ojs.fun_to_js 1
                  (fun (x5573 : Ojs.t) -> x5572 (Obj.magic x5573)))|])
    let cast_from = Obj.magic
  end
module Extract =
  struct
    type ('T, 'U) t = any
    let rec t_of_js :
      'T 'U . (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__U_of_js : Ojs.t -> __U) ->
          fun (x5576 : Ojs.t) -> any_of_js x5576
    and t_to_js :
      'T 'U . ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t -> Ojs.t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__U_to_js : __U -> Ojs.t) ->
          fun (x5575 : any) -> any_to_js x5575
    type ('T, 'U) t_2 = ('T, 'U) t
    let rec t_2_of_js :
      'T 'U . (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t_2 = fun
      (type __T) -> fun (type __U) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__U_of_js : Ojs.t -> __U) ->
          fun (x5580 : Ojs.t) -> t_of_js __T_of_js __U_of_js x5580
    and t_2_to_js :
      'T 'U . ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t_2 -> Ojs.t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__U_to_js : __U -> Ojs.t) ->
          fun (x5577 : (__T, __U) t) -> t_to_js __T_to_js __U_to_js x5577
  end
module EvalError =
  struct
    type t = [ `Error  | `EvalError ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5584 : Ojs.t) -> t_of_js x5584
    and t_0_to_js : t_0 -> Ojs.t = fun (x5583 : t) -> t_to_js x5583
    type tags = [ `Error  | `EvalError ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EvalError ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5587 : Ojs.t) -> intf_of_js __tags_of_js x5587
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5585 : __tags intf) -> intf_to_js __tags_to_js x5585
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x5589 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EvalError")
               (let x5590 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x5589 with
                 | Some x5591 ->
                     ignore
                       (Ojs.call x5590 "push" [|(Ojs.string_to_js x5591)|])
                 | None -> ());
                x5590))
    let (invoke : ?message:string -> unit -> t) =
      fun ?message:(x5592 : string option) ->
        fun () ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "EvalError") "apply"
               [|Ojs.null;((let x5593 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x5592 with
                             | Some x5594 ->
                                 ignore
                                   (Ojs.call x5593 "push"
                                      [|(Ojs.string_to_js x5594)|])
                             | None -> ());
                            x5593))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EvalError")
             "prototype")
    let cast_from = Obj.magic
  end
module DataView =
  struct
    type t = [ `DataView ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5596 : Ojs.t) -> t_of_js x5596
    and t_0_to_js : t_0 -> Ojs.t = fun (x5595 : t) -> t_to_js x5595
    type tags = [ `DataView ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DataView ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5599 : Ojs.t) -> intf_of_js __tags_of_js x5599
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5597 : __tags intf) -> intf_to_js __tags_to_js x5597
    let (getBigInt64 :
      'tags this -> byteOffset:float -> ?littleEndian:bool -> unit -> bigint)
      =
      fun (x5605 : 'tags this) ->
        fun ~byteOffset:(x5601 : float) ->
          fun ?littleEndian:(x5602 : bool option) ->
            fun () ->
              bigint_of_js
                (let x5607 = this_to_js Obj.magic x5605 in
                 Ojs.call (Ojs.get_prop_ascii x5607 "getBigInt64") "apply"
                   [|x5607;((let x5603 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5603 "push"
                                  [|(Ojs.float_to_js x5601)|]);
                             (match x5602 with
                              | Some x5604 ->
                                  ignore
                                    (Ojs.call x5603 "push"
                                       [|(Ojs.bool_to_js x5604)|])
                              | None -> ());
                             x5603))|])
    let (getBigUint64 :
      'tags this -> byteOffset:float -> ?littleEndian:bool -> unit -> bigint)
      =
      fun (x5612 : 'tags this) ->
        fun ~byteOffset:(x5608 : float) ->
          fun ?littleEndian:(x5609 : bool option) ->
            fun () ->
              bigint_of_js
                (let x5614 = this_to_js Obj.magic x5612 in
                 Ojs.call (Ojs.get_prop_ascii x5614 "getBigUint64") "apply"
                   [|x5614;((let x5610 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5610 "push"
                                  [|(Ojs.float_to_js x5608)|]);
                             (match x5609 with
                              | Some x5611 ->
                                  ignore
                                    (Ojs.call x5610 "push"
                                       [|(Ojs.bool_to_js x5611)|])
                              | None -> ());
                             x5610))|])
    let (setBigInt64 :
      'tags this ->
        byteOffset:float ->
          value:bigint -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x5620 : 'tags this) ->
        fun ~byteOffset:(x5615 : float) ->
          fun ~value:(x5616 : bigint) ->
            fun ?littleEndian:(x5617 : bool option) ->
              fun () ->
                ignore
                  (let x5622 = this_to_js Obj.magic x5620 in
                   Ojs.call (Ojs.get_prop_ascii x5622 "setBigInt64") "apply"
                     [|x5622;((let x5618 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5618 "push"
                                    [|(Ojs.float_to_js x5615)|]);
                               ignore
                                 (Ojs.call x5618 "push"
                                    [|(bigint_to_js x5616)|]);
                               (match x5617 with
                                | Some x5619 ->
                                    ignore
                                      (Ojs.call x5618 "push"
                                         [|(Ojs.bool_to_js x5619)|])
                                | None -> ());
                               x5618))|])
    let (setBigUint64 :
      'tags this ->
        byteOffset:float ->
          value:bigint -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x5628 : 'tags this) ->
        fun ~byteOffset:(x5623 : float) ->
          fun ~value:(x5624 : bigint) ->
            fun ?littleEndian:(x5625 : bool option) ->
              fun () ->
                ignore
                  (let x5630 = this_to_js Obj.magic x5628 in
                   Ojs.call (Ojs.get_prop_ascii x5630 "setBigUint64") "apply"
                     [|x5630;((let x5626 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5626 "push"
                                    [|(Ojs.float_to_js x5623)|]);
                               ignore
                                 (Ojs.call x5626 "push"
                                    [|(bigint_to_js x5624)|]);
                               (match x5625 with
                                | Some x5627 ->
                                    ignore
                                      (Ojs.call x5626 "push"
                                         [|(Ojs.bool_to_js x5627)|])
                                | None -> ());
                               x5626))|])
    let (get_buffer : 'tags this -> ArrayBuffer.t) =
      fun (x5631 : 'tags this) ->
        ArrayBuffer.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5631) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x5633 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5633) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x5635 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5635) "byteOffset")
    let (getFloat32 :
      'tags this -> byteOffset:float -> ?littleEndian:bool -> unit -> float)
      =
      fun (x5641 : 'tags this) ->
        fun ~byteOffset:(x5637 : float) ->
          fun ?littleEndian:(x5638 : bool option) ->
            fun () ->
              Ojs.float_of_js
                (let x5643 = this_to_js Obj.magic x5641 in
                 Ojs.call (Ojs.get_prop_ascii x5643 "getFloat32") "apply"
                   [|x5643;((let x5639 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5639 "push"
                                  [|(Ojs.float_to_js x5637)|]);
                             (match x5638 with
                              | Some x5640 ->
                                  ignore
                                    (Ojs.call x5639 "push"
                                       [|(Ojs.bool_to_js x5640)|])
                              | None -> ());
                             x5639))|])
    let (getFloat64 :
      'tags this -> byteOffset:float -> ?littleEndian:bool -> unit -> float)
      =
      fun (x5648 : 'tags this) ->
        fun ~byteOffset:(x5644 : float) ->
          fun ?littleEndian:(x5645 : bool option) ->
            fun () ->
              Ojs.float_of_js
                (let x5650 = this_to_js Obj.magic x5648 in
                 Ojs.call (Ojs.get_prop_ascii x5650 "getFloat64") "apply"
                   [|x5650;((let x5646 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5646 "push"
                                  [|(Ojs.float_to_js x5644)|]);
                             (match x5645 with
                              | Some x5647 ->
                                  ignore
                                    (Ojs.call x5646 "push"
                                       [|(Ojs.bool_to_js x5647)|])
                              | None -> ());
                             x5646))|])
    let (getInt8 : 'tags this -> byteOffset:float -> float) =
      fun (x5652 : 'tags this) ->
        fun ~byteOffset:(x5651 : float) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x5652) "getInt8"
               [|(Ojs.float_to_js x5651)|])
    let (getInt16 :
      'tags this -> byteOffset:float -> ?littleEndian:bool -> unit -> float)
      =
      fun (x5658 : 'tags this) ->
        fun ~byteOffset:(x5654 : float) ->
          fun ?littleEndian:(x5655 : bool option) ->
            fun () ->
              Ojs.float_of_js
                (let x5660 = this_to_js Obj.magic x5658 in
                 Ojs.call (Ojs.get_prop_ascii x5660 "getInt16") "apply"
                   [|x5660;((let x5656 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5656 "push"
                                  [|(Ojs.float_to_js x5654)|]);
                             (match x5655 with
                              | Some x5657 ->
                                  ignore
                                    (Ojs.call x5656 "push"
                                       [|(Ojs.bool_to_js x5657)|])
                              | None -> ());
                             x5656))|])
    let (getInt32 :
      'tags this -> byteOffset:float -> ?littleEndian:bool -> unit -> float)
      =
      fun (x5665 : 'tags this) ->
        fun ~byteOffset:(x5661 : float) ->
          fun ?littleEndian:(x5662 : bool option) ->
            fun () ->
              Ojs.float_of_js
                (let x5667 = this_to_js Obj.magic x5665 in
                 Ojs.call (Ojs.get_prop_ascii x5667 "getInt32") "apply"
                   [|x5667;((let x5663 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5663 "push"
                                  [|(Ojs.float_to_js x5661)|]);
                             (match x5662 with
                              | Some x5664 ->
                                  ignore
                                    (Ojs.call x5663 "push"
                                       [|(Ojs.bool_to_js x5664)|])
                              | None -> ());
                             x5663))|])
    let (getUint8 : 'tags this -> byteOffset:float -> float) =
      fun (x5669 : 'tags this) ->
        fun ~byteOffset:(x5668 : float) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x5669) "getUint8"
               [|(Ojs.float_to_js x5668)|])
    let (getUint16 :
      'tags this -> byteOffset:float -> ?littleEndian:bool -> unit -> float)
      =
      fun (x5675 : 'tags this) ->
        fun ~byteOffset:(x5671 : float) ->
          fun ?littleEndian:(x5672 : bool option) ->
            fun () ->
              Ojs.float_of_js
                (let x5677 = this_to_js Obj.magic x5675 in
                 Ojs.call (Ojs.get_prop_ascii x5677 "getUint16") "apply"
                   [|x5677;((let x5673 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5673 "push"
                                  [|(Ojs.float_to_js x5671)|]);
                             (match x5672 with
                              | Some x5674 ->
                                  ignore
                                    (Ojs.call x5673 "push"
                                       [|(Ojs.bool_to_js x5674)|])
                              | None -> ());
                             x5673))|])
    let (getUint32 :
      'tags this -> byteOffset:float -> ?littleEndian:bool -> unit -> float)
      =
      fun (x5682 : 'tags this) ->
        fun ~byteOffset:(x5678 : float) ->
          fun ?littleEndian:(x5679 : bool option) ->
            fun () ->
              Ojs.float_of_js
                (let x5684 = this_to_js Obj.magic x5682 in
                 Ojs.call (Ojs.get_prop_ascii x5684 "getUint32") "apply"
                   [|x5684;((let x5680 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5680 "push"
                                  [|(Ojs.float_to_js x5678)|]);
                             (match x5679 with
                              | Some x5681 ->
                                  ignore
                                    (Ojs.call x5680 "push"
                                       [|(Ojs.bool_to_js x5681)|])
                              | None -> ());
                             x5680))|])
    let (setFloat32 :
      'tags this ->
        byteOffset:float -> value:float -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x5690 : 'tags this) ->
        fun ~byteOffset:(x5685 : float) ->
          fun ~value:(x5686 : float) ->
            fun ?littleEndian:(x5687 : bool option) ->
              fun () ->
                ignore
                  (let x5692 = this_to_js Obj.magic x5690 in
                   Ojs.call (Ojs.get_prop_ascii x5692 "setFloat32") "apply"
                     [|x5692;((let x5688 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5688 "push"
                                    [|(Ojs.float_to_js x5685)|]);
                               ignore
                                 (Ojs.call x5688 "push"
                                    [|(Ojs.float_to_js x5686)|]);
                               (match x5687 with
                                | Some x5689 ->
                                    ignore
                                      (Ojs.call x5688 "push"
                                         [|(Ojs.bool_to_js x5689)|])
                                | None -> ());
                               x5688))|])
    let (setFloat64 :
      'tags this ->
        byteOffset:float -> value:float -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x5698 : 'tags this) ->
        fun ~byteOffset:(x5693 : float) ->
          fun ~value:(x5694 : float) ->
            fun ?littleEndian:(x5695 : bool option) ->
              fun () ->
                ignore
                  (let x5700 = this_to_js Obj.magic x5698 in
                   Ojs.call (Ojs.get_prop_ascii x5700 "setFloat64") "apply"
                     [|x5700;((let x5696 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5696 "push"
                                    [|(Ojs.float_to_js x5693)|]);
                               ignore
                                 (Ojs.call x5696 "push"
                                    [|(Ojs.float_to_js x5694)|]);
                               (match x5695 with
                                | Some x5697 ->
                                    ignore
                                      (Ojs.call x5696 "push"
                                         [|(Ojs.bool_to_js x5697)|])
                                | None -> ());
                               x5696))|])
    let (setInt8 : 'tags this -> byteOffset:float -> value:float -> unit) =
      fun (x5703 : 'tags this) ->
        fun ~byteOffset:(x5701 : float) ->
          fun ~value:(x5702 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5703) "setInt8"
                 [|(Ojs.float_to_js x5701);(Ojs.float_to_js x5702)|])
    let (setInt16 :
      'tags this ->
        byteOffset:float -> value:float -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x5710 : 'tags this) ->
        fun ~byteOffset:(x5705 : float) ->
          fun ~value:(x5706 : float) ->
            fun ?littleEndian:(x5707 : bool option) ->
              fun () ->
                ignore
                  (let x5712 = this_to_js Obj.magic x5710 in
                   Ojs.call (Ojs.get_prop_ascii x5712 "setInt16") "apply"
                     [|x5712;((let x5708 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5708 "push"
                                    [|(Ojs.float_to_js x5705)|]);
                               ignore
                                 (Ojs.call x5708 "push"
                                    [|(Ojs.float_to_js x5706)|]);
                               (match x5707 with
                                | Some x5709 ->
                                    ignore
                                      (Ojs.call x5708 "push"
                                         [|(Ojs.bool_to_js x5709)|])
                                | None -> ());
                               x5708))|])
    let (setInt32 :
      'tags this ->
        byteOffset:float -> value:float -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x5718 : 'tags this) ->
        fun ~byteOffset:(x5713 : float) ->
          fun ~value:(x5714 : float) ->
            fun ?littleEndian:(x5715 : bool option) ->
              fun () ->
                ignore
                  (let x5720 = this_to_js Obj.magic x5718 in
                   Ojs.call (Ojs.get_prop_ascii x5720 "setInt32") "apply"
                     [|x5720;((let x5716 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5716 "push"
                                    [|(Ojs.float_to_js x5713)|]);
                               ignore
                                 (Ojs.call x5716 "push"
                                    [|(Ojs.float_to_js x5714)|]);
                               (match x5715 with
                                | Some x5717 ->
                                    ignore
                                      (Ojs.call x5716 "push"
                                         [|(Ojs.bool_to_js x5717)|])
                                | None -> ());
                               x5716))|])
    let (setUint8 : 'tags this -> byteOffset:float -> value:float -> unit) =
      fun (x5723 : 'tags this) ->
        fun ~byteOffset:(x5721 : float) ->
          fun ~value:(x5722 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5723) "setUint8"
                 [|(Ojs.float_to_js x5721);(Ojs.float_to_js x5722)|])
    let (setUint16 :
      'tags this ->
        byteOffset:float -> value:float -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x5730 : 'tags this) ->
        fun ~byteOffset:(x5725 : float) ->
          fun ~value:(x5726 : float) ->
            fun ?littleEndian:(x5727 : bool option) ->
              fun () ->
                ignore
                  (let x5732 = this_to_js Obj.magic x5730 in
                   Ojs.call (Ojs.get_prop_ascii x5732 "setUint16") "apply"
                     [|x5732;((let x5728 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5728 "push"
                                    [|(Ojs.float_to_js x5725)|]);
                               ignore
                                 (Ojs.call x5728 "push"
                                    [|(Ojs.float_to_js x5726)|]);
                               (match x5727 with
                                | Some x5729 ->
                                    ignore
                                      (Ojs.call x5728 "push"
                                         [|(Ojs.bool_to_js x5729)|])
                                | None -> ());
                               x5728))|])
    let (setUint32 :
      'tags this ->
        byteOffset:float -> value:float -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x5738 : 'tags this) ->
        fun ~byteOffset:(x5733 : float) ->
          fun ~value:(x5734 : float) ->
            fun ?littleEndian:(x5735 : bool option) ->
              fun () ->
                ignore
                  (let x5740 = this_to_js Obj.magic x5738 in
                   Ojs.call (Ojs.get_prop_ascii x5740 "setUint32") "apply"
                     [|x5740;((let x5736 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5736 "push"
                                    [|(Ojs.float_to_js x5733)|]);
                               ignore
                                 (Ojs.call x5736 "push"
                                    [|(Ojs.float_to_js x5734)|]);
                               (match x5735 with
                                | Some x5737 ->
                                    ignore
                                      (Ojs.call x5736 "push"
                                         [|(Ojs.bool_to_js x5737)|])
                                | None -> ());
                               x5736))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DataView")
             "prototype")
    let (create :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?byteLength:float -> unit -> t)
      =
      fun ~buffer:(x5741 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x5742 : float option) ->
          fun ?byteLength:(x5743 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DataView")
                   (let x5744 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5744 "push"
                         [|(ArrayBufferLike.t_to_js x5741)|]);
                    (match x5742 with
                     | Some x5746 ->
                         ignore
                           (Ojs.call x5744 "push" [|(Ojs.float_to_js x5746)|])
                     | None -> ());
                    (match x5743 with
                     | Some x5745 ->
                         ignore
                           (Ojs.call x5744 "push" [|(Ojs.float_to_js x5745)|])
                     | None -> ());
                    x5744))
    let cast_from = Obj.magic
  end
module ConstructorParameters =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5748 : Ojs.t) -> any_of_js x5748
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x5747 : any) -> any_to_js x5747
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5751 : Ojs.t) -> t_of_js __T_of_js x5751
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x5749 : __T t) -> t_to_js __T_to_js x5749
  end
module ClassDecorator =
  struct
    type t = [ `ClassDecorator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5754 : Ojs.t) -> t_of_js x5754
    and t_0_to_js : t_0 -> Ojs.t = fun (x5753 : t) -> t_to_js x5753
    type tags = [ `ClassDecorator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ClassDecorator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5757 : Ojs.t) -> intf_of_js __tags_of_js x5757
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5755 : __tags intf) -> intf_to_js __tags_to_js x5755
    let (apply :
      'tags this -> target:'TFunction -> ('TFunction, unit) union2) =
      fun (x5760 : 'tags this) ->
        fun ~target:(x5759 : 'TFunction) ->
          union2_of_js Obj.magic Ojs.unit_of_js
            (Ojs.apply (this_to_js Obj.magic x5760) [|(Obj.magic x5759)|])
    let cast_from = Obj.magic
  end
module Capitalize =
  struct
    type 'S t = Ojs.t
    let rec t_of_js : 'S . (Ojs.t -> 'S) -> Ojs.t -> 'S t = fun (type __S) ->
      fun (__S_of_js : Ojs.t -> __S) -> fun (x5765 : Ojs.t) -> x5765
    and t_to_js : 'S . ('S -> Ojs.t) -> 'S t -> Ojs.t = fun (type __S) ->
      fun (__S_to_js : __S -> Ojs.t) -> fun (x5764 : Ojs.t) -> x5764
    type 'S t_1 = 'S t
    let rec t_1_of_js : 'S . (Ojs.t -> 'S) -> Ojs.t -> 'S t_1 = fun (type
      __S) ->
      fun (__S_of_js : Ojs.t -> __S) ->
        fun (x5768 : Ojs.t) -> t_of_js __S_of_js x5768
    and t_1_to_js : 'S . ('S -> Ojs.t) -> 'S t_1 -> Ojs.t = fun (type __S) ->
      fun (__S_to_js : __S -> Ojs.t) ->
        fun (x5766 : __S t) -> t_to_js __S_to_js x5766
  end
module ThisParameterType =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5771 : Ojs.t) -> any_of_js x5771
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x5770 : any) -> any_to_js x5770
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5774 : Ojs.t) -> t_of_js __T_of_js x5774
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x5772 : __T t) -> t_to_js __T_to_js x5772
  end
module OmitThisParameter =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5777 : Ojs.t) -> any_of_js x5777
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x5776 : any) -> any_to_js x5776
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5780 : Ojs.t) -> t_of_js __T_of_js x5780
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x5778 : __T t) -> t_to_js __T_to_js x5778
  end
module CallableFunction =
  struct
    type t = [ `CallableFunction  | `Function  | `Function ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5783 : Ojs.t) -> t_of_js x5783
    and t_0_to_js : t_0 -> Ojs.t = fun (x5782 : t) -> t_to_js x5782
    type tags = [ `CallableFunction  | `Function  | `Function ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CallableFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5786 : Ojs.t) -> intf_of_js __tags_of_js x5786
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5784 : __tags intf) -> intf_to_js __tags_to_js x5784
    let (apply_ : 'tags this -> this:('T -> 'R) -> thisArg:'T -> 'R) =
      fun (x5791 : 'tags this) ->
        fun ~this:(x5788 : 'T -> 'R) ->
          fun ~thisArg:(x5790 : 'T) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x5791) "apply"
                 [|(Ojs.fun_to_js 1
                      (fun (x5789 : Ojs.t) ->
                         Obj.magic (x5788 (Obj.magic x5789))));(Obj.magic
                                                                  x5790)|])
    let (apply_' :
      'tags this ->
        this:(this:'T -> args:any list -> 'R) -> thisArg:'T -> args:'A -> 'R)
      =
      fun (x5798 : 'tags this) ->
        fun ~this:(x5793 : this:'T -> args:any list -> 'R) ->
          fun ~thisArg:(x5796 : 'T) ->
            fun ~args:(x5797 : 'A) ->
              Obj.magic
                (Ojs.call (this_to_js Obj.magic x5798) "apply"
                   [|(Ojs.fun_to_js_args
                        (fun (x5794 : _) ->
                           Obj.magic
                             (x5793 ~this:(Obj.magic (Ojs.array_get x5794 0))
                                ~args:(Ojs.list_of_js_from any_of_js x5794 1))));(
                     Obj.magic x5796);(Obj.magic x5797)|])
    let (call :
      'tags this ->
        this:(this:'T -> args:any list -> 'R) ->
          thisArg:'T -> args:any list -> 'R)
      =
      fun (x5807 : 'tags this) ->
        fun ~this:(x5800 : this:'T -> args:any list -> 'R) ->
          fun ~thisArg:(x5801 : 'T) ->
            fun ~args:(x5802 : any list) ->
              Obj.magic
                (let x5809 = this_to_js Obj.magic x5807 in
                 Ojs.call (Ojs.get_prop_ascii x5809 "call") "apply"
                   [|x5809;((let x5803 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5803 "push"
                                  [|(Ojs.fun_to_js_args
                                       (fun (x5805 : _) ->
                                          Obj.magic
                                            (x5800
                                               ~this:(Obj.magic
                                                        (Ojs.array_get x5805
                                                           0))
                                               ~args:(Ojs.list_of_js_from
                                                        any_of_js x5805 1))))|]);
                             ignore
                               (Ojs.call x5803 "push" [|(Obj.magic x5801)|]);
                             List.iter
                               (fun (x5804 : any) ->
                                  ignore
                                    (Ojs.call x5803 "push"
                                       [|(any_to_js x5804)|])) x5802;
                             x5803))|])
    let (bind :
      'tags this ->
        this:'T -> thisArg:'T ThisParameterType.t -> 'T OmitThisParameter.t)
      =
      fun (x5813 : 'tags this) ->
        fun ~this:(x5810 : 'T) ->
          fun ~thisArg:(x5811 : 'T ThisParameterType.t) ->
            OmitThisParameter.t_of_js Obj.magic
              (Ojs.call (this_to_js Obj.magic x5813) "bind"
                 [|(Obj.magic x5810);(ThisParameterType.t_to_js Obj.magic
                                        x5811)|])
    let (bind' :
      'tags this ->
        this:(this:'T -> arg0:'A0 -> args:any list -> 'R) ->
          thisArg:'T -> arg0:'A0 -> any list -> 'R)
      =
      fun (x5821 : 'tags this) ->
        fun ~this:(x5816 : this:'T -> arg0:'A0 -> args:any list -> 'R) ->
          fun ~thisArg:(x5819 : 'T) ->
            fun ~arg0:(x5820 : 'A0) ->
              fun (x5823 : any list) ->
                Obj.magic
                  (Ojs.call
                     (Ojs.call (this_to_js Obj.magic x5821) "bind"
                        [|(Ojs.fun_to_js_args
                             (fun (x5817 : _) ->
                                Obj.magic
                                  (x5816
                                     ~this:(Obj.magic (Ojs.array_get x5817 0))
                                     ~arg0:(Obj.magic (Ojs.array_get x5817 1))
                                     ~args:(Ojs.list_of_js_from any_of_js
                                              x5817 2))));(Obj.magic x5819);(
                          Obj.magic x5820)|]) "apply"
                     [|Ojs.null;((let x5824 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  List.iter
                                    (fun (x5825 : any) ->
                                       ignore
                                         (Ojs.call x5824 "push"
                                            [|(any_to_js x5825)|])) x5823;
                                  x5824))|])
    let (bind'' :
      'tags this ->
        this:(this:'T -> arg0:'A0 -> arg1:'A1 -> args:any list -> 'R) ->
          thisArg:'T -> arg0:'A0 -> arg1:'A1 -> any list -> 'R)
      =
      fun (x5832 : 'tags this) ->
        fun
          ~this:(x5826 :
                  this:'T -> arg0:'A0 -> arg1:'A1 -> args:any list -> 'R)
          ->
          fun ~thisArg:(x5829 : 'T) ->
            fun ~arg0:(x5830 : 'A0) ->
              fun ~arg1:(x5831 : 'A1) ->
                fun (x5834 : any list) ->
                  Obj.magic
                    (Ojs.call
                       (Ojs.call (this_to_js Obj.magic x5832) "bind"
                          [|(Ojs.fun_to_js_args
                               (fun (x5827 : _) ->
                                  Obj.magic
                                    (x5826
                                       ~this:(Obj.magic
                                                (Ojs.array_get x5827 0))
                                       ~arg0:(Obj.magic
                                                (Ojs.array_get x5827 1))
                                       ~arg1:(Obj.magic
                                                (Ojs.array_get x5827 2))
                                       ~args:(Ojs.list_of_js_from any_of_js
                                                x5827 3))));(Obj.magic x5829);(
                            Obj.magic x5830);(Obj.magic x5831)|]) "apply"
                       [|Ojs.null;((let x5835 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    List.iter
                                      (fun (x5836 : any) ->
                                         ignore
                                           (Ojs.call x5835 "push"
                                              [|(any_to_js x5836)|])) x5834;
                                    x5835))|])
    let (bind''' :
      'tags this ->
        this:(this:'T ->
                arg0:'A0 -> arg1:'A1 -> arg2:'A2 -> args:any list -> 'R)
          -> thisArg:'T -> arg0:'A0 -> arg1:'A1 -> arg2:'A2 -> any list -> 'R)
      =
      fun (x5844 : 'tags this) ->
        fun
          ~this:(x5837 :
                  this:'T ->
                    arg0:'A0 -> arg1:'A1 -> arg2:'A2 -> args:any list -> 'R)
          ->
          fun ~thisArg:(x5840 : 'T) ->
            fun ~arg0:(x5841 : 'A0) ->
              fun ~arg1:(x5842 : 'A1) ->
                fun ~arg2:(x5843 : 'A2) ->
                  fun (x5846 : any list) ->
                    Obj.magic
                      (Ojs.call
                         (Ojs.call (this_to_js Obj.magic x5844) "bind"
                            [|(Ojs.fun_to_js_args
                                 (fun (x5838 : _) ->
                                    Obj.magic
                                      (x5837
                                         ~this:(Obj.magic
                                                  (Ojs.array_get x5838 0))
                                         ~arg0:(Obj.magic
                                                  (Ojs.array_get x5838 1))
                                         ~arg1:(Obj.magic
                                                  (Ojs.array_get x5838 2))
                                         ~arg2:(Obj.magic
                                                  (Ojs.array_get x5838 3))
                                         ~args:(Ojs.list_of_js_from any_of_js
                                                  x5838 4))));(Obj.magic
                                                                 x5840);(
                              Obj.magic x5841);(Obj.magic x5842);(Obj.magic
                                                                    x5843)|])
                         "apply"
                         [|Ojs.null;((let x5847 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      List.iter
                                        (fun (x5848 : any) ->
                                           ignore
                                             (Ojs.call x5847 "push"
                                                [|(any_to_js x5848)|])) x5846;
                                      x5847))|])
    let (bind'''' :
      'tags this ->
        this:(this:'T ->
                arg0:'A0 ->
                  arg1:'A1 -> arg2:'A2 -> arg3:'A3 -> args:any list -> 'R)
          ->
          thisArg:'T ->
            arg0:'A0 -> arg1:'A1 -> arg2:'A2 -> arg3:'A3 -> any list -> 'R)
      =
      fun (x5857 : 'tags this) ->
        fun
          ~this:(x5849 :
                  this:'T ->
                    arg0:'A0 ->
                      arg1:'A1 -> arg2:'A2 -> arg3:'A3 -> args:any list -> 'R)
          ->
          fun ~thisArg:(x5852 : 'T) ->
            fun ~arg0:(x5853 : 'A0) ->
              fun ~arg1:(x5854 : 'A1) ->
                fun ~arg2:(x5855 : 'A2) ->
                  fun ~arg3:(x5856 : 'A3) ->
                    fun (x5859 : any list) ->
                      Obj.magic
                        (Ojs.call
                           (Ojs.call (this_to_js Obj.magic x5857) "bind"
                              [|(Ojs.fun_to_js_args
                                   (fun (x5850 : _) ->
                                      Obj.magic
                                        (x5849
                                           ~this:(Obj.magic
                                                    (Ojs.array_get x5850 0))
                                           ~arg0:(Obj.magic
                                                    (Ojs.array_get x5850 1))
                                           ~arg1:(Obj.magic
                                                    (Ojs.array_get x5850 2))
                                           ~arg2:(Obj.magic
                                                    (Ojs.array_get x5850 3))
                                           ~arg3:(Obj.magic
                                                    (Ojs.array_get x5850 4))
                                           ~args:(Ojs.list_of_js_from
                                                    any_of_js x5850 5))));(
                                Obj.magic x5852);(Obj.magic x5853);(Obj.magic
                                                                    x5854);(
                                Obj.magic x5855);(Obj.magic x5856)|]) "apply"
                           [|Ojs.null;((let x5860 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        List.iter
                                          (fun (x5861 : any) ->
                                             ignore
                                               (Ojs.call x5860 "push"
                                                  [|(any_to_js x5861)|]))
                                          x5859;
                                        x5860))|])
    let (bind''''' :
      'tags this ->
        this:(this:'T -> args:'AX list -> 'R) ->
          thisArg:'T -> args:'AX list -> 'AX list -> 'R)
      =
      fun (x5869 : 'tags this) ->
        fun ~this:(x5862 : this:'T -> args:'AX list -> 'R) ->
          fun ~thisArg:(x5863 : 'T) ->
            fun ~args:(x5864 : 'AX list) ->
              fun (x5872 : 'AX list) ->
                Obj.magic
                  (Ojs.call
                     (let x5871 = this_to_js Obj.magic x5869 in
                      Ojs.call (Ojs.get_prop_ascii x5871 "bind") "apply"
                        [|x5871;((let x5865 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x5865 "push"
                                       [|(Ojs.fun_to_js_args
                                            (fun (x5867 : _) ->
                                               Obj.magic
                                                 (x5862
                                                    ~this:(Obj.magic
                                                             (Ojs.array_get
                                                                x5867 0))
                                                    ~args:(Ojs.list_of_js_from
                                                             Obj.magic x5867
                                                             1))))|]);
                                  ignore
                                    (Ojs.call x5865 "push"
                                       [|(Obj.magic x5863)|]);
                                  List.iter
                                    (fun (x5866 : 'AX) ->
                                       ignore
                                         (Ojs.call x5865 "push"
                                            [|(Obj.magic x5866)|])) x5864;
                                  x5865))|]) "apply"
                     [|Ojs.null;((let x5873 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  List.iter
                                    (fun (x5874 : 'AX) ->
                                       ignore
                                         (Ojs.call x5873 "push"
                                            [|(Obj.magic x5874)|])) x5872;
                                  x5873))|])
    let cast_from = Obj.magic
  end
module Boolean =
  struct
    type t = [ `Boolean ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5876 : Ojs.t) -> t_of_js x5876
    and t_0_to_js : t_0 -> Ojs.t = fun (x5875 : t) -> t_to_js x5875
    type tags = [ `Boolean ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Boolean ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5879 : Ojs.t) -> intf_of_js __tags_of_js x5879
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5877 : __tags intf) -> intf_to_js __tags_to_js x5877
    let (valueOf : 'tags this -> bool) =
      fun (x5881 : 'tags this) ->
        Ojs.bool_of_js (Ojs.call (this_to_js Obj.magic x5881) "valueOf" [||])
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x5883 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Boolean")
               (let x5884 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x5883 with
                 | Some x5885 ->
                     ignore (Ojs.call x5884 "push" [|(any_to_js x5885)|])
                 | None -> ());
                x5884))
    let (invoke : ?value:'T -> unit -> bool) =
      fun ?value:(x5886 : 'T option) ->
        fun () ->
          Ojs.bool_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Boolean") "apply"
               [|Ojs.null;((let x5887 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x5886 with
                             | Some x5888 ->
                                 ignore
                                   (Ojs.call x5887 "push"
                                      [|(Obj.magic x5888)|])
                             | None -> ());
                            x5887))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Boolean")
             "prototype")
    let cast_from = Obj.magic
  end
module BigIntToLocaleStringOptions =
  struct
    type t = [ `BigIntToLocaleStringOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5890 : Ojs.t) -> t_of_js x5890
    and t_0_to_js : t_0 -> Ojs.t = fun (x5889 : t) -> t_to_js x5889
    type tags = [ `BigIntToLocaleStringOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `BigIntToLocaleStringOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5893 : Ojs.t) -> intf_of_js __tags_of_js x5893
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5891 : __tags intf) -> intf_to_js __tags_to_js x5891
    let (get_localeMatcher : 'tags this -> string) =
      fun (x5895 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5895) "localeMatcher")
    let (set_localeMatcher : 'tags this -> string -> unit) =
      fun (x5897 : 'tags this) ->
        fun (x5898 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5897) "localeMatcher"
            (Ojs.string_to_js x5898)
    let (get_style : 'tags this -> string) =
      fun (x5900 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5900) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x5902 : 'tags this) ->
        fun (x5903 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5902) "style"
            (Ojs.string_to_js x5903)
    let (get_numberingSystem : 'tags this -> string) =
      fun (x5905 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5905) "numberingSystem")
    let (set_numberingSystem : 'tags this -> string -> unit) =
      fun (x5907 : 'tags this) ->
        fun (x5908 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5907) "numberingSystem"
            (Ojs.string_to_js x5908)
    let (get_unit : 'tags this -> string) =
      fun (x5910 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5910) "unit")
    let (set_unit : 'tags this -> string -> unit) =
      fun (x5912 : 'tags this) ->
        fun (x5913 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5912) "unit"
            (Ojs.string_to_js x5913)
    let (get_unitDisplay : 'tags this -> string) =
      fun (x5915 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5915) "unitDisplay")
    let (set_unitDisplay : 'tags this -> string -> unit) =
      fun (x5917 : 'tags this) ->
        fun (x5918 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5917) "unitDisplay"
            (Ojs.string_to_js x5918)
    let (get_currency : 'tags this -> string) =
      fun (x5920 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5920) "currency")
    let (set_currency : 'tags this -> string -> unit) =
      fun (x5922 : 'tags this) ->
        fun (x5923 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5922) "currency"
            (Ojs.string_to_js x5923)
    let (get_currencyDisplay : 'tags this -> string) =
      fun (x5925 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5925) "currencyDisplay")
    let (set_currencyDisplay : 'tags this -> string -> unit) =
      fun (x5927 : 'tags this) ->
        fun (x5928 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5927) "currencyDisplay"
            (Ojs.string_to_js x5928)
    let (get_useGrouping : 'tags this -> bool) =
      fun (x5930 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5930) "useGrouping")
    let (set_useGrouping : 'tags this -> bool -> unit) =
      fun (x5932 : 'tags this) ->
        fun (x5933 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5932) "useGrouping"
            (Ojs.bool_to_js x5933)
    let (get_minimumIntegerDigits :
      'tags this ->
        [ `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13  | `L_n_14 
        | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19  | `L_n_2 
        | `L_n_20  | `L_n_21  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9 ])
      =
      fun (x5935 : 'tags this) ->
        let x5937 =
          Ojs.get_prop_ascii (this_to_js Obj.magic x5935)
            "minimumIntegerDigits" in
        match Ojs.int_of_js x5937 with
        | 1 -> `L_n_1
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 2 -> `L_n_2
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | _ -> assert false
    let (set_minimumIntegerDigits :
      'tags this ->
        [ `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13  | `L_n_14 
        | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19  | `L_n_2 
        | `L_n_20  | `L_n_21  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9 ] -> unit)
      =
      fun (x5938 : 'tags this) ->
        fun
          (x5939 :
            [ `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13  | `L_n_14 
            | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19  | 
              `L_n_2 
            | `L_n_20  | `L_n_21  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9 ])
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5938)
            "minimumIntegerDigits"
            (match x5939 with
             | `L_n_1 -> Ojs.int_to_js 1
             | `L_n_10 -> Ojs.int_to_js 10
             | `L_n_11 -> Ojs.int_to_js 11
             | `L_n_12 -> Ojs.int_to_js 12
             | `L_n_13 -> Ojs.int_to_js 13
             | `L_n_14 -> Ojs.int_to_js 14
             | `L_n_15 -> Ojs.int_to_js 15
             | `L_n_16 -> Ojs.int_to_js 16
             | `L_n_17 -> Ojs.int_to_js 17
             | `L_n_18 -> Ojs.int_to_js 18
             | `L_n_19 -> Ojs.int_to_js 19
             | `L_n_2 -> Ojs.int_to_js 2
             | `L_n_20 -> Ojs.int_to_js 20
             | `L_n_21 -> Ojs.int_to_js 21
             | `L_n_3 -> Ojs.int_to_js 3
             | `L_n_4 -> Ojs.int_to_js 4
             | `L_n_5 -> Ojs.int_to_js 5
             | `L_n_6 -> Ojs.int_to_js 6
             | `L_n_7 -> Ojs.int_to_js 7
             | `L_n_8 -> Ojs.int_to_js 8
             | `L_n_9 -> Ojs.int_to_js 9)
    let (get_minimumFractionDigits :
      'tags this ->
        [ `L_n_0  | `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_2  | `L_n_20  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9 ])
      =
      fun (x5941 : 'tags this) ->
        let x5943 =
          Ojs.get_prop_ascii (this_to_js Obj.magic x5941)
            "minimumFractionDigits" in
        match Ojs.int_of_js x5943 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 2 -> `L_n_2
        | 20 -> `L_n_20
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | _ -> assert false
    let (set_minimumFractionDigits :
      'tags this ->
        [ `L_n_0  | `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_2  | `L_n_20  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9 ] -> unit)
      =
      fun (x5944 : 'tags this) ->
        fun
          (x5945 :
            [ `L_n_0  | `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
            | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | 
              `L_n_19 
            | `L_n_2  | `L_n_20  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9 ])
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5944)
            "minimumFractionDigits"
            (match x5945 with
             | `L_n_0 -> Ojs.int_to_js 0
             | `L_n_1 -> Ojs.int_to_js 1
             | `L_n_10 -> Ojs.int_to_js 10
             | `L_n_11 -> Ojs.int_to_js 11
             | `L_n_12 -> Ojs.int_to_js 12
             | `L_n_13 -> Ojs.int_to_js 13
             | `L_n_14 -> Ojs.int_to_js 14
             | `L_n_15 -> Ojs.int_to_js 15
             | `L_n_16 -> Ojs.int_to_js 16
             | `L_n_17 -> Ojs.int_to_js 17
             | `L_n_18 -> Ojs.int_to_js 18
             | `L_n_19 -> Ojs.int_to_js 19
             | `L_n_2 -> Ojs.int_to_js 2
             | `L_n_20 -> Ojs.int_to_js 20
             | `L_n_3 -> Ojs.int_to_js 3
             | `L_n_4 -> Ojs.int_to_js 4
             | `L_n_5 -> Ojs.int_to_js 5
             | `L_n_6 -> Ojs.int_to_js 6
             | `L_n_7 -> Ojs.int_to_js 7
             | `L_n_8 -> Ojs.int_to_js 8
             | `L_n_9 -> Ojs.int_to_js 9)
    let (get_maximumFractionDigits :
      'tags this ->
        [ `L_n_0  | `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_2  | `L_n_20  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9 ])
      =
      fun (x5947 : 'tags this) ->
        let x5949 =
          Ojs.get_prop_ascii (this_to_js Obj.magic x5947)
            "maximumFractionDigits" in
        match Ojs.int_of_js x5949 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 2 -> `L_n_2
        | 20 -> `L_n_20
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | _ -> assert false
    let (set_maximumFractionDigits :
      'tags this ->
        [ `L_n_0  | `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_2  | `L_n_20  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9 ] -> unit)
      =
      fun (x5950 : 'tags this) ->
        fun
          (x5951 :
            [ `L_n_0  | `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
            | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | 
              `L_n_19 
            | `L_n_2  | `L_n_20  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9 ])
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5950)
            "maximumFractionDigits"
            (match x5951 with
             | `L_n_0 -> Ojs.int_to_js 0
             | `L_n_1 -> Ojs.int_to_js 1
             | `L_n_10 -> Ojs.int_to_js 10
             | `L_n_11 -> Ojs.int_to_js 11
             | `L_n_12 -> Ojs.int_to_js 12
             | `L_n_13 -> Ojs.int_to_js 13
             | `L_n_14 -> Ojs.int_to_js 14
             | `L_n_15 -> Ojs.int_to_js 15
             | `L_n_16 -> Ojs.int_to_js 16
             | `L_n_17 -> Ojs.int_to_js 17
             | `L_n_18 -> Ojs.int_to_js 18
             | `L_n_19 -> Ojs.int_to_js 19
             | `L_n_2 -> Ojs.int_to_js 2
             | `L_n_20 -> Ojs.int_to_js 20
             | `L_n_3 -> Ojs.int_to_js 3
             | `L_n_4 -> Ojs.int_to_js 4
             | `L_n_5 -> Ojs.int_to_js 5
             | `L_n_6 -> Ojs.int_to_js 6
             | `L_n_7 -> Ojs.int_to_js 7
             | `L_n_8 -> Ojs.int_to_js 8
             | `L_n_9 -> Ojs.int_to_js 9)
    let (get_minimumSignificantDigits :
      'tags this ->
        [ `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13  | `L_n_14 
        | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19  | `L_n_2 
        | `L_n_20  | `L_n_21  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9 ])
      =
      fun (x5953 : 'tags this) ->
        let x5955 =
          Ojs.get_prop_ascii (this_to_js Obj.magic x5953)
            "minimumSignificantDigits" in
        match Ojs.int_of_js x5955 with
        | 1 -> `L_n_1
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 2 -> `L_n_2
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | _ -> assert false
    let (set_minimumSignificantDigits :
      'tags this ->
        [ `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13  | `L_n_14 
        | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19  | `L_n_2 
        | `L_n_20  | `L_n_21  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9 ] -> unit)
      =
      fun (x5956 : 'tags this) ->
        fun
          (x5957 :
            [ `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13  | `L_n_14 
            | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19  | 
              `L_n_2 
            | `L_n_20  | `L_n_21  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9 ])
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5956)
            "minimumSignificantDigits"
            (match x5957 with
             | `L_n_1 -> Ojs.int_to_js 1
             | `L_n_10 -> Ojs.int_to_js 10
             | `L_n_11 -> Ojs.int_to_js 11
             | `L_n_12 -> Ojs.int_to_js 12
             | `L_n_13 -> Ojs.int_to_js 13
             | `L_n_14 -> Ojs.int_to_js 14
             | `L_n_15 -> Ojs.int_to_js 15
             | `L_n_16 -> Ojs.int_to_js 16
             | `L_n_17 -> Ojs.int_to_js 17
             | `L_n_18 -> Ojs.int_to_js 18
             | `L_n_19 -> Ojs.int_to_js 19
             | `L_n_2 -> Ojs.int_to_js 2
             | `L_n_20 -> Ojs.int_to_js 20
             | `L_n_21 -> Ojs.int_to_js 21
             | `L_n_3 -> Ojs.int_to_js 3
             | `L_n_4 -> Ojs.int_to_js 4
             | `L_n_5 -> Ojs.int_to_js 5
             | `L_n_6 -> Ojs.int_to_js 6
             | `L_n_7 -> Ojs.int_to_js 7
             | `L_n_8 -> Ojs.int_to_js 8
             | `L_n_9 -> Ojs.int_to_js 9)
    let (get_maximumSignificantDigits :
      'tags this ->
        [ `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13  | `L_n_14 
        | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19  | `L_n_2 
        | `L_n_20  | `L_n_21  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9 ])
      =
      fun (x5959 : 'tags this) ->
        let x5961 =
          Ojs.get_prop_ascii (this_to_js Obj.magic x5959)
            "maximumSignificantDigits" in
        match Ojs.int_of_js x5961 with
        | 1 -> `L_n_1
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 2 -> `L_n_2
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | _ -> assert false
    let (set_maximumSignificantDigits :
      'tags this ->
        [ `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13  | `L_n_14 
        | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19  | `L_n_2 
        | `L_n_20  | `L_n_21  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9 ] -> unit)
      =
      fun (x5962 : 'tags this) ->
        fun
          (x5963 :
            [ `L_n_1  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13  | `L_n_14 
            | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19  | 
              `L_n_2 
            | `L_n_20  | `L_n_21  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9 ])
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5962)
            "maximumSignificantDigits"
            (match x5963 with
             | `L_n_1 -> Ojs.int_to_js 1
             | `L_n_10 -> Ojs.int_to_js 10
             | `L_n_11 -> Ojs.int_to_js 11
             | `L_n_12 -> Ojs.int_to_js 12
             | `L_n_13 -> Ojs.int_to_js 13
             | `L_n_14 -> Ojs.int_to_js 14
             | `L_n_15 -> Ojs.int_to_js 15
             | `L_n_16 -> Ojs.int_to_js 16
             | `L_n_17 -> Ojs.int_to_js 17
             | `L_n_18 -> Ojs.int_to_js 18
             | `L_n_19 -> Ojs.int_to_js 19
             | `L_n_2 -> Ojs.int_to_js 2
             | `L_n_20 -> Ojs.int_to_js 20
             | `L_n_21 -> Ojs.int_to_js 21
             | `L_n_3 -> Ojs.int_to_js 3
             | `L_n_4 -> Ojs.int_to_js 4
             | `L_n_5 -> Ojs.int_to_js 5
             | `L_n_6 -> Ojs.int_to_js 6
             | `L_n_7 -> Ojs.int_to_js 7
             | `L_n_8 -> Ojs.int_to_js 8
             | `L_n_9 -> Ojs.int_to_js 9)
    let (get_notation : 'tags this -> string) =
      fun (x5965 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5965) "notation")
    let (set_notation : 'tags this -> string -> unit) =
      fun (x5967 : 'tags this) ->
        fun (x5968 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5967) "notation"
            (Ojs.string_to_js x5968)
    let (get_compactDisplay : 'tags this -> string) =
      fun (x5970 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5970) "compactDisplay")
    let (set_compactDisplay : 'tags this -> string -> unit) =
      fun (x5972 : 'tags this) ->
        fun (x5973 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5972) "compactDisplay"
            (Ojs.string_to_js x5973)
    let cast_from = Obj.magic
  end
module BigInt =
  struct
    type t = [ `BigInt ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5976 : Ojs.t) -> t_of_js x5976
    and t_0_to_js : t_0 -> Ojs.t = fun (x5975 : t) -> t_to_js x5975
    type tags = [ `BigInt ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BigInt ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5979 : Ojs.t) -> intf_of_js __tags_of_js x5979
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5977 : __tags intf) -> intf_to_js __tags_to_js x5977
    let (toString : 'tags this -> ?radix:float -> unit -> string) =
      fun (x5984 : 'tags this) ->
        fun ?radix:(x5981 : float option) ->
          fun () ->
            Ojs.string_of_js
              (let x5986 = this_to_js Obj.magic x5984 in
               Ojs.call (Ojs.get_prop_ascii x5986 "toString") "apply"
                 [|x5986;((let x5982 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x5981 with
                            | Some x5983 ->
                                ignore
                                  (Ojs.call x5982 "push"
                                     [|(Ojs.float_to_js x5983)|])
                            | None -> ());
                           x5982))|])
    let (toLocaleString :
      'tags this ->
        ?locales:string ->
          ?options:BigIntToLocaleStringOptions.t -> unit -> string)
      =
      fun (x5992 : 'tags this) ->
        fun ?locales:(x5987 : string option) ->
          fun ?options:(x5988 : BigIntToLocaleStringOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x5994 = this_to_js Obj.magic x5992 in
                 Ojs.call (Ojs.get_prop_ascii x5994 "toLocaleString") "apply"
                   [|x5994;((let x5989 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x5987 with
                              | Some x5991 ->
                                  ignore
                                    (Ojs.call x5989 "push"
                                       [|(Ojs.string_to_js x5991)|])
                              | None -> ());
                             (match x5988 with
                              | Some x5990 ->
                                  ignore
                                    (Ojs.call x5989 "push"
                                       [|(BigIntToLocaleStringOptions.t_to_js
                                            x5990)|])
                              | None -> ());
                             x5989))|])
    let (valueOf : 'tags this -> bigint) =
      fun (x5995 : 'tags this) ->
        bigint_of_js (Ojs.call (this_to_js Obj.magic x5995) "valueOf" [||])
    let (invoke : bigint or_boolean or_string or_number -> bigint) =
      fun (x5997 : bigint or_boolean or_string or_number) ->
        bigint_of_js
          (Ojs.apply (Ojs.get_prop_ascii Ojs.global "BigInt")
             [|(or_number_to_js
                  (fun (x5998 : bigint or_boolean or_string) ->
                     or_string_to_js
                       (fun (x5999 : bigint or_boolean) ->
                          or_boolean_to_js bigint_to_js x5999) x5998) x5997)|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "BigInt")
             "prototype")
    let (asIntN : bits:float -> int:bigint -> bigint) =
      fun ~bits:(x6001 : float) ->
        fun ~int:(x6002 : bigint) ->
          bigint_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "BigInt") "asIntN"
               [|(Ojs.float_to_js x6001);(bigint_to_js x6002)|])
    let (asUintN : bits:float -> int:bigint -> bigint) =
      fun ~bits:(x6003 : float) ->
        fun ~int:(x6004 : bigint) ->
          bigint_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "BigInt") "asUintN"
               [|(Ojs.float_to_js x6003);(bigint_to_js x6004)|])
    let cast_from = Obj.magic
  end
module Uint8Array =
  struct
    type t =
      [ `ArrayLike of float  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined)  | `Uint8Array ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6006 : Ojs.t) -> t_of_js x6006
    and t_0_to_js : t_0 -> Ojs.t = fun (x6005 : t) -> t_to_js x6005
    type tags =
      [ `ArrayLike of float  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined)  | `Uint8Array ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Uint8Array ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6009 : Ojs.t) -> intf_of_js __tags_of_js x6009
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6007 : __tags intf) -> intf_to_js __tags_to_js x6007
    let (entries : 'tags this -> (float * float) IterableIterator.t) =
      fun (x6011 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x6013 : Ojs.t) ->
             let x6014 = x6013 in
             ((Ojs.float_of_js (Ojs.array_get x6014 0)),
               (Ojs.float_of_js (Ojs.array_get x6014 1))))
          (Ojs.call (this_to_js Obj.magic x6011) "entries" [||])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x6015 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x6015) "keys" [||])
    let (values : 'tags this -> float IterableIterator.t) =
      fun (x6018 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x6018) "values" [||])
    let (includes :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> bool)
      =
      fun (x6025 : 'tags this) ->
        fun ~searchElement:(x6021 : float) ->
          fun ?fromIndex:(x6022 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6027 = this_to_js Obj.magic x6025 in
                 Ojs.call (Ojs.get_prop_ascii x6027 "includes") "apply"
                   [|x6027;((let x6023 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6023 "push"
                                  [|(Ojs.float_to_js x6021)|]);
                             (match x6022 with
                              | Some x6024 ->
                                  ignore
                                    (Ojs.call x6023 "push"
                                       [|(Ojs.float_to_js x6024)|])
                              | None -> ());
                             x6023))|])
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x6028 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6028)
             "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x6030 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6030) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x6032 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6032) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x6034 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6034) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x6041 : 'tags this) ->
        fun ~target:(x6036 : float) ->
          fun ~start:(x6037 : float) ->
            fun ?end_:(x6038 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x6043 = this_to_js Obj.magic x6041 in
                   Ojs.call (Ojs.get_prop_ascii x6043 "copyWithin") "apply"
                     [|x6043;((let x6039 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6039 "push"
                                    [|(Ojs.float_to_js x6036)|]);
                               ignore
                                 (Ojs.call x6039 "push"
                                    [|(Ojs.float_to_js x6037)|]);
                               (match x6038 with
                                | Some x6040 ->
                                    ignore
                                      (Ojs.call x6039 "push"
                                         [|(Ojs.float_to_js x6040)|])
                                | None -> ());
                               x6039))|])
    let (every :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x6052 : 'tags this) ->
        fun
          ~predicate:(x6045 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x6046 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6054 = this_to_js Obj.magic x6052 in
                 Ojs.call (Ojs.get_prop_ascii x6054 "every") "apply"
                   [|x6054;((let x6047 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6047 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6049 : Ojs.t) ->
                                          fun (x6050 : Ojs.t) ->
                                            fun (x6051 : Ojs.t) ->
                                              unknown_to_js
                                                (x6045
                                                   ~value:(Ojs.float_of_js
                                                             x6049)
                                                   ~index:(Ojs.float_of_js
                                                             x6050)
                                                   ~array:(t_of_js x6051))))|]);
                             (match x6046 with
                              | Some x6048 ->
                                  ignore
                                    (Ojs.call x6047 "push"
                                       [|(any_to_js x6048)|])
                              | None -> ());
                             x6047))|])
    let (fill :
      'tags this ->
        value:float -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x6061 : 'tags this) ->
        fun ~value:(x6055 : float) ->
          fun ?start:(x6056 : float option) ->
            fun ?end_:(x6057 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x6063 = this_to_js Obj.magic x6061 in
                   Ojs.call (Ojs.get_prop_ascii x6063 "fill") "apply"
                     [|x6063;((let x6058 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6058 "push"
                                    [|(Ojs.float_to_js x6055)|]);
                               (match x6056 with
                                | Some x6060 ->
                                    ignore
                                      (Ojs.call x6058 "push"
                                         [|(Ojs.float_to_js x6060)|])
                                | None -> ());
                               (match x6057 with
                                | Some x6059 ->
                                    ignore
                                      (Ojs.call x6058 "push"
                                         [|(Ojs.float_to_js x6059)|])
                                | None -> ());
                               x6058))|])
    let (filter :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x6072 : 'tags this) ->
        fun ~predicate:(x6065 : value:float -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x6066 : any option) ->
            fun () ->
              t_of_js
                (let x6074 = this_to_js Obj.magic x6072 in
                 Ojs.call (Ojs.get_prop_ascii x6074 "filter") "apply"
                   [|x6074;((let x6067 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6067 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6069 : Ojs.t) ->
                                          fun (x6070 : Ojs.t) ->
                                            fun (x6071 : Ojs.t) ->
                                              any_to_js
                                                (x6065
                                                   ~value:(Ojs.float_of_js
                                                             x6069)
                                                   ~index:(Ojs.float_of_js
                                                             x6070)
                                                   ~array:(t_of_js x6071))))|]);
                             (match x6066 with
                              | Some x6068 ->
                                  ignore
                                    (Ojs.call x6067 "push"
                                       [|(any_to_js x6068)|])
                              | None -> ());
                             x6067))|])
    let (find :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float or_undefined)
      =
      fun (x6082 : 'tags this) ->
        fun ~predicate:(x6075 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x6076 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.float_of_js
                (let x6084 = this_to_js Obj.magic x6082 in
                 Ojs.call (Ojs.get_prop_ascii x6084 "find") "apply"
                   [|x6084;((let x6077 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6077 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6079 : Ojs.t) ->
                                          fun (x6080 : Ojs.t) ->
                                            fun (x6081 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x6075
                                                   ~value:(Ojs.float_of_js
                                                             x6079)
                                                   ~index:(Ojs.float_of_js
                                                             x6080)
                                                   ~obj:(t_of_js x6081))))|]);
                             (match x6076 with
                              | Some x6078 ->
                                  ignore
                                    (Ojs.call x6077 "push"
                                       [|(any_to_js x6078)|])
                              | None -> ());
                             x6077))|])
    let (findIndex :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x6093 : 'tags this) ->
        fun ~predicate:(x6086 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x6087 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x6095 = this_to_js Obj.magic x6093 in
                 Ojs.call (Ojs.get_prop_ascii x6095 "findIndex") "apply"
                   [|x6095;((let x6088 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6088 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6090 : Ojs.t) ->
                                          fun (x6091 : Ojs.t) ->
                                            fun (x6092 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x6086
                                                   ~value:(Ojs.float_of_js
                                                             x6090)
                                                   ~index:(Ojs.float_of_js
                                                             x6091)
                                                   ~obj:(t_of_js x6092))))|]);
                             (match x6087 with
                              | Some x6089 ->
                                  ignore
                                    (Ojs.call x6088 "push"
                                       [|(any_to_js x6089)|])
                              | None -> ());
                             x6088))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x6103 : 'tags this) ->
        fun
          ~callbackfn:(x6096 : value:float -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x6097 : any option) ->
            fun () ->
              ignore
                (let x6105 = this_to_js Obj.magic x6103 in
                 Ojs.call (Ojs.get_prop_ascii x6105 "forEach") "apply"
                   [|x6105;((let x6098 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6098 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6100 : Ojs.t) ->
                                          fun (x6101 : Ojs.t) ->
                                            fun (x6102 : Ojs.t) ->
                                              x6096
                                                ~value:(Ojs.float_of_js x6100)
                                                ~index:(Ojs.float_of_js x6101)
                                                ~array:(t_of_js x6102)))|]);
                             (match x6097 with
                              | Some x6099 ->
                                  ignore
                                    (Ojs.call x6098 "push"
                                       [|(any_to_js x6099)|])
                              | None -> ());
                             x6098))|])
    let (indexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x6110 : 'tags this) ->
        fun ~searchElement:(x6106 : float) ->
          fun ?fromIndex:(x6107 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x6112 = this_to_js Obj.magic x6110 in
                 Ojs.call (Ojs.get_prop_ascii x6112 "indexOf") "apply"
                   [|x6112;((let x6108 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6108 "push"
                                  [|(Ojs.float_to_js x6106)|]);
                             (match x6107 with
                              | Some x6109 ->
                                  ignore
                                    (Ojs.call x6108 "push"
                                       [|(Ojs.float_to_js x6109)|])
                              | None -> ());
                             x6108))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x6116 : 'tags this) ->
        fun ?separator:(x6113 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x6118 = this_to_js Obj.magic x6116 in
               Ojs.call (Ojs.get_prop_ascii x6118 "join") "apply"
                 [|x6118;((let x6114 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6113 with
                            | Some x6115 ->
                                ignore
                                  (Ojs.call x6114 "push"
                                     [|(Ojs.string_to_js x6115)|])
                            | None -> ());
                           x6114))|])
    let (lastIndexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x6123 : 'tags this) ->
        fun ~searchElement:(x6119 : float) ->
          fun ?fromIndex:(x6120 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x6125 = this_to_js Obj.magic x6123 in
                 Ojs.call (Ojs.get_prop_ascii x6125 "lastIndexOf") "apply"
                   [|x6125;((let x6121 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6121 "push"
                                  [|(Ojs.float_to_js x6119)|]);
                             (match x6120 with
                              | Some x6122 ->
                                  ignore
                                    (Ojs.call x6121 "push"
                                       [|(Ojs.float_to_js x6122)|])
                              | None -> ());
                             x6121))|])
    let (get_length : 'tags this -> float) =
      fun (x6126 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6126) "length")
    let (map :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> float) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x6135 : 'tags this) ->
        fun
          ~callbackfn:(x6128 :
                        value:float -> index:float -> array:t -> float)
          ->
          fun ?thisArg:(x6129 : any option) ->
            fun () ->
              t_of_js
                (let x6137 = this_to_js Obj.magic x6135 in
                 Ojs.call (Ojs.get_prop_ascii x6137 "map") "apply"
                   [|x6137;((let x6130 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6130 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6132 : Ojs.t) ->
                                          fun (x6133 : Ojs.t) ->
                                            fun (x6134 : Ojs.t) ->
                                              Ojs.float_to_js
                                                (x6128
                                                   ~value:(Ojs.float_of_js
                                                             x6132)
                                                   ~index:(Ojs.float_of_js
                                                             x6133)
                                                   ~array:(t_of_js x6134))))|]);
                             (match x6129 with
                              | Some x6131 ->
                                  ignore
                                    (Ojs.call x6130 "push"
                                       [|(any_to_js x6131)|])
                              | None -> ());
                             x6130))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x6143 : 'tags this) ->
        fun
          ~callbackfn:(x6138 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x6143) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x6139 : Ojs.t) ->
                       fun (x6140 : Ojs.t) ->
                         fun (x6141 : Ojs.t) ->
                           fun (x6142 : Ojs.t) ->
                             Ojs.float_to_js
                               (x6138 ~previousValue:(Ojs.float_of_js x6139)
                                  ~currentValue:(Ojs.float_of_js x6140)
                                  ~currentIndex:(Ojs.float_of_js x6141)
                                  ~array:(t_of_js x6142))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x6151 : 'tags this) ->
        fun
          ~callbackfn:(x6145 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x6150 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x6151) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x6146 : Ojs.t) ->
                         fun (x6147 : Ojs.t) ->
                           fun (x6148 : Ojs.t) ->
                             fun (x6149 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x6145
                                    ~previousValue:(Ojs.float_of_js x6146)
                                    ~currentValue:(Ojs.float_of_js x6147)
                                    ~currentIndex:(Ojs.float_of_js x6148)
                                    ~array:(t_of_js x6149))));(Ojs.float_to_js
                                                                 x6150)|])
    let (reduce'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x6159 : 'tags this) ->
        fun
          ~callbackfn:(x6153 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x6158 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x6159) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x6154 : Ojs.t) ->
                         fun (x6155 : Ojs.t) ->
                           fun (x6156 : Ojs.t) ->
                             fun (x6157 : Ojs.t) ->
                               Obj.magic
                                 (x6153 ~previousValue:(Obj.magic x6154)
                                    ~currentValue:(Ojs.float_of_js x6155)
                                    ~currentIndex:(Ojs.float_of_js x6156)
                                    ~array:(t_of_js x6157))));(Obj.magic
                                                                 x6158)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x6166 : 'tags this) ->
        fun
          ~callbackfn:(x6161 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x6166) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x6162 : Ojs.t) ->
                       fun (x6163 : Ojs.t) ->
                         fun (x6164 : Ojs.t) ->
                           fun (x6165 : Ojs.t) ->
                             Ojs.float_to_js
                               (x6161 ~previousValue:(Ojs.float_of_js x6162)
                                  ~currentValue:(Ojs.float_of_js x6163)
                                  ~currentIndex:(Ojs.float_of_js x6164)
                                  ~array:(t_of_js x6165))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x6174 : 'tags this) ->
        fun
          ~callbackfn:(x6168 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x6173 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x6174) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x6169 : Ojs.t) ->
                         fun (x6170 : Ojs.t) ->
                           fun (x6171 : Ojs.t) ->
                             fun (x6172 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x6168
                                    ~previousValue:(Ojs.float_of_js x6169)
                                    ~currentValue:(Ojs.float_of_js x6170)
                                    ~currentIndex:(Ojs.float_of_js x6171)
                                    ~array:(t_of_js x6172))));(Ojs.float_to_js
                                                                 x6173)|])
    let (reduceRight'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x6182 : 'tags this) ->
        fun
          ~callbackfn:(x6176 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x6181 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x6182) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x6177 : Ojs.t) ->
                         fun (x6178 : Ojs.t) ->
                           fun (x6179 : Ojs.t) ->
                             fun (x6180 : Ojs.t) ->
                               Obj.magic
                                 (x6176 ~previousValue:(Obj.magic x6177)
                                    ~currentValue:(Ojs.float_of_js x6178)
                                    ~currentIndex:(Ojs.float_of_js x6179)
                                    ~array:(t_of_js x6180))));(Obj.magic
                                                                 x6181)|])
    let (reverse : 'tags this -> t) =
      fun (x6184 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x6184) "reverse" [||])
    let (set_ :
      'tags this -> array:float ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x6191 : 'tags this) ->
        fun ~array:(x6186 : float ArrayLike.t) ->
          fun ?offset:(x6187 : float option) ->
            fun () ->
              ignore
                (let x6193 = this_to_js Obj.magic x6191 in
                 Ojs.call (Ojs.get_prop_ascii x6193 "set") "apply"
                   [|x6193;((let x6188 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6188 "push"
                                  [|(ArrayLike.t_to_js Ojs.float_to_js x6186)|]);
                             (match x6187 with
                              | Some x6189 ->
                                  ignore
                                    (Ojs.call x6188 "push"
                                       [|(Ojs.float_to_js x6189)|])
                              | None -> ());
                             x6188))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x6199 : 'tags this) ->
        fun ?start:(x6194 : float option) ->
          fun ?end_:(x6195 : float option) ->
            fun () ->
              t_of_js
                (let x6201 = this_to_js Obj.magic x6199 in
                 Ojs.call (Ojs.get_prop_ascii x6201 "slice") "apply"
                   [|x6201;((let x6196 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6194 with
                              | Some x6198 ->
                                  ignore
                                    (Ojs.call x6196 "push"
                                       [|(Ojs.float_to_js x6198)|])
                              | None -> ());
                             (match x6195 with
                              | Some x6197 ->
                                  ignore
                                    (Ojs.call x6196 "push"
                                       [|(Ojs.float_to_js x6197)|])
                              | None -> ());
                             x6196))|])
    let (some :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x6209 : 'tags this) ->
        fun
          ~predicate:(x6202 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x6203 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6211 = this_to_js Obj.magic x6209 in
                 Ojs.call (Ojs.get_prop_ascii x6211 "some") "apply"
                   [|x6211;((let x6204 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6204 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6206 : Ojs.t) ->
                                          fun (x6207 : Ojs.t) ->
                                            fun (x6208 : Ojs.t) ->
                                              unknown_to_js
                                                (x6202
                                                   ~value:(Ojs.float_of_js
                                                             x6206)
                                                   ~index:(Ojs.float_of_js
                                                             x6207)
                                                   ~array:(t_of_js x6208))))|]);
                             (match x6203 with
                              | Some x6205 ->
                                  ignore
                                    (Ojs.call x6204 "push"
                                       [|(any_to_js x6205)|])
                              | None -> ());
                             x6204))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:float -> b:float -> float) -> unit -> 'tags this)
      =
      fun (x6217 : 'tags this) ->
        fun ?compareFn:(x6212 : (a:float -> b:float -> float) option) ->
          fun () ->
            this_of_js Obj.magic
              (let x6219 = this_to_js Obj.magic x6217 in
               Ojs.call (Ojs.get_prop_ascii x6219 "sort") "apply"
                 [|x6219;((let x6213 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6212 with
                            | Some x6214 ->
                                ignore
                                  (Ojs.call x6213 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x6215 : Ojs.t) ->
                                             fun (x6216 : Ojs.t) ->
                                               Ojs.float_to_js
                                                 (x6214
                                                    ~a:(Ojs.float_of_js x6215)
                                                    ~b:(Ojs.float_of_js x6216))))|])
                            | None -> ());
                           x6213))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x6226 : 'tags this) ->
        fun ?begin_:(x6221 : float option) ->
          fun ?end_:(x6222 : float option) ->
            fun () ->
              t_of_js
                (let x6228 = this_to_js Obj.magic x6226 in
                 Ojs.call (Ojs.get_prop_ascii x6228 "subarray") "apply"
                   [|x6228;((let x6223 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6221 with
                              | Some x6225 ->
                                  ignore
                                    (Ojs.call x6223 "push"
                                       [|(Ojs.float_to_js x6225)|])
                              | None -> ());
                             (match x6222 with
                              | Some x6224 ->
                                  ignore
                                    (Ojs.call x6223 "push"
                                       [|(Ojs.float_to_js x6224)|])
                              | None -> ());
                             x6223))|])
    let (toLocaleString : 'tags this -> string) =
      fun (x6229 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6229) "toLocaleString" [||])
    let (toString : 'tags this -> string) =
      fun (x6231 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6231) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x6233 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x6233) "valueOf" [||])
    let (get : 'tags this -> float -> float) =
      fun (x6235 : 'tags this) ->
        fun (x6237 : float) ->
          Ojs.float_of_js
            (Ojs.get_prop (this_to_js Obj.magic x6235)
               (Ojs.float_to_js x6237))
    let (set : 'tags this -> float -> float -> unit) =
      fun (x6238 : 'tags this) ->
        fun (x6240 : float) ->
          fun (x6241 : float) ->
            Ojs.set_prop (this_to_js Obj.magic x6238) (Ojs.float_to_js x6240)
              (Ojs.float_to_js x6241)
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8Array") [||])
    let (create' : float Iterable.t -> t) =
      fun (x6242 : float Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             [|(Iterable.t_to_js Ojs.float_to_js x6242)|])
    let (from :
      arrayLike:float Iterable.t ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x6244 : float Iterable.t) ->
        fun ?mapfn:(x6245 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x6246 : any option) ->
            fun () ->
              t_of_js
                (let x6253 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
                 Ojs.call (Ojs.get_prop_ascii x6253 "from") "apply"
                   [|x6253;((let x6247 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6247 "push"
                                  [|(Iterable.t_to_js Ojs.float_to_js x6244)|]);
                             (match x6245 with
                              | Some x6249 ->
                                  ignore
                                    (Ojs.call x6247 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x6250 : Ojs.t) ->
                                               fun (x6251 : Ojs.t) ->
                                                 Ojs.float_to_js
                                                   (x6249
                                                      ~v:(Ojs.float_of_js
                                                            x6250)
                                                      ~k:(Ojs.float_of_js
                                                            x6251))))|])
                              | None -> ());
                             (match x6246 with
                              | Some x6248 ->
                                  ignore
                                    (Ojs.call x6247 "push"
                                       [|(any_to_js x6248)|])
                              | None -> ());
                             x6247))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             "prototype")
    let (create'' : float -> t) =
      fun (x6254 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             [|(Ojs.float_to_js x6254)|])
    let (create''' : (ArrayBufferLike.t, float ArrayLike.t) union2 -> t) =
      fun (x6255 : (ArrayBufferLike.t, float ArrayLike.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             [|(union2_to_js ArrayBufferLike.t_to_js
                  (fun (x6257 : float ArrayLike.t) ->
                     ArrayLike.t_to_js Ojs.float_to_js x6257) x6255)|])
    let (create'''' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x6259 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x6260 : float option) ->
          fun ?length:(x6261 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Uint8Array")
                   (let x6262 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x6262 "push"
                         [|(ArrayBufferLike.t_to_js x6259)|]);
                    (match x6260 with
                     | Some x6264 ->
                         ignore
                           (Ojs.call x6262 "push" [|(Ojs.float_to_js x6264)|])
                     | None -> ());
                    (match x6261 with
                     | Some x6263 ->
                         ignore
                           (Ojs.call x6262 "push" [|(Ojs.float_to_js x6263)|])
                     | None -> ());
                    x6262))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             "BYTES_PER_ELEMENT")
    let (of_ : float list -> t) =
      fun (x6265 : float list) ->
        t_of_js
          (let x6268 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
           Ojs.call (Ojs.get_prop_ascii x6268 "of") "apply"
             [|x6268;((let x6266 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x6267 : float) ->
                            ignore
                              (Ojs.call x6266 "push"
                                 [|(Ojs.float_to_js x6267)|])) x6265;
                       x6266))|])
    let (from' : float ArrayLike.t -> t) =
      fun (x6269 : float ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint8Array") "from"
             [|(ArrayLike.t_to_js Ojs.float_to_js x6269)|])
    let (from'' :
      arrayLike:'T ArrayLike.t ->
        mapfn:(v:'T -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x6271 : 'T ArrayLike.t) ->
        fun ~mapfn:(x6272 : v:'T -> k:float -> float) ->
          fun ?thisArg:(x6273 : any option) ->
            fun () ->
              t_of_js
                (let x6279 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
                 Ojs.call (Ojs.get_prop_ascii x6279 "from") "apply"
                   [|x6279;((let x6274 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6274 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x6271)|]);
                             ignore
                               (Ojs.call x6274 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x6276 : Ojs.t) ->
                                          fun (x6277 : Ojs.t) ->
                                            Ojs.float_to_js
                                              (x6272 ~v:(Obj.magic x6276)
                                                 ~k:(Ojs.float_of_js x6277))))|]);
                             (match x6273 with
                              | Some x6275 ->
                                  ignore
                                    (Ojs.call x6274 "push"
                                       [|(any_to_js x6275)|])
                              | None -> ());
                             x6274))|])
    let cast_from = Obj.magic
  end
module Uint32Array =
  struct
    type t =
      [ `ArrayLike of float  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined)  | `Uint32Array ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6281 : Ojs.t) -> t_of_js x6281
    and t_0_to_js : t_0 -> Ojs.t = fun (x6280 : t) -> t_to_js x6280
    type tags =
      [ `ArrayLike of float  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined)  | `Uint32Array ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Uint32Array ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6284 : Ojs.t) -> intf_of_js __tags_of_js x6284
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6282 : __tags intf) -> intf_to_js __tags_to_js x6282
    let (entries : 'tags this -> (float * float) IterableIterator.t) =
      fun (x6286 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x6288 : Ojs.t) ->
             let x6289 = x6288 in
             ((Ojs.float_of_js (Ojs.array_get x6289 0)),
               (Ojs.float_of_js (Ojs.array_get x6289 1))))
          (Ojs.call (this_to_js Obj.magic x6286) "entries" [||])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x6290 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x6290) "keys" [||])
    let (values : 'tags this -> float IterableIterator.t) =
      fun (x6293 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x6293) "values" [||])
    let (includes :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> bool)
      =
      fun (x6300 : 'tags this) ->
        fun ~searchElement:(x6296 : float) ->
          fun ?fromIndex:(x6297 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6302 = this_to_js Obj.magic x6300 in
                 Ojs.call (Ojs.get_prop_ascii x6302 "includes") "apply"
                   [|x6302;((let x6298 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6298 "push"
                                  [|(Ojs.float_to_js x6296)|]);
                             (match x6297 with
                              | Some x6299 ->
                                  ignore
                                    (Ojs.call x6298 "push"
                                       [|(Ojs.float_to_js x6299)|])
                              | None -> ());
                             x6298))|])
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x6303 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6303)
             "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x6305 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6305) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x6307 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6307) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x6309 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6309) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x6316 : 'tags this) ->
        fun ~target:(x6311 : float) ->
          fun ~start:(x6312 : float) ->
            fun ?end_:(x6313 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x6318 = this_to_js Obj.magic x6316 in
                   Ojs.call (Ojs.get_prop_ascii x6318 "copyWithin") "apply"
                     [|x6318;((let x6314 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6314 "push"
                                    [|(Ojs.float_to_js x6311)|]);
                               ignore
                                 (Ojs.call x6314 "push"
                                    [|(Ojs.float_to_js x6312)|]);
                               (match x6313 with
                                | Some x6315 ->
                                    ignore
                                      (Ojs.call x6314 "push"
                                         [|(Ojs.float_to_js x6315)|])
                                | None -> ());
                               x6314))|])
    let (every :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x6327 : 'tags this) ->
        fun
          ~predicate:(x6320 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x6321 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6329 = this_to_js Obj.magic x6327 in
                 Ojs.call (Ojs.get_prop_ascii x6329 "every") "apply"
                   [|x6329;((let x6322 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6322 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6324 : Ojs.t) ->
                                          fun (x6325 : Ojs.t) ->
                                            fun (x6326 : Ojs.t) ->
                                              unknown_to_js
                                                (x6320
                                                   ~value:(Ojs.float_of_js
                                                             x6324)
                                                   ~index:(Ojs.float_of_js
                                                             x6325)
                                                   ~array:(t_of_js x6326))))|]);
                             (match x6321 with
                              | Some x6323 ->
                                  ignore
                                    (Ojs.call x6322 "push"
                                       [|(any_to_js x6323)|])
                              | None -> ());
                             x6322))|])
    let (fill :
      'tags this ->
        value:float -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x6336 : 'tags this) ->
        fun ~value:(x6330 : float) ->
          fun ?start:(x6331 : float option) ->
            fun ?end_:(x6332 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x6338 = this_to_js Obj.magic x6336 in
                   Ojs.call (Ojs.get_prop_ascii x6338 "fill") "apply"
                     [|x6338;((let x6333 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6333 "push"
                                    [|(Ojs.float_to_js x6330)|]);
                               (match x6331 with
                                | Some x6335 ->
                                    ignore
                                      (Ojs.call x6333 "push"
                                         [|(Ojs.float_to_js x6335)|])
                                | None -> ());
                               (match x6332 with
                                | Some x6334 ->
                                    ignore
                                      (Ojs.call x6333 "push"
                                         [|(Ojs.float_to_js x6334)|])
                                | None -> ());
                               x6333))|])
    let (filter :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x6347 : 'tags this) ->
        fun ~predicate:(x6340 : value:float -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x6341 : any option) ->
            fun () ->
              t_of_js
                (let x6349 = this_to_js Obj.magic x6347 in
                 Ojs.call (Ojs.get_prop_ascii x6349 "filter") "apply"
                   [|x6349;((let x6342 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6342 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6344 : Ojs.t) ->
                                          fun (x6345 : Ojs.t) ->
                                            fun (x6346 : Ojs.t) ->
                                              any_to_js
                                                (x6340
                                                   ~value:(Ojs.float_of_js
                                                             x6344)
                                                   ~index:(Ojs.float_of_js
                                                             x6345)
                                                   ~array:(t_of_js x6346))))|]);
                             (match x6341 with
                              | Some x6343 ->
                                  ignore
                                    (Ojs.call x6342 "push"
                                       [|(any_to_js x6343)|])
                              | None -> ());
                             x6342))|])
    let (find :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float or_undefined)
      =
      fun (x6357 : 'tags this) ->
        fun ~predicate:(x6350 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x6351 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.float_of_js
                (let x6359 = this_to_js Obj.magic x6357 in
                 Ojs.call (Ojs.get_prop_ascii x6359 "find") "apply"
                   [|x6359;((let x6352 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6352 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6354 : Ojs.t) ->
                                          fun (x6355 : Ojs.t) ->
                                            fun (x6356 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x6350
                                                   ~value:(Ojs.float_of_js
                                                             x6354)
                                                   ~index:(Ojs.float_of_js
                                                             x6355)
                                                   ~obj:(t_of_js x6356))))|]);
                             (match x6351 with
                              | Some x6353 ->
                                  ignore
                                    (Ojs.call x6352 "push"
                                       [|(any_to_js x6353)|])
                              | None -> ());
                             x6352))|])
    let (findIndex :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x6368 : 'tags this) ->
        fun ~predicate:(x6361 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x6362 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x6370 = this_to_js Obj.magic x6368 in
                 Ojs.call (Ojs.get_prop_ascii x6370 "findIndex") "apply"
                   [|x6370;((let x6363 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6363 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6365 : Ojs.t) ->
                                          fun (x6366 : Ojs.t) ->
                                            fun (x6367 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x6361
                                                   ~value:(Ojs.float_of_js
                                                             x6365)
                                                   ~index:(Ojs.float_of_js
                                                             x6366)
                                                   ~obj:(t_of_js x6367))))|]);
                             (match x6362 with
                              | Some x6364 ->
                                  ignore
                                    (Ojs.call x6363 "push"
                                       [|(any_to_js x6364)|])
                              | None -> ());
                             x6363))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x6378 : 'tags this) ->
        fun
          ~callbackfn:(x6371 : value:float -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x6372 : any option) ->
            fun () ->
              ignore
                (let x6380 = this_to_js Obj.magic x6378 in
                 Ojs.call (Ojs.get_prop_ascii x6380 "forEach") "apply"
                   [|x6380;((let x6373 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6373 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6375 : Ojs.t) ->
                                          fun (x6376 : Ojs.t) ->
                                            fun (x6377 : Ojs.t) ->
                                              x6371
                                                ~value:(Ojs.float_of_js x6375)
                                                ~index:(Ojs.float_of_js x6376)
                                                ~array:(t_of_js x6377)))|]);
                             (match x6372 with
                              | Some x6374 ->
                                  ignore
                                    (Ojs.call x6373 "push"
                                       [|(any_to_js x6374)|])
                              | None -> ());
                             x6373))|])
    let (indexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x6385 : 'tags this) ->
        fun ~searchElement:(x6381 : float) ->
          fun ?fromIndex:(x6382 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x6387 = this_to_js Obj.magic x6385 in
                 Ojs.call (Ojs.get_prop_ascii x6387 "indexOf") "apply"
                   [|x6387;((let x6383 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6383 "push"
                                  [|(Ojs.float_to_js x6381)|]);
                             (match x6382 with
                              | Some x6384 ->
                                  ignore
                                    (Ojs.call x6383 "push"
                                       [|(Ojs.float_to_js x6384)|])
                              | None -> ());
                             x6383))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x6391 : 'tags this) ->
        fun ?separator:(x6388 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x6393 = this_to_js Obj.magic x6391 in
               Ojs.call (Ojs.get_prop_ascii x6393 "join") "apply"
                 [|x6393;((let x6389 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6388 with
                            | Some x6390 ->
                                ignore
                                  (Ojs.call x6389 "push"
                                     [|(Ojs.string_to_js x6390)|])
                            | None -> ());
                           x6389))|])
    let (lastIndexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x6398 : 'tags this) ->
        fun ~searchElement:(x6394 : float) ->
          fun ?fromIndex:(x6395 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x6400 = this_to_js Obj.magic x6398 in
                 Ojs.call (Ojs.get_prop_ascii x6400 "lastIndexOf") "apply"
                   [|x6400;((let x6396 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6396 "push"
                                  [|(Ojs.float_to_js x6394)|]);
                             (match x6395 with
                              | Some x6397 ->
                                  ignore
                                    (Ojs.call x6396 "push"
                                       [|(Ojs.float_to_js x6397)|])
                              | None -> ());
                             x6396))|])
    let (get_length : 'tags this -> float) =
      fun (x6401 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6401) "length")
    let (map :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> float) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x6410 : 'tags this) ->
        fun
          ~callbackfn:(x6403 :
                        value:float -> index:float -> array:t -> float)
          ->
          fun ?thisArg:(x6404 : any option) ->
            fun () ->
              t_of_js
                (let x6412 = this_to_js Obj.magic x6410 in
                 Ojs.call (Ojs.get_prop_ascii x6412 "map") "apply"
                   [|x6412;((let x6405 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6405 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6407 : Ojs.t) ->
                                          fun (x6408 : Ojs.t) ->
                                            fun (x6409 : Ojs.t) ->
                                              Ojs.float_to_js
                                                (x6403
                                                   ~value:(Ojs.float_of_js
                                                             x6407)
                                                   ~index:(Ojs.float_of_js
                                                             x6408)
                                                   ~array:(t_of_js x6409))))|]);
                             (match x6404 with
                              | Some x6406 ->
                                  ignore
                                    (Ojs.call x6405 "push"
                                       [|(any_to_js x6406)|])
                              | None -> ());
                             x6405))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x6418 : 'tags this) ->
        fun
          ~callbackfn:(x6413 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x6418) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x6414 : Ojs.t) ->
                       fun (x6415 : Ojs.t) ->
                         fun (x6416 : Ojs.t) ->
                           fun (x6417 : Ojs.t) ->
                             Ojs.float_to_js
                               (x6413 ~previousValue:(Ojs.float_of_js x6414)
                                  ~currentValue:(Ojs.float_of_js x6415)
                                  ~currentIndex:(Ojs.float_of_js x6416)
                                  ~array:(t_of_js x6417))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x6426 : 'tags this) ->
        fun
          ~callbackfn:(x6420 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x6425 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x6426) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x6421 : Ojs.t) ->
                         fun (x6422 : Ojs.t) ->
                           fun (x6423 : Ojs.t) ->
                             fun (x6424 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x6420
                                    ~previousValue:(Ojs.float_of_js x6421)
                                    ~currentValue:(Ojs.float_of_js x6422)
                                    ~currentIndex:(Ojs.float_of_js x6423)
                                    ~array:(t_of_js x6424))));(Ojs.float_to_js
                                                                 x6425)|])
    let (reduce'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x6434 : 'tags this) ->
        fun
          ~callbackfn:(x6428 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x6433 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x6434) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x6429 : Ojs.t) ->
                         fun (x6430 : Ojs.t) ->
                           fun (x6431 : Ojs.t) ->
                             fun (x6432 : Ojs.t) ->
                               Obj.magic
                                 (x6428 ~previousValue:(Obj.magic x6429)
                                    ~currentValue:(Ojs.float_of_js x6430)
                                    ~currentIndex:(Ojs.float_of_js x6431)
                                    ~array:(t_of_js x6432))));(Obj.magic
                                                                 x6433)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x6441 : 'tags this) ->
        fun
          ~callbackfn:(x6436 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x6441) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x6437 : Ojs.t) ->
                       fun (x6438 : Ojs.t) ->
                         fun (x6439 : Ojs.t) ->
                           fun (x6440 : Ojs.t) ->
                             Ojs.float_to_js
                               (x6436 ~previousValue:(Ojs.float_of_js x6437)
                                  ~currentValue:(Ojs.float_of_js x6438)
                                  ~currentIndex:(Ojs.float_of_js x6439)
                                  ~array:(t_of_js x6440))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x6449 : 'tags this) ->
        fun
          ~callbackfn:(x6443 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x6448 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x6449) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x6444 : Ojs.t) ->
                         fun (x6445 : Ojs.t) ->
                           fun (x6446 : Ojs.t) ->
                             fun (x6447 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x6443
                                    ~previousValue:(Ojs.float_of_js x6444)
                                    ~currentValue:(Ojs.float_of_js x6445)
                                    ~currentIndex:(Ojs.float_of_js x6446)
                                    ~array:(t_of_js x6447))));(Ojs.float_to_js
                                                                 x6448)|])
    let (reduceRight'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x6457 : 'tags this) ->
        fun
          ~callbackfn:(x6451 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x6456 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x6457) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x6452 : Ojs.t) ->
                         fun (x6453 : Ojs.t) ->
                           fun (x6454 : Ojs.t) ->
                             fun (x6455 : Ojs.t) ->
                               Obj.magic
                                 (x6451 ~previousValue:(Obj.magic x6452)
                                    ~currentValue:(Ojs.float_of_js x6453)
                                    ~currentIndex:(Ojs.float_of_js x6454)
                                    ~array:(t_of_js x6455))));(Obj.magic
                                                                 x6456)|])
    let (reverse : 'tags this -> t) =
      fun (x6459 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x6459) "reverse" [||])
    let (set_ :
      'tags this -> array:float ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x6466 : 'tags this) ->
        fun ~array:(x6461 : float ArrayLike.t) ->
          fun ?offset:(x6462 : float option) ->
            fun () ->
              ignore
                (let x6468 = this_to_js Obj.magic x6466 in
                 Ojs.call (Ojs.get_prop_ascii x6468 "set") "apply"
                   [|x6468;((let x6463 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6463 "push"
                                  [|(ArrayLike.t_to_js Ojs.float_to_js x6461)|]);
                             (match x6462 with
                              | Some x6464 ->
                                  ignore
                                    (Ojs.call x6463 "push"
                                       [|(Ojs.float_to_js x6464)|])
                              | None -> ());
                             x6463))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x6474 : 'tags this) ->
        fun ?start:(x6469 : float option) ->
          fun ?end_:(x6470 : float option) ->
            fun () ->
              t_of_js
                (let x6476 = this_to_js Obj.magic x6474 in
                 Ojs.call (Ojs.get_prop_ascii x6476 "slice") "apply"
                   [|x6476;((let x6471 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6469 with
                              | Some x6473 ->
                                  ignore
                                    (Ojs.call x6471 "push"
                                       [|(Ojs.float_to_js x6473)|])
                              | None -> ());
                             (match x6470 with
                              | Some x6472 ->
                                  ignore
                                    (Ojs.call x6471 "push"
                                       [|(Ojs.float_to_js x6472)|])
                              | None -> ());
                             x6471))|])
    let (some :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x6484 : 'tags this) ->
        fun
          ~predicate:(x6477 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x6478 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6486 = this_to_js Obj.magic x6484 in
                 Ojs.call (Ojs.get_prop_ascii x6486 "some") "apply"
                   [|x6486;((let x6479 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6479 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6481 : Ojs.t) ->
                                          fun (x6482 : Ojs.t) ->
                                            fun (x6483 : Ojs.t) ->
                                              unknown_to_js
                                                (x6477
                                                   ~value:(Ojs.float_of_js
                                                             x6481)
                                                   ~index:(Ojs.float_of_js
                                                             x6482)
                                                   ~array:(t_of_js x6483))))|]);
                             (match x6478 with
                              | Some x6480 ->
                                  ignore
                                    (Ojs.call x6479 "push"
                                       [|(any_to_js x6480)|])
                              | None -> ());
                             x6479))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:float -> b:float -> float) -> unit -> 'tags this)
      =
      fun (x6492 : 'tags this) ->
        fun ?compareFn:(x6487 : (a:float -> b:float -> float) option) ->
          fun () ->
            this_of_js Obj.magic
              (let x6494 = this_to_js Obj.magic x6492 in
               Ojs.call (Ojs.get_prop_ascii x6494 "sort") "apply"
                 [|x6494;((let x6488 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6487 with
                            | Some x6489 ->
                                ignore
                                  (Ojs.call x6488 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x6490 : Ojs.t) ->
                                             fun (x6491 : Ojs.t) ->
                                               Ojs.float_to_js
                                                 (x6489
                                                    ~a:(Ojs.float_of_js x6490)
                                                    ~b:(Ojs.float_of_js x6491))))|])
                            | None -> ());
                           x6488))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x6501 : 'tags this) ->
        fun ?begin_:(x6496 : float option) ->
          fun ?end_:(x6497 : float option) ->
            fun () ->
              t_of_js
                (let x6503 = this_to_js Obj.magic x6501 in
                 Ojs.call (Ojs.get_prop_ascii x6503 "subarray") "apply"
                   [|x6503;((let x6498 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6496 with
                              | Some x6500 ->
                                  ignore
                                    (Ojs.call x6498 "push"
                                       [|(Ojs.float_to_js x6500)|])
                              | None -> ());
                             (match x6497 with
                              | Some x6499 ->
                                  ignore
                                    (Ojs.call x6498 "push"
                                       [|(Ojs.float_to_js x6499)|])
                              | None -> ());
                             x6498))|])
    let (toLocaleString : 'tags this -> string) =
      fun (x6504 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6504) "toLocaleString" [||])
    let (toString : 'tags this -> string) =
      fun (x6506 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6506) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x6508 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x6508) "valueOf" [||])
    let (get : 'tags this -> float -> float) =
      fun (x6510 : 'tags this) ->
        fun (x6512 : float) ->
          Ojs.float_of_js
            (Ojs.get_prop (this_to_js Obj.magic x6510)
               (Ojs.float_to_js x6512))
    let (set : 'tags this -> float -> float -> unit) =
      fun (x6513 : 'tags this) ->
        fun (x6515 : float) ->
          fun (x6516 : float) ->
            Ojs.set_prop (this_to_js Obj.magic x6513) (Ojs.float_to_js x6515)
              (Ojs.float_to_js x6516)
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint32Array") [||])
    let (create' : float Iterable.t -> t) =
      fun (x6517 : float Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             [|(Iterable.t_to_js Ojs.float_to_js x6517)|])
    let (from :
      arrayLike:float Iterable.t ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x6519 : float Iterable.t) ->
        fun ?mapfn:(x6520 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x6521 : any option) ->
            fun () ->
              t_of_js
                (let x6528 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
                 Ojs.call (Ojs.get_prop_ascii x6528 "from") "apply"
                   [|x6528;((let x6522 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6522 "push"
                                  [|(Iterable.t_to_js Ojs.float_to_js x6519)|]);
                             (match x6520 with
                              | Some x6524 ->
                                  ignore
                                    (Ojs.call x6522 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x6525 : Ojs.t) ->
                                               fun (x6526 : Ojs.t) ->
                                                 Ojs.float_to_js
                                                   (x6524
                                                      ~v:(Ojs.float_of_js
                                                            x6525)
                                                      ~k:(Ojs.float_of_js
                                                            x6526))))|])
                              | None -> ());
                             (match x6521 with
                              | Some x6523 ->
                                  ignore
                                    (Ojs.call x6522 "push"
                                       [|(any_to_js x6523)|])
                              | None -> ());
                             x6522))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             "prototype")
    let (create'' : float -> t) =
      fun (x6529 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             [|(Ojs.float_to_js x6529)|])
    let (create''' : (ArrayBufferLike.t, float ArrayLike.t) union2 -> t) =
      fun (x6530 : (ArrayBufferLike.t, float ArrayLike.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             [|(union2_to_js ArrayBufferLike.t_to_js
                  (fun (x6532 : float ArrayLike.t) ->
                     ArrayLike.t_to_js Ojs.float_to_js x6532) x6530)|])
    let (create'''' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x6534 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x6535 : float option) ->
          fun ?length:(x6536 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Uint32Array")
                   (let x6537 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x6537 "push"
                         [|(ArrayBufferLike.t_to_js x6534)|]);
                    (match x6535 with
                     | Some x6539 ->
                         ignore
                           (Ojs.call x6537 "push" [|(Ojs.float_to_js x6539)|])
                     | None -> ());
                    (match x6536 with
                     | Some x6538 ->
                         ignore
                           (Ojs.call x6537 "push" [|(Ojs.float_to_js x6538)|])
                     | None -> ());
                    x6537))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             "BYTES_PER_ELEMENT")
    let (of_ : float list -> t) =
      fun (x6540 : float list) ->
        t_of_js
          (let x6543 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
           Ojs.call (Ojs.get_prop_ascii x6543 "of") "apply"
             [|x6543;((let x6541 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x6542 : float) ->
                            ignore
                              (Ojs.call x6541 "push"
                                 [|(Ojs.float_to_js x6542)|])) x6540;
                       x6541))|])
    let (from' : float ArrayLike.t -> t) =
      fun (x6544 : float ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint32Array") "from"
             [|(ArrayLike.t_to_js Ojs.float_to_js x6544)|])
    let (from'' :
      arrayLike:'T ArrayLike.t ->
        mapfn:(v:'T -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x6546 : 'T ArrayLike.t) ->
        fun ~mapfn:(x6547 : v:'T -> k:float -> float) ->
          fun ?thisArg:(x6548 : any option) ->
            fun () ->
              t_of_js
                (let x6554 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
                 Ojs.call (Ojs.get_prop_ascii x6554 "from") "apply"
                   [|x6554;((let x6549 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6549 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x6546)|]);
                             ignore
                               (Ojs.call x6549 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x6551 : Ojs.t) ->
                                          fun (x6552 : Ojs.t) ->
                                            Ojs.float_to_js
                                              (x6547 ~v:(Obj.magic x6551)
                                                 ~k:(Ojs.float_of_js x6552))))|]);
                             (match x6548 with
                              | Some x6550 ->
                                  ignore
                                    (Ojs.call x6549 "push"
                                       [|(any_to_js x6550)|])
                              | None -> ());
                             x6549))|])
    let cast_from = Obj.magic
  end
module Uint16Array =
  struct
    type t =
      [ `ArrayLike of float  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined)  | `Uint16Array ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6556 : Ojs.t) -> t_of_js x6556
    and t_0_to_js : t_0 -> Ojs.t = fun (x6555 : t) -> t_to_js x6555
    type tags =
      [ `ArrayLike of float  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined)  | `Uint16Array ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Uint16Array ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6559 : Ojs.t) -> intf_of_js __tags_of_js x6559
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6557 : __tags intf) -> intf_to_js __tags_to_js x6557
    let (entries : 'tags this -> (float * float) IterableIterator.t) =
      fun (x6561 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x6563 : Ojs.t) ->
             let x6564 = x6563 in
             ((Ojs.float_of_js (Ojs.array_get x6564 0)),
               (Ojs.float_of_js (Ojs.array_get x6564 1))))
          (Ojs.call (this_to_js Obj.magic x6561) "entries" [||])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x6565 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x6565) "keys" [||])
    let (values : 'tags this -> float IterableIterator.t) =
      fun (x6568 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x6568) "values" [||])
    let (includes :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> bool)
      =
      fun (x6575 : 'tags this) ->
        fun ~searchElement:(x6571 : float) ->
          fun ?fromIndex:(x6572 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6577 = this_to_js Obj.magic x6575 in
                 Ojs.call (Ojs.get_prop_ascii x6577 "includes") "apply"
                   [|x6577;((let x6573 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6573 "push"
                                  [|(Ojs.float_to_js x6571)|]);
                             (match x6572 with
                              | Some x6574 ->
                                  ignore
                                    (Ojs.call x6573 "push"
                                       [|(Ojs.float_to_js x6574)|])
                              | None -> ());
                             x6573))|])
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x6578 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6578)
             "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x6580 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6580) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x6582 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6582) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x6584 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6584) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x6591 : 'tags this) ->
        fun ~target:(x6586 : float) ->
          fun ~start:(x6587 : float) ->
            fun ?end_:(x6588 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x6593 = this_to_js Obj.magic x6591 in
                   Ojs.call (Ojs.get_prop_ascii x6593 "copyWithin") "apply"
                     [|x6593;((let x6589 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6589 "push"
                                    [|(Ojs.float_to_js x6586)|]);
                               ignore
                                 (Ojs.call x6589 "push"
                                    [|(Ojs.float_to_js x6587)|]);
                               (match x6588 with
                                | Some x6590 ->
                                    ignore
                                      (Ojs.call x6589 "push"
                                         [|(Ojs.float_to_js x6590)|])
                                | None -> ());
                               x6589))|])
    let (every :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x6602 : 'tags this) ->
        fun
          ~predicate:(x6595 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x6596 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6604 = this_to_js Obj.magic x6602 in
                 Ojs.call (Ojs.get_prop_ascii x6604 "every") "apply"
                   [|x6604;((let x6597 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6597 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6599 : Ojs.t) ->
                                          fun (x6600 : Ojs.t) ->
                                            fun (x6601 : Ojs.t) ->
                                              unknown_to_js
                                                (x6595
                                                   ~value:(Ojs.float_of_js
                                                             x6599)
                                                   ~index:(Ojs.float_of_js
                                                             x6600)
                                                   ~array:(t_of_js x6601))))|]);
                             (match x6596 with
                              | Some x6598 ->
                                  ignore
                                    (Ojs.call x6597 "push"
                                       [|(any_to_js x6598)|])
                              | None -> ());
                             x6597))|])
    let (fill :
      'tags this ->
        value:float -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x6611 : 'tags this) ->
        fun ~value:(x6605 : float) ->
          fun ?start:(x6606 : float option) ->
            fun ?end_:(x6607 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x6613 = this_to_js Obj.magic x6611 in
                   Ojs.call (Ojs.get_prop_ascii x6613 "fill") "apply"
                     [|x6613;((let x6608 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6608 "push"
                                    [|(Ojs.float_to_js x6605)|]);
                               (match x6606 with
                                | Some x6610 ->
                                    ignore
                                      (Ojs.call x6608 "push"
                                         [|(Ojs.float_to_js x6610)|])
                                | None -> ());
                               (match x6607 with
                                | Some x6609 ->
                                    ignore
                                      (Ojs.call x6608 "push"
                                         [|(Ojs.float_to_js x6609)|])
                                | None -> ());
                               x6608))|])
    let (filter :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x6622 : 'tags this) ->
        fun ~predicate:(x6615 : value:float -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x6616 : any option) ->
            fun () ->
              t_of_js
                (let x6624 = this_to_js Obj.magic x6622 in
                 Ojs.call (Ojs.get_prop_ascii x6624 "filter") "apply"
                   [|x6624;((let x6617 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6617 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6619 : Ojs.t) ->
                                          fun (x6620 : Ojs.t) ->
                                            fun (x6621 : Ojs.t) ->
                                              any_to_js
                                                (x6615
                                                   ~value:(Ojs.float_of_js
                                                             x6619)
                                                   ~index:(Ojs.float_of_js
                                                             x6620)
                                                   ~array:(t_of_js x6621))))|]);
                             (match x6616 with
                              | Some x6618 ->
                                  ignore
                                    (Ojs.call x6617 "push"
                                       [|(any_to_js x6618)|])
                              | None -> ());
                             x6617))|])
    let (find :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float or_undefined)
      =
      fun (x6632 : 'tags this) ->
        fun ~predicate:(x6625 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x6626 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.float_of_js
                (let x6634 = this_to_js Obj.magic x6632 in
                 Ojs.call (Ojs.get_prop_ascii x6634 "find") "apply"
                   [|x6634;((let x6627 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6627 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6629 : Ojs.t) ->
                                          fun (x6630 : Ojs.t) ->
                                            fun (x6631 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x6625
                                                   ~value:(Ojs.float_of_js
                                                             x6629)
                                                   ~index:(Ojs.float_of_js
                                                             x6630)
                                                   ~obj:(t_of_js x6631))))|]);
                             (match x6626 with
                              | Some x6628 ->
                                  ignore
                                    (Ojs.call x6627 "push"
                                       [|(any_to_js x6628)|])
                              | None -> ());
                             x6627))|])
    let (findIndex :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x6643 : 'tags this) ->
        fun ~predicate:(x6636 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x6637 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x6645 = this_to_js Obj.magic x6643 in
                 Ojs.call (Ojs.get_prop_ascii x6645 "findIndex") "apply"
                   [|x6645;((let x6638 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6638 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6640 : Ojs.t) ->
                                          fun (x6641 : Ojs.t) ->
                                            fun (x6642 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x6636
                                                   ~value:(Ojs.float_of_js
                                                             x6640)
                                                   ~index:(Ojs.float_of_js
                                                             x6641)
                                                   ~obj:(t_of_js x6642))))|]);
                             (match x6637 with
                              | Some x6639 ->
                                  ignore
                                    (Ojs.call x6638 "push"
                                       [|(any_to_js x6639)|])
                              | None -> ());
                             x6638))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x6653 : 'tags this) ->
        fun
          ~callbackfn:(x6646 : value:float -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x6647 : any option) ->
            fun () ->
              ignore
                (let x6655 = this_to_js Obj.magic x6653 in
                 Ojs.call (Ojs.get_prop_ascii x6655 "forEach") "apply"
                   [|x6655;((let x6648 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6648 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6650 : Ojs.t) ->
                                          fun (x6651 : Ojs.t) ->
                                            fun (x6652 : Ojs.t) ->
                                              x6646
                                                ~value:(Ojs.float_of_js x6650)
                                                ~index:(Ojs.float_of_js x6651)
                                                ~array:(t_of_js x6652)))|]);
                             (match x6647 with
                              | Some x6649 ->
                                  ignore
                                    (Ojs.call x6648 "push"
                                       [|(any_to_js x6649)|])
                              | None -> ());
                             x6648))|])
    let (indexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x6660 : 'tags this) ->
        fun ~searchElement:(x6656 : float) ->
          fun ?fromIndex:(x6657 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x6662 = this_to_js Obj.magic x6660 in
                 Ojs.call (Ojs.get_prop_ascii x6662 "indexOf") "apply"
                   [|x6662;((let x6658 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6658 "push"
                                  [|(Ojs.float_to_js x6656)|]);
                             (match x6657 with
                              | Some x6659 ->
                                  ignore
                                    (Ojs.call x6658 "push"
                                       [|(Ojs.float_to_js x6659)|])
                              | None -> ());
                             x6658))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x6666 : 'tags this) ->
        fun ?separator:(x6663 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x6668 = this_to_js Obj.magic x6666 in
               Ojs.call (Ojs.get_prop_ascii x6668 "join") "apply"
                 [|x6668;((let x6664 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6663 with
                            | Some x6665 ->
                                ignore
                                  (Ojs.call x6664 "push"
                                     [|(Ojs.string_to_js x6665)|])
                            | None -> ());
                           x6664))|])
    let (lastIndexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x6673 : 'tags this) ->
        fun ~searchElement:(x6669 : float) ->
          fun ?fromIndex:(x6670 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x6675 = this_to_js Obj.magic x6673 in
                 Ojs.call (Ojs.get_prop_ascii x6675 "lastIndexOf") "apply"
                   [|x6675;((let x6671 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6671 "push"
                                  [|(Ojs.float_to_js x6669)|]);
                             (match x6670 with
                              | Some x6672 ->
                                  ignore
                                    (Ojs.call x6671 "push"
                                       [|(Ojs.float_to_js x6672)|])
                              | None -> ());
                             x6671))|])
    let (get_length : 'tags this -> float) =
      fun (x6676 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6676) "length")
    let (map :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> float) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x6685 : 'tags this) ->
        fun
          ~callbackfn:(x6678 :
                        value:float -> index:float -> array:t -> float)
          ->
          fun ?thisArg:(x6679 : any option) ->
            fun () ->
              t_of_js
                (let x6687 = this_to_js Obj.magic x6685 in
                 Ojs.call (Ojs.get_prop_ascii x6687 "map") "apply"
                   [|x6687;((let x6680 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6680 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6682 : Ojs.t) ->
                                          fun (x6683 : Ojs.t) ->
                                            fun (x6684 : Ojs.t) ->
                                              Ojs.float_to_js
                                                (x6678
                                                   ~value:(Ojs.float_of_js
                                                             x6682)
                                                   ~index:(Ojs.float_of_js
                                                             x6683)
                                                   ~array:(t_of_js x6684))))|]);
                             (match x6679 with
                              | Some x6681 ->
                                  ignore
                                    (Ojs.call x6680 "push"
                                       [|(any_to_js x6681)|])
                              | None -> ());
                             x6680))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x6693 : 'tags this) ->
        fun
          ~callbackfn:(x6688 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x6693) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x6689 : Ojs.t) ->
                       fun (x6690 : Ojs.t) ->
                         fun (x6691 : Ojs.t) ->
                           fun (x6692 : Ojs.t) ->
                             Ojs.float_to_js
                               (x6688 ~previousValue:(Ojs.float_of_js x6689)
                                  ~currentValue:(Ojs.float_of_js x6690)
                                  ~currentIndex:(Ojs.float_of_js x6691)
                                  ~array:(t_of_js x6692))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x6701 : 'tags this) ->
        fun
          ~callbackfn:(x6695 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x6700 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x6701) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x6696 : Ojs.t) ->
                         fun (x6697 : Ojs.t) ->
                           fun (x6698 : Ojs.t) ->
                             fun (x6699 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x6695
                                    ~previousValue:(Ojs.float_of_js x6696)
                                    ~currentValue:(Ojs.float_of_js x6697)
                                    ~currentIndex:(Ojs.float_of_js x6698)
                                    ~array:(t_of_js x6699))));(Ojs.float_to_js
                                                                 x6700)|])
    let (reduce'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x6709 : 'tags this) ->
        fun
          ~callbackfn:(x6703 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x6708 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x6709) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x6704 : Ojs.t) ->
                         fun (x6705 : Ojs.t) ->
                           fun (x6706 : Ojs.t) ->
                             fun (x6707 : Ojs.t) ->
                               Obj.magic
                                 (x6703 ~previousValue:(Obj.magic x6704)
                                    ~currentValue:(Ojs.float_of_js x6705)
                                    ~currentIndex:(Ojs.float_of_js x6706)
                                    ~array:(t_of_js x6707))));(Obj.magic
                                                                 x6708)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x6716 : 'tags this) ->
        fun
          ~callbackfn:(x6711 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x6716) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x6712 : Ojs.t) ->
                       fun (x6713 : Ojs.t) ->
                         fun (x6714 : Ojs.t) ->
                           fun (x6715 : Ojs.t) ->
                             Ojs.float_to_js
                               (x6711 ~previousValue:(Ojs.float_of_js x6712)
                                  ~currentValue:(Ojs.float_of_js x6713)
                                  ~currentIndex:(Ojs.float_of_js x6714)
                                  ~array:(t_of_js x6715))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x6724 : 'tags this) ->
        fun
          ~callbackfn:(x6718 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x6723 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x6724) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x6719 : Ojs.t) ->
                         fun (x6720 : Ojs.t) ->
                           fun (x6721 : Ojs.t) ->
                             fun (x6722 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x6718
                                    ~previousValue:(Ojs.float_of_js x6719)
                                    ~currentValue:(Ojs.float_of_js x6720)
                                    ~currentIndex:(Ojs.float_of_js x6721)
                                    ~array:(t_of_js x6722))));(Ojs.float_to_js
                                                                 x6723)|])
    let (reduceRight'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x6732 : 'tags this) ->
        fun
          ~callbackfn:(x6726 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x6731 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x6732) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x6727 : Ojs.t) ->
                         fun (x6728 : Ojs.t) ->
                           fun (x6729 : Ojs.t) ->
                             fun (x6730 : Ojs.t) ->
                               Obj.magic
                                 (x6726 ~previousValue:(Obj.magic x6727)
                                    ~currentValue:(Ojs.float_of_js x6728)
                                    ~currentIndex:(Ojs.float_of_js x6729)
                                    ~array:(t_of_js x6730))));(Obj.magic
                                                                 x6731)|])
    let (reverse : 'tags this -> t) =
      fun (x6734 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x6734) "reverse" [||])
    let (set_ :
      'tags this -> array:float ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x6741 : 'tags this) ->
        fun ~array:(x6736 : float ArrayLike.t) ->
          fun ?offset:(x6737 : float option) ->
            fun () ->
              ignore
                (let x6743 = this_to_js Obj.magic x6741 in
                 Ojs.call (Ojs.get_prop_ascii x6743 "set") "apply"
                   [|x6743;((let x6738 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6738 "push"
                                  [|(ArrayLike.t_to_js Ojs.float_to_js x6736)|]);
                             (match x6737 with
                              | Some x6739 ->
                                  ignore
                                    (Ojs.call x6738 "push"
                                       [|(Ojs.float_to_js x6739)|])
                              | None -> ());
                             x6738))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x6749 : 'tags this) ->
        fun ?start:(x6744 : float option) ->
          fun ?end_:(x6745 : float option) ->
            fun () ->
              t_of_js
                (let x6751 = this_to_js Obj.magic x6749 in
                 Ojs.call (Ojs.get_prop_ascii x6751 "slice") "apply"
                   [|x6751;((let x6746 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6744 with
                              | Some x6748 ->
                                  ignore
                                    (Ojs.call x6746 "push"
                                       [|(Ojs.float_to_js x6748)|])
                              | None -> ());
                             (match x6745 with
                              | Some x6747 ->
                                  ignore
                                    (Ojs.call x6746 "push"
                                       [|(Ojs.float_to_js x6747)|])
                              | None -> ());
                             x6746))|])
    let (some :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x6759 : 'tags this) ->
        fun
          ~predicate:(x6752 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x6753 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6761 = this_to_js Obj.magic x6759 in
                 Ojs.call (Ojs.get_prop_ascii x6761 "some") "apply"
                   [|x6761;((let x6754 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6754 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6756 : Ojs.t) ->
                                          fun (x6757 : Ojs.t) ->
                                            fun (x6758 : Ojs.t) ->
                                              unknown_to_js
                                                (x6752
                                                   ~value:(Ojs.float_of_js
                                                             x6756)
                                                   ~index:(Ojs.float_of_js
                                                             x6757)
                                                   ~array:(t_of_js x6758))))|]);
                             (match x6753 with
                              | Some x6755 ->
                                  ignore
                                    (Ojs.call x6754 "push"
                                       [|(any_to_js x6755)|])
                              | None -> ());
                             x6754))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:float -> b:float -> float) -> unit -> 'tags this)
      =
      fun (x6767 : 'tags this) ->
        fun ?compareFn:(x6762 : (a:float -> b:float -> float) option) ->
          fun () ->
            this_of_js Obj.magic
              (let x6769 = this_to_js Obj.magic x6767 in
               Ojs.call (Ojs.get_prop_ascii x6769 "sort") "apply"
                 [|x6769;((let x6763 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6762 with
                            | Some x6764 ->
                                ignore
                                  (Ojs.call x6763 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x6765 : Ojs.t) ->
                                             fun (x6766 : Ojs.t) ->
                                               Ojs.float_to_js
                                                 (x6764
                                                    ~a:(Ojs.float_of_js x6765)
                                                    ~b:(Ojs.float_of_js x6766))))|])
                            | None -> ());
                           x6763))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x6776 : 'tags this) ->
        fun ?begin_:(x6771 : float option) ->
          fun ?end_:(x6772 : float option) ->
            fun () ->
              t_of_js
                (let x6778 = this_to_js Obj.magic x6776 in
                 Ojs.call (Ojs.get_prop_ascii x6778 "subarray") "apply"
                   [|x6778;((let x6773 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6771 with
                              | Some x6775 ->
                                  ignore
                                    (Ojs.call x6773 "push"
                                       [|(Ojs.float_to_js x6775)|])
                              | None -> ());
                             (match x6772 with
                              | Some x6774 ->
                                  ignore
                                    (Ojs.call x6773 "push"
                                       [|(Ojs.float_to_js x6774)|])
                              | None -> ());
                             x6773))|])
    let (toLocaleString : 'tags this -> string) =
      fun (x6779 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6779) "toLocaleString" [||])
    let (toString : 'tags this -> string) =
      fun (x6781 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6781) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x6783 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x6783) "valueOf" [||])
    let (get : 'tags this -> float -> float) =
      fun (x6785 : 'tags this) ->
        fun (x6787 : float) ->
          Ojs.float_of_js
            (Ojs.get_prop (this_to_js Obj.magic x6785)
               (Ojs.float_to_js x6787))
    let (set : 'tags this -> float -> float -> unit) =
      fun (x6788 : 'tags this) ->
        fun (x6790 : float) ->
          fun (x6791 : float) ->
            Ojs.set_prop (this_to_js Obj.magic x6788) (Ojs.float_to_js x6790)
              (Ojs.float_to_js x6791)
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint16Array") [||])
    let (create' : float Iterable.t -> t) =
      fun (x6792 : float Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             [|(Iterable.t_to_js Ojs.float_to_js x6792)|])
    let (from :
      arrayLike:float Iterable.t ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x6794 : float Iterable.t) ->
        fun ?mapfn:(x6795 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x6796 : any option) ->
            fun () ->
              t_of_js
                (let x6803 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
                 Ojs.call (Ojs.get_prop_ascii x6803 "from") "apply"
                   [|x6803;((let x6797 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6797 "push"
                                  [|(Iterable.t_to_js Ojs.float_to_js x6794)|]);
                             (match x6795 with
                              | Some x6799 ->
                                  ignore
                                    (Ojs.call x6797 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x6800 : Ojs.t) ->
                                               fun (x6801 : Ojs.t) ->
                                                 Ojs.float_to_js
                                                   (x6799
                                                      ~v:(Ojs.float_of_js
                                                            x6800)
                                                      ~k:(Ojs.float_of_js
                                                            x6801))))|])
                              | None -> ());
                             (match x6796 with
                              | Some x6798 ->
                                  ignore
                                    (Ojs.call x6797 "push"
                                       [|(any_to_js x6798)|])
                              | None -> ());
                             x6797))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             "prototype")
    let (create'' : float -> t) =
      fun (x6804 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             [|(Ojs.float_to_js x6804)|])
    let (create''' : (ArrayBufferLike.t, float ArrayLike.t) union2 -> t) =
      fun (x6805 : (ArrayBufferLike.t, float ArrayLike.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             [|(union2_to_js ArrayBufferLike.t_to_js
                  (fun (x6807 : float ArrayLike.t) ->
                     ArrayLike.t_to_js Ojs.float_to_js x6807) x6805)|])
    let (create'''' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x6809 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x6810 : float option) ->
          fun ?length:(x6811 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Uint16Array")
                   (let x6812 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x6812 "push"
                         [|(ArrayBufferLike.t_to_js x6809)|]);
                    (match x6810 with
                     | Some x6814 ->
                         ignore
                           (Ojs.call x6812 "push" [|(Ojs.float_to_js x6814)|])
                     | None -> ());
                    (match x6811 with
                     | Some x6813 ->
                         ignore
                           (Ojs.call x6812 "push" [|(Ojs.float_to_js x6813)|])
                     | None -> ());
                    x6812))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             "BYTES_PER_ELEMENT")
    let (of_ : float list -> t) =
      fun (x6815 : float list) ->
        t_of_js
          (let x6818 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
           Ojs.call (Ojs.get_prop_ascii x6818 "of") "apply"
             [|x6818;((let x6816 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x6817 : float) ->
                            ignore
                              (Ojs.call x6816 "push"
                                 [|(Ojs.float_to_js x6817)|])) x6815;
                       x6816))|])
    let (from' : float ArrayLike.t -> t) =
      fun (x6819 : float ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint16Array") "from"
             [|(ArrayLike.t_to_js Ojs.float_to_js x6819)|])
    let (from'' :
      arrayLike:'T ArrayLike.t ->
        mapfn:(v:'T -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x6821 : 'T ArrayLike.t) ->
        fun ~mapfn:(x6822 : v:'T -> k:float -> float) ->
          fun ?thisArg:(x6823 : any option) ->
            fun () ->
              t_of_js
                (let x6829 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
                 Ojs.call (Ojs.get_prop_ascii x6829 "from") "apply"
                   [|x6829;((let x6824 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6824 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x6821)|]);
                             ignore
                               (Ojs.call x6824 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x6826 : Ojs.t) ->
                                          fun (x6827 : Ojs.t) ->
                                            Ojs.float_to_js
                                              (x6822 ~v:(Obj.magic x6826)
                                                 ~k:(Ojs.float_of_js x6827))))|]);
                             (match x6823 with
                              | Some x6825 ->
                                  ignore
                                    (Ojs.call x6824 "push"
                                       [|(any_to_js x6825)|])
                              | None -> ());
                             x6824))|])
    let cast_from = Obj.magic
  end
module Int8Array =
  struct
    type t =
      [ `ArrayLike of float  | `Int8Array  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6831 : Ojs.t) -> t_of_js x6831
    and t_0_to_js : t_0 -> Ojs.t = fun (x6830 : t) -> t_to_js x6830
    type tags =
      [ `ArrayLike of float  | `Int8Array  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Int8Array ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6834 : Ojs.t) -> intf_of_js __tags_of_js x6834
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6832 : __tags intf) -> intf_to_js __tags_to_js x6832
    let (entries : 'tags this -> (float * float) IterableIterator.t) =
      fun (x6836 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x6838 : Ojs.t) ->
             let x6839 = x6838 in
             ((Ojs.float_of_js (Ojs.array_get x6839 0)),
               (Ojs.float_of_js (Ojs.array_get x6839 1))))
          (Ojs.call (this_to_js Obj.magic x6836) "entries" [||])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x6840 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x6840) "keys" [||])
    let (values : 'tags this -> float IterableIterator.t) =
      fun (x6843 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x6843) "values" [||])
    let (includes :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> bool)
      =
      fun (x6850 : 'tags this) ->
        fun ~searchElement:(x6846 : float) ->
          fun ?fromIndex:(x6847 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6852 = this_to_js Obj.magic x6850 in
                 Ojs.call (Ojs.get_prop_ascii x6852 "includes") "apply"
                   [|x6852;((let x6848 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6848 "push"
                                  [|(Ojs.float_to_js x6846)|]);
                             (match x6847 with
                              | Some x6849 ->
                                  ignore
                                    (Ojs.call x6848 "push"
                                       [|(Ojs.float_to_js x6849)|])
                              | None -> ());
                             x6848))|])
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x6853 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6853)
             "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x6855 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6855) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x6857 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6857) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x6859 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6859) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x6866 : 'tags this) ->
        fun ~target:(x6861 : float) ->
          fun ~start:(x6862 : float) ->
            fun ?end_:(x6863 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x6868 = this_to_js Obj.magic x6866 in
                   Ojs.call (Ojs.get_prop_ascii x6868 "copyWithin") "apply"
                     [|x6868;((let x6864 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6864 "push"
                                    [|(Ojs.float_to_js x6861)|]);
                               ignore
                                 (Ojs.call x6864 "push"
                                    [|(Ojs.float_to_js x6862)|]);
                               (match x6863 with
                                | Some x6865 ->
                                    ignore
                                      (Ojs.call x6864 "push"
                                         [|(Ojs.float_to_js x6865)|])
                                | None -> ());
                               x6864))|])
    let (every :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x6877 : 'tags this) ->
        fun
          ~predicate:(x6870 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x6871 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x6879 = this_to_js Obj.magic x6877 in
                 Ojs.call (Ojs.get_prop_ascii x6879 "every") "apply"
                   [|x6879;((let x6872 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6872 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6874 : Ojs.t) ->
                                          fun (x6875 : Ojs.t) ->
                                            fun (x6876 : Ojs.t) ->
                                              unknown_to_js
                                                (x6870
                                                   ~value:(Ojs.float_of_js
                                                             x6874)
                                                   ~index:(Ojs.float_of_js
                                                             x6875)
                                                   ~array:(t_of_js x6876))))|]);
                             (match x6871 with
                              | Some x6873 ->
                                  ignore
                                    (Ojs.call x6872 "push"
                                       [|(any_to_js x6873)|])
                              | None -> ());
                             x6872))|])
    let (fill :
      'tags this ->
        value:float -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x6886 : 'tags this) ->
        fun ~value:(x6880 : float) ->
          fun ?start:(x6881 : float option) ->
            fun ?end_:(x6882 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x6888 = this_to_js Obj.magic x6886 in
                   Ojs.call (Ojs.get_prop_ascii x6888 "fill") "apply"
                     [|x6888;((let x6883 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6883 "push"
                                    [|(Ojs.float_to_js x6880)|]);
                               (match x6881 with
                                | Some x6885 ->
                                    ignore
                                      (Ojs.call x6883 "push"
                                         [|(Ojs.float_to_js x6885)|])
                                | None -> ());
                               (match x6882 with
                                | Some x6884 ->
                                    ignore
                                      (Ojs.call x6883 "push"
                                         [|(Ojs.float_to_js x6884)|])
                                | None -> ());
                               x6883))|])
    let (filter :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x6897 : 'tags this) ->
        fun ~predicate:(x6890 : value:float -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x6891 : any option) ->
            fun () ->
              t_of_js
                (let x6899 = this_to_js Obj.magic x6897 in
                 Ojs.call (Ojs.get_prop_ascii x6899 "filter") "apply"
                   [|x6899;((let x6892 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6892 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6894 : Ojs.t) ->
                                          fun (x6895 : Ojs.t) ->
                                            fun (x6896 : Ojs.t) ->
                                              any_to_js
                                                (x6890
                                                   ~value:(Ojs.float_of_js
                                                             x6894)
                                                   ~index:(Ojs.float_of_js
                                                             x6895)
                                                   ~array:(t_of_js x6896))))|]);
                             (match x6891 with
                              | Some x6893 ->
                                  ignore
                                    (Ojs.call x6892 "push"
                                       [|(any_to_js x6893)|])
                              | None -> ());
                             x6892))|])
    let (find :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float or_undefined)
      =
      fun (x6907 : 'tags this) ->
        fun ~predicate:(x6900 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x6901 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.float_of_js
                (let x6909 = this_to_js Obj.magic x6907 in
                 Ojs.call (Ojs.get_prop_ascii x6909 "find") "apply"
                   [|x6909;((let x6902 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6902 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6904 : Ojs.t) ->
                                          fun (x6905 : Ojs.t) ->
                                            fun (x6906 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x6900
                                                   ~value:(Ojs.float_of_js
                                                             x6904)
                                                   ~index:(Ojs.float_of_js
                                                             x6905)
                                                   ~obj:(t_of_js x6906))))|]);
                             (match x6901 with
                              | Some x6903 ->
                                  ignore
                                    (Ojs.call x6902 "push"
                                       [|(any_to_js x6903)|])
                              | None -> ());
                             x6902))|])
    let (findIndex :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x6918 : 'tags this) ->
        fun ~predicate:(x6911 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x6912 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x6920 = this_to_js Obj.magic x6918 in
                 Ojs.call (Ojs.get_prop_ascii x6920 "findIndex") "apply"
                   [|x6920;((let x6913 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6913 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6915 : Ojs.t) ->
                                          fun (x6916 : Ojs.t) ->
                                            fun (x6917 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x6911
                                                   ~value:(Ojs.float_of_js
                                                             x6915)
                                                   ~index:(Ojs.float_of_js
                                                             x6916)
                                                   ~obj:(t_of_js x6917))))|]);
                             (match x6912 with
                              | Some x6914 ->
                                  ignore
                                    (Ojs.call x6913 "push"
                                       [|(any_to_js x6914)|])
                              | None -> ());
                             x6913))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x6928 : 'tags this) ->
        fun
          ~callbackfn:(x6921 : value:float -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x6922 : any option) ->
            fun () ->
              ignore
                (let x6930 = this_to_js Obj.magic x6928 in
                 Ojs.call (Ojs.get_prop_ascii x6930 "forEach") "apply"
                   [|x6930;((let x6923 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6923 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6925 : Ojs.t) ->
                                          fun (x6926 : Ojs.t) ->
                                            fun (x6927 : Ojs.t) ->
                                              x6921
                                                ~value:(Ojs.float_of_js x6925)
                                                ~index:(Ojs.float_of_js x6926)
                                                ~array:(t_of_js x6927)))|]);
                             (match x6922 with
                              | Some x6924 ->
                                  ignore
                                    (Ojs.call x6923 "push"
                                       [|(any_to_js x6924)|])
                              | None -> ());
                             x6923))|])
    let (indexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x6935 : 'tags this) ->
        fun ~searchElement:(x6931 : float) ->
          fun ?fromIndex:(x6932 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x6937 = this_to_js Obj.magic x6935 in
                 Ojs.call (Ojs.get_prop_ascii x6937 "indexOf") "apply"
                   [|x6937;((let x6933 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6933 "push"
                                  [|(Ojs.float_to_js x6931)|]);
                             (match x6932 with
                              | Some x6934 ->
                                  ignore
                                    (Ojs.call x6933 "push"
                                       [|(Ojs.float_to_js x6934)|])
                              | None -> ());
                             x6933))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x6941 : 'tags this) ->
        fun ?separator:(x6938 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x6943 = this_to_js Obj.magic x6941 in
               Ojs.call (Ojs.get_prop_ascii x6943 "join") "apply"
                 [|x6943;((let x6939 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6938 with
                            | Some x6940 ->
                                ignore
                                  (Ojs.call x6939 "push"
                                     [|(Ojs.string_to_js x6940)|])
                            | None -> ());
                           x6939))|])
    let (lastIndexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x6948 : 'tags this) ->
        fun ~searchElement:(x6944 : float) ->
          fun ?fromIndex:(x6945 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x6950 = this_to_js Obj.magic x6948 in
                 Ojs.call (Ojs.get_prop_ascii x6950 "lastIndexOf") "apply"
                   [|x6950;((let x6946 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6946 "push"
                                  [|(Ojs.float_to_js x6944)|]);
                             (match x6945 with
                              | Some x6947 ->
                                  ignore
                                    (Ojs.call x6946 "push"
                                       [|(Ojs.float_to_js x6947)|])
                              | None -> ());
                             x6946))|])
    let (get_length : 'tags this -> float) =
      fun (x6951 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6951) "length")
    let (map :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> float) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x6960 : 'tags this) ->
        fun
          ~callbackfn:(x6953 :
                        value:float -> index:float -> array:t -> float)
          ->
          fun ?thisArg:(x6954 : any option) ->
            fun () ->
              t_of_js
                (let x6962 = this_to_js Obj.magic x6960 in
                 Ojs.call (Ojs.get_prop_ascii x6962 "map") "apply"
                   [|x6962;((let x6955 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6955 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x6957 : Ojs.t) ->
                                          fun (x6958 : Ojs.t) ->
                                            fun (x6959 : Ojs.t) ->
                                              Ojs.float_to_js
                                                (x6953
                                                   ~value:(Ojs.float_of_js
                                                             x6957)
                                                   ~index:(Ojs.float_of_js
                                                             x6958)
                                                   ~array:(t_of_js x6959))))|]);
                             (match x6954 with
                              | Some x6956 ->
                                  ignore
                                    (Ojs.call x6955 "push"
                                       [|(any_to_js x6956)|])
                              | None -> ());
                             x6955))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x6968 : 'tags this) ->
        fun
          ~callbackfn:(x6963 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x6968) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x6964 : Ojs.t) ->
                       fun (x6965 : Ojs.t) ->
                         fun (x6966 : Ojs.t) ->
                           fun (x6967 : Ojs.t) ->
                             Ojs.float_to_js
                               (x6963 ~previousValue:(Ojs.float_of_js x6964)
                                  ~currentValue:(Ojs.float_of_js x6965)
                                  ~currentIndex:(Ojs.float_of_js x6966)
                                  ~array:(t_of_js x6967))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x6976 : 'tags this) ->
        fun
          ~callbackfn:(x6970 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x6975 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x6976) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x6971 : Ojs.t) ->
                         fun (x6972 : Ojs.t) ->
                           fun (x6973 : Ojs.t) ->
                             fun (x6974 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x6970
                                    ~previousValue:(Ojs.float_of_js x6971)
                                    ~currentValue:(Ojs.float_of_js x6972)
                                    ~currentIndex:(Ojs.float_of_js x6973)
                                    ~array:(t_of_js x6974))));(Ojs.float_to_js
                                                                 x6975)|])
    let (reduce'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x6984 : 'tags this) ->
        fun
          ~callbackfn:(x6978 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x6983 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x6984) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x6979 : Ojs.t) ->
                         fun (x6980 : Ojs.t) ->
                           fun (x6981 : Ojs.t) ->
                             fun (x6982 : Ojs.t) ->
                               Obj.magic
                                 (x6978 ~previousValue:(Obj.magic x6979)
                                    ~currentValue:(Ojs.float_of_js x6980)
                                    ~currentIndex:(Ojs.float_of_js x6981)
                                    ~array:(t_of_js x6982))));(Obj.magic
                                                                 x6983)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x6991 : 'tags this) ->
        fun
          ~callbackfn:(x6986 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x6991) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x6987 : Ojs.t) ->
                       fun (x6988 : Ojs.t) ->
                         fun (x6989 : Ojs.t) ->
                           fun (x6990 : Ojs.t) ->
                             Ojs.float_to_js
                               (x6986 ~previousValue:(Ojs.float_of_js x6987)
                                  ~currentValue:(Ojs.float_of_js x6988)
                                  ~currentIndex:(Ojs.float_of_js x6989)
                                  ~array:(t_of_js x6990))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x6999 : 'tags this) ->
        fun
          ~callbackfn:(x6993 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x6998 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x6999) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x6994 : Ojs.t) ->
                         fun (x6995 : Ojs.t) ->
                           fun (x6996 : Ojs.t) ->
                             fun (x6997 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x6993
                                    ~previousValue:(Ojs.float_of_js x6994)
                                    ~currentValue:(Ojs.float_of_js x6995)
                                    ~currentIndex:(Ojs.float_of_js x6996)
                                    ~array:(t_of_js x6997))));(Ojs.float_to_js
                                                                 x6998)|])
    let (reduceRight'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x7007 : 'tags this) ->
        fun
          ~callbackfn:(x7001 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x7006 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x7007) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x7002 : Ojs.t) ->
                         fun (x7003 : Ojs.t) ->
                           fun (x7004 : Ojs.t) ->
                             fun (x7005 : Ojs.t) ->
                               Obj.magic
                                 (x7001 ~previousValue:(Obj.magic x7002)
                                    ~currentValue:(Ojs.float_of_js x7003)
                                    ~currentIndex:(Ojs.float_of_js x7004)
                                    ~array:(t_of_js x7005))));(Obj.magic
                                                                 x7006)|])
    let (reverse : 'tags this -> t) =
      fun (x7009 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x7009) "reverse" [||])
    let (set_ :
      'tags this -> array:float ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x7016 : 'tags this) ->
        fun ~array:(x7011 : float ArrayLike.t) ->
          fun ?offset:(x7012 : float option) ->
            fun () ->
              ignore
                (let x7018 = this_to_js Obj.magic x7016 in
                 Ojs.call (Ojs.get_prop_ascii x7018 "set") "apply"
                   [|x7018;((let x7013 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7013 "push"
                                  [|(ArrayLike.t_to_js Ojs.float_to_js x7011)|]);
                             (match x7012 with
                              | Some x7014 ->
                                  ignore
                                    (Ojs.call x7013 "push"
                                       [|(Ojs.float_to_js x7014)|])
                              | None -> ());
                             x7013))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x7024 : 'tags this) ->
        fun ?start:(x7019 : float option) ->
          fun ?end_:(x7020 : float option) ->
            fun () ->
              t_of_js
                (let x7026 = this_to_js Obj.magic x7024 in
                 Ojs.call (Ojs.get_prop_ascii x7026 "slice") "apply"
                   [|x7026;((let x7021 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7019 with
                              | Some x7023 ->
                                  ignore
                                    (Ojs.call x7021 "push"
                                       [|(Ojs.float_to_js x7023)|])
                              | None -> ());
                             (match x7020 with
                              | Some x7022 ->
                                  ignore
                                    (Ojs.call x7021 "push"
                                       [|(Ojs.float_to_js x7022)|])
                              | None -> ());
                             x7021))|])
    let (some :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x7034 : 'tags this) ->
        fun
          ~predicate:(x7027 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x7028 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7036 = this_to_js Obj.magic x7034 in
                 Ojs.call (Ojs.get_prop_ascii x7036 "some") "apply"
                   [|x7036;((let x7029 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7029 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7031 : Ojs.t) ->
                                          fun (x7032 : Ojs.t) ->
                                            fun (x7033 : Ojs.t) ->
                                              unknown_to_js
                                                (x7027
                                                   ~value:(Ojs.float_of_js
                                                             x7031)
                                                   ~index:(Ojs.float_of_js
                                                             x7032)
                                                   ~array:(t_of_js x7033))))|]);
                             (match x7028 with
                              | Some x7030 ->
                                  ignore
                                    (Ojs.call x7029 "push"
                                       [|(any_to_js x7030)|])
                              | None -> ());
                             x7029))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:float -> b:float -> float) -> unit -> 'tags this)
      =
      fun (x7042 : 'tags this) ->
        fun ?compareFn:(x7037 : (a:float -> b:float -> float) option) ->
          fun () ->
            this_of_js Obj.magic
              (let x7044 = this_to_js Obj.magic x7042 in
               Ojs.call (Ojs.get_prop_ascii x7044 "sort") "apply"
                 [|x7044;((let x7038 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7037 with
                            | Some x7039 ->
                                ignore
                                  (Ojs.call x7038 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x7040 : Ojs.t) ->
                                             fun (x7041 : Ojs.t) ->
                                               Ojs.float_to_js
                                                 (x7039
                                                    ~a:(Ojs.float_of_js x7040)
                                                    ~b:(Ojs.float_of_js x7041))))|])
                            | None -> ());
                           x7038))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x7051 : 'tags this) ->
        fun ?begin_:(x7046 : float option) ->
          fun ?end_:(x7047 : float option) ->
            fun () ->
              t_of_js
                (let x7053 = this_to_js Obj.magic x7051 in
                 Ojs.call (Ojs.get_prop_ascii x7053 "subarray") "apply"
                   [|x7053;((let x7048 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7046 with
                              | Some x7050 ->
                                  ignore
                                    (Ojs.call x7048 "push"
                                       [|(Ojs.float_to_js x7050)|])
                              | None -> ());
                             (match x7047 with
                              | Some x7049 ->
                                  ignore
                                    (Ojs.call x7048 "push"
                                       [|(Ojs.float_to_js x7049)|])
                              | None -> ());
                             x7048))|])
    let (toLocaleString : 'tags this -> string) =
      fun (x7054 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x7054) "toLocaleString" [||])
    let (toString : 'tags this -> string) =
      fun (x7056 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x7056) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x7058 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x7058) "valueOf" [||])
    let (get : 'tags this -> float -> float) =
      fun (x7060 : 'tags this) ->
        fun (x7062 : float) ->
          Ojs.float_of_js
            (Ojs.get_prop (this_to_js Obj.magic x7060)
               (Ojs.float_to_js x7062))
    let (set : 'tags this -> float -> float -> unit) =
      fun (x7063 : 'tags this) ->
        fun (x7065 : float) ->
          fun (x7066 : float) ->
            Ojs.set_prop (this_to_js Obj.magic x7063) (Ojs.float_to_js x7065)
              (Ojs.float_to_js x7066)
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int8Array") [||])
    let (create' : float Iterable.t -> t) =
      fun (x7067 : float Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int8Array")
             [|(Iterable.t_to_js Ojs.float_to_js x7067)|])
    let (from :
      arrayLike:float Iterable.t ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x7069 : float Iterable.t) ->
        fun ?mapfn:(x7070 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x7071 : any option) ->
            fun () ->
              t_of_js
                (let x7078 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
                 Ojs.call (Ojs.get_prop_ascii x7078 "from") "apply"
                   [|x7078;((let x7072 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7072 "push"
                                  [|(Iterable.t_to_js Ojs.float_to_js x7069)|]);
                             (match x7070 with
                              | Some x7074 ->
                                  ignore
                                    (Ojs.call x7072 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x7075 : Ojs.t) ->
                                               fun (x7076 : Ojs.t) ->
                                                 Ojs.float_to_js
                                                   (x7074
                                                      ~v:(Ojs.float_of_js
                                                            x7075)
                                                      ~k:(Ojs.float_of_js
                                                            x7076))))|])
                              | None -> ());
                             (match x7071 with
                              | Some x7073 ->
                                  ignore
                                    (Ojs.call x7072 "push"
                                       [|(any_to_js x7073)|])
                              | None -> ());
                             x7072))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int8Array")
             "prototype")
    let (create'' : float -> t) =
      fun (x7079 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int8Array")
             [|(Ojs.float_to_js x7079)|])
    let (create''' : (ArrayBufferLike.t, float ArrayLike.t) union2 -> t) =
      fun (x7080 : (ArrayBufferLike.t, float ArrayLike.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int8Array")
             [|(union2_to_js ArrayBufferLike.t_to_js
                  (fun (x7082 : float ArrayLike.t) ->
                     ArrayLike.t_to_js Ojs.float_to_js x7082) x7080)|])
    let (create'''' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x7084 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x7085 : float option) ->
          fun ?length:(x7086 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Int8Array")
                   (let x7087 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x7087 "push"
                         [|(ArrayBufferLike.t_to_js x7084)|]);
                    (match x7085 with
                     | Some x7089 ->
                         ignore
                           (Ojs.call x7087 "push" [|(Ojs.float_to_js x7089)|])
                     | None -> ());
                    (match x7086 with
                     | Some x7088 ->
                         ignore
                           (Ojs.call x7087 "push" [|(Ojs.float_to_js x7088)|])
                     | None -> ());
                    x7087))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int8Array")
             "BYTES_PER_ELEMENT")
    let (of_ : float list -> t) =
      fun (x7090 : float list) ->
        t_of_js
          (let x7093 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
           Ojs.call (Ojs.get_prop_ascii x7093 "of") "apply"
             [|x7093;((let x7091 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x7092 : float) ->
                            ignore
                              (Ojs.call x7091 "push"
                                 [|(Ojs.float_to_js x7092)|])) x7090;
                       x7091))|])
    let (from' : float ArrayLike.t -> t) =
      fun (x7094 : float ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Int8Array") "from"
             [|(ArrayLike.t_to_js Ojs.float_to_js x7094)|])
    let (from'' :
      arrayLike:'T ArrayLike.t ->
        mapfn:(v:'T -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x7096 : 'T ArrayLike.t) ->
        fun ~mapfn:(x7097 : v:'T -> k:float -> float) ->
          fun ?thisArg:(x7098 : any option) ->
            fun () ->
              t_of_js
                (let x7104 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
                 Ojs.call (Ojs.get_prop_ascii x7104 "from") "apply"
                   [|x7104;((let x7099 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7099 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x7096)|]);
                             ignore
                               (Ojs.call x7099 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x7101 : Ojs.t) ->
                                          fun (x7102 : Ojs.t) ->
                                            Ojs.float_to_js
                                              (x7097 ~v:(Obj.magic x7101)
                                                 ~k:(Ojs.float_of_js x7102))))|]);
                             (match x7098 with
                              | Some x7100 ->
                                  ignore
                                    (Ojs.call x7099 "push"
                                       [|(any_to_js x7100)|])
                              | None -> ());
                             x7099))|])
    let cast_from = Obj.magic
  end
module Int32Array =
  struct
    type t =
      [ `ArrayLike of float  | `Int32Array  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7106 : Ojs.t) -> t_of_js x7106
    and t_0_to_js : t_0 -> Ojs.t = fun (x7105 : t) -> t_to_js x7105
    type tags =
      [ `ArrayLike of float  | `Int32Array  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Int32Array ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7109 : Ojs.t) -> intf_of_js __tags_of_js x7109
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7107 : __tags intf) -> intf_to_js __tags_to_js x7107
    let (entries : 'tags this -> (float * float) IterableIterator.t) =
      fun (x7111 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x7113 : Ojs.t) ->
             let x7114 = x7113 in
             ((Ojs.float_of_js (Ojs.array_get x7114 0)),
               (Ojs.float_of_js (Ojs.array_get x7114 1))))
          (Ojs.call (this_to_js Obj.magic x7111) "entries" [||])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x7115 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x7115) "keys" [||])
    let (values : 'tags this -> float IterableIterator.t) =
      fun (x7118 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x7118) "values" [||])
    let (includes :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> bool)
      =
      fun (x7125 : 'tags this) ->
        fun ~searchElement:(x7121 : float) ->
          fun ?fromIndex:(x7122 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7127 = this_to_js Obj.magic x7125 in
                 Ojs.call (Ojs.get_prop_ascii x7127 "includes") "apply"
                   [|x7127;((let x7123 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7123 "push"
                                  [|(Ojs.float_to_js x7121)|]);
                             (match x7122 with
                              | Some x7124 ->
                                  ignore
                                    (Ojs.call x7123 "push"
                                       [|(Ojs.float_to_js x7124)|])
                              | None -> ());
                             x7123))|])
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x7128 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7128)
             "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x7130 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7130) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x7132 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7132) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x7134 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7134) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x7141 : 'tags this) ->
        fun ~target:(x7136 : float) ->
          fun ~start:(x7137 : float) ->
            fun ?end_:(x7138 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x7143 = this_to_js Obj.magic x7141 in
                   Ojs.call (Ojs.get_prop_ascii x7143 "copyWithin") "apply"
                     [|x7143;((let x7139 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7139 "push"
                                    [|(Ojs.float_to_js x7136)|]);
                               ignore
                                 (Ojs.call x7139 "push"
                                    [|(Ojs.float_to_js x7137)|]);
                               (match x7138 with
                                | Some x7140 ->
                                    ignore
                                      (Ojs.call x7139 "push"
                                         [|(Ojs.float_to_js x7140)|])
                                | None -> ());
                               x7139))|])
    let (every :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x7152 : 'tags this) ->
        fun
          ~predicate:(x7145 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x7146 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7154 = this_to_js Obj.magic x7152 in
                 Ojs.call (Ojs.get_prop_ascii x7154 "every") "apply"
                   [|x7154;((let x7147 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7147 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7149 : Ojs.t) ->
                                          fun (x7150 : Ojs.t) ->
                                            fun (x7151 : Ojs.t) ->
                                              unknown_to_js
                                                (x7145
                                                   ~value:(Ojs.float_of_js
                                                             x7149)
                                                   ~index:(Ojs.float_of_js
                                                             x7150)
                                                   ~array:(t_of_js x7151))))|]);
                             (match x7146 with
                              | Some x7148 ->
                                  ignore
                                    (Ojs.call x7147 "push"
                                       [|(any_to_js x7148)|])
                              | None -> ());
                             x7147))|])
    let (fill :
      'tags this ->
        value:float -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x7161 : 'tags this) ->
        fun ~value:(x7155 : float) ->
          fun ?start:(x7156 : float option) ->
            fun ?end_:(x7157 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x7163 = this_to_js Obj.magic x7161 in
                   Ojs.call (Ojs.get_prop_ascii x7163 "fill") "apply"
                     [|x7163;((let x7158 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7158 "push"
                                    [|(Ojs.float_to_js x7155)|]);
                               (match x7156 with
                                | Some x7160 ->
                                    ignore
                                      (Ojs.call x7158 "push"
                                         [|(Ojs.float_to_js x7160)|])
                                | None -> ());
                               (match x7157 with
                                | Some x7159 ->
                                    ignore
                                      (Ojs.call x7158 "push"
                                         [|(Ojs.float_to_js x7159)|])
                                | None -> ());
                               x7158))|])
    let (filter :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x7172 : 'tags this) ->
        fun ~predicate:(x7165 : value:float -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x7166 : any option) ->
            fun () ->
              t_of_js
                (let x7174 = this_to_js Obj.magic x7172 in
                 Ojs.call (Ojs.get_prop_ascii x7174 "filter") "apply"
                   [|x7174;((let x7167 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7167 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7169 : Ojs.t) ->
                                          fun (x7170 : Ojs.t) ->
                                            fun (x7171 : Ojs.t) ->
                                              any_to_js
                                                (x7165
                                                   ~value:(Ojs.float_of_js
                                                             x7169)
                                                   ~index:(Ojs.float_of_js
                                                             x7170)
                                                   ~array:(t_of_js x7171))))|]);
                             (match x7166 with
                              | Some x7168 ->
                                  ignore
                                    (Ojs.call x7167 "push"
                                       [|(any_to_js x7168)|])
                              | None -> ());
                             x7167))|])
    let (find :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float or_undefined)
      =
      fun (x7182 : 'tags this) ->
        fun ~predicate:(x7175 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x7176 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.float_of_js
                (let x7184 = this_to_js Obj.magic x7182 in
                 Ojs.call (Ojs.get_prop_ascii x7184 "find") "apply"
                   [|x7184;((let x7177 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7177 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7179 : Ojs.t) ->
                                          fun (x7180 : Ojs.t) ->
                                            fun (x7181 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7175
                                                   ~value:(Ojs.float_of_js
                                                             x7179)
                                                   ~index:(Ojs.float_of_js
                                                             x7180)
                                                   ~obj:(t_of_js x7181))))|]);
                             (match x7176 with
                              | Some x7178 ->
                                  ignore
                                    (Ojs.call x7177 "push"
                                       [|(any_to_js x7178)|])
                              | None -> ());
                             x7177))|])
    let (findIndex :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x7193 : 'tags this) ->
        fun ~predicate:(x7186 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x7187 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x7195 = this_to_js Obj.magic x7193 in
                 Ojs.call (Ojs.get_prop_ascii x7195 "findIndex") "apply"
                   [|x7195;((let x7188 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7188 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7190 : Ojs.t) ->
                                          fun (x7191 : Ojs.t) ->
                                            fun (x7192 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7186
                                                   ~value:(Ojs.float_of_js
                                                             x7190)
                                                   ~index:(Ojs.float_of_js
                                                             x7191)
                                                   ~obj:(t_of_js x7192))))|]);
                             (match x7187 with
                              | Some x7189 ->
                                  ignore
                                    (Ojs.call x7188 "push"
                                       [|(any_to_js x7189)|])
                              | None -> ());
                             x7188))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x7203 : 'tags this) ->
        fun
          ~callbackfn:(x7196 : value:float -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x7197 : any option) ->
            fun () ->
              ignore
                (let x7205 = this_to_js Obj.magic x7203 in
                 Ojs.call (Ojs.get_prop_ascii x7205 "forEach") "apply"
                   [|x7205;((let x7198 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7198 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7200 : Ojs.t) ->
                                          fun (x7201 : Ojs.t) ->
                                            fun (x7202 : Ojs.t) ->
                                              x7196
                                                ~value:(Ojs.float_of_js x7200)
                                                ~index:(Ojs.float_of_js x7201)
                                                ~array:(t_of_js x7202)))|]);
                             (match x7197 with
                              | Some x7199 ->
                                  ignore
                                    (Ojs.call x7198 "push"
                                       [|(any_to_js x7199)|])
                              | None -> ());
                             x7198))|])
    let (indexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x7210 : 'tags this) ->
        fun ~searchElement:(x7206 : float) ->
          fun ?fromIndex:(x7207 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x7212 = this_to_js Obj.magic x7210 in
                 Ojs.call (Ojs.get_prop_ascii x7212 "indexOf") "apply"
                   [|x7212;((let x7208 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7208 "push"
                                  [|(Ojs.float_to_js x7206)|]);
                             (match x7207 with
                              | Some x7209 ->
                                  ignore
                                    (Ojs.call x7208 "push"
                                       [|(Ojs.float_to_js x7209)|])
                              | None -> ());
                             x7208))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x7216 : 'tags this) ->
        fun ?separator:(x7213 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x7218 = this_to_js Obj.magic x7216 in
               Ojs.call (Ojs.get_prop_ascii x7218 "join") "apply"
                 [|x7218;((let x7214 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7213 with
                            | Some x7215 ->
                                ignore
                                  (Ojs.call x7214 "push"
                                     [|(Ojs.string_to_js x7215)|])
                            | None -> ());
                           x7214))|])
    let (lastIndexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x7223 : 'tags this) ->
        fun ~searchElement:(x7219 : float) ->
          fun ?fromIndex:(x7220 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x7225 = this_to_js Obj.magic x7223 in
                 Ojs.call (Ojs.get_prop_ascii x7225 "lastIndexOf") "apply"
                   [|x7225;((let x7221 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7221 "push"
                                  [|(Ojs.float_to_js x7219)|]);
                             (match x7220 with
                              | Some x7222 ->
                                  ignore
                                    (Ojs.call x7221 "push"
                                       [|(Ojs.float_to_js x7222)|])
                              | None -> ());
                             x7221))|])
    let (get_length : 'tags this -> float) =
      fun (x7226 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7226) "length")
    let (map :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> float) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x7235 : 'tags this) ->
        fun
          ~callbackfn:(x7228 :
                        value:float -> index:float -> array:t -> float)
          ->
          fun ?thisArg:(x7229 : any option) ->
            fun () ->
              t_of_js
                (let x7237 = this_to_js Obj.magic x7235 in
                 Ojs.call (Ojs.get_prop_ascii x7237 "map") "apply"
                   [|x7237;((let x7230 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7230 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7232 : Ojs.t) ->
                                          fun (x7233 : Ojs.t) ->
                                            fun (x7234 : Ojs.t) ->
                                              Ojs.float_to_js
                                                (x7228
                                                   ~value:(Ojs.float_of_js
                                                             x7232)
                                                   ~index:(Ojs.float_of_js
                                                             x7233)
                                                   ~array:(t_of_js x7234))))|]);
                             (match x7229 with
                              | Some x7231 ->
                                  ignore
                                    (Ojs.call x7230 "push"
                                       [|(any_to_js x7231)|])
                              | None -> ());
                             x7230))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x7243 : 'tags this) ->
        fun
          ~callbackfn:(x7238 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x7243) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x7239 : Ojs.t) ->
                       fun (x7240 : Ojs.t) ->
                         fun (x7241 : Ojs.t) ->
                           fun (x7242 : Ojs.t) ->
                             Ojs.float_to_js
                               (x7238 ~previousValue:(Ojs.float_of_js x7239)
                                  ~currentValue:(Ojs.float_of_js x7240)
                                  ~currentIndex:(Ojs.float_of_js x7241)
                                  ~array:(t_of_js x7242))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x7251 : 'tags this) ->
        fun
          ~callbackfn:(x7245 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x7250 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x7251) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x7246 : Ojs.t) ->
                         fun (x7247 : Ojs.t) ->
                           fun (x7248 : Ojs.t) ->
                             fun (x7249 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x7245
                                    ~previousValue:(Ojs.float_of_js x7246)
                                    ~currentValue:(Ojs.float_of_js x7247)
                                    ~currentIndex:(Ojs.float_of_js x7248)
                                    ~array:(t_of_js x7249))));(Ojs.float_to_js
                                                                 x7250)|])
    let (reduce'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x7259 : 'tags this) ->
        fun
          ~callbackfn:(x7253 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x7258 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x7259) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x7254 : Ojs.t) ->
                         fun (x7255 : Ojs.t) ->
                           fun (x7256 : Ojs.t) ->
                             fun (x7257 : Ojs.t) ->
                               Obj.magic
                                 (x7253 ~previousValue:(Obj.magic x7254)
                                    ~currentValue:(Ojs.float_of_js x7255)
                                    ~currentIndex:(Ojs.float_of_js x7256)
                                    ~array:(t_of_js x7257))));(Obj.magic
                                                                 x7258)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x7266 : 'tags this) ->
        fun
          ~callbackfn:(x7261 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x7266) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x7262 : Ojs.t) ->
                       fun (x7263 : Ojs.t) ->
                         fun (x7264 : Ojs.t) ->
                           fun (x7265 : Ojs.t) ->
                             Ojs.float_to_js
                               (x7261 ~previousValue:(Ojs.float_of_js x7262)
                                  ~currentValue:(Ojs.float_of_js x7263)
                                  ~currentIndex:(Ojs.float_of_js x7264)
                                  ~array:(t_of_js x7265))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x7274 : 'tags this) ->
        fun
          ~callbackfn:(x7268 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x7273 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x7274) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x7269 : Ojs.t) ->
                         fun (x7270 : Ojs.t) ->
                           fun (x7271 : Ojs.t) ->
                             fun (x7272 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x7268
                                    ~previousValue:(Ojs.float_of_js x7269)
                                    ~currentValue:(Ojs.float_of_js x7270)
                                    ~currentIndex:(Ojs.float_of_js x7271)
                                    ~array:(t_of_js x7272))));(Ojs.float_to_js
                                                                 x7273)|])
    let (reduceRight'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x7282 : 'tags this) ->
        fun
          ~callbackfn:(x7276 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x7281 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x7282) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x7277 : Ojs.t) ->
                         fun (x7278 : Ojs.t) ->
                           fun (x7279 : Ojs.t) ->
                             fun (x7280 : Ojs.t) ->
                               Obj.magic
                                 (x7276 ~previousValue:(Obj.magic x7277)
                                    ~currentValue:(Ojs.float_of_js x7278)
                                    ~currentIndex:(Ojs.float_of_js x7279)
                                    ~array:(t_of_js x7280))));(Obj.magic
                                                                 x7281)|])
    let (reverse : 'tags this -> t) =
      fun (x7284 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x7284) "reverse" [||])
    let (set_ :
      'tags this -> array:float ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x7291 : 'tags this) ->
        fun ~array:(x7286 : float ArrayLike.t) ->
          fun ?offset:(x7287 : float option) ->
            fun () ->
              ignore
                (let x7293 = this_to_js Obj.magic x7291 in
                 Ojs.call (Ojs.get_prop_ascii x7293 "set") "apply"
                   [|x7293;((let x7288 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7288 "push"
                                  [|(ArrayLike.t_to_js Ojs.float_to_js x7286)|]);
                             (match x7287 with
                              | Some x7289 ->
                                  ignore
                                    (Ojs.call x7288 "push"
                                       [|(Ojs.float_to_js x7289)|])
                              | None -> ());
                             x7288))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x7299 : 'tags this) ->
        fun ?start:(x7294 : float option) ->
          fun ?end_:(x7295 : float option) ->
            fun () ->
              t_of_js
                (let x7301 = this_to_js Obj.magic x7299 in
                 Ojs.call (Ojs.get_prop_ascii x7301 "slice") "apply"
                   [|x7301;((let x7296 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7294 with
                              | Some x7298 ->
                                  ignore
                                    (Ojs.call x7296 "push"
                                       [|(Ojs.float_to_js x7298)|])
                              | None -> ());
                             (match x7295 with
                              | Some x7297 ->
                                  ignore
                                    (Ojs.call x7296 "push"
                                       [|(Ojs.float_to_js x7297)|])
                              | None -> ());
                             x7296))|])
    let (some :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x7309 : 'tags this) ->
        fun
          ~predicate:(x7302 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x7303 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7311 = this_to_js Obj.magic x7309 in
                 Ojs.call (Ojs.get_prop_ascii x7311 "some") "apply"
                   [|x7311;((let x7304 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7304 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7306 : Ojs.t) ->
                                          fun (x7307 : Ojs.t) ->
                                            fun (x7308 : Ojs.t) ->
                                              unknown_to_js
                                                (x7302
                                                   ~value:(Ojs.float_of_js
                                                             x7306)
                                                   ~index:(Ojs.float_of_js
                                                             x7307)
                                                   ~array:(t_of_js x7308))))|]);
                             (match x7303 with
                              | Some x7305 ->
                                  ignore
                                    (Ojs.call x7304 "push"
                                       [|(any_to_js x7305)|])
                              | None -> ());
                             x7304))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:float -> b:float -> float) -> unit -> 'tags this)
      =
      fun (x7317 : 'tags this) ->
        fun ?compareFn:(x7312 : (a:float -> b:float -> float) option) ->
          fun () ->
            this_of_js Obj.magic
              (let x7319 = this_to_js Obj.magic x7317 in
               Ojs.call (Ojs.get_prop_ascii x7319 "sort") "apply"
                 [|x7319;((let x7313 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7312 with
                            | Some x7314 ->
                                ignore
                                  (Ojs.call x7313 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x7315 : Ojs.t) ->
                                             fun (x7316 : Ojs.t) ->
                                               Ojs.float_to_js
                                                 (x7314
                                                    ~a:(Ojs.float_of_js x7315)
                                                    ~b:(Ojs.float_of_js x7316))))|])
                            | None -> ());
                           x7313))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x7326 : 'tags this) ->
        fun ?begin_:(x7321 : float option) ->
          fun ?end_:(x7322 : float option) ->
            fun () ->
              t_of_js
                (let x7328 = this_to_js Obj.magic x7326 in
                 Ojs.call (Ojs.get_prop_ascii x7328 "subarray") "apply"
                   [|x7328;((let x7323 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7321 with
                              | Some x7325 ->
                                  ignore
                                    (Ojs.call x7323 "push"
                                       [|(Ojs.float_to_js x7325)|])
                              | None -> ());
                             (match x7322 with
                              | Some x7324 ->
                                  ignore
                                    (Ojs.call x7323 "push"
                                       [|(Ojs.float_to_js x7324)|])
                              | None -> ());
                             x7323))|])
    let (toLocaleString : 'tags this -> string) =
      fun (x7329 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x7329) "toLocaleString" [||])
    let (toString : 'tags this -> string) =
      fun (x7331 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x7331) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x7333 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x7333) "valueOf" [||])
    let (get : 'tags this -> float -> float) =
      fun (x7335 : 'tags this) ->
        fun (x7337 : float) ->
          Ojs.float_of_js
            (Ojs.get_prop (this_to_js Obj.magic x7335)
               (Ojs.float_to_js x7337))
    let (set : 'tags this -> float -> float -> unit) =
      fun (x7338 : 'tags this) ->
        fun (x7340 : float) ->
          fun (x7341 : float) ->
            Ojs.set_prop (this_to_js Obj.magic x7338) (Ojs.float_to_js x7340)
              (Ojs.float_to_js x7341)
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int32Array") [||])
    let (create' : float Iterable.t -> t) =
      fun (x7342 : float Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int32Array")
             [|(Iterable.t_to_js Ojs.float_to_js x7342)|])
    let (from :
      arrayLike:float Iterable.t ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x7344 : float Iterable.t) ->
        fun ?mapfn:(x7345 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x7346 : any option) ->
            fun () ->
              t_of_js
                (let x7353 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
                 Ojs.call (Ojs.get_prop_ascii x7353 "from") "apply"
                   [|x7353;((let x7347 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7347 "push"
                                  [|(Iterable.t_to_js Ojs.float_to_js x7344)|]);
                             (match x7345 with
                              | Some x7349 ->
                                  ignore
                                    (Ojs.call x7347 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x7350 : Ojs.t) ->
                                               fun (x7351 : Ojs.t) ->
                                                 Ojs.float_to_js
                                                   (x7349
                                                      ~v:(Ojs.float_of_js
                                                            x7350)
                                                      ~k:(Ojs.float_of_js
                                                            x7351))))|])
                              | None -> ());
                             (match x7346 with
                              | Some x7348 ->
                                  ignore
                                    (Ojs.call x7347 "push"
                                       [|(any_to_js x7348)|])
                              | None -> ());
                             x7347))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int32Array")
             "prototype")
    let (create'' : float -> t) =
      fun (x7354 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int32Array")
             [|(Ojs.float_to_js x7354)|])
    let (create''' : (ArrayBufferLike.t, float ArrayLike.t) union2 -> t) =
      fun (x7355 : (ArrayBufferLike.t, float ArrayLike.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int32Array")
             [|(union2_to_js ArrayBufferLike.t_to_js
                  (fun (x7357 : float ArrayLike.t) ->
                     ArrayLike.t_to_js Ojs.float_to_js x7357) x7355)|])
    let (create'''' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x7359 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x7360 : float option) ->
          fun ?length:(x7361 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Int32Array")
                   (let x7362 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x7362 "push"
                         [|(ArrayBufferLike.t_to_js x7359)|]);
                    (match x7360 with
                     | Some x7364 ->
                         ignore
                           (Ojs.call x7362 "push" [|(Ojs.float_to_js x7364)|])
                     | None -> ());
                    (match x7361 with
                     | Some x7363 ->
                         ignore
                           (Ojs.call x7362 "push" [|(Ojs.float_to_js x7363)|])
                     | None -> ());
                    x7362))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int32Array")
             "BYTES_PER_ELEMENT")
    let (of_ : float list -> t) =
      fun (x7365 : float list) ->
        t_of_js
          (let x7368 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
           Ojs.call (Ojs.get_prop_ascii x7368 "of") "apply"
             [|x7368;((let x7366 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x7367 : float) ->
                            ignore
                              (Ojs.call x7366 "push"
                                 [|(Ojs.float_to_js x7367)|])) x7365;
                       x7366))|])
    let (from' : float ArrayLike.t -> t) =
      fun (x7369 : float ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Int32Array") "from"
             [|(ArrayLike.t_to_js Ojs.float_to_js x7369)|])
    let (from'' :
      arrayLike:'T ArrayLike.t ->
        mapfn:(v:'T -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x7371 : 'T ArrayLike.t) ->
        fun ~mapfn:(x7372 : v:'T -> k:float -> float) ->
          fun ?thisArg:(x7373 : any option) ->
            fun () ->
              t_of_js
                (let x7379 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
                 Ojs.call (Ojs.get_prop_ascii x7379 "from") "apply"
                   [|x7379;((let x7374 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7374 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x7371)|]);
                             ignore
                               (Ojs.call x7374 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x7376 : Ojs.t) ->
                                          fun (x7377 : Ojs.t) ->
                                            Ojs.float_to_js
                                              (x7372 ~v:(Obj.magic x7376)
                                                 ~k:(Ojs.float_of_js x7377))))|]);
                             (match x7373 with
                              | Some x7375 ->
                                  ignore
                                    (Ojs.call x7374 "push"
                                       [|(any_to_js x7375)|])
                              | None -> ());
                             x7374))|])
    let cast_from = Obj.magic
  end
module Int16Array =
  struct
    type t =
      [ `ArrayLike of float  | `Int16Array  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7381 : Ojs.t) -> t_of_js x7381
    and t_0_to_js : t_0 -> Ojs.t = fun (x7380 : t) -> t_to_js x7380
    type tags =
      [ `ArrayLike of float  | `Int16Array  | `IterableIterator of float 
      | `Iterator of (float * any * never or_undefined) ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Int16Array ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7384 : Ojs.t) -> intf_of_js __tags_of_js x7384
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7382 : __tags intf) -> intf_to_js __tags_to_js x7382
    let (entries : 'tags this -> (float * float) IterableIterator.t) =
      fun (x7386 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x7388 : Ojs.t) ->
             let x7389 = x7388 in
             ((Ojs.float_of_js (Ojs.array_get x7389 0)),
               (Ojs.float_of_js (Ojs.array_get x7389 1))))
          (Ojs.call (this_to_js Obj.magic x7386) "entries" [||])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x7390 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x7390) "keys" [||])
    let (values : 'tags this -> float IterableIterator.t) =
      fun (x7393 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x7393) "values" [||])
    let (includes :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> bool)
      =
      fun (x7400 : 'tags this) ->
        fun ~searchElement:(x7396 : float) ->
          fun ?fromIndex:(x7397 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7402 = this_to_js Obj.magic x7400 in
                 Ojs.call (Ojs.get_prop_ascii x7402 "includes") "apply"
                   [|x7402;((let x7398 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7398 "push"
                                  [|(Ojs.float_to_js x7396)|]);
                             (match x7397 with
                              | Some x7399 ->
                                  ignore
                                    (Ojs.call x7398 "push"
                                       [|(Ojs.float_to_js x7399)|])
                              | None -> ());
                             x7398))|])
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x7403 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7403)
             "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x7405 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7405) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x7407 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7407) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x7409 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7409) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x7416 : 'tags this) ->
        fun ~target:(x7411 : float) ->
          fun ~start:(x7412 : float) ->
            fun ?end_:(x7413 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x7418 = this_to_js Obj.magic x7416 in
                   Ojs.call (Ojs.get_prop_ascii x7418 "copyWithin") "apply"
                     [|x7418;((let x7414 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7414 "push"
                                    [|(Ojs.float_to_js x7411)|]);
                               ignore
                                 (Ojs.call x7414 "push"
                                    [|(Ojs.float_to_js x7412)|]);
                               (match x7413 with
                                | Some x7415 ->
                                    ignore
                                      (Ojs.call x7414 "push"
                                         [|(Ojs.float_to_js x7415)|])
                                | None -> ());
                               x7414))|])
    let (every :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x7427 : 'tags this) ->
        fun
          ~predicate:(x7420 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x7421 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7429 = this_to_js Obj.magic x7427 in
                 Ojs.call (Ojs.get_prop_ascii x7429 "every") "apply"
                   [|x7429;((let x7422 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7422 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7424 : Ojs.t) ->
                                          fun (x7425 : Ojs.t) ->
                                            fun (x7426 : Ojs.t) ->
                                              unknown_to_js
                                                (x7420
                                                   ~value:(Ojs.float_of_js
                                                             x7424)
                                                   ~index:(Ojs.float_of_js
                                                             x7425)
                                                   ~array:(t_of_js x7426))))|]);
                             (match x7421 with
                              | Some x7423 ->
                                  ignore
                                    (Ojs.call x7422 "push"
                                       [|(any_to_js x7423)|])
                              | None -> ());
                             x7422))|])
    let (fill :
      'tags this ->
        value:float -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x7436 : 'tags this) ->
        fun ~value:(x7430 : float) ->
          fun ?start:(x7431 : float option) ->
            fun ?end_:(x7432 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x7438 = this_to_js Obj.magic x7436 in
                   Ojs.call (Ojs.get_prop_ascii x7438 "fill") "apply"
                     [|x7438;((let x7433 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7433 "push"
                                    [|(Ojs.float_to_js x7430)|]);
                               (match x7431 with
                                | Some x7435 ->
                                    ignore
                                      (Ojs.call x7433 "push"
                                         [|(Ojs.float_to_js x7435)|])
                                | None -> ());
                               (match x7432 with
                                | Some x7434 ->
                                    ignore
                                      (Ojs.call x7433 "push"
                                         [|(Ojs.float_to_js x7434)|])
                                | None -> ());
                               x7433))|])
    let (filter :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x7447 : 'tags this) ->
        fun ~predicate:(x7440 : value:float -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x7441 : any option) ->
            fun () ->
              t_of_js
                (let x7449 = this_to_js Obj.magic x7447 in
                 Ojs.call (Ojs.get_prop_ascii x7449 "filter") "apply"
                   [|x7449;((let x7442 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7442 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7444 : Ojs.t) ->
                                          fun (x7445 : Ojs.t) ->
                                            fun (x7446 : Ojs.t) ->
                                              any_to_js
                                                (x7440
                                                   ~value:(Ojs.float_of_js
                                                             x7444)
                                                   ~index:(Ojs.float_of_js
                                                             x7445)
                                                   ~array:(t_of_js x7446))))|]);
                             (match x7441 with
                              | Some x7443 ->
                                  ignore
                                    (Ojs.call x7442 "push"
                                       [|(any_to_js x7443)|])
                              | None -> ());
                             x7442))|])
    let (find :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float or_undefined)
      =
      fun (x7457 : 'tags this) ->
        fun ~predicate:(x7450 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x7451 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.float_of_js
                (let x7459 = this_to_js Obj.magic x7457 in
                 Ojs.call (Ojs.get_prop_ascii x7459 "find") "apply"
                   [|x7459;((let x7452 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7452 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7454 : Ojs.t) ->
                                          fun (x7455 : Ojs.t) ->
                                            fun (x7456 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7450
                                                   ~value:(Ojs.float_of_js
                                                             x7454)
                                                   ~index:(Ojs.float_of_js
                                                             x7455)
                                                   ~obj:(t_of_js x7456))))|]);
                             (match x7451 with
                              | Some x7453 ->
                                  ignore
                                    (Ojs.call x7452 "push"
                                       [|(any_to_js x7453)|])
                              | None -> ());
                             x7452))|])
    let (findIndex :
      'tags this ->
        predicate:(value:float -> index:float -> obj:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x7468 : 'tags this) ->
        fun ~predicate:(x7461 : value:float -> index:float -> obj:t -> bool)
          ->
          fun ?thisArg:(x7462 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x7470 = this_to_js Obj.magic x7468 in
                 Ojs.call (Ojs.get_prop_ascii x7470 "findIndex") "apply"
                   [|x7470;((let x7463 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7463 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7465 : Ojs.t) ->
                                          fun (x7466 : Ojs.t) ->
                                            fun (x7467 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7461
                                                   ~value:(Ojs.float_of_js
                                                             x7465)
                                                   ~index:(Ojs.float_of_js
                                                             x7466)
                                                   ~obj:(t_of_js x7467))))|]);
                             (match x7462 with
                              | Some x7464 ->
                                  ignore
                                    (Ojs.call x7463 "push"
                                       [|(any_to_js x7464)|])
                              | None -> ());
                             x7463))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x7478 : 'tags this) ->
        fun
          ~callbackfn:(x7471 : value:float -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x7472 : any option) ->
            fun () ->
              ignore
                (let x7480 = this_to_js Obj.magic x7478 in
                 Ojs.call (Ojs.get_prop_ascii x7480 "forEach") "apply"
                   [|x7480;((let x7473 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7473 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7475 : Ojs.t) ->
                                          fun (x7476 : Ojs.t) ->
                                            fun (x7477 : Ojs.t) ->
                                              x7471
                                                ~value:(Ojs.float_of_js x7475)
                                                ~index:(Ojs.float_of_js x7476)
                                                ~array:(t_of_js x7477)))|]);
                             (match x7472 with
                              | Some x7474 ->
                                  ignore
                                    (Ojs.call x7473 "push"
                                       [|(any_to_js x7474)|])
                              | None -> ());
                             x7473))|])
    let (indexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x7485 : 'tags this) ->
        fun ~searchElement:(x7481 : float) ->
          fun ?fromIndex:(x7482 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x7487 = this_to_js Obj.magic x7485 in
                 Ojs.call (Ojs.get_prop_ascii x7487 "indexOf") "apply"
                   [|x7487;((let x7483 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7483 "push"
                                  [|(Ojs.float_to_js x7481)|]);
                             (match x7482 with
                              | Some x7484 ->
                                  ignore
                                    (Ojs.call x7483 "push"
                                       [|(Ojs.float_to_js x7484)|])
                              | None -> ());
                             x7483))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x7491 : 'tags this) ->
        fun ?separator:(x7488 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x7493 = this_to_js Obj.magic x7491 in
               Ojs.call (Ojs.get_prop_ascii x7493 "join") "apply"
                 [|x7493;((let x7489 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7488 with
                            | Some x7490 ->
                                ignore
                                  (Ojs.call x7489 "push"
                                     [|(Ojs.string_to_js x7490)|])
                            | None -> ());
                           x7489))|])
    let (lastIndexOf :
      'tags this -> searchElement:float -> ?fromIndex:float -> unit -> float)
      =
      fun (x7498 : 'tags this) ->
        fun ~searchElement:(x7494 : float) ->
          fun ?fromIndex:(x7495 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x7500 = this_to_js Obj.magic x7498 in
                 Ojs.call (Ojs.get_prop_ascii x7500 "lastIndexOf") "apply"
                   [|x7500;((let x7496 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7496 "push"
                                  [|(Ojs.float_to_js x7494)|]);
                             (match x7495 with
                              | Some x7497 ->
                                  ignore
                                    (Ojs.call x7496 "push"
                                       [|(Ojs.float_to_js x7497)|])
                              | None -> ());
                             x7496))|])
    let (get_length : 'tags this -> float) =
      fun (x7501 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7501) "length")
    let (map :
      'tags this ->
        callbackfn:(value:float -> index:float -> array:t -> float) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x7510 : 'tags this) ->
        fun
          ~callbackfn:(x7503 :
                        value:float -> index:float -> array:t -> float)
          ->
          fun ?thisArg:(x7504 : any option) ->
            fun () ->
              t_of_js
                (let x7512 = this_to_js Obj.magic x7510 in
                 Ojs.call (Ojs.get_prop_ascii x7512 "map") "apply"
                   [|x7512;((let x7505 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7505 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7507 : Ojs.t) ->
                                          fun (x7508 : Ojs.t) ->
                                            fun (x7509 : Ojs.t) ->
                                              Ojs.float_to_js
                                                (x7503
                                                   ~value:(Ojs.float_of_js
                                                             x7507)
                                                   ~index:(Ojs.float_of_js
                                                             x7508)
                                                   ~array:(t_of_js x7509))))|]);
                             (match x7504 with
                              | Some x7506 ->
                                  ignore
                                    (Ojs.call x7505 "push"
                                       [|(any_to_js x7506)|])
                              | None -> ());
                             x7505))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x7518 : 'tags this) ->
        fun
          ~callbackfn:(x7513 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x7518) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x7514 : Ojs.t) ->
                       fun (x7515 : Ojs.t) ->
                         fun (x7516 : Ojs.t) ->
                           fun (x7517 : Ojs.t) ->
                             Ojs.float_to_js
                               (x7513 ~previousValue:(Ojs.float_of_js x7514)
                                  ~currentValue:(Ojs.float_of_js x7515)
                                  ~currentIndex:(Ojs.float_of_js x7516)
                                  ~array:(t_of_js x7517))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x7526 : 'tags this) ->
        fun
          ~callbackfn:(x7520 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x7525 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x7526) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x7521 : Ojs.t) ->
                         fun (x7522 : Ojs.t) ->
                           fun (x7523 : Ojs.t) ->
                             fun (x7524 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x7520
                                    ~previousValue:(Ojs.float_of_js x7521)
                                    ~currentValue:(Ojs.float_of_js x7522)
                                    ~currentIndex:(Ojs.float_of_js x7523)
                                    ~array:(t_of_js x7524))));(Ojs.float_to_js
                                                                 x7525)|])
    let (reduce'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x7534 : 'tags this) ->
        fun
          ~callbackfn:(x7528 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x7533 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x7534) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x7529 : Ojs.t) ->
                         fun (x7530 : Ojs.t) ->
                           fun (x7531 : Ojs.t) ->
                             fun (x7532 : Ojs.t) ->
                               Obj.magic
                                 (x7528 ~previousValue:(Obj.magic x7529)
                                    ~currentValue:(Ojs.float_of_js x7530)
                                    ~currentIndex:(Ojs.float_of_js x7531)
                                    ~array:(t_of_js x7532))));(Obj.magic
                                                                 x7533)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> float)
      =
      fun (x7541 : 'tags this) ->
        fun
          ~callbackfn:(x7536 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x7541) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x7537 : Ojs.t) ->
                       fun (x7538 : Ojs.t) ->
                         fun (x7539 : Ojs.t) ->
                           fun (x7540 : Ojs.t) ->
                             Ojs.float_to_js
                               (x7536 ~previousValue:(Ojs.float_of_js x7537)
                                  ~currentValue:(Ojs.float_of_js x7538)
                                  ~currentIndex:(Ojs.float_of_js x7539)
                                  ~array:(t_of_js x7540))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:float ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> float)
          -> initialValue:float -> float)
      =
      fun (x7549 : 'tags this) ->
        fun
          ~callbackfn:(x7543 :
                        previousValue:float ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> float)
          ->
          fun ~initialValue:(x7548 : float) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x7549) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x7544 : Ojs.t) ->
                         fun (x7545 : Ojs.t) ->
                           fun (x7546 : Ojs.t) ->
                             fun (x7547 : Ojs.t) ->
                               Ojs.float_to_js
                                 (x7543
                                    ~previousValue:(Ojs.float_of_js x7544)
                                    ~currentValue:(Ojs.float_of_js x7545)
                                    ~currentIndex:(Ojs.float_of_js x7546)
                                    ~array:(t_of_js x7547))));(Ojs.float_to_js
                                                                 x7548)|])
    let (reduceRight'' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:float ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x7557 : 'tags this) ->
        fun
          ~callbackfn:(x7551 :
                        previousValue:'U ->
                          currentValue:float ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x7556 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x7557) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x7552 : Ojs.t) ->
                         fun (x7553 : Ojs.t) ->
                           fun (x7554 : Ojs.t) ->
                             fun (x7555 : Ojs.t) ->
                               Obj.magic
                                 (x7551 ~previousValue:(Obj.magic x7552)
                                    ~currentValue:(Ojs.float_of_js x7553)
                                    ~currentIndex:(Ojs.float_of_js x7554)
                                    ~array:(t_of_js x7555))));(Obj.magic
                                                                 x7556)|])
    let (reverse : 'tags this -> t) =
      fun (x7559 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x7559) "reverse" [||])
    let (set_ :
      'tags this -> array:float ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x7566 : 'tags this) ->
        fun ~array:(x7561 : float ArrayLike.t) ->
          fun ?offset:(x7562 : float option) ->
            fun () ->
              ignore
                (let x7568 = this_to_js Obj.magic x7566 in
                 Ojs.call (Ojs.get_prop_ascii x7568 "set") "apply"
                   [|x7568;((let x7563 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7563 "push"
                                  [|(ArrayLike.t_to_js Ojs.float_to_js x7561)|]);
                             (match x7562 with
                              | Some x7564 ->
                                  ignore
                                    (Ojs.call x7563 "push"
                                       [|(Ojs.float_to_js x7564)|])
                              | None -> ());
                             x7563))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x7574 : 'tags this) ->
        fun ?start:(x7569 : float option) ->
          fun ?end_:(x7570 : float option) ->
            fun () ->
              t_of_js
                (let x7576 = this_to_js Obj.magic x7574 in
                 Ojs.call (Ojs.get_prop_ascii x7576 "slice") "apply"
                   [|x7576;((let x7571 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7569 with
                              | Some x7573 ->
                                  ignore
                                    (Ojs.call x7571 "push"
                                       [|(Ojs.float_to_js x7573)|])
                              | None -> ());
                             (match x7570 with
                              | Some x7572 ->
                                  ignore
                                    (Ojs.call x7571 "push"
                                       [|(Ojs.float_to_js x7572)|])
                              | None -> ());
                             x7571))|])
    let (some :
      'tags this ->
        predicate:(value:float -> index:float -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x7584 : 'tags this) ->
        fun
          ~predicate:(x7577 :
                       value:float -> index:float -> array:t -> unknown)
          ->
          fun ?thisArg:(x7578 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7586 = this_to_js Obj.magic x7584 in
                 Ojs.call (Ojs.get_prop_ascii x7586 "some") "apply"
                   [|x7586;((let x7579 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7579 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7581 : Ojs.t) ->
                                          fun (x7582 : Ojs.t) ->
                                            fun (x7583 : Ojs.t) ->
                                              unknown_to_js
                                                (x7577
                                                   ~value:(Ojs.float_of_js
                                                             x7581)
                                                   ~index:(Ojs.float_of_js
                                                             x7582)
                                                   ~array:(t_of_js x7583))))|]);
                             (match x7578 with
                              | Some x7580 ->
                                  ignore
                                    (Ojs.call x7579 "push"
                                       [|(any_to_js x7580)|])
                              | None -> ());
                             x7579))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:float -> b:float -> float) -> unit -> 'tags this)
      =
      fun (x7592 : 'tags this) ->
        fun ?compareFn:(x7587 : (a:float -> b:float -> float) option) ->
          fun () ->
            this_of_js Obj.magic
              (let x7594 = this_to_js Obj.magic x7592 in
               Ojs.call (Ojs.get_prop_ascii x7594 "sort") "apply"
                 [|x7594;((let x7588 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7587 with
                            | Some x7589 ->
                                ignore
                                  (Ojs.call x7588 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x7590 : Ojs.t) ->
                                             fun (x7591 : Ojs.t) ->
                                               Ojs.float_to_js
                                                 (x7589
                                                    ~a:(Ojs.float_of_js x7590)
                                                    ~b:(Ojs.float_of_js x7591))))|])
                            | None -> ());
                           x7588))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x7601 : 'tags this) ->
        fun ?begin_:(x7596 : float option) ->
          fun ?end_:(x7597 : float option) ->
            fun () ->
              t_of_js
                (let x7603 = this_to_js Obj.magic x7601 in
                 Ojs.call (Ojs.get_prop_ascii x7603 "subarray") "apply"
                   [|x7603;((let x7598 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7596 with
                              | Some x7600 ->
                                  ignore
                                    (Ojs.call x7598 "push"
                                       [|(Ojs.float_to_js x7600)|])
                              | None -> ());
                             (match x7597 with
                              | Some x7599 ->
                                  ignore
                                    (Ojs.call x7598 "push"
                                       [|(Ojs.float_to_js x7599)|])
                              | None -> ());
                             x7598))|])
    let (toLocaleString : 'tags this -> string) =
      fun (x7604 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x7604) "toLocaleString" [||])
    let (toString : 'tags this -> string) =
      fun (x7606 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x7606) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x7608 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x7608) "valueOf" [||])
    let (get : 'tags this -> float -> float) =
      fun (x7610 : 'tags this) ->
        fun (x7612 : float) ->
          Ojs.float_of_js
            (Ojs.get_prop (this_to_js Obj.magic x7610)
               (Ojs.float_to_js x7612))
    let (set : 'tags this -> float -> float -> unit) =
      fun (x7613 : 'tags this) ->
        fun (x7615 : float) ->
          fun (x7616 : float) ->
            Ojs.set_prop (this_to_js Obj.magic x7613) (Ojs.float_to_js x7615)
              (Ojs.float_to_js x7616)
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int16Array") [||])
    let (create' : float Iterable.t -> t) =
      fun (x7617 : float Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int16Array")
             [|(Iterable.t_to_js Ojs.float_to_js x7617)|])
    let (from :
      arrayLike:float Iterable.t ->
        ?mapfn:(v:float -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x7619 : float Iterable.t) ->
        fun ?mapfn:(x7620 : (v:float -> k:float -> float) option) ->
          fun ?thisArg:(x7621 : any option) ->
            fun () ->
              t_of_js
                (let x7628 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
                 Ojs.call (Ojs.get_prop_ascii x7628 "from") "apply"
                   [|x7628;((let x7622 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7622 "push"
                                  [|(Iterable.t_to_js Ojs.float_to_js x7619)|]);
                             (match x7620 with
                              | Some x7624 ->
                                  ignore
                                    (Ojs.call x7622 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x7625 : Ojs.t) ->
                                               fun (x7626 : Ojs.t) ->
                                                 Ojs.float_to_js
                                                   (x7624
                                                      ~v:(Ojs.float_of_js
                                                            x7625)
                                                      ~k:(Ojs.float_of_js
                                                            x7626))))|])
                              | None -> ());
                             (match x7621 with
                              | Some x7623 ->
                                  ignore
                                    (Ojs.call x7622 "push"
                                       [|(any_to_js x7623)|])
                              | None -> ());
                             x7622))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int16Array")
             "prototype")
    let (create'' : float -> t) =
      fun (x7629 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int16Array")
             [|(Ojs.float_to_js x7629)|])
    let (create''' : (ArrayBufferLike.t, float ArrayLike.t) union2 -> t) =
      fun (x7630 : (ArrayBufferLike.t, float ArrayLike.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int16Array")
             [|(union2_to_js ArrayBufferLike.t_to_js
                  (fun (x7632 : float ArrayLike.t) ->
                     ArrayLike.t_to_js Ojs.float_to_js x7632) x7630)|])
    let (create'''' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x7634 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x7635 : float option) ->
          fun ?length:(x7636 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Int16Array")
                   (let x7637 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x7637 "push"
                         [|(ArrayBufferLike.t_to_js x7634)|]);
                    (match x7635 with
                     | Some x7639 ->
                         ignore
                           (Ojs.call x7637 "push" [|(Ojs.float_to_js x7639)|])
                     | None -> ());
                    (match x7636 with
                     | Some x7638 ->
                         ignore
                           (Ojs.call x7637 "push" [|(Ojs.float_to_js x7638)|])
                     | None -> ());
                    x7637))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int16Array")
             "BYTES_PER_ELEMENT")
    let (of_ : float list -> t) =
      fun (x7640 : float list) ->
        t_of_js
          (let x7643 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
           Ojs.call (Ojs.get_prop_ascii x7643 "of") "apply"
             [|x7643;((let x7641 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x7642 : float) ->
                            ignore
                              (Ojs.call x7641 "push"
                                 [|(Ojs.float_to_js x7642)|])) x7640;
                       x7641))|])
    let (from' : float ArrayLike.t -> t) =
      fun (x7644 : float ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Int16Array") "from"
             [|(ArrayLike.t_to_js Ojs.float_to_js x7644)|])
    let (from'' :
      arrayLike:'T ArrayLike.t ->
        mapfn:(v:'T -> k:float -> float) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x7646 : 'T ArrayLike.t) ->
        fun ~mapfn:(x7647 : v:'T -> k:float -> float) ->
          fun ?thisArg:(x7648 : any option) ->
            fun () ->
              t_of_js
                (let x7654 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
                 Ojs.call (Ojs.get_prop_ascii x7654 "from") "apply"
                   [|x7654;((let x7649 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7649 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x7646)|]);
                             ignore
                               (Ojs.call x7649 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x7651 : Ojs.t) ->
                                          fun (x7652 : Ojs.t) ->
                                            Ojs.float_to_js
                                              (x7647 ~v:(Obj.magic x7651)
                                                 ~k:(Ojs.float_of_js x7652))))|]);
                             (match x7648 with
                              | Some x7650 ->
                                  ignore
                                    (Ojs.call x7649 "push"
                                       [|(any_to_js x7650)|])
                              | None -> ());
                             x7649))|])
    let cast_from = Obj.magic
  end
module BigUint64Array =
  struct
    type t =
      [ `ArrayLike of bigint  | `BigUint64Array 
      | `IterableIterator of bigint 
      | `Iterator of (bigint * any * never or_undefined) ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7656 : Ojs.t) -> t_of_js x7656
    and t_0_to_js : t_0 -> Ojs.t = fun (x7655 : t) -> t_to_js x7655
    type tags =
      [ `ArrayLike of bigint  | `BigUint64Array 
      | `IterableIterator of bigint 
      | `Iterator of (bigint * any * never or_undefined) ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BigUint64Array ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7659 : Ojs.t) -> intf_of_js __tags_of_js x7659
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7657 : __tags intf) -> intf_to_js __tags_to_js x7657
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x7661 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7661)
             "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x7663 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7663) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x7665 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7665) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x7667 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7667) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x7674 : 'tags this) ->
        fun ~target:(x7669 : float) ->
          fun ~start:(x7670 : float) ->
            fun ?end_:(x7671 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x7676 = this_to_js Obj.magic x7674 in
                   Ojs.call (Ojs.get_prop_ascii x7676 "copyWithin") "apply"
                     [|x7676;((let x7672 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7672 "push"
                                    [|(Ojs.float_to_js x7669)|]);
                               ignore
                                 (Ojs.call x7672 "push"
                                    [|(Ojs.float_to_js x7670)|]);
                               (match x7671 with
                                | Some x7673 ->
                                    ignore
                                      (Ojs.call x7672 "push"
                                         [|(Ojs.float_to_js x7673)|])
                                | None -> ());
                               x7672))|])
    let (entries : 'tags this -> (float * bigint) IterableIterator.t) =
      fun (x7678 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x7680 : Ojs.t) ->
             let x7681 = x7680 in
             ((Ojs.float_of_js (Ojs.array_get x7681 0)),
               (bigint_of_js (Ojs.array_get x7681 1))))
          (Ojs.call (this_to_js Obj.magic x7678) "entries" [||])
    let (every :
      'tags this ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x7689 : 'tags this) ->
        fun
          ~predicate:(x7682 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x7683 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7691 = this_to_js Obj.magic x7689 in
                 Ojs.call (Ojs.get_prop_ascii x7691 "every") "apply"
                   [|x7691;((let x7684 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7684 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7686 : Ojs.t) ->
                                          fun (x7687 : Ojs.t) ->
                                            fun (x7688 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7682
                                                   ~value:(bigint_of_js x7686)
                                                   ~index:(Ojs.float_of_js
                                                             x7687)
                                                   ~array:(t_of_js x7688))))|]);
                             (match x7683 with
                              | Some x7685 ->
                                  ignore
                                    (Ojs.call x7684 "push"
                                       [|(any_to_js x7685)|])
                              | None -> ());
                             x7684))|])
    let (fill :
      'tags this ->
        value:bigint -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x7698 : 'tags this) ->
        fun ~value:(x7692 : bigint) ->
          fun ?start:(x7693 : float option) ->
            fun ?end_:(x7694 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x7700 = this_to_js Obj.magic x7698 in
                   Ojs.call (Ojs.get_prop_ascii x7700 "fill") "apply"
                     [|x7700;((let x7695 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7695 "push"
                                    [|(bigint_to_js x7692)|]);
                               (match x7693 with
                                | Some x7697 ->
                                    ignore
                                      (Ojs.call x7695 "push"
                                         [|(Ojs.float_to_js x7697)|])
                                | None -> ());
                               (match x7694 with
                                | Some x7696 ->
                                    ignore
                                      (Ojs.call x7695 "push"
                                         [|(Ojs.float_to_js x7696)|])
                                | None -> ());
                               x7695))|])
    let (filter :
      'tags this ->
        predicate:(value:bigint -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x7709 : 'tags this) ->
        fun
          ~predicate:(x7702 : value:bigint -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x7703 : any option) ->
            fun () ->
              t_of_js
                (let x7711 = this_to_js Obj.magic x7709 in
                 Ojs.call (Ojs.get_prop_ascii x7711 "filter") "apply"
                   [|x7711;((let x7704 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7704 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7706 : Ojs.t) ->
                                          fun (x7707 : Ojs.t) ->
                                            fun (x7708 : Ojs.t) ->
                                              any_to_js
                                                (x7702
                                                   ~value:(bigint_of_js x7706)
                                                   ~index:(Ojs.float_of_js
                                                             x7707)
                                                   ~array:(t_of_js x7708))))|]);
                             (match x7703 with
                              | Some x7705 ->
                                  ignore
                                    (Ojs.call x7704 "push"
                                       [|(any_to_js x7705)|])
                              | None -> ());
                             x7704))|])
    let (find :
      'tags this ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bigint or_undefined)
      =
      fun (x7719 : 'tags this) ->
        fun
          ~predicate:(x7712 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x7713 : any option) ->
            fun () ->
              or_undefined_of_js bigint_of_js
                (let x7721 = this_to_js Obj.magic x7719 in
                 Ojs.call (Ojs.get_prop_ascii x7721 "find") "apply"
                   [|x7721;((let x7714 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7714 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7716 : Ojs.t) ->
                                          fun (x7717 : Ojs.t) ->
                                            fun (x7718 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7712
                                                   ~value:(bigint_of_js x7716)
                                                   ~index:(Ojs.float_of_js
                                                             x7717)
                                                   ~array:(t_of_js x7718))))|]);
                             (match x7713 with
                              | Some x7715 ->
                                  ignore
                                    (Ojs.call x7714 "push"
                                       [|(any_to_js x7715)|])
                              | None -> ());
                             x7714))|])
    let (findIndex :
      'tags this ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x7730 : 'tags this) ->
        fun
          ~predicate:(x7723 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x7724 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x7732 = this_to_js Obj.magic x7730 in
                 Ojs.call (Ojs.get_prop_ascii x7732 "findIndex") "apply"
                   [|x7732;((let x7725 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7725 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7727 : Ojs.t) ->
                                          fun (x7728 : Ojs.t) ->
                                            fun (x7729 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7723
                                                   ~value:(bigint_of_js x7727)
                                                   ~index:(Ojs.float_of_js
                                                             x7728)
                                                   ~array:(t_of_js x7729))))|]);
                             (match x7724 with
                              | Some x7726 ->
                                  ignore
                                    (Ojs.call x7725 "push"
                                       [|(any_to_js x7726)|])
                              | None -> ());
                             x7725))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:bigint -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x7740 : 'tags this) ->
        fun
          ~callbackfn:(x7733 :
                        value:bigint -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x7734 : any option) ->
            fun () ->
              ignore
                (let x7742 = this_to_js Obj.magic x7740 in
                 Ojs.call (Ojs.get_prop_ascii x7742 "forEach") "apply"
                   [|x7742;((let x7735 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7735 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7737 : Ojs.t) ->
                                          fun (x7738 : Ojs.t) ->
                                            fun (x7739 : Ojs.t) ->
                                              x7733
                                                ~value:(bigint_of_js x7737)
                                                ~index:(Ojs.float_of_js x7738)
                                                ~array:(t_of_js x7739)))|]);
                             (match x7734 with
                              | Some x7736 ->
                                  ignore
                                    (Ojs.call x7735 "push"
                                       [|(any_to_js x7736)|])
                              | None -> ());
                             x7735))|])
    let (includes :
      'tags this -> searchElement:bigint -> ?fromIndex:float -> unit -> bool)
      =
      fun (x7747 : 'tags this) ->
        fun ~searchElement:(x7743 : bigint) ->
          fun ?fromIndex:(x7744 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7749 = this_to_js Obj.magic x7747 in
                 Ojs.call (Ojs.get_prop_ascii x7749 "includes") "apply"
                   [|x7749;((let x7745 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7745 "push"
                                  [|(bigint_to_js x7743)|]);
                             (match x7744 with
                              | Some x7746 ->
                                  ignore
                                    (Ojs.call x7745 "push"
                                       [|(Ojs.float_to_js x7746)|])
                              | None -> ());
                             x7745))|])
    let (indexOf :
      'tags this -> searchElement:bigint -> ?fromIndex:float -> unit -> float)
      =
      fun (x7754 : 'tags this) ->
        fun ~searchElement:(x7750 : bigint) ->
          fun ?fromIndex:(x7751 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x7756 = this_to_js Obj.magic x7754 in
                 Ojs.call (Ojs.get_prop_ascii x7756 "indexOf") "apply"
                   [|x7756;((let x7752 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7752 "push"
                                  [|(bigint_to_js x7750)|]);
                             (match x7751 with
                              | Some x7753 ->
                                  ignore
                                    (Ojs.call x7752 "push"
                                       [|(Ojs.float_to_js x7753)|])
                              | None -> ());
                             x7752))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x7760 : 'tags this) ->
        fun ?separator:(x7757 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x7762 = this_to_js Obj.magic x7760 in
               Ojs.call (Ojs.get_prop_ascii x7762 "join") "apply"
                 [|x7762;((let x7758 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7757 with
                            | Some x7759 ->
                                ignore
                                  (Ojs.call x7758 "push"
                                     [|(Ojs.string_to_js x7759)|])
                            | None -> ());
                           x7758))|])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x7763 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x7763) "keys" [||])
    let (lastIndexOf :
      'tags this -> searchElement:bigint -> ?fromIndex:float -> unit -> float)
      =
      fun (x7770 : 'tags this) ->
        fun ~searchElement:(x7766 : bigint) ->
          fun ?fromIndex:(x7767 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x7772 = this_to_js Obj.magic x7770 in
                 Ojs.call (Ojs.get_prop_ascii x7772 "lastIndexOf") "apply"
                   [|x7772;((let x7768 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7768 "push"
                                  [|(bigint_to_js x7766)|]);
                             (match x7767 with
                              | Some x7769 ->
                                  ignore
                                    (Ojs.call x7768 "push"
                                       [|(Ojs.float_to_js x7769)|])
                              | None -> ());
                             x7768))|])
    let (get_length : 'tags this -> float) =
      fun (x7773 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7773) "length")
    let (map :
      'tags this ->
        callbackfn:(value:bigint -> index:float -> array:t -> bigint) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x7782 : 'tags this) ->
        fun
          ~callbackfn:(x7775 :
                        value:bigint -> index:float -> array:t -> bigint)
          ->
          fun ?thisArg:(x7776 : any option) ->
            fun () ->
              t_of_js
                (let x7784 = this_to_js Obj.magic x7782 in
                 Ojs.call (Ojs.get_prop_ascii x7784 "map") "apply"
                   [|x7784;((let x7777 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7777 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7779 : Ojs.t) ->
                                          fun (x7780 : Ojs.t) ->
                                            fun (x7781 : Ojs.t) ->
                                              bigint_to_js
                                                (x7775
                                                   ~value:(bigint_of_js x7779)
                                                   ~index:(Ojs.float_of_js
                                                             x7780)
                                                   ~array:(t_of_js x7781))))|]);
                             (match x7776 with
                              | Some x7778 ->
                                  ignore
                                    (Ojs.call x7777 "push"
                                       [|(any_to_js x7778)|])
                              | None -> ());
                             x7777))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x7790 : 'tags this) ->
        fun
          ~callbackfn:(x7785 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (this_to_js Obj.magic x7790) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x7786 : Ojs.t) ->
                       fun (x7787 : Ojs.t) ->
                         fun (x7788 : Ojs.t) ->
                           fun (x7789 : Ojs.t) ->
                             bigint_to_js
                               (x7785 ~previousValue:(bigint_of_js x7786)
                                  ~currentValue:(bigint_of_js x7787)
                                  ~currentIndex:(Ojs.float_of_js x7788)
                                  ~array:(t_of_js x7789))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x7798 : 'tags this) ->
        fun
          ~callbackfn:(x7792 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x7797 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x7798) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x7793 : Ojs.t) ->
                         fun (x7794 : Ojs.t) ->
                           fun (x7795 : Ojs.t) ->
                             fun (x7796 : Ojs.t) ->
                               Obj.magic
                                 (x7792 ~previousValue:(Obj.magic x7793)
                                    ~currentValue:(bigint_of_js x7794)
                                    ~currentIndex:(Ojs.float_of_js x7795)
                                    ~array:(t_of_js x7796))));(Obj.magic
                                                                 x7797)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x7805 : 'tags this) ->
        fun
          ~callbackfn:(x7800 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (this_to_js Obj.magic x7805) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x7801 : Ojs.t) ->
                       fun (x7802 : Ojs.t) ->
                         fun (x7803 : Ojs.t) ->
                           fun (x7804 : Ojs.t) ->
                             bigint_to_js
                               (x7800 ~previousValue:(bigint_of_js x7801)
                                  ~currentValue:(bigint_of_js x7802)
                                  ~currentIndex:(Ojs.float_of_js x7803)
                                  ~array:(t_of_js x7804))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x7813 : 'tags this) ->
        fun
          ~callbackfn:(x7807 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x7812 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x7813) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x7808 : Ojs.t) ->
                         fun (x7809 : Ojs.t) ->
                           fun (x7810 : Ojs.t) ->
                             fun (x7811 : Ojs.t) ->
                               Obj.magic
                                 (x7807 ~previousValue:(Obj.magic x7808)
                                    ~currentValue:(bigint_of_js x7809)
                                    ~currentIndex:(Ojs.float_of_js x7810)
                                    ~array:(t_of_js x7811))));(Obj.magic
                                                                 x7812)|])
    let (reverse : 'tags this -> 'tags this) =
      fun (x7815 : 'tags this) ->
        this_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic x7815) "reverse" [||])
    let (set_ :
      'tags this -> array:bigint ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x7823 : 'tags this) ->
        fun ~array:(x7818 : bigint ArrayLike.t) ->
          fun ?offset:(x7819 : float option) ->
            fun () ->
              ignore
                (let x7825 = this_to_js Obj.magic x7823 in
                 Ojs.call (Ojs.get_prop_ascii x7825 "set") "apply"
                   [|x7825;((let x7820 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7820 "push"
                                  [|(ArrayLike.t_to_js bigint_to_js x7818)|]);
                             (match x7819 with
                              | Some x7821 ->
                                  ignore
                                    (Ojs.call x7820 "push"
                                       [|(Ojs.float_to_js x7821)|])
                              | None -> ());
                             x7820))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x7831 : 'tags this) ->
        fun ?start:(x7826 : float option) ->
          fun ?end_:(x7827 : float option) ->
            fun () ->
              t_of_js
                (let x7833 = this_to_js Obj.magic x7831 in
                 Ojs.call (Ojs.get_prop_ascii x7833 "slice") "apply"
                   [|x7833;((let x7828 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7826 with
                              | Some x7830 ->
                                  ignore
                                    (Ojs.call x7828 "push"
                                       [|(Ojs.float_to_js x7830)|])
                              | None -> ());
                             (match x7827 with
                              | Some x7829 ->
                                  ignore
                                    (Ojs.call x7828 "push"
                                       [|(Ojs.float_to_js x7829)|])
                              | None -> ());
                             x7828))|])
    let (some :
      'tags this ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x7841 : 'tags this) ->
        fun
          ~predicate:(x7834 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x7835 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7843 = this_to_js Obj.magic x7841 in
                 Ojs.call (Ojs.get_prop_ascii x7843 "some") "apply"
                   [|x7843;((let x7836 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7836 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7838 : Ojs.t) ->
                                          fun (x7839 : Ojs.t) ->
                                            fun (x7840 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7834
                                                   ~value:(bigint_of_js x7838)
                                                   ~index:(Ojs.float_of_js
                                                             x7839)
                                                   ~array:(t_of_js x7840))))|]);
                             (match x7835 with
                              | Some x7837 ->
                                  ignore
                                    (Ojs.call x7836 "push"
                                       [|(any_to_js x7837)|])
                              | None -> ());
                             x7836))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:bigint -> b:bigint -> bigint or_number) ->
          unit -> 'tags this)
      =
      fun (x7850 : 'tags this) ->
        fun
          ?compareFn:(x7844 :
                       (a:bigint -> b:bigint -> bigint or_number) option)
          ->
          fun () ->
            this_of_js Obj.magic
              (let x7852 = this_to_js Obj.magic x7850 in
               Ojs.call (Ojs.get_prop_ascii x7852 "sort") "apply"
                 [|x7852;((let x7845 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7844 with
                            | Some x7846 ->
                                ignore
                                  (Ojs.call x7845 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x7847 : Ojs.t) ->
                                             fun (x7848 : Ojs.t) ->
                                               or_number_to_js bigint_to_js
                                                 (x7846
                                                    ~a:(bigint_of_js x7847)
                                                    ~b:(bigint_of_js x7848))))|])
                            | None -> ());
                           x7845))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x7859 : 'tags this) ->
        fun ?begin_:(x7854 : float option) ->
          fun ?end_:(x7855 : float option) ->
            fun () ->
              t_of_js
                (let x7861 = this_to_js Obj.magic x7859 in
                 Ojs.call (Ojs.get_prop_ascii x7861 "subarray") "apply"
                   [|x7861;((let x7856 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7854 with
                              | Some x7858 ->
                                  ignore
                                    (Ojs.call x7856 "push"
                                       [|(Ojs.float_to_js x7858)|])
                              | None -> ());
                             (match x7855 with
                              | Some x7857 ->
                                  ignore
                                    (Ojs.call x7856 "push"
                                       [|(Ojs.float_to_js x7857)|])
                              | None -> ());
                             x7856))|])
    let (toLocaleString : 'tags this -> string) =
      fun (x7862 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x7862) "toLocaleString" [||])
    let (toString : 'tags this -> string) =
      fun (x7864 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x7864) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x7866 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x7866) "valueOf" [||])
    let (values : 'tags this -> bigint IterableIterator.t) =
      fun (x7868 : 'tags this) ->
        IterableIterator.t_of_js bigint_of_js
          (Ojs.call (this_to_js Obj.magic x7868) "values" [||])
    let (get : 'tags this -> float -> bigint) =
      fun (x7871 : 'tags this) ->
        fun (x7873 : float) ->
          bigint_of_js
            (Ojs.get_prop (this_to_js Obj.magic x7871)
               (Ojs.float_to_js x7873))
    let (set : 'tags this -> float -> bigint -> unit) =
      fun (x7874 : 'tags this) ->
        fun (x7876 : float) ->
          fun (x7877 : bigint) ->
            Ojs.set_prop (this_to_js Obj.magic x7874) (Ojs.float_to_js x7876)
              (bigint_to_js x7877)
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "BigUint64Array") "prototype")
    let (create : ?length:float -> unit -> t) =
      fun ?length:(x7878 : float option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
               (let x7879 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x7878 with
                 | Some x7880 ->
                     ignore
                       (Ojs.call x7879 "push" [|(Ojs.float_to_js x7880)|])
                 | None -> ());
                x7879))
    let (create' : bigint Iterable.t -> t) =
      fun (x7881 : bigint Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
             [|(Iterable.t_to_js bigint_to_js x7881)|])
    let (create'' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x7883 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x7884 : float option) ->
          fun ?length:(x7885 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
                   (let x7886 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x7886 "push"
                         [|(ArrayBufferLike.t_to_js x7883)|]);
                    (match x7884 with
                     | Some x7888 ->
                         ignore
                           (Ojs.call x7886 "push" [|(Ojs.float_to_js x7888)|])
                     | None -> ());
                    (match x7885 with
                     | Some x7887 ->
                         ignore
                           (Ojs.call x7886 "push" [|(Ojs.float_to_js x7887)|])
                     | None -> ());
                    x7886))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
             "BYTES_PER_ELEMENT")
    let (of_ : bigint list -> t) =
      fun (x7889 : bigint list) ->
        t_of_js
          (let x7892 = Ojs.get_prop_ascii Ojs.global "BigUint64Array" in
           Ojs.call (Ojs.get_prop_ascii x7892 "of") "apply"
             [|x7892;((let x7890 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x7891 : bigint) ->
                            ignore
                              (Ojs.call x7890 "push" [|(bigint_to_js x7891)|]))
                         x7889;
                       x7890))|])
    let (from : bigint ArrayLike.t -> t) =
      fun (x7893 : bigint ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "BigUint64Array") "from"
             [|(ArrayLike.t_to_js bigint_to_js x7893)|])
    let (from' :
      arrayLike:'U ArrayLike.t ->
        mapfn:(v:'U -> k:float -> bigint) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x7895 : 'U ArrayLike.t) ->
        fun ~mapfn:(x7896 : v:'U -> k:float -> bigint) ->
          fun ?thisArg:(x7897 : any option) ->
            fun () ->
              t_of_js
                (let x7903 = Ojs.get_prop_ascii Ojs.global "BigUint64Array" in
                 Ojs.call (Ojs.get_prop_ascii x7903 "from") "apply"
                   [|x7903;((let x7898 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7898 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x7895)|]);
                             ignore
                               (Ojs.call x7898 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x7900 : Ojs.t) ->
                                          fun (x7901 : Ojs.t) ->
                                            bigint_to_js
                                              (x7896 ~v:(Obj.magic x7900)
                                                 ~k:(Ojs.float_of_js x7901))))|]);
                             (match x7897 with
                              | Some x7899 ->
                                  ignore
                                    (Ojs.call x7898 "push"
                                       [|(any_to_js x7899)|])
                              | None -> ());
                             x7898))|])
    let cast_from = Obj.magic
  end
module BigInt64Array =
  struct
    type t =
      [ `ArrayLike of bigint  | `BigInt64Array 
      | `IterableIterator of bigint 
      | `Iterator of (bigint * any * never or_undefined) ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7905 : Ojs.t) -> t_of_js x7905
    and t_0_to_js : t_0 -> Ojs.t = fun (x7904 : t) -> t_to_js x7904
    type tags =
      [ `ArrayLike of bigint  | `BigInt64Array 
      | `IterableIterator of bigint 
      | `Iterator of (bigint * any * never or_undefined) ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BigInt64Array ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7908 : Ojs.t) -> intf_of_js __tags_of_js x7908
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7906 : __tags intf) -> intf_to_js __tags_to_js x7906
    let (get_BYTES_PER_ELEMENT : 'tags this -> float) =
      fun (x7910 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7910)
             "BYTES_PER_ELEMENT")
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x7912 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7912) "buffer")
    let (get_byteLength : 'tags this -> float) =
      fun (x7914 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7914) "byteLength")
    let (get_byteOffset : 'tags this -> float) =
      fun (x7916 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7916) "byteOffset")
    let (copyWithin :
      'tags this ->
        target:float -> start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x7923 : 'tags this) ->
        fun ~target:(x7918 : float) ->
          fun ~start:(x7919 : float) ->
            fun ?end_:(x7920 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x7925 = this_to_js Obj.magic x7923 in
                   Ojs.call (Ojs.get_prop_ascii x7925 "copyWithin") "apply"
                     [|x7925;((let x7921 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7921 "push"
                                    [|(Ojs.float_to_js x7918)|]);
                               ignore
                                 (Ojs.call x7921 "push"
                                    [|(Ojs.float_to_js x7919)|]);
                               (match x7920 with
                                | Some x7922 ->
                                    ignore
                                      (Ojs.call x7921 "push"
                                         [|(Ojs.float_to_js x7922)|])
                                | None -> ());
                               x7921))|])
    let (entries : 'tags this -> (float * bigint) IterableIterator.t) =
      fun (x7927 : 'tags this) ->
        IterableIterator.t_of_js
          (fun (x7929 : Ojs.t) ->
             let x7930 = x7929 in
             ((Ojs.float_of_js (Ojs.array_get x7930 0)),
               (bigint_of_js (Ojs.array_get x7930 1))))
          (Ojs.call (this_to_js Obj.magic x7927) "entries" [||])
    let (every :
      'tags this ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x7938 : 'tags this) ->
        fun
          ~predicate:(x7931 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x7932 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7940 = this_to_js Obj.magic x7938 in
                 Ojs.call (Ojs.get_prop_ascii x7940 "every") "apply"
                   [|x7940;((let x7933 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7933 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7935 : Ojs.t) ->
                                          fun (x7936 : Ojs.t) ->
                                            fun (x7937 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7931
                                                   ~value:(bigint_of_js x7935)
                                                   ~index:(Ojs.float_of_js
                                                             x7936)
                                                   ~array:(t_of_js x7937))))|]);
                             (match x7932 with
                              | Some x7934 ->
                                  ignore
                                    (Ojs.call x7933 "push"
                                       [|(any_to_js x7934)|])
                              | None -> ());
                             x7933))|])
    let (fill :
      'tags this ->
        value:bigint -> ?start:float -> ?end_:float -> unit -> 'tags this)
      =
      fun (x7947 : 'tags this) ->
        fun ~value:(x7941 : bigint) ->
          fun ?start:(x7942 : float option) ->
            fun ?end_:(x7943 : float option) ->
              fun () ->
                this_of_js Obj.magic
                  (let x7949 = this_to_js Obj.magic x7947 in
                   Ojs.call (Ojs.get_prop_ascii x7949 "fill") "apply"
                     [|x7949;((let x7944 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7944 "push"
                                    [|(bigint_to_js x7941)|]);
                               (match x7942 with
                                | Some x7946 ->
                                    ignore
                                      (Ojs.call x7944 "push"
                                         [|(Ojs.float_to_js x7946)|])
                                | None -> ());
                               (match x7943 with
                                | Some x7945 ->
                                    ignore
                                      (Ojs.call x7944 "push"
                                         [|(Ojs.float_to_js x7945)|])
                                | None -> ());
                               x7944))|])
    let (filter :
      'tags this ->
        predicate:(value:bigint -> index:float -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x7958 : 'tags this) ->
        fun
          ~predicate:(x7951 : value:bigint -> index:float -> array:t -> any)
          ->
          fun ?thisArg:(x7952 : any option) ->
            fun () ->
              t_of_js
                (let x7960 = this_to_js Obj.magic x7958 in
                 Ojs.call (Ojs.get_prop_ascii x7960 "filter") "apply"
                   [|x7960;((let x7953 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7953 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7955 : Ojs.t) ->
                                          fun (x7956 : Ojs.t) ->
                                            fun (x7957 : Ojs.t) ->
                                              any_to_js
                                                (x7951
                                                   ~value:(bigint_of_js x7955)
                                                   ~index:(Ojs.float_of_js
                                                             x7956)
                                                   ~array:(t_of_js x7957))))|]);
                             (match x7952 with
                              | Some x7954 ->
                                  ignore
                                    (Ojs.call x7953 "push"
                                       [|(any_to_js x7954)|])
                              | None -> ());
                             x7953))|])
    let (find :
      'tags this ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bigint or_undefined)
      =
      fun (x7968 : 'tags this) ->
        fun
          ~predicate:(x7961 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x7962 : any option) ->
            fun () ->
              or_undefined_of_js bigint_of_js
                (let x7970 = this_to_js Obj.magic x7968 in
                 Ojs.call (Ojs.get_prop_ascii x7970 "find") "apply"
                   [|x7970;((let x7963 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7963 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7965 : Ojs.t) ->
                                          fun (x7966 : Ojs.t) ->
                                            fun (x7967 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7961
                                                   ~value:(bigint_of_js x7965)
                                                   ~index:(Ojs.float_of_js
                                                             x7966)
                                                   ~array:(t_of_js x7967))))|]);
                             (match x7962 with
                              | Some x7964 ->
                                  ignore
                                    (Ojs.call x7963 "push"
                                       [|(any_to_js x7964)|])
                              | None -> ());
                             x7963))|])
    let (findIndex :
      'tags this ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> float)
      =
      fun (x7979 : 'tags this) ->
        fun
          ~predicate:(x7972 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x7973 : any option) ->
            fun () ->
              Ojs.float_of_js
                (let x7981 = this_to_js Obj.magic x7979 in
                 Ojs.call (Ojs.get_prop_ascii x7981 "findIndex") "apply"
                   [|x7981;((let x7974 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7974 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7976 : Ojs.t) ->
                                          fun (x7977 : Ojs.t) ->
                                            fun (x7978 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x7972
                                                   ~value:(bigint_of_js x7976)
                                                   ~index:(Ojs.float_of_js
                                                             x7977)
                                                   ~array:(t_of_js x7978))))|]);
                             (match x7973 with
                              | Some x7975 ->
                                  ignore
                                    (Ojs.call x7974 "push"
                                       [|(any_to_js x7975)|])
                              | None -> ());
                             x7974))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:bigint -> index:float -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x7989 : 'tags this) ->
        fun
          ~callbackfn:(x7982 :
                        value:bigint -> index:float -> array:t -> unit)
          ->
          fun ?thisArg:(x7983 : any option) ->
            fun () ->
              ignore
                (let x7991 = this_to_js Obj.magic x7989 in
                 Ojs.call (Ojs.get_prop_ascii x7991 "forEach") "apply"
                   [|x7991;((let x7984 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7984 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x7986 : Ojs.t) ->
                                          fun (x7987 : Ojs.t) ->
                                            fun (x7988 : Ojs.t) ->
                                              x7982
                                                ~value:(bigint_of_js x7986)
                                                ~index:(Ojs.float_of_js x7987)
                                                ~array:(t_of_js x7988)))|]);
                             (match x7983 with
                              | Some x7985 ->
                                  ignore
                                    (Ojs.call x7984 "push"
                                       [|(any_to_js x7985)|])
                              | None -> ());
                             x7984))|])
    let (includes :
      'tags this -> searchElement:bigint -> ?fromIndex:float -> unit -> bool)
      =
      fun (x7996 : 'tags this) ->
        fun ~searchElement:(x7992 : bigint) ->
          fun ?fromIndex:(x7993 : float option) ->
            fun () ->
              Ojs.bool_of_js
                (let x7998 = this_to_js Obj.magic x7996 in
                 Ojs.call (Ojs.get_prop_ascii x7998 "includes") "apply"
                   [|x7998;((let x7994 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7994 "push"
                                  [|(bigint_to_js x7992)|]);
                             (match x7993 with
                              | Some x7995 ->
                                  ignore
                                    (Ojs.call x7994 "push"
                                       [|(Ojs.float_to_js x7995)|])
                              | None -> ());
                             x7994))|])
    let (indexOf :
      'tags this -> searchElement:bigint -> ?fromIndex:float -> unit -> float)
      =
      fun (x8003 : 'tags this) ->
        fun ~searchElement:(x7999 : bigint) ->
          fun ?fromIndex:(x8000 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x8005 = this_to_js Obj.magic x8003 in
                 Ojs.call (Ojs.get_prop_ascii x8005 "indexOf") "apply"
                   [|x8005;((let x8001 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8001 "push"
                                  [|(bigint_to_js x7999)|]);
                             (match x8000 with
                              | Some x8002 ->
                                  ignore
                                    (Ojs.call x8001 "push"
                                       [|(Ojs.float_to_js x8002)|])
                              | None -> ());
                             x8001))|])
    let (join : 'tags this -> ?separator:string -> unit -> string) =
      fun (x8009 : 'tags this) ->
        fun ?separator:(x8006 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x8011 = this_to_js Obj.magic x8009 in
               Ojs.call (Ojs.get_prop_ascii x8011 "join") "apply"
                 [|x8011;((let x8007 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8006 with
                            | Some x8008 ->
                                ignore
                                  (Ojs.call x8007 "push"
                                     [|(Ojs.string_to_js x8008)|])
                            | None -> ());
                           x8007))|])
    let (keys : 'tags this -> float IterableIterator.t) =
      fun (x8012 : 'tags this) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (this_to_js Obj.magic x8012) "keys" [||])
    let (lastIndexOf :
      'tags this -> searchElement:bigint -> ?fromIndex:float -> unit -> float)
      =
      fun (x8019 : 'tags this) ->
        fun ~searchElement:(x8015 : bigint) ->
          fun ?fromIndex:(x8016 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x8021 = this_to_js Obj.magic x8019 in
                 Ojs.call (Ojs.get_prop_ascii x8021 "lastIndexOf") "apply"
                   [|x8021;((let x8017 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8017 "push"
                                  [|(bigint_to_js x8015)|]);
                             (match x8016 with
                              | Some x8018 ->
                                  ignore
                                    (Ojs.call x8017 "push"
                                       [|(Ojs.float_to_js x8018)|])
                              | None -> ());
                             x8017))|])
    let (get_length : 'tags this -> float) =
      fun (x8022 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8022) "length")
    let (map :
      'tags this ->
        callbackfn:(value:bigint -> index:float -> array:t -> bigint) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x8031 : 'tags this) ->
        fun
          ~callbackfn:(x8024 :
                        value:bigint -> index:float -> array:t -> bigint)
          ->
          fun ?thisArg:(x8025 : any option) ->
            fun () ->
              t_of_js
                (let x8033 = this_to_js Obj.magic x8031 in
                 Ojs.call (Ojs.get_prop_ascii x8033 "map") "apply"
                   [|x8033;((let x8026 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8026 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x8028 : Ojs.t) ->
                                          fun (x8029 : Ojs.t) ->
                                            fun (x8030 : Ojs.t) ->
                                              bigint_to_js
                                                (x8024
                                                   ~value:(bigint_of_js x8028)
                                                   ~index:(Ojs.float_of_js
                                                             x8029)
                                                   ~array:(t_of_js x8030))))|]);
                             (match x8025 with
                              | Some x8027 ->
                                  ignore
                                    (Ojs.call x8026 "push"
                                       [|(any_to_js x8027)|])
                              | None -> ());
                             x8026))|])
    let (reduce :
      'tags this ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x8039 : 'tags this) ->
        fun
          ~callbackfn:(x8034 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (this_to_js Obj.magic x8039) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x8035 : Ojs.t) ->
                       fun (x8036 : Ojs.t) ->
                         fun (x8037 : Ojs.t) ->
                           fun (x8038 : Ojs.t) ->
                             bigint_to_js
                               (x8034 ~previousValue:(bigint_of_js x8035)
                                  ~currentValue:(bigint_of_js x8036)
                                  ~currentIndex:(Ojs.float_of_js x8037)
                                  ~array:(t_of_js x8038))))|])
    let (reduce' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x8047 : 'tags this) ->
        fun
          ~callbackfn:(x8041 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x8046 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x8047) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x8042 : Ojs.t) ->
                         fun (x8043 : Ojs.t) ->
                           fun (x8044 : Ojs.t) ->
                             fun (x8045 : Ojs.t) ->
                               Obj.magic
                                 (x8041 ~previousValue:(Obj.magic x8042)
                                    ~currentValue:(bigint_of_js x8043)
                                    ~currentIndex:(Ojs.float_of_js x8044)
                                    ~array:(t_of_js x8045))));(Obj.magic
                                                                 x8046)|])
    let (reduceRight :
      'tags this ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> bigint)
          -> bigint)
      =
      fun (x8054 : 'tags this) ->
        fun
          ~callbackfn:(x8049 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (this_to_js Obj.magic x8054) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x8050 : Ojs.t) ->
                       fun (x8051 : Ojs.t) ->
                         fun (x8052 : Ojs.t) ->
                           fun (x8053 : Ojs.t) ->
                             bigint_to_js
                               (x8049 ~previousValue:(bigint_of_js x8050)
                                  ~currentValue:(bigint_of_js x8051)
                                  ~currentIndex:(Ojs.float_of_js x8052)
                                  ~array:(t_of_js x8053))))|])
    let (reduceRight' :
      'tags this ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:float -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x8062 : 'tags this) ->
        fun
          ~callbackfn:(x8056 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:float -> array:t -> 'U)
          ->
          fun ~initialValue:(x8061 : 'U) ->
            Obj.magic
              (Ojs.call (this_to_js Obj.magic x8062) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x8057 : Ojs.t) ->
                         fun (x8058 : Ojs.t) ->
                           fun (x8059 : Ojs.t) ->
                             fun (x8060 : Ojs.t) ->
                               Obj.magic
                                 (x8056 ~previousValue:(Obj.magic x8057)
                                    ~currentValue:(bigint_of_js x8058)
                                    ~currentIndex:(Ojs.float_of_js x8059)
                                    ~array:(t_of_js x8060))));(Obj.magic
                                                                 x8061)|])
    let (reverse : 'tags this -> 'tags this) =
      fun (x8064 : 'tags this) ->
        this_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic x8064) "reverse" [||])
    let (set_ :
      'tags this -> array:bigint ArrayLike.t -> ?offset:float -> unit -> unit)
      =
      fun (x8072 : 'tags this) ->
        fun ~array:(x8067 : bigint ArrayLike.t) ->
          fun ?offset:(x8068 : float option) ->
            fun () ->
              ignore
                (let x8074 = this_to_js Obj.magic x8072 in
                 Ojs.call (Ojs.get_prop_ascii x8074 "set") "apply"
                   [|x8074;((let x8069 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8069 "push"
                                  [|(ArrayLike.t_to_js bigint_to_js x8067)|]);
                             (match x8068 with
                              | Some x8070 ->
                                  ignore
                                    (Ojs.call x8069 "push"
                                       [|(Ojs.float_to_js x8070)|])
                              | None -> ());
                             x8069))|])
    let (slice : 'tags this -> ?start:float -> ?end_:float -> unit -> t) =
      fun (x8080 : 'tags this) ->
        fun ?start:(x8075 : float option) ->
          fun ?end_:(x8076 : float option) ->
            fun () ->
              t_of_js
                (let x8082 = this_to_js Obj.magic x8080 in
                 Ojs.call (Ojs.get_prop_ascii x8082 "slice") "apply"
                   [|x8082;((let x8077 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x8075 with
                              | Some x8079 ->
                                  ignore
                                    (Ojs.call x8077 "push"
                                       [|(Ojs.float_to_js x8079)|])
                              | None -> ());
                             (match x8076 with
                              | Some x8078 ->
                                  ignore
                                    (Ojs.call x8077 "push"
                                       [|(Ojs.float_to_js x8078)|])
                              | None -> ());
                             x8077))|])
    let (some :
      'tags this ->
        predicate:(value:bigint -> index:float -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x8090 : 'tags this) ->
        fun
          ~predicate:(x8083 : value:bigint -> index:float -> array:t -> bool)
          ->
          fun ?thisArg:(x8084 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x8092 = this_to_js Obj.magic x8090 in
                 Ojs.call (Ojs.get_prop_ascii x8092 "some") "apply"
                   [|x8092;((let x8085 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8085 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x8087 : Ojs.t) ->
                                          fun (x8088 : Ojs.t) ->
                                            fun (x8089 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x8083
                                                   ~value:(bigint_of_js x8087)
                                                   ~index:(Ojs.float_of_js
                                                             x8088)
                                                   ~array:(t_of_js x8089))))|]);
                             (match x8084 with
                              | Some x8086 ->
                                  ignore
                                    (Ojs.call x8085 "push"
                                       [|(any_to_js x8086)|])
                              | None -> ());
                             x8085))|])
    let (sort :
      'tags this ->
        ?compareFn:(a:bigint -> b:bigint -> bigint or_number) ->
          unit -> 'tags this)
      =
      fun (x8099 : 'tags this) ->
        fun
          ?compareFn:(x8093 :
                       (a:bigint -> b:bigint -> bigint or_number) option)
          ->
          fun () ->
            this_of_js Obj.magic
              (let x8101 = this_to_js Obj.magic x8099 in
               Ojs.call (Ojs.get_prop_ascii x8101 "sort") "apply"
                 [|x8101;((let x8094 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8093 with
                            | Some x8095 ->
                                ignore
                                  (Ojs.call x8094 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x8096 : Ojs.t) ->
                                             fun (x8097 : Ojs.t) ->
                                               or_number_to_js bigint_to_js
                                                 (x8095
                                                    ~a:(bigint_of_js x8096)
                                                    ~b:(bigint_of_js x8097))))|])
                            | None -> ());
                           x8094))|])
    let (subarray : 'tags this -> ?begin_:float -> ?end_:float -> unit -> t)
      =
      fun (x8108 : 'tags this) ->
        fun ?begin_:(x8103 : float option) ->
          fun ?end_:(x8104 : float option) ->
            fun () ->
              t_of_js
                (let x8110 = this_to_js Obj.magic x8108 in
                 Ojs.call (Ojs.get_prop_ascii x8110 "subarray") "apply"
                   [|x8110;((let x8105 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x8103 with
                              | Some x8107 ->
                                  ignore
                                    (Ojs.call x8105 "push"
                                       [|(Ojs.float_to_js x8107)|])
                              | None -> ());
                             (match x8104 with
                              | Some x8106 ->
                                  ignore
                                    (Ojs.call x8105 "push"
                                       [|(Ojs.float_to_js x8106)|])
                              | None -> ());
                             x8105))|])
    let (toLocaleString : 'tags this -> string) =
      fun (x8111 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x8111) "toLocaleString" [||])
    let (toString : 'tags this -> string) =
      fun (x8113 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x8113) "toString" [||])
    let (valueOf : 'tags this -> t) =
      fun (x8115 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x8115) "valueOf" [||])
    let (values : 'tags this -> bigint IterableIterator.t) =
      fun (x8117 : 'tags this) ->
        IterableIterator.t_of_js bigint_of_js
          (Ojs.call (this_to_js Obj.magic x8117) "values" [||])
    let (get : 'tags this -> float -> bigint) =
      fun (x8120 : 'tags this) ->
        fun (x8122 : float) ->
          bigint_of_js
            (Ojs.get_prop (this_to_js Obj.magic x8120)
               (Ojs.float_to_js x8122))
    let (set : 'tags this -> float -> bigint -> unit) =
      fun (x8123 : 'tags this) ->
        fun (x8125 : float) ->
          fun (x8126 : bigint) ->
            Ojs.set_prop (this_to_js Obj.magic x8123) (Ojs.float_to_js x8125)
              (bigint_to_js x8126)
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
             "prototype")
    let (create : ?length:float -> unit -> t) =
      fun ?length:(x8127 : float option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
               (let x8128 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x8127 with
                 | Some x8129 ->
                     ignore
                       (Ojs.call x8128 "push" [|(Ojs.float_to_js x8129)|])
                 | None -> ());
                x8128))
    let (create' : bigint Iterable.t -> t) =
      fun (x8130 : bigint Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
             [|(Iterable.t_to_js bigint_to_js x8130)|])
    let (create'' :
      buffer:ArrayBufferLike.t ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun ~buffer:(x8132 : ArrayBufferLike.t) ->
        fun ?byteOffset:(x8133 : float option) ->
          fun ?length:(x8134 : float option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
                   (let x8135 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x8135 "push"
                         [|(ArrayBufferLike.t_to_js x8132)|]);
                    (match x8133 with
                     | Some x8137 ->
                         ignore
                           (Ojs.call x8135 "push" [|(Ojs.float_to_js x8137)|])
                     | None -> ());
                    (match x8134 with
                     | Some x8136 ->
                         ignore
                           (Ojs.call x8135 "push" [|(Ojs.float_to_js x8136)|])
                     | None -> ());
                    x8135))
    let (bytes_per_element : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
             "BYTES_PER_ELEMENT")
    let (of_ : bigint list -> t) =
      fun (x8138 : bigint list) ->
        t_of_js
          (let x8141 = Ojs.get_prop_ascii Ojs.global "BigInt64Array" in
           Ojs.call (Ojs.get_prop_ascii x8141 "of") "apply"
             [|x8141;((let x8139 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x8140 : bigint) ->
                            ignore
                              (Ojs.call x8139 "push" [|(bigint_to_js x8140)|]))
                         x8138;
                       x8139))|])
    let (from : bigint ArrayLike.t -> t) =
      fun (x8142 : bigint ArrayLike.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "BigInt64Array") "from"
             [|(ArrayLike.t_to_js bigint_to_js x8142)|])
    let (from' :
      arrayLike:'U ArrayLike.t ->
        mapfn:(v:'U -> k:float -> bigint) -> ?thisArg:any -> unit -> t)
      =
      fun ~arrayLike:(x8144 : 'U ArrayLike.t) ->
        fun ~mapfn:(x8145 : v:'U -> k:float -> bigint) ->
          fun ?thisArg:(x8146 : any option) ->
            fun () ->
              t_of_js
                (let x8152 = Ojs.get_prop_ascii Ojs.global "BigInt64Array" in
                 Ojs.call (Ojs.get_prop_ascii x8152 "from") "apply"
                   [|x8152;((let x8147 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8147 "push"
                                  [|(ArrayLike.t_to_js Obj.magic x8144)|]);
                             ignore
                               (Ojs.call x8147 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x8149 : Ojs.t) ->
                                          fun (x8150 : Ojs.t) ->
                                            bigint_to_js
                                              (x8145 ~v:(Obj.magic x8149)
                                                 ~k:(Ojs.float_of_js x8150))))|]);
                             (match x8146 with
                              | Some x8148 ->
                                  ignore
                                    (Ojs.call x8147 "push"
                                       [|(any_to_js x8148)|])
                              | None -> ());
                             x8147))|])
    let cast_from = Obj.magic
  end
module Atomics =
  struct
    let (add :
      typedArray:(BigInt64Array.t, BigUint64Array.t) union2 ->
        index:float -> value:bigint -> bigint)
      =
      fun ~typedArray:(x8153 : (BigInt64Array.t, BigUint64Array.t) union2) ->
        fun ~index:(x8156 : float) ->
          fun ~value:(x8157 : bigint) ->
            bigint_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "add"
                 [|(union2_to_js BigInt64Array.t_to_js BigUint64Array.t_to_js
                      x8153);(Ojs.float_to_js x8156);(bigint_to_js x8157)|])
    let (and_ :
      typedArray:(BigInt64Array.t, BigUint64Array.t) union2 ->
        index:float -> value:bigint -> bigint)
      =
      fun ~typedArray:(x8158 : (BigInt64Array.t, BigUint64Array.t) union2) ->
        fun ~index:(x8161 : float) ->
          fun ~value:(x8162 : bigint) ->
            bigint_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "and"
                 [|(union2_to_js BigInt64Array.t_to_js BigUint64Array.t_to_js
                      x8158);(Ojs.float_to_js x8161);(bigint_to_js x8162)|])
    let (compareExchange :
      typedArray:(BigInt64Array.t, BigUint64Array.t) union2 ->
        index:float ->
          expectedValue:bigint -> replacementValue:bigint -> bigint)
      =
      fun ~typedArray:(x8163 : (BigInt64Array.t, BigUint64Array.t) union2) ->
        fun ~index:(x8166 : float) ->
          fun ~expectedValue:(x8167 : bigint) ->
            fun ~replacementValue:(x8168 : bigint) ->
              bigint_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics")
                   "compareExchange"
                   [|(union2_to_js BigInt64Array.t_to_js
                        BigUint64Array.t_to_js x8163);(Ojs.float_to_js x8166);(
                     bigint_to_js x8167);(bigint_to_js x8168)|])
    let (exchange :
      typedArray:(BigInt64Array.t, BigUint64Array.t) union2 ->
        index:float -> value:bigint -> bigint)
      =
      fun ~typedArray:(x8169 : (BigInt64Array.t, BigUint64Array.t) union2) ->
        fun ~index:(x8172 : float) ->
          fun ~value:(x8173 : bigint) ->
            bigint_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "exchange"
                 [|(union2_to_js BigInt64Array.t_to_js BigUint64Array.t_to_js
                      x8169);(Ojs.float_to_js x8172);(bigint_to_js x8173)|])
    let (load :
      typedArray:(BigInt64Array.t, BigUint64Array.t) union2 ->
        index:float -> bigint)
      =
      fun ~typedArray:(x8174 : (BigInt64Array.t, BigUint64Array.t) union2) ->
        fun ~index:(x8177 : float) ->
          bigint_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "load"
               [|(union2_to_js BigInt64Array.t_to_js BigUint64Array.t_to_js
                    x8174);(Ojs.float_to_js x8177)|])
    let (or_ :
      typedArray:(BigInt64Array.t, BigUint64Array.t) union2 ->
        index:float -> value:bigint -> bigint)
      =
      fun ~typedArray:(x8178 : (BigInt64Array.t, BigUint64Array.t) union2) ->
        fun ~index:(x8181 : float) ->
          fun ~value:(x8182 : bigint) ->
            bigint_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "or"
                 [|(union2_to_js BigInt64Array.t_to_js BigUint64Array.t_to_js
                      x8178);(Ojs.float_to_js x8181);(bigint_to_js x8182)|])
    let (store :
      typedArray:(BigInt64Array.t, BigUint64Array.t) union2 ->
        index:float -> value:bigint -> bigint)
      =
      fun ~typedArray:(x8183 : (BigInt64Array.t, BigUint64Array.t) union2) ->
        fun ~index:(x8186 : float) ->
          fun ~value:(x8187 : bigint) ->
            bigint_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "store"
                 [|(union2_to_js BigInt64Array.t_to_js BigUint64Array.t_to_js
                      x8183);(Ojs.float_to_js x8186);(bigint_to_js x8187)|])
    let (sub :
      typedArray:(BigInt64Array.t, BigUint64Array.t) union2 ->
        index:float -> value:bigint -> bigint)
      =
      fun ~typedArray:(x8188 : (BigInt64Array.t, BigUint64Array.t) union2) ->
        fun ~index:(x8191 : float) ->
          fun ~value:(x8192 : bigint) ->
            bigint_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "sub"
                 [|(union2_to_js BigInt64Array.t_to_js BigUint64Array.t_to_js
                      x8188);(Ojs.float_to_js x8191);(bigint_to_js x8192)|])
    let (wait :
      typedArray:BigInt64Array.t ->
        index:float ->
          value:bigint ->
            ?timeout:float ->
              unit -> [ `L_s70_not_equal  | `L_s73_ok  | `L_s93_timed_out ])
      =
      fun ~typedArray:(x8193 : BigInt64Array.t) ->
        fun ~index:(x8194 : float) ->
          fun ~value:(x8195 : bigint) ->
            fun ?timeout:(x8196 : float option) ->
              fun () ->
                let x8200 =
                  let x8199 = Ojs.get_prop_ascii Ojs.global "Atomics" in
                  Ojs.call (Ojs.get_prop_ascii x8199 "wait") "apply"
                    [|x8199;((let x8197 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x8197 "push"
                                   [|(BigInt64Array.t_to_js x8193)|]);
                              ignore
                                (Ojs.call x8197 "push"
                                   [|(Ojs.float_to_js x8194)|]);
                              ignore
                                (Ojs.call x8197 "push"
                                   [|(bigint_to_js x8195)|]);
                              (match x8196 with
                               | Some x8198 ->
                                   ignore
                                     (Ojs.call x8197 "push"
                                        [|(Ojs.float_to_js x8198)|])
                               | None -> ());
                              x8197))|] in
                match Ojs.string_of_js x8200 with
                | "not-equal" -> `L_s70_not_equal
                | "ok" -> `L_s73_ok
                | "timed-out" -> `L_s93_timed_out
                | _ -> assert false
    let (notify :
      typedArray:BigInt64Array.t ->
        index:float -> ?count:float -> unit -> float)
      =
      fun ~typedArray:(x8201 : BigInt64Array.t) ->
        fun ~index:(x8202 : float) ->
          fun ?count:(x8203 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x8206 = Ojs.get_prop_ascii Ojs.global "Atomics" in
                 Ojs.call (Ojs.get_prop_ascii x8206 "notify") "apply"
                   [|x8206;((let x8204 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8204 "push"
                                  [|(BigInt64Array.t_to_js x8201)|]);
                             ignore
                               (Ojs.call x8204 "push"
                                  [|(Ojs.float_to_js x8202)|]);
                             (match x8203 with
                              | Some x8205 ->
                                  ignore
                                    (Ojs.call x8204 "push"
                                       [|(Ojs.float_to_js x8205)|])
                              | None -> ());
                             x8204))|])
    let (xor :
      typedArray:(BigInt64Array.t, BigUint64Array.t) union2 ->
        index:float -> value:bigint -> bigint)
      =
      fun ~typedArray:(x8207 : (BigInt64Array.t, BigUint64Array.t) union2) ->
        fun ~index:(x8210 : float) ->
          fun ~value:(x8211 : bigint) ->
            bigint_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "xor"
                 [|(union2_to_js BigInt64Array.t_to_js BigUint64Array.t_to_js
                      x8207);(Ojs.float_to_js x8210);(bigint_to_js x8211)|])
    let (add' :
      typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
        Uint32Array.t, Uint8Array.t) union6 ->
        index:float -> value:float -> float)
      =
      fun
        ~typedArray:(x8212 :
                      (Int16Array.t, Int32Array.t, Int8Array.t,
                        Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
        ->
        fun ~index:(x8219 : float) ->
          fun ~value:(x8220 : float) ->
            Ojs.float_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "add"
                 [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                      Int8Array.t_to_js Uint16Array.t_to_js
                      Uint32Array.t_to_js Uint8Array.t_to_js x8212);(
                   Ojs.float_to_js x8219);(Ojs.float_to_js x8220)|])
    let (and_' :
      typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
        Uint32Array.t, Uint8Array.t) union6 ->
        index:float -> value:float -> float)
      =
      fun
        ~typedArray:(x8221 :
                      (Int16Array.t, Int32Array.t, Int8Array.t,
                        Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
        ->
        fun ~index:(x8228 : float) ->
          fun ~value:(x8229 : float) ->
            Ojs.float_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "and"
                 [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                      Int8Array.t_to_js Uint16Array.t_to_js
                      Uint32Array.t_to_js Uint8Array.t_to_js x8221);(
                   Ojs.float_to_js x8228);(Ojs.float_to_js x8229)|])
    let (compareExchange' :
      typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
        Uint32Array.t, Uint8Array.t) union6 ->
        index:float -> expectedValue:float -> replacementValue:float -> float)
      =
      fun
        ~typedArray:(x8230 :
                      (Int16Array.t, Int32Array.t, Int8Array.t,
                        Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
        ->
        fun ~index:(x8237 : float) ->
          fun ~expectedValue:(x8238 : float) ->
            fun ~replacementValue:(x8239 : float) ->
              Ojs.float_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics")
                   "compareExchange"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x8230);(
                     Ojs.float_to_js x8237);(Ojs.float_to_js x8238);(
                     Ojs.float_to_js x8239)|])
    let (exchange' :
      typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
        Uint32Array.t, Uint8Array.t) union6 ->
        index:float -> value:float -> float)
      =
      fun
        ~typedArray:(x8240 :
                      (Int16Array.t, Int32Array.t, Int8Array.t,
                        Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
        ->
        fun ~index:(x8247 : float) ->
          fun ~value:(x8248 : float) ->
            Ojs.float_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "exchange"
                 [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                      Int8Array.t_to_js Uint16Array.t_to_js
                      Uint32Array.t_to_js Uint8Array.t_to_js x8240);(
                   Ojs.float_to_js x8247);(Ojs.float_to_js x8248)|])
    let (isLockFree : float -> bool) =
      fun (x8249 : float) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "isLockFree"
             [|(Ojs.float_to_js x8249)|])
    let (load' :
      typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
        Uint32Array.t, Uint8Array.t) union6 -> index:float -> float)
      =
      fun
        ~typedArray:(x8250 :
                      (Int16Array.t, Int32Array.t, Int8Array.t,
                        Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
        ->
        fun ~index:(x8257 : float) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "load"
               [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                    Int8Array.t_to_js Uint16Array.t_to_js Uint32Array.t_to_js
                    Uint8Array.t_to_js x8250);(Ojs.float_to_js x8257)|])
    let (or_' :
      typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
        Uint32Array.t, Uint8Array.t) union6 ->
        index:float -> value:float -> float)
      =
      fun
        ~typedArray:(x8258 :
                      (Int16Array.t, Int32Array.t, Int8Array.t,
                        Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
        ->
        fun ~index:(x8265 : float) ->
          fun ~value:(x8266 : float) ->
            Ojs.float_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "or"
                 [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                      Int8Array.t_to_js Uint16Array.t_to_js
                      Uint32Array.t_to_js Uint8Array.t_to_js x8258);(
                   Ojs.float_to_js x8265);(Ojs.float_to_js x8266)|])
    let (store' :
      typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
        Uint32Array.t, Uint8Array.t) union6 ->
        index:float -> value:float -> float)
      =
      fun
        ~typedArray:(x8267 :
                      (Int16Array.t, Int32Array.t, Int8Array.t,
                        Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
        ->
        fun ~index:(x8274 : float) ->
          fun ~value:(x8275 : float) ->
            Ojs.float_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "store"
                 [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                      Int8Array.t_to_js Uint16Array.t_to_js
                      Uint32Array.t_to_js Uint8Array.t_to_js x8267);(
                   Ojs.float_to_js x8274);(Ojs.float_to_js x8275)|])
    let (sub' :
      typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
        Uint32Array.t, Uint8Array.t) union6 ->
        index:float -> value:float -> float)
      =
      fun
        ~typedArray:(x8276 :
                      (Int16Array.t, Int32Array.t, Int8Array.t,
                        Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
        ->
        fun ~index:(x8283 : float) ->
          fun ~value:(x8284 : float) ->
            Ojs.float_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "sub"
                 [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                      Int8Array.t_to_js Uint16Array.t_to_js
                      Uint32Array.t_to_js Uint8Array.t_to_js x8276);(
                   Ojs.float_to_js x8283);(Ojs.float_to_js x8284)|])
    let (wait' :
      typedArray:Int32Array.t ->
        index:float ->
          value:float ->
            ?timeout:float ->
              unit -> [ `L_s70_not_equal  | `L_s73_ok  | `L_s93_timed_out ])
      =
      fun ~typedArray:(x8285 : Int32Array.t) ->
        fun ~index:(x8286 : float) ->
          fun ~value:(x8287 : float) ->
            fun ?timeout:(x8288 : float option) ->
              fun () ->
                let x8292 =
                  let x8291 = Ojs.get_prop_ascii Ojs.global "Atomics" in
                  Ojs.call (Ojs.get_prop_ascii x8291 "wait") "apply"
                    [|x8291;((let x8289 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x8289 "push"
                                   [|(Int32Array.t_to_js x8285)|]);
                              ignore
                                (Ojs.call x8289 "push"
                                   [|(Ojs.float_to_js x8286)|]);
                              ignore
                                (Ojs.call x8289 "push"
                                   [|(Ojs.float_to_js x8287)|]);
                              (match x8288 with
                               | Some x8290 ->
                                   ignore
                                     (Ojs.call x8289 "push"
                                        [|(Ojs.float_to_js x8290)|])
                               | None -> ());
                              x8289))|] in
                match Ojs.string_of_js x8292 with
                | "not-equal" -> `L_s70_not_equal
                | "ok" -> `L_s73_ok
                | "timed-out" -> `L_s93_timed_out
                | _ -> assert false
    let (notify' :
      typedArray:Int32Array.t -> index:float -> ?count:float -> unit -> float)
      =
      fun ~typedArray:(x8293 : Int32Array.t) ->
        fun ~index:(x8294 : float) ->
          fun ?count:(x8295 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x8298 = Ojs.get_prop_ascii Ojs.global "Atomics" in
                 Ojs.call (Ojs.get_prop_ascii x8298 "notify") "apply"
                   [|x8298;((let x8296 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8296 "push"
                                  [|(Int32Array.t_to_js x8293)|]);
                             ignore
                               (Ojs.call x8296 "push"
                                  [|(Ojs.float_to_js x8294)|]);
                             (match x8295 with
                              | Some x8297 ->
                                  ignore
                                    (Ojs.call x8296 "push"
                                       [|(Ojs.float_to_js x8297)|])
                              | None -> ());
                             x8296))|])
    let (xor' :
      typedArray:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
        Uint32Array.t, Uint8Array.t) union6 ->
        index:float -> value:float -> float)
      =
      fun
        ~typedArray:(x8299 :
                      (Int16Array.t, Int32Array.t, Int8Array.t,
                        Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
        ->
        fun ~index:(x8306 : float) ->
          fun ~value:(x8307 : float) ->
            Ojs.float_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Atomics") "xor"
                 [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                      Int8Array.t_to_js Uint16Array.t_to_js
                      Uint32Array.t_to_js Uint8Array.t_to_js x8299);(
                   Ojs.float_to_js x8306);(Ojs.float_to_js x8307)|])
  end
module PromiseRejectedResult =
  struct
    type t = [ `PromiseRejectedResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8309 : Ojs.t) -> t_of_js x8309
    and t_0_to_js : t_0 -> Ojs.t = fun (x8308 : t) -> t_to_js x8308
    type tags = [ `PromiseRejectedResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectedResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8312 : Ojs.t) -> intf_of_js __tags_of_js x8312
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8310 : __tags intf) -> intf_to_js __tags_to_js x8310
    let (get_status : 'tags this -> [ `L_s83_rejected ]) =
      fun (x8314 : 'tags this) ->
        let x8316 = Ojs.get_prop_ascii (this_to_js Obj.magic x8314) "status" in
        match Ojs.string_of_js x8316 with
        | "rejected" -> `L_s83_rejected
        | _ -> assert false
    let (set_status : 'tags this -> [ `L_s83_rejected ] -> unit) =
      fun (x8317 : 'tags this) ->
        fun (x8318 : [ `L_s83_rejected ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8317) "status"
            (match x8318 with
             | `L_s83_rejected -> Ojs.string_to_js "rejected")
    let (get_reason : 'tags this -> any) =
      fun (x8320 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8320) "reason")
    let (set_reason : 'tags this -> any -> unit) =
      fun (x8322 : 'tags this) ->
        fun (x8323 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8322) "reason"
            (any_to_js x8323)
    let cast_from = Obj.magic
  end
module PromiseFulfilledResult =
  struct
    type 'T t = [ `PromiseFulfilledResult of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x8327 : Ojs.t) -> t_of_js __T_of_js x8327
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x8325 : __T t) -> t_to_js __T_to_js x8325
    type 'T tags = [ `PromiseFulfilledResult of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `PromiseFulfilledResult of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x8331 : Ojs.t) -> intf_of_js __tags_of_js x8331
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x8329 : __tags intf) -> intf_to_js __tags_to_js x8329
    let (get_status : ('tags, 'T) this -> [ `L_s42_fulfilled ]) =
      fun (x8333 : ('tags, 'T) this) ->
        let x8336 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x8333) "status" in
        match Ojs.string_of_js x8336 with
        | "fulfilled" -> `L_s42_fulfilled
        | _ -> assert false
    let (set_status : ('tags, 'T) this -> [ `L_s42_fulfilled ] -> unit) =
      fun (x8337 : ('tags, 'T) this) ->
        fun (x8338 : [ `L_s42_fulfilled ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x8337) "status"
            (match x8338 with
             | `L_s42_fulfilled -> Ojs.string_to_js "fulfilled")
    let (get_value : ('tags, 'T) this -> 'T) =
      fun (x8341 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x8341) "value")
    let (set_value : ('tags, 'T) this -> 'T -> unit) =
      fun (x8344 : ('tags, 'T) this) ->
        fun (x8345 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x8344) "value"
            (Obj.magic x8345)
    let cast_from = Obj.magic
  end
module PromiseSettledResult =
  struct
    type 'T t =
      [ `U_s42_fulfilled of 'T PromiseFulfilledResult.t 
      | `U_s83_rejected of PromiseRejectedResult.t ]
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x8352 : Ojs.t) ->
          let x8353 = x8352 in
          match Ojs.string_of_js (Ojs.get_prop_ascii x8353 "status") with
          | "fulfilled" ->
              `U_s42_fulfilled
                (PromiseFulfilledResult.t_of_js __T_of_js x8353)
          | "rejected" ->
              `U_s83_rejected (PromiseRejectedResult.t_of_js x8353)
          | _ -> assert false
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun
          (x8348 :
            [ `U_s42_fulfilled of __T PromiseFulfilledResult.t 
            | `U_s83_rejected of PromiseRejectedResult.t ])
          ->
          match x8348 with
          | `U_s42_fulfilled x8349 ->
              PromiseFulfilledResult.t_to_js __T_to_js x8349
          | `U_s83_rejected x8351 -> PromiseRejectedResult.t_to_js x8351
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x8357 : Ojs.t) -> t_of_js __T_of_js x8357
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x8355 : __T t) -> t_to_js __T_to_js x8355
  end
module Awaited =
  struct
    type 'T t = any
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x8360 : Ojs.t) -> any_of_js x8360
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x8359 : any) -> any_to_js x8359
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x8363 : Ojs.t) -> t_of_js __T_of_js x8363
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x8361 : __T t) -> t_to_js __T_to_js x8361
  end
module Promise =
  struct
    type 'T t = [ `Promise of 'T  | `PromiseLike of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x8367 : Ojs.t) -> t_of_js __T_of_js x8367
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x8365 : __T t) -> t_to_js __T_to_js x8365
    type 'T tags = [ `Promise of 'T  | `PromiseLike of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this = 'tags intf constraint 'tags = [> `Promise of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x8371 : Ojs.t) -> intf_of_js __tags_of_js x8371
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x8369 : __tags intf) -> intf_to_js __tags_to_js x8369
    let (finally :
      ('tags, 'T) this ->
        ?onfinally:(unit -> unit) or_null_or_undefined -> unit -> 'T t)
      =
      fun (x8377 : ('tags, 'T) this) ->
        fun ?onfinally:(x8373 : (unit -> unit) or_null_or_undefined option)
          ->
          fun () ->
            t_of_js Obj.magic
              (let x8380 = this_to_js Obj.magic Obj.magic x8377 in
               Ojs.call (Ojs.get_prop_ascii x8380 "finally") "apply"
                 [|x8380;((let x8374 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8373 with
                            | Some x8375 ->
                                ignore
                                  (Ojs.call x8374 "push"
                                     [|(or_null_or_undefined_to_js
                                          (fun (x8376 : unit -> unit) ->
                                             Ojs.fun_to_js 1
                                               (fun _ -> x8376 ())) x8375)|])
                            | None -> ());
                           x8374))|])
    let (then_ :
      ('tags, 'T) this ->
        ?onfulfilled:('T -> ('TResult1, 'TResult1 PromiseLike.t) union2)
          or_null_or_undefined ->
          ?onrejected:(any -> ('TResult2, 'TResult2 PromiseLike.t) union2)
            or_null_or_undefined -> unit -> ('TResult1, 'TResult2) union2 t)
      =
      fun (x8397 : ('tags, 'T) this) ->
        fun
          ?onfulfilled:(x8382 :
                         ('T -> ('TResult1, 'TResult1 PromiseLike.t) union2)
                           or_null_or_undefined option)
          ->
          fun
            ?onrejected:(x8383 :
                          (any -> ('TResult2, 'TResult2 PromiseLike.t) union2)
                            or_null_or_undefined option)
            ->
            fun () ->
              t_of_js
                (fun (x8401 : Ojs.t) ->
                   union2_of_js Obj.magic Obj.magic x8401)
                (let x8400 = this_to_js Obj.magic Obj.magic x8397 in
                 Ojs.call (Ojs.get_prop_ascii x8400 "then") "apply"
                   [|x8400;((let x8384 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x8382 with
                              | Some x8391 ->
                                  ignore
                                    (Ojs.call x8384 "push"
                                       [|(or_null_or_undefined_to_js
                                            (fun
                                               (x8392 :
                                                 'T ->
                                                   ('TResult1,
                                                     'TResult1 PromiseLike.t)
                                                     union2)
                                               ->
                                               Ojs.fun_to_js 1
                                                 (fun (x8393 : Ojs.t) ->
                                                    union2_to_js Obj.magic
                                                      (fun
                                                         (x8395 :
                                                           'TResult1
                                                             PromiseLike.t)
                                                         ->
                                                         PromiseLike.t_to_js
                                                           Obj.magic x8395)
                                                      (x8392
                                                         (Obj.magic x8393))))
                                            x8391)|])
                              | None -> ());
                             (match x8383 with
                              | Some x8385 ->
                                  ignore
                                    (Ojs.call x8384 "push"
                                       [|(or_null_or_undefined_to_js
                                            (fun
                                               (x8386 :
                                                 any ->
                                                   ('TResult2,
                                                     'TResult2 PromiseLike.t)
                                                     union2)
                                               ->
                                               Ojs.fun_to_js 1
                                                 (fun (x8387 : Ojs.t) ->
                                                    union2_to_js Obj.magic
                                                      (fun
                                                         (x8389 :
                                                           'TResult2
                                                             PromiseLike.t)
                                                         ->
                                                         PromiseLike.t_to_js
                                                           Obj.magic x8389)
                                                      (x8386
                                                         (any_of_js x8387))))
                                            x8385)|])
                              | None -> ());
                             x8384))|])
    let (catch :
      ('tags, 'T) this ->
        ?onrejected:(any -> ('TResult, 'TResult PromiseLike.t) union2)
          or_null_or_undefined -> unit -> ('T, 'TResult) union2 t)
      =
      fun (x8412 : ('tags, 'T) this) ->
        fun
          ?onrejected:(x8404 :
                        (any -> ('TResult, 'TResult PromiseLike.t) union2)
                          or_null_or_undefined option)
          ->
          fun () ->
            t_of_js
              (fun (x8416 : Ojs.t) -> union2_of_js Obj.magic Obj.magic x8416)
              (let x8415 = this_to_js Obj.magic Obj.magic x8412 in
               Ojs.call (Ojs.get_prop_ascii x8415 "catch") "apply"
                 [|x8415;((let x8405 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8404 with
                            | Some x8406 ->
                                ignore
                                  (Ojs.call x8405 "push"
                                     [|(or_null_or_undefined_to_js
                                          (fun
                                             (x8407 :
                                               any ->
                                                 ('TResult,
                                                   'TResult PromiseLike.t)
                                                   union2)
                                             ->
                                             Ojs.fun_to_js 1
                                               (fun (x8408 : Ojs.t) ->
                                                  union2_to_js Obj.magic
                                                    (fun
                                                       (x8410 :
                                                         'TResult
                                                           PromiseLike.t)
                                                       ->
                                                       PromiseLike.t_to_js
                                                         Obj.magic x8410)
                                                    (x8407 (any_of_js x8408))))
                                          x8406)|])
                            | None -> ());
                           x8405))|])
    let (any : 'T -> any Awaited.t t) =
      fun (x8419 : 'T) ->
        t_of_js (fun (x8420 : Ojs.t) -> Awaited.t_of_js any_of_js x8420)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "any"
             [|(Obj.magic x8419)|])
    let (any' : ('T, 'T PromiseLike.t) union2 Iterable.t -> 'T Awaited.t t) =
      fun (x8422 : ('T, 'T PromiseLike.t) union2 Iterable.t) ->
        t_of_js (fun (x8427 : Ojs.t) -> Awaited.t_of_js Obj.magic x8427)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "any"
             [|(Iterable.t_to_js
                  (fun (x8423 : ('T, 'T PromiseLike.t) union2) ->
                     union2_to_js Obj.magic
                       (fun (x8425 : 'T PromiseLike.t) ->
                          PromiseLike.t_to_js Obj.magic x8425) x8423) x8422)|])
    let (prototype : unit -> any t) =
      fun () ->
        t_of_js any_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Promise")
             "prototype")
    let (create :
      (resolve:(('T, 'T PromiseLike.t) union2 -> unit) ->
         reject:(?reason:any -> unit -> unit) -> unit)
        -> 'T t)
      =
      fun
        (x8430 :
          resolve:(('T, 'T PromiseLike.t) union2 -> unit) ->
            reject:(?reason:any -> unit -> unit) -> unit)
        ->
        t_of_js Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Promise")
             [|(Ojs.fun_to_js 2
                  (fun (x8431 : Ojs.t) ->
                     fun (x8436 : Ojs.t) ->
                       x8430
                         ~resolve:(fun
                                     (x8432 : ('T, 'T PromiseLike.t) union2)
                                     ->
                                     ignore
                                       (Ojs.apply x8431
                                          [|(union2_to_js Obj.magic
                                               (fun
                                                  (x8434 : 'T PromiseLike.t)
                                                  ->
                                                  PromiseLike.t_to_js
                                                    Obj.magic x8434) x8432)|]))
                         ~reject:(fun ?reason:(x8437 : any option) ->
                                    fun () ->
                                      ignore
                                        (Ojs.call x8436 "apply"
                                           [|Ojs.null;((let x8438 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        (match x8437 with
                                                         | Some x8439 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x8438
                                                                  "push"
                                                                  [|(
                                                                    any_to_js
                                                                    x8439)|])
                                                         | None -> ());
                                                        x8438))|]))))|])
    let (all : 'T -> any t) =
      fun (x8441 : 'T) ->
        t_of_js any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "all"
             [|(Obj.magic x8441)|])
    let (race : 'T -> any Awaited.t t) =
      fun (x8443 : 'T) ->
        t_of_js (fun (x8444 : Ojs.t) -> Awaited.t_of_js any_of_js x8444)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "race"
             [|(Obj.magic x8443)|])
    let (reject : ?reason:any -> unit -> 'T t) =
      fun ?reason:(x8446 : any option) ->
        fun () ->
          t_of_js Obj.magic
            (let x8449 = Ojs.get_prop_ascii Ojs.global "Promise" in
             Ojs.call (Ojs.get_prop_ascii x8449 "reject") "apply"
               [|x8449;((let x8447 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x8446 with
                          | Some x8448 ->
                              ignore
                                (Ojs.call x8447 "push" [|(any_to_js x8448)|])
                          | None -> ());
                         x8447))|])
    let (resolve : unit -> unit t) =
      fun () ->
        t_of_js Ojs.unit_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "resolve" [||])
    let (resolve' : ('T, 'T PromiseLike.t) union2 -> 'T t) =
      fun (x8452 : ('T, 'T PromiseLike.t) union2) ->
        t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "resolve"
             [|(union2_to_js Obj.magic
                  (fun (x8454 : 'T PromiseLike.t) ->
                     PromiseLike.t_to_js Obj.magic x8454) x8452)|])
    let (all' :
      ('T, 'T PromiseLike.t) union2 Iterable.t -> 'T Awaited.t list t) =
      fun (x8457 : ('T, 'T PromiseLike.t) union2 Iterable.t) ->
        t_of_js
          (fun (x8462 : Ojs.t) ->
             Ojs.list_of_js
               (fun (x8463 : Ojs.t) -> Awaited.t_of_js Obj.magic x8463) x8462)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "all"
             [|(Iterable.t_to_js
                  (fun (x8458 : ('T, 'T PromiseLike.t) union2) ->
                     union2_to_js Obj.magic
                       (fun (x8460 : 'T PromiseLike.t) ->
                          PromiseLike.t_to_js Obj.magic x8460) x8458) x8457)|])
    let (race' : ('T, 'T PromiseLike.t) union2 Iterable.t -> 'T Awaited.t t)
      =
      fun (x8465 : ('T, 'T PromiseLike.t) union2 Iterable.t) ->
        t_of_js (fun (x8470 : Ojs.t) -> Awaited.t_of_js Obj.magic x8470)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "race"
             [|(Iterable.t_to_js
                  (fun (x8466 : ('T, 'T PromiseLike.t) union2) ->
                     union2_to_js Obj.magic
                       (fun (x8468 : 'T PromiseLike.t) ->
                          PromiseLike.t_to_js Obj.magic x8468) x8466) x8465)|])
    let (allSettled : 'T -> any t) =
      fun (x8472 : 'T) ->
        t_of_js any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "allSettled"
             [|(Obj.magic x8472)|])
    let (allSettled' :
      ('T, 'T PromiseLike.t) union2 Iterable.t ->
        'T Awaited.t PromiseSettledResult.t list t)
      =
      fun (x8474 : ('T, 'T PromiseLike.t) union2 Iterable.t) ->
        t_of_js
          (fun (x8479 : Ojs.t) ->
             Ojs.list_of_js
               (fun (x8480 : Ojs.t) ->
                  PromiseSettledResult.t_of_js
                    (fun (x8481 : Ojs.t) -> Awaited.t_of_js Obj.magic x8481)
                    x8480) x8479)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "allSettled"
             [|(Iterable.t_to_js
                  (fun (x8475 : ('T, 'T PromiseLike.t) union2) ->
                     union2_to_js Obj.magic
                       (fun (x8477 : 'T PromiseLike.t) ->
                          PromiseLike.t_to_js Obj.magic x8477) x8475) x8474)|])
    let (any'' :
      (('T, 'T PromiseLike.t) union2 Iterable.t,
        ('T, 'T PromiseLike.t) union2) or_array -> 'T t)
      =
      fun
        (x8483 :
          (('T, 'T PromiseLike.t) union2 Iterable.t,
            ('T, 'T PromiseLike.t) union2) or_array)
        ->
        t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "any"
             [|(or_array_to_js
                  (fun (x8484 : ('T, 'T PromiseLike.t) union2 Iterable.t) ->
                     Iterable.t_to_js
                       (fun (x8485 : ('T, 'T PromiseLike.t) union2) ->
                          union2_to_js Obj.magic
                            (fun (x8487 : 'T PromiseLike.t) ->
                               PromiseLike.t_to_js Obj.magic x8487) x8485)
                       x8484)
                  (fun (x8489 : ('T, 'T PromiseLike.t) union2) ->
                     union2_to_js Obj.magic
                       (fun (x8491 : 'T PromiseLike.t) ->
                          PromiseLike.t_to_js Obj.magic x8491) x8489) x8483)|])
    let cast_from = Obj.magic
  end
module AsyncIterator =
  struct
    type ('T, 'TReturn, 'TNext) t =
      [ `AsyncIterator of ('T * 'TReturn * 'TNext) ] intf
    let rec t_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t
      = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
    and t_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t -> Ojs.t
      = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
    type ('T, 'TReturn, 'TNext) t_3 = ('T, 'TReturn, 'TNext) t
    let rec t_3_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t_3
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (__TNext_of_js : Ojs.t -> __TNext) ->
            fun (x8498 : Ojs.t) ->
              t_of_js __T_of_js __TReturn_of_js __TNext_of_js x8498
    and t_3_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t_3 -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (__TNext_to_js : __TNext -> Ojs.t) ->
            fun (x8494 : (__T, __TReturn, __TNext) t) ->
              t_to_js __T_to_js __TReturn_to_js __TNext_to_js x8494
    type ('T, 'TReturn) t_2 = ('T, 'TReturn, never or_undefined) t
    let rec t_2_of_js :
      'T 'TReturn .
        (Ojs.t -> 'T) -> (Ojs.t -> 'TReturn) -> Ojs.t -> ('T, 'TReturn) t_2
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (x8507 : Ojs.t) ->
            t_of_js __T_of_js __TReturn_of_js
              (fun (x8510 : Ojs.t) -> or_undefined_of_js never_of_js x8510)
              x8507
    and t_2_to_js :
      'T 'TReturn .
        ('T -> Ojs.t) -> ('TReturn -> Ojs.t) -> ('T, 'TReturn) t_2 -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (x8502 : (__T, __TReturn, never or_undefined) t) ->
            t_to_js __T_to_js __TReturn_to_js
              (fun (x8505 : never or_undefined) ->
                 or_undefined_to_js never_to_js x8505) x8502
    type 'T t_1 = ('T, any, never or_undefined) t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x8517 : Ojs.t) ->
          t_of_js __T_of_js any_of_js
            (fun (x8520 : Ojs.t) -> or_undefined_of_js never_of_js x8520)
            x8517
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x8512 : (__T, any, never or_undefined) t) ->
          t_to_js __T_to_js any_to_js
            (fun (x8515 : never or_undefined) ->
               or_undefined_to_js never_to_js x8515) x8512
    type ('T, 'TReturn, 'TNext) tags =
      [ `AsyncIterator of ('T * 'TReturn * 'TNext) ]
    type ('T, 'TReturn, 'TNext) tags_3 = ('T, 'TReturn, 'TNext) tags
    type ('T, 'TReturn) tags_2 = ('T, 'TReturn, never or_undefined) tags
    type 'T tags_1 = ('T, any, never or_undefined) tags
    type ('tags, 'T, 'TReturn, 'TNext) this =
      'tags intf constraint 'tags =
                  [> `AsyncIterator of ('T * 'TReturn * 'TNext) ]
    let rec this_of_js :
      'tags 'T 'TReturn 'TNext .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'T) ->
            (Ojs.t -> 'TReturn) ->
              (Ojs.t -> 'TNext) ->
                Ojs.t -> ('tags, 'T, 'TReturn, 'TNext) this
      = fun (type __tags) -> fun (type __T) -> fun (type __TReturn) -> fun
      (type __TNext) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
            fun (__TNext_of_js : Ojs.t -> __TNext) ->
              fun (x8524 : Ojs.t) -> intf_of_js __tags_of_js x8524
    and this_to_js :
      'tags 'T 'TReturn 'TNext .
        ('tags -> Ojs.t) ->
          ('T -> Ojs.t) ->
            ('TReturn -> Ojs.t) ->
              ('TNext -> Ojs.t) ->
                ('tags, 'T, 'TReturn, 'TNext) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) -> fun (type __TReturn) -> fun
      (type __TNext) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
            fun (__TNext_to_js : __TNext -> Ojs.t) ->
              fun (x8522 : __tags intf) -> intf_to_js __tags_to_js x8522
    let (next :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        args:any list -> ('T, 'TReturn) IteratorResult.t Promise.t)
      =
      fun (x8529 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ~args:(x8526 : any list) ->
          Promise.t_of_js
            (fun (x8535 : Ojs.t) ->
               IteratorResult.t_of_js Obj.magic Obj.magic x8535)
            (let x8534 =
               this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x8529 in
             Ojs.call (Ojs.get_prop_ascii x8534 "next") "apply"
               [|x8534;((let x8527 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x8528 : any) ->
                              ignore
                                (Ojs.call x8527 "push" [|(any_to_js x8528)|]))
                           x8526;
                         x8527))|])
    let (return :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        ?value:('TReturn, 'TReturn PromiseLike.t) union2 ->
          unit -> ('T, 'TReturn) IteratorResult.t Promise.t)
      =
      fun (x8544 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ?value:(x8538 : ('TReturn, 'TReturn PromiseLike.t) union2 option)
          ->
          fun () ->
            Promise.t_of_js
              (fun (x8550 : Ojs.t) ->
                 IteratorResult.t_of_js Obj.magic Obj.magic x8550)
              (let x8549 =
                 this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x8544 in
               Ojs.call (Ojs.get_prop_ascii x8549 "return") "apply"
                 [|x8549;((let x8539 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8538 with
                            | Some x8540 ->
                                ignore
                                  (Ojs.call x8539 "push"
                                     [|(union2_to_js Obj.magic
                                          (fun
                                             (x8542 : 'TReturn PromiseLike.t)
                                             ->
                                             PromiseLike.t_to_js Obj.magic
                                               x8542) x8540)|])
                            | None -> ());
                           x8539))|])
    let (throw :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        ?e:any -> unit -> ('T, 'TReturn) IteratorResult.t Promise.t)
      =
      fun (x8556 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ?e:(x8553 : any option) ->
          fun () ->
            Promise.t_of_js
              (fun (x8562 : Ojs.t) ->
                 IteratorResult.t_of_js Obj.magic Obj.magic x8562)
              (let x8561 =
                 this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x8556 in
               Ojs.call (Ojs.get_prop_ascii x8561 "throw") "apply"
                 [|x8561;((let x8554 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8553 with
                            | Some x8555 ->
                                ignore
                                  (Ojs.call x8554 "push"
                                     [|(any_to_js x8555)|])
                            | None -> ());
                           x8554))|])
    let cast_from = Obj.magic
  end
module AsyncIterableIterator =
  struct
    type 'T t =
      [ `AsyncIterableIterator of 'T 
      | `AsyncIterator of ('T * any * never or_undefined) ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x8567 : Ojs.t) -> t_of_js __T_of_js x8567
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x8565 : __T t) -> t_to_js __T_to_js x8565
    type 'T tags =
      [ `AsyncIterableIterator of 'T 
      | `AsyncIterator of ('T * any * never or_undefined) ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `AsyncIterableIterator of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x8571 : Ojs.t) -> intf_of_js __tags_of_js x8571
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x8569 : __tags intf) -> intf_to_js __tags_to_js x8569
    let cast_from = Obj.magic
  end
module AsyncIterable =
  struct
    type 'T t = [ `AsyncIterable of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x8575 : Ojs.t) -> t_of_js __T_of_js x8575
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x8573 : __T t) -> t_to_js __T_to_js x8573
    type 'T tags = [ `AsyncIterable of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `AsyncIterable of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x8579 : Ojs.t) -> intf_of_js __tags_of_js x8579
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x8577 : __tags intf) -> intf_to_js __tags_to_js x8577
    let cast_from = Obj.magic
  end
module AsyncGenerator =
  struct
    type ('T, 'TReturn, 'TNext) t =
      [ `AsyncGenerator of ('T * 'TReturn * 'TNext) 
      | `AsyncIterator of ('T * 'TReturn * 'TNext) ] intf
    let rec t_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t
      = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
    and t_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t -> Ojs.t
      = fun _T -> fun _TReturn -> fun _TNext -> Obj.magic
    type ('T, 'TReturn, 'TNext) t_3 = ('T, 'TReturn, 'TNext) t
    let rec t_3_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t_3
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (__TNext_of_js : Ojs.t -> __TNext) ->
            fun (x8585 : Ojs.t) ->
              t_of_js __T_of_js __TReturn_of_js __TNext_of_js x8585
    and t_3_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t_3 -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (__TNext_to_js : __TNext -> Ojs.t) ->
            fun (x8581 : (__T, __TReturn, __TNext) t) ->
              t_to_js __T_to_js __TReturn_to_js __TNext_to_js x8581
    type ('T, 'TReturn) t_2 = ('T, 'TReturn, unknown) t
    let rec t_2_of_js :
      'T 'TReturn .
        (Ojs.t -> 'T) -> (Ojs.t -> 'TReturn) -> Ojs.t -> ('T, 'TReturn) t_2
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (x8593 : Ojs.t) ->
            t_of_js __T_of_js __TReturn_of_js unknown_of_js x8593
    and t_2_to_js :
      'T 'TReturn .
        ('T -> Ojs.t) -> ('TReturn -> Ojs.t) -> ('T, 'TReturn) t_2 -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (x8589 : (__T, __TReturn, unknown) t) ->
            t_to_js __T_to_js __TReturn_to_js unknown_to_js x8589
    type 'T t_1 = ('T, any, unknown) t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x8601 : Ojs.t) ->
          t_of_js __T_of_js any_of_js unknown_of_js x8601
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x8597 : (__T, any, unknown) t) ->
          t_to_js __T_to_js any_to_js unknown_to_js x8597
    type t_0 = (unknown, any, unknown) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x8609 : Ojs.t) ->
        t_of_js unknown_of_js any_of_js unknown_of_js x8609
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x8605 : (unknown, any, unknown) t) ->
        t_to_js unknown_to_js any_to_js unknown_to_js x8605
    type ('T, 'TReturn, 'TNext) tags =
      [ `AsyncGenerator of ('T * 'TReturn * 'TNext) 
      | `AsyncIterator of ('T * 'TReturn * 'TNext) ]
    type ('T, 'TReturn, 'TNext) tags_3 = ('T, 'TReturn, 'TNext) tags
    type ('T, 'TReturn) tags_2 = ('T, 'TReturn, unknown) tags
    type 'T tags_1 = ('T, any, unknown) tags
    type tags_0 = (unknown, any, unknown) tags
    type ('tags, 'T, 'TReturn, 'TNext) this =
      'tags intf constraint 'tags =
                  [> `AsyncGenerator of ('T * 'TReturn * 'TNext) ]
    let rec this_of_js :
      'tags 'T 'TReturn 'TNext .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'T) ->
            (Ojs.t -> 'TReturn) ->
              (Ojs.t -> 'TNext) ->
                Ojs.t -> ('tags, 'T, 'TReturn, 'TNext) this
      = fun (type __tags) -> fun (type __T) -> fun (type __TReturn) -> fun
      (type __TNext) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
            fun (__TNext_of_js : Ojs.t -> __TNext) ->
              fun (x8615 : Ojs.t) -> intf_of_js __tags_of_js x8615
    and this_to_js :
      'tags 'T 'TReturn 'TNext .
        ('tags -> Ojs.t) ->
          ('T -> Ojs.t) ->
            ('TReturn -> Ojs.t) ->
              ('TNext -> Ojs.t) ->
                ('tags, 'T, 'TReturn, 'TNext) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) -> fun (type __TReturn) -> fun
      (type __TNext) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
            fun (__TNext_to_js : __TNext -> Ojs.t) ->
              fun (x8613 : __tags intf) -> intf_to_js __tags_to_js x8613
    let (next :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        args:any list -> ('T, 'TReturn) IteratorResult.t Promise.t)
      =
      fun (x8620 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ~args:(x8617 : any list) ->
          Promise.t_of_js
            (fun (x8626 : Ojs.t) ->
               IteratorResult.t_of_js Obj.magic Obj.magic x8626)
            (let x8625 =
               this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x8620 in
             Ojs.call (Ojs.get_prop_ascii x8625 "next") "apply"
               [|x8625;((let x8618 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x8619 : any) ->
                              ignore
                                (Ojs.call x8618 "push" [|(any_to_js x8619)|]))
                           x8617;
                         x8618))|])
    let (return :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        value:('TReturn, 'TReturn PromiseLike.t) union2 ->
          ('T, 'TReturn) IteratorResult.t Promise.t)
      =
      fun (x8633 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ~value:(x8629 : ('TReturn, 'TReturn PromiseLike.t) union2) ->
          Promise.t_of_js
            (fun (x8638 : Ojs.t) ->
               IteratorResult.t_of_js Obj.magic Obj.magic x8638)
            (Ojs.call
               (this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x8633)
               "return"
               [|(union2_to_js Obj.magic
                    (fun (x8631 : 'TReturn PromiseLike.t) ->
                       PromiseLike.t_to_js Obj.magic x8631) x8629)|])
    let (throw :
      ('tags, 'T, 'TReturn, 'TNext) this ->
        e:any -> ('T, 'TReturn) IteratorResult.t Promise.t)
      =
      fun (x8642 : ('tags, 'T, 'TReturn, 'TNext) this) ->
        fun ~e:(x8641 : any) ->
          Promise.t_of_js
            (fun (x8647 : Ojs.t) ->
               IteratorResult.t_of_js Obj.magic Obj.magic x8647)
            (Ojs.call
               (this_to_js Obj.magic Obj.magic Obj.magic Obj.magic x8642)
               "throw" [|(any_to_js x8641)|])
    let cast_from = Obj.magic
  end
module AsyncGeneratorFunction =
  struct
    type t = [ `AsyncGeneratorFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8651 : Ojs.t) -> t_of_js x8651
    and t_0_to_js : t_0 -> Ojs.t = fun (x8650 : t) -> t_to_js x8650
    type tags = [ `AsyncGeneratorFunction ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AsyncGeneratorFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8654 : Ojs.t) -> intf_of_js __tags_of_js x8654
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8652 : __tags intf) -> intf_to_js __tags_to_js x8652
    let (create : 'tags this -> args:any list -> AsyncGenerator.t_0) =
      fun (x8659 : 'tags this) ->
        fun ~args:(x8656 : any list) ->
          AsyncGenerator.t_0_of_js
            (Ojs.new_obj_arr (this_to_js Obj.magic x8659)
               (let x8657 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x8658 : any) ->
                     ignore (Ojs.call x8657 "push" [|(any_to_js x8658)|]))
                  x8656;
                x8657))
    let (apply : 'tags this -> args:any list -> AsyncGenerator.t_0) =
      fun (x8664 : 'tags this) ->
        fun ~args:(x8661 : any list) ->
          AsyncGenerator.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x8664) "apply"
               [|Ojs.null;((let x8662 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x8663 : any) ->
                                 ignore
                                   (Ojs.call x8662 "push"
                                      [|(any_to_js x8663)|])) x8661;
                            x8662))|])
    let (get_length : 'tags this -> float) =
      fun (x8666 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8666) "length")
    let (get_name : 'tags this -> string) =
      fun (x8668 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8668) "name")
    let (get_prototype : 'tags this -> AsyncGenerator.t_0) =
      fun (x8670 : 'tags this) ->
        AsyncGenerator.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8670) "prototype")
    let cast_from = Obj.magic
  end
module AsyncGeneratorFunctionConstructor =
  struct
    type t = [ `AsyncGeneratorFunctionConstructor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8673 : Ojs.t) -> t_of_js x8673
    and t_0_to_js : t_0 -> Ojs.t = fun (x8672 : t) -> t_to_js x8672
    type tags = [ `AsyncGeneratorFunctionConstructor ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AsyncGeneratorFunctionConstructor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8676 : Ojs.t) -> intf_of_js __tags_of_js x8676
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8674 : __tags intf) -> intf_to_js __tags_to_js x8674
    let (create : 'tags this -> args:string list -> AsyncGeneratorFunction.t)
      =
      fun (x8681 : 'tags this) ->
        fun ~args:(x8678 : string list) ->
          AsyncGeneratorFunction.t_of_js
            (Ojs.new_obj_arr (this_to_js Obj.magic x8681)
               (let x8679 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x8680 : string) ->
                     ignore
                       (Ojs.call x8679 "push" [|(Ojs.string_to_js x8680)|]))
                  x8678;
                x8679))
    let (apply : 'tags this -> args:string list -> AsyncGeneratorFunction.t)
      =
      fun (x8686 : 'tags this) ->
        fun ~args:(x8683 : string list) ->
          AsyncGeneratorFunction.t_of_js
            (Ojs.call (this_to_js Obj.magic x8686) "apply"
               [|Ojs.null;((let x8684 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x8685 : string) ->
                                 ignore
                                   (Ojs.call x8684 "push"
                                      [|(Ojs.string_to_js x8685)|])) x8683;
                            x8684))|])
    let (get_length : 'tags this -> float) =
      fun (x8688 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8688) "length")
    let (get_name : 'tags this -> string) =
      fun (x8690 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8690) "name")
    let (get_prototype : 'tags this -> AsyncGeneratorFunction.t) =
      fun (x8692 : 'tags this) ->
        AsyncGeneratorFunction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8692) "prototype")
    let cast_from = Obj.magic
  end
module ArrayBufferView =
  struct
    type t = [ `ArrayBufferView ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8695 : Ojs.t) -> t_of_js x8695
    and t_0_to_js : t_0 -> Ojs.t = fun (x8694 : t) -> t_to_js x8694
    type tags = [ `ArrayBufferView ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ArrayBufferView ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8698 : Ojs.t) -> intf_of_js __tags_of_js x8698
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8696 : __tags intf) -> intf_to_js __tags_to_js x8696
    let (get_buffer : 'tags this -> ArrayBufferLike.t) =
      fun (x8700 : 'tags this) ->
        ArrayBufferLike.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8700) "buffer")
    let (set_buffer : 'tags this -> ArrayBufferLike.t -> unit) =
      fun (x8702 : 'tags this) ->
        fun (x8703 : ArrayBufferLike.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8702) "buffer"
            (ArrayBufferLike.t_to_js x8703)
    let (get_byteLength : 'tags this -> float) =
      fun (x8705 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8705) "byteLength")
    let (set_byteLength : 'tags this -> float -> unit) =
      fun (x8707 : 'tags this) ->
        fun (x8708 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8707) "byteLength"
            (Ojs.float_to_js x8708)
    let (get_byteOffset : 'tags this -> float) =
      fun (x8710 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8710) "byteOffset")
    let (set_byteOffset : 'tags this -> float -> unit) =
      fun (x8712 : 'tags this) ->
        fun (x8713 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8712) "byteOffset"
            (Ojs.float_to_js x8713)
    let cast_from = Obj.magic
  end
module ArrayBufferTypes =
  struct
    type t = [ `ArrayBufferTypes ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8716 : Ojs.t) -> t_of_js x8716
    and t_0_to_js : t_0 -> Ojs.t = fun (x8715 : t) -> t_to_js x8715
    type tags = [ `ArrayBufferTypes ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ArrayBufferTypes ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8719 : Ojs.t) -> intf_of_js __tags_of_js x8719
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8717 : __tags intf) -> intf_to_js __tags_to_js x8717
    let (get_ArrayBuffer : 'tags this -> ArrayBuffer.t) =
      fun (x8721 : 'tags this) ->
        ArrayBuffer.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8721) "ArrayBuffer")
    let (set_ArrayBuffer : 'tags this -> ArrayBuffer.t -> unit) =
      fun (x8723 : 'tags this) ->
        fun (x8724 : ArrayBuffer.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8723) "ArrayBuffer"
            (ArrayBuffer.t_to_js x8724)
    let (get_SharedArrayBuffer : 'tags this -> SharedArrayBuffer.t) =
      fun (x8726 : 'tags this) ->
        SharedArrayBuffer.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8726)
             "SharedArrayBuffer")
    let (set_SharedArrayBuffer : 'tags this -> SharedArrayBuffer.t -> unit) =
      fun (x8728 : 'tags this) ->
        fun (x8729 : SharedArrayBuffer.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8728) "SharedArrayBuffer"
            (SharedArrayBuffer.t_to_js x8729)
    let cast_from = Obj.magic
  end
module AggregateError =
  struct
    type t = [ `AggregateError  | `Error ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8732 : Ojs.t) -> t_of_js x8732
    and t_0_to_js : t_0 -> Ojs.t = fun (x8731 : t) -> t_to_js x8731
    type tags = [ `AggregateError  | `Error ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AggregateError ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8735 : Ojs.t) -> intf_of_js __tags_of_js x8735
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8733 : __tags intf) -> intf_to_js __tags_to_js x8733
    let (get_errors : 'tags this -> any list) =
      fun (x8737 : 'tags this) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8737) "errors")
    let (set_errors : 'tags this -> any list -> unit) =
      fun (x8740 : 'tags this) ->
        fun (x8741 : any list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8740) "errors"
            (Ojs.list_to_js any_to_js x8741)
    let (get_errors' : 'tags this -> any list) =
      fun (x8744 : 'tags this) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8744) "errors")
    let (set_errors' : 'tags this -> any list -> unit) =
      fun (x8747 : 'tags this) ->
        fun (x8748 : any list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8747) "errors"
            (Ojs.list_to_js any_to_js x8748)
    let (create : errors:any Iterable.t -> ?message:string -> unit -> t) =
      fun ~errors:(x8751 : any Iterable.t) ->
        fun ?message:(x8752 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "AggregateError")
                 (let x8753 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x8753 "push"
                       [|(Iterable.t_to_js any_to_js x8751)|]);
                  (match x8752 with
                   | Some x8754 ->
                       ignore
                         (Ojs.call x8753 "push" [|(Ojs.string_to_js x8754)|])
                   | None -> ());
                  x8753))
    let (invoke : errors:any Iterable.t -> ?message:string -> unit -> t) =
      fun ~errors:(x8756 : any Iterable.t) ->
        fun ?message:(x8757 : string option) ->
          fun () ->
            t_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "AggregateError")
                 "apply"
                 [|Ojs.null;((let x8758 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x8758 "push"
                                   [|(Iterable.t_to_js any_to_js x8756)|]);
                              (match x8757 with
                               | Some x8759 ->
                                   ignore
                                     (Ojs.call x8758 "push"
                                        [|(Ojs.string_to_js x8759)|])
                               | None -> ());
                              x8758))|])
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "AggregateError") "prototype")
    let (create' : errors:any Iterable.t -> ?message:string -> unit -> t) =
      fun ~errors:(x8761 : any Iterable.t) ->
        fun ?message:(x8762 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "AggregateError")
                 (let x8763 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x8763 "push"
                       [|(Iterable.t_to_js any_to_js x8761)|]);
                  (match x8762 with
                   | Some x8764 ->
                       ignore
                         (Ojs.call x8763 "push" [|(Ojs.string_to_js x8764)|])
                   | None -> ());
                  x8763))
    let (invoke' : errors:any Iterable.t -> ?message:string -> unit -> t) =
      fun ~errors:(x8766 : any Iterable.t) ->
        fun ?message:(x8767 : string option) ->
          fun () ->
            t_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "AggregateError")
                 "apply"
                 [|Ojs.null;((let x8768 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x8768 "push"
                                   [|(Iterable.t_to_js any_to_js x8766)|]);
                              (match x8767 with
                               | Some x8769 ->
                                   ignore
                                     (Ojs.call x8768 "push"
                                        [|(Ojs.string_to_js x8769)|])
                               | None -> ());
                              x8768))|])
    let (prototype' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "AggregateError") "prototype")
    let cast_from = Obj.magic
  end
let (nan : unit -> float) =
  fun () -> Ojs.float_of_js (Ojs.get_prop_ascii Ojs.global "NaN")
let (infinity : unit -> float) =
  fun () -> Ojs.float_of_js (Ojs.get_prop_ascii Ojs.global "Infinity")
let (eval : string -> any) =
  fun (x8771 : string) ->
    any_of_js (Ojs.call Ojs.global "eval" [|(Ojs.string_to_js x8771)|])
let (parseInt : string:string -> ?radix:float -> unit -> float) =
  fun ~string:(x8772 : string) ->
    fun ?radix:(x8773 : float option) ->
      fun () ->
        Ojs.float_of_js
          (let x8776 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x8776 "parseInt") "apply"
             [|x8776;((let x8774 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       ignore
                         (Ojs.call x8774 "push" [|(Ojs.string_to_js x8772)|]);
                       (match x8773 with
                        | Some x8775 ->
                            ignore
                              (Ojs.call x8774 "push"
                                 [|(Ojs.float_to_js x8775)|])
                        | None -> ());
                       x8774))|])
let (parseFloat : string -> float) =
  fun (x8777 : string) ->
    Ojs.float_of_js
      (Ojs.call Ojs.global "parseFloat" [|(Ojs.string_to_js x8777)|])
let (isNaN : float -> bool) =
  fun (x8778 : float) ->
    Ojs.bool_of_js (Ojs.call Ojs.global "isNaN" [|(Ojs.float_to_js x8778)|])
let (isFinite : float -> bool) =
  fun (x8779 : float) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "isFinite" [|(Ojs.float_to_js x8779)|])
let (decodeURI : string -> string) =
  fun (x8780 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "decodeURI" [|(Ojs.string_to_js x8780)|])
let (decodeURIComponent : string -> string) =
  fun (x8781 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "decodeURIComponent" [|(Ojs.string_to_js x8781)|])
let (encodeURI : string -> string) =
  fun (x8782 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "encodeURI" [|(Ojs.string_to_js x8782)|])
let (encodeURIComponent : bool or_string or_number -> string) =
  fun (x8783 : bool or_string or_number) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "encodeURIComponent"
         [|(or_number_to_js
              (fun (x8784 : bool or_string) ->
                 or_string_to_js Ojs.bool_to_js x8784) x8783)|])
let (escape : string -> string) =
  fun (x8786 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "escape" [|(Ojs.string_to_js x8786)|])
let (unescape : string -> string) =
  fun (x8787 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "unescape" [|(Ojs.string_to_js x8787)|])
let (proxy : unit -> ProxyConstructor.t) =
  fun () -> ProxyConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Proxy")

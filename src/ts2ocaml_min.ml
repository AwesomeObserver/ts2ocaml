[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
type never = Ojs.t
let rec never_of_js : Ojs.t -> never = fun (x2 : Ojs.t) -> x2
and never_to_js : never -> Ojs.t = fun (x1 : Ojs.t) -> x1
module Never =
  struct
    type t = never
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> never_of_js x4
    and t_to_js : t -> Ojs.t = fun (x3 : never) -> never_to_js x3
    exception Ts2ocaml_Never 
    let absurd _ = raise Ts2ocaml_Never
  end
type any = Ojs.t
let rec any_of_js : Ojs.t -> any = fun (x6 : Ojs.t) -> x6
and any_to_js : any -> Ojs.t = fun (x5 : Ojs.t) -> x5
module Any =
  struct
    type t = any
    let rec t_of_js : Ojs.t -> t = fun (x8 : Ojs.t) -> any_of_js x8
    and t_to_js : t -> Ojs.t = fun (x7 : any) -> any_to_js x7
    let cast_from x = Obj.magic x
    let cast_from' f x = f x
    let unsafe_cast x = Obj.magic x
    let unsafe_cast' f x = f x
  end
type unknown = Ojs.t
let rec unknown_of_js : Ojs.t -> unknown = fun (x10 : Ojs.t) -> x10
and unknown_to_js : unknown -> Ojs.t = fun (x9 : Ojs.t) -> x9
module Unknown =
  struct
    type t = unknown
    let rec t_of_js : Ojs.t -> t = fun (x12 : Ojs.t) -> unknown_of_js x12
    and t_to_js : t -> Ojs.t = fun (x11 : unknown) -> unknown_to_js x11
    let unsafe_cast x = Obj.magic x
    let unsafe_cast' f x = f x
  end
type null = Ojs.t
let rec null_of_js : Ojs.t -> null = fun (x14 : Ojs.t) -> x14
and null_to_js : null -> Ojs.t = fun (x13 : Ojs.t) -> x13
let null = Ojs.null
module Null =
  struct
    type t = null
    let rec t_of_js : Ojs.t -> t = fun (x16 : Ojs.t) -> null_of_js x16
    and t_to_js : t -> Ojs.t = fun (x15 : null) -> null_to_js x15
    let value = Ojs.null
    let unsafe_cast x = Obj.magic x
    let unsafe_cast' f x = f x
  end
type undefined = Ojs.t
let rec undefined_of_js : Ojs.t -> undefined = fun (x18 : Ojs.t) -> x18
and undefined_to_js : undefined -> Ojs.t = fun (x17 : Ojs.t) -> x17
let undefined = Ojs.unit_to_js ()
module Undefined =
  struct
    type t = undefined
    let rec t_of_js : Ojs.t -> t = fun (x20 : Ojs.t) -> undefined_of_js x20
    and t_to_js : t -> Ojs.t = fun (x19 : undefined) -> undefined_to_js x19
    let value = Ojs.unit_to_js ()
    let unsafe_cast x = Obj.magic x
    let unsafe_cast' f x = f x
  end
type -'tags intf = Ojs.t
let intf_to_js _ x = (x : Ojs.t)
let intf_of_js _ x = (x : _ intf)
module Intf =
  struct
    type 'tags t = 'tags intf
    let rec t_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags t =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x23 : Ojs.t) -> intf_of_js __tags_of_js x23
    and t_to_js : 'tags . ('tags -> Ojs.t) -> 'tags t -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x21 : __tags intf) -> intf_to_js __tags_to_js x21
  end
type untyped_object = [ `Object ] intf
let rec untyped_object_of_js : Ojs.t -> untyped_object = Obj.magic
and untyped_object_to_js : untyped_object -> Ojs.t = Obj.magic
type untyped_function = [ `Function ] intf
let rec untyped_function_of_js : Ojs.t -> untyped_function = Obj.magic
and untyped_function_to_js : untyped_function -> Ojs.t = Obj.magic
type js_bool = [ `Boolean ] intf
let rec js_bool_of_js : Ojs.t -> js_bool = Obj.magic
and js_bool_to_js : js_bool -> Ojs.t = Obj.magic
type symbol = [ `Symbol ] intf
let rec symbol_of_js : Ojs.t -> symbol = Obj.magic
and symbol_to_js : symbol -> Ojs.t = Obj.magic
type regexp = [ `RegExp ] intf
let rec regexp_of_js : Ojs.t -> regexp = Obj.magic
and regexp_to_js : regexp -> Ojs.t = Obj.magic
type bigint = [ `BigInt ] intf
let rec bigint_of_js : Ojs.t -> bigint = Obj.magic
and bigint_to_js : bigint -> Ojs.t = Obj.magic
type js_string =
  [ `String  | `ArrayLike of js_string  | `IterableIterator of js_string 
  | `Iterator of (js_string * any * undefined) ] intf
let rec js_string_of_js : Ojs.t -> js_string = Obj.magic
and js_string_to_js : js_string -> Ojs.t = Obj.magic
module Intersection =
  struct
    type -'cases t = Ojs.t
    let t_to_js _ x = (x : Ojs.t)
    let t_of_js _ x = (x : _ t)
    let get_1 x = Obj.magic x
    let get_2 x = Obj.magic x
    let get_3 x = Obj.magic x
    let get_4 x = Obj.magic x
    let get_5 x = Obj.magic x
    let get_6 x = Obj.magic x
    let get_7 x = Obj.magic x
    let get_8 x = Obj.magic x
    let get_1' f x = f (x :> Ojs.t)
    let get_2' f x = f (x :> Ojs.t)
    let get_3' f x = f (x :> Ojs.t)
    let get_4' f x = f (x :> Ojs.t)
    let get_5' f x = f (x :> Ojs.t)
    let get_6' f x = f (x :> Ojs.t)
    let get_7' f x = f (x :> Ojs.t)
    let get_8' f x = f (x :> Ojs.t)
  end
type ('t1, 't2) intersection2 = [ `I1 of 't1  | `I2 of 't2 ] Intersection.t
let rec intersection2_of_js :
  't1 't2 .
    (Ojs.t -> 't1) -> (Ojs.t -> 't2) -> Ojs.t -> ('t1, 't2) intersection2
  = fun _ -> fun _ -> Obj.magic
and intersection2_to_js :
  't1 't2 .
    ('t1 -> Ojs.t) -> ('t2 -> Ojs.t) -> ('t1, 't2) intersection2 -> Ojs.t
  = fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3) intersection3 =
  [ `I1 of 't1  | `I2 of 't2  | `I3 of 't3 ] Intersection.t
let rec intersection3_of_js :
  't1 't2 't3 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) -> Ojs.t -> ('t1, 't2, 't3) intersection3
  = fun _ -> fun _ -> fun _ -> Obj.magic
and intersection3_to_js :
  't1 't2 't3 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) -> ('t1, 't2, 't3) intersection3 -> Ojs.t
  = fun _ -> fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3, 't4) intersection4 =
  [ `I1 of 't1  | `I2 of 't2  | `I3 of 't3  | `I4 of 't4 ] Intersection.t
let rec intersection4_of_js :
  't1 't2 't3 't4 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) ->
          (Ojs.t -> 't4) -> Ojs.t -> ('t1, 't2, 't3, 't4) intersection4
  = fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
and intersection4_to_js :
  't1 't2 't3 't4 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) ->
          ('t4 -> Ojs.t) -> ('t1, 't2, 't3, 't4) intersection4 -> Ojs.t
  = fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3, 't4, 't5) intersection5 =
  [ `I1 of 't1  | `I2 of 't2  | `I3 of 't3  | `I4 of 't4  | `I5 of 't5 ]
    Intersection.t
let rec intersection5_of_js :
  't1 't2 't3 't4 't5 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) ->
          (Ojs.t -> 't4) ->
            (Ojs.t -> 't5) ->
              Ojs.t -> ('t1, 't2, 't3, 't4, 't5) intersection5
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
and intersection5_to_js :
  't1 't2 't3 't4 't5 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) ->
          ('t4 -> Ojs.t) ->
            ('t5 -> Ojs.t) ->
              ('t1, 't2, 't3, 't4, 't5) intersection5 -> Ojs.t
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3, 't4, 't5, 't6) intersection6 =
  [ `I1 of 't1  | `I2 of 't2  | `I3 of 't3  | `I4 of 't4  | `I5 of 't5 
  | `I6 of 't6 ] Intersection.t
let rec intersection6_of_js :
  't1 't2 't3 't4 't5 't6 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) ->
          (Ojs.t -> 't4) ->
            (Ojs.t -> 't5) ->
              (Ojs.t -> 't6) ->
                Ojs.t -> ('t1, 't2, 't3, 't4, 't5, 't6) intersection6
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
and intersection6_to_js :
  't1 't2 't3 't4 't5 't6 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) ->
          ('t4 -> Ojs.t) ->
            ('t5 -> Ojs.t) ->
              ('t6 -> Ojs.t) ->
                ('t1, 't2, 't3, 't4, 't5, 't6) intersection6 -> Ojs.t
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3, 't4, 't5, 't6, 't7) intersection7 =
  [ `I1 of 't1  | `I2 of 't2  | `I3 of 't3  | `I4 of 't4  | `I5 of 't5 
  | `I6 of 't6  | `I7 of 't7 ] Intersection.t
let rec intersection7_of_js :
  't1 't2 't3 't4 't5 't6 't7 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) ->
          (Ojs.t -> 't4) ->
            (Ojs.t -> 't5) ->
              (Ojs.t -> 't6) ->
                (Ojs.t -> 't7) ->
                  Ojs.t -> ('t1, 't2, 't3, 't4, 't5, 't6, 't7) intersection7
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
and intersection7_to_js :
  't1 't2 't3 't4 't5 't6 't7 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) ->
          ('t4 -> Ojs.t) ->
            ('t5 -> Ojs.t) ->
              ('t6 -> Ojs.t) ->
                ('t7 -> Ojs.t) ->
                  ('t1, 't2, 't3, 't4, 't5, 't6, 't7) intersection7 -> Ojs.t
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3, 't4, 't5, 't6, 't7, 't8) intersection8 =
  [ `I1 of 't1  | `I2 of 't2  | `I3 of 't3  | `I4 of 't4  | `I5 of 't5 
  | `I6 of 't6  | `I7 of 't7  | `I8 of 't8 ] Intersection.t
let rec intersection8_of_js :
  't1 't2 't3 't4 't5 't6 't7 't8 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) ->
          (Ojs.t -> 't4) ->
            (Ojs.t -> 't5) ->
              (Ojs.t -> 't6) ->
                (Ojs.t -> 't7) ->
                  (Ojs.t -> 't8) ->
                    Ojs.t ->
                      ('t1, 't2, 't3, 't4, 't5, 't6, 't7, 't8) intersection8
  =
  fun _ ->
    fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
and intersection8_to_js :
  't1 't2 't3 't4 't5 't6 't7 't8 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) ->
          ('t4 -> Ojs.t) ->
            ('t5 -> Ojs.t) ->
              ('t6 -> Ojs.t) ->
                ('t7 -> Ojs.t) ->
                  ('t8 -> Ojs.t) ->
                    ('t1, 't2, 't3, 't4, 't5, 't6, 't7, 't8) intersection8 ->
                      Ojs.t
  =
  fun _ ->
    fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
module Union =
  struct
    type +'cases t = Ojs.t
    let t_to_js _ x = (x : Ojs.t)
    let t_of_js _ x = (x : _ t)
    let inject_1 x = Obj.magic x
    let inject_2 x = Obj.magic x
    let inject_3 x = Obj.magic x
    let inject_4 x = Obj.magic x
    let inject_5 x = Obj.magic x
    let inject_6 x = Obj.magic x
    let inject_7 x = Obj.magic x
    let inject_8 x = Obj.magic x
    let inject_1' f x = Obj.magic (f x)
    let inject_2' f x = Obj.magic (f x)
    let inject_3' f x = Obj.magic (f x)
    let inject_4' f x = Obj.magic (f x)
    let inject_5' f x = Obj.magic (f x)
    let inject_6' f x = Obj.magic (f x)
    let inject_7' f x = Obj.magic (f x)
    let inject_8' f x = Obj.magic (f x)
    let unsafe_get_1 x = Obj.magic x
    let unsafe_get_2 x = Obj.magic x
    let unsafe_get_3 x = Obj.magic x
    let unsafe_get_4 x = Obj.magic x
    let unsafe_get_5 x = Obj.magic x
    let unsafe_get_6 x = Obj.magic x
    let unsafe_get_7 x = Obj.magic x
    let unsafe_get_8 x = Obj.magic x
    let unsafe_get_1' f x = f (x :> Ojs.t)
    let unsafe_get_2' f x = f (x :> Ojs.t)
    let unsafe_get_3' f x = f (x :> Ojs.t)
    let unsafe_get_4' f x = f (x :> Ojs.t)
    let unsafe_get_5' f x = f (x :> Ojs.t)
    let unsafe_get_6' f x = f (x :> Ojs.t)
    let unsafe_get_7' f x = f (x :> Ojs.t)
    let unsafe_get_8' f x = f (x :> Ojs.t)
  end
type ('t1, 't2) union2 = [ `U1 of 't1  | `U2 of 't2 ] Union.t
let rec union2_of_js :
  't1 't2 . (Ojs.t -> 't1) -> (Ojs.t -> 't2) -> Ojs.t -> ('t1, 't2) union2 =
  fun _ -> fun _ -> Obj.magic
and union2_to_js :
  't1 't2 . ('t1 -> Ojs.t) -> ('t2 -> Ojs.t) -> ('t1, 't2) union2 -> Ojs.t =
  fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3) union3 =
  [ `U1 of 't1  | `U2 of 't2  | `U3 of 't3 ] Union.t
let rec union3_of_js :
  't1 't2 't3 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) -> (Ojs.t -> 't3) -> Ojs.t -> ('t1, 't2, 't3) union3
  = fun _ -> fun _ -> fun _ -> Obj.magic
and union3_to_js :
  't1 't2 't3 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) -> ('t3 -> Ojs.t) -> ('t1, 't2, 't3) union3 -> Ojs.t
  = fun _ -> fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3, 't4) union4 =
  [ `U1 of 't1  | `U2 of 't2  | `U3 of 't3  | `U4 of 't4 ] Union.t
let rec union4_of_js :
  't1 't2 't3 't4 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) ->
          (Ojs.t -> 't4) -> Ojs.t -> ('t1, 't2, 't3, 't4) union4
  = fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
and union4_to_js :
  't1 't2 't3 't4 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) ->
          ('t4 -> Ojs.t) -> ('t1, 't2, 't3, 't4) union4 -> Ojs.t
  = fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3, 't4, 't5) union5 =
  [ `U1 of 't1  | `U2 of 't2  | `U3 of 't3  | `U4 of 't4  | `U5 of 't5 ]
    Union.t
let rec union5_of_js :
  't1 't2 't3 't4 't5 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) ->
          (Ojs.t -> 't4) ->
            (Ojs.t -> 't5) -> Ojs.t -> ('t1, 't2, 't3, 't4, 't5) union5
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
and union5_to_js :
  't1 't2 't3 't4 't5 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) ->
          ('t4 -> Ojs.t) ->
            ('t5 -> Ojs.t) -> ('t1, 't2, 't3, 't4, 't5) union5 -> Ojs.t
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3, 't4, 't5, 't6) union6 =
  [ `U1 of 't1  | `U2 of 't2  | `U3 of 't3  | `U4 of 't4  | `U5 of 't5 
  | `U6 of 't6 ] Union.t
let rec union6_of_js :
  't1 't2 't3 't4 't5 't6 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) ->
          (Ojs.t -> 't4) ->
            (Ojs.t -> 't5) ->
              (Ojs.t -> 't6) ->
                Ojs.t -> ('t1, 't2, 't3, 't4, 't5, 't6) union6
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
and union6_to_js :
  't1 't2 't3 't4 't5 't6 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) ->
          ('t4 -> Ojs.t) ->
            ('t5 -> Ojs.t) ->
              ('t6 -> Ojs.t) ->
                ('t1, 't2, 't3, 't4, 't5, 't6) union6 -> Ojs.t
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3, 't4, 't5, 't6, 't7) union7 =
  [ `U1 of 't1  | `U2 of 't2  | `U3 of 't3  | `U4 of 't4  | `U5 of 't5 
  | `U6 of 't6  | `U7 of 't7 ] Union.t
let rec union7_of_js :
  't1 't2 't3 't4 't5 't6 't7 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) ->
          (Ojs.t -> 't4) ->
            (Ojs.t -> 't5) ->
              (Ojs.t -> 't6) ->
                (Ojs.t -> 't7) ->
                  Ojs.t -> ('t1, 't2, 't3, 't4, 't5, 't6, 't7) union7
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
and union7_to_js :
  't1 't2 't3 't4 't5 't6 't7 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) ->
          ('t4 -> Ojs.t) ->
            ('t5 -> Ojs.t) ->
              ('t6 -> Ojs.t) ->
                ('t7 -> Ojs.t) ->
                  ('t1, 't2, 't3, 't4, 't5, 't6, 't7) union7 -> Ojs.t
  = fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
type ('t1, 't2, 't3, 't4, 't5, 't6, 't7, 't8) union8 =
  [ `U1 of 't1  | `U2 of 't2  | `U3 of 't3  | `U4 of 't4  | `U5 of 't5 
  | `U6 of 't6  | `U7 of 't7  | `U8 of 't8 ] Union.t
let rec union8_of_js :
  't1 't2 't3 't4 't5 't6 't7 't8 .
    (Ojs.t -> 't1) ->
      (Ojs.t -> 't2) ->
        (Ojs.t -> 't3) ->
          (Ojs.t -> 't4) ->
            (Ojs.t -> 't5) ->
              (Ojs.t -> 't6) ->
                (Ojs.t -> 't7) ->
                  (Ojs.t -> 't8) ->
                    Ojs.t -> ('t1, 't2, 't3, 't4, 't5, 't6, 't7, 't8) union8
  =
  fun _ ->
    fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
and union8_to_js :
  't1 't2 't3 't4 't5 't6 't7 't8 .
    ('t1 -> Ojs.t) ->
      ('t2 -> Ojs.t) ->
        ('t3 -> Ojs.t) ->
          ('t4 -> Ojs.t) ->
            ('t5 -> Ojs.t) ->
              ('t6 -> Ojs.t) ->
                ('t7 -> Ojs.t) ->
                  ('t8 -> Ojs.t) ->
                    ('t1, 't2, 't3, 't4, 't5, 't6, 't7, 't8) union8 -> Ojs.t
  =
  fun _ ->
    fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> fun _ -> Obj.magic
module Primitive =
  struct
    type +'cases t = Ojs.t
    let t_to_js _ x = (x : Ojs.t)
    let t_of_js _ x = (x : _ t)
    type 'other cases =
      [ `String of string  | `Number of float  | `Boolean of bool 
      | `Symbol of symbol  | `BigInt of bigint  | `Null  | `Undefined 
      | `Other of 'other ]
    let inject' other_to_js (c : [< 'other cases] as 'u) =
      match c with
      | `String s -> Obj.magic (Ojs.string_to_js s)
      | `Number f -> Obj.magic (Ojs.float_to_js f)
      | `Boolean b -> Obj.magic (Ojs.bool_to_js b)
      | `Symbol s -> Obj.magic (symbol_to_js s)
      | `BigInt i -> Obj.magic (bigint_to_js i)
      | `Null -> Obj.magic Ojs.null
      | `Undefined -> Obj.magic (Ojs.unit_to_js ())
      | `Other o -> Obj.magic (other_to_js o)
    let inject c = inject' Obj.magic c
    let classify' other_of_js (u : ([< 'other cases] as 'u) t) =
      match Ojs.type_of u with
      | "string" -> Obj.magic (`String (Ojs.string_of_js u))
      | "number" -> Obj.magic (`Number (Ojs.float_of_js u))
      | "boolean" -> Obj.magic (`Boolean (Ojs.bool_of_js u))
      | "symbol" -> Obj.magic (`Symbol (symbol_of_js u))
      | "bigint" -> Obj.magic (`BigInt (bigint_of_js u))
      | "undefined" -> Obj.magic `Undefined
      | _ ->
          if Ojs.is_null u
          then Obj.magic `Null
          else Obj.magic (`Other (other_of_js u))
    let classify c = classify' Obj.magic c
  end

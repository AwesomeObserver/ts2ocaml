[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_min
open Ts2ocaml_es
module DOMHighResTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> Ojs.float_of_js x2
    and t_to_js : t -> Ojs.t = fun (x1 : float) -> Ojs.float_to_js x1
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4 : Ojs.t) -> t_of_js x4
    and t_0_to_js : t_0 -> Ojs.t = fun (x3 : t) -> t_to_js x3
  end
module PerformanceMeasureOptions =
  struct
    type t = [ `PerformanceMeasureOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6 : Ojs.t) -> t_of_js x6
    and t_0_to_js : t_0 -> Ojs.t = fun (x5 : t) -> t_to_js x5
    type tags = [ `PerformanceMeasureOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMeasureOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9 : Ojs.t) -> intf_of_js __tags_of_js x9
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7 : __tags intf) -> intf_to_js __tags_to_js x7
    let (get_detail : 'tags this -> any) =
      fun (x11 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x13 : 'tags this) ->
        fun (x14 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13) "detail"
            (any_to_js x14)
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x16 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16) "duration")
    let (set_duration : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x18 : 'tags this) ->
        fun (x19 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x18) "duration"
            (DOMHighResTimeStamp.t_to_js x19)
    let (get_end : 'tags this -> DOMHighResTimeStamp.t or_string) =
      fun (x21 : 'tags this) ->
        or_string_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x21) "end")
    let (set_end : 'tags this -> DOMHighResTimeStamp.t or_string -> unit) =
      fun (x24 : 'tags this) ->
        fun (x25 : DOMHighResTimeStamp.t or_string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x24) "end"
            (or_string_to_js DOMHighResTimeStamp.t_to_js x25)
    let (get_start : 'tags this -> DOMHighResTimeStamp.t or_string) =
      fun (x28 : 'tags this) ->
        or_string_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x28) "start")
    let (set_start : 'tags this -> DOMHighResTimeStamp.t or_string -> unit) =
      fun (x31 : 'tags this) ->
        fun (x32 : DOMHighResTimeStamp.t or_string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x31) "start"
            (or_string_to_js DOMHighResTimeStamp.t_to_js x32)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface71:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceEntry.t
                         val set_prototype : t -> PerformanceEntry.t -> unit
                         val create : t -> PerformanceEntry.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x36 : Ojs.t) -> x36
    and t_to_js : t -> Ojs.t = fun (x35 : Ojs.t) -> x35
    let (get_prototype : t -> PerformanceEntry.t) =
      fun (x37 : t) ->
        PerformanceEntry.t_of_js
          (Ojs.get_prop_ascii (t_to_js x37) "prototype")
    let (set_prototype : t -> PerformanceEntry.t -> unit) =
      fun (x38 : t) ->
        fun (x39 : PerformanceEntry.t) ->
          Ojs.set_prop_ascii (t_to_js x38) "prototype"
            (PerformanceEntry.t_to_js x39)
    let (create : t -> PerformanceEntry.t) =
      fun (x40 : t) ->
        PerformanceEntry.t_of_js (Ojs.new_obj (t_to_js x40) [||])
  end
 and
  PerformanceEntry:sig
                     type t = [ `PerformanceEntry ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `PerformanceEntry ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `PerformanceEntry ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `PerformanceEntry ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_duration : 'tags this -> DOMHighResTimeStamp.t
                     val get_entryType : 'tags this -> string
                     val get_name : 'tags this -> string
                     val get_startTime : 'tags this -> DOMHighResTimeStamp.t
                     val toJSON : 'tags this -> any
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
  struct
    type t = [ `PerformanceEntry ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x42 : Ojs.t) -> t_of_js x42
    and t_0_to_js : t_0 -> Ojs.t = fun (x41 : t) -> t_to_js x41
    type tags = [ `PerformanceEntry ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEntry ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x45 : Ojs.t) -> intf_of_js __tags_of_js x45
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x43 : __tags intf) -> intf_to_js __tags_to_js x43
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x47 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x47) "duration")
    let (get_entryType : 'tags this -> string) =
      fun (x49 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x49) "entryType")
    let (get_name : 'tags this -> string) =
      fun (x51 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x51) "name")
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x53 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x53) "startTime")
    let (toJSON : 'tags this -> any) =
      fun (x55 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x55) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceEntry") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceEntry")
             [||])
  end
module rec
  AnonymousInterface73:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceMeasure.t
                         val set_prototype :
                           t -> PerformanceMeasure.t -> unit
                         val create : t -> PerformanceMeasure.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x58 : Ojs.t) -> x58
    and t_to_js : t -> Ojs.t = fun (x57 : Ojs.t) -> x57
    let (get_prototype : t -> PerformanceMeasure.t) =
      fun (x59 : t) ->
        PerformanceMeasure.t_of_js
          (Ojs.get_prop_ascii (t_to_js x59) "prototype")
    let (set_prototype : t -> PerformanceMeasure.t -> unit) =
      fun (x60 : t) ->
        fun (x61 : PerformanceMeasure.t) ->
          Ojs.set_prop_ascii (t_to_js x60) "prototype"
            (PerformanceMeasure.t_to_js x61)
    let (create : t -> PerformanceMeasure.t) =
      fun (x62 : t) ->
        PerformanceMeasure.t_of_js (Ojs.new_obj (t_to_js x62) [||])
  end
 and
  PerformanceMeasure:sig
                       type t =
                         [ `PerformanceEntry  | `PerformanceMeasure ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags =
                         [ `PerformanceEntry  | `PerformanceMeasure ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags =
                           [ `PerformanceEntry  | `PerformanceMeasure ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags =
                                     [> `PerformanceMeasure ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_detail : 'tags this -> any
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMeasure ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x64 : Ojs.t) -> t_of_js x64
    and t_0_to_js : t_0 -> Ojs.t = fun (x63 : t) -> t_to_js x63
    type tags = [ `PerformanceEntry  | `PerformanceMeasure ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasure ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x67 : Ojs.t) -> intf_of_js __tags_of_js x67
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x65 : __tags intf) -> intf_to_js __tags_to_js x65
    let (get_detail : 'tags this -> any) =
      fun (x69 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x69) "detail")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure")
             [||])
  end
module PerformanceMarkOptions =
  struct
    type t = [ `PerformanceMarkOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x72 : Ojs.t) -> t_of_js x72
    and t_0_to_js : t_0 -> Ojs.t = fun (x71 : t) -> t_to_js x71
    type tags = [ `PerformanceMarkOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMarkOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x75 : Ojs.t) -> intf_of_js __tags_of_js x75
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x73 : __tags intf) -> intf_to_js __tags_to_js x73
    let (get_detail : 'tags this -> any) =
      fun (x77 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x77) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x79 : 'tags this) ->
        fun (x80 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x79) "detail"
            (any_to_js x80)
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x82 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x82) "startTime")
    let (set_startTime : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x84 : 'tags this) ->
        fun (x85 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x84) "startTime"
            (DOMHighResTimeStamp.t_to_js x85)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface72:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceMark.t
                         val set_prototype : t -> PerformanceMark.t -> unit
                         val create :
                           t ->
                             markName:string ->
                               ?markOptions:PerformanceMarkOptions.t ->
                                 unit -> PerformanceMark.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x88 : Ojs.t) -> x88
    and t_to_js : t -> Ojs.t = fun (x87 : Ojs.t) -> x87
    let (get_prototype : t -> PerformanceMark.t) =
      fun (x89 : t) ->
        PerformanceMark.t_of_js
          (Ojs.get_prop_ascii (t_to_js x89) "prototype")
    let (set_prototype : t -> PerformanceMark.t -> unit) =
      fun (x90 : t) ->
        fun (x91 : PerformanceMark.t) ->
          Ojs.set_prop_ascii (t_to_js x90) "prototype"
            (PerformanceMark.t_to_js x91)
    let (create :
      t ->
        markName:string ->
          ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun (x96 : t) ->
        fun ~markName:(x92 : string) ->
          fun ?markOptions:(x93 : PerformanceMarkOptions.t option) ->
            fun () ->
              PerformanceMark.t_of_js
                (Ojs.new_obj_arr (t_to_js x96)
                   (let x94 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore (Ojs.call x94 "push" [|(Ojs.string_to_js x92)|]);
                    (match x93 with
                     | Some x95 ->
                         ignore
                           (Ojs.call x94 "push"
                              [|(PerformanceMarkOptions.t_to_js x95)|])
                     | None -> ());
                    x94))
  end
 and
  PerformanceMark:sig
                    type t = [ `PerformanceEntry  | `PerformanceMark ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `PerformanceEntry  | `PerformanceMark ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `PerformanceEntry  | `PerformanceMark ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `PerformanceMark ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_detail : 'tags this -> any
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create :
                      markName:string ->
                        ?markOptions:PerformanceMarkOptions.t -> unit -> t
                  end =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMark ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x98 : Ojs.t) -> t_of_js x98
    and t_0_to_js : t_0 -> Ojs.t = fun (x97 : t) -> t_to_js x97
    type tags = [ `PerformanceEntry  | `PerformanceMark ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMark ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x101 : Ojs.t) -> intf_of_js __tags_of_js x101
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x99 : __tags intf) -> intf_to_js __tags_to_js x99
    let (get_detail : 'tags this -> any) =
      fun (x103 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x103) "detail")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMark") "prototype")
    let (create :
      markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> t)
      =
      fun ~markName:(x105 : string) ->
        fun ?markOptions:(x106 : PerformanceMarkOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "PerformanceMark")
                 (let x107 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x107 "push" [|(Ojs.string_to_js x105)|]);
                  (match x106 with
                   | Some x108 ->
                       ignore
                         (Ojs.call x107 "push"
                            [|(PerformanceMarkOptions.t_to_js x108)|])
                   | None -> ());
                  x107))
  end
module PerformanceEntryList =
  struct
    type t = PerformanceEntry.t list
    let rec t_of_js : Ojs.t -> t =
      fun (x111 : Ojs.t) -> Ojs.list_of_js PerformanceEntry.t_of_js x111
    and t_to_js : t -> Ojs.t =
      fun (x109 : PerformanceEntry.t list) ->
        Ojs.list_to_js PerformanceEntry.t_to_js x109
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x114 : Ojs.t) -> t_of_js x114
    and t_0_to_js : t_0 -> Ojs.t = fun (x113 : t) -> t_to_js x113
  end
module EventInit =
  struct
    type t = [ `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x116 : Ojs.t) -> t_of_js x116
    and t_0_to_js : t_0 -> Ojs.t = fun (x115 : t) -> t_to_js x115
    type tags = [ `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x119 : Ojs.t) -> intf_of_js __tags_of_js x119
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x117 : __tags intf) -> intf_to_js __tags_to_js x117
    let (get_bubbles : 'tags this -> bool) =
      fun (x121 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x121) "bubbles")
    let (set_bubbles : 'tags this -> bool -> unit) =
      fun (x123 : 'tags this) ->
        fun (x124 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x123) "bubbles"
            (Ojs.bool_to_js x124)
    let (get_cancelable : 'tags this -> bool) =
      fun (x126 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x126) "cancelable")
    let (set_cancelable : 'tags this -> bool -> unit) =
      fun (x128 : 'tags this) ->
        fun (x129 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x128) "cancelable"
            (Ojs.bool_to_js x129)
    let (get_composed : 'tags this -> bool) =
      fun (x131 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x131) "composed")
    let (set_composed : 'tags this -> bool -> unit) =
      fun (x133 : 'tags this) ->
        fun (x134 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x133) "composed"
            (Ojs.bool_to_js x134)
    let cast_from = Obj.magic
  end
module EventListenerOptions =
  struct
    type t = [ `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x137 : Ojs.t) -> t_of_js x137
    and t_0_to_js : t_0 -> Ojs.t = fun (x136 : t) -> t_to_js x136
    type tags = [ `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x140 : Ojs.t) -> intf_of_js __tags_of_js x140
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x138 : __tags intf) -> intf_to_js __tags_to_js x138
    let (get_capture : 'tags this -> bool) =
      fun (x142 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x142) "capture")
    let (set_capture : 'tags this -> bool -> unit) =
      fun (x144 : 'tags this) ->
        fun (x145 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x144) "capture"
            (Ojs.bool_to_js x145)
    let cast_from = Obj.magic
  end
module rec
  AbortSignal:sig
                type t = [ `AbortSignal  | `EventTarget ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `AbortSignal  | `EventTarget ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `AbortSignal  | `EventTarget ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `AbortSignal ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_aborted : 'tags this -> bool
                val get_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `AbortSignal  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x148 : Ojs.t) -> t_of_js x148
    and t_0_to_js : t_0 -> Ojs.t = fun (x147 : t) -> t_to_js x147
    type tags = [ `AbortSignal  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignal ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x151 : Ojs.t) -> intf_of_js __tags_of_js x151
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x149 : __tags intf) -> intf_to_js __tags_to_js x149
    let (get_aborted : 'tags this -> bool) =
      fun (x153 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x153) "aborted")
    let (get_onabort : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x155 : 'tags this) ->
        or_null_of_js
          (fun (x157 : Ojs.t) ->
             fun ~this:(x158 : t) ->
               fun ~ev:(x159 : Event.t) ->
                 any_of_js
                   (Ojs.apply x157 [|(t_to_js x158);(Event.t_to_js x159)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x155) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x160 : 'tags this) ->
        fun (x161 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x160) "onabort"
            (or_null_to_js
               (fun (x162 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x163 : Ojs.t) ->
                       fun (x164 : Ojs.t) ->
                         any_to_js
                           (x162 ~this:(t_of_js x163)
                              ~ev:(Event.t_of_js x164)))) x161)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x174 : 'tags this) ->
        fun ~type_:(x166 : 'K) ->
          fun ~listener:(x167 : this:t -> ev:any -> any) ->
            fun ?options:(x168 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x176 = this_to_js Obj.magic x174 in
                   Ojs.call (Ojs.get_prop_ascii x176 "addEventListener")
                     "apply"
                     [|x176;((let x169 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x169 "push" [|(Obj.magic x166)|]);
                              ignore
                                (Ojs.call x169 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x172 : Ojs.t) ->
                                           fun (x173 : Ojs.t) ->
                                             any_to_js
                                               (x167 ~this:(t_of_js x172)
                                                  ~ev:(any_of_js x173))))|]);
                              (match x168 with
                               | Some x170 ->
                                   ignore
                                     (Ojs.call x169 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x170)|])
                               | None -> ());
                              x169))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x183 : 'tags this) ->
        fun ~type_:(x177 : string) ->
          fun ~listener:(x178 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x179 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x185 = this_to_js Obj.magic x183 in
                   Ojs.call (Ojs.get_prop_ascii x185 "addEventListener")
                     "apply"
                     [|x185;((let x180 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x180 "push"
                                   [|(Ojs.string_to_js x177)|]);
                              ignore
                                (Ojs.call x180 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x178)|]);
                              (match x179 with
                               | Some x181 ->
                                   ignore
                                     (Ojs.call x180 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x181)|])
                               | None -> ());
                              x180))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x194 : 'tags this) ->
        fun ~type_:(x186 : 'K) ->
          fun ~listener:(x187 : this:t -> ev:any -> any) ->
            fun ?options:(x188 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x196 = this_to_js Obj.magic x194 in
                   Ojs.call (Ojs.get_prop_ascii x196 "removeEventListener")
                     "apply"
                     [|x196;((let x189 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x189 "push" [|(Obj.magic x186)|]);
                              ignore
                                (Ojs.call x189 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x192 : Ojs.t) ->
                                           fun (x193 : Ojs.t) ->
                                             any_to_js
                                               (x187 ~this:(t_of_js x192)
                                                  ~ev:(any_of_js x193))))|]);
                              (match x188 with
                               | Some x190 ->
                                   ignore
                                     (Ojs.call x189 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x190)|])
                               | None -> ());
                              x189))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x203 : 'tags this) ->
        fun ~type_:(x197 : string) ->
          fun ~listener:(x198 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x199 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x205 = this_to_js Obj.magic x203 in
                   Ojs.call (Ojs.get_prop_ascii x205 "removeEventListener")
                     "apply"
                     [|x205;((let x200 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x200 "push"
                                   [|(Ojs.string_to_js x197)|]);
                              ignore
                                (Ojs.call x200 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x198)|]);
                              (match x199 with
                               | Some x201 ->
                                   ignore
                                     (Ojs.call x200 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x201)|])
                               | None -> ());
                              x200))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "AbortSignal")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortSignal") [||])
  end
 and
  AddEventListenerOptions:sig
                            type t =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags =
                                [ `AddEventListenerOptions 
                                | `EventListenerOptions ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `AddEventListenerOptions ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_once : 'tags this -> bool
                            val set_once : 'tags this -> bool -> unit
                            val get_passive : 'tags this -> bool
                            val set_passive : 'tags this -> bool -> unit
                            val get_signal : 'tags this -> AbortSignal.t
                            val set_signal :
                              'tags this -> AbortSignal.t -> unit
                            val cast_from : 'tags this -> t
                          end =
  struct
    type t = [ `AddEventListenerOptions  | `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x207 : Ojs.t) -> t_of_js x207
    and t_0_to_js : t_0 -> Ojs.t = fun (x206 : t) -> t_to_js x206
    type tags = [ `AddEventListenerOptions  | `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AddEventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x210 : Ojs.t) -> intf_of_js __tags_of_js x210
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x208 : __tags intf) -> intf_to_js __tags_to_js x208
    let (get_once : 'tags this -> bool) =
      fun (x212 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x212) "once")
    let (set_once : 'tags this -> bool -> unit) =
      fun (x214 : 'tags this) ->
        fun (x215 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x214) "once"
            (Ojs.bool_to_js x215)
    let (get_passive : 'tags this -> bool) =
      fun (x217 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x217) "passive")
    let (set_passive : 'tags this -> bool -> unit) =
      fun (x219 : 'tags this) ->
        fun (x220 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x219) "passive"
            (Ojs.bool_to_js x220)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x222 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x222) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x224 : 'tags this) ->
        fun (x225 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x224) "signal"
            (AbortSignal.t_to_js x225)
    let cast_from = Obj.magic
  end and
       AnonymousInterface1:sig
                             type t = private Ojs.t
                             val t_to_js : t -> Ojs.t
                             val t_of_js : Ojs.t -> t
                             val get_prototype : t -> AbortSignal.t
                             val set_prototype : t -> AbortSignal.t -> unit
                             val create : t -> AbortSignal.t
                           end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x228 : Ojs.t) -> x228
         and t_to_js : t -> Ojs.t = fun (x227 : Ojs.t) -> x227
         let (get_prototype : t -> AbortSignal.t) =
           fun (x229 : t) ->
             AbortSignal.t_of_js
               (Ojs.get_prop_ascii (t_to_js x229) "prototype")
         let (set_prototype : t -> AbortSignal.t -> unit) =
           fun (x230 : t) ->
             fun (x231 : AbortSignal.t) ->
               Ojs.set_prop_ascii (t_to_js x230) "prototype"
                 (AbortSignal.t_to_js x231)
         let (create : t -> AbortSignal.t) =
           fun (x232 : t) ->
             AbortSignal.t_of_js (Ojs.new_obj (t_to_js x232) [||])
       end and
            AnonymousInterface28:sig
                                   type t = private Ojs.t
                                   val t_to_js : t -> Ojs.t
                                   val t_of_js : Ojs.t -> t
                                   val get_prototype : t -> Event.t
                                   val set_prototype : t -> Event.t -> unit
                                   val create :
                                     t ->
                                       type_:string ->
                                         ?eventInitDict:EventInit.t ->
                                           unit -> Event.t
                                   val get_AT_TARGET : t -> float
                                   val get_BUBBLING_PHASE : t -> float
                                   val get_CAPTURING_PHASE : t -> float
                                   val get_NONE : t -> float
                                 end =
            struct
              type t = Ojs.t
              let rec t_of_js : Ojs.t -> t = fun (x234 : Ojs.t) -> x234
              and t_to_js : t -> Ojs.t = fun (x233 : Ojs.t) -> x233
              let (get_prototype : t -> Event.t) =
                fun (x235 : t) ->
                  Event.t_of_js
                    (Ojs.get_prop_ascii (t_to_js x235) "prototype")
              let (set_prototype : t -> Event.t -> unit) =
                fun (x236 : t) ->
                  fun (x237 : Event.t) ->
                    Ojs.set_prop_ascii (t_to_js x236) "prototype"
                      (Event.t_to_js x237)
              let (create :
                t ->
                  type_:string ->
                    ?eventInitDict:EventInit.t -> unit -> Event.t)
                =
                fun (x242 : t) ->
                  fun ~type_:(x238 : string) ->
                    fun ?eventInitDict:(x239 : EventInit.t option) ->
                      fun () ->
                        Event.t_of_js
                          (Ojs.new_obj_arr (t_to_js x242)
                             (let x240 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x240 "push"
                                   [|(Ojs.string_to_js x238)|]);
                              (match x239 with
                               | Some x241 ->
                                   ignore
                                     (Ojs.call x240 "push"
                                        [|(EventInit.t_to_js x241)|])
                               | None -> ());
                              x240))
              let (get_AT_TARGET : t -> float) =
                fun (x243 : t) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (t_to_js x243) "AT_TARGET")
              let (get_BUBBLING_PHASE : t -> float) =
                fun (x244 : t) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (t_to_js x244) "BUBBLING_PHASE")
              let (get_CAPTURING_PHASE : t -> float) =
                fun (x245 : t) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (t_to_js x245) "CAPTURING_PHASE")
              let (get_NONE : t -> float) =
                fun (x246 : t) ->
                  Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x246) "NONE")
            end and
                 AnonymousInterface30:sig
                                        type t = private Ojs.t
                                        val t_to_js : t -> Ojs.t
                                        val t_of_js : Ojs.t -> t
                                        val get_prototype :
                                          t -> EventTarget.t
                                        val set_prototype :
                                          t -> EventTarget.t -> unit
                                        val create : t -> EventTarget.t
                                      end =
                 struct
                   type t = Ojs.t
                   let rec t_of_js : Ojs.t -> t = fun (x248 : Ojs.t) -> x248
                   and t_to_js : t -> Ojs.t = fun (x247 : Ojs.t) -> x247
                   let (get_prototype : t -> EventTarget.t) =
                     fun (x249 : t) ->
                       EventTarget.t_of_js
                         (Ojs.get_prop_ascii (t_to_js x249) "prototype")
                   let (set_prototype : t -> EventTarget.t -> unit) =
                     fun (x250 : t) ->
                       fun (x251 : EventTarget.t) ->
                         Ojs.set_prop_ascii (t_to_js x250) "prototype"
                           (EventTarget.t_to_js x251)
                   let (create : t -> EventTarget.t) =
                     fun (x252 : t) ->
                       EventTarget.t_of_js (Ojs.new_obj (t_to_js x252) [||])
                 end and
                      Event:sig
                              type t = [ `Event ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags = [ `Event ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags = [ `Event ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags = [> `Event ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_bubbles : 'tags this -> bool
                              val get_cancelBubble : 'tags this -> bool
                              val set_cancelBubble :
                                'tags this -> bool -> unit
                              val get_cancelable : 'tags this -> bool
                              val get_composed : 'tags this -> bool
                              val get_currentTarget :
                                'tags this -> EventTarget.t or_null
                              val get_defaultPrevented : 'tags this -> bool
                              val get_eventPhase : 'tags this -> float
                              val get_isTrusted : 'tags this -> bool
                              val get_returnValue : 'tags this -> bool
                              val set_returnValue :
                                'tags this -> bool -> unit
                              val get_srcElement :
                                'tags this -> EventTarget.t or_null
                              val get_target :
                                'tags this -> EventTarget.t or_null
                              val get_timeStamp :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_type : 'tags this -> string
                              val composedPath :
                                'tags this -> EventTarget.t list
                              val initEvent :
                                'tags this ->
                                  type_:string ->
                                    ?bubbles:bool ->
                                      ?cancelable:bool -> unit -> unit
                              val preventDefault : 'tags this -> unit
                              val stopImmediatePropagation :
                                'tags this -> unit
                              val stopPropagation : 'tags this -> unit
                              val get_AT_TARGET : 'tags this -> float
                              val get_BUBBLING_PHASE : 'tags this -> float
                              val get_CAPTURING_PHASE : 'tags this -> float
                              val get_NONE : 'tags this -> float
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create :
                                type_:string ->
                                  ?eventInitDict:EventInit.t -> unit -> t
                              val at_target : unit -> float
                              val bubbling_phase : unit -> float
                              val capturing_phase : unit -> float
                              val none : unit -> float
                            end =
                      struct
                        type t = [ `Event ] intf
                        let rec t_of_js : Ojs.t -> t = Obj.magic
                        and t_to_js : t -> Ojs.t = Obj.magic
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x254 : Ojs.t) -> t_of_js x254
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x253 : t) -> t_to_js x253
                        type tags = [ `Event ]
                        type tags_0 = tags
                        type 'tags this =
                          'tags intf constraint 'tags = [> `Event ]
                        let rec this_of_js :
                          'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                          fun (type __tags) ->
                          fun (__tags_of_js : Ojs.t -> __tags) ->
                            fun (x257 : Ojs.t) ->
                              intf_of_js __tags_of_js x257
                        and this_to_js :
                          'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                          fun (type __tags) ->
                          fun (__tags_to_js : __tags -> Ojs.t) ->
                            fun (x255 : __tags intf) ->
                              intf_to_js __tags_to_js x255
                        let (get_bubbles : 'tags this -> bool) =
                          fun (x259 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x259)
                                 "bubbles")
                        let (get_cancelBubble : 'tags this -> bool) =
                          fun (x261 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x261)
                                 "cancelBubble")
                        let (set_cancelBubble : 'tags this -> bool -> unit) =
                          fun (x263 : 'tags this) ->
                            fun (x264 : bool) ->
                              Ojs.set_prop_ascii (this_to_js Obj.magic x263)
                                "cancelBubble" (Ojs.bool_to_js x264)
                        let (get_cancelable : 'tags this -> bool) =
                          fun (x266 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x266)
                                 "cancelable")
                        let (get_composed : 'tags this -> bool) =
                          fun (x268 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x268)
                                 "composed")
                        let (get_currentTarget :
                          'tags this -> EventTarget.t or_null) =
                          fun (x270 : 'tags this) ->
                            or_null_of_js EventTarget.t_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x270)
                                 "currentTarget")
                        let (get_defaultPrevented : 'tags this -> bool) =
                          fun (x273 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x273)
                                 "defaultPrevented")
                        let (get_eventPhase : 'tags this -> float) =
                          fun (x275 : 'tags this) ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x275)
                                 "eventPhase")
                        let (get_isTrusted : 'tags this -> bool) =
                          fun (x277 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x277)
                                 "isTrusted")
                        let (get_returnValue : 'tags this -> bool) =
                          fun (x279 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x279)
                                 "returnValue")
                        let (set_returnValue : 'tags this -> bool -> unit) =
                          fun (x281 : 'tags this) ->
                            fun (x282 : bool) ->
                              Ojs.set_prop_ascii (this_to_js Obj.magic x281)
                                "returnValue" (Ojs.bool_to_js x282)
                        let (get_srcElement :
                          'tags this -> EventTarget.t or_null) =
                          fun (x284 : 'tags this) ->
                            or_null_of_js EventTarget.t_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x284)
                                 "srcElement")
                        let (get_target :
                          'tags this -> EventTarget.t or_null) =
                          fun (x287 : 'tags this) ->
                            or_null_of_js EventTarget.t_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x287)
                                 "target")
                        let (get_timeStamp :
                          'tags this -> DOMHighResTimeStamp.t) =
                          fun (x290 : 'tags this) ->
                            DOMHighResTimeStamp.t_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x290)
                                 "timeStamp")
                        let (get_type : 'tags this -> string) =
                          fun (x292 : 'tags this) ->
                            Ojs.string_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x292)
                                 "type")
                        let (composedPath : 'tags this -> EventTarget.t list)
                          =
                          fun (x294 : 'tags this) ->
                            Ojs.list_of_js EventTarget.t_of_js
                              (Ojs.call (this_to_js Obj.magic x294)
                                 "composedPath" [||])
                        let (initEvent :
                          'tags this ->
                            type_:string ->
                              ?bubbles:bool ->
                                ?cancelable:bool -> unit -> unit)
                          =
                          fun (x303 : 'tags this) ->
                            fun ~type_:(x297 : string) ->
                              fun ?bubbles:(x298 : bool option) ->
                                fun ?cancelable:(x299 : bool option) ->
                                  fun () ->
                                    ignore
                                      (let x305 = this_to_js Obj.magic x303 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x305 "initEvent")
                                         "apply"
                                         [|x305;((let x300 =
                                                    Ojs.new_obj
                                                      (Ojs.get_prop_ascii
                                                         Ojs.global "Array")
                                                      [||] in
                                                  ignore
                                                    (Ojs.call x300 "push"
                                                       [|(Ojs.string_to_js
                                                            x297)|]);
                                                  (match x298 with
                                                   | Some x302 ->
                                                       ignore
                                                         (Ojs.call x300
                                                            "push"
                                                            [|(Ojs.bool_to_js
                                                                 x302)|])
                                                   | None -> ());
                                                  (match x299 with
                                                   | Some x301 ->
                                                       ignore
                                                         (Ojs.call x300
                                                            "push"
                                                            [|(Ojs.bool_to_js
                                                                 x301)|])
                                                   | None -> ());
                                                  x300))|])
                        let (preventDefault : 'tags this -> unit) =
                          fun (x306 : 'tags this) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x306)
                                 "preventDefault" [||])
                        let (stopImmediatePropagation : 'tags this -> unit) =
                          fun (x308 : 'tags this) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x308)
                                 "stopImmediatePropagation" [||])
                        let (stopPropagation : 'tags this -> unit) =
                          fun (x310 : 'tags this) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x310)
                                 "stopPropagation" [||])
                        let (get_AT_TARGET : 'tags this -> float) =
                          fun (x312 : 'tags this) ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x312)
                                 "AT_TARGET")
                        let (get_BUBBLING_PHASE : 'tags this -> float) =
                          fun (x314 : 'tags this) ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x314)
                                 "BUBBLING_PHASE")
                        let (get_CAPTURING_PHASE : 'tags this -> float) =
                          fun (x316 : 'tags this) ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x316)
                                 "CAPTURING_PHASE")
                        let (get_NONE : 'tags this -> float) =
                          fun (x318 : 'tags this) ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x318)
                                 "NONE")
                        let cast_from = Obj.magic
                        let (prototype : unit -> t) =
                          fun () ->
                            t_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "Event")
                                 "prototype")
                        let (create :
                          type_:string ->
                            ?eventInitDict:EventInit.t -> unit -> t)
                          =
                          fun ~type_:(x320 : string) ->
                            fun ?eventInitDict:(x321 : EventInit.t option) ->
                              fun () ->
                                t_of_js
                                  (Ojs.new_obj_arr
                                     (Ojs.get_prop_ascii Ojs.global "Event")
                                     (let x322 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x322 "push"
                                           [|(Ojs.string_to_js x320)|]);
                                      (match x321 with
                                       | Some x323 ->
                                           ignore
                                             (Ojs.call x322 "push"
                                                [|(EventInit.t_to_js x323)|])
                                       | None -> ());
                                      x322))
                        let (at_target : unit -> float) =
                          fun () ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "Event")
                                 "AT_TARGET")
                        let (bubbling_phase : unit -> float) =
                          fun () ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "Event")
                                 "BUBBLING_PHASE")
                        let (capturing_phase : unit -> float) =
                          fun () ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "Event")
                                 "CAPTURING_PHASE")
                        let (none : unit -> float) =
                          fun () ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "Event")
                                 "NONE")
                      end and
                           EventListener:sig
                                           type t = [ `EventListener ] intf
                                           type t_0 = t
                                           [@@@js.stop ]
                                           type tags = [ `EventListener ]
                                           type tags_0 = tags
                                           [@@@js.start ]
                                           [@@@js.implem
                                             type tags = [ `EventListener ]
                                             type tags_0 = tags]
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [> `EventListener ]
                                           val t_to_js : t -> Ojs.t
                                           val t_of_js : Ojs.t -> t
                                           val t_0_to_js : t_0 -> Ojs.t
                                           val t_0_of_js : Ojs.t -> t_0
                                           val apply :
                                             'tags this ->
                                               evt:Event.t -> unit
                                           val cast_from : 'tags this -> t
                                         end =
                           struct
                             type t = [ `EventListener ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x325 : Ojs.t) -> t_of_js x325
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x324 : t) -> t_to_js x324
                             type tags = [ `EventListener ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `EventListener ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               = fun (type __tags) ->
                               fun (__tags_of_js : Ojs.t -> __tags) ->
                                 fun (x328 : Ojs.t) ->
                                   intf_of_js __tags_of_js x328
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               = fun (type __tags) ->
                               fun (__tags_to_js : __tags -> Ojs.t) ->
                                 fun (x326 : __tags intf) ->
                                   intf_to_js __tags_to_js x326
                             let (apply : 'tags this -> evt:Event.t -> unit)
                               =
                               fun (x331 : 'tags this) ->
                                 fun ~evt:(x330 : Event.t) ->
                                   ignore
                                     (Ojs.apply (this_to_js Obj.magic x331)
                                        [|(Event.t_to_js x330)|])
                             let cast_from = Obj.magic
                           end and
                                EventListenerObject:sig
                                                      type t =
                                                        [
                                                          `EventListenerObject
                                                            ]
                                                          intf
                                                      type t_0 = t
                                                      [@@@js.stop ]
                                                      type tags =
                                                        [
                                                          `EventListenerObject
                                                            ]
                                                      type tags_0 = tags
                                                      [@@@js.start ]
                                                      [@@@js.implem
                                                        type tags =
                                                          [
                                                            `EventListenerObject
                                                              ]
                                                        type tags_0 = tags]
                                                      type 'tags this =
                                                        'tags intf constraint
                                                                    'tags =
                                                                    [>
                                                                    `EventListenerObject
                                                                    ]
                                                      val t_to_js :
                                                        t -> Ojs.t
                                                      val t_of_js :
                                                        Ojs.t -> t
                                                      val t_0_to_js :
                                                        t_0 -> Ojs.t
                                                      val t_0_of_js :
                                                        Ojs.t -> t_0
                                                      val handleEvent :
                                                        'tags this ->
                                                          object_:Event.t ->
                                                            unit
                                                      val cast_from :
                                                        'tags this -> t
                                                    end =
                                struct
                                  type t = [ `EventListenerObject ] intf
                                  let rec t_of_js : Ojs.t -> t = Obj.magic
                                  and t_to_js : t -> Ojs.t = Obj.magic
                                  type t_0 = t
                                  let rec t_0_of_js : Ojs.t -> t_0 =
                                    fun (x334 : Ojs.t) -> t_of_js x334
                                  and t_0_to_js : t_0 -> Ojs.t =
                                    fun (x333 : t) -> t_to_js x333
                                  type tags = [ `EventListenerObject ]
                                  type tags_0 = tags
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `EventListenerObject ]
                                  let rec this_of_js :
                                    'tags .
                                      (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                                    = fun (type __tags) ->
                                    fun (__tags_of_js : Ojs.t -> __tags) ->
                                      fun (x337 : Ojs.t) ->
                                        intf_of_js __tags_of_js x337
                                  and this_to_js :
                                    'tags .
                                      ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                                    = fun (type __tags) ->
                                    fun (__tags_to_js : __tags -> Ojs.t) ->
                                      fun (x335 : __tags intf) ->
                                        intf_to_js __tags_to_js x335
                                  let (handleEvent :
                                    'tags this -> object_:Event.t -> unit) =
                                    fun (x340 : 'tags this) ->
                                      fun ~object_:(x339 : Event.t) ->
                                        ignore
                                          (Ojs.call
                                             (this_to_js Obj.magic x340)
                                             "handleEvent"
                                             [|(Event.t_to_js x339)|])
                                  let cast_from = Obj.magic
                                end and
                                     EventListenerOrEventListenerObject:
                                     sig
                                       type t =
                                         (EventListener.t,
                                           EventListenerObject.t) union2
                                       type t_0 = t
                                       val t_to_js : t -> Ojs.t
                                       val t_of_js : Ojs.t -> t
                                       val t_0_to_js : t_0 -> Ojs.t
                                       val t_0_of_js : Ojs.t -> t_0
                                     end =
                                     struct
                                       type t =
                                         (EventListener.t,
                                           EventListenerObject.t) union2
                                       let rec t_of_js : Ojs.t -> t =
                                         fun (x345 : Ojs.t) ->
                                           union2_of_js EventListener.t_of_js
                                             EventListenerObject.t_of_js x345
                                       and t_to_js : t -> Ojs.t =
                                         fun
                                           (x342 :
                                             (EventListener.t,
                                               EventListenerObject.t) union2)
                                           ->
                                           union2_to_js EventListener.t_to_js
                                             EventListenerObject.t_to_js x342
                                       type t_0 = t
                                       let rec t_0_of_js : Ojs.t -> t_0 =
                                         fun (x349 : Ojs.t) -> t_of_js x349
                                       and t_0_to_js : t_0 -> Ojs.t =
                                         fun (x348 : t) -> t_to_js x348
                                     end and
                                          EventTarget:sig
                                                        type t =
                                                          [ `EventTarget ]
                                                            intf
                                                        type t_0 = t
                                                        [@@@js.stop ]
                                                        type tags =
                                                          [ `EventTarget ]
                                                        type tags_0 = tags
                                                        [@@@js.start ]
                                                        [@@@js.implem
                                                          type tags =
                                                            [ `EventTarget ]
                                                          type tags_0 = tags]
                                                        type 'tags this =
                                                          'tags intf
                                                                    constraint
                                                                    'tags =
                                                                    [>
                                                                    `EventTarget
                                                                    ]
                                                        val t_to_js :
                                                          t -> Ojs.t
                                                        val t_of_js :
                                                          Ojs.t -> t
                                                        val t_0_to_js :
                                                          t_0 -> Ojs.t
                                                        val t_0_of_js :
                                                          Ojs.t -> t_0
                                                        val addEventListener
                                                          :
                                                          'tags this ->
                                                            type_:string ->
                                                              callback:EventListenerOrEventListenerObject.t
                                                                or_null ->
                                                                ?options:AddEventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val dispatchEvent :
                                                          'tags this ->
                                                            event:Event.t ->
                                                              bool
                                                        val
                                                          removeEventListener
                                                          :
                                                          'tags this ->
                                                            type_:string ->
                                                              callback:EventListenerOrEventListenerObject.t
                                                                or_null ->
                                                                ?options:EventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val cast_from :
                                                          'tags this -> t
                                                        val prototype :
                                                          unit -> t
                                                        val create :
                                                          unit -> t
                                                      end =
                                          struct
                                            type t = [ `EventTarget ] intf
                                            let rec t_of_js : Ojs.t -> t =
                                              Obj.magic
                                            and t_to_js : t -> Ojs.t =
                                              Obj.magic
                                            type t_0 = t
                                            let rec t_0_of_js : Ojs.t -> t_0
                                              =
                                              fun (x351 : Ojs.t) ->
                                                t_of_js x351
                                            and t_0_to_js : t_0 -> Ojs.t =
                                              fun (x350 : t) -> t_to_js x350
                                            type tags = [ `EventTarget ]
                                            type tags_0 = tags
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [> `EventTarget ]
                                            let rec this_of_js :
                                              'tags .
                                                (Ojs.t -> 'tags) ->
                                                  Ojs.t -> 'tags this
                                              = fun (type __tags) ->
                                              fun
                                                (__tags_of_js :
                                                  Ojs.t -> __tags)
                                                ->
                                                fun (x354 : Ojs.t) ->
                                                  intf_of_js __tags_of_js
                                                    x354
                                            and this_to_js :
                                              'tags .
                                                ('tags -> Ojs.t) ->
                                                  'tags this -> Ojs.t
                                              = fun (type __tags) ->
                                              fun
                                                (__tags_to_js :
                                                  __tags -> Ojs.t)
                                                ->
                                                fun (x352 : __tags intf) ->
                                                  intf_to_js __tags_to_js
                                                    x352
                                            let (addEventListener :
                                              'tags this ->
                                                type_:string ->
                                                  callback:EventListenerOrEventListenerObject.t
                                                    or_null ->
                                                    ?options:AddEventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x363 : 'tags this) ->
                                                fun ~type_:(x356 : string) ->
                                                  fun
                                                    ~callback:(x357 :
                                                                EventListenerOrEventListenerObject.t
                                                                  or_null)
                                                    ->
                                                    fun
                                                      ?options:(x358 :
                                                                 AddEventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x365 =
                                                             this_to_js
                                                               Obj.magic x363 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x365
                                                                "addEventListener")
                                                             "apply"
                                                             [|x365;((
                                                               let x359 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x359
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x356)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x359
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x357)|]);
                                                               (match x358
                                                                with
                                                                | Some x360
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x359
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x360)|])
                                                                | None -> ());
                                                               x359))|])
                                            let (dispatchEvent :
                                              'tags this ->
                                                event:Event.t -> bool)
                                              =
                                              fun (x367 : 'tags this) ->
                                                fun ~event:(x366 : Event.t)
                                                  ->
                                                  Ojs.bool_of_js
                                                    (Ojs.call
                                                       (this_to_js Obj.magic
                                                          x367)
                                                       "dispatchEvent"
                                                       [|(Event.t_to_js x366)|])
                                            let (removeEventListener :
                                              'tags this ->
                                                type_:string ->
                                                  callback:EventListenerOrEventListenerObject.t
                                                    or_null ->
                                                    ?options:EventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x376 : 'tags this) ->
                                                fun ~type_:(x369 : string) ->
                                                  fun
                                                    ~callback:(x370 :
                                                                EventListenerOrEventListenerObject.t
                                                                  or_null)
                                                    ->
                                                    fun
                                                      ?options:(x371 :
                                                                 EventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x378 =
                                                             this_to_js
                                                               Obj.magic x376 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x378
                                                                "removeEventListener")
                                                             "apply"
                                                             [|x378;((
                                                               let x372 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x372
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x369)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x372
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x370)|]);
                                                               (match x371
                                                                with
                                                                | Some x373
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x372
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x373)|])
                                                                | None -> ());
                                                               x372))|])
                                            let cast_from = Obj.magic
                                            let (prototype : unit -> t) =
                                              fun () ->
                                                t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global
                                                        "EventTarget")
                                                     "prototype")
                                            let (create : unit -> t) =
                                              fun () ->
                                                t_of_js
                                                  (Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global
                                                        "EventTarget") 
                                                     [||])
                                          end
module rec
  AnonymousInterface70:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Performance.t
                         val set_prototype : t -> Performance.t -> unit
                         val create : t -> Performance.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x380 : Ojs.t) -> x380
    and t_to_js : t -> Ojs.t = fun (x379 : Ojs.t) -> x379
    let (get_prototype : t -> Performance.t) =
      fun (x381 : t) ->
        Performance.t_of_js (Ojs.get_prop_ascii (t_to_js x381) "prototype")
    let (set_prototype : t -> Performance.t -> unit) =
      fun (x382 : t) ->
        fun (x383 : Performance.t) ->
          Ojs.set_prop_ascii (t_to_js x382) "prototype"
            (Performance.t_to_js x383)
    let (create : t -> Performance.t) =
      fun (x384 : t) -> Performance.t_of_js (Ojs.new_obj (t_to_js x384) [||])
  end
 and
  Performance:sig
                type t = [ `EventTarget  | `Performance ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `EventTarget  | `Performance ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `EventTarget  | `Performance ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `Performance ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_onresourcetimingbufferfull :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onresourcetimingbufferfull :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_timeOrigin : 'tags this -> DOMHighResTimeStamp.t
                val clearMarks :
                  'tags this -> ?markName:string -> unit -> unit
                val clearMeasures :
                  'tags this -> ?measureName:string -> unit -> unit
                val clearResourceTimings : 'tags this -> unit
                val getEntries : 'tags this -> PerformanceEntryList.t
                val getEntriesByName :
                  'tags this ->
                    name:string ->
                      ?type_:string -> unit -> PerformanceEntryList.t
                val getEntriesByType :
                  'tags this -> type_:string -> PerformanceEntryList.t
                val mark :
                  'tags this ->
                    markName:string ->
                      ?markOptions:PerformanceMarkOptions.t ->
                        unit -> PerformanceMark.t
                val measure :
                  'tags this ->
                    measureName:string ->
                      ?startOrMeasureOptions:PerformanceMeasureOptions.t
                        or_string ->
                        ?endMark:string -> unit -> PerformanceMeasure.t
                val now : 'tags this -> DOMHighResTimeStamp.t
                val setResourceTimingBufferSize :
                  'tags this -> maxSize:float -> unit
                val toJSON : 'tags this -> any
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `EventTarget  | `Performance ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x386 : Ojs.t) -> t_of_js x386
    and t_0_to_js : t_0 -> Ojs.t = fun (x385 : t) -> t_to_js x385
    type tags = [ `EventTarget  | `Performance ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Performance ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x389 : Ojs.t) -> intf_of_js __tags_of_js x389
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x387 : __tags intf) -> intf_to_js __tags_to_js x387
    let (get_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x391 : 'tags this) ->
        or_null_of_js
          (fun (x393 : Ojs.t) ->
             fun ~this:(x394 : t) ->
               fun ~ev:(x395 : Event.t) ->
                 any_of_js
                   (Ojs.apply x393 [|(t_to_js x394);(Event.t_to_js x395)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x391)
             "onresourcetimingbufferfull")
    let (set_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x396 : 'tags this) ->
        fun (x397 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x396)
            "onresourcetimingbufferfull"
            (or_null_to_js
               (fun (x398 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x399 : Ojs.t) ->
                       fun (x400 : Ojs.t) ->
                         any_to_js
                           (x398 ~this:(t_of_js x399)
                              ~ev:(Event.t_of_js x400)))) x397)
    let (get_timeOrigin : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x402 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x402) "timeOrigin")
    let (clearMarks : 'tags this -> ?markName:string -> unit -> unit) =
      fun (x407 : 'tags this) ->
        fun ?markName:(x404 : string option) ->
          fun () ->
            ignore
              (let x409 = this_to_js Obj.magic x407 in
               Ojs.call (Ojs.get_prop_ascii x409 "clearMarks") "apply"
                 [|x409;((let x405 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x404 with
                           | Some x406 ->
                               ignore
                                 (Ojs.call x405 "push"
                                    [|(Ojs.string_to_js x406)|])
                           | None -> ());
                          x405))|])
    let (clearMeasures : 'tags this -> ?measureName:string -> unit -> unit) =
      fun (x413 : 'tags this) ->
        fun ?measureName:(x410 : string option) ->
          fun () ->
            ignore
              (let x415 = this_to_js Obj.magic x413 in
               Ojs.call (Ojs.get_prop_ascii x415 "clearMeasures") "apply"
                 [|x415;((let x411 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x410 with
                           | Some x412 ->
                               ignore
                                 (Ojs.call x411 "push"
                                    [|(Ojs.string_to_js x412)|])
                           | None -> ());
                          x411))|])
    let (clearResourceTimings : 'tags this -> unit) =
      fun (x416 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x416) "clearResourceTimings" [||])
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x418 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x418) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x424 : 'tags this) ->
        fun ~name:(x420 : string) ->
          fun ?type_:(x421 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x426 = this_to_js Obj.magic x424 in
                 Ojs.call (Ojs.get_prop_ascii x426 "getEntriesByName")
                   "apply"
                   [|x426;((let x422 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x422 "push"
                                 [|(Ojs.string_to_js x420)|]);
                            (match x421 with
                             | Some x423 ->
                                 ignore
                                   (Ojs.call x422 "push"
                                      [|(Ojs.string_to_js x423)|])
                             | None -> ());
                            x422))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x428 : 'tags this) ->
        fun ~type_:(x427 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x428) "getEntriesByType"
               [|(Ojs.string_to_js x427)|])
    let (mark :
      'tags this ->
        markName:string ->
          ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun (x434 : 'tags this) ->
        fun ~markName:(x430 : string) ->
          fun ?markOptions:(x431 : PerformanceMarkOptions.t option) ->
            fun () ->
              PerformanceMark.t_of_js
                (let x436 = this_to_js Obj.magic x434 in
                 Ojs.call (Ojs.get_prop_ascii x436 "mark") "apply"
                   [|x436;((let x432 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x432 "push"
                                 [|(Ojs.string_to_js x430)|]);
                            (match x431 with
                             | Some x433 ->
                                 ignore
                                   (Ojs.call x432 "push"
                                      [|(PerformanceMarkOptions.t_to_js x433)|])
                             | None -> ());
                            x432))|])
    let (measure :
      'tags this ->
        measureName:string ->
          ?startOrMeasureOptions:PerformanceMeasureOptions.t or_string ->
            ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun (x444 : 'tags this) ->
        fun ~measureName:(x437 : string) ->
          fun
            ?startOrMeasureOptions:(x438 :
                                     PerformanceMeasureOptions.t or_string
                                       option)
            ->
            fun ?endMark:(x439 : string option) ->
              fun () ->
                PerformanceMeasure.t_of_js
                  (let x446 = this_to_js Obj.magic x444 in
                   Ojs.call (Ojs.get_prop_ascii x446 "measure") "apply"
                     [|x446;((let x440 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x440 "push"
                                   [|(Ojs.string_to_js x437)|]);
                              (match x438 with
                               | Some x442 ->
                                   ignore
                                     (Ojs.call x440 "push"
                                        [|(or_string_to_js
                                             PerformanceMeasureOptions.t_to_js
                                             x442)|])
                               | None -> ());
                              (match x439 with
                               | Some x441 ->
                                   ignore
                                     (Ojs.call x440 "push"
                                        [|(Ojs.string_to_js x441)|])
                               | None -> ());
                              x440))|])
    let (now : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x447 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (this_to_js Obj.magic x447) "now" [||])
    let (setResourceTimingBufferSize : 'tags this -> maxSize:float -> unit) =
      fun (x450 : 'tags this) ->
        fun ~maxSize:(x449 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x450)
               "setResourceTimingBufferSize" [|(Ojs.float_to_js x449)|])
    let (toJSON : 'tags this -> any) =
      fun (x452 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x452) "toJSON" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x462 : 'tags this) ->
        fun ~type_:(x454 : 'K) ->
          fun ~listener:(x455 : this:t -> ev:any -> any) ->
            fun ?options:(x456 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x464 = this_to_js Obj.magic x462 in
                   Ojs.call (Ojs.get_prop_ascii x464 "addEventListener")
                     "apply"
                     [|x464;((let x457 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x457 "push" [|(Obj.magic x454)|]);
                              ignore
                                (Ojs.call x457 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x460 : Ojs.t) ->
                                           fun (x461 : Ojs.t) ->
                                             any_to_js
                                               (x455 ~this:(t_of_js x460)
                                                  ~ev:(any_of_js x461))))|]);
                              (match x456 with
                               | Some x458 ->
                                   ignore
                                     (Ojs.call x457 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x458)|])
                               | None -> ());
                              x457))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x471 : 'tags this) ->
        fun ~type_:(x465 : string) ->
          fun ~listener:(x466 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x467 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x473 = this_to_js Obj.magic x471 in
                   Ojs.call (Ojs.get_prop_ascii x473 "addEventListener")
                     "apply"
                     [|x473;((let x468 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x468 "push"
                                   [|(Ojs.string_to_js x465)|]);
                              ignore
                                (Ojs.call x468 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x466)|]);
                              (match x467 with
                               | Some x469 ->
                                   ignore
                                     (Ojs.call x468 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x469)|])
                               | None -> ());
                              x468))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x482 : 'tags this) ->
        fun ~type_:(x474 : 'K) ->
          fun ~listener:(x475 : this:t -> ev:any -> any) ->
            fun ?options:(x476 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x484 = this_to_js Obj.magic x482 in
                   Ojs.call (Ojs.get_prop_ascii x484 "removeEventListener")
                     "apply"
                     [|x484;((let x477 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x477 "push" [|(Obj.magic x474)|]);
                              ignore
                                (Ojs.call x477 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x480 : Ojs.t) ->
                                           fun (x481 : Ojs.t) ->
                                             any_to_js
                                               (x475 ~this:(t_of_js x480)
                                                  ~ev:(any_of_js x481))))|]);
                              (match x476 with
                               | Some x478 ->
                                   ignore
                                     (Ojs.call x477 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x478)|])
                               | None -> ());
                              x477))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x491 : 'tags this) ->
        fun ~type_:(x485 : string) ->
          fun ~listener:(x486 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x487 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x493 = this_to_js Obj.magic x491 in
                   Ojs.call (Ojs.get_prop_ascii x493 "removeEventListener")
                     "apply"
                     [|x493;((let x488 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x488 "push"
                                   [|(Ojs.string_to_js x485)|]);
                              ignore
                                (Ojs.call x488 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x486)|]);
                              (match x487 with
                               | Some x489 ->
                                   ignore
                                     (Ojs.call x488 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x489)|])
                               | None -> ());
                              x488))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Performance")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Performance") [||])
  end
module PerformanceStatic =
  struct
    let (onresourcetimingbufferfull :
      unit -> (this:Performance.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x494 : Ojs.t) ->
             fun ~this:(x495 : Performance.t) ->
               fun ~ev:(x496 : Event.t) ->
                 any_of_js
                   (Ojs.apply x494
                      [|(Performance.t_to_js x495);(Event.t_to_js x496)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "onresourcetimingbufferfull")
    let (timeOrigin : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "timeOrigin")
    let (clearMarks : ?markName:string -> unit -> unit) =
      fun ?markName:(x497 : string option) ->
        fun () ->
          ignore
            (let x500 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x500 "clearMarks") "apply"
               [|x500;((let x498 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x497 with
                         | Some x499 ->
                             ignore
                               (Ojs.call x498 "push"
                                  [|(Ojs.string_to_js x499)|])
                         | None -> ());
                        x498))|])
    let (clearMeasures : ?measureName:string -> unit -> unit) =
      fun ?measureName:(x501 : string option) ->
        fun () ->
          ignore
            (let x504 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x504 "clearMeasures") "apply"
               [|x504;((let x502 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x501 with
                         | Some x503 ->
                             ignore
                               (Ojs.call x502 "push"
                                  [|(Ojs.string_to_js x503)|])
                         | None -> ());
                        x502))|])
    let (clearResourceTimings : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "clearResourceTimings" [||])
    let (getEntries : unit -> PerformanceEntryList.t) =
      fun () ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntries" [||])
    let (getEntriesByName :
      name:string -> ?type_:string -> unit -> PerformanceEntryList.t) =
      fun ~name:(x505 : string) ->
        fun ?type_:(x506 : string option) ->
          fun () ->
            PerformanceEntryList.t_of_js
              (let x509 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x509 "getEntriesByName") "apply"
                 [|x509;((let x507 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x507 "push" [|(Ojs.string_to_js x505)|]);
                          (match x506 with
                           | Some x508 ->
                               ignore
                                 (Ojs.call x507 "push"
                                    [|(Ojs.string_to_js x508)|])
                           | None -> ());
                          x507))|])
    let (getEntriesByType : string -> PerformanceEntryList.t) =
      fun (x510 : string) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntriesByType" [|(Ojs.string_to_js x510)|])
    let (mark :
      markName:string ->
        ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun ~markName:(x511 : string) ->
        fun ?markOptions:(x512 : PerformanceMarkOptions.t option) ->
          fun () ->
            PerformanceMark.t_of_js
              (let x515 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x515 "mark") "apply"
                 [|x515;((let x513 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x513 "push" [|(Ojs.string_to_js x511)|]);
                          (match x512 with
                           | Some x514 ->
                               ignore
                                 (Ojs.call x513 "push"
                                    [|(PerformanceMarkOptions.t_to_js x514)|])
                           | None -> ());
                          x513))|])
    let (measure :
      measureName:string ->
        ?startOrMeasureOptions:PerformanceMeasureOptions.t or_string ->
          ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun ~measureName:(x516 : string) ->
        fun
          ?startOrMeasureOptions:(x517 :
                                   PerformanceMeasureOptions.t or_string
                                     option)
          ->
          fun ?endMark:(x518 : string option) ->
            fun () ->
              PerformanceMeasure.t_of_js
                (let x523 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x523 "measure") "apply"
                   [|x523;((let x519 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x519 "push"
                                 [|(Ojs.string_to_js x516)|]);
                            (match x517 with
                             | Some x521 ->
                                 ignore
                                   (Ojs.call x519 "push"
                                      [|(or_string_to_js
                                           PerformanceMeasureOptions.t_to_js
                                           x521)|])
                             | None -> ());
                            (match x518 with
                             | Some x520 ->
                                 ignore
                                   (Ojs.call x519 "push"
                                      [|(Ojs.string_to_js x520)|])
                             | None -> ());
                            x519))|])
    let (now : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "now" [||])
    let (setResourceTimingBufferSize : float -> unit) =
      fun (x524 : float) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "setResourceTimingBufferSize" [|(Ojs.float_to_js x524)|])
    let (toJSON : unit -> any) =
      fun () ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "toJSON"
             [||])
    let (addEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x525 : 'K) ->
        fun ~listener:(x526 : this:Performance.t -> ev:any -> any) ->
          fun ?options:(x527 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x533 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x533 "addEventListener")
                   "apply"
                   [|x533;((let x528 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x528 "push" [|(Obj.magic x525)|]);
                            ignore
                              (Ojs.call x528 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x531 : Ojs.t) ->
                                         fun (x532 : Ojs.t) ->
                                           any_to_js
                                             (x526
                                                ~this:(Performance.t_of_js
                                                         x531)
                                                ~ev:(any_of_js x532))))|]);
                            (match x527 with
                             | Some x529 ->
                                 ignore
                                   (Ojs.call x528 "push"
                                      [|(or_boolean_to_js
                                           AddEventListenerOptions.t_to_js
                                           x529)|])
                             | None -> ());
                            x528))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x534 : string) ->
        fun ~listener:(x535 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x536 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x540 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x540 "addEventListener")
                   "apply"
                   [|x540;((let x537 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x537 "push"
                                 [|(Ojs.string_to_js x534)|]);
                            ignore
                              (Ojs.call x537 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x535)|]);
                            (match x536 with
                             | Some x538 ->
                                 ignore
                                   (Ojs.call x537 "push"
                                      [|(or_boolean_to_js
                                           AddEventListenerOptions.t_to_js
                                           x538)|])
                             | None -> ());
                            x537))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x541 : 'K) ->
        fun ~listener:(x542 : this:Performance.t -> ev:any -> any) ->
          fun ?options:(x543 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x549 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x549 "removeEventListener")
                   "apply"
                   [|x549;((let x544 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x544 "push" [|(Obj.magic x541)|]);
                            ignore
                              (Ojs.call x544 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x547 : Ojs.t) ->
                                         fun (x548 : Ojs.t) ->
                                           any_to_js
                                             (x542
                                                ~this:(Performance.t_of_js
                                                         x547)
                                                ~ev:(any_of_js x548))))|]);
                            (match x543 with
                             | Some x545 ->
                                 ignore
                                   (Ojs.call x544 "push"
                                      [|(or_boolean_to_js
                                           EventListenerOptions.t_to_js x545)|])
                             | None -> ());
                            x544))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x550 : string) ->
        fun ~listener:(x551 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x552 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x556 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x556 "removeEventListener")
                   "apply"
                   [|x556;((let x553 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x553 "push"
                                 [|(Ojs.string_to_js x550)|]);
                            ignore
                              (Ojs.call x553 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x551)|]);
                            (match x552 with
                             | Some x554 ->
                                 ignore
                                   (Ojs.call x553 "push"
                                      [|(or_boolean_to_js
                                           EventListenerOptions.t_to_js x554)|])
                             | None -> ());
                            x553))|])
  end
module StorageEstimate =
  struct
    type t = [ `StorageEstimate ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x558 : Ojs.t) -> t_of_js x558
    and t_0_to_js : t_0 -> Ojs.t = fun (x557 : t) -> t_to_js x557
    type tags = [ `StorageEstimate ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageEstimate ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x561 : Ojs.t) -> intf_of_js __tags_of_js x561
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x559 : __tags intf) -> intf_to_js __tags_to_js x559
    let (get_quota : 'tags this -> float) =
      fun (x563 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x563) "quota")
    let (set_quota : 'tags this -> float -> unit) =
      fun (x565 : 'tags this) ->
        fun (x566 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x565) "quota"
            (Ojs.float_to_js x566)
    let (get_usage : 'tags this -> float) =
      fun (x568 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x568) "usage")
    let (set_usage : 'tags this -> float -> unit) =
      fun (x570 : 'tags this) ->
        fun (x571 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x570) "usage"
            (Ojs.float_to_js x571)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface99:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> StorageManager.t
                         val set_prototype : t -> StorageManager.t -> unit
                         val create : t -> StorageManager.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x574 : Ojs.t) -> x574
    and t_to_js : t -> Ojs.t = fun (x573 : Ojs.t) -> x573
    let (get_prototype : t -> StorageManager.t) =
      fun (x575 : t) ->
        StorageManager.t_of_js
          (Ojs.get_prop_ascii (t_to_js x575) "prototype")
    let (set_prototype : t -> StorageManager.t -> unit) =
      fun (x576 : t) ->
        fun (x577 : StorageManager.t) ->
          Ojs.set_prop_ascii (t_to_js x576) "prototype"
            (StorageManager.t_to_js x577)
    let (create : t -> StorageManager.t) =
      fun (x578 : t) ->
        StorageManager.t_of_js (Ojs.new_obj (t_to_js x578) [||])
  end
 and
  StorageManager:sig
                   type t = [ `StorageManager ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `StorageManager ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `StorageManager ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `StorageManager ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val estimate : 'tags this -> StorageEstimate.t Promise.t_1
                   val persisted : 'tags this -> bool Promise.t_1
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                 end =
  struct
    type t = [ `StorageManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x580 : Ojs.t) -> t_of_js x580
    and t_0_to_js : t_0 -> Ojs.t = fun (x579 : t) -> t_to_js x579
    type tags = [ `StorageManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x583 : Ojs.t) -> intf_of_js __tags_of_js x583
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x581 : __tags intf) -> intf_to_js __tags_to_js x581
    let (estimate : 'tags this -> StorageEstimate.t Promise.t_1) =
      fun (x585 : 'tags this) ->
        Promise.t_1_of_js StorageEstimate.t_of_js
          (Ojs.call (this_to_js Obj.magic x585) "estimate" [||])
    let (persisted : 'tags this -> bool Promise.t_1) =
      fun (x588 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x588) "persisted" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "StorageManager") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "StorageManager") [||])
  end
module NavigatorStorage =
  struct
    type t = [ `NavigatorStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x592 : Ojs.t) -> t_of_js x592
    and t_0_to_js : t_0 -> Ojs.t = fun (x591 : t) -> t_to_js x591
    type tags = [ `NavigatorStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x595 : Ojs.t) -> intf_of_js __tags_of_js x595
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x593 : __tags intf) -> intf_to_js __tags_to_js x593
    let (get_storage : 'tags this -> StorageManager.t) =
      fun (x597 : 'tags this) ->
        StorageManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x597) "storage")
    let cast_from = Obj.magic
  end
module NavigatorOnLine =
  struct
    type t = [ `NavigatorOnLine ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x600 : Ojs.t) -> t_of_js x600
    and t_0_to_js : t_0 -> Ojs.t = fun (x599 : t) -> t_to_js x599
    type tags = [ `NavigatorOnLine ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorOnLine ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x603 : Ojs.t) -> intf_of_js __tags_of_js x603
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x601 : __tags intf) -> intf_to_js __tags_to_js x601
    let (get_onLine : 'tags this -> bool) =
      fun (x605 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x605) "onLine")
    let cast_from = Obj.magic
  end
module ConnectionType =
  struct
    type t =
      [ `L_s46_bluetooth  | `L_s47_cellular  | `L_s68_ethernet 
      | `L_s116_mixed  | `L_s128_none  | `L_s142_other  | `L_s196_unknown 
      | `L_s207_wifi ]
    let rec t_of_js : Ojs.t -> t =
      fun (x608 : Ojs.t) ->
        let x609 = x608 in
        match Ojs.string_of_js x609 with
        | "bluetooth" -> `L_s46_bluetooth
        | "cellular" -> `L_s47_cellular
        | "ethernet" -> `L_s68_ethernet
        | "mixed" -> `L_s116_mixed
        | "none" -> `L_s128_none
        | "other" -> `L_s142_other
        | "unknown" -> `L_s196_unknown
        | "wifi" -> `L_s207_wifi
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x607 :
          [ `L_s46_bluetooth  | `L_s47_cellular  | `L_s68_ethernet 
          | `L_s116_mixed  | `L_s128_none  | `L_s142_other 
          | `L_s196_unknown  | `L_s207_wifi ])
        ->
        match x607 with
        | `L_s46_bluetooth -> Ojs.string_to_js "bluetooth"
        | `L_s47_cellular -> Ojs.string_to_js "cellular"
        | `L_s68_ethernet -> Ojs.string_to_js "ethernet"
        | `L_s116_mixed -> Ojs.string_to_js "mixed"
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s142_other -> Ojs.string_to_js "other"
        | `L_s196_unknown -> Ojs.string_to_js "unknown"
        | `L_s207_wifi -> Ojs.string_to_js "wifi"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x611 : Ojs.t) -> t_of_js x611
    and t_0_to_js : t_0 -> Ojs.t = fun (x610 : t) -> t_to_js x610
  end
module rec
  AnonymousInterface66:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> NetworkInformation.t
                         val set_prototype :
                           t -> NetworkInformation.t -> unit
                         val create : t -> NetworkInformation.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x613 : Ojs.t) -> x613
    and t_to_js : t -> Ojs.t = fun (x612 : Ojs.t) -> x612
    let (get_prototype : t -> NetworkInformation.t) =
      fun (x614 : t) ->
        NetworkInformation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x614) "prototype")
    let (set_prototype : t -> NetworkInformation.t -> unit) =
      fun (x615 : t) ->
        fun (x616 : NetworkInformation.t) ->
          Ojs.set_prop_ascii (t_to_js x615) "prototype"
            (NetworkInformation.t_to_js x616)
    let (create : t -> NetworkInformation.t) =
      fun (x617 : t) ->
        NetworkInformation.t_of_js (Ojs.new_obj (t_to_js x617) [||])
  end
 and
  NetworkInformation:sig
                       type t = [ `EventTarget  | `NetworkInformation ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `EventTarget  | `NetworkInformation ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `EventTarget  | `NetworkInformation ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags =
                                     [> `NetworkInformation ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_type : 'tags this -> ConnectionType.t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
  struct
    type t = [ `EventTarget  | `NetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x619 : Ojs.t) -> t_of_js x619
    and t_0_to_js : t_0 -> Ojs.t = fun (x618 : t) -> t_to_js x618
    type tags = [ `EventTarget  | `NetworkInformation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x622 : Ojs.t) -> intf_of_js __tags_of_js x622
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x620 : __tags intf) -> intf_to_js __tags_to_js x620
    let (get_type : 'tags this -> ConnectionType.t) =
      fun (x624 : 'tags this) ->
        ConnectionType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x624) "type")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NetworkInformation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NetworkInformation")
             [||])
  end
module NavigatorNetworkInformation =
  struct
    type t = [ `NavigatorNetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x627 : Ojs.t) -> t_of_js x627
    and t_0_to_js : t_0 -> Ojs.t = fun (x626 : t) -> t_to_js x626
    type tags = [ `NavigatorNetworkInformation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorNetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x630 : Ojs.t) -> intf_of_js __tags_of_js x630
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x628 : __tags intf) -> intf_to_js __tags_to_js x628
    let (get_connection : 'tags this -> NetworkInformation.t) =
      fun (x632 : 'tags this) ->
        NetworkInformation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x632) "connection")
    let cast_from = Obj.magic
  end
module NavigatorLanguage =
  struct
    type t = [ `NavigatorLanguage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x635 : Ojs.t) -> t_of_js x635
    and t_0_to_js : t_0 -> Ojs.t = fun (x634 : t) -> t_to_js x634
    type tags = [ `NavigatorLanguage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLanguage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x638 : Ojs.t) -> intf_of_js __tags_of_js x638
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x636 : __tags intf) -> intf_to_js __tags_to_js x636
    let (get_language : 'tags this -> string) =
      fun (x640 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x640) "language")
    let (get_languages : 'tags this -> string list) =
      fun (x642 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x642) "languages")
    let cast_from = Obj.magic
  end
module NavigatorID =
  struct
    type t = [ `NavigatorID ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x646 : Ojs.t) -> t_of_js x646
    and t_0_to_js : t_0 -> Ojs.t = fun (x645 : t) -> t_to_js x645
    type tags = [ `NavigatorID ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorID ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x649 : Ojs.t) -> intf_of_js __tags_of_js x649
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x647 : __tags intf) -> intf_to_js __tags_to_js x647
    let (get_appCodeName : 'tags this -> string) =
      fun (x651 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x651) "appCodeName")
    let (get_appName : 'tags this -> string) =
      fun (x653 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x653) "appName")
    let (get_appVersion : 'tags this -> string) =
      fun (x655 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x655) "appVersion")
    let (get_platform : 'tags this -> string) =
      fun (x657 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x657) "platform")
    let (get_product : 'tags this -> string) =
      fun (x659 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x659) "product")
    let (get_userAgent : 'tags this -> string) =
      fun (x661 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x661) "userAgent")
    let cast_from = Obj.magic
  end
module NavigatorConcurrentHardware =
  struct
    type t = [ `NavigatorConcurrentHardware ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x664 : Ojs.t) -> t_of_js x664
    and t_0_to_js : t_0 -> Ojs.t = fun (x663 : t) -> t_to_js x663
    type tags = [ `NavigatorConcurrentHardware ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorConcurrentHardware ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x667 : Ojs.t) -> intf_of_js __tags_of_js x667
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x665 : __tags intf) -> intf_to_js __tags_to_js x665
    let (get_hardwareConcurrency : 'tags this -> float) =
      fun (x669 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x669)
             "hardwareConcurrency")
    let cast_from = Obj.magic
  end
module MediaEncodingType =
  struct
    type t = [ `L_s165_record  | `L_s206_webrtc ]
    let rec t_of_js : Ojs.t -> t =
      fun (x672 : Ojs.t) ->
        let x673 = x672 in
        match Ojs.string_of_js x673 with
        | "record" -> `L_s165_record
        | "webrtc" -> `L_s206_webrtc
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x671 : [ `L_s165_record  | `L_s206_webrtc ]) ->
        match x671 with
        | `L_s165_record -> Ojs.string_to_js "record"
        | `L_s206_webrtc -> Ojs.string_to_js "webrtc"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x675 : Ojs.t) -> t_of_js x675
    and t_0_to_js : t_0 -> Ojs.t = fun (x674 : t) -> t_to_js x674
  end
module TransferFunction =
  struct
    type t = [ `L_s86_hlg  | `L_s151_pq  | `L_s183_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x677 : Ojs.t) ->
        let x678 = x677 in
        match Ojs.string_of_js x678 with
        | "hlg" -> `L_s86_hlg
        | "pq" -> `L_s151_pq
        | "srgb" -> `L_s183_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x676 : [ `L_s86_hlg  | `L_s151_pq  | `L_s183_srgb ]) ->
        match x676 with
        | `L_s86_hlg -> Ojs.string_to_js "hlg"
        | `L_s151_pq -> Ojs.string_to_js "pq"
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x680 : Ojs.t) -> t_of_js x680
    and t_0_to_js : t_0 -> Ojs.t = fun (x679 : t) -> t_to_js x679
  end
module HdrMetadataType =
  struct
    type t =
      [ `L_s179_smpteSt2086  | `L_s180_smpteSt2094_10 
      | `L_s181_smpteSt2094_40 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x682 : Ojs.t) ->
        let x683 = x682 in
        match Ojs.string_of_js x683 with
        | "smpteSt2086" -> `L_s179_smpteSt2086
        | "smpteSt2094-10" -> `L_s180_smpteSt2094_10
        | "smpteSt2094-40" -> `L_s181_smpteSt2094_40
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x681 :
          [ `L_s179_smpteSt2086  | `L_s180_smpteSt2094_10 
          | `L_s181_smpteSt2094_40 ])
        ->
        match x681 with
        | `L_s179_smpteSt2086 -> Ojs.string_to_js "smpteSt2086"
        | `L_s180_smpteSt2094_10 -> Ojs.string_to_js "smpteSt2094-10"
        | `L_s181_smpteSt2094_40 -> Ojs.string_to_js "smpteSt2094-40"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x685 : Ojs.t) -> t_of_js x685
    and t_0_to_js : t_0 -> Ojs.t = fun (x684 : t) -> t_to_js x684
  end
module ColorGamut =
  struct
    type t = [ `L_s144_p3  | `L_s164_rec2020  | `L_s183_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x687 : Ojs.t) ->
        let x688 = x687 in
        match Ojs.string_of_js x688 with
        | "p3" -> `L_s144_p3
        | "rec2020" -> `L_s164_rec2020
        | "srgb" -> `L_s183_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x686 : [ `L_s144_p3  | `L_s164_rec2020  | `L_s183_srgb ]) ->
        match x686 with
        | `L_s144_p3 -> Ojs.string_to_js "p3"
        | `L_s164_rec2020 -> Ojs.string_to_js "rec2020"
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x690 : Ojs.t) -> t_of_js x690
    and t_0_to_js : t_0 -> Ojs.t = fun (x689 : t) -> t_to_js x689
  end
module VideoConfiguration =
  struct
    type t = [ `VideoConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x692 : Ojs.t) -> t_of_js x692
    and t_0_to_js : t_0 -> Ojs.t = fun (x691 : t) -> t_to_js x691
    type tags = [ `VideoConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VideoConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x695 : Ojs.t) -> intf_of_js __tags_of_js x695
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x693 : __tags intf) -> intf_to_js __tags_to_js x693
    let (get_bitrate : 'tags this -> float) =
      fun (x697 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x697) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x699 : 'tags this) ->
        fun (x700 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x699) "bitrate"
            (Ojs.float_to_js x700)
    let (get_colorGamut : 'tags this -> ColorGamut.t) =
      fun (x702 : 'tags this) ->
        ColorGamut.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x702) "colorGamut")
    let (set_colorGamut : 'tags this -> ColorGamut.t -> unit) =
      fun (x704 : 'tags this) ->
        fun (x705 : ColorGamut.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x704) "colorGamut"
            (ColorGamut.t_to_js x705)
    let (get_contentType : 'tags this -> string) =
      fun (x707 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x707) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x709 : 'tags this) ->
        fun (x710 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x709) "contentType"
            (Ojs.string_to_js x710)
    let (get_framerate : 'tags this -> float) =
      fun (x712 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x712) "framerate")
    let (set_framerate : 'tags this -> float -> unit) =
      fun (x714 : 'tags this) ->
        fun (x715 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x714) "framerate"
            (Ojs.float_to_js x715)
    let (get_hdrMetadataType : 'tags this -> HdrMetadataType.t) =
      fun (x717 : 'tags this) ->
        HdrMetadataType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x717) "hdrMetadataType")
    let (set_hdrMetadataType : 'tags this -> HdrMetadataType.t -> unit) =
      fun (x719 : 'tags this) ->
        fun (x720 : HdrMetadataType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x719) "hdrMetadataType"
            (HdrMetadataType.t_to_js x720)
    let (get_height : 'tags this -> float) =
      fun (x722 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x722) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x724 : 'tags this) ->
        fun (x725 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x724) "height"
            (Ojs.float_to_js x725)
    let (get_scalabilityMode : 'tags this -> string) =
      fun (x727 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x727) "scalabilityMode")
    let (set_scalabilityMode : 'tags this -> string -> unit) =
      fun (x729 : 'tags this) ->
        fun (x730 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x729) "scalabilityMode"
            (Ojs.string_to_js x730)
    let (get_transferFunction : 'tags this -> TransferFunction.t) =
      fun (x732 : 'tags this) ->
        TransferFunction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x732) "transferFunction")
    let (set_transferFunction : 'tags this -> TransferFunction.t -> unit) =
      fun (x734 : 'tags this) ->
        fun (x735 : TransferFunction.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x734) "transferFunction"
            (TransferFunction.t_to_js x735)
    let (get_width : 'tags this -> float) =
      fun (x737 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x737) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x739 : 'tags this) ->
        fun (x740 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x739) "width"
            (Ojs.float_to_js x740)
    let cast_from = Obj.magic
  end
module AudioConfiguration =
  struct
    type t = [ `AudioConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x743 : Ojs.t) -> t_of_js x743
    and t_0_to_js : t_0 -> Ojs.t = fun (x742 : t) -> t_to_js x742
    type tags = [ `AudioConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AudioConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x746 : Ojs.t) -> intf_of_js __tags_of_js x746
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x744 : __tags intf) -> intf_to_js __tags_to_js x744
    let (get_bitrate : 'tags this -> float) =
      fun (x748 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x748) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x750 : 'tags this) ->
        fun (x751 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x750) "bitrate"
            (Ojs.float_to_js x751)
    let (get_channels : 'tags this -> string) =
      fun (x753 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x753) "channels")
    let (set_channels : 'tags this -> string -> unit) =
      fun (x755 : 'tags this) ->
        fun (x756 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x755) "channels"
            (Ojs.string_to_js x756)
    let (get_contentType : 'tags this -> string) =
      fun (x758 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x758) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x760 : 'tags this) ->
        fun (x761 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x760) "contentType"
            (Ojs.string_to_js x761)
    let (get_samplerate : 'tags this -> float) =
      fun (x763 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x763) "samplerate")
    let (set_samplerate : 'tags this -> float -> unit) =
      fun (x765 : 'tags this) ->
        fun (x766 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x765) "samplerate"
            (Ojs.float_to_js x766)
    let (get_spatialRendering : 'tags this -> bool) =
      fun (x768 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x768) "spatialRendering")
    let (set_spatialRendering : 'tags this -> bool -> unit) =
      fun (x770 : 'tags this) ->
        fun (x771 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x770) "spatialRendering"
            (Ojs.bool_to_js x771)
    let cast_from = Obj.magic
  end
module MediaConfiguration =
  struct
    type t = [ `MediaConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x774 : Ojs.t) -> t_of_js x774
    and t_0_to_js : t_0 -> Ojs.t = fun (x773 : t) -> t_to_js x773
    type tags = [ `MediaConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x777 : Ojs.t) -> intf_of_js __tags_of_js x777
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x775 : __tags intf) -> intf_to_js __tags_to_js x775
    let (get_audio : 'tags this -> AudioConfiguration.t) =
      fun (x779 : 'tags this) ->
        AudioConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x779) "audio")
    let (set_audio : 'tags this -> AudioConfiguration.t -> unit) =
      fun (x781 : 'tags this) ->
        fun (x782 : AudioConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x781) "audio"
            (AudioConfiguration.t_to_js x782)
    let (get_video : 'tags this -> VideoConfiguration.t) =
      fun (x784 : 'tags this) ->
        VideoConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x784) "video")
    let (set_video : 'tags this -> VideoConfiguration.t -> unit) =
      fun (x786 : 'tags this) ->
        fun (x787 : VideoConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x786) "video"
            (VideoConfiguration.t_to_js x787)
    let cast_from = Obj.magic
  end
module MediaEncodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaEncodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x790 : Ojs.t) -> t_of_js x790
    and t_0_to_js : t_0 -> Ojs.t = fun (x789 : t) -> t_to_js x789
    type tags = [ `MediaConfiguration  | `MediaEncodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaEncodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x793 : Ojs.t) -> intf_of_js __tags_of_js x793
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x791 : __tags intf) -> intf_to_js __tags_to_js x791
    let (get_type : 'tags this -> MediaEncodingType.t) =
      fun (x795 : 'tags this) ->
        MediaEncodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x795) "type")
    let (set_type : 'tags this -> MediaEncodingType.t -> unit) =
      fun (x797 : 'tags this) ->
        fun (x798 : MediaEncodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x797) "type"
            (MediaEncodingType.t_to_js x798)
    let cast_from = Obj.magic
  end
module MediaCapabilitiesInfo =
  struct
    type t = [ `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x801 : Ojs.t) -> t_of_js x801
    and t_0_to_js : t_0 -> Ojs.t = fun (x800 : t) -> t_to_js x800
    type tags = [ `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x804 : Ojs.t) -> intf_of_js __tags_of_js x804
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x802 : __tags intf) -> intf_to_js __tags_to_js x802
    let (get_powerEfficient : 'tags this -> bool) =
      fun (x806 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x806) "powerEfficient")
    let (set_powerEfficient : 'tags this -> bool -> unit) =
      fun (x808 : 'tags this) ->
        fun (x809 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x808) "powerEfficient"
            (Ojs.bool_to_js x809)
    let (get_smooth : 'tags this -> bool) =
      fun (x811 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x811) "smooth")
    let (set_smooth : 'tags this -> bool -> unit) =
      fun (x813 : 'tags this) ->
        fun (x814 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x813) "smooth"
            (Ojs.bool_to_js x814)
    let (get_supported : 'tags this -> bool) =
      fun (x816 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x816) "supported")
    let (set_supported : 'tags this -> bool -> unit) =
      fun (x818 : 'tags this) ->
        fun (x819 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x818) "supported"
            (Ojs.bool_to_js x819)
    let cast_from = Obj.magic
  end
module MediaCapabilitiesEncodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x822 : Ojs.t) -> t_of_js x822
    and t_0_to_js : t_0 -> Ojs.t = fun (x821 : t) -> t_to_js x821
    type tags = [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesEncodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x825 : Ojs.t) -> intf_of_js __tags_of_js x825
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x823 : __tags intf) -> intf_to_js __tags_to_js x823
    let (get_configuration : 'tags this -> MediaEncodingConfiguration.t) =
      fun (x827 : 'tags this) ->
        MediaEncodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x827) "configuration")
    let (set_configuration :
      'tags this -> MediaEncodingConfiguration.t -> unit) =
      fun (x829 : 'tags this) ->
        fun (x830 : MediaEncodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x829) "configuration"
            (MediaEncodingConfiguration.t_to_js x830)
    let cast_from = Obj.magic
  end
module MediaDecodingType =
  struct
    type t = [ `L_s73_file  | `L_s111_media_source  | `L_s206_webrtc ]
    let rec t_of_js : Ojs.t -> t =
      fun (x833 : Ojs.t) ->
        let x834 = x833 in
        match Ojs.string_of_js x834 with
        | "file" -> `L_s73_file
        | "media-source" -> `L_s111_media_source
        | "webrtc" -> `L_s206_webrtc
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x832 : [ `L_s73_file  | `L_s111_media_source  | `L_s206_webrtc ])
        ->
        match x832 with
        | `L_s73_file -> Ojs.string_to_js "file"
        | `L_s111_media_source -> Ojs.string_to_js "media-source"
        | `L_s206_webrtc -> Ojs.string_to_js "webrtc"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x836 : Ojs.t) -> t_of_js x836
    and t_0_to_js : t_0 -> Ojs.t = fun (x835 : t) -> t_to_js x835
  end
module MediaDecodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaDecodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x838 : Ojs.t) -> t_of_js x838
    and t_0_to_js : t_0 -> Ojs.t = fun (x837 : t) -> t_to_js x837
    type tags = [ `MediaConfiguration  | `MediaDecodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaDecodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x841 : Ojs.t) -> intf_of_js __tags_of_js x841
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x839 : __tags intf) -> intf_to_js __tags_to_js x839
    let (get_type : 'tags this -> MediaDecodingType.t) =
      fun (x843 : 'tags this) ->
        MediaDecodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x843) "type")
    let (set_type : 'tags this -> MediaDecodingType.t -> unit) =
      fun (x845 : 'tags this) ->
        fun (x846 : MediaDecodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x845) "type"
            (MediaDecodingType.t_to_js x846)
    let cast_from = Obj.magic
  end
module MediaCapabilitiesDecodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x849 : Ojs.t) -> t_of_js x849
    and t_0_to_js : t_0 -> Ojs.t = fun (x848 : t) -> t_to_js x848
    type tags = [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesDecodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x852 : Ojs.t) -> intf_of_js __tags_of_js x852
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x850 : __tags intf) -> intf_to_js __tags_to_js x850
    let (get_configuration : 'tags this -> MediaDecodingConfiguration.t) =
      fun (x854 : 'tags this) ->
        MediaDecodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x854) "configuration")
    let (set_configuration :
      'tags this -> MediaDecodingConfiguration.t -> unit) =
      fun (x856 : 'tags this) ->
        fun (x857 : MediaDecodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x856) "configuration"
            (MediaDecodingConfiguration.t_to_js x857)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface60:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> MediaCapabilities.t
                         val set_prototype : t -> MediaCapabilities.t -> unit
                         val create : t -> MediaCapabilities.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x860 : Ojs.t) -> x860
    and t_to_js : t -> Ojs.t = fun (x859 : Ojs.t) -> x859
    let (get_prototype : t -> MediaCapabilities.t) =
      fun (x861 : t) ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (t_to_js x861) "prototype")
    let (set_prototype : t -> MediaCapabilities.t -> unit) =
      fun (x862 : t) ->
        fun (x863 : MediaCapabilities.t) ->
          Ojs.set_prop_ascii (t_to_js x862) "prototype"
            (MediaCapabilities.t_to_js x863)
    let (create : t -> MediaCapabilities.t) =
      fun (x864 : t) ->
        MediaCapabilities.t_of_js (Ojs.new_obj (t_to_js x864) [||])
  end
 and
  MediaCapabilities:sig
                      type t = [ `MediaCapabilities ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `MediaCapabilities ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `MediaCapabilities ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `MediaCapabilities ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val decodingInfo :
                        'tags this ->
                          configuration:MediaDecodingConfiguration.t ->
                            MediaCapabilitiesDecodingInfo.t Promise.t_1
                      val encodingInfo :
                        'tags this ->
                          configuration:MediaEncodingConfiguration.t ->
                            MediaCapabilitiesEncodingInfo.t Promise.t_1
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create : unit -> t
                    end =
  struct
    type t = [ `MediaCapabilities ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x866 : Ojs.t) -> t_of_js x866
    and t_0_to_js : t_0 -> Ojs.t = fun (x865 : t) -> t_to_js x865
    type tags = [ `MediaCapabilities ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilities ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x869 : Ojs.t) -> intf_of_js __tags_of_js x869
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x867 : __tags intf) -> intf_to_js __tags_to_js x867
    let (decodingInfo :
      'tags this ->
        configuration:MediaDecodingConfiguration.t ->
          MediaCapabilitiesDecodingInfo.t Promise.t_1)
      =
      fun (x872 : 'tags this) ->
        fun ~configuration:(x871 : MediaDecodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesDecodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x872) "decodingInfo"
               [|(MediaDecodingConfiguration.t_to_js x871)|])
    let (encodingInfo :
      'tags this ->
        configuration:MediaEncodingConfiguration.t ->
          MediaCapabilitiesEncodingInfo.t Promise.t_1)
      =
      fun (x876 : 'tags this) ->
        fun ~configuration:(x875 : MediaEncodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesEncodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x876) "encodingInfo"
               [|(MediaEncodingConfiguration.t_to_js x875)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MediaCapabilities") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MediaCapabilities")
             [||])
  end
module NavigatorStatic =
  struct
    let (mediaCapabilities : unit -> MediaCapabilities.t) =
      fun () ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "navigator")
             "mediaCapabilities")
  end
module LocationStatic =
  struct
    let (hash : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hash")
    let (host : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "host")
    let (hostname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hostname")
    let (href : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "href")
    let (toString : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "location") "toString"
             [||])
    let (origin : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "origin")
    let (pathname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "pathname")
    let (port : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "port")
    let (protocol : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "protocol")
    let (search : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "search")
  end
module IDBVersionChangeEventInit =
  struct
    type t = [ `EventInit  | `IDBVersionChangeEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x880 : Ojs.t) -> t_of_js x880
    and t_0_to_js : t_0 -> Ojs.t = fun (x879 : t) -> t_to_js x879
    type tags = [ `EventInit  | `IDBVersionChangeEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x883 : Ojs.t) -> intf_of_js __tags_of_js x883
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x881 : __tags intf) -> intf_to_js __tags_to_js x881
    let (get_newVersion : 'tags this -> float or_null) =
      fun (x885 : 'tags this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x885) "newVersion")
    let (set_newVersion : 'tags this -> float or_null -> unit) =
      fun (x888 : 'tags this) ->
        fun (x889 : float or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x888) "newVersion"
            (or_null_to_js Ojs.float_to_js x889)
    let (get_oldVersion : 'tags this -> float) =
      fun (x892 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x892) "oldVersion")
    let (set_oldVersion : 'tags this -> float -> unit) =
      fun (x894 : 'tags this) ->
        fun (x895 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x894) "oldVersion"
            (Ojs.float_to_js x895)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface54:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBVersionChangeEvent.t
                         val set_prototype :
                           t -> IDBVersionChangeEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:IDBVersionChangeEventInit.t ->
                                 unit -> IDBVersionChangeEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x898 : Ojs.t) -> x898
    and t_to_js : t -> Ojs.t = fun (x897 : Ojs.t) -> x897
    let (get_prototype : t -> IDBVersionChangeEvent.t) =
      fun (x899 : t) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x899) "prototype")
    let (set_prototype : t -> IDBVersionChangeEvent.t -> unit) =
      fun (x900 : t) ->
        fun (x901 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x900) "prototype"
            (IDBVersionChangeEvent.t_to_js x901)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:IDBVersionChangeEventInit.t ->
            unit -> IDBVersionChangeEvent.t)
      =
      fun (x906 : t) ->
        fun ~type_:(x902 : string) ->
          fun ?eventInitDict:(x903 : IDBVersionChangeEventInit.t option) ->
            fun () ->
              IDBVersionChangeEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x906)
                   (let x904 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore (Ojs.call x904 "push" [|(Ojs.string_to_js x902)|]);
                    (match x903 with
                     | Some x905 ->
                         ignore
                           (Ojs.call x904 "push"
                              [|(IDBVersionChangeEventInit.t_to_js x905)|])
                     | None -> ());
                    x904))
  end
 and
  IDBVersionChangeEvent:sig
                          type t = [ `Event  | `IDBVersionChangeEvent ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags = [ `Event  | `IDBVersionChangeEvent ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags = [ `Event  | `IDBVersionChangeEvent ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags =
                                        [> `IDBVersionChangeEvent ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val get_newVersion : 'tags this -> float or_null
                          val get_oldVersion : 'tags this -> float
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create :
                            type_:string ->
                              ?eventInitDict:IDBVersionChangeEventInit.t ->
                                unit -> t
                        end =
  struct
    type t = [ `Event  | `IDBVersionChangeEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x908 : Ojs.t) -> t_of_js x908
    and t_0_to_js : t_0 -> Ojs.t = fun (x907 : t) -> t_to_js x907
    type tags = [ `Event  | `IDBVersionChangeEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x911 : Ojs.t) -> intf_of_js __tags_of_js x911
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x909 : __tags intf) -> intf_to_js __tags_to_js x909
    let (get_newVersion : 'tags this -> float or_null) =
      fun (x913 : 'tags this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x913) "newVersion")
    let (get_oldVersion : 'tags this -> float) =
      fun (x916 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x916) "oldVersion")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:IDBVersionChangeEventInit.t -> unit -> t)
      =
      fun ~type_:(x918 : string) ->
        fun ?eventInitDict:(x919 : IDBVersionChangeEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
                 (let x920 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x920 "push" [|(Ojs.string_to_js x918)|]);
                  (match x919 with
                   | Some x921 ->
                       ignore
                         (Ojs.call x920 "push"
                            [|(IDBVersionChangeEventInit.t_to_js x921)|])
                   | None -> ());
                  x920))
  end
module IDBObjectStoreParameters =
  struct
    type t = [ `IDBObjectStoreParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x923 : Ojs.t) -> t_of_js x923
    and t_0_to_js : t_0 -> Ojs.t = fun (x922 : t) -> t_to_js x922
    type tags = [ `IDBObjectStoreParameters ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBObjectStoreParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x926 : Ojs.t) -> intf_of_js __tags_of_js x926
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x924 : __tags intf) -> intf_to_js __tags_to_js x924
    let (get_autoIncrement : 'tags this -> bool) =
      fun (x928 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x928) "autoIncrement")
    let (set_autoIncrement : 'tags this -> bool -> unit) =
      fun (x930 : 'tags this) ->
        fun (x931 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x930) "autoIncrement"
            (Ojs.bool_to_js x931)
    let (get_keyPath : 'tags this -> string list or_string or_null) =
      fun (x933 : 'tags this) ->
        or_null_of_js
          (fun (x935 : Ojs.t) ->
             or_string_of_js
               (fun (x936 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x936)
               x935)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x933) "keyPath")
    let (set_keyPath : 'tags this -> string list or_string or_null -> unit) =
      fun (x938 : 'tags this) ->
        fun (x939 : string list or_string or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x938) "keyPath"
            (or_null_to_js
               (fun (x940 : string list or_string) ->
                  or_string_to_js
                    (fun (x941 : string list) ->
                       Ojs.list_to_js Ojs.string_to_js x941) x940) x939)
    let cast_from = Obj.magic
  end
module IDBIndexParameters =
  struct
    type t = [ `IDBIndexParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x945 : Ojs.t) -> t_of_js x945
    and t_0_to_js : t_0 -> Ojs.t = fun (x944 : t) -> t_to_js x944
    type tags = [ `IDBIndexParameters ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBIndexParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x948 : Ojs.t) -> intf_of_js __tags_of_js x948
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x946 : __tags intf) -> intf_to_js __tags_to_js x946
    let (get_multiEntry : 'tags this -> bool) =
      fun (x950 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x950) "multiEntry")
    let (set_multiEntry : 'tags this -> bool -> unit) =
      fun (x952 : 'tags this) ->
        fun (x953 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x952) "multiEntry"
            (Ojs.bool_to_js x953)
    let (get_unique : 'tags this -> bool) =
      fun (x955 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x955) "unique")
    let (set_unique : 'tags this -> bool -> unit) =
      fun (x957 : 'tags this) ->
        fun (x958 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x957) "unique"
            (Ojs.bool_to_js x958)
    let cast_from = Obj.magic
  end
module BufferSource =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x963 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x963
    and t_to_js : t -> Ojs.t =
      fun (x960 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x960
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x967 : Ojs.t) -> t_of_js x967
    and t_0_to_js : t_0 -> Ojs.t = fun (x966 : t) -> t_to_js x966
  end
module IDBValidKey =
  struct
    type t =
      ((BufferSource.t, Date.t_0) union2, t) or_array or_string or_number
    let rec t_of_js : Ojs.t -> t =
      fun (x975 : Ojs.t) ->
        or_number_of_js
          (fun (x976 : Ojs.t) ->
             or_string_of_js
               (fun (x977 : Ojs.t) ->
                  or_array_of_js
                    (fun (x978 : Ojs.t) ->
                       union2_of_js BufferSource.t_of_js Date.t_0_of_js x978)
                    t_of_js x977) x976) x975
    and t_to_js : t -> Ojs.t =
      fun
        (x968 :
          ((BufferSource.t, Date.t_0) union2, t) or_array or_string or_number)
        ->
        or_number_to_js
          (fun
             (x969 :
               ((BufferSource.t, Date.t_0) union2, t) or_array or_string)
             ->
             or_string_to_js
               (fun (x970 : ((BufferSource.t, Date.t_0) union2, t) or_array)
                  ->
                  or_array_to_js
                    (fun (x971 : (BufferSource.t, Date.t_0) union2) ->
                       union2_to_js BufferSource.t_to_js Date.t_0_to_js x971)
                    t_to_js x970) x969) x968
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x983 : Ojs.t) -> t_of_js x983
    and t_0_to_js : t_0 -> Ojs.t = fun (x982 : t) -> t_to_js x982
  end
module IDBTransactionMode =
  struct
    type t =
      [ `L_s161_readonly  | `L_s162_readwrite  | `L_s203_versionchange ]
    let rec t_of_js : Ojs.t -> t =
      fun (x985 : Ojs.t) ->
        let x986 = x985 in
        match Ojs.string_of_js x986 with
        | "readonly" -> `L_s161_readonly
        | "readwrite" -> `L_s162_readwrite
        | "versionchange" -> `L_s203_versionchange
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x984 :
          [ `L_s161_readonly  | `L_s162_readwrite  | `L_s203_versionchange ])
        ->
        match x984 with
        | `L_s161_readonly -> Ojs.string_to_js "readonly"
        | `L_s162_readwrite -> Ojs.string_to_js "readwrite"
        | `L_s203_versionchange -> Ojs.string_to_js "versionchange"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x988 : Ojs.t) -> t_of_js x988
    and t_0_to_js : t_0 -> Ojs.t = fun (x987 : t) -> t_to_js x987
  end
module IDBRequestReadyState =
  struct
    type t = [ `L_s63_done  | `L_s147_pending ]
    let rec t_of_js : Ojs.t -> t =
      fun (x990 : Ojs.t) ->
        let x991 = x990 in
        match Ojs.string_of_js x991 with
        | "done" -> `L_s63_done
        | "pending" -> `L_s147_pending
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x989 : [ `L_s63_done  | `L_s147_pending ]) ->
        match x989 with
        | `L_s63_done -> Ojs.string_to_js "done"
        | `L_s147_pending -> Ojs.string_to_js "pending"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x993 : Ojs.t) -> t_of_js x993
    and t_0_to_js : t_0 -> Ojs.t = fun (x992 : t) -> t_to_js x992
  end
module rec
  AnonymousInterface17:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMException.t
                         val set_prototype : t -> DOMException.t -> unit
                         val create :
                           t ->
                             ?message:string ->
                               ?name:string -> unit -> DOMException.t
                         val get_ABORT_ERR : t -> float
                         val get_DATA_CLONE_ERR : t -> float
                         val get_DOMSTRING_SIZE_ERR : t -> float
                         val get_HIERARCHY_REQUEST_ERR : t -> float
                         val get_INDEX_SIZE_ERR : t -> float
                         val get_INUSE_ATTRIBUTE_ERR : t -> float
                         val get_INVALID_ACCESS_ERR : t -> float
                         val get_INVALID_CHARACTER_ERR : t -> float
                         val get_INVALID_MODIFICATION_ERR : t -> float
                         val get_INVALID_NODE_TYPE_ERR : t -> float
                         val get_INVALID_STATE_ERR : t -> float
                         val get_NAMESPACE_ERR : t -> float
                         val get_NETWORK_ERR : t -> float
                         val get_NOT_FOUND_ERR : t -> float
                         val get_NOT_SUPPORTED_ERR : t -> float
                         val get_NO_DATA_ALLOWED_ERR : t -> float
                         val get_NO_MODIFICATION_ALLOWED_ERR : t -> float
                         val get_QUOTA_EXCEEDED_ERR : t -> float
                         val get_SECURITY_ERR : t -> float
                         val get_SYNTAX_ERR : t -> float
                         val get_TIMEOUT_ERR : t -> float
                         val get_TYPE_MISMATCH_ERR : t -> float
                         val get_URL_MISMATCH_ERR : t -> float
                         val get_VALIDATION_ERR : t -> float
                         val get_WRONG_DOCUMENT_ERR : t -> float
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x995 : Ojs.t) -> x995
    and t_to_js : t -> Ojs.t = fun (x994 : Ojs.t) -> x994
    let (get_prototype : t -> DOMException.t) =
      fun (x996 : t) ->
        DOMException.t_of_js (Ojs.get_prop_ascii (t_to_js x996) "prototype")
    let (set_prototype : t -> DOMException.t -> unit) =
      fun (x997 : t) ->
        fun (x998 : DOMException.t) ->
          Ojs.set_prop_ascii (t_to_js x997) "prototype"
            (DOMException.t_to_js x998)
    let (create :
      t -> ?message:string -> ?name:string -> unit -> DOMException.t) =
      fun (x1004 : t) ->
        fun ?message:(x999 : string option) ->
          fun ?name:(x1000 : string option) ->
            fun () ->
              DOMException.t_of_js
                (Ojs.new_obj_arr (t_to_js x1004)
                   (let x1001 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x999 with
                     | Some x1003 ->
                         ignore
                           (Ojs.call x1001 "push"
                              [|(Ojs.string_to_js x1003)|])
                     | None -> ());
                    (match x1000 with
                     | Some x1002 ->
                         ignore
                           (Ojs.call x1001 "push"
                              [|(Ojs.string_to_js x1002)|])
                     | None -> ());
                    x1001))
    let (get_ABORT_ERR : t -> float) =
      fun (x1005 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1005) "ABORT_ERR")
    let (get_DATA_CLONE_ERR : t -> float) =
      fun (x1006 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1006) "DATA_CLONE_ERR")
    let (get_DOMSTRING_SIZE_ERR : t -> float) =
      fun (x1007 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1007) "DOMSTRING_SIZE_ERR")
    let (get_HIERARCHY_REQUEST_ERR : t -> float) =
      fun (x1008 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1008) "HIERARCHY_REQUEST_ERR")
    let (get_INDEX_SIZE_ERR : t -> float) =
      fun (x1009 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1009) "INDEX_SIZE_ERR")
    let (get_INUSE_ATTRIBUTE_ERR : t -> float) =
      fun (x1010 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1010) "INUSE_ATTRIBUTE_ERR")
    let (get_INVALID_ACCESS_ERR : t -> float) =
      fun (x1011 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1011) "INVALID_ACCESS_ERR")
    let (get_INVALID_CHARACTER_ERR : t -> float) =
      fun (x1012 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1012) "INVALID_CHARACTER_ERR")
    let (get_INVALID_MODIFICATION_ERR : t -> float) =
      fun (x1013 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1013) "INVALID_MODIFICATION_ERR")
    let (get_INVALID_NODE_TYPE_ERR : t -> float) =
      fun (x1014 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1014) "INVALID_NODE_TYPE_ERR")
    let (get_INVALID_STATE_ERR : t -> float) =
      fun (x1015 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1015) "INVALID_STATE_ERR")
    let (get_NAMESPACE_ERR : t -> float) =
      fun (x1016 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1016) "NAMESPACE_ERR")
    let (get_NETWORK_ERR : t -> float) =
      fun (x1017 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1017) "NETWORK_ERR")
    let (get_NOT_FOUND_ERR : t -> float) =
      fun (x1018 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1018) "NOT_FOUND_ERR")
    let (get_NOT_SUPPORTED_ERR : t -> float) =
      fun (x1019 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1019) "NOT_SUPPORTED_ERR")
    let (get_NO_DATA_ALLOWED_ERR : t -> float) =
      fun (x1020 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1020) "NO_DATA_ALLOWED_ERR")
    let (get_NO_MODIFICATION_ALLOWED_ERR : t -> float) =
      fun (x1021 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1021) "NO_MODIFICATION_ALLOWED_ERR")
    let (get_QUOTA_EXCEEDED_ERR : t -> float) =
      fun (x1022 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1022) "QUOTA_EXCEEDED_ERR")
    let (get_SECURITY_ERR : t -> float) =
      fun (x1023 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1023) "SECURITY_ERR")
    let (get_SYNTAX_ERR : t -> float) =
      fun (x1024 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1024) "SYNTAX_ERR")
    let (get_TIMEOUT_ERR : t -> float) =
      fun (x1025 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1025) "TIMEOUT_ERR")
    let (get_TYPE_MISMATCH_ERR : t -> float) =
      fun (x1026 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1026) "TYPE_MISMATCH_ERR")
    let (get_URL_MISMATCH_ERR : t -> float) =
      fun (x1027 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1027) "URL_MISMATCH_ERR")
    let (get_VALIDATION_ERR : t -> float) =
      fun (x1028 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1028) "VALIDATION_ERR")
    let (get_WRONG_DOCUMENT_ERR : t -> float) =
      fun (x1029 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1029) "WRONG_DOCUMENT_ERR")
  end
 and
  DOMException:sig
                 type t = [ `DOMException  | Error.tags_0] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `DOMException  | Error.tags_0]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `DOMException  | Error.tags_0]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `DOMException ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val get_code : 'tags this -> float
                 val get_message : 'tags this -> string
                 val get_name : 'tags this -> string
                 val get_ABORT_ERR : 'tags this -> float
                 val get_DATA_CLONE_ERR : 'tags this -> float
                 val get_DOMSTRING_SIZE_ERR : 'tags this -> float
                 val get_HIERARCHY_REQUEST_ERR : 'tags this -> float
                 val get_INDEX_SIZE_ERR : 'tags this -> float
                 val get_INUSE_ATTRIBUTE_ERR : 'tags this -> float
                 val get_INVALID_ACCESS_ERR : 'tags this -> float
                 val get_INVALID_CHARACTER_ERR : 'tags this -> float
                 val get_INVALID_MODIFICATION_ERR : 'tags this -> float
                 val get_INVALID_NODE_TYPE_ERR : 'tags this -> float
                 val get_INVALID_STATE_ERR : 'tags this -> float
                 val get_NAMESPACE_ERR : 'tags this -> float
                 val get_NETWORK_ERR : 'tags this -> float
                 val get_NOT_FOUND_ERR : 'tags this -> float
                 val get_NOT_SUPPORTED_ERR : 'tags this -> float
                 val get_NO_DATA_ALLOWED_ERR : 'tags this -> float
                 val get_NO_MODIFICATION_ALLOWED_ERR : 'tags this -> float
                 val get_QUOTA_EXCEEDED_ERR : 'tags this -> float
                 val get_SECURITY_ERR : 'tags this -> float
                 val get_SYNTAX_ERR : 'tags this -> float
                 val get_TIMEOUT_ERR : 'tags this -> float
                 val get_TYPE_MISMATCH_ERR : 'tags this -> float
                 val get_URL_MISMATCH_ERR : 'tags this -> float
                 val get_VALIDATION_ERR : 'tags this -> float
                 val get_WRONG_DOCUMENT_ERR : 'tags this -> float
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : ?message:string -> ?name:string -> unit -> t
                 val abort_err : unit -> float
                 val data_clone_err : unit -> float
                 val domstring_size_err : unit -> float
                 val hierarchy_request_err : unit -> float
                 val index_size_err : unit -> float
                 val inuse_attribute_err : unit -> float
                 val invalid_access_err : unit -> float
                 val invalid_character_err : unit -> float
                 val invalid_modification_err : unit -> float
                 val invalid_node_type_err : unit -> float
                 val invalid_state_err : unit -> float
                 val namespace_err : unit -> float
                 val network_err : unit -> float
                 val not_found_err : unit -> float
                 val not_supported_err : unit -> float
                 val no_data_allowed_err : unit -> float
                 val no_modification_allowed_err : unit -> float
                 val quota_exceeded_err : unit -> float
                 val security_err : unit -> float
                 val syntax_err : unit -> float
                 val timeout_err : unit -> float
                 val type_mismatch_err : unit -> float
                 val url_mismatch_err : unit -> float
                 val validation_err : unit -> float
                 val wrong_document_err : unit -> float
               end =
  struct
    type t = [ `DOMException  | Error.tags_0] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1031 : Ojs.t) -> t_of_js x1031
    and t_0_to_js : t_0 -> Ojs.t = fun (x1030 : t) -> t_to_js x1030
    type tags = [ `DOMException  | Error.tags_0]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMException ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1034 : Ojs.t) -> intf_of_js __tags_of_js x1034
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1032 : __tags intf) -> intf_to_js __tags_to_js x1032
    let (get_code : 'tags this -> float) =
      fun (x1036 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1036) "code")
    let (get_message : 'tags this -> string) =
      fun (x1038 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1038) "message")
    let (get_name : 'tags this -> string) =
      fun (x1040 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1040) "name")
    let (get_ABORT_ERR : 'tags this -> float) =
      fun (x1042 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1042) "ABORT_ERR")
    let (get_DATA_CLONE_ERR : 'tags this -> float) =
      fun (x1044 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1044) "DATA_CLONE_ERR")
    let (get_DOMSTRING_SIZE_ERR : 'tags this -> float) =
      fun (x1046 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1046)
             "DOMSTRING_SIZE_ERR")
    let (get_HIERARCHY_REQUEST_ERR : 'tags this -> float) =
      fun (x1048 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1048)
             "HIERARCHY_REQUEST_ERR")
    let (get_INDEX_SIZE_ERR : 'tags this -> float) =
      fun (x1050 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1050) "INDEX_SIZE_ERR")
    let (get_INUSE_ATTRIBUTE_ERR : 'tags this -> float) =
      fun (x1052 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1052)
             "INUSE_ATTRIBUTE_ERR")
    let (get_INVALID_ACCESS_ERR : 'tags this -> float) =
      fun (x1054 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1054)
             "INVALID_ACCESS_ERR")
    let (get_INVALID_CHARACTER_ERR : 'tags this -> float) =
      fun (x1056 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1056)
             "INVALID_CHARACTER_ERR")
    let (get_INVALID_MODIFICATION_ERR : 'tags this -> float) =
      fun (x1058 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1058)
             "INVALID_MODIFICATION_ERR")
    let (get_INVALID_NODE_TYPE_ERR : 'tags this -> float) =
      fun (x1060 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1060)
             "INVALID_NODE_TYPE_ERR")
    let (get_INVALID_STATE_ERR : 'tags this -> float) =
      fun (x1062 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1062)
             "INVALID_STATE_ERR")
    let (get_NAMESPACE_ERR : 'tags this -> float) =
      fun (x1064 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1064) "NAMESPACE_ERR")
    let (get_NETWORK_ERR : 'tags this -> float) =
      fun (x1066 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1066) "NETWORK_ERR")
    let (get_NOT_FOUND_ERR : 'tags this -> float) =
      fun (x1068 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1068) "NOT_FOUND_ERR")
    let (get_NOT_SUPPORTED_ERR : 'tags this -> float) =
      fun (x1070 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1070)
             "NOT_SUPPORTED_ERR")
    let (get_NO_DATA_ALLOWED_ERR : 'tags this -> float) =
      fun (x1072 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1072)
             "NO_DATA_ALLOWED_ERR")
    let (get_NO_MODIFICATION_ALLOWED_ERR : 'tags this -> float) =
      fun (x1074 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1074)
             "NO_MODIFICATION_ALLOWED_ERR")
    let (get_QUOTA_EXCEEDED_ERR : 'tags this -> float) =
      fun (x1076 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1076)
             "QUOTA_EXCEEDED_ERR")
    let (get_SECURITY_ERR : 'tags this -> float) =
      fun (x1078 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1078) "SECURITY_ERR")
    let (get_SYNTAX_ERR : 'tags this -> float) =
      fun (x1080 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1080) "SYNTAX_ERR")
    let (get_TIMEOUT_ERR : 'tags this -> float) =
      fun (x1082 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1082) "TIMEOUT_ERR")
    let (get_TYPE_MISMATCH_ERR : 'tags this -> float) =
      fun (x1084 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1084)
             "TYPE_MISMATCH_ERR")
    let (get_URL_MISMATCH_ERR : 'tags this -> float) =
      fun (x1086 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1086) "URL_MISMATCH_ERR")
    let (get_VALIDATION_ERR : 'tags this -> float) =
      fun (x1088 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1088) "VALIDATION_ERR")
    let (get_WRONG_DOCUMENT_ERR : 'tags this -> float) =
      fun (x1090 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1090)
             "WRONG_DOCUMENT_ERR")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "prototype")
    let (create : ?message:string -> ?name:string -> unit -> t) =
      fun ?message:(x1092 : string option) ->
        fun ?name:(x1093 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMException")
                 (let x1094 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1092 with
                   | Some x1096 ->
                       ignore
                         (Ojs.call x1094 "push" [|(Ojs.string_to_js x1096)|])
                   | None -> ());
                  (match x1093 with
                   | Some x1095 ->
                       ignore
                         (Ojs.call x1094 "push" [|(Ojs.string_to_js x1095)|])
                   | None -> ());
                  x1094))
    let (abort_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "ABORT_ERR")
    let (data_clone_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DATA_CLONE_ERR")
    let (domstring_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DOMSTRING_SIZE_ERR")
    let (hierarchy_request_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "HIERARCHY_REQUEST_ERR")
    let (index_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INDEX_SIZE_ERR")
    let (inuse_attribute_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INUSE_ATTRIBUTE_ERR")
    let (invalid_access_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_ACCESS_ERR")
    let (invalid_character_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_CHARACTER_ERR")
    let (invalid_modification_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_MODIFICATION_ERR")
    let (invalid_node_type_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_NODE_TYPE_ERR")
    let (invalid_state_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_STATE_ERR")
    let (namespace_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NAMESPACE_ERR")
    let (network_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NETWORK_ERR")
    let (not_found_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_FOUND_ERR")
    let (not_supported_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_SUPPORTED_ERR")
    let (no_data_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_DATA_ALLOWED_ERR")
    let (no_modification_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_MODIFICATION_ALLOWED_ERR")
    let (quota_exceeded_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "QUOTA_EXCEEDED_ERR")
    let (security_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SECURITY_ERR")
    let (syntax_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SYNTAX_ERR")
    let (timeout_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TIMEOUT_ERR")
    let (type_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TYPE_MISMATCH_ERR")
    let (url_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "URL_MISMATCH_ERR")
    let (validation_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "VALIDATION_ERR")
    let (wrong_document_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "WRONG_DOCUMENT_ERR")
  end
module rec
  AnonymousInterface49:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBKeyRange.t
                         val set_prototype : t -> IDBKeyRange.t -> unit
                         val create : t -> IDBKeyRange.t
                         val bound :
                           t ->
                             lower:any ->
                               upper:any ->
                                 ?lowerOpen:bool ->
                                   ?upperOpen:bool -> unit -> IDBKeyRange.t
                         val lowerBound :
                           t ->
                             lower:any ->
                               ?open_:bool -> unit -> IDBKeyRange.t
                         val only : t -> value:any -> IDBKeyRange.t
                         val upperBound :
                           t ->
                             upper:any ->
                               ?open_:bool -> unit -> IDBKeyRange.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1098 : Ojs.t) -> x1098
    and t_to_js : t -> Ojs.t = fun (x1097 : Ojs.t) -> x1097
    let (get_prototype : t -> IDBKeyRange.t) =
      fun (x1099 : t) ->
        IDBKeyRange.t_of_js (Ojs.get_prop_ascii (t_to_js x1099) "prototype")
    let (set_prototype : t -> IDBKeyRange.t -> unit) =
      fun (x1100 : t) ->
        fun (x1101 : IDBKeyRange.t) ->
          Ojs.set_prop_ascii (t_to_js x1100) "prototype"
            (IDBKeyRange.t_to_js x1101)
    let (create : t -> IDBKeyRange.t) =
      fun (x1102 : t) ->
        IDBKeyRange.t_of_js (Ojs.new_obj (t_to_js x1102) [||])
    let (bound :
      t ->
        lower:any ->
          upper:any ->
            ?lowerOpen:bool -> ?upperOpen:bool -> unit -> IDBKeyRange.t)
      =
      fun (x1110 : t) ->
        fun ~lower:(x1103 : any) ->
          fun ~upper:(x1104 : any) ->
            fun ?lowerOpen:(x1105 : bool option) ->
              fun ?upperOpen:(x1106 : bool option) ->
                fun () ->
                  IDBKeyRange.t_of_js
                    (let x1111 = t_to_js x1110 in
                     Ojs.call (Ojs.get_prop_ascii x1111 "bound") "apply"
                       [|x1111;((let x1107 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1107 "push"
                                      [|(any_to_js x1103)|]);
                                 ignore
                                   (Ojs.call x1107 "push"
                                      [|(any_to_js x1104)|]);
                                 (match x1105 with
                                  | Some x1109 ->
                                      ignore
                                        (Ojs.call x1107 "push"
                                           [|(Ojs.bool_to_js x1109)|])
                                  | None -> ());
                                 (match x1106 with
                                  | Some x1108 ->
                                      ignore
                                        (Ojs.call x1107 "push"
                                           [|(Ojs.bool_to_js x1108)|])
                                  | None -> ());
                                 x1107))|])
    let (lowerBound : t -> lower:any -> ?open_:bool -> unit -> IDBKeyRange.t)
      =
      fun (x1116 : t) ->
        fun ~lower:(x1112 : any) ->
          fun ?open_:(x1113 : bool option) ->
            fun () ->
              IDBKeyRange.t_of_js
                (let x1117 = t_to_js x1116 in
                 Ojs.call (Ojs.get_prop_ascii x1117 "lowerBound") "apply"
                   [|x1117;((let x1114 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1114 "push" [|(any_to_js x1112)|]);
                             (match x1113 with
                              | Some x1115 ->
                                  ignore
                                    (Ojs.call x1114 "push"
                                       [|(Ojs.bool_to_js x1115)|])
                              | None -> ());
                             x1114))|])
    let (only : t -> value:any -> IDBKeyRange.t) =
      fun (x1119 : t) ->
        fun ~value:(x1118 : any) ->
          IDBKeyRange.t_of_js
            (Ojs.call (t_to_js x1119) "only" [|(any_to_js x1118)|])
    let (upperBound : t -> upper:any -> ?open_:bool -> unit -> IDBKeyRange.t)
      =
      fun (x1124 : t) ->
        fun ~upper:(x1120 : any) ->
          fun ?open_:(x1121 : bool option) ->
            fun () ->
              IDBKeyRange.t_of_js
                (let x1125 = t_to_js x1124 in
                 Ojs.call (Ojs.get_prop_ascii x1125 "upperBound") "apply"
                   [|x1125;((let x1122 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1122 "push" [|(any_to_js x1120)|]);
                             (match x1121 with
                              | Some x1123 ->
                                  ignore
                                    (Ojs.call x1122 "push"
                                       [|(Ojs.bool_to_js x1123)|])
                              | None -> ());
                             x1122))|])
  end
 and
  IDBKeyRange:sig
                type t = [ `IDBKeyRange ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `IDBKeyRange ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `IDBKeyRange ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `IDBKeyRange ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_lower : 'tags this -> any
                val get_lowerOpen : 'tags this -> bool
                val get_upper : 'tags this -> any
                val get_upperOpen : 'tags this -> bool
                val includes : 'tags this -> key:any -> bool
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
                val bound :
                  lower:any ->
                    upper:any ->
                      ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t
                val lowerBound : lower:any -> ?open_:bool -> unit -> t
                val only : any -> t
                val upperBound : upper:any -> ?open_:bool -> unit -> t
              end =
  struct
    type t = [ `IDBKeyRange ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1127 : Ojs.t) -> t_of_js x1127
    and t_0_to_js : t_0 -> Ojs.t = fun (x1126 : t) -> t_to_js x1126
    type tags = [ `IDBKeyRange ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBKeyRange ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1130 : Ojs.t) -> intf_of_js __tags_of_js x1130
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1128 : __tags intf) -> intf_to_js __tags_to_js x1128
    let (get_lower : 'tags this -> any) =
      fun (x1132 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1132) "lower")
    let (get_lowerOpen : 'tags this -> bool) =
      fun (x1134 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1134) "lowerOpen")
    let (get_upper : 'tags this -> any) =
      fun (x1136 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1136) "upper")
    let (get_upperOpen : 'tags this -> bool) =
      fun (x1138 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1138) "upperOpen")
    let (includes : 'tags this -> key:any -> bool) =
      fun (x1141 : 'tags this) ->
        fun ~key:(x1140 : any) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1141) "includes"
               [|(any_to_js x1140)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBKeyRange")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") [||])
    let (bound :
      lower:any ->
        upper:any -> ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t)
      =
      fun ~lower:(x1143 : any) ->
        fun ~upper:(x1144 : any) ->
          fun ?lowerOpen:(x1145 : bool option) ->
            fun ?upperOpen:(x1146 : bool option) ->
              fun () ->
                t_of_js
                  (let x1150 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
                   Ojs.call (Ojs.get_prop_ascii x1150 "bound") "apply"
                     [|x1150;((let x1147 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1147 "push" [|(any_to_js x1143)|]);
                               ignore
                                 (Ojs.call x1147 "push" [|(any_to_js x1144)|]);
                               (match x1145 with
                                | Some x1149 ->
                                    ignore
                                      (Ojs.call x1147 "push"
                                         [|(Ojs.bool_to_js x1149)|])
                                | None -> ());
                               (match x1146 with
                                | Some x1148 ->
                                    ignore
                                      (Ojs.call x1147 "push"
                                         [|(Ojs.bool_to_js x1148)|])
                                | None -> ());
                               x1147))|])
    let (lowerBound : lower:any -> ?open_:bool -> unit -> t) =
      fun ~lower:(x1151 : any) ->
        fun ?open_:(x1152 : bool option) ->
          fun () ->
            t_of_js
              (let x1155 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x1155 "lowerBound") "apply"
                 [|x1155;((let x1153 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1153 "push" [|(any_to_js x1151)|]);
                           (match x1152 with
                            | Some x1154 ->
                                ignore
                                  (Ojs.call x1153 "push"
                                     [|(Ojs.bool_to_js x1154)|])
                            | None -> ());
                           x1153))|])
    let (only : any -> t) =
      fun (x1156 : any) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") "only"
             [|(any_to_js x1156)|])
    let (upperBound : upper:any -> ?open_:bool -> unit -> t) =
      fun ~upper:(x1157 : any) ->
        fun ?open_:(x1158 : bool option) ->
          fun () ->
            t_of_js
              (let x1161 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x1161 "upperBound") "apply"
                 [|x1161;((let x1159 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1159 "push" [|(any_to_js x1157)|]);
                           (match x1158 with
                            | Some x1160 ->
                                ignore
                                  (Ojs.call x1159 "push"
                                     [|(Ojs.bool_to_js x1160)|])
                            | None -> ());
                           x1159))|])
  end
module IDBCursorDirection =
  struct
    type t =
      [ `L_s121_next  | `L_s122_nextunique  | `L_s153_prev 
      | `L_s154_prevunique ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1163 : Ojs.t) ->
        let x1164 = x1163 in
        match Ojs.string_of_js x1164 with
        | "next" -> `L_s121_next
        | "nextunique" -> `L_s122_nextunique
        | "prev" -> `L_s153_prev
        | "prevunique" -> `L_s154_prevunique
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1162 :
          [ `L_s121_next  | `L_s122_nextunique  | `L_s153_prev 
          | `L_s154_prevunique ])
        ->
        match x1162 with
        | `L_s121_next -> Ojs.string_to_js "next"
        | `L_s122_nextunique -> Ojs.string_to_js "nextunique"
        | `L_s153_prev -> Ojs.string_to_js "prev"
        | `L_s154_prevunique -> Ojs.string_to_js "prevunique"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1166 : Ojs.t) -> t_of_js x1166
    and t_0_to_js : t_0 -> Ojs.t = fun (x1165 : t) -> t_to_js x1165
  end
module rec
  AnonymousInterface25:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMStringList.t
                         val set_prototype : t -> DOMStringList.t -> unit
                         val create : t -> DOMStringList.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1168 : Ojs.t) -> x1168
    and t_to_js : t -> Ojs.t = fun (x1167 : Ojs.t) -> x1167
    let (get_prototype : t -> DOMStringList.t) =
      fun (x1169 : t) ->
        DOMStringList.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1169) "prototype")
    let (set_prototype : t -> DOMStringList.t -> unit) =
      fun (x1170 : t) ->
        fun (x1171 : DOMStringList.t) ->
          Ojs.set_prop_ascii (t_to_js x1170) "prototype"
            (DOMStringList.t_to_js x1171)
    let (create : t -> DOMStringList.t) =
      fun (x1172 : t) ->
        DOMStringList.t_of_js (Ojs.new_obj (t_to_js x1172) [||])
  end
 and
  DOMStringList:sig
                  type t =
                    [ `DOMStringList  | string ArrayLike.tags_1
                    | string IterableIterator.tags_1] intf
                  type t_0 = t
                  [@@@js.stop ]
                  type tags =
                    [ `DOMStringList  | string ArrayLike.tags_1
                    | string IterableIterator.tags_1]
                  type tags_0 = tags
                  [@@@js.start ]
                  [@@@js.implem
                    type tags =
                      [ `DOMStringList  | string ArrayLike.tags_1
                      | string IterableIterator.tags_1]
                    type tags_0 = tags]
                  type 'tags this =
                    'tags intf constraint 'tags = [> `DOMStringList ]
                  val t_to_js : t -> Ojs.t
                  val t_of_js : Ojs.t -> t
                  val t_0_to_js : t_0 -> Ojs.t
                  val t_0_of_js : Ojs.t -> t_0
                  val get_length : 'tags this -> float
                  val contains : 'tags this -> string:string -> bool
                  val item : 'tags this -> index:float -> string or_null
                  val get : 'tags this -> float -> string
                  val set : 'tags this -> float -> string -> unit
                  val cast_from : 'tags this -> t
                  val prototype : unit -> t
                  val create : unit -> t
                end =
  struct
    type t =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1174 : Ojs.t) -> t_of_js x1174
    and t_0_to_js : t_0 -> Ojs.t = fun (x1173 : t) -> t_to_js x1173
    type tags =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMStringList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1177 : Ojs.t) -> intf_of_js __tags_of_js x1177
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1175 : __tags intf) -> intf_to_js __tags_to_js x1175
    let (get_length : 'tags this -> float) =
      fun (x1179 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1179) "length")
    let (contains : 'tags this -> string:string -> bool) =
      fun (x1182 : 'tags this) ->
        fun ~string:(x1181 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1182) "contains"
               [|(Ojs.string_to_js x1181)|])
    let (item : 'tags this -> index:float -> string or_null) =
      fun (x1185 : 'tags this) ->
        fun ~index:(x1184 : float) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x1185) "item"
               [|(Ojs.float_to_js x1184)|])
    let (get : 'tags this -> float -> string) =
      fun (x1188 : 'tags this) ->
        fun (x1190 : float) ->
          Ojs.string_of_js
            (Ojs.get_prop (this_to_js Obj.magic x1188)
               (Ojs.float_to_js x1190))
    let (set : 'tags this -> float -> string -> unit) =
      fun (x1191 : 'tags this) ->
        fun (x1193 : float) ->
          fun (x1194 : string) ->
            Ojs.set_prop (this_to_js Obj.magic x1191) (Ojs.float_to_js x1193)
              (Ojs.string_to_js x1194)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMStringList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "DOMStringList") [||])
  end
module rec
  AnonymousInterface44:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBCursor.t
                         val set_prototype : t -> IDBCursor.t -> unit
                         val create : t -> IDBCursor.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1196 : Ojs.t) -> x1196
    and t_to_js : t -> Ojs.t = fun (x1195 : Ojs.t) -> x1195
    let (get_prototype : t -> IDBCursor.t) =
      fun (x1197 : t) ->
        IDBCursor.t_of_js (Ojs.get_prop_ascii (t_to_js x1197) "prototype")
    let (set_prototype : t -> IDBCursor.t -> unit) =
      fun (x1198 : t) ->
        fun (x1199 : IDBCursor.t) ->
          Ojs.set_prop_ascii (t_to_js x1198) "prototype"
            (IDBCursor.t_to_js x1199)
    let (create : t -> IDBCursor.t) =
      fun (x1200 : t) -> IDBCursor.t_of_js (Ojs.new_obj (t_to_js x1200) [||])
  end
 and
  AnonymousInterface45:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBCursorWithValue.t
                         val set_prototype :
                           t -> IDBCursorWithValue.t -> unit
                         val create : t -> IDBCursorWithValue.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1202 : Ojs.t) -> x1202
    and t_to_js : t -> Ojs.t = fun (x1201 : Ojs.t) -> x1201
    let (get_prototype : t -> IDBCursorWithValue.t) =
      fun (x1203 : t) ->
        IDBCursorWithValue.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1203) "prototype")
    let (set_prototype : t -> IDBCursorWithValue.t -> unit) =
      fun (x1204 : t) ->
        fun (x1205 : IDBCursorWithValue.t) ->
          Ojs.set_prop_ascii (t_to_js x1204) "prototype"
            (IDBCursorWithValue.t_to_js x1205)
    let (create : t -> IDBCursorWithValue.t) =
      fun (x1206 : t) ->
        IDBCursorWithValue.t_of_js (Ojs.new_obj (t_to_js x1206) [||])
  end and
       AnonymousInterface46:sig
                              type t = private Ojs.t
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val get_prototype : t -> IDBDatabase.t
                              val set_prototype : t -> IDBDatabase.t -> unit
                              val create : t -> IDBDatabase.t
                            end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x1208 : Ojs.t) -> x1208
         and t_to_js : t -> Ojs.t = fun (x1207 : Ojs.t) -> x1207
         let (get_prototype : t -> IDBDatabase.t) =
           fun (x1209 : t) ->
             IDBDatabase.t_of_js
               (Ojs.get_prop_ascii (t_to_js x1209) "prototype")
         let (set_prototype : t -> IDBDatabase.t -> unit) =
           fun (x1210 : t) ->
             fun (x1211 : IDBDatabase.t) ->
               Ojs.set_prop_ascii (t_to_js x1210) "prototype"
                 (IDBDatabase.t_to_js x1211)
         let (create : t -> IDBDatabase.t) =
           fun (x1212 : t) ->
             IDBDatabase.t_of_js (Ojs.new_obj (t_to_js x1212) [||])
       end and
            AnonymousInterface48:sig
                                   type t = private Ojs.t
                                   val t_to_js : t -> Ojs.t
                                   val t_of_js : Ojs.t -> t
                                   val get_prototype : t -> IDBIndex.t
                                   val set_prototype :
                                     t -> IDBIndex.t -> unit
                                   val create : t -> IDBIndex.t
                                 end =
            struct
              type t = Ojs.t
              let rec t_of_js : Ojs.t -> t = fun (x1214 : Ojs.t) -> x1214
              and t_to_js : t -> Ojs.t = fun (x1213 : Ojs.t) -> x1213
              let (get_prototype : t -> IDBIndex.t) =
                fun (x1215 : t) ->
                  IDBIndex.t_of_js
                    (Ojs.get_prop_ascii (t_to_js x1215) "prototype")
              let (set_prototype : t -> IDBIndex.t -> unit) =
                fun (x1216 : t) ->
                  fun (x1217 : IDBIndex.t) ->
                    Ojs.set_prop_ascii (t_to_js x1216) "prototype"
                      (IDBIndex.t_to_js x1217)
              let (create : t -> IDBIndex.t) =
                fun (x1218 : t) ->
                  IDBIndex.t_of_js (Ojs.new_obj (t_to_js x1218) [||])
            end and
                 AnonymousInterface50:sig
                                        type t = private Ojs.t
                                        val t_to_js : t -> Ojs.t
                                        val t_of_js : Ojs.t -> t
                                        val get_prototype :
                                          t -> IDBObjectStore.t
                                        val set_prototype :
                                          t -> IDBObjectStore.t -> unit
                                        val create : t -> IDBObjectStore.t
                                      end =
                 struct
                   type t = Ojs.t
                   let rec t_of_js : Ojs.t -> t =
                     fun (x1220 : Ojs.t) -> x1220
                   and t_to_js : t -> Ojs.t = fun (x1219 : Ojs.t) -> x1219
                   let (get_prototype : t -> IDBObjectStore.t) =
                     fun (x1221 : t) ->
                       IDBObjectStore.t_of_js
                         (Ojs.get_prop_ascii (t_to_js x1221) "prototype")
                   let (set_prototype : t -> IDBObjectStore.t -> unit) =
                     fun (x1222 : t) ->
                       fun (x1223 : IDBObjectStore.t) ->
                         Ojs.set_prop_ascii (t_to_js x1222) "prototype"
                           (IDBObjectStore.t_to_js x1223)
                   let (create : t -> IDBObjectStore.t) =
                     fun (x1224 : t) ->
                       IDBObjectStore.t_of_js
                         (Ojs.new_obj (t_to_js x1224) [||])
                 end and
                      AnonymousInterface52:sig
                                             type t = private Ojs.t
                                             val t_to_js : t -> Ojs.t
                                             val t_of_js : Ojs.t -> t
                                             val get_prototype :
                                               t -> IDBRequest.t_0
                                             val set_prototype :
                                               t -> IDBRequest.t_0 -> unit
                                             val create : t -> IDBRequest.t_0
                                           end =
                      struct
                        type t = Ojs.t
                        let rec t_of_js : Ojs.t -> t =
                          fun (x1226 : Ojs.t) -> x1226
                        and t_to_js : t -> Ojs.t =
                          fun (x1225 : Ojs.t) -> x1225
                        let (get_prototype : t -> IDBRequest.t_0) =
                          fun (x1227 : t) ->
                            IDBRequest.t_0_of_js
                              (Ojs.get_prop_ascii (t_to_js x1227) "prototype")
                        let (set_prototype : t -> IDBRequest.t_0 -> unit) =
                          fun (x1228 : t) ->
                            fun (x1229 : IDBRequest.t_0) ->
                              Ojs.set_prop_ascii (t_to_js x1228) "prototype"
                                (IDBRequest.t_0_to_js x1229)
                        let (create : t -> IDBRequest.t_0) =
                          fun (x1230 : t) ->
                            IDBRequest.t_0_of_js
                              (Ojs.new_obj (t_to_js x1230) [||])
                      end and
                           AnonymousInterface53:sig
                                                  type t = private Ojs.t
                                                  val t_to_js : t -> Ojs.t
                                                  val t_of_js : Ojs.t -> t
                                                  val get_prototype :
                                                    t -> IDBTransaction.t
                                                  val set_prototype :
                                                    t ->
                                                      IDBTransaction.t ->
                                                        unit
                                                  val create :
                                                    t -> IDBTransaction.t
                                                end =
                           struct
                             type t = Ojs.t
                             let rec t_of_js : Ojs.t -> t =
                               fun (x1232 : Ojs.t) -> x1232
                             and t_to_js : t -> Ojs.t =
                               fun (x1231 : Ojs.t) -> x1231
                             let (get_prototype : t -> IDBTransaction.t) =
                               fun (x1233 : t) ->
                                 IDBTransaction.t_of_js
                                   (Ojs.get_prop_ascii (t_to_js x1233)
                                      "prototype")
                             let (set_prototype :
                               t -> IDBTransaction.t -> unit) =
                               fun (x1234 : t) ->
                                 fun (x1235 : IDBTransaction.t) ->
                                   Ojs.set_prop_ascii (t_to_js x1234)
                                     "prototype"
                                     (IDBTransaction.t_to_js x1235)
                             let (create : t -> IDBTransaction.t) =
                               fun (x1236 : t) ->
                                 IDBTransaction.t_of_js
                                   (Ojs.new_obj (t_to_js x1236) [||])
                           end and
                                IDBCursor:sig
                                            type t = [ `IDBCursor ] intf
                                            type t_0 = t
                                            [@@@js.stop ]
                                            type tags = [ `IDBCursor ]
                                            type tags_0 = tags
                                            [@@@js.start ]
                                            [@@@js.implem
                                              type tags = [ `IDBCursor ]
                                              type tags_0 = tags]
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [> `IDBCursor ]
                                            val t_to_js : t -> Ojs.t
                                            val t_of_js : Ojs.t -> t
                                            val t_0_to_js : t_0 -> Ojs.t
                                            val t_0_of_js : Ojs.t -> t_0
                                            val get_direction :
                                              'tags this ->
                                                IDBCursorDirection.t
                                            val get_key :
                                              'tags this -> IDBValidKey.t
                                            val get_primaryKey :
                                              'tags this -> IDBValidKey.t
                                            val get_request :
                                              'tags this -> IDBRequest.t_0
                                            val get_source :
                                              'tags this ->
                                                (IDBIndex.t,
                                                  IDBObjectStore.t) union2
                                            val advance :
                                              'tags this ->
                                                count:float -> unit
                                            val continue :
                                              'tags this ->
                                                ?key:IDBValidKey.t ->
                                                  unit -> unit
                                            val continuePrimaryKey :
                                              'tags this ->
                                                key:IDBValidKey.t ->
                                                  primaryKey:IDBValidKey.t ->
                                                    unit
                                            val delete :
                                              'tags this ->
                                                never or_undefined
                                                  IDBRequest.t
                                            val update :
                                              'tags this ->
                                                value:any ->
                                                  IDBValidKey.t IDBRequest.t
                                            val cast_from : 'tags this -> t
                                            val prototype : unit -> t
                                            val create : unit -> t
                                          end =
                                struct
                                  type t = [ `IDBCursor ] intf
                                  let rec t_of_js : Ojs.t -> t = Obj.magic
                                  and t_to_js : t -> Ojs.t = Obj.magic
                                  type t_0 = t
                                  let rec t_0_of_js : Ojs.t -> t_0 =
                                    fun (x1238 : Ojs.t) -> t_of_js x1238
                                  and t_0_to_js : t_0 -> Ojs.t =
                                    fun (x1237 : t) -> t_to_js x1237
                                  type tags = [ `IDBCursor ]
                                  type tags_0 = tags
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `IDBCursor ]
                                  let rec this_of_js :
                                    'tags .
                                      (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                                    = fun (type __tags) ->
                                    fun (__tags_of_js : Ojs.t -> __tags) ->
                                      fun (x1241 : Ojs.t) ->
                                        intf_of_js __tags_of_js x1241
                                  and this_to_js :
                                    'tags .
                                      ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                                    = fun (type __tags) ->
                                    fun (__tags_to_js : __tags -> Ojs.t) ->
                                      fun (x1239 : __tags intf) ->
                                        intf_to_js __tags_to_js x1239
                                  let (get_direction :
                                    'tags this -> IDBCursorDirection.t) =
                                    fun (x1243 : 'tags this) ->
                                      IDBCursorDirection.t_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x1243)
                                           "direction")
                                  let (get_key : 'tags this -> IDBValidKey.t)
                                    =
                                    fun (x1245 : 'tags this) ->
                                      IDBValidKey.t_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x1245) "key")
                                  let (get_primaryKey :
                                    'tags this -> IDBValidKey.t) =
                                    fun (x1247 : 'tags this) ->
                                      IDBValidKey.t_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x1247)
                                           "primaryKey")
                                  let (get_request :
                                    'tags this -> IDBRequest.t_0) =
                                    fun (x1249 : 'tags this) ->
                                      IDBRequest.t_0_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x1249)
                                           "request")
                                  let (get_source :
                                    'tags this ->
                                      (IDBIndex.t, IDBObjectStore.t) union2)
                                    =
                                    fun (x1251 : 'tags this) ->
                                      union2_of_js IDBIndex.t_of_js
                                        IDBObjectStore.t_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x1251)
                                           "source")
                                  let (advance :
                                    'tags this -> count:float -> unit) =
                                    fun (x1256 : 'tags this) ->
                                      fun ~count:(x1255 : float) ->
                                        ignore
                                          (Ojs.call
                                             (this_to_js Obj.magic x1256)
                                             "advance"
                                             [|(Ojs.float_to_js x1255)|])
                                  let (continue :
                                    'tags this ->
                                      ?key:IDBValidKey.t -> unit -> unit)
                                    =
                                    fun (x1261 : 'tags this) ->
                                      fun ?key:(x1258 : IDBValidKey.t option)
                                        ->
                                        fun () ->
                                          ignore
                                            (let x1263 =
                                               this_to_js Obj.magic x1261 in
                                             Ojs.call
                                               (Ojs.get_prop_ascii x1263
                                                  "continue") "apply"
                                               [|x1263;((let x1259 =
                                                           Ojs.new_obj
                                                             (Ojs.get_prop_ascii
                                                                Ojs.global
                                                                "Array") 
                                                             [||] in
                                                         (match x1258 with
                                                          | Some x1260 ->
                                                              ignore
                                                                (Ojs.call
                                                                   x1259
                                                                   "push"
                                                                   [|(
                                                                    IDBValidKey.t_to_js
                                                                    x1260)|])
                                                          | None -> ());
                                                         x1259))|])
                                  let (continuePrimaryKey :
                                    'tags this ->
                                      key:IDBValidKey.t ->
                                        primaryKey:IDBValidKey.t -> unit)
                                    =
                                    fun (x1266 : 'tags this) ->
                                      fun ~key:(x1264 : IDBValidKey.t) ->
                                        fun
                                          ~primaryKey:(x1265 : IDBValidKey.t)
                                          ->
                                          ignore
                                            (Ojs.call
                                               (this_to_js Obj.magic x1266)
                                               "continuePrimaryKey"
                                               [|(IDBValidKey.t_to_js x1264);(
                                                 IDBValidKey.t_to_js x1265)|])
                                  let (delete :
                                    'tags this ->
                                      never or_undefined IDBRequest.t)
                                    =
                                    fun (x1268 : 'tags this) ->
                                      IDBRequest.t_of_js
                                        (fun (x1270 : Ojs.t) ->
                                           or_undefined_of_js never_of_js
                                             x1270)
                                        (Ojs.call
                                           (this_to_js Obj.magic x1268)
                                           "delete" [||])
                                  let (update :
                                    'tags this ->
                                      value:any -> IDBValidKey.t IDBRequest.t)
                                    =
                                    fun (x1273 : 'tags this) ->
                                      fun ~value:(x1272 : any) ->
                                        IDBRequest.t_of_js
                                          IDBValidKey.t_of_js
                                          (Ojs.call
                                             (this_to_js Obj.magic x1273)
                                             "update" [|(any_to_js x1272)|])
                                  let cast_from = Obj.magic
                                  let (prototype : unit -> t) =
                                    fun () ->
                                      t_of_js
                                        (Ojs.get_prop_ascii
                                           (Ojs.get_prop_ascii Ojs.global
                                              "IDBCursor") "prototype")
                                  let (create : unit -> t) =
                                    fun () ->
                                      t_of_js
                                        (Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "IDBCursor") [||])
                                end and
                                     IDBCursorWithValue:sig
                                                          type t =
                                                            [ `IDBCursor 
                                                            | `IDBCursorWithValue
                                                                ]
                                                              intf
                                                          type t_0 = t
                                                          [@@@js.stop ]
                                                          type tags =
                                                            [ `IDBCursor 
                                                            | `IDBCursorWithValue
                                                                ]
                                                          type tags_0 = tags
                                                          [@@@js.start ]
                                                          [@@@js.implem
                                                            type tags =
                                                              [ `IDBCursor 
                                                              | `IDBCursorWithValue
                                                                  ]
                                                            type tags_0 =
                                                              tags]
                                                          type 'tags this =
                                                            'tags intf
                                                             constraint 
                                                              'tags =
                                                              [>
                                                                `IDBCursorWithValue
                                                                  ]
                                                          val t_to_js :
                                                            t -> Ojs.t
                                                          val t_of_js :
                                                            Ojs.t -> t
                                                          val t_0_to_js :
                                                            t_0 -> Ojs.t
                                                          val t_0_of_js :
                                                            Ojs.t -> t_0
                                                          val get_value :
                                                            'tags this -> any
                                                          val cast_from :
                                                            'tags this -> t
                                                          val prototype :
                                                            unit -> t
                                                          val create :
                                                            unit -> t
                                                        end =
                                     struct
                                       type t =
                                         [ `IDBCursor 
                                         | `IDBCursorWithValue ] intf
                                       let rec t_of_js : Ojs.t -> t =
                                         Obj.magic
                                       and t_to_js : t -> Ojs.t = Obj.magic
                                       type t_0 = t
                                       let rec t_0_of_js : Ojs.t -> t_0 =
                                         fun (x1277 : Ojs.t) -> t_of_js x1277
                                       and t_0_to_js : t_0 -> Ojs.t =
                                         fun (x1276 : t) -> t_to_js x1276
                                       type tags =
                                         [ `IDBCursor 
                                         | `IDBCursorWithValue ]
                                       type tags_0 = tags
                                       type 'tags this =
                                         'tags intf constraint 'tags =
                                                     [> `IDBCursorWithValue ]
                                       let rec this_of_js :
                                         'tags .
                                           (Ojs.t -> 'tags) ->
                                             Ojs.t -> 'tags this
                                         = fun (type __tags) ->
                                         fun (__tags_of_js : Ojs.t -> __tags)
                                           ->
                                           fun (x1280 : Ojs.t) ->
                                             intf_of_js __tags_of_js x1280
                                       and this_to_js :
                                         'tags .
                                           ('tags -> Ojs.t) ->
                                             'tags this -> Ojs.t
                                         = fun (type __tags) ->
                                         fun (__tags_to_js : __tags -> Ojs.t)
                                           ->
                                           fun (x1278 : __tags intf) ->
                                             intf_to_js __tags_to_js x1278
                                       let (get_value : 'tags this -> any) =
                                         fun (x1282 : 'tags this) ->
                                           any_of_js
                                             (Ojs.get_prop_ascii
                                                (this_to_js Obj.magic x1282)
                                                "value")
                                       let cast_from = Obj.magic
                                       let (prototype : unit -> t) =
                                         fun () ->
                                           t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global
                                                   "IDBCursorWithValue")
                                                "prototype")
                                       let (create : unit -> t) =
                                         fun () ->
                                           t_of_js
                                             (Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global
                                                   "IDBCursorWithValue") 
                                                [||])
                                     end and
                                          IDBDatabase:sig
                                                        type t =
                                                          [ `EventTarget 
                                                          | `IDBDatabase ]
                                                            intf
                                                        type t_0 = t
                                                        [@@@js.stop ]
                                                        type tags =
                                                          [ `EventTarget 
                                                          | `IDBDatabase ]
                                                        type tags_0 = tags
                                                        [@@@js.start ]
                                                        [@@@js.implem
                                                          type tags =
                                                            [ `EventTarget 
                                                            | `IDBDatabase ]
                                                          type tags_0 = tags]
                                                        type 'tags this =
                                                          'tags intf
                                                                    constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBDatabase
                                                                    ]
                                                        val t_to_js :
                                                          t -> Ojs.t
                                                        val t_of_js :
                                                          Ojs.t -> t
                                                        val t_0_to_js :
                                                          t_0 -> Ojs.t
                                                        val t_0_of_js :
                                                          Ojs.t -> t_0
                                                        val get_name :
                                                          'tags this ->
                                                            string
                                                        val
                                                          get_objectStoreNames
                                                          :
                                                          'tags this ->
                                                            DOMStringList.t
                                                        val get_onabort :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null
                                                        val set_onabort :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null -> 
                                                              unit
                                                        val get_onclose :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null
                                                        val set_onclose :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null -> 
                                                              unit
                                                        val get_onerror :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null
                                                        val set_onerror :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null -> 
                                                              unit
                                                        val
                                                          get_onversionchange
                                                          :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:IDBVersionChangeEvent.t
                                                                 -> any)
                                                              or_null
                                                        val
                                                          set_onversionchange
                                                          :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:IDBVersionChangeEvent.t
                                                                 -> any)
                                                              or_null -> 
                                                              unit
                                                        val get_version :
                                                          'tags this -> float
                                                        val close :
                                                          'tags this -> unit
                                                        val createObjectStore
                                                          :
                                                          'tags this ->
                                                            name:string ->
                                                              ?options:IDBObjectStoreParameters.t
                                                                ->
                                                                unit ->
                                                                  IDBObjectStore.t
                                                        val deleteObjectStore
                                                          :
                                                          'tags this ->
                                                            name:string ->
                                                              unit
                                                        val transaction :
                                                          'tags this ->
                                                            storeNames:string
                                                              list or_string
                                                              ->
                                                              ?mode:IDBTransactionMode.t
                                                                ->
                                                                unit ->
                                                                  IDBTransaction.t
                                                        val addEventListener
                                                          :
                                                          'tags this ->
                                                            type_:'K ->
                                                              listener:(
                                                                this:t ->
                                                                  ev:any ->
                                                                    any)
                                                                ->
                                                                ?options:AddEventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val addEventListener'
                                                          :
                                                          'tags this ->
                                                            type_:string ->
                                                              listener:EventListenerOrEventListenerObject.t
                                                                ->
                                                                ?options:AddEventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val
                                                          removeEventListener
                                                          :
                                                          'tags this ->
                                                            type_:'K ->
                                                              listener:(
                                                                this:t ->
                                                                  ev:any ->
                                                                    any)
                                                                ->
                                                                ?options:EventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val
                                                          removeEventListener'
                                                          :
                                                          'tags this ->
                                                            type_:string ->
                                                              listener:EventListenerOrEventListenerObject.t
                                                                ->
                                                                ?options:EventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val transaction' :
                                                          'tags this ->
                                                            storeNames:string
                                                              Iterable.t_1
                                                              or_string ->
                                                              ?mode:IDBTransactionMode.t
                                                                ->
                                                                unit ->
                                                                  IDBTransaction.t
                                                        val cast_from :
                                                          'tags this -> t
                                                        val prototype :
                                                          unit -> t
                                                        val create :
                                                          unit -> t
                                                      end =
                                          struct
                                            type t =
                                              [ `EventTarget 
                                              | `IDBDatabase ] intf
                                            let rec t_of_js : Ojs.t -> t =
                                              Obj.magic
                                            and t_to_js : t -> Ojs.t =
                                              Obj.magic
                                            type t_0 = t
                                            let rec t_0_of_js : Ojs.t -> t_0
                                              =
                                              fun (x1285 : Ojs.t) ->
                                                t_of_js x1285
                                            and t_0_to_js : t_0 -> Ojs.t =
                                              fun (x1284 : t) ->
                                                t_to_js x1284
                                            type tags =
                                              [ `EventTarget 
                                              | `IDBDatabase ]
                                            type tags_0 = tags
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [> `IDBDatabase ]
                                            let rec this_of_js :
                                              'tags .
                                                (Ojs.t -> 'tags) ->
                                                  Ojs.t -> 'tags this
                                              = fun (type __tags) ->
                                              fun
                                                (__tags_of_js :
                                                  Ojs.t -> __tags)
                                                ->
                                                fun (x1288 : Ojs.t) ->
                                                  intf_of_js __tags_of_js
                                                    x1288
                                            and this_to_js :
                                              'tags .
                                                ('tags -> Ojs.t) ->
                                                  'tags this -> Ojs.t
                                              = fun (type __tags) ->
                                              fun
                                                (__tags_to_js :
                                                  __tags -> Ojs.t)
                                                ->
                                                fun (x1286 : __tags intf) ->
                                                  intf_to_js __tags_to_js
                                                    x1286
                                            let (get_name :
                                              'tags this -> string) =
                                              fun (x1290 : 'tags this) ->
                                                Ojs.string_of_js
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1290) "name")
                                            let (get_objectStoreNames :
                                              'tags this -> DOMStringList.t)
                                              =
                                              fun (x1292 : 'tags this) ->
                                                DOMStringList.t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1292)
                                                     "objectStoreNames")
                                            let (get_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null)
                                              =
                                              fun (x1294 : 'tags this) ->
                                                or_null_of_js
                                                  (fun (x1296 : Ojs.t) ->
                                                     fun ~this:(x1297 : t) ->
                                                       fun
                                                         ~ev:(x1298 :
                                                               Event.t)
                                                         ->
                                                         any_of_js
                                                           (Ojs.apply x1296
                                                              [|(t_to_js
                                                                   x1297);(
                                                                Event.t_to_js
                                                                  x1298)|]))
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1294) "onabort")
                                            let (set_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit)
                                              =
                                              fun (x1299 : 'tags this) ->
                                                fun
                                                  (x1300 :
                                                    (this:t ->
                                                       ev:Event.t -> any)
                                                      or_null)
                                                  ->
                                                  Ojs.set_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x1299) "onabort"
                                                    (or_null_to_js
                                                       (fun
                                                          (x1301 :
                                                            this:t ->
                                                              ev:Event.t ->
                                                                any)
                                                          ->
                                                          Ojs.fun_to_js 2
                                                            (fun
                                                               (x1302 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x1303 :
                                                                   Ojs.t)
                                                                 ->
                                                                 any_to_js
                                                                   (x1301
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1302)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1303))))
                                                       x1300)
                                            let (get_onclose :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null)
                                              =
                                              fun (x1305 : 'tags this) ->
                                                or_null_of_js
                                                  (fun (x1307 : Ojs.t) ->
                                                     fun ~this:(x1308 : t) ->
                                                       fun
                                                         ~ev:(x1309 :
                                                               Event.t)
                                                         ->
                                                         any_of_js
                                                           (Ojs.apply x1307
                                                              [|(t_to_js
                                                                   x1308);(
                                                                Event.t_to_js
                                                                  x1309)|]))
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1305) "onclose")
                                            let (set_onclose :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit)
                                              =
                                              fun (x1310 : 'tags this) ->
                                                fun
                                                  (x1311 :
                                                    (this:t ->
                                                       ev:Event.t -> any)
                                                      or_null)
                                                  ->
                                                  Ojs.set_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x1310) "onclose"
                                                    (or_null_to_js
                                                       (fun
                                                          (x1312 :
                                                            this:t ->
                                                              ev:Event.t ->
                                                                any)
                                                          ->
                                                          Ojs.fun_to_js 2
                                                            (fun
                                                               (x1313 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x1314 :
                                                                   Ojs.t)
                                                                 ->
                                                                 any_to_js
                                                                   (x1312
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1313)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1314))))
                                                       x1311)
                                            let (get_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null)
                                              =
                                              fun (x1316 : 'tags this) ->
                                                or_null_of_js
                                                  (fun (x1318 : Ojs.t) ->
                                                     fun ~this:(x1319 : t) ->
                                                       fun
                                                         ~ev:(x1320 :
                                                               Event.t)
                                                         ->
                                                         any_of_js
                                                           (Ojs.apply x1318
                                                              [|(t_to_js
                                                                   x1319);(
                                                                Event.t_to_js
                                                                  x1320)|]))
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1316) "onerror")
                                            let (set_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit)
                                              =
                                              fun (x1321 : 'tags this) ->
                                                fun
                                                  (x1322 :
                                                    (this:t ->
                                                       ev:Event.t -> any)
                                                      or_null)
                                                  ->
                                                  Ojs.set_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x1321) "onerror"
                                                    (or_null_to_js
                                                       (fun
                                                          (x1323 :
                                                            this:t ->
                                                              ev:Event.t ->
                                                                any)
                                                          ->
                                                          Ojs.fun_to_js 2
                                                            (fun
                                                               (x1324 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x1325 :
                                                                   Ojs.t)
                                                                 ->
                                                                 any_to_js
                                                                   (x1323
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1324)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1325))))
                                                       x1322)
                                            let (get_onversionchange :
                                              'tags this ->
                                                (this:t ->
                                                   ev:IDBVersionChangeEvent.t
                                                     -> any)
                                                  or_null)
                                              =
                                              fun (x1327 : 'tags this) ->
                                                or_null_of_js
                                                  (fun (x1329 : Ojs.t) ->
                                                     fun ~this:(x1330 : t) ->
                                                       fun
                                                         ~ev:(x1331 :
                                                               IDBVersionChangeEvent.t)
                                                         ->
                                                         any_of_js
                                                           (Ojs.apply x1329
                                                              [|(t_to_js
                                                                   x1330);(
                                                                IDBVersionChangeEvent.t_to_js
                                                                  x1331)|]))
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1327)
                                                     "onversionchange")
                                            let (set_onversionchange :
                                              'tags this ->
                                                (this:t ->
                                                   ev:IDBVersionChangeEvent.t
                                                     -> any)
                                                  or_null -> unit)
                                              =
                                              fun (x1332 : 'tags this) ->
                                                fun
                                                  (x1333 :
                                                    (this:t ->
                                                       ev:IDBVersionChangeEvent.t
                                                         -> any)
                                                      or_null)
                                                  ->
                                                  Ojs.set_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x1332)
                                                    "onversionchange"
                                                    (or_null_to_js
                                                       (fun
                                                          (x1334 :
                                                            this:t ->
                                                              ev:IDBVersionChangeEvent.t
                                                                -> any)
                                                          ->
                                                          Ojs.fun_to_js 2
                                                            (fun
                                                               (x1335 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x1336 :
                                                                   Ojs.t)
                                                                 ->
                                                                 any_to_js
                                                                   (x1334
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1335)
                                                                    ~ev:(
                                                                    IDBVersionChangeEvent.t_of_js
                                                                    x1336))))
                                                       x1333)
                                            let (get_version :
                                              'tags this -> float) =
                                              fun (x1338 : 'tags this) ->
                                                Ojs.float_of_js
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1338) "version")
                                            let (close : 'tags this -> unit)
                                              =
                                              fun (x1340 : 'tags this) ->
                                                ignore
                                                  (Ojs.call
                                                     (this_to_js Obj.magic
                                                        x1340) "close" 
                                                     [||])
                                            let (createObjectStore :
                                              'tags this ->
                                                name:string ->
                                                  ?options:IDBObjectStoreParameters.t
                                                    ->
                                                    unit -> IDBObjectStore.t)
                                              =
                                              fun (x1346 : 'tags this) ->
                                                fun ~name:(x1342 : string) ->
                                                  fun
                                                    ?options:(x1343 :
                                                               IDBObjectStoreParameters.t
                                                                 option)
                                                    ->
                                                    fun () ->
                                                      IDBObjectStore.t_of_js
                                                        (let x1348 =
                                                           this_to_js
                                                             Obj.magic x1346 in
                                                         Ojs.call
                                                           (Ojs.get_prop_ascii
                                                              x1348
                                                              "createObjectStore")
                                                           "apply"
                                                           [|x1348;((
                                                             let x1344 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x1344
                                                                  "push"
                                                                  [|(
                                                                    Ojs.string_to_js
                                                                    x1342)|]);
                                                             (match x1343
                                                              with
                                                              | Some x1345 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x1344
                                                                    "push"
                                                                    [|(
                                                                    IDBObjectStoreParameters.t_to_js
                                                                    x1345)|])
                                                              | None -> ());
                                                             x1344))|])
                                            let (deleteObjectStore :
                                              'tags this ->
                                                name:string -> unit)
                                              =
                                              fun (x1350 : 'tags this) ->
                                                fun ~name:(x1349 : string) ->
                                                  ignore
                                                    (Ojs.call
                                                       (this_to_js Obj.magic
                                                          x1350)
                                                       "deleteObjectStore"
                                                       [|(Ojs.string_to_js
                                                            x1349)|])
                                            let (transaction :
                                              'tags this ->
                                                storeNames:string list
                                                  or_string ->
                                                  ?mode:IDBTransactionMode.t
                                                    ->
                                                    unit -> IDBTransaction.t)
                                              =
                                              fun (x1358 : 'tags this) ->
                                                fun
                                                  ~storeNames:(x1352 :
                                                                string list
                                                                  or_string)
                                                  ->
                                                  fun
                                                    ?mode:(x1353 :
                                                            IDBTransactionMode.t
                                                              option)
                                                    ->
                                                    fun () ->
                                                      IDBTransaction.t_of_js
                                                        (let x1360 =
                                                           this_to_js
                                                             Obj.magic x1358 in
                                                         Ojs.call
                                                           (Ojs.get_prop_ascii
                                                              x1360
                                                              "transaction")
                                                           "apply"
                                                           [|x1360;((
                                                             let x1354 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x1354
                                                                  "push"
                                                                  [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1356 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1356)
                                                                    x1352)|]);
                                                             (match x1353
                                                              with
                                                              | Some x1355 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x1354
                                                                    "push"
                                                                    [|(
                                                                    IDBTransactionMode.t_to_js
                                                                    x1355)|])
                                                              | None -> ());
                                                             x1354))|])
                                            let (addEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:AddEventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x1369 : 'tags this) ->
                                                fun ~type_:(x1361 : 'K) ->
                                                  fun
                                                    ~listener:(x1362 :
                                                                this:t ->
                                                                  ev:any ->
                                                                    any)
                                                    ->
                                                    fun
                                                      ?options:(x1363 :
                                                                 AddEventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x1371 =
                                                             this_to_js
                                                               Obj.magic
                                                               x1369 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x1371
                                                                "addEventListener")
                                                             "apply"
                                                             [|x1371;((
                                                               let x1364 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x1364
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1361)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x1364
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1367 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1368 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1362
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1367)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1368))))|]);
                                                               (match x1363
                                                                with
                                                                | Some x1365
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1364
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1365)|])
                                                                | None -> ());
                                                               x1364))|])
                                            let (addEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:AddEventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x1378 : 'tags this) ->
                                                fun ~type_:(x1372 : string)
                                                  ->
                                                  fun
                                                    ~listener:(x1373 :
                                                                EventListenerOrEventListenerObject.t)
                                                    ->
                                                    fun
                                                      ?options:(x1374 :
                                                                 AddEventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x1380 =
                                                             this_to_js
                                                               Obj.magic
                                                               x1378 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x1380
                                                                "addEventListener")
                                                             "apply"
                                                             [|x1380;((
                                                               let x1375 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x1375
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1372)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x1375
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1373)|]);
                                                               (match x1374
                                                                with
                                                                | Some x1376
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1375
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1376)|])
                                                                | None -> ());
                                                               x1375))|])
                                            let (removeEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:EventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x1389 : 'tags this) ->
                                                fun ~type_:(x1381 : 'K) ->
                                                  fun
                                                    ~listener:(x1382 :
                                                                this:t ->
                                                                  ev:any ->
                                                                    any)
                                                    ->
                                                    fun
                                                      ?options:(x1383 :
                                                                 EventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x1391 =
                                                             this_to_js
                                                               Obj.magic
                                                               x1389 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x1391
                                                                "removeEventListener")
                                                             "apply"
                                                             [|x1391;((
                                                               let x1384 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x1384
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1381)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x1384
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1387 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1388 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1382
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1387)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1388))))|]);
                                                               (match x1383
                                                                with
                                                                | Some x1385
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1384
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1385)|])
                                                                | None -> ());
                                                               x1384))|])
                                            let (removeEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:EventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x1398 : 'tags this) ->
                                                fun ~type_:(x1392 : string)
                                                  ->
                                                  fun
                                                    ~listener:(x1393 :
                                                                EventListenerOrEventListenerObject.t)
                                                    ->
                                                    fun
                                                      ?options:(x1394 :
                                                                 EventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x1400 =
                                                             this_to_js
                                                               Obj.magic
                                                               x1398 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x1400
                                                                "removeEventListener")
                                                             "apply"
                                                             [|x1400;((
                                                               let x1395 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x1395
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1392)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x1395
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1393)|]);
                                                               (match x1394
                                                                with
                                                                | Some x1396
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1395
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1396)|])
                                                                | None -> ());
                                                               x1395))|])
                                            let (transaction' :
                                              'tags this ->
                                                storeNames:string
                                                  Iterable.t_1 or_string ->
                                                  ?mode:IDBTransactionMode.t
                                                    ->
                                                    unit -> IDBTransaction.t)
                                              =
                                              fun (x1407 : 'tags this) ->
                                                fun
                                                  ~storeNames:(x1401 :
                                                                string
                                                                  Iterable.t_1
                                                                  or_string)
                                                  ->
                                                  fun
                                                    ?mode:(x1402 :
                                                            IDBTransactionMode.t
                                                              option)
                                                    ->
                                                    fun () ->
                                                      IDBTransaction.t_of_js
                                                        (let x1409 =
                                                           this_to_js
                                                             Obj.magic x1407 in
                                                         Ojs.call
                                                           (Ojs.get_prop_ascii
                                                              x1409
                                                              "transaction")
                                                           "apply"
                                                           [|x1409;((
                                                             let x1403 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x1403
                                                                  "push"
                                                                  [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1405 :
                                                                    string
                                                                    Iterable.t_1)
                                                                    ->
                                                                    Iterable.t_1_to_js
                                                                    Ojs.string_to_js
                                                                    x1405)
                                                                    x1401)|]);
                                                             (match x1402
                                                              with
                                                              | Some x1404 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x1403
                                                                    "push"
                                                                    [|(
                                                                    IDBTransactionMode.t_to_js
                                                                    x1404)|])
                                                              | None -> ());
                                                             x1403))|])
                                            let cast_from = Obj.magic
                                            let (prototype : unit -> t) =
                                              fun () ->
                                                t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global
                                                        "IDBDatabase")
                                                     "prototype")
                                            let (create : unit -> t) =
                                              fun () ->
                                                t_of_js
                                                  (Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global
                                                        "IDBDatabase") 
                                                     [||])
                                          end and
                                               IDBIndex:sig
                                                          type t =
                                                            [ `IDBIndex ]
                                                              intf
                                                          type t_0 = t
                                                          [@@@js.stop ]
                                                          type tags =
                                                            [ `IDBIndex ]
                                                          type tags_0 = tags
                                                          [@@@js.start ]
                                                          [@@@js.implem
                                                            type tags =
                                                              [ `IDBIndex ]
                                                            type tags_0 =
                                                              tags]
                                                          type 'tags this =
                                                            'tags intf
                                                             constraint 
                                                              'tags =
                                                              [> `IDBIndex ]
                                                          val t_to_js :
                                                            t -> Ojs.t
                                                          val t_of_js :
                                                            Ojs.t -> t
                                                          val t_0_to_js :
                                                            t_0 -> Ojs.t
                                                          val t_0_of_js :
                                                            Ojs.t -> t_0
                                                          val get_keyPath :
                                                            'tags this ->
                                                              string list
                                                                or_string
                                                          val get_multiEntry
                                                            :
                                                            'tags this ->
                                                              bool
                                                          val get_name :
                                                            'tags this ->
                                                              string
                                                          val set_name :
                                                            'tags this ->
                                                              string -> unit
                                                          val get_objectStore
                                                            :
                                                            'tags this ->
                                                              IDBObjectStore.t
                                                          val get_unique :
                                                            'tags this ->
                                                              bool
                                                          val count :
                                                            'tags this ->
                                                              ?query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2 ->
                                                                unit ->
                                                                  float
                                                                    IDBRequest.t
                                                          val get_ :
                                                            'tags this ->
                                                              query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2 ->
                                                                any
                                                                  IDBRequest.t
                                                          val getAll :
                                                            'tags this ->
                                                              ?query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2
                                                                or_null ->
                                                                ?count:float
                                                                  ->
                                                                  unit ->
                                                                    any list
                                                                    IDBRequest.t
                                                          val getAllKeys :
                                                            'tags this ->
                                                              ?query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2
                                                                or_null ->
                                                                ?count:float
                                                                  ->
                                                                  unit ->
                                                                    IDBValidKey.t
                                                                    list
                                                                    IDBRequest.t
                                                          val getKey :
                                                            'tags this ->
                                                              query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2 ->
                                                                IDBValidKey.t
                                                                  or_undefined
                                                                  IDBRequest.t
                                                          val openCursor :
                                                            'tags this ->
                                                              ?query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2
                                                                or_null ->
                                                                ?direction:IDBCursorDirection.t
                                                                  ->
                                                                  unit ->
                                                                    IDBCursorWithValue.t
                                                                    or_null
                                                                    IDBRequest.t
                                                          val openKeyCursor :
                                                            'tags this ->
                                                              ?query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2
                                                                or_null ->
                                                                ?direction:IDBCursorDirection.t
                                                                  ->
                                                                  unit ->
                                                                    IDBCursor.t
                                                                    or_null
                                                                    IDBRequest.t
                                                          val cast_from :
                                                            'tags this -> t
                                                          val prototype :
                                                            unit -> t
                                                          val create :
                                                            unit -> t
                                                        end =
                                               struct
                                                 type t = [ `IDBIndex ] intf
                                                 let rec t_of_js : Ojs.t -> t
                                                   = Obj.magic
                                                 and t_to_js : t -> Ojs.t =
                                                   Obj.magic
                                                 type t_0 = t
                                                 let rec t_0_of_js :
                                                   Ojs.t -> t_0 =
                                                   fun (x1411 : Ojs.t) ->
                                                     t_of_js x1411
                                                 and t_0_to_js : t_0 -> Ojs.t
                                                   =
                                                   fun (x1410 : t) ->
                                                     t_to_js x1410
                                                 type tags = [ `IDBIndex ]
                                                 type tags_0 = tags
                                                 type 'tags this =
                                                   'tags intf constraint
                                                               'tags =
                                                               [> `IDBIndex ]
                                                 let rec this_of_js :
                                                   'tags .
                                                     (Ojs.t -> 'tags) ->
                                                       Ojs.t -> 'tags this
                                                   = fun (type __tags) ->
                                                   fun
                                                     (__tags_of_js :
                                                       Ojs.t -> __tags)
                                                     ->
                                                     fun (x1414 : Ojs.t) ->
                                                       intf_of_js
                                                         __tags_of_js x1414
                                                 and this_to_js :
                                                   'tags .
                                                     ('tags -> Ojs.t) ->
                                                       'tags this -> Ojs.t
                                                   = fun (type __tags) ->
                                                   fun
                                                     (__tags_to_js :
                                                       __tags -> Ojs.t)
                                                     ->
                                                     fun
                                                       (x1412 : __tags intf)
                                                       ->
                                                       intf_to_js
                                                         __tags_to_js x1412
                                                 let (get_keyPath :
                                                   'tags this ->
                                                     string list or_string)
                                                   =
                                                   fun (x1416 : 'tags this)
                                                     ->
                                                     or_string_of_js
                                                       (fun (x1418 : Ojs.t)
                                                          ->
                                                          Ojs.list_of_js
                                                            Ojs.string_of_js
                                                            x1418)
                                                       (Ojs.get_prop_ascii
                                                          (this_to_js
                                                             Obj.magic x1416)
                                                          "keyPath")
                                                 let (get_multiEntry :
                                                   'tags this -> bool) =
                                                   fun (x1420 : 'tags this)
                                                     ->
                                                     Ojs.bool_of_js
                                                       (Ojs.get_prop_ascii
                                                          (this_to_js
                                                             Obj.magic x1420)
                                                          "multiEntry")
                                                 let (get_name :
                                                   'tags this -> string) =
                                                   fun (x1422 : 'tags this)
                                                     ->
                                                     Ojs.string_of_js
                                                       (Ojs.get_prop_ascii
                                                          (this_to_js
                                                             Obj.magic x1422)
                                                          "name")
                                                 let (set_name :
                                                   'tags this ->
                                                     string -> unit)
                                                   =
                                                   fun (x1424 : 'tags this)
                                                     ->
                                                     fun (x1425 : string) ->
                                                       Ojs.set_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x1424)
                                                         "name"
                                                         (Ojs.string_to_js
                                                            x1425)
                                                 let (get_objectStore :
                                                   'tags this ->
                                                     IDBObjectStore.t)
                                                   =
                                                   fun (x1427 : 'tags this)
                                                     ->
                                                     IDBObjectStore.t_of_js
                                                       (Ojs.get_prop_ascii
                                                          (this_to_js
                                                             Obj.magic x1427)
                                                          "objectStore")
                                                 let (get_unique :
                                                   'tags this -> bool) =
                                                   fun (x1429 : 'tags this)
                                                     ->
                                                     Ojs.bool_of_js
                                                       (Ojs.get_prop_ascii
                                                          (this_to_js
                                                             Obj.magic x1429)
                                                          "unique")
                                                 let (count :
                                                   'tags this ->
                                                     ?query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       ->
                                                       unit ->
                                                         float IDBRequest.t)
                                                   =
                                                   fun (x1436 : 'tags this)
                                                     ->
                                                     fun
                                                       ?query:(x1431 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2
                                                                  option)
                                                       ->
                                                       fun () ->
                                                         IDBRequest.t_of_js
                                                           Ojs.float_of_js
                                                           (let x1438 =
                                                              this_to_js
                                                                Obj.magic
                                                                x1436 in
                                                            Ojs.call
                                                              (Ojs.get_prop_ascii
                                                                 x1438
                                                                 "count")
                                                              "apply"
                                                              [|x1438;((
                                                                let x1432 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                (match x1431
                                                                 with
                                                                 | Some x1433
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1432
                                                                    "push"
                                                                    [|(
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1433)|])
                                                                 | None -> ());
                                                                x1432))|])
                                                 let (get_ :
                                                   'tags this ->
                                                     query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       -> any IDBRequest.t)
                                                   =
                                                   fun (x1443 : 'tags this)
                                                     ->
                                                     fun
                                                       ~query:(x1440 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                       ->
                                                       IDBRequest.t_of_js
                                                         any_of_js
                                                         (Ojs.call
                                                            (this_to_js
                                                               Obj.magic
                                                               x1443) "get"
                                                            [|(union2_to_js
                                                                 IDBKeyRange.t_to_js
                                                                 IDBValidKey.t_to_js
                                                                 x1440)|])
                                                 let (getAll :
                                                   'tags this ->
                                                     ?query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       or_null ->
                                                       ?count:float ->
                                                         unit ->
                                                           any list
                                                             IDBRequest.t)
                                                   =
                                                   fun (x1454 : 'tags this)
                                                     ->
                                                     fun
                                                       ?query:(x1446 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2
                                                                  or_null
                                                                  option)
                                                       ->
                                                       fun
                                                         ?count:(x1447 :
                                                                  float
                                                                    option)
                                                         ->
                                                         fun () ->
                                                           IDBRequest.t_of_js
                                                             (fun
                                                                (x1457 :
                                                                  Ojs.t)
                                                                ->
                                                                Ojs.list_of_js
                                                                  any_of_js
                                                                  x1457)
                                                             (let x1456 =
                                                                this_to_js
                                                                  Obj.magic
                                                                  x1454 in
                                                              Ojs.call
                                                                (Ojs.get_prop_ascii
                                                                   x1456
                                                                   "getAll")
                                                                "apply"
                                                                [|x1456;((
                                                                  let x1448 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  (match x1446
                                                                   with
                                                                   | 
                                                                   Some x1450
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1448
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1451 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1451)
                                                                    x1450)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x1447
                                                                   with
                                                                   | 
                                                                   Some x1449
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1448
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1449)|])
                                                                   | 
                                                                   None -> ());
                                                                  x1448))|])
                                                 let (getAllKeys :
                                                   'tags this ->
                                                     ?query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       or_null ->
                                                       ?count:float ->
                                                         unit ->
                                                           IDBValidKey.t list
                                                             IDBRequest.t)
                                                   =
                                                   fun (x1467 : 'tags this)
                                                     ->
                                                     fun
                                                       ?query:(x1459 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2
                                                                  or_null
                                                                  option)
                                                       ->
                                                       fun
                                                         ?count:(x1460 :
                                                                  float
                                                                    option)
                                                         ->
                                                         fun () ->
                                                           IDBRequest.t_of_js
                                                             (fun
                                                                (x1470 :
                                                                  Ojs.t)
                                                                ->
                                                                Ojs.list_of_js
                                                                  IDBValidKey.t_of_js
                                                                  x1470)
                                                             (let x1469 =
                                                                this_to_js
                                                                  Obj.magic
                                                                  x1467 in
                                                              Ojs.call
                                                                (Ojs.get_prop_ascii
                                                                   x1469
                                                                   "getAllKeys")
                                                                "apply"
                                                                [|x1469;((
                                                                  let x1461 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  (match x1459
                                                                   with
                                                                   | 
                                                                   Some x1463
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1461
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1464 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1464)
                                                                    x1463)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x1460
                                                                   with
                                                                   | 
                                                                   Some x1462
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1461
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1462)|])
                                                                   | 
                                                                   None -> ());
                                                                  x1461))|])
                                                 let (getKey :
                                                   'tags this ->
                                                     query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       ->
                                                       IDBValidKey.t
                                                         or_undefined
                                                         IDBRequest.t)
                                                   =
                                                   fun (x1475 : 'tags this)
                                                     ->
                                                     fun
                                                       ~query:(x1472 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                       ->
                                                       IDBRequest.t_of_js
                                                         (fun (x1477 : Ojs.t)
                                                            ->
                                                            or_undefined_of_js
                                                              IDBValidKey.t_of_js
                                                              x1477)
                                                         (Ojs.call
                                                            (this_to_js
                                                               Obj.magic
                                                               x1475)
                                                            "getKey"
                                                            [|(union2_to_js
                                                                 IDBKeyRange.t_to_js
                                                                 IDBValidKey.t_to_js
                                                                 x1472)|])
                                                 let (openCursor :
                                                   'tags this ->
                                                     ?query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       or_null ->
                                                       ?direction:IDBCursorDirection.t
                                                         ->
                                                         unit ->
                                                           IDBCursorWithValue.t
                                                             or_null
                                                             IDBRequest.t)
                                                   =
                                                   fun (x1487 : 'tags this)
                                                     ->
                                                     fun
                                                       ?query:(x1479 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2
                                                                  or_null
                                                                  option)
                                                       ->
                                                       fun
                                                         ?direction:(x1480 :
                                                                    IDBCursorDirection.t
                                                                    option)
                                                         ->
                                                         fun () ->
                                                           IDBRequest.t_of_js
                                                             (fun
                                                                (x1490 :
                                                                  Ojs.t)
                                                                ->
                                                                or_null_of_js
                                                                  IDBCursorWithValue.t_of_js
                                                                  x1490)
                                                             (let x1489 =
                                                                this_to_js
                                                                  Obj.magic
                                                                  x1487 in
                                                              Ojs.call
                                                                (Ojs.get_prop_ascii
                                                                   x1489
                                                                   "openCursor")
                                                                "apply"
                                                                [|x1489;((
                                                                  let x1481 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  (match x1479
                                                                   with
                                                                   | 
                                                                   Some x1483
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1481
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1484 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1484)
                                                                    x1483)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x1480
                                                                   with
                                                                   | 
                                                                   Some x1482
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1481
                                                                    "push"
                                                                    [|(
                                                                    IDBCursorDirection.t_to_js
                                                                    x1482)|])
                                                                   | 
                                                                   None -> ());
                                                                  x1481))|])
                                                 let (openKeyCursor :
                                                   'tags this ->
                                                     ?query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       or_null ->
                                                       ?direction:IDBCursorDirection.t
                                                         ->
                                                         unit ->
                                                           IDBCursor.t
                                                             or_null
                                                             IDBRequest.t)
                                                   =
                                                   fun (x1500 : 'tags this)
                                                     ->
                                                     fun
                                                       ?query:(x1492 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2
                                                                  or_null
                                                                  option)
                                                       ->
                                                       fun
                                                         ?direction:(x1493 :
                                                                    IDBCursorDirection.t
                                                                    option)
                                                         ->
                                                         fun () ->
                                                           IDBRequest.t_of_js
                                                             (fun
                                                                (x1503 :
                                                                  Ojs.t)
                                                                ->
                                                                or_null_of_js
                                                                  IDBCursor.t_of_js
                                                                  x1503)
                                                             (let x1502 =
                                                                this_to_js
                                                                  Obj.magic
                                                                  x1500 in
                                                              Ojs.call
                                                                (Ojs.get_prop_ascii
                                                                   x1502
                                                                   "openKeyCursor")
                                                                "apply"
                                                                [|x1502;((
                                                                  let x1494 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  (match x1492
                                                                   with
                                                                   | 
                                                                   Some x1496
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1494
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1497 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1497)
                                                                    x1496)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x1493
                                                                   with
                                                                   | 
                                                                   Some x1495
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1494
                                                                    "push"
                                                                    [|(
                                                                    IDBCursorDirection.t_to_js
                                                                    x1495)|])
                                                                   | 
                                                                   None -> ());
                                                                  x1494))|])
                                                 let cast_from = Obj.magic
                                                 let (prototype : unit -> t)
                                                   =
                                                   fun () ->
                                                     t_of_js
                                                       (Ojs.get_prop_ascii
                                                          (Ojs.get_prop_ascii
                                                             Ojs.global
                                                             "IDBIndex")
                                                          "prototype")
                                                 let (create : unit -> t) =
                                                   fun () ->
                                                     t_of_js
                                                       (Ojs.new_obj
                                                          (Ojs.get_prop_ascii
                                                             Ojs.global
                                                             "IDBIndex") 
                                                          [||])
                                               end and
                                                    IDBObjectStore:sig
                                                                    type t =
                                                                    [
                                                                    `IDBObjectStore
                                                                    ] intf
                                                                    type t_0 =
                                                                    t
                                                                    [@@@js.stop
                                                                    ]
                                                                    type tags =
                                                                    [
                                                                    `IDBObjectStore
                                                                    ]
                                                                    type tags_0 =
                                                                    tags
                                                                    [@@@js.start
                                                                    ]
                                                                    [@@@js.implem
                                                                    type tags =
                                                                    [
                                                                    `IDBObjectStore
                                                                    ]
                                                                    type tags_0 =
                                                                    tags]
                                                                    type 
                                                                    'tags this =
                                                                    'tags
                                                                    intf
                                                                    
                                                                    constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBObjectStore
                                                                    ]
                                                                    val
                                                                    t_to_js :
                                                                    t ->
                                                                    Ojs.t
                                                                    val
                                                                    t_of_js :
                                                                    Ojs.t ->
                                                                    t
                                                                    val
                                                                    t_0_to_js
                                                                    :
                                                                    t_0 ->
                                                                    Ojs.t
                                                                    val
                                                                    t_0_of_js
                                                                    :
                                                                    Ojs.t ->
                                                                    t_0
                                                                    val
                                                                    get_autoIncrement
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    bool
                                                                    val
                                                                    get_indexNames
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    DOMStringList.t
                                                                    val
                                                                    get_keyPath
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    string
                                                                    list
                                                                    or_string
                                                                    val
                                                                    get_name
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    string
                                                                    val
                                                                    set_name
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    string ->
                                                                    unit
                                                                    val
                                                                    get_transaction
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    IDBTransaction.t
                                                                    val add :
                                                                    'tags
                                                                    this ->
                                                                    value:any
                                                                    ->
                                                                    ?key:IDBValidKey.t
                                                                    ->
                                                                    unit ->
                                                                    IDBValidKey.t
                                                                    IDBRequest.t
                                                                    val clear
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    never
                                                                    or_undefined
                                                                    IDBRequest.t
                                                                    val count
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    ?query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2 ->
                                                                    unit ->
                                                                    float
                                                                    IDBRequest.t
                                                                    val
                                                                    createIndex
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    name:string
                                                                    ->
                                                                    keyPath:string
                                                                    list
                                                                    or_string
                                                                    ->
                                                                    ?options:IDBIndexParameters.t
                                                                    ->
                                                                    unit ->
                                                                    IDBIndex.t
                                                                    val
                                                                    delete :
                                                                    'tags
                                                                    this ->
                                                                    query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2 ->
                                                                    never
                                                                    or_undefined
                                                                    IDBRequest.t
                                                                    val
                                                                    deleteIndex
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    name:string
                                                                    -> 
                                                                    unit
                                                                    val get_
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2 ->
                                                                    any
                                                                    IDBRequest.t
                                                                    val
                                                                    getAll :
                                                                    'tags
                                                                    this ->
                                                                    ?query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    ->
                                                                    ?count:float
                                                                    ->
                                                                    unit ->
                                                                    any list
                                                                    IDBRequest.t
                                                                    val
                                                                    getAllKeys
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    ?query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    ->
                                                                    ?count:float
                                                                    ->
                                                                    unit ->
                                                                    IDBValidKey.t
                                                                    list
                                                                    IDBRequest.t
                                                                    val
                                                                    getKey :
                                                                    'tags
                                                                    this ->
                                                                    query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2 ->
                                                                    IDBValidKey.t
                                                                    or_undefined
                                                                    IDBRequest.t
                                                                    val index
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    name:string
                                                                    ->
                                                                    IDBIndex.t
                                                                    val
                                                                    openCursor
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    ?query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    ->
                                                                    ?direction:IDBCursorDirection.t
                                                                    ->
                                                                    unit ->
                                                                    IDBCursorWithValue.t
                                                                    or_null
                                                                    IDBRequest.t
                                                                    val
                                                                    openKeyCursor
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    ?query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    ->
                                                                    ?direction:IDBCursorDirection.t
                                                                    ->
                                                                    unit ->
                                                                    IDBCursor.t
                                                                    or_null
                                                                    IDBRequest.t
                                                                    val put :
                                                                    'tags
                                                                    this ->
                                                                    value:any
                                                                    ->
                                                                    ?key:IDBValidKey.t
                                                                    ->
                                                                    unit ->
                                                                    IDBValidKey.t
                                                                    IDBRequest.t
                                                                    val
                                                                    createIndex'
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    name:string
                                                                    ->
                                                                    keyPath:string
                                                                    Iterable.t_1
                                                                    or_string
                                                                    ->
                                                                    ?options:IDBIndexParameters.t
                                                                    ->
                                                                    unit ->
                                                                    IDBIndex.t
                                                                    val
                                                                    cast_from
                                                                    :
                                                                    'tags
                                                                    this -> 
                                                                    t
                                                                    val
                                                                    prototype
                                                                    :
                                                                    unit -> t
                                                                    val
                                                                    create :
                                                                    unit -> t
                                                                   end =
                                                    struct
                                                      type t =
                                                        [ `IDBObjectStore ]
                                                          intf
                                                      let rec t_of_js :
                                                        Ojs.t -> t =
                                                        Obj.magic
                                                      and t_to_js :
                                                        t -> Ojs.t =
                                                        Obj.magic
                                                      type t_0 = t
                                                      let rec t_0_of_js :
                                                        Ojs.t -> t_0 =
                                                        fun (x1506 : Ojs.t)
                                                          -> t_of_js x1506
                                                      and t_0_to_js :
                                                        t_0 -> Ojs.t =
                                                        fun (x1505 : t) ->
                                                          t_to_js x1505
                                                      type tags =
                                                        [ `IDBObjectStore ]
                                                      type tags_0 = tags
                                                      type 'tags this =
                                                        'tags intf constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBObjectStore
                                                                    ]
                                                      let rec this_of_js :
                                                        'tags .
                                                          (Ojs.t -> 'tags) ->
                                                            Ojs.t ->
                                                              'tags this
                                                        = fun (type __tags)
                                                        ->
                                                        fun
                                                          (__tags_of_js :
                                                            Ojs.t -> __tags)
                                                          ->
                                                          fun (x1509 : Ojs.t)
                                                            ->
                                                            intf_of_js
                                                              __tags_of_js
                                                              x1509
                                                      and this_to_js :
                                                        'tags .
                                                          ('tags -> Ojs.t) ->
                                                            'tags this ->
                                                              Ojs.t
                                                        = fun (type __tags)
                                                        ->
                                                        fun
                                                          (__tags_to_js :
                                                            __tags -> Ojs.t)
                                                          ->
                                                          fun
                                                            (x1507 :
                                                              __tags intf)
                                                            ->
                                                            intf_to_js
                                                              __tags_to_js
                                                              x1507
                                                      let (get_autoIncrement
                                                        : 'tags this -> bool)
                                                        =
                                                        fun
                                                          (x1511 :
                                                            'tags this)
                                                          ->
                                                          Ojs.bool_of_js
                                                            (Ojs.get_prop_ascii
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1511)
                                                               "autoIncrement")
                                                      let (get_indexNames :
                                                        'tags this ->
                                                          DOMStringList.t)
                                                        =
                                                        fun
                                                          (x1513 :
                                                            'tags this)
                                                          ->
                                                          DOMStringList.t_of_js
                                                            (Ojs.get_prop_ascii
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1513)
                                                               "indexNames")
                                                      let (get_keyPath :
                                                        'tags this ->
                                                          string list
                                                            or_string)
                                                        =
                                                        fun
                                                          (x1515 :
                                                            'tags this)
                                                          ->
                                                          or_string_of_js
                                                            (fun
                                                               (x1517 :
                                                                 Ojs.t)
                                                               ->
                                                               Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x1517)
                                                            (Ojs.get_prop_ascii
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1515)
                                                               "keyPath")
                                                      let (get_name :
                                                        'tags this -> string)
                                                        =
                                                        fun
                                                          (x1519 :
                                                            'tags this)
                                                          ->
                                                          Ojs.string_of_js
                                                            (Ojs.get_prop_ascii
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1519)
                                                               "name")
                                                      let (set_name :
                                                        'tags this ->
                                                          string -> unit)
                                                        =
                                                        fun
                                                          (x1521 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            (x1522 : string)
                                                            ->
                                                            Ojs.set_prop_ascii
                                                              (this_to_js
                                                                 Obj.magic
                                                                 x1521)
                                                              "name"
                                                              (Ojs.string_to_js
                                                                 x1522)
                                                      let (get_transaction :
                                                        'tags this ->
                                                          IDBTransaction.t)
                                                        =
                                                        fun
                                                          (x1524 :
                                                            'tags this)
                                                          ->
                                                          IDBTransaction.t_of_js
                                                            (Ojs.get_prop_ascii
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1524)
                                                               "transaction")
                                                      let (add :
                                                        'tags this ->
                                                          value:any ->
                                                            ?key:IDBValidKey.t
                                                              ->
                                                              unit ->
                                                                IDBValidKey.t
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1530 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~value:(x1526 :
                                                                    any)
                                                            ->
                                                            fun
                                                              ?key:(x1527 :
                                                                    IDBValidKey.t
                                                                    option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  IDBValidKey.t_of_js
                                                                  (let x1532
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1530 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1532
                                                                    "add")
                                                                    "apply"
                                                                    [|x1532;((
                                                                    let x1528
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1528
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x1526)|]);
                                                                    (
                                                                    match x1527
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1529 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1528
                                                                    "push"
                                                                    [|(
                                                                    IDBValidKey.t_to_js
                                                                    x1529)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1528))|])
                                                      let (clear :
                                                        'tags this ->
                                                          never or_undefined
                                                            IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1534 :
                                                            'tags this)
                                                          ->
                                                          IDBRequest.t_of_js
                                                            (fun
                                                               (x1536 :
                                                                 Ojs.t)
                                                               ->
                                                               or_undefined_of_js
                                                                 never_of_js
                                                                 x1536)
                                                            (Ojs.call
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1534)
                                                               "clear" 
                                                               [||])
                                                      let (count :
                                                        'tags this ->
                                                          ?query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 ->
                                                            unit ->
                                                              float
                                                                IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1543 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ?query:(x1538 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    option)
                                                            ->
                                                            fun () ->
                                                              IDBRequest.t_of_js
                                                                Ojs.float_of_js
                                                                (let x1545 =
                                                                   this_to_js
                                                                    Obj.magic
                                                                    x1543 in
                                                                 Ojs.call
                                                                   (Ojs.get_prop_ascii
                                                                    x1545
                                                                    "count")
                                                                   "apply"
                                                                   [|x1545;((
                                                                    let x1539
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x1538
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1540 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1539
                                                                    "push"
                                                                    [|(
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1540)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1539))|])
                                                      let (createIndex :
                                                        'tags this ->
                                                          name:string ->
                                                            keyPath:string
                                                              list or_string
                                                              ->
                                                              ?options:IDBIndexParameters.t
                                                                ->
                                                                unit ->
                                                                  IDBIndex.t)
                                                        =
                                                        fun
                                                          (x1554 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~name:(x1547 :
                                                                    string)
                                                            ->
                                                            fun
                                                              ~keyPath:
                                                              (x1548 :
                                                                string list
                                                                  or_string)
                                                              ->
                                                              fun
                                                                ?options:
                                                                (x1549 :
                                                                  IDBIndexParameters.t
                                                                    option)
                                                                ->
                                                                fun () ->
                                                                  IDBIndex.t_of_js
                                                                    (
                                                                    let x1556
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1554 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1556
                                                                    "createIndex")
                                                                    "apply"
                                                                    [|x1556;((
                                                                    let x1550
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1550
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1547)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1550
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1552 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1552)
                                                                    x1548)|]);
                                                                    (
                                                                    match x1549
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1551 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1550
                                                                    "push"
                                                                    [|(
                                                                    IDBIndexParameters.t_to_js
                                                                    x1551)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1550))|])
                                                      let (delete :
                                                        'tags this ->
                                                          query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 ->
                                                            never
                                                              or_undefined
                                                              IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1560 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~query:(x1557 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                            ->
                                                            IDBRequest.t_of_js
                                                              (fun
                                                                 (x1562 :
                                                                   Ojs.t)
                                                                 ->
                                                                 or_undefined_of_js
                                                                   never_of_js
                                                                   x1562)
                                                              (Ojs.call
                                                                 (this_to_js
                                                                    Obj.magic
                                                                    x1560)
                                                                 "delete"
                                                                 [|(union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1557)|])
                                                      let (deleteIndex :
                                                        'tags this ->
                                                          name:string -> unit)
                                                        =
                                                        fun
                                                          (x1565 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~name:(x1564 :
                                                                    string)
                                                            ->
                                                            ignore
                                                              (Ojs.call
                                                                 (this_to_js
                                                                    Obj.magic
                                                                    x1565)
                                                                 "deleteIndex"
                                                                 [|(Ojs.string_to_js
                                                                    x1564)|])
                                                      let (get_ :
                                                        'tags this ->
                                                          query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 ->
                                                            any IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1570 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~query:(x1567 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                            ->
                                                            IDBRequest.t_of_js
                                                              any_of_js
                                                              (Ojs.call
                                                                 (this_to_js
                                                                    Obj.magic
                                                                    x1570)
                                                                 "get"
                                                                 [|(union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1567)|])
                                                      let (getAll :
                                                        'tags this ->
                                                          ?query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 or_null ->
                                                            ?count:float ->
                                                              unit ->
                                                                any list
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1581 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ?query:(x1573 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    option)
                                                            ->
                                                            fun
                                                              ?count:
                                                              (x1574 :
                                                                float option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  (fun
                                                                    (x1584 :
                                                                    Ojs.t) ->
                                                                    Ojs.list_of_js
                                                                    any_of_js
                                                                    x1584)
                                                                  (let x1583
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1581 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1583
                                                                    "getAll")
                                                                    "apply"
                                                                    [|x1583;((
                                                                    let x1575
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x1573
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1577 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1575
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1578 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1578)
                                                                    x1577)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1574
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1576 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1575
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1576)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1575))|])
                                                      let (getAllKeys :
                                                        'tags this ->
                                                          ?query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 or_null ->
                                                            ?count:float ->
                                                              unit ->
                                                                IDBValidKey.t
                                                                  list
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1594 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ?query:(x1586 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    option)
                                                            ->
                                                            fun
                                                              ?count:
                                                              (x1587 :
                                                                float option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  (fun
                                                                    (x1597 :
                                                                    Ojs.t) ->
                                                                    Ojs.list_of_js
                                                                    IDBValidKey.t_of_js
                                                                    x1597)
                                                                  (let x1596
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1594 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1596
                                                                    "getAllKeys")
                                                                    "apply"
                                                                    [|x1596;((
                                                                    let x1588
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x1586
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1590 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1588
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1591 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1591)
                                                                    x1590)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1587
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1589 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1588
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1589)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1588))|])
                                                      let (getKey :
                                                        'tags this ->
                                                          query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 ->
                                                            IDBValidKey.t
                                                              or_undefined
                                                              IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1602 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~query:(x1599 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                            ->
                                                            IDBRequest.t_of_js
                                                              (fun
                                                                 (x1604 :
                                                                   Ojs.t)
                                                                 ->
                                                                 or_undefined_of_js
                                                                   IDBValidKey.t_of_js
                                                                   x1604)
                                                              (Ojs.call
                                                                 (this_to_js
                                                                    Obj.magic
                                                                    x1602)
                                                                 "getKey"
                                                                 [|(union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1599)|])
                                                      let (index :
                                                        'tags this ->
                                                          name:string ->
                                                            IDBIndex.t)
                                                        =
                                                        fun
                                                          (x1607 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~name:(x1606 :
                                                                    string)
                                                            ->
                                                            IDBIndex.t_of_js
                                                              (Ojs.call
                                                                 (this_to_js
                                                                    Obj.magic
                                                                    x1607)
                                                                 "index"
                                                                 [|(Ojs.string_to_js
                                                                    x1606)|])
                                                      let (openCursor :
                                                        'tags this ->
                                                          ?query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 or_null ->
                                                            ?direction:IDBCursorDirection.t
                                                              ->
                                                              unit ->
                                                                IDBCursorWithValue.t
                                                                  or_null
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1617 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ?query:(x1609 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    option)
                                                            ->
                                                            fun
                                                              ?direction:
                                                              (x1610 :
                                                                IDBCursorDirection.t
                                                                  option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  (fun
                                                                    (x1620 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    IDBCursorWithValue.t_of_js
                                                                    x1620)
                                                                  (let x1619
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1617 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1619
                                                                    "openCursor")
                                                                    "apply"
                                                                    [|x1619;((
                                                                    let x1611
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x1609
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1613 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1611
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1614 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1614)
                                                                    x1613)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1610
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1612 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1611
                                                                    "push"
                                                                    [|(
                                                                    IDBCursorDirection.t_to_js
                                                                    x1612)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1611))|])
                                                      let (openKeyCursor :
                                                        'tags this ->
                                                          ?query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 or_null ->
                                                            ?direction:IDBCursorDirection.t
                                                              ->
                                                              unit ->
                                                                IDBCursor.t
                                                                  or_null
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1630 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ?query:(x1622 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    option)
                                                            ->
                                                            fun
                                                              ?direction:
                                                              (x1623 :
                                                                IDBCursorDirection.t
                                                                  option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  (fun
                                                                    (x1633 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    IDBCursor.t_of_js
                                                                    x1633)
                                                                  (let x1632
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1630 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1632
                                                                    "openKeyCursor")
                                                                    "apply"
                                                                    [|x1632;((
                                                                    let x1624
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x1622
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1626 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1624
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1627 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1627)
                                                                    x1626)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1623
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1625 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1624
                                                                    "push"
                                                                    [|(
                                                                    IDBCursorDirection.t_to_js
                                                                    x1625)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1624))|])
                                                      let (put :
                                                        'tags this ->
                                                          value:any ->
                                                            ?key:IDBValidKey.t
                                                              ->
                                                              unit ->
                                                                IDBValidKey.t
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1639 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~value:(x1635 :
                                                                    any)
                                                            ->
                                                            fun
                                                              ?key:(x1636 :
                                                                    IDBValidKey.t
                                                                    option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  IDBValidKey.t_of_js
                                                                  (let x1641
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1639 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1641
                                                                    "put")
                                                                    "apply"
                                                                    [|x1641;((
                                                                    let x1637
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1637
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x1635)|]);
                                                                    (
                                                                    match x1636
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1638 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1637
                                                                    "push"
                                                                    [|(
                                                                    IDBValidKey.t_to_js
                                                                    x1638)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1637))|])
                                                      let (createIndex' :
                                                        'tags this ->
                                                          name:string ->
                                                            keyPath:string
                                                              Iterable.t_1
                                                              or_string ->
                                                              ?options:IDBIndexParameters.t
                                                                ->
                                                                unit ->
                                                                  IDBIndex.t)
                                                        =
                                                        fun
                                                          (x1650 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~name:(x1643 :
                                                                    string)
                                                            ->
                                                            fun
                                                              ~keyPath:
                                                              (x1644 :
                                                                string
                                                                  Iterable.t_1
                                                                  or_string)
                                                              ->
                                                              fun
                                                                ?options:
                                                                (x1645 :
                                                                  IDBIndexParameters.t
                                                                    option)
                                                                ->
                                                                fun () ->
                                                                  IDBIndex.t_of_js
                                                                    (
                                                                    let x1652
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1650 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1652
                                                                    "createIndex")
                                                                    "apply"
                                                                    [|x1652;((
                                                                    let x1646
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1646
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1643)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1646
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1648 :
                                                                    string
                                                                    Iterable.t_1)
                                                                    ->
                                                                    Iterable.t_1_to_js
                                                                    Ojs.string_to_js
                                                                    x1648)
                                                                    x1644)|]);
                                                                    (
                                                                    match x1645
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1647 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1646
                                                                    "push"
                                                                    [|(
                                                                    IDBIndexParameters.t_to_js
                                                                    x1647)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1646))|])
                                                      let cast_from =
                                                        Obj.magic
                                                      let (prototype :
                                                        unit -> t) =
                                                        fun () ->
                                                          t_of_js
                                                            (Ojs.get_prop_ascii
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "IDBObjectStore")
                                                               "prototype")
                                                      let (create :
                                                        unit -> t) =
                                                        fun () ->
                                                          t_of_js
                                                            (Ojs.new_obj
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "IDBObjectStore")
                                                               [||])
                                                    end and
                                                         IDBRequest:sig
                                                                    type 
                                                                    'T t =
                                                                    [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBRequest
                                                                    of 
                                                                    'T ] intf
                                                                    type 
                                                                    'T t_1 =
                                                                    'T t
                                                                    type t_0 =
                                                                    any t
                                                                    [@@@js.stop
                                                                    ]
                                                                    type 
                                                                    'T tags =
                                                                    [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBRequest
                                                                    of 
                                                                    'T ]
                                                                    type 
                                                                    'T tags_1 =
                                                                    'T tags
                                                                    type tags_0 =
                                                                    any tags
                                                                    [@@@js.start
                                                                    ]
                                                                    [@@@js.implem
                                                                    type 
                                                                    'T tags =
                                                                    [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBRequest
                                                                    of 
                                                                    'T ]
                                                                    type 
                                                                    'T tags_1 =
                                                                    'T tags
                                                                    type tags_0 =
                                                                    any tags]
                                                                    type (
                                                                    'tags,
                                                                    'T) this =
                                                                    'tags
                                                                    intf
                                                                    
                                                                    constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBRequest
                                                                    of 
                                                                    'T ]
                                                                    val
                                                                    t_to_js :
                                                                    ('T ->
                                                                    Ojs.t) ->
                                                                    'T t ->
                                                                    Ojs.t
                                                                    val
                                                                    t_of_js :
                                                                    (Ojs.t ->
                                                                    'T) ->
                                                                    Ojs.t ->
                                                                    'T t
                                                                    val
                                                                    t_1_to_js
                                                                    :
                                                                    ('T ->
                                                                    Ojs.t) ->
                                                                    'T t_1 ->
                                                                    Ojs.t
                                                                    val
                                                                    t_1_of_js
                                                                    :
                                                                    (Ojs.t ->
                                                                    'T) ->
                                                                    Ojs.t ->
                                                                    'T t_1
                                                                    val
                                                                    t_0_to_js
                                                                    :
                                                                    t_0 ->
                                                                    Ojs.t
                                                                    val
                                                                    t_0_of_js
                                                                    :
                                                                    Ojs.t ->
                                                                    t_0
                                                                    val
                                                                    get_error
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    DOMException.t
                                                                    or_null
                                                                    val
                                                                    get_onerror
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    (this:'T
                                                                    t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    val
                                                                    set_onerror
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    (this:'T
                                                                    t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit
                                                                    val
                                                                    get_onsuccess
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    (this:'T
                                                                    t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    val
                                                                    set_onsuccess
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    (this:'T
                                                                    t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit
                                                                    val
                                                                    get_readyState
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    IDBRequestReadyState.t
                                                                    val
                                                                    get_result
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    -> 
                                                                    'T
                                                                    val
                                                                    get_source
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    (IDBCursor.t,
                                                                    IDBIndex.t,
                                                                    IDBObjectStore.t)
                                                                    union3
                                                                    val
                                                                    get_transaction
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    IDBTransaction.t
                                                                    or_null
                                                                    val
                                                                    addEventListener
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                    val
                                                                    addEventListener'
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                    val
                                                                    removeEventListener
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                    val
                                                                    removeEventListener'
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                    val
                                                                    cast_from
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    -> 
                                                                    'T t
                                                                    val
                                                                    prototype
                                                                    :
                                                                    unit ->
                                                                    t_0
                                                                    val
                                                                    create :
                                                                    unit ->
                                                                    t_0
                                                                    end =
                                                         struct
                                                           type 'T t =
                                                             [ `EventTarget 
                                                             | `IDBRequest of
                                                                 'T ]
                                                               intf
                                                           let rec t_of_js :
                                                             'T .
                                                               (Ojs.t -> 'T)
                                                                 ->
                                                                 Ojs.t ->
                                                                   'T t
                                                             =
                                                             fun _T ->
                                                               Obj.magic
                                                           and t_to_js :
                                                             'T .
                                                               ('T -> Ojs.t)
                                                                 ->
                                                                 'T t ->
                                                                   Ojs.t
                                                             =
                                                             fun _T ->
                                                               Obj.magic
                                                           type 'T t_1 = 'T t
                                                           let rec t_1_of_js
                                                             :
                                                             'T .
                                                               (Ojs.t -> 'T)
                                                                 ->
                                                                 Ojs.t ->
                                                                   'T t_1
                                                             = fun (type __T)
                                                             ->
                                                             fun
                                                               (__T_of_js :
                                                                 Ojs.t -> __T)
                                                               ->
                                                               fun
                                                                 (x1655 :
                                                                   Ojs.t)
                                                                 ->
                                                                 t_of_js
                                                                   __T_of_js
                                                                   x1655
                                                           and t_1_to_js :
                                                             'T .
                                                               ('T -> Ojs.t)
                                                                 ->
                                                                 'T t_1 ->
                                                                   Ojs.t
                                                             = fun (type __T)
                                                             ->
                                                             fun
                                                               (__T_to_js :
                                                                 __T -> Ojs.t)
                                                               ->
                                                               fun
                                                                 (x1653 :
                                                                   __T t)
                                                                 ->
                                                                 t_to_js
                                                                   __T_to_js
                                                                   x1653
                                                           type t_0 = any t
                                                           let rec t_0_of_js
                                                             : Ojs.t -> t_0 =
                                                             fun
                                                               (x1659 :
                                                                 Ojs.t)
                                                               ->
                                                               t_of_js
                                                                 any_of_js
                                                                 x1659
                                                           and t_0_to_js :
                                                             t_0 -> Ojs.t =
                                                             fun
                                                               (x1657 :
                                                                 any t)
                                                               ->
                                                               t_to_js
                                                                 any_to_js
                                                                 x1657
                                                           type 'T tags =
                                                             [ `EventTarget 
                                                             | `IDBRequest of
                                                                 'T ]
                                                           type 'T tags_1 =
                                                             'T tags
                                                           type tags_0 =
                                                             any tags
                                                           type ('tags,
                                                             'T) this =
                                                             'tags intf
                                                              constraint
                                                               'tags =
                                                               [>
                                                                 `IDBRequest
                                                                   of 
                                                                   'T ]
                                                           let rec this_of_js
                                                             :
                                                             'tags 'T .
                                                               (Ojs.t ->
                                                                  'tags)
                                                                 ->
                                                                 (Ojs.t -> 'T)
                                                                   ->
                                                                   Ojs.t ->
                                                                    ('tags,
                                                                    'T) this
                                                             = fun (type
                                                             __tags) -> fun
                                                             (type __T) ->
                                                             fun
                                                               (__tags_of_js
                                                                 :
                                                                 Ojs.t ->
                                                                   __tags)
                                                               ->
                                                               fun
                                                                 (__T_of_js :
                                                                   Ojs.t ->
                                                                    __T)
                                                                 ->
                                                                 fun
                                                                   (x1663 :
                                                                    Ojs.t)
                                                                   ->
                                                                   intf_of_js
                                                                    __tags_of_js
                                                                    x1663
                                                           and this_to_js :
                                                             'tags 'T .
                                                               ('tags ->
                                                                  Ojs.t)
                                                                 ->
                                                                 ('T -> Ojs.t)
                                                                   ->
                                                                   ('tags,
                                                                    'T) this
                                                                    -> 
                                                                    Ojs.t
                                                             = fun (type
                                                             __tags) -> fun
                                                             (type __T) ->
                                                             fun
                                                               (__tags_to_js
                                                                 :
                                                                 __tags ->
                                                                   Ojs.t)
                                                               ->
                                                               fun
                                                                 (__T_to_js :
                                                                   __T ->
                                                                    Ojs.t)
                                                                 ->
                                                                 fun
                                                                   (x1661 :
                                                                    __tags
                                                                    intf)
                                                                   ->
                                                                   intf_to_js
                                                                    __tags_to_js
                                                                    x1661
                                                           let (get_error :
                                                             ('tags, 
                                                               'T) this ->
                                                               DOMException.t
                                                                 or_null)
                                                             =
                                                             fun
                                                               (x1665 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               or_null_of_js
                                                                 DOMException.t_of_js
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1665)
                                                                    "error")
                                                           let (get_onerror :
                                                             ('tags, 
                                                               'T) this ->
                                                               (this:'T t ->
                                                                  ev:Event.t
                                                                    -> 
                                                                    any)
                                                                 or_null)
                                                             =
                                                             fun
                                                               (x1669 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               or_null_of_js
                                                                 (fun
                                                                    (x1672 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    ~this:
                                                                    (x1673 :
                                                                    'T t) ->
                                                                    fun
                                                                    ~ev:
                                                                    (x1675 :
                                                                    Event.t)
                                                                    ->
                                                                    any_of_js
                                                                    (Ojs.apply
                                                                    x1672
                                                                    [|(
                                                                    t_to_js
                                                                    Obj.magic
                                                                    x1673);(
                                                                    Event.t_to_js
                                                                    x1675)|]))
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1669)
                                                                    "onerror")
                                                           let (set_onerror :
                                                             ('tags, 
                                                               'T) this ->
                                                               (this:'T t ->
                                                                  ev:Event.t
                                                                    -> 
                                                                    any)
                                                                 or_null ->
                                                                 unit)
                                                             =
                                                             fun
                                                               (x1676 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 (x1677 :
                                                                   (this:'T t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                 ->
                                                                 Ojs.set_prop_ascii
                                                                   (this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1676)
                                                                   "onerror"
                                                                   (or_null_to_js
                                                                    (fun
                                                                    (x1678 :
                                                                    this:'T t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any) ->
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1679 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1681 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1678
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1679)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1681))))
                                                                    x1677)
                                                           let (get_onsuccess
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               (this:'T t ->
                                                                  ev:Event.t
                                                                    -> 
                                                                    any)
                                                                 or_null)
                                                             =
                                                             fun
                                                               (x1684 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               or_null_of_js
                                                                 (fun
                                                                    (x1687 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    ~this:
                                                                    (x1688 :
                                                                    'T t) ->
                                                                    fun
                                                                    ~ev:
                                                                    (x1690 :
                                                                    Event.t)
                                                                    ->
                                                                    any_of_js
                                                                    (Ojs.apply
                                                                    x1687
                                                                    [|(
                                                                    t_to_js
                                                                    Obj.magic
                                                                    x1688);(
                                                                    Event.t_to_js
                                                                    x1690)|]))
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1684)
                                                                    "onsuccess")
                                                           let (set_onsuccess
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               (this:'T t ->
                                                                  ev:Event.t
                                                                    -> 
                                                                    any)
                                                                 or_null ->
                                                                 unit)
                                                             =
                                                             fun
                                                               (x1691 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 (x1692 :
                                                                   (this:'T t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                 ->
                                                                 Ojs.set_prop_ascii
                                                                   (this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1691)
                                                                   "onsuccess"
                                                                   (or_null_to_js
                                                                    (fun
                                                                    (x1693 :
                                                                    this:'T t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any) ->
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1694 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1696 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1693
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1694)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1696))))
                                                                    x1692)
                                                           let (get_readyState
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               IDBRequestReadyState.t)
                                                             =
                                                             fun
                                                               (x1699 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               IDBRequestReadyState.t_of_js
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1699)
                                                                    "readyState")
                                                           let (get_result :
                                                             ('tags, 
                                                               'T) this -> 
                                                               'T)
                                                             =
                                                             fun
                                                               (x1702 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               Obj.magic
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1702)
                                                                    "result")
                                                           let (get_source :
                                                             ('tags, 
                                                               'T) this ->
                                                               (IDBCursor.t,
                                                                 IDBIndex.t,
                                                                 IDBObjectStore.t)
                                                                 union3)
                                                             =
                                                             fun
                                                               (x1705 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               union3_of_js
                                                                 IDBCursor.t_of_js
                                                                 IDBIndex.t_of_js
                                                                 IDBObjectStore.t_of_js
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1705)
                                                                    "source")
                                                           let (get_transaction
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               IDBTransaction.t
                                                                 or_null)
                                                             =
                                                             fun
                                                               (x1711 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               or_null_of_js
                                                                 IDBTransaction.t_of_js
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1711)
                                                                    "transaction")
                                                           let (addEventListener
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               type_:'K ->
                                                                 listener:(
                                                                   this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any)
                                                                   ->
                                                                   ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                             =
                                                             fun
                                                               (x1724 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 ~type_:
                                                                 (x1715 : 
                                                                   'K)
                                                                 ->
                                                                 fun
                                                                   ~listener:
                                                                   (x1716 :
                                                                    this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any)
                                                                   ->
                                                                   fun
                                                                    ?options:
                                                                    (x1717 :
                                                                    AddEventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1727
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1724 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1727
                                                                    "addEventListener")
                                                                    "apply"
                                                                    [|x1727;((
                                                                    let x1718
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1718
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1715)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1718
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1721 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1723 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1716
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1721)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1723))))|]);
                                                                    (
                                                                    match x1717
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1719 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1718
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1719)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1718))|])
                                                           let (addEventListener'
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               type_:string
                                                                 ->
                                                                 listener:EventListenerOrEventListenerObject.t
                                                                   ->
                                                                   ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                             =
                                                             fun
                                                               (x1734 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 ~type_:
                                                                 (x1728 :
                                                                   string)
                                                                 ->
                                                                 fun
                                                                   ~listener:
                                                                   (x1729 :
                                                                    EventListenerOrEventListenerObject.t)
                                                                   ->
                                                                   fun
                                                                    ?options:
                                                                    (x1730 :
                                                                    AddEventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1737
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1734 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1737
                                                                    "addEventListener")
                                                                    "apply"
                                                                    [|x1737;((
                                                                    let x1731
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1731
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1728)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1731
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1729)|]);
                                                                    (
                                                                    match x1730
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1732 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1731
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1732)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1731))|])
                                                           let (removeEventListener
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               type_:'K ->
                                                                 listener:(
                                                                   this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any)
                                                                   ->
                                                                   ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                             =
                                                             fun
                                                               (x1747 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 ~type_:
                                                                 (x1738 : 
                                                                   'K)
                                                                 ->
                                                                 fun
                                                                   ~listener:
                                                                   (x1739 :
                                                                    this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any)
                                                                   ->
                                                                   fun
                                                                    ?options:
                                                                    (x1740 :
                                                                    EventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1750
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1747 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1750
                                                                    "removeEventListener")
                                                                    "apply"
                                                                    [|x1750;((
                                                                    let x1741
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1741
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1738)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1741
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1744 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1746 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1739
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1744)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1746))))|]);
                                                                    (
                                                                    match x1740
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1742 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1741
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1742)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1741))|])
                                                           let (removeEventListener'
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               type_:string
                                                                 ->
                                                                 listener:EventListenerOrEventListenerObject.t
                                                                   ->
                                                                   ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                             =
                                                             fun
                                                               (x1757 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 ~type_:
                                                                 (x1751 :
                                                                   string)
                                                                 ->
                                                                 fun
                                                                   ~listener:
                                                                   (x1752 :
                                                                    EventListenerOrEventListenerObject.t)
                                                                   ->
                                                                   fun
                                                                    ?options:
                                                                    (x1753 :
                                                                    EventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1760
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1757 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1760
                                                                    "removeEventListener")
                                                                    "apply"
                                                                    [|x1760;((
                                                                    let x1754
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1754
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1751)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1754
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1752)|]);
                                                                    (
                                                                    match x1753
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1755 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1754
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1755)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1754))|])
                                                           let cast_from =
                                                             Obj.magic
                                                           let (prototype :
                                                             unit -> t_0) =
                                                             fun () ->
                                                               t_0_of_js
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "IDBRequest")
                                                                    "prototype")
                                                           let (create :
                                                             unit -> t_0) =
                                                             fun () ->
                                                               t_0_of_js
                                                                 (Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "IDBRequest")
                                                                    [||])
                                                         end and
                                                              IDBTransaction:
                                                              sig
                                                                type t =
                                                                  [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBTransaction
                                                                    ] intf
                                                                type t_0 = t
                                                                [@@@js.stop ]
                                                                type tags =
                                                                  [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBTransaction
                                                                    ]
                                                                type tags_0 =
                                                                  tags
                                                                [@@@js.start
                                                                  ]
                                                                [@@@js.implem
                                                                  type tags =
                                                                    [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBTransaction
                                                                    ]
                                                                  type tags_0 =
                                                                    tags]
                                                                type 
                                                                  'tags this =
                                                                  'tags intf
                                                                   constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBTransaction
                                                                    ]
                                                                val t_to_js :
                                                                  t -> Ojs.t
                                                                val t_of_js :
                                                                  Ojs.t -> t
                                                                val t_0_to_js
                                                                  :
                                                                  t_0 ->
                                                                    Ojs.t
                                                                val t_0_of_js
                                                                  :
                                                                  Ojs.t ->
                                                                    t_0
                                                                val get_db :
                                                                  'tags this
                                                                    ->
                                                                    IDBDatabase.t
                                                                val get_error
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    DOMException.t
                                                                    or_null
                                                                val get_mode
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    IDBTransactionMode.t
                                                                val
                                                                  get_objectStoreNames
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    DOMStringList.t
                                                                val
                                                                  get_onabort
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                val
                                                                  set_onabort
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit
                                                                val
                                                                  get_oncomplete
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                val
                                                                  set_oncomplete
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit
                                                                val
                                                                  get_onerror
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                val
                                                                  set_onerror
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit
                                                                val abort :
                                                                  'tags this
                                                                    -> 
                                                                    unit
                                                                val commit :
                                                                  'tags this
                                                                    -> 
                                                                    unit
                                                                val
                                                                  objectStore
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    name:string
                                                                    ->
                                                                    IDBObjectStore.t
                                                                val
                                                                  addEventListener
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                val
                                                                  addEventListener'
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                val
                                                                  removeEventListener
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                val
                                                                  removeEventListener'
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                val cast_from
                                                                  :
                                                                  'tags this
                                                                    -> 
                                                                    t
                                                                val prototype
                                                                  : unit -> t
                                                                val create :
                                                                  unit -> t
                                                              end =
                                                              struct
                                                                type t =
                                                                  [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBTransaction
                                                                    ] intf
                                                                let rec t_of_js
                                                                  :
                                                                  Ojs.t -> t
                                                                  = Obj.magic
                                                                and t_to_js :
                                                                  t -> Ojs.t
                                                                  = Obj.magic
                                                                type t_0 = t
                                                                let rec t_0_of_js
                                                                  :
                                                                  Ojs.t ->
                                                                    t_0
                                                                  =
                                                                  fun
                                                                    (x1762 :
                                                                    Ojs.t) ->
                                                                    t_of_js
                                                                    x1762
                                                                and t_0_to_js
                                                                  :
                                                                  t_0 ->
                                                                    Ojs.t
                                                                  =
                                                                  fun
                                                                    (x1761 :
                                                                    t) ->
                                                                    t_to_js
                                                                    x1761
                                                                type tags =
                                                                  [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBTransaction
                                                                    ]
                                                                type tags_0 =
                                                                  tags
                                                                type 
                                                                  'tags this =
                                                                  'tags intf
                                                                   constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBTransaction
                                                                    ]
                                                                let rec this_of_js
                                                                  :
                                                                  'tags .
                                                                    (Ojs.t ->
                                                                    'tags) ->
                                                                    Ojs.t ->
                                                                    'tags
                                                                    this
                                                                  = fun (type
                                                                  __tags) ->
                                                                  fun
                                                                    (__tags_of_js
                                                                    :
                                                                    Ojs.t ->
                                                                    __tags)
                                                                    ->
                                                                    fun
                                                                    (x1765 :
                                                                    Ojs.t) ->
                                                                    intf_of_js
                                                                    __tags_of_js
                                                                    x1765
                                                                and this_to_js
                                                                  :
                                                                  'tags .
                                                                    ('tags ->
                                                                    Ojs.t) ->
                                                                    'tags
                                                                    this ->
                                                                    Ojs.t
                                                                  = fun (type
                                                                  __tags) ->
                                                                  fun
                                                                    (__tags_to_js
                                                                    :
                                                                    __tags ->
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1763 :
                                                                    __tags
                                                                    intf) ->
                                                                    intf_to_js
                                                                    __tags_to_js
                                                                    x1763
                                                                let (get_db :
                                                                  'tags this
                                                                    ->
                                                                    IDBDatabase.t)
                                                                  =
                                                                  fun
                                                                    (x1767 :
                                                                    'tags
                                                                    this) ->
                                                                    IDBDatabase.t_of_js
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1767)
                                                                    "db")
                                                                let (get_error
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    DOMException.t
                                                                    or_null)
                                                                  =
                                                                  fun
                                                                    (x1769 :
                                                                    'tags
                                                                    this) ->
                                                                    or_null_of_js
                                                                    DOMException.t_of_js
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1769)
                                                                    "error")
                                                                let (get_mode
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    IDBTransactionMode.t)
                                                                  =
                                                                  fun
                                                                    (x1772 :
                                                                    'tags
                                                                    this) ->
                                                                    IDBTransactionMode.t_of_js
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1772)
                                                                    "mode")
                                                                let (get_objectStoreNames
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    DOMStringList.t)
                                                                  =
                                                                  fun
                                                                    (x1774 :
                                                                    'tags
                                                                    this) ->
                                                                    DOMStringList.t_of_js
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1774)
                                                                    "objectStoreNames")
                                                                let (get_onabort
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                  =
                                                                  fun
                                                                    (x1776 :
                                                                    'tags
                                                                    this) ->
                                                                    or_null_of_js
                                                                    (fun
                                                                    (x1778 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    ~this:
                                                                    (x1779 :
                                                                    t) ->
                                                                    fun
                                                                    ~ev:
                                                                    (x1780 :
                                                                    Event.t)
                                                                    ->
                                                                    any_of_js
                                                                    (Ojs.apply
                                                                    x1778
                                                                    [|(
                                                                    t_to_js
                                                                    x1779);(
                                                                    Event.t_to_js
                                                                    x1780)|]))
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1776)
                                                                    "onabort")
                                                                let (set_onabort
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1781 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    (x1782 :
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                    ->
                                                                    Ojs.set_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1781)
                                                                    "onabort"
                                                                    (or_null_to_js
                                                                    (fun
                                                                    (x1783 :
                                                                    this:t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any) ->
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1784 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1785 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1783
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1784)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1785))))
                                                                    x1782)
                                                                let (get_oncomplete
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                  =
                                                                  fun
                                                                    (x1787 :
                                                                    'tags
                                                                    this) ->
                                                                    or_null_of_js
                                                                    (fun
                                                                    (x1789 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    ~this:
                                                                    (x1790 :
                                                                    t) ->
                                                                    fun
                                                                    ~ev:
                                                                    (x1791 :
                                                                    Event.t)
                                                                    ->
                                                                    any_of_js
                                                                    (Ojs.apply
                                                                    x1789
                                                                    [|(
                                                                    t_to_js
                                                                    x1790);(
                                                                    Event.t_to_js
                                                                    x1791)|]))
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1787)
                                                                    "oncomplete")
                                                                let (set_oncomplete
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1792 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    (x1793 :
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                    ->
                                                                    Ojs.set_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1792)
                                                                    "oncomplete"
                                                                    (or_null_to_js
                                                                    (fun
                                                                    (x1794 :
                                                                    this:t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any) ->
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1795 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1796 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1794
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1795)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1796))))
                                                                    x1793)
                                                                let (get_onerror
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                  =
                                                                  fun
                                                                    (x1798 :
                                                                    'tags
                                                                    this) ->
                                                                    or_null_of_js
                                                                    (fun
                                                                    (x1800 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    ~this:
                                                                    (x1801 :
                                                                    t) ->
                                                                    fun
                                                                    ~ev:
                                                                    (x1802 :
                                                                    Event.t)
                                                                    ->
                                                                    any_of_js
                                                                    (Ojs.apply
                                                                    x1800
                                                                    [|(
                                                                    t_to_js
                                                                    x1801);(
                                                                    Event.t_to_js
                                                                    x1802)|]))
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1798)
                                                                    "onerror")
                                                                let (set_onerror
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1803 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    (x1804 :
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                    ->
                                                                    Ojs.set_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1803)
                                                                    "onerror"
                                                                    (or_null_to_js
                                                                    (fun
                                                                    (x1805 :
                                                                    this:t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any) ->
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1806 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1807 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1805
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1806)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1807))))
                                                                    x1804)
                                                                let (abort :
                                                                  'tags this
                                                                    -> 
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1809 :
                                                                    'tags
                                                                    this) ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1809)
                                                                    "abort"
                                                                    [||])
                                                                let (commit :
                                                                  'tags this
                                                                    -> 
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1811 :
                                                                    'tags
                                                                    this) ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1811)
                                                                    "commit"
                                                                    [||])
                                                                let (objectStore
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    name:string
                                                                    ->
                                                                    IDBObjectStore.t)
                                                                  =
                                                                  fun
                                                                    (x1814 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    ~name:
                                                                    (x1813 :
                                                                    string)
                                                                    ->
                                                                    IDBObjectStore.t_of_js
                                                                    (Ojs.call
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1814)
                                                                    "objectStore"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1813)|])
                                                                let (addEventListener
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1824 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    ~type_:
                                                                    (x1816 :
                                                                    'K) ->
                                                                    fun
                                                                    ~listener:
                                                                    (x1817 :
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    fun
                                                                    ?options:
                                                                    (x1818 :
                                                                    AddEventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1826
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1824 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1826
                                                                    "addEventListener")
                                                                    "apply"
                                                                    [|x1826;((
                                                                    let x1819
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1819
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1816)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1819
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1822 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1823 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1817
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1822)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1823))))|]);
                                                                    (
                                                                    match x1818
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1820 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1819
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1820)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1819))|])
                                                                let (addEventListener'
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1833 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    ~type_:
                                                                    (x1827 :
                                                                    string)
                                                                    ->
                                                                    fun
                                                                    ~listener:
                                                                    (x1828 :
                                                                    EventListenerOrEventListenerObject.t)
                                                                    ->
                                                                    fun
                                                                    ?options:
                                                                    (x1829 :
                                                                    AddEventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1835
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1833 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1835
                                                                    "addEventListener")
                                                                    "apply"
                                                                    [|x1835;((
                                                                    let x1830
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1830
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1827)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1830
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1828)|]);
                                                                    (
                                                                    match x1829
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1831 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1830
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1831)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1830))|])
                                                                let (removeEventListener
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1844 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    ~type_:
                                                                    (x1836 :
                                                                    'K) ->
                                                                    fun
                                                                    ~listener:
                                                                    (x1837 :
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    fun
                                                                    ?options:
                                                                    (x1838 :
                                                                    EventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1846
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1844 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1846
                                                                    "removeEventListener")
                                                                    "apply"
                                                                    [|x1846;((
                                                                    let x1839
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1839
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1836)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1839
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1842 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1843 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1837
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1842)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1843))))|]);
                                                                    (
                                                                    match x1838
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1840 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1839
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1840)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1839))|])
                                                                let (removeEventListener'
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1853 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    ~type_:
                                                                    (x1847 :
                                                                    string)
                                                                    ->
                                                                    fun
                                                                    ~listener:
                                                                    (x1848 :
                                                                    EventListenerOrEventListenerObject.t)
                                                                    ->
                                                                    fun
                                                                    ?options:
                                                                    (x1849 :
                                                                    EventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1855
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1853 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1855
                                                                    "removeEventListener")
                                                                    "apply"
                                                                    [|x1855;((
                                                                    let x1850
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1850
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1847)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1850
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1848)|]);
                                                                    (
                                                                    match x1849
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1851 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1850
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1851)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1850))|])
                                                                let cast_from
                                                                  = Obj.magic
                                                                let (prototype
                                                                  :
                                                                  unit -> t)
                                                                  =
                                                                  fun () ->
                                                                    t_of_js
                                                                    (Ojs.get_prop_ascii
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "IDBTransaction")
                                                                    "prototype")
                                                                let (create :
                                                                  unit -> t)
                                                                  =
                                                                  fun () ->
                                                                    t_of_js
                                                                    (Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "IDBTransaction")
                                                                    [||])
                                                              end
module rec
  AnonymousInterface51:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBOpenDBRequest.t
                         val set_prototype : t -> IDBOpenDBRequest.t -> unit
                         val create : t -> IDBOpenDBRequest.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1857 : Ojs.t) -> x1857
    and t_to_js : t -> Ojs.t = fun (x1856 : Ojs.t) -> x1856
    let (get_prototype : t -> IDBOpenDBRequest.t) =
      fun (x1858 : t) ->
        IDBOpenDBRequest.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1858) "prototype")
    let (set_prototype : t -> IDBOpenDBRequest.t -> unit) =
      fun (x1859 : t) ->
        fun (x1860 : IDBOpenDBRequest.t) ->
          Ojs.set_prop_ascii (t_to_js x1859) "prototype"
            (IDBOpenDBRequest.t_to_js x1860)
    let (create : t -> IDBOpenDBRequest.t) =
      fun (x1861 : t) ->
        IDBOpenDBRequest.t_of_js (Ojs.new_obj (t_to_js x1861) [||])
  end
 and
  IDBOpenDBRequest:sig
                     type t =
                       [ `EventTarget  | `IDBOpenDBRequest 
                       | `IDBRequest of IDBDatabase.t ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags =
                       [ `EventTarget  | `IDBOpenDBRequest 
                       | `IDBRequest of IDBDatabase.t ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags =
                         [ `EventTarget  | `IDBOpenDBRequest 
                         | `IDBRequest of IDBDatabase.t ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_onblocked :
                       'tags this -> (this:t -> ev:Event.t -> any) or_null
                     val set_onblocked :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) or_null -> unit
                     val get_onupgradeneeded :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any)
                           or_null
                     val set_onupgradeneeded :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any)
                           or_null -> unit
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
  struct
    type t =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1863 : Ojs.t) -> t_of_js x1863
    and t_0_to_js : t_0 -> Ojs.t = fun (x1862 : t) -> t_to_js x1862
    type tags =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1866 : Ojs.t) -> intf_of_js __tags_of_js x1866
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1864 : __tags intf) -> intf_to_js __tags_to_js x1864
    let (get_onblocked : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x1868 : 'tags this) ->
        or_null_of_js
          (fun (x1870 : Ojs.t) ->
             fun ~this:(x1871 : t) ->
               fun ~ev:(x1872 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1870 [|(t_to_js x1871);(Event.t_to_js x1872)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1868) "onblocked")
    let (set_onblocked :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x1873 : 'tags this) ->
        fun (x1874 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1873) "onblocked"
            (or_null_to_js
               (fun (x1875 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1876 : Ojs.t) ->
                       fun (x1877 : Ojs.t) ->
                         any_to_js
                           (x1875 ~this:(t_of_js x1876)
                              ~ev:(Event.t_of_js x1877)))) x1874)
    let (get_onupgradeneeded :
      'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null) =
      fun (x1879 : 'tags this) ->
        or_null_of_js
          (fun (x1881 : Ojs.t) ->
             fun ~this:(x1882 : t) ->
               fun ~ev:(x1883 : IDBVersionChangeEvent.t) ->
                 any_of_js
                   (Ojs.apply x1881
                      [|(t_to_js x1882);(IDBVersionChangeEvent.t_to_js x1883)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1879) "onupgradeneeded")
    let (set_onupgradeneeded :
      'tags this ->
        (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null -> unit)
      =
      fun (x1884 : 'tags this) ->
        fun (x1885 : (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1884) "onupgradeneeded"
            (or_null_to_js
               (fun (x1886 : this:t -> ev:IDBVersionChangeEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1887 : Ojs.t) ->
                       fun (x1888 : Ojs.t) ->
                         any_to_js
                           (x1886 ~this:(t_of_js x1887)
                              ~ev:(IDBVersionChangeEvent.t_of_js x1888))))
               x1885)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1898 : 'tags this) ->
        fun ~type_:(x1890 : 'K) ->
          fun ~listener:(x1891 : this:t -> ev:any -> any) ->
            fun
              ?options:(x1892 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1900 = this_to_js Obj.magic x1898 in
                   Ojs.call (Ojs.get_prop_ascii x1900 "addEventListener")
                     "apply"
                     [|x1900;((let x1893 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1893 "push" [|(Obj.magic x1890)|]);
                               ignore
                                 (Ojs.call x1893 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1896 : Ojs.t) ->
                                            fun (x1897 : Ojs.t) ->
                                              any_to_js
                                                (x1891 ~this:(t_of_js x1896)
                                                   ~ev:(any_of_js x1897))))|]);
                               (match x1892 with
                                | Some x1894 ->
                                    ignore
                                      (Ojs.call x1893 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x1894)|])
                                | None -> ());
                               x1893))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1907 : 'tags this) ->
        fun ~type_:(x1901 : string) ->
          fun ~listener:(x1902 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x1903 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1909 = this_to_js Obj.magic x1907 in
                   Ojs.call (Ojs.get_prop_ascii x1909 "addEventListener")
                     "apply"
                     [|x1909;((let x1904 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1904 "push"
                                    [|(Ojs.string_to_js x1901)|]);
                               ignore
                                 (Ojs.call x1904 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1902)|]);
                               (match x1903 with
                                | Some x1905 ->
                                    ignore
                                      (Ojs.call x1904 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x1905)|])
                                | None -> ());
                               x1904))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1918 : 'tags this) ->
        fun ~type_:(x1910 : 'K) ->
          fun ~listener:(x1911 : this:t -> ev:any -> any) ->
            fun ?options:(x1912 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1920 = this_to_js Obj.magic x1918 in
                   Ojs.call (Ojs.get_prop_ascii x1920 "removeEventListener")
                     "apply"
                     [|x1920;((let x1913 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1913 "push" [|(Obj.magic x1910)|]);
                               ignore
                                 (Ojs.call x1913 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1916 : Ojs.t) ->
                                            fun (x1917 : Ojs.t) ->
                                              any_to_js
                                                (x1911 ~this:(t_of_js x1916)
                                                   ~ev:(any_of_js x1917))))|]);
                               (match x1912 with
                                | Some x1914 ->
                                    ignore
                                      (Ojs.call x1913 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x1914)|])
                                | None -> ());
                               x1913))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1927 : 'tags this) ->
        fun ~type_:(x1921 : string) ->
          fun ~listener:(x1922 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x1923 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1929 = this_to_js Obj.magic x1927 in
                   Ojs.call (Ojs.get_prop_ascii x1929 "removeEventListener")
                     "apply"
                     [|x1929;((let x1924 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1924 "push"
                                    [|(Ojs.string_to_js x1921)|]);
                               ignore
                                 (Ojs.call x1924 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1922)|]);
                               (match x1923 with
                                | Some x1925 ->
                                    ignore
                                      (Ojs.call x1924 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x1925)|])
                                | None -> ());
                               x1924))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest")
             [||])
  end
module IDBDatabaseInfo =
  struct
    type t = [ `IDBDatabaseInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1931 : Ojs.t) -> t_of_js x1931
    and t_0_to_js : t_0 -> Ojs.t = fun (x1930 : t) -> t_to_js x1930
    type tags = [ `IDBDatabaseInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1934 : Ojs.t) -> intf_of_js __tags_of_js x1934
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1932 : __tags intf) -> intf_to_js __tags_to_js x1932
    let (get_name : 'tags this -> string) =
      fun (x1936 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1936) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x1938 : 'tags this) ->
        fun (x1939 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1938) "name"
            (Ojs.string_to_js x1939)
    let (get_version : 'tags this -> float) =
      fun (x1941 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1941) "version")
    let (set_version : 'tags this -> float -> unit) =
      fun (x1943 : 'tags this) ->
        fun (x1944 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1943) "version"
            (Ojs.float_to_js x1944)
    let cast_from = Obj.magic
  end
module IndexedDBStatic =
  struct
    let (cmp : first:any -> second:any -> float) =
      fun ~first:(x1946 : any) ->
        fun ~second:(x1947 : any) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "cmp"
               [|(any_to_js x1946);(any_to_js x1947)|])
    let (databases : unit -> IDBDatabaseInfo.t list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x1948 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x1948)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "databases"
             [||])
    let (deleteDatabase : string -> IDBOpenDBRequest.t) =
      fun (x1950 : string) ->
        IDBOpenDBRequest.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB")
             "deleteDatabase" [|(Ojs.string_to_js x1950)|])
    let (open_ : name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun ~name:(x1951 : string) ->
        fun ?version:(x1952 : float option) ->
          fun () ->
            IDBOpenDBRequest.t_of_js
              (let x1955 = Ojs.get_prop_ascii Ojs.global "indexedDB" in
               Ojs.call (Ojs.get_prop_ascii x1955 "open") "apply"
                 [|x1955;((let x1953 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1953 "push"
                                [|(Ojs.string_to_js x1951)|]);
                           (match x1952 with
                            | Some x1954 ->
                                ignore
                                  (Ojs.call x1953 "push"
                                     [|(Ojs.float_to_js x1954)|])
                            | None -> ());
                           x1953))|])
  end
module FontFaceSetLoadStatus =
  struct
    type t = [ `L_s100_loaded  | `L_s102_loading ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1957 : Ojs.t) ->
        let x1958 = x1957 in
        match Ojs.string_of_js x1958 with
        | "loaded" -> `L_s100_loaded
        | "loading" -> `L_s102_loading
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1956 : [ `L_s100_loaded  | `L_s102_loading ]) ->
        match x1956 with
        | `L_s100_loaded -> Ojs.string_to_js "loaded"
        | `L_s102_loading -> Ojs.string_to_js "loading"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1960 : Ojs.t) -> t_of_js x1960
    and t_0_to_js : t_0 -> Ojs.t = fun (x1959 : t) -> t_to_js x1959
  end
module FontFaceLoadStatus =
  struct
    type t =
      [ `L_s67_error  | `L_s100_loaded  | `L_s102_loading 
      | `L_s197_unloaded ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1962 : Ojs.t) ->
        let x1963 = x1962 in
        match Ojs.string_of_js x1963 with
        | "error" -> `L_s67_error
        | "loaded" -> `L_s100_loaded
        | "loading" -> `L_s102_loading
        | "unloaded" -> `L_s197_unloaded
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1961 :
          [ `L_s67_error  | `L_s100_loaded  | `L_s102_loading 
          | `L_s197_unloaded ])
        ->
        match x1961 with
        | `L_s67_error -> Ojs.string_to_js "error"
        | `L_s100_loaded -> Ojs.string_to_js "loaded"
        | `L_s102_loading -> Ojs.string_to_js "loading"
        | `L_s197_unloaded -> Ojs.string_to_js "unloaded"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1965 : Ojs.t) -> t_of_js x1965
    and t_0_to_js : t_0 -> Ojs.t = fun (x1964 : t) -> t_to_js x1964
  end
module FontFaceDescriptors =
  struct
    type t = [ `FontFaceDescriptors ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1967 : Ojs.t) -> t_of_js x1967
    and t_0_to_js : t_0 -> Ojs.t = fun (x1966 : t) -> t_to_js x1966
    type tags = [ `FontFaceDescriptors ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceDescriptors ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1970 : Ojs.t) -> intf_of_js __tags_of_js x1970
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1968 : __tags intf) -> intf_to_js __tags_to_js x1968
    let (get_display : 'tags this -> string) =
      fun (x1972 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1972) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x1974 : 'tags this) ->
        fun (x1975 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1974) "display"
            (Ojs.string_to_js x1975)
    let (get_featureSettings : 'tags this -> string) =
      fun (x1977 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1977) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x1979 : 'tags this) ->
        fun (x1980 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1979) "featureSettings"
            (Ojs.string_to_js x1980)
    let (get_stretch : 'tags this -> string) =
      fun (x1982 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1982) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x1984 : 'tags this) ->
        fun (x1985 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1984) "stretch"
            (Ojs.string_to_js x1985)
    let (get_style : 'tags this -> string) =
      fun (x1987 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1987) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x1989 : 'tags this) ->
        fun (x1990 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1989) "style"
            (Ojs.string_to_js x1990)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x1992 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1992) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x1994 : 'tags this) ->
        fun (x1995 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1994) "unicodeRange"
            (Ojs.string_to_js x1995)
    let (get_variant : 'tags this -> string) =
      fun (x1997 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1997) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x1999 : 'tags this) ->
        fun (x2000 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1999) "variant"
            (Ojs.string_to_js x2000)
    let (get_weight : 'tags this -> string) =
      fun (x2002 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2002) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x2004 : 'tags this) ->
        fun (x2005 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2004) "weight"
            (Ojs.string_to_js x2005)
    let cast_from = Obj.magic
  end
module BinaryData =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x2010 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x2010
    and t_to_js : t -> Ojs.t =
      fun (x2007 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x2007
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2014 : Ojs.t) -> t_of_js x2014
    and t_0_to_js : t_0 -> Ojs.t = fun (x2013 : t) -> t_to_js x2013
  end
module rec
  AnonymousInterface38:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FontFace.t
                         val set_prototype : t -> FontFace.t -> unit
                         val create :
                           t ->
                             family:string ->
                               source:BinaryData.t or_string ->
                                 ?descriptors:FontFaceDescriptors.t ->
                                   unit -> FontFace.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2016 : Ojs.t) -> x2016
    and t_to_js : t -> Ojs.t = fun (x2015 : Ojs.t) -> x2015
    let (get_prototype : t -> FontFace.t) =
      fun (x2017 : t) ->
        FontFace.t_of_js (Ojs.get_prop_ascii (t_to_js x2017) "prototype")
    let (set_prototype : t -> FontFace.t -> unit) =
      fun (x2018 : t) ->
        fun (x2019 : FontFace.t) ->
          Ojs.set_prop_ascii (t_to_js x2018) "prototype"
            (FontFace.t_to_js x2019)
    let (create :
      t ->
        family:string ->
          source:BinaryData.t or_string ->
            ?descriptors:FontFaceDescriptors.t -> unit -> FontFace.t)
      =
      fun (x2026 : t) ->
        fun ~family:(x2020 : string) ->
          fun ~source:(x2021 : BinaryData.t or_string) ->
            fun ?descriptors:(x2022 : FontFaceDescriptors.t option) ->
              fun () ->
                FontFace.t_of_js
                  (Ojs.new_obj_arr (t_to_js x2026)
                     (let x2023 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2023 "push" [|(Ojs.string_to_js x2020)|]);
                      ignore
                        (Ojs.call x2023 "push"
                           [|(or_string_to_js BinaryData.t_to_js x2021)|]);
                      (match x2022 with
                       | Some x2024 ->
                           ignore
                             (Ojs.call x2023 "push"
                                [|(FontFaceDescriptors.t_to_js x2024)|])
                       | None -> ());
                      x2023))
  end
 and
  FontFace:sig
             type t = [ `FontFace ] intf
             type t_0 = t
             [@@@js.stop ]
             type tags = [ `FontFace ]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem type tags = [ `FontFace ]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_ascentOverride : 'tags this -> string
             val set_ascentOverride : 'tags this -> string -> unit
             val get_descentOverride : 'tags this -> string
             val set_descentOverride : 'tags this -> string -> unit
             val get_display : 'tags this -> string
             val set_display : 'tags this -> string -> unit
             val get_family : 'tags this -> string
             val set_family : 'tags this -> string -> unit
             val get_featureSettings : 'tags this -> string
             val set_featureSettings : 'tags this -> string -> unit
             val get_lineGapOverride : 'tags this -> string
             val set_lineGapOverride : 'tags this -> string -> unit
             val get_loaded : 'tags this -> t Promise.t_1
             val get_status : 'tags this -> FontFaceLoadStatus.t
             val get_stretch : 'tags this -> string
             val set_stretch : 'tags this -> string -> unit
             val get_style : 'tags this -> string
             val set_style : 'tags this -> string -> unit
             val get_unicodeRange : 'tags this -> string
             val set_unicodeRange : 'tags this -> string -> unit
             val get_variant : 'tags this -> string
             val set_variant : 'tags this -> string -> unit
             val get_variationSettings : 'tags this -> string
             val set_variationSettings : 'tags this -> string -> unit
             val get_weight : 'tags this -> string
             val set_weight : 'tags this -> string -> unit
             val load : 'tags this -> t Promise.t_1
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create :
               family:string ->
                 source:BinaryData.t or_string ->
                   ?descriptors:FontFaceDescriptors.t -> unit -> t
           end =
  struct
    type t = [ `FontFace ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2028 : Ojs.t) -> t_of_js x2028
    and t_0_to_js : t_0 -> Ojs.t = fun (x2027 : t) -> t_to_js x2027
    type tags = [ `FontFace ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2031 : Ojs.t) -> intf_of_js __tags_of_js x2031
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2029 : __tags intf) -> intf_to_js __tags_to_js x2029
    let (get_ascentOverride : 'tags this -> string) =
      fun (x2033 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2033) "ascentOverride")
    let (set_ascentOverride : 'tags this -> string -> unit) =
      fun (x2035 : 'tags this) ->
        fun (x2036 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2035) "ascentOverride"
            (Ojs.string_to_js x2036)
    let (get_descentOverride : 'tags this -> string) =
      fun (x2038 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2038) "descentOverride")
    let (set_descentOverride : 'tags this -> string -> unit) =
      fun (x2040 : 'tags this) ->
        fun (x2041 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2040) "descentOverride"
            (Ojs.string_to_js x2041)
    let (get_display : 'tags this -> string) =
      fun (x2043 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2043) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x2045 : 'tags this) ->
        fun (x2046 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2045) "display"
            (Ojs.string_to_js x2046)
    let (get_family : 'tags this -> string) =
      fun (x2048 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2048) "family")
    let (set_family : 'tags this -> string -> unit) =
      fun (x2050 : 'tags this) ->
        fun (x2051 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2050) "family"
            (Ojs.string_to_js x2051)
    let (get_featureSettings : 'tags this -> string) =
      fun (x2053 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2053) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x2055 : 'tags this) ->
        fun (x2056 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2055) "featureSettings"
            (Ojs.string_to_js x2056)
    let (get_lineGapOverride : 'tags this -> string) =
      fun (x2058 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2058) "lineGapOverride")
    let (set_lineGapOverride : 'tags this -> string -> unit) =
      fun (x2060 : 'tags this) ->
        fun (x2061 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2060) "lineGapOverride"
            (Ojs.string_to_js x2061)
    let (get_loaded : 'tags this -> t Promise.t_1) =
      fun (x2063 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2063) "loaded")
    let (get_status : 'tags this -> FontFaceLoadStatus.t) =
      fun (x2066 : 'tags this) ->
        FontFaceLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2066) "status")
    let (get_stretch : 'tags this -> string) =
      fun (x2068 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2068) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x2070 : 'tags this) ->
        fun (x2071 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2070) "stretch"
            (Ojs.string_to_js x2071)
    let (get_style : 'tags this -> string) =
      fun (x2073 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2073) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x2075 : 'tags this) ->
        fun (x2076 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2075) "style"
            (Ojs.string_to_js x2076)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x2078 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2078) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x2080 : 'tags this) ->
        fun (x2081 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2080) "unicodeRange"
            (Ojs.string_to_js x2081)
    let (get_variant : 'tags this -> string) =
      fun (x2083 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2083) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x2085 : 'tags this) ->
        fun (x2086 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2085) "variant"
            (Ojs.string_to_js x2086)
    let (get_variationSettings : 'tags this -> string) =
      fun (x2088 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2088)
             "variationSettings")
    let (set_variationSettings : 'tags this -> string -> unit) =
      fun (x2090 : 'tags this) ->
        fun (x2091 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2090) "variationSettings"
            (Ojs.string_to_js x2091)
    let (get_weight : 'tags this -> string) =
      fun (x2093 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2093) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x2095 : 'tags this) ->
        fun (x2096 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2095) "weight"
            (Ojs.string_to_js x2096)
    let (load : 'tags this -> t Promise.t_1) =
      fun (x2098 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x2098) "load" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFace")
             "prototype")
    let (create :
      family:string ->
        source:BinaryData.t or_string ->
          ?descriptors:FontFaceDescriptors.t -> unit -> t)
      =
      fun ~family:(x2101 : string) ->
        fun ~source:(x2102 : BinaryData.t or_string) ->
          fun ?descriptors:(x2103 : FontFaceDescriptors.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "FontFace")
                   (let x2104 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2104 "push" [|(Ojs.string_to_js x2101)|]);
                    ignore
                      (Ojs.call x2104 "push"
                         [|(or_string_to_js BinaryData.t_to_js x2102)|]);
                    (match x2103 with
                     | Some x2105 ->
                         ignore
                           (Ojs.call x2104 "push"
                              [|(FontFaceDescriptors.t_to_js x2105)|])
                     | None -> ());
                    x2104))
  end
module rec
  AnonymousInterface39:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FontFaceSet.t
                         val set_prototype : t -> FontFaceSet.t -> unit
                         val create :
                           t -> initialFaces:FontFace.t list -> FontFaceSet.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2108 : Ojs.t) -> x2108
    and t_to_js : t -> Ojs.t = fun (x2107 : Ojs.t) -> x2107
    let (get_prototype : t -> FontFaceSet.t) =
      fun (x2109 : t) ->
        FontFaceSet.t_of_js (Ojs.get_prop_ascii (t_to_js x2109) "prototype")
    let (set_prototype : t -> FontFaceSet.t -> unit) =
      fun (x2110 : t) ->
        fun (x2111 : FontFaceSet.t) ->
          Ojs.set_prop_ascii (t_to_js x2110) "prototype"
            (FontFaceSet.t_to_js x2111)
    let (create : t -> initialFaces:FontFace.t list -> FontFaceSet.t) =
      fun (x2114 : t) ->
        fun ~initialFaces:(x2112 : FontFace.t list) ->
          FontFaceSet.t_of_js
            (Ojs.new_obj (t_to_js x2114)
               [|(Ojs.list_to_js FontFace.t_to_js x2112)|])
  end
 and
  FontFaceSet:sig
                type t =
                  [ `EventTarget  | `FontFaceSet  | FontFace.t Set.tags_1]
                    intf
                type t_0 = t
                [@@@js.stop ]
                type tags =
                  [ `EventTarget  | `FontFaceSet  | FontFace.t Set.tags_1]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags =
                    [ `EventTarget  | `FontFaceSet  | FontFace.t Set.tags_1]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `FontFaceSet ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_onloading :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onloading :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_onloadingdone :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onloadingdone :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_onloadingerror :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onloadingerror :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_ready : 'tags this -> t Promise.t_1
                val get_status : 'tags this -> FontFaceSetLoadStatus.t
                val check :
                  'tags this -> font:string -> ?text:string -> unit -> bool
                val load :
                  'tags this ->
                    font:string ->
                      ?text:string -> unit -> FontFace.t list Promise.t_1
                val forEach :
                  'tags this ->
                    callbackfn:(value:FontFace.t ->
                                  key:FontFace.t -> parent:t -> unit)
                      -> ?thisArg:any -> unit -> unit
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : FontFace.t list -> t
              end =
  struct
    type t = [ `EventTarget  | `FontFaceSet  | FontFace.t Set.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2116 : Ojs.t) -> t_of_js x2116
    and t_0_to_js : t_0 -> Ojs.t = fun (x2115 : t) -> t_to_js x2115
    type tags = [ `EventTarget  | `FontFaceSet  | FontFace.t Set.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSet ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2119 : Ojs.t) -> intf_of_js __tags_of_js x2119
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2117 : __tags intf) -> intf_to_js __tags_to_js x2117
    let (get_onloading : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x2121 : 'tags this) ->
        or_null_of_js
          (fun (x2123 : Ojs.t) ->
             fun ~this:(x2124 : t) ->
               fun ~ev:(x2125 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2123 [|(t_to_js x2124);(Event.t_to_js x2125)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2121) "onloading")
    let (set_onloading :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x2126 : 'tags this) ->
        fun (x2127 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2126) "onloading"
            (or_null_to_js
               (fun (x2128 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2129 : Ojs.t) ->
                       fun (x2130 : Ojs.t) ->
                         any_to_js
                           (x2128 ~this:(t_of_js x2129)
                              ~ev:(Event.t_of_js x2130)))) x2127)
    let (get_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x2132 : 'tags this) ->
        or_null_of_js
          (fun (x2134 : Ojs.t) ->
             fun ~this:(x2135 : t) ->
               fun ~ev:(x2136 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2134 [|(t_to_js x2135);(Event.t_to_js x2136)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2132) "onloadingdone")
    let (set_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x2137 : 'tags this) ->
        fun (x2138 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2137) "onloadingdone"
            (or_null_to_js
               (fun (x2139 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2140 : Ojs.t) ->
                       fun (x2141 : Ojs.t) ->
                         any_to_js
                           (x2139 ~this:(t_of_js x2140)
                              ~ev:(Event.t_of_js x2141)))) x2138)
    let (get_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x2143 : 'tags this) ->
        or_null_of_js
          (fun (x2145 : Ojs.t) ->
             fun ~this:(x2146 : t) ->
               fun ~ev:(x2147 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2145 [|(t_to_js x2146);(Event.t_to_js x2147)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2143) "onloadingerror")
    let (set_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x2148 : 'tags this) ->
        fun (x2149 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2148) "onloadingerror"
            (or_null_to_js
               (fun (x2150 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2151 : Ojs.t) ->
                       fun (x2152 : Ojs.t) ->
                         any_to_js
                           (x2150 ~this:(t_of_js x2151)
                              ~ev:(Event.t_of_js x2152)))) x2149)
    let (get_ready : 'tags this -> t Promise.t_1) =
      fun (x2154 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2154) "ready")
    let (get_status : 'tags this -> FontFaceSetLoadStatus.t) =
      fun (x2157 : 'tags this) ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2157) "status")
    let (check : 'tags this -> font:string -> ?text:string -> unit -> bool) =
      fun (x2163 : 'tags this) ->
        fun ~font:(x2159 : string) ->
          fun ?text:(x2160 : string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2165 = this_to_js Obj.magic x2163 in
                 Ojs.call (Ojs.get_prop_ascii x2165 "check") "apply"
                   [|x2165;((let x2161 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2161 "push"
                                  [|(Ojs.string_to_js x2159)|]);
                             (match x2160 with
                              | Some x2162 ->
                                  ignore
                                    (Ojs.call x2161 "push"
                                       [|(Ojs.string_to_js x2162)|])
                              | None -> ());
                             x2161))|])
    let (load :
      'tags this ->
        font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1)
      =
      fun (x2170 : 'tags this) ->
        fun ~font:(x2166 : string) ->
          fun ?text:(x2167 : string option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x2173 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x2173)
                (let x2172 = this_to_js Obj.magic x2170 in
                 Ojs.call (Ojs.get_prop_ascii x2172 "load") "apply"
                   [|x2172;((let x2168 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2168 "push"
                                  [|(Ojs.string_to_js x2166)|]);
                             (match x2167 with
                              | Some x2169 ->
                                  ignore
                                    (Ojs.call x2168 "push"
                                       [|(Ojs.string_to_js x2169)|])
                              | None -> ());
                             x2168))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x2182 : 'tags this) ->
        fun
          ~callbackfn:(x2175 :
                        value:FontFace.t ->
                          key:FontFace.t -> parent:t -> unit)
          ->
          fun ?thisArg:(x2176 : any option) ->
            fun () ->
              ignore
                (let x2184 = this_to_js Obj.magic x2182 in
                 Ojs.call (Ojs.get_prop_ascii x2184 "forEach") "apply"
                   [|x2184;((let x2177 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2177 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2179 : Ojs.t) ->
                                          fun (x2180 : Ojs.t) ->
                                            fun (x2181 : Ojs.t) ->
                                              x2175
                                                ~value:(FontFace.t_of_js
                                                          x2179)
                                                ~key:(FontFace.t_of_js x2180)
                                                ~parent:(t_of_js x2181)))|]);
                             (match x2176 with
                              | Some x2178 ->
                                  ignore
                                    (Ojs.call x2177 "push"
                                       [|(any_to_js x2178)|])
                              | None -> ());
                             x2177))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2193 : 'tags this) ->
        fun ~type_:(x2185 : 'K) ->
          fun ~listener:(x2186 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2187 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2195 = this_to_js Obj.magic x2193 in
                   Ojs.call (Ojs.get_prop_ascii x2195 "addEventListener")
                     "apply"
                     [|x2195;((let x2188 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2188 "push" [|(Obj.magic x2185)|]);
                               ignore
                                 (Ojs.call x2188 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2191 : Ojs.t) ->
                                            fun (x2192 : Ojs.t) ->
                                              any_to_js
                                                (x2186 ~this:(t_of_js x2191)
                                                   ~ev:(any_of_js x2192))))|]);
                               (match x2187 with
                                | Some x2189 ->
                                    ignore
                                      (Ojs.call x2188 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x2189)|])
                                | None -> ());
                               x2188))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2202 : 'tags this) ->
        fun ~type_:(x2196 : string) ->
          fun ~listener:(x2197 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2198 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2204 = this_to_js Obj.magic x2202 in
                   Ojs.call (Ojs.get_prop_ascii x2204 "addEventListener")
                     "apply"
                     [|x2204;((let x2199 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2199 "push"
                                    [|(Ojs.string_to_js x2196)|]);
                               ignore
                                 (Ojs.call x2199 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2197)|]);
                               (match x2198 with
                                | Some x2200 ->
                                    ignore
                                      (Ojs.call x2199 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x2200)|])
                                | None -> ());
                               x2199))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2213 : 'tags this) ->
        fun ~type_:(x2205 : 'K) ->
          fun ~listener:(x2206 : this:t -> ev:any -> any) ->
            fun ?options:(x2207 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2215 = this_to_js Obj.magic x2213 in
                   Ojs.call (Ojs.get_prop_ascii x2215 "removeEventListener")
                     "apply"
                     [|x2215;((let x2208 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2208 "push" [|(Obj.magic x2205)|]);
                               ignore
                                 (Ojs.call x2208 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2211 : Ojs.t) ->
                                            fun (x2212 : Ojs.t) ->
                                              any_to_js
                                                (x2206 ~this:(t_of_js x2211)
                                                   ~ev:(any_of_js x2212))))|]);
                               (match x2207 with
                                | Some x2209 ->
                                    ignore
                                      (Ojs.call x2208 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x2209)|])
                                | None -> ());
                               x2208))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2222 : 'tags this) ->
        fun ~type_:(x2216 : string) ->
          fun ~listener:(x2217 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x2218 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2224 = this_to_js Obj.magic x2222 in
                   Ojs.call (Ojs.get_prop_ascii x2224 "removeEventListener")
                     "apply"
                     [|x2224;((let x2219 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2219 "push"
                                    [|(Ojs.string_to_js x2216)|]);
                               ignore
                                 (Ojs.call x2219 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2217)|]);
                               (match x2218 with
                                | Some x2220 ->
                                    ignore
                                      (Ojs.call x2219 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x2220)|])
                                | None -> ());
                               x2219))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             "prototype")
    let (create : FontFace.t list -> t) =
      fun (x2225 : FontFace.t list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             [|(Ojs.list_to_js FontFace.t_to_js x2225)|])
  end
module FontsStatic =
  struct
    let (onloading :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x2227 : Ojs.t) ->
             fun ~this:(x2228 : FontFaceSet.t) ->
               fun ~ev:(x2229 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2227
                      [|(FontFaceSet.t_to_js x2228);(Event.t_to_js x2229)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloading")
    let (onloadingdone :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x2230 : Ojs.t) ->
             fun ~this:(x2231 : FontFaceSet.t) ->
               fun ~ev:(x2232 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2230
                      [|(FontFaceSet.t_to_js x2231);(Event.t_to_js x2232)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingdone")
    let (onloadingerror :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x2233 : Ojs.t) ->
             fun ~this:(x2234 : FontFaceSet.t) ->
               fun ~ev:(x2235 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2233
                      [|(FontFaceSet.t_to_js x2234);(Event.t_to_js x2235)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingerror")
    let (ready : unit -> FontFaceSet.t Promise.t_1) =
      fun () ->
        Promise.t_1_of_js FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts") "ready")
    let (status : unit -> FontFaceSetLoadStatus.t) =
      fun () ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "status")
    let (check : font:string -> ?text:string -> unit -> bool) =
      fun ~font:(x2237 : string) ->
        fun ?text:(x2238 : string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x2241 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2241 "check") "apply"
                 [|x2241;((let x2239 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2239 "push"
                                [|(Ojs.string_to_js x2237)|]);
                           (match x2238 with
                            | Some x2240 ->
                                ignore
                                  (Ojs.call x2239 "push"
                                     [|(Ojs.string_to_js x2240)|])
                            | None -> ());
                           x2239))|])
    let (load :
      font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1) =
      fun ~font:(x2242 : string) ->
        fun ?text:(x2243 : string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x2247 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x2247)
              (let x2246 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2246 "load") "apply"
                 [|x2246;((let x2244 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2244 "push"
                                [|(Ojs.string_to_js x2242)|]);
                           (match x2243 with
                            | Some x2245 ->
                                ignore
                                  (Ojs.call x2244 "push"
                                     [|(Ojs.string_to_js x2245)|])
                            | None -> ());
                           x2244))|])
    let (forEach :
      callbackfn:(value:FontFace.t ->
                    key:FontFace.t -> parent:FontFaceSet.t -> unit)
        -> ?thisArg:any -> unit -> unit)
      =
      fun
        ~callbackfn:(x2249 :
                      value:FontFace.t ->
                        key:FontFace.t -> parent:FontFaceSet.t -> unit)
        ->
        fun ?thisArg:(x2250 : any option) ->
          fun () ->
            ignore
              (let x2256 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2256 "forEach") "apply"
                 [|x2256;((let x2251 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2251 "push"
                                [|(Ojs.fun_to_js 3
                                     (fun (x2253 : Ojs.t) ->
                                        fun (x2254 : Ojs.t) ->
                                          fun (x2255 : Ojs.t) ->
                                            x2249
                                              ~value:(FontFace.t_of_js x2253)
                                              ~key:(FontFace.t_of_js x2254)
                                              ~parent:(FontFaceSet.t_of_js
                                                         x2255)))|]);
                           (match x2250 with
                            | Some x2252 ->
                                ignore
                                  (Ojs.call x2251 "push"
                                     [|(any_to_js x2252)|])
                            | None -> ());
                           x2251))|])
    let (addEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2257 : 'K) ->
        fun ~listener:(x2258 : this:FontFaceSet.t -> ev:any -> any) ->
          fun ?options:(x2259 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x2265 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2265 "addEventListener")
                   "apply"
                   [|x2265;((let x2260 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2260 "push" [|(Obj.magic x2257)|]);
                             ignore
                               (Ojs.call x2260 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2263 : Ojs.t) ->
                                          fun (x2264 : Ojs.t) ->
                                            any_to_js
                                              (x2258
                                                 ~this:(FontFaceSet.t_of_js
                                                          x2263)
                                                 ~ev:(any_of_js x2264))))|]);
                             (match x2259 with
                              | Some x2261 ->
                                  ignore
                                    (Ojs.call x2260 "push"
                                       [|(or_boolean_to_js
                                            AddEventListenerOptions.t_to_js
                                            x2261)|])
                              | None -> ());
                             x2260))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2266 : string) ->
        fun ~listener:(x2267 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x2268 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x2272 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2272 "addEventListener")
                   "apply"
                   [|x2272;((let x2269 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2269 "push"
                                  [|(Ojs.string_to_js x2266)|]);
                             ignore
                               (Ojs.call x2269 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x2267)|]);
                             (match x2268 with
                              | Some x2270 ->
                                  ignore
                                    (Ojs.call x2269 "push"
                                       [|(or_boolean_to_js
                                            AddEventListenerOptions.t_to_js
                                            x2270)|])
                              | None -> ());
                             x2269))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2273 : 'K) ->
        fun ~listener:(x2274 : this:FontFaceSet.t -> ev:any -> any) ->
          fun ?options:(x2275 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x2281 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2281 "removeEventListener")
                   "apply"
                   [|x2281;((let x2276 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2276 "push" [|(Obj.magic x2273)|]);
                             ignore
                               (Ojs.call x2276 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2279 : Ojs.t) ->
                                          fun (x2280 : Ojs.t) ->
                                            any_to_js
                                              (x2274
                                                 ~this:(FontFaceSet.t_of_js
                                                          x2279)
                                                 ~ev:(any_of_js x2280))))|]);
                             (match x2275 with
                              | Some x2277 ->
                                  ignore
                                    (Ojs.call x2276 "push"
                                       [|(or_boolean_to_js
                                            EventListenerOptions.t_to_js
                                            x2277)|])
                              | None -> ());
                             x2276))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2282 : string) ->
        fun ~listener:(x2283 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x2284 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x2288 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2288 "removeEventListener")
                   "apply"
                   [|x2288;((let x2285 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2285 "push"
                                  [|(Ojs.string_to_js x2282)|]);
                             ignore
                               (Ojs.call x2285 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x2283)|]);
                             (match x2284 with
                              | Some x2286 ->
                                  ignore
                                    (Ojs.call x2285 "push"
                                       [|(or_boolean_to_js
                                            EventListenerOptions.t_to_js
                                            x2286)|])
                              | None -> ());
                             x2285))|])
  end
module Algorithm =
  struct
    type t = [ `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2290 : Ojs.t) -> t_of_js x2290
    and t_0_to_js : t_0 -> Ojs.t = fun (x2289 : t) -> t_to_js x2289
    type tags = [ `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Algorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2293 : Ojs.t) -> intf_of_js __tags_of_js x2293
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2291 : __tags intf) -> intf_to_js __tags_to_js x2291
    let (get_name : 'tags this -> string) =
      fun (x2295 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2295) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2297 : 'tags this) ->
        fun (x2298 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2297) "name"
            (Ojs.string_to_js x2298)
    let cast_from = Obj.magic
  end
module RsaPssParams =
  struct
    type t = [ `Algorithm  | `RsaPssParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2301 : Ojs.t) -> t_of_js x2301
    and t_0_to_js : t_0 -> Ojs.t = fun (x2300 : t) -> t_to_js x2300
    type tags = [ `Algorithm  | `RsaPssParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaPssParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2304 : Ojs.t) -> intf_of_js __tags_of_js x2304
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2302 : __tags intf) -> intf_to_js __tags_to_js x2302
    let (get_saltLength : 'tags this -> float) =
      fun (x2306 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2306) "saltLength")
    let (set_saltLength : 'tags this -> float -> unit) =
      fun (x2308 : 'tags this) ->
        fun (x2309 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2308) "saltLength"
            (Ojs.float_to_js x2309)
    let cast_from = Obj.magic
  end
module RsaOaepParams =
  struct
    type t = [ `Algorithm  | `RsaOaepParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2312 : Ojs.t) -> t_of_js x2312
    and t_0_to_js : t_0 -> Ojs.t = fun (x2311 : t) -> t_to_js x2311
    type tags = [ `Algorithm  | `RsaOaepParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOaepParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2315 : Ojs.t) -> intf_of_js __tags_of_js x2315
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2313 : __tags intf) -> intf_to_js __tags_to_js x2313
    let (get_label : 'tags this -> BufferSource.t) =
      fun (x2317 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2317) "label")
    let (set_label : 'tags this -> BufferSource.t -> unit) =
      fun (x2319 : 'tags this) ->
        fun (x2320 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2319) "label"
            (BufferSource.t_to_js x2320)
    let cast_from = Obj.magic
  end
module BigInteger =
  struct
    type t = Uint8Array.t_0
    let rec t_of_js : Ojs.t -> t =
      fun (x2323 : Ojs.t) -> Uint8Array.t_0_of_js x2323
    and t_to_js : t -> Ojs.t =
      fun (x2322 : Uint8Array.t_0) -> Uint8Array.t_0_to_js x2322
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2325 : Ojs.t) -> t_of_js x2325
    and t_0_to_js : t_0 -> Ojs.t = fun (x2324 : t) -> t_to_js x2324
  end
module RsaKeyGenParams =
  struct
    type t = [ `Algorithm  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2327 : Ojs.t) -> t_of_js x2327
    and t_0_to_js : t_0 -> Ojs.t = fun (x2326 : t) -> t_to_js x2326
    type tags = [ `Algorithm  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2330 : Ojs.t) -> intf_of_js __tags_of_js x2330
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2328 : __tags intf) -> intf_to_js __tags_to_js x2328
    let (get_modulusLength : 'tags this -> float) =
      fun (x2332 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2332) "modulusLength")
    let (set_modulusLength : 'tags this -> float -> unit) =
      fun (x2334 : 'tags this) ->
        fun (x2335 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2334) "modulusLength"
            (Ojs.float_to_js x2335)
    let (get_publicExponent : 'tags this -> BigInteger.t) =
      fun (x2337 : 'tags this) ->
        BigInteger.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2337) "publicExponent")
    let (set_publicExponent : 'tags this -> BigInteger.t -> unit) =
      fun (x2339 : 'tags this) ->
        fun (x2340 : BigInteger.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2339) "publicExponent"
            (BigInteger.t_to_js x2340)
    let cast_from = Obj.magic
  end
module AlgorithmIdentifier =
  struct
    type t = Algorithm.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x2344 : Ojs.t) -> or_string_of_js Algorithm.t_of_js x2344
    and t_to_js : t -> Ojs.t =
      fun (x2342 : Algorithm.t or_string) ->
        or_string_to_js Algorithm.t_to_js x2342
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2347 : Ojs.t) -> t_of_js x2347
    and t_0_to_js : t_0 -> Ojs.t = fun (x2346 : t) -> t_to_js x2346
  end
module HashAlgorithmIdentifier =
  struct
    type t = AlgorithmIdentifier.t
    let rec t_of_js : Ojs.t -> t =
      fun (x2349 : Ojs.t) -> AlgorithmIdentifier.t_of_js x2349
    and t_to_js : t -> Ojs.t =
      fun (x2348 : AlgorithmIdentifier.t) ->
        AlgorithmIdentifier.t_to_js x2348
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2351 : Ojs.t) -> t_of_js x2351
    and t_0_to_js : t_0 -> Ojs.t = fun (x2350 : t) -> t_to_js x2350
  end
module RsaHashedKeyGenParams =
  struct
    type t =
      [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2353 : Ojs.t) -> t_of_js x2353
    and t_0_to_js : t_0 -> Ojs.t = fun (x2352 : t) -> t_to_js x2352
    type tags = [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2356 : Ojs.t) -> intf_of_js __tags_of_js x2356
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2354 : __tags intf) -> intf_to_js __tags_to_js x2354
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2358 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2358) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2360 : 'tags this) ->
        fun (x2361 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2360) "hash"
            (HashAlgorithmIdentifier.t_to_js x2361)
    let cast_from = Obj.magic
  end
module RsaHashedImportParams =
  struct
    type t = [ `Algorithm  | `RsaHashedImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2364 : Ojs.t) -> t_of_js x2364
    and t_0_to_js : t_0 -> Ojs.t = fun (x2363 : t) -> t_to_js x2363
    type tags = [ `Algorithm  | `RsaHashedImportParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2367 : Ojs.t) -> intf_of_js __tags_of_js x2367
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2365 : __tags intf) -> intf_to_js __tags_to_js x2365
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2369 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2369) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2371 : 'tags this) ->
        fun (x2372 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2371) "hash"
            (HashAlgorithmIdentifier.t_to_js x2372)
    let cast_from = Obj.magic
  end
module Pbkdf2Params =
  struct
    type t = [ `Algorithm  | `Pbkdf2Params ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2375 : Ojs.t) -> t_of_js x2375
    and t_0_to_js : t_0 -> Ojs.t = fun (x2374 : t) -> t_to_js x2374
    type tags = [ `Algorithm  | `Pbkdf2Params ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Pbkdf2Params ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2378 : Ojs.t) -> intf_of_js __tags_of_js x2378
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2376 : __tags intf) -> intf_to_js __tags_to_js x2376
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2380 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2380) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2382 : 'tags this) ->
        fun (x2383 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2382) "hash"
            (HashAlgorithmIdentifier.t_to_js x2383)
    let (get_iterations : 'tags this -> float) =
      fun (x2385 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2385) "iterations")
    let (set_iterations : 'tags this -> float -> unit) =
      fun (x2387 : 'tags this) ->
        fun (x2388 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2387) "iterations"
            (Ojs.float_to_js x2388)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x2390 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2390) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x2392 : 'tags this) ->
        fun (x2393 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2392) "salt"
            (BufferSource.t_to_js x2393)
    let cast_from = Obj.magic
  end
module KeyFormat =
  struct
    type t = [ `L_s97_jwk  | `L_s150_pkcs8  | `L_s160_raw  | `L_s182_spki ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2396 : Ojs.t) ->
        let x2397 = x2396 in
        match Ojs.string_of_js x2397 with
        | "jwk" -> `L_s97_jwk
        | "pkcs8" -> `L_s150_pkcs8
        | "raw" -> `L_s160_raw
        | "spki" -> `L_s182_spki
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2395 :
          [ `L_s97_jwk  | `L_s150_pkcs8  | `L_s160_raw  | `L_s182_spki ])
        ->
        match x2395 with
        | `L_s97_jwk -> Ojs.string_to_js "jwk"
        | `L_s150_pkcs8 -> Ojs.string_to_js "pkcs8"
        | `L_s160_raw -> Ojs.string_to_js "raw"
        | `L_s182_spki -> Ojs.string_to_js "spki"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2399 : Ojs.t) -> t_of_js x2399
    and t_0_to_js : t_0 -> Ojs.t = fun (x2398 : t) -> t_to_js x2398
  end
module RsaOtherPrimesInfo =
  struct
    type t = [ `RsaOtherPrimesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2401 : Ojs.t) -> t_of_js x2401
    and t_0_to_js : t_0 -> Ojs.t = fun (x2400 : t) -> t_to_js x2400
    type tags = [ `RsaOtherPrimesInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOtherPrimesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2404 : Ojs.t) -> intf_of_js __tags_of_js x2404
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2402 : __tags intf) -> intf_to_js __tags_to_js x2402
    let (get_d : 'tags this -> string) =
      fun (x2406 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2406) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x2408 : 'tags this) ->
        fun (x2409 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2408) "d"
            (Ojs.string_to_js x2409)
    let (get_r : 'tags this -> string) =
      fun (x2411 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2411) "r")
    let (set_r : 'tags this -> string -> unit) =
      fun (x2413 : 'tags this) ->
        fun (x2414 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2413) "r"
            (Ojs.string_to_js x2414)
    let (get_t : 'tags this -> string) =
      fun (x2416 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2416) "t")
    let (set_t : 'tags this -> string -> unit) =
      fun (x2418 : 'tags this) ->
        fun (x2419 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2418) "t"
            (Ojs.string_to_js x2419)
    let cast_from = Obj.magic
  end
module JsonWebKey =
  struct
    type t = [ `JsonWebKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2422 : Ojs.t) -> t_of_js x2422
    and t_0_to_js : t_0 -> Ojs.t = fun (x2421 : t) -> t_to_js x2421
    type tags = [ `JsonWebKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `JsonWebKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2425 : Ojs.t) -> intf_of_js __tags_of_js x2425
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2423 : __tags intf) -> intf_to_js __tags_to_js x2423
    let (get_alg : 'tags this -> string) =
      fun (x2427 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2427) "alg")
    let (set_alg : 'tags this -> string -> unit) =
      fun (x2429 : 'tags this) ->
        fun (x2430 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2429) "alg"
            (Ojs.string_to_js x2430)
    let (get_crv : 'tags this -> string) =
      fun (x2432 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2432) "crv")
    let (set_crv : 'tags this -> string -> unit) =
      fun (x2434 : 'tags this) ->
        fun (x2435 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2434) "crv"
            (Ojs.string_to_js x2435)
    let (get_d : 'tags this -> string) =
      fun (x2437 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2437) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x2439 : 'tags this) ->
        fun (x2440 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2439) "d"
            (Ojs.string_to_js x2440)
    let (get_dp : 'tags this -> string) =
      fun (x2442 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2442) "dp")
    let (set_dp : 'tags this -> string -> unit) =
      fun (x2444 : 'tags this) ->
        fun (x2445 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2444) "dp"
            (Ojs.string_to_js x2445)
    let (get_dq : 'tags this -> string) =
      fun (x2447 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2447) "dq")
    let (set_dq : 'tags this -> string -> unit) =
      fun (x2449 : 'tags this) ->
        fun (x2450 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2449) "dq"
            (Ojs.string_to_js x2450)
    let (get_e : 'tags this -> string) =
      fun (x2452 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2452) "e")
    let (set_e : 'tags this -> string -> unit) =
      fun (x2454 : 'tags this) ->
        fun (x2455 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2454) "e"
            (Ojs.string_to_js x2455)
    let (get_ext : 'tags this -> bool) =
      fun (x2457 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2457) "ext")
    let (set_ext : 'tags this -> bool -> unit) =
      fun (x2459 : 'tags this) ->
        fun (x2460 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2459) "ext"
            (Ojs.bool_to_js x2460)
    let (get_k : 'tags this -> string) =
      fun (x2462 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2462) "k")
    let (set_k : 'tags this -> string -> unit) =
      fun (x2464 : 'tags this) ->
        fun (x2465 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2464) "k"
            (Ojs.string_to_js x2465)
    let (get_key_ops : 'tags this -> string list) =
      fun (x2467 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2467) "key_ops")
    let (set_key_ops : 'tags this -> string list -> unit) =
      fun (x2470 : 'tags this) ->
        fun (x2471 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2470) "key_ops"
            (Ojs.list_to_js Ojs.string_to_js x2471)
    let (get_kty : 'tags this -> string) =
      fun (x2474 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2474) "kty")
    let (set_kty : 'tags this -> string -> unit) =
      fun (x2476 : 'tags this) ->
        fun (x2477 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2476) "kty"
            (Ojs.string_to_js x2477)
    let (get_n : 'tags this -> string) =
      fun (x2479 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2479) "n")
    let (set_n : 'tags this -> string -> unit) =
      fun (x2481 : 'tags this) ->
        fun (x2482 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2481) "n"
            (Ojs.string_to_js x2482)
    let (get_oth : 'tags this -> RsaOtherPrimesInfo.t list) =
      fun (x2484 : 'tags this) ->
        Ojs.list_of_js RsaOtherPrimesInfo.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2484) "oth")
    let (set_oth : 'tags this -> RsaOtherPrimesInfo.t list -> unit) =
      fun (x2487 : 'tags this) ->
        fun (x2488 : RsaOtherPrimesInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2487) "oth"
            (Ojs.list_to_js RsaOtherPrimesInfo.t_to_js x2488)
    let (get_p : 'tags this -> string) =
      fun (x2491 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2491) "p")
    let (set_p : 'tags this -> string -> unit) =
      fun (x2493 : 'tags this) ->
        fun (x2494 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2493) "p"
            (Ojs.string_to_js x2494)
    let (get_q : 'tags this -> string) =
      fun (x2496 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2496) "q")
    let (set_q : 'tags this -> string -> unit) =
      fun (x2498 : 'tags this) ->
        fun (x2499 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2498) "q"
            (Ojs.string_to_js x2499)
    let (get_qi : 'tags this -> string) =
      fun (x2501 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2501) "qi")
    let (set_qi : 'tags this -> string -> unit) =
      fun (x2503 : 'tags this) ->
        fun (x2504 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2503) "qi"
            (Ojs.string_to_js x2504)
    let (get_use : 'tags this -> string) =
      fun (x2506 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2506) "use")
    let (set_use : 'tags this -> string -> unit) =
      fun (x2508 : 'tags this) ->
        fun (x2509 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2508) "use"
            (Ojs.string_to_js x2509)
    let (get_x : 'tags this -> string) =
      fun (x2511 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2511) "x")
    let (set_x : 'tags this -> string -> unit) =
      fun (x2513 : 'tags this) ->
        fun (x2514 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2513) "x"
            (Ojs.string_to_js x2514)
    let (get_y : 'tags this -> string) =
      fun (x2516 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2516) "y")
    let (set_y : 'tags this -> string -> unit) =
      fun (x2518 : 'tags this) ->
        fun (x2519 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2518) "y"
            (Ojs.string_to_js x2519)
    let cast_from = Obj.magic
  end
module HmacKeyGenParams =
  struct
    type t = [ `Algorithm  | `HmacKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2522 : Ojs.t) -> t_of_js x2522
    and t_0_to_js : t_0 -> Ojs.t = fun (x2521 : t) -> t_to_js x2521
    type tags = [ `Algorithm  | `HmacKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2525 : Ojs.t) -> intf_of_js __tags_of_js x2525
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2523 : __tags intf) -> intf_to_js __tags_to_js x2523
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2527 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2527) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2529 : 'tags this) ->
        fun (x2530 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2529) "hash"
            (HashAlgorithmIdentifier.t_to_js x2530)
    let (get_length : 'tags this -> float) =
      fun (x2532 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2532) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2534 : 'tags this) ->
        fun (x2535 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2534) "length"
            (Ojs.float_to_js x2535)
    let cast_from = Obj.magic
  end
module HmacImportParams =
  struct
    type t = [ `Algorithm  | `HmacImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2538 : Ojs.t) -> t_of_js x2538
    and t_0_to_js : t_0 -> Ojs.t = fun (x2537 : t) -> t_to_js x2537
    type tags = [ `Algorithm  | `HmacImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2541 : Ojs.t) -> intf_of_js __tags_of_js x2541
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2539 : __tags intf) -> intf_to_js __tags_to_js x2539
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2543 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2543) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2545 : 'tags this) ->
        fun (x2546 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2545) "hash"
            (HashAlgorithmIdentifier.t_to_js x2546)
    let (get_length : 'tags this -> float) =
      fun (x2548 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2548) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2550 : 'tags this) ->
        fun (x2551 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2550) "length"
            (Ojs.float_to_js x2551)
    let cast_from = Obj.magic
  end
module HkdfParams =
  struct
    type t = [ `Algorithm  | `HkdfParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2554 : Ojs.t) -> t_of_js x2554
    and t_0_to_js : t_0 -> Ojs.t = fun (x2553 : t) -> t_to_js x2553
    type tags = [ `Algorithm  | `HkdfParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HkdfParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2557 : Ojs.t) -> intf_of_js __tags_of_js x2557
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2555 : __tags intf) -> intf_to_js __tags_to_js x2555
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2559 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2559) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2561 : 'tags this) ->
        fun (x2562 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2561) "hash"
            (HashAlgorithmIdentifier.t_to_js x2562)
    let (get_info : 'tags this -> BufferSource.t) =
      fun (x2564 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2564) "info")
    let (set_info : 'tags this -> BufferSource.t -> unit) =
      fun (x2566 : 'tags this) ->
        fun (x2567 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2566) "info"
            (BufferSource.t_to_js x2567)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x2569 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2569) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x2571 : 'tags this) ->
        fun (x2572 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2571) "salt"
            (BufferSource.t_to_js x2572)
    let cast_from = Obj.magic
  end
module EcdsaParams =
  struct
    type t = [ `Algorithm  | `EcdsaParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2575 : Ojs.t) -> t_of_js x2575
    and t_0_to_js : t_0 -> Ojs.t = fun (x2574 : t) -> t_to_js x2574
    type tags = [ `Algorithm  | `EcdsaParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdsaParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2578 : Ojs.t) -> intf_of_js __tags_of_js x2578
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2576 : __tags intf) -> intf_to_js __tags_to_js x2576
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2580 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2580) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2582 : 'tags this) ->
        fun (x2583 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2582) "hash"
            (HashAlgorithmIdentifier.t_to_js x2583)
    let cast_from = Obj.magic
  end
module KeyUsage =
  struct
    type t =
      [ `L_s56_decrypt  | `L_s59_deriveBits  | `L_s60_deriveKey 
      | `L_s65_encrypt  | `L_s178_sign  | `L_s199_unwrapKey 
      | `L_s202_verify  | `L_s210_wrapKey ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2586 : Ojs.t) ->
        let x2587 = x2586 in
        match Ojs.string_of_js x2587 with
        | "decrypt" -> `L_s56_decrypt
        | "deriveBits" -> `L_s59_deriveBits
        | "deriveKey" -> `L_s60_deriveKey
        | "encrypt" -> `L_s65_encrypt
        | "sign" -> `L_s178_sign
        | "unwrapKey" -> `L_s199_unwrapKey
        | "verify" -> `L_s202_verify
        | "wrapKey" -> `L_s210_wrapKey
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2585 :
          [ `L_s56_decrypt  | `L_s59_deriveBits  | `L_s60_deriveKey 
          | `L_s65_encrypt  | `L_s178_sign  | `L_s199_unwrapKey 
          | `L_s202_verify  | `L_s210_wrapKey ])
        ->
        match x2585 with
        | `L_s56_decrypt -> Ojs.string_to_js "decrypt"
        | `L_s59_deriveBits -> Ojs.string_to_js "deriveBits"
        | `L_s60_deriveKey -> Ojs.string_to_js "deriveKey"
        | `L_s65_encrypt -> Ojs.string_to_js "encrypt"
        | `L_s178_sign -> Ojs.string_to_js "sign"
        | `L_s199_unwrapKey -> Ojs.string_to_js "unwrapKey"
        | `L_s202_verify -> Ojs.string_to_js "verify"
        | `L_s210_wrapKey -> Ojs.string_to_js "wrapKey"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2589 : Ojs.t) -> t_of_js x2589
    and t_0_to_js : t_0 -> Ojs.t = fun (x2588 : t) -> t_to_js x2588
  end
module KeyType =
  struct
    type t = [ `L_s155_private  | `L_s158_public  | `L_s175_secret ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2591 : Ojs.t) ->
        let x2592 = x2591 in
        match Ojs.string_of_js x2592 with
        | "private" -> `L_s155_private
        | "public" -> `L_s158_public
        | "secret" -> `L_s175_secret
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x2590 : [ `L_s155_private  | `L_s158_public  | `L_s175_secret ])
        ->
        match x2590 with
        | `L_s155_private -> Ojs.string_to_js "private"
        | `L_s158_public -> Ojs.string_to_js "public"
        | `L_s175_secret -> Ojs.string_to_js "secret"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2594 : Ojs.t) -> t_of_js x2594
    and t_0_to_js : t_0 -> Ojs.t = fun (x2593 : t) -> t_to_js x2593
  end
module KeyAlgorithm =
  struct
    type t = [ `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2596 : Ojs.t) -> t_of_js x2596
    and t_0_to_js : t_0 -> Ojs.t = fun (x2595 : t) -> t_to_js x2595
    type tags = [ `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `KeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2599 : Ojs.t) -> intf_of_js __tags_of_js x2599
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2597 : __tags intf) -> intf_to_js __tags_to_js x2597
    let (get_name : 'tags this -> string) =
      fun (x2601 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2601) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2603 : 'tags this) ->
        fun (x2604 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2603) "name"
            (Ojs.string_to_js x2604)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface15:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> CryptoKey.t
                         val set_prototype : t -> CryptoKey.t -> unit
                         val create : t -> CryptoKey.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2607 : Ojs.t) -> x2607
    and t_to_js : t -> Ojs.t = fun (x2606 : Ojs.t) -> x2606
    let (get_prototype : t -> CryptoKey.t) =
      fun (x2608 : t) ->
        CryptoKey.t_of_js (Ojs.get_prop_ascii (t_to_js x2608) "prototype")
    let (set_prototype : t -> CryptoKey.t -> unit) =
      fun (x2609 : t) ->
        fun (x2610 : CryptoKey.t) ->
          Ojs.set_prop_ascii (t_to_js x2609) "prototype"
            (CryptoKey.t_to_js x2610)
    let (create : t -> CryptoKey.t) =
      fun (x2611 : t) -> CryptoKey.t_of_js (Ojs.new_obj (t_to_js x2611) [||])
  end
 and
  CryptoKey:sig
              type t = [ `CryptoKey ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `CryptoKey ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `CryptoKey ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_algorithm : 'tags this -> KeyAlgorithm.t
              val get_extractable : 'tags this -> bool
              val get_type : 'tags this -> KeyType.t
              val get_usages : 'tags this -> KeyUsage.t list
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : unit -> t
            end =
  struct
    type t = [ `CryptoKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2613 : Ojs.t) -> t_of_js x2613
    and t_0_to_js : t_0 -> Ojs.t = fun (x2612 : t) -> t_to_js x2612
    type tags = [ `CryptoKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2616 : Ojs.t) -> intf_of_js __tags_of_js x2616
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2614 : __tags intf) -> intf_to_js __tags_to_js x2614
    let (get_algorithm : 'tags this -> KeyAlgorithm.t) =
      fun (x2618 : 'tags this) ->
        KeyAlgorithm.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2618) "algorithm")
    let (get_extractable : 'tags this -> bool) =
      fun (x2620 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2620) "extractable")
    let (get_type : 'tags this -> KeyType.t) =
      fun (x2622 : 'tags this) ->
        KeyType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2622) "type")
    let (get_usages : 'tags this -> KeyUsage.t list) =
      fun (x2624 : 'tags this) ->
        Ojs.list_of_js KeyUsage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2624) "usages")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CryptoKey")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CryptoKey") [||])
  end
module EcdhKeyDeriveParams =
  struct
    type t = [ `Algorithm  | `EcdhKeyDeriveParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2628 : Ojs.t) -> t_of_js x2628
    and t_0_to_js : t_0 -> Ojs.t = fun (x2627 : t) -> t_to_js x2627
    type tags = [ `Algorithm  | `EcdhKeyDeriveParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdhKeyDeriveParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2631 : Ojs.t) -> intf_of_js __tags_of_js x2631
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2629 : __tags intf) -> intf_to_js __tags_to_js x2629
    let (get_public : 'tags this -> CryptoKey.t) =
      fun (x2633 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2633) "public")
    let (set_public : 'tags this -> CryptoKey.t -> unit) =
      fun (x2635 : 'tags this) ->
        fun (x2636 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2635) "public"
            (CryptoKey.t_to_js x2636)
    let cast_from = Obj.magic
  end
module NamedCurve =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x2639 : Ojs.t) -> Ojs.string_of_js x2639
    and t_to_js : t -> Ojs.t = fun (x2638 : string) -> Ojs.string_to_js x2638
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2641 : Ojs.t) -> t_of_js x2641
    and t_0_to_js : t_0 -> Ojs.t = fun (x2640 : t) -> t_to_js x2640
  end
module EcKeyImportParams =
  struct
    type t = [ `Algorithm  | `EcKeyImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2643 : Ojs.t) -> t_of_js x2643
    and t_0_to_js : t_0 -> Ojs.t = fun (x2642 : t) -> t_to_js x2642
    type tags = [ `Algorithm  | `EcKeyImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2646 : Ojs.t) -> intf_of_js __tags_of_js x2646
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2644 : __tags intf) -> intf_to_js __tags_to_js x2644
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x2648 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2648) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x2650 : 'tags this) ->
        fun (x2651 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2650) "namedCurve"
            (NamedCurve.t_to_js x2651)
    let cast_from = Obj.magic
  end
module EcKeyGenParams =
  struct
    type t = [ `Algorithm  | `EcKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2654 : Ojs.t) -> t_of_js x2654
    and t_0_to_js : t_0 -> Ojs.t = fun (x2653 : t) -> t_to_js x2653
    type tags = [ `Algorithm  | `EcKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2657 : Ojs.t) -> intf_of_js __tags_of_js x2657
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2655 : __tags intf) -> intf_to_js __tags_to_js x2655
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x2659 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2659) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x2661 : 'tags this) ->
        fun (x2662 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2661) "namedCurve"
            (NamedCurve.t_to_js x2662)
    let cast_from = Obj.magic
  end
module CryptoKeyPair =
  struct
    type t = [ `CryptoKeyPair ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2665 : Ojs.t) -> t_of_js x2665
    and t_0_to_js : t_0 -> Ojs.t = fun (x2664 : t) -> t_to_js x2664
    type tags = [ `CryptoKeyPair ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKeyPair ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2668 : Ojs.t) -> intf_of_js __tags_of_js x2668
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2666 : __tags intf) -> intf_to_js __tags_to_js x2666
    let (get_privateKey : 'tags this -> CryptoKey.t) =
      fun (x2670 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2670) "privateKey")
    let (set_privateKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x2672 : 'tags this) ->
        fun (x2673 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2672) "privateKey"
            (CryptoKey.t_to_js x2673)
    let (get_publicKey : 'tags this -> CryptoKey.t) =
      fun (x2675 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2675) "publicKey")
    let (set_publicKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x2677 : 'tags this) ->
        fun (x2678 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2677) "publicKey"
            (CryptoKey.t_to_js x2678)
    let cast_from = Obj.magic
  end
module AesKeyGenParams =
  struct
    type t = [ `AesKeyGenParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2681 : Ojs.t) -> t_of_js x2681
    and t_0_to_js : t_0 -> Ojs.t = fun (x2680 : t) -> t_to_js x2680
    type tags = [ `AesKeyGenParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2684 : Ojs.t) -> intf_of_js __tags_of_js x2684
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2682 : __tags intf) -> intf_to_js __tags_to_js x2682
    let (get_length : 'tags this -> float) =
      fun (x2686 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2686) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2688 : 'tags this) ->
        fun (x2689 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2688) "length"
            (Ojs.float_to_js x2689)
    let cast_from = Obj.magic
  end
module AesKeyAlgorithm =
  struct
    type t = [ `AesKeyAlgorithm  | `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2692 : Ojs.t) -> t_of_js x2692
    and t_0_to_js : t_0 -> Ojs.t = fun (x2691 : t) -> t_to_js x2691
    type tags = [ `AesKeyAlgorithm  | `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2695 : Ojs.t) -> intf_of_js __tags_of_js x2695
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2693 : __tags intf) -> intf_to_js __tags_to_js x2693
    let (get_length : 'tags this -> float) =
      fun (x2697 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2697) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2699 : 'tags this) ->
        fun (x2700 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2699) "length"
            (Ojs.float_to_js x2700)
    let cast_from = Obj.magic
  end
module AesGcmParams =
  struct
    type t = [ `AesGcmParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2703 : Ojs.t) -> t_of_js x2703
    and t_0_to_js : t_0 -> Ojs.t = fun (x2702 : t) -> t_to_js x2702
    type tags = [ `AesGcmParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesGcmParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2706 : Ojs.t) -> intf_of_js __tags_of_js x2706
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2704 : __tags intf) -> intf_to_js __tags_to_js x2704
    let (get_additionalData : 'tags this -> BufferSource.t) =
      fun (x2708 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2708) "additionalData")
    let (set_additionalData : 'tags this -> BufferSource.t -> unit) =
      fun (x2710 : 'tags this) ->
        fun (x2711 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2710) "additionalData"
            (BufferSource.t_to_js x2711)
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x2713 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2713) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x2715 : 'tags this) ->
        fun (x2716 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2715) "iv"
            (BufferSource.t_to_js x2716)
    let (get_tagLength : 'tags this -> float) =
      fun (x2718 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2718) "tagLength")
    let (set_tagLength : 'tags this -> float -> unit) =
      fun (x2720 : 'tags this) ->
        fun (x2721 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2720) "tagLength"
            (Ojs.float_to_js x2721)
    let cast_from = Obj.magic
  end
module AesDerivedKeyParams =
  struct
    type t = [ `AesDerivedKeyParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2724 : Ojs.t) -> t_of_js x2724
    and t_0_to_js : t_0 -> Ojs.t = fun (x2723 : t) -> t_to_js x2723
    type tags = [ `AesDerivedKeyParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesDerivedKeyParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2727 : Ojs.t) -> intf_of_js __tags_of_js x2727
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2725 : __tags intf) -> intf_to_js __tags_to_js x2725
    let (get_length : 'tags this -> float) =
      fun (x2729 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2729) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2731 : 'tags this) ->
        fun (x2732 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2731) "length"
            (Ojs.float_to_js x2732)
    let cast_from = Obj.magic
  end
module AesCtrParams =
  struct
    type t = [ `AesCtrParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2735 : Ojs.t) -> t_of_js x2735
    and t_0_to_js : t_0 -> Ojs.t = fun (x2734 : t) -> t_to_js x2734
    type tags = [ `AesCtrParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCtrParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2738 : Ojs.t) -> intf_of_js __tags_of_js x2738
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2736 : __tags intf) -> intf_to_js __tags_to_js x2736
    let (get_counter : 'tags this -> BufferSource.t) =
      fun (x2740 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2740) "counter")
    let (set_counter : 'tags this -> BufferSource.t -> unit) =
      fun (x2742 : 'tags this) ->
        fun (x2743 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2742) "counter"
            (BufferSource.t_to_js x2743)
    let (get_length : 'tags this -> float) =
      fun (x2745 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2745) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2747 : 'tags this) ->
        fun (x2748 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2747) "length"
            (Ojs.float_to_js x2748)
    let cast_from = Obj.magic
  end
module AesCbcParams =
  struct
    type t = [ `AesCbcParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2751 : Ojs.t) -> t_of_js x2751
    and t_0_to_js : t_0 -> Ojs.t = fun (x2750 : t) -> t_to_js x2750
    type tags = [ `AesCbcParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCbcParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2754 : Ojs.t) -> intf_of_js __tags_of_js x2754
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2752 : __tags intf) -> intf_to_js __tags_to_js x2752
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x2756 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2756) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x2758 : 'tags this) ->
        fun (x2759 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2758) "iv"
            (BufferSource.t_to_js x2759)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface100:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> SubtleCrypto.t
                          val set_prototype : t -> SubtleCrypto.t -> unit
                          val create : t -> SubtleCrypto.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2762 : Ojs.t) -> x2762
    and t_to_js : t -> Ojs.t = fun (x2761 : Ojs.t) -> x2761
    let (get_prototype : t -> SubtleCrypto.t) =
      fun (x2763 : t) ->
        SubtleCrypto.t_of_js (Ojs.get_prop_ascii (t_to_js x2763) "prototype")
    let (set_prototype : t -> SubtleCrypto.t -> unit) =
      fun (x2764 : t) ->
        fun (x2765 : SubtleCrypto.t) ->
          Ojs.set_prop_ascii (t_to_js x2764) "prototype"
            (SubtleCrypto.t_to_js x2765)
    let (create : t -> SubtleCrypto.t) =
      fun (x2766 : t) ->
        SubtleCrypto.t_of_js (Ojs.new_obj (t_to_js x2766) [||])
  end
 and
  SubtleCrypto:sig
                 type t = [ `SubtleCrypto ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `SubtleCrypto ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `SubtleCrypto ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `SubtleCrypto ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val decrypt :
                   'tags this ->
                     algorithm:(AesCbcParams.t, AesCtrParams.t,
                       AesGcmParams.t, AlgorithmIdentifier.t,
                       RsaOaepParams.t) union5 ->
                       key:CryptoKey.t ->
                         data:BufferSource.t -> any Promise.t_1
                 val deriveBits :
                   'tags this ->
                     algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                       HkdfParams.t, Pbkdf2Params.t) union4 ->
                       baseKey:CryptoKey.t ->
                         length:float -> ArrayBuffer.t_0 Promise.t_1
                 val deriveKey :
                   'tags this ->
                     algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                       HkdfParams.t, Pbkdf2Params.t) union4 ->
                       baseKey:CryptoKey.t ->
                         derivedKeyType:(AesDerivedKeyParams.t,
                           AlgorithmIdentifier.t, HkdfParams.t,
                           HmacImportParams.t, Pbkdf2Params.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t list ->
                               CryptoKey.t Promise.t_1
                 val digest :
                   'tags this ->
                     algorithm:AlgorithmIdentifier.t ->
                       data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1
                 val encrypt :
                   'tags this ->
                     algorithm:(AesCbcParams.t, AesCtrParams.t,
                       AesGcmParams.t, AlgorithmIdentifier.t,
                       RsaOaepParams.t) union5 ->
                       key:CryptoKey.t ->
                         data:BufferSource.t -> any Promise.t_1
                 val exportKey :
                   'tags this ->
                     format:[ `L_s97_jwk ] ->
                       key:CryptoKey.t -> JsonWebKey.t Promise.t_1
                 val exportKey' :
                   'tags this ->
                     format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
                       key:CryptoKey.t -> ArrayBuffer.t_0 Promise.t_1
                 val generateKey :
                   'tags this ->
                     algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t)
                       union2 ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t list ->
                           CryptoKeyPair.t Promise.t_1
                 val generateKey' :
                   'tags this ->
                     algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t,
                       Pbkdf2Params.t) union3 ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1
                 val generateKey'' :
                   'tags this ->
                     algorithm:AlgorithmIdentifier.t ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t list ->
                           (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1
                 val importKey :
                   'tags this ->
                     format:[ `L_s97_jwk ] ->
                       keyData:JsonWebKey.t ->
                         algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                           EcKeyImportParams.t, HmacImportParams.t,
                           RsaHashedImportParams.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t list ->
                               CryptoKey.t Promise.t_1
                 val importKey' :
                   'tags this ->
                     format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
                       keyData:BufferSource.t ->
                         algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                           EcKeyImportParams.t, HmacImportParams.t,
                           RsaHashedImportParams.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t list ->
                               CryptoKey.t Promise.t_1
                 val sign :
                   'tags this ->
                     algorithm:(AlgorithmIdentifier.t, EcdsaParams.t,
                       RsaPssParams.t) union3 ->
                       key:CryptoKey.t ->
                         data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1
                 val unwrapKey :
                   'tags this ->
                     format:KeyFormat.t ->
                       wrappedKey:BufferSource.t ->
                         unwrappingKey:CryptoKey.t ->
                           unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                             AesGcmParams.t, AlgorithmIdentifier.t,
                             RsaOaepParams.t) union5 ->
                             unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                               AlgorithmIdentifier.t, EcKeyImportParams.t,
                               HmacImportParams.t, RsaHashedImportParams.t)
                               union5 ->
                               extractable:bool ->
                                 keyUsages:KeyUsage.t list ->
                                   CryptoKey.t Promise.t_1
                 val verify :
                   'tags this ->
                     algorithm:(AlgorithmIdentifier.t, EcdsaParams.t,
                       RsaPssParams.t) union3 ->
                       key:CryptoKey.t ->
                         signature:BufferSource.t ->
                           data:BufferSource.t -> bool Promise.t_1
                 val wrapKey :
                   'tags this ->
                     format:KeyFormat.t ->
                       key:CryptoKey.t ->
                         wrappingKey:CryptoKey.t ->
                           wrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                             AesGcmParams.t, AlgorithmIdentifier.t,
                             RsaOaepParams.t) union5 ->
                             ArrayBuffer.t_0 Promise.t_1
                 val deriveKey' :
                   'tags this ->
                     algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                       HkdfParams.t, Pbkdf2Params.t) union4 ->
                       baseKey:CryptoKey.t ->
                         derivedKeyType:(AesDerivedKeyParams.t,
                           AlgorithmIdentifier.t, HkdfParams.t,
                           HmacImportParams.t, Pbkdf2Params.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t Iterable.t_1 ->
                               CryptoKey.t Promise.t_1
                 val generateKey''' :
                   'tags this ->
                     algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t)
                       union2 ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t list ->
                           CryptoKeyPair.t Promise.t_1
                 val generateKey'''' :
                   'tags this ->
                     algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t,
                       Pbkdf2Params.t) union3 ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1
                 val generateKey''''' :
                   'tags this ->
                     algorithm:AlgorithmIdentifier.t ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t Iterable.t_1 ->
                           (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1
                 val importKey'' :
                   'tags this ->
                     format:[ `L_s97_jwk ] ->
                       keyData:JsonWebKey.t ->
                         algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                           EcKeyImportParams.t, HmacImportParams.t,
                           RsaHashedImportParams.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t list ->
                               CryptoKey.t Promise.t_1
                 val importKey''' :
                   'tags this ->
                     format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
                       keyData:BufferSource.t ->
                         algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                           EcKeyImportParams.t, HmacImportParams.t,
                           RsaHashedImportParams.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t Iterable.t_1 ->
                               CryptoKey.t Promise.t_1
                 val unwrapKey' :
                   'tags this ->
                     format:KeyFormat.t ->
                       wrappedKey:BufferSource.t ->
                         unwrappingKey:CryptoKey.t ->
                           unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                             AesGcmParams.t, AlgorithmIdentifier.t,
                             RsaOaepParams.t) union5 ->
                             unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                               AlgorithmIdentifier.t, EcKeyImportParams.t,
                               HmacImportParams.t, RsaHashedImportParams.t)
                               union5 ->
                               extractable:bool ->
                                 keyUsages:KeyUsage.t Iterable.t_1 ->
                                   CryptoKey.t Promise.t_1
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `SubtleCrypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2768 : Ojs.t) -> t_of_js x2768
    and t_0_to_js : t_0 -> Ojs.t = fun (x2767 : t) -> t_to_js x2767
    type tags = [ `SubtleCrypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `SubtleCrypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2771 : Ojs.t) -> intf_of_js __tags_of_js x2771
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2769 : __tags intf) -> intf_to_js __tags_to_js x2769
    let (decrypt :
      'tags this ->
        algorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
          AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
          key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x2781 : 'tags this) ->
        fun
          ~algorithm:(x2773 :
                       (AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                         AlgorithmIdentifier.t, RsaOaepParams.t) union5)
          ->
          fun ~key:(x2779 : CryptoKey.t) ->
            fun ~data:(x2780 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x2781) "decrypt"
                   [|(union5_to_js AesCbcParams.t_to_js AesCtrParams.t_to_js
                        AesGcmParams.t_to_js AlgorithmIdentifier.t_to_js
                        RsaOaepParams.t_to_js x2773);(CryptoKey.t_to_js x2779);(
                     BufferSource.t_to_js x2780)|])
    let (deriveBits :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t -> length:float -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2791 : 'tags this) ->
        fun
          ~algorithm:(x2784 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2789 : CryptoKey.t) ->
            fun ~length:(x2790 : float) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x2791) "deriveBits"
                   [|(union4_to_js AlgorithmIdentifier.t_to_js
                        EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                        Pbkdf2Params.t_to_js x2784);(CryptoKey.t_to_js x2789);(
                     Ojs.float_to_js x2790)|])
    let (deriveKey :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t ->
            derivedKeyType:(AesDerivedKeyParams.t, AlgorithmIdentifier.t,
              HkdfParams.t, HmacImportParams.t, Pbkdf2Params.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2809 : 'tags this) ->
        fun
          ~algorithm:(x2794 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2799 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x2800 :
                                (AesDerivedKeyParams.t,
                                  AlgorithmIdentifier.t, HkdfParams.t,
                                  HmacImportParams.t, Pbkdf2Params.t) union5)
              ->
              fun ~extractable:(x2806 : bool) ->
                fun ~keyUsages:(x2807 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2809) "deriveKey"
                       [|(union4_to_js AlgorithmIdentifier.t_to_js
                            EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                            Pbkdf2Params.t_to_js x2794);(CryptoKey.t_to_js
                                                           x2799);(union5_to_js
                                                                    AesDerivedKeyParams.t_to_js
                                                                    AlgorithmIdentifier.t_to_js
                                                                    HkdfParams.t_to_js
                                                                    HmacImportParams.t_to_js
                                                                    Pbkdf2Params.t_to_js
                                                                    x2800);(
                         Ojs.bool_to_js x2806);(Ojs.list_to_js
                                                  KeyUsage.t_to_js x2807)|])
    let (digest :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2814 : 'tags this) ->
        fun ~algorithm:(x2812 : AlgorithmIdentifier.t) ->
          fun ~data:(x2813 : BufferSource.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x2814) "digest"
                 [|(AlgorithmIdentifier.t_to_js x2812);(BufferSource.t_to_js
                                                          x2813)|])
    let (encrypt :
      'tags this ->
        algorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
          AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
          key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x2825 : 'tags this) ->
        fun
          ~algorithm:(x2817 :
                       (AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                         AlgorithmIdentifier.t, RsaOaepParams.t) union5)
          ->
          fun ~key:(x2823 : CryptoKey.t) ->
            fun ~data:(x2824 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x2825) "encrypt"
                   [|(union5_to_js AesCbcParams.t_to_js AesCtrParams.t_to_js
                        AesGcmParams.t_to_js AlgorithmIdentifier.t_to_js
                        RsaOaepParams.t_to_js x2817);(CryptoKey.t_to_js x2823);(
                     BufferSource.t_to_js x2824)|])
    let (exportKey :
      'tags this ->
        format:[ `L_s97_jwk ] -> key:CryptoKey.t -> JsonWebKey.t Promise.t_1)
      =
      fun (x2830 : 'tags this) ->
        fun ~format:(x2828 : [ `L_s97_jwk ]) ->
          fun ~key:(x2829 : CryptoKey.t) ->
            Promise.t_1_of_js JsonWebKey.t_of_js
              (Ojs.call (this_to_js Obj.magic x2830) "exportKey"
                 [|((match x2828 with | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                   CryptoKey.t_to_js x2829)|])
    let (exportKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          key:CryptoKey.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2837 : 'tags this) ->
        fun ~format:(x2833 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~key:(x2836 : CryptoKey.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x2837) "exportKey"
                 [|(Exclude.t_2_to_js KeyFormat.t_to_js
                      (fun (x2835 : [ `L_s97_jwk ]) ->
                         match x2835 with
                         | `L_s97_jwk -> Ojs.string_to_js "jwk") x2833);(
                   CryptoKey.t_to_js x2836)|])
    let (generateKey :
      'tags this ->
        algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x2846 : 'tags this) ->
        fun
          ~algorithm:(x2840 :
                       (EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2)
          ->
          fun ~extractable:(x2843 : bool) ->
            fun ~keyUsages:(x2844 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x2846) "generateKey"
                   [|(union2_to_js EcKeyGenParams.t_to_js
                        RsaHashedKeyGenParams.t_to_js x2840);(Ojs.bool_to_js
                                                                x2843);(
                     Ojs.list_to_js KeyUsage.t_to_js x2844)|])
    let (generateKey' :
      'tags this ->
        algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t, Pbkdf2Params.t)
          union3 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2856 : 'tags this) ->
        fun
          ~algorithm:(x2849 :
                       (AesKeyGenParams.t, HmacKeyGenParams.t,
                         Pbkdf2Params.t) union3)
          ->
          fun ~extractable:(x2853 : bool) ->
            fun ~keyUsages:(x2854 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x2856) "generateKey"
                   [|(union3_to_js AesKeyGenParams.t_to_js
                        HmacKeyGenParams.t_to_js Pbkdf2Params.t_to_js x2849);(
                     Ojs.bool_to_js x2853);(Ojs.list_to_js KeyUsage.t_to_js
                                              x2854)|])
    let (generateKey'' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t list ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x2863 : 'tags this) ->
        fun ~algorithm:(x2859 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x2860 : bool) ->
            fun ~keyUsages:(x2861 : KeyUsage.t list) ->
              Promise.t_1_of_js
                (fun (x2865 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x2865)
                (Ojs.call (this_to_js Obj.magic x2863) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x2859);(Ojs.bool_to_js
                                                            x2860);(Ojs.list_to_js
                                                                    KeyUsage.t_to_js
                                                                    x2861)|])
    let (importKey :
      'tags this ->
        format:[ `L_s97_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2879 : 'tags this) ->
        fun ~format:(x2868 : [ `L_s97_jwk ]) ->
          fun ~keyData:(x2869 : JsonWebKey.t) ->
            fun
              ~algorithm:(x2870 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2876 : bool) ->
                fun ~keyUsages:(x2877 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2879) "importKey"
                       [|((match x2868 with
                           | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x2869);(union5_to_js
                                                      AesKeyAlgorithm.t_to_js
                                                      AlgorithmIdentifier.t_to_js
                                                      EcKeyImportParams.t_to_js
                                                      HmacImportParams.t_to_js
                                                      RsaHashedImportParams.t_to_js
                                                      x2870);(Ojs.bool_to_js
                                                                x2876);(
                         Ojs.list_to_js KeyUsage.t_to_js x2877)|])
    let (importKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2895 : 'tags this) ->
        fun ~format:(x2882 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x2885 : BufferSource.t) ->
            fun
              ~algorithm:(x2886 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2892 : bool) ->
                fun ~keyUsages:(x2893 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2895) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x2884 : [ `L_s97_jwk ]) ->
                               match x2884 with
                               | `L_s97_jwk -> Ojs.string_to_js "jwk") x2882);(
                         BufferSource.t_to_js x2885);(union5_to_js
                                                        AesKeyAlgorithm.t_to_js
                                                        AlgorithmIdentifier.t_to_js
                                                        EcKeyImportParams.t_to_js
                                                        HmacImportParams.t_to_js
                                                        RsaHashedImportParams.t_to_js
                                                        x2886);(Ojs.bool_to_js
                                                                  x2892);(
                         Ojs.list_to_js KeyUsage.t_to_js x2893)|])
    let (sign :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
          union3 ->
          key:CryptoKey.t ->
            data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2904 : 'tags this) ->
        fun
          ~algorithm:(x2898 :
                       (AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
                         union3)
          ->
          fun ~key:(x2902 : CryptoKey.t) ->
            fun ~data:(x2903 : BufferSource.t) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x2904) "sign"
                   [|(union3_to_js AlgorithmIdentifier.t_to_js
                        EcdsaParams.t_to_js RsaPssParams.t_to_js x2898);(
                     CryptoKey.t_to_js x2902);(BufferSource.t_to_js x2903)|])
    let (unwrapKey :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                AesGcmParams.t, AlgorithmIdentifier.t, RsaOaepParams.t)
                union5 ->
                unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                  AlgorithmIdentifier.t, EcKeyImportParams.t,
                  HmacImportParams.t, RsaHashedImportParams.t) union5 ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2925 : 'tags this) ->
        fun ~format:(x2907 : KeyFormat.t) ->
          fun ~wrappedKey:(x2908 : BufferSource.t) ->
            fun ~unwrappingKey:(x2909 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x2910 :
                                   (AesCbcParams.t, AesCtrParams.t,
                                     AesGcmParams.t, AlgorithmIdentifier.t,
                                     RsaOaepParams.t) union5)
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x2916 :
                                           (AesKeyAlgorithm.t,
                                             AlgorithmIdentifier.t,
                                             EcKeyImportParams.t,
                                             HmacImportParams.t,
                                             RsaHashedImportParams.t) union5)
                  ->
                  fun ~extractable:(x2922 : bool) ->
                    fun ~keyUsages:(x2923 : KeyUsage.t list) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x2925) "unwrapKey"
                           [|(KeyFormat.t_to_js x2907);(BufferSource.t_to_js
                                                          x2908);(CryptoKey.t_to_js
                                                                    x2909);(
                             union5_to_js AesCbcParams.t_to_js
                               AesCtrParams.t_to_js AesGcmParams.t_to_js
                               AlgorithmIdentifier.t_to_js
                               RsaOaepParams.t_to_js x2910);(union5_to_js
                                                               AesKeyAlgorithm.t_to_js
                                                               AlgorithmIdentifier.t_to_js
                                                               EcKeyImportParams.t_to_js
                                                               HmacImportParams.t_to_js
                                                               RsaHashedImportParams.t_to_js
                                                               x2916);(
                             Ojs.bool_to_js x2922);(Ojs.list_to_js
                                                      KeyUsage.t_to_js x2923)|])
    let (verify :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
          union3 ->
          key:CryptoKey.t ->
            signature:BufferSource.t ->
              data:BufferSource.t -> bool Promise.t_1)
      =
      fun (x2935 : 'tags this) ->
        fun
          ~algorithm:(x2928 :
                       (AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
                         union3)
          ->
          fun ~key:(x2932 : CryptoKey.t) ->
            fun ~signature:(x2933 : BufferSource.t) ->
              fun ~data:(x2934 : BufferSource.t) ->
                Promise.t_1_of_js Ojs.bool_of_js
                  (Ojs.call (this_to_js Obj.magic x2935) "verify"
                     [|(union3_to_js AlgorithmIdentifier.t_to_js
                          EcdsaParams.t_to_js RsaPssParams.t_to_js x2928);(
                       CryptoKey.t_to_js x2932);(BufferSource.t_to_js x2933);(
                       BufferSource.t_to_js x2934)|])
    let (wrapKey :
      'tags this ->
        format:KeyFormat.t ->
          key:CryptoKey.t ->
            wrappingKey:CryptoKey.t ->
              wrapAlgorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
                ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2947 : 'tags this) ->
        fun ~format:(x2938 : KeyFormat.t) ->
          fun ~key:(x2939 : CryptoKey.t) ->
            fun ~wrappingKey:(x2940 : CryptoKey.t) ->
              fun
                ~wrapAlgorithm:(x2941 :
                                 (AesCbcParams.t, AesCtrParams.t,
                                   AesGcmParams.t, AlgorithmIdentifier.t,
                                   RsaOaepParams.t) union5)
                ->
                Promise.t_1_of_js ArrayBuffer.t_0_of_js
                  (Ojs.call (this_to_js Obj.magic x2947) "wrapKey"
                     [|(KeyFormat.t_to_js x2938);(CryptoKey.t_to_js x2939);(
                       CryptoKey.t_to_js x2940);(union5_to_js
                                                   AesCbcParams.t_to_js
                                                   AesCtrParams.t_to_js
                                                   AesGcmParams.t_to_js
                                                   AlgorithmIdentifier.t_to_js
                                                   RsaOaepParams.t_to_js
                                                   x2941)|])
    let (deriveKey' :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t ->
            derivedKeyType:(AesDerivedKeyParams.t, AlgorithmIdentifier.t,
              HkdfParams.t, HmacImportParams.t, Pbkdf2Params.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x2965 : 'tags this) ->
        fun
          ~algorithm:(x2950 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2955 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x2956 :
                                (AesDerivedKeyParams.t,
                                  AlgorithmIdentifier.t, HkdfParams.t,
                                  HmacImportParams.t, Pbkdf2Params.t) union5)
              ->
              fun ~extractable:(x2962 : bool) ->
                fun ~keyUsages:(x2963 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2965) "deriveKey"
                       [|(union4_to_js AlgorithmIdentifier.t_to_js
                            EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                            Pbkdf2Params.t_to_js x2950);(CryptoKey.t_to_js
                                                           x2955);(union5_to_js
                                                                    AesDerivedKeyParams.t_to_js
                                                                    AlgorithmIdentifier.t_to_js
                                                                    HkdfParams.t_to_js
                                                                    HmacImportParams.t_to_js
                                                                    Pbkdf2Params.t_to_js
                                                                    x2956);(
                         Ojs.bool_to_js x2962);(Iterable.t_1_to_js
                                                  KeyUsage.t_to_js x2963)|])
    let (generateKey''' :
      'tags this ->
        algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x2974 : 'tags this) ->
        fun
          ~algorithm:(x2968 :
                       (EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2)
          ->
          fun ~extractable:(x2971 : bool) ->
            fun ~keyUsages:(x2972 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x2974) "generateKey"
                   [|(union2_to_js EcKeyGenParams.t_to_js
                        RsaHashedKeyGenParams.t_to_js x2968);(Ojs.bool_to_js
                                                                x2971);(
                     Ojs.list_to_js KeyUsage.t_to_js x2972)|])
    let (generateKey'''' :
      'tags this ->
        algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t, Pbkdf2Params.t)
          union3 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2984 : 'tags this) ->
        fun
          ~algorithm:(x2977 :
                       (AesKeyGenParams.t, HmacKeyGenParams.t,
                         Pbkdf2Params.t) union3)
          ->
          fun ~extractable:(x2981 : bool) ->
            fun ~keyUsages:(x2982 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x2984) "generateKey"
                   [|(union3_to_js AesKeyGenParams.t_to_js
                        HmacKeyGenParams.t_to_js Pbkdf2Params.t_to_js x2977);(
                     Ojs.bool_to_js x2981);(Ojs.list_to_js KeyUsage.t_to_js
                                              x2982)|])
    let (generateKey''''' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t Iterable.t_1 ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x2991 : 'tags this) ->
        fun ~algorithm:(x2987 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x2988 : bool) ->
            fun ~keyUsages:(x2989 : KeyUsage.t Iterable.t_1) ->
              Promise.t_1_of_js
                (fun (x2993 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x2993)
                (Ojs.call (this_to_js Obj.magic x2991) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x2987);(Ojs.bool_to_js
                                                            x2988);(Iterable.t_1_to_js
                                                                    KeyUsage.t_to_js
                                                                    x2989)|])
    let (importKey'' :
      'tags this ->
        format:[ `L_s97_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3007 : 'tags this) ->
        fun ~format:(x2996 : [ `L_s97_jwk ]) ->
          fun ~keyData:(x2997 : JsonWebKey.t) ->
            fun
              ~algorithm:(x2998 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x3004 : bool) ->
                fun ~keyUsages:(x3005 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3007) "importKey"
                       [|((match x2996 with
                           | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x2997);(union5_to_js
                                                      AesKeyAlgorithm.t_to_js
                                                      AlgorithmIdentifier.t_to_js
                                                      EcKeyImportParams.t_to_js
                                                      HmacImportParams.t_to_js
                                                      RsaHashedImportParams.t_to_js
                                                      x2998);(Ojs.bool_to_js
                                                                x3004);(
                         Ojs.list_to_js KeyUsage.t_to_js x3005)|])
    let (importKey''' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x3023 : 'tags this) ->
        fun ~format:(x3010 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x3013 : BufferSource.t) ->
            fun
              ~algorithm:(x3014 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x3020 : bool) ->
                fun ~keyUsages:(x3021 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3023) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x3012 : [ `L_s97_jwk ]) ->
                               match x3012 with
                               | `L_s97_jwk -> Ojs.string_to_js "jwk") x3010);(
                         BufferSource.t_to_js x3013);(union5_to_js
                                                        AesKeyAlgorithm.t_to_js
                                                        AlgorithmIdentifier.t_to_js
                                                        EcKeyImportParams.t_to_js
                                                        HmacImportParams.t_to_js
                                                        RsaHashedImportParams.t_to_js
                                                        x3014);(Ojs.bool_to_js
                                                                  x3020);(
                         Iterable.t_1_to_js KeyUsage.t_to_js x3021)|])
    let (unwrapKey' :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                AesGcmParams.t, AlgorithmIdentifier.t, RsaOaepParams.t)
                union5 ->
                unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                  AlgorithmIdentifier.t, EcKeyImportParams.t,
                  HmacImportParams.t, RsaHashedImportParams.t) union5 ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t Iterable.t_1 ->
                      CryptoKey.t Promise.t_1)
      =
      fun (x3044 : 'tags this) ->
        fun ~format:(x3026 : KeyFormat.t) ->
          fun ~wrappedKey:(x3027 : BufferSource.t) ->
            fun ~unwrappingKey:(x3028 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x3029 :
                                   (AesCbcParams.t, AesCtrParams.t,
                                     AesGcmParams.t, AlgorithmIdentifier.t,
                                     RsaOaepParams.t) union5)
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x3035 :
                                           (AesKeyAlgorithm.t,
                                             AlgorithmIdentifier.t,
                                             EcKeyImportParams.t,
                                             HmacImportParams.t,
                                             RsaHashedImportParams.t) union5)
                  ->
                  fun ~extractable:(x3041 : bool) ->
                    fun ~keyUsages:(x3042 : KeyUsage.t Iterable.t_1) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x3044) "unwrapKey"
                           [|(KeyFormat.t_to_js x3026);(BufferSource.t_to_js
                                                          x3027);(CryptoKey.t_to_js
                                                                    x3028);(
                             union5_to_js AesCbcParams.t_to_js
                               AesCtrParams.t_to_js AesGcmParams.t_to_js
                               AlgorithmIdentifier.t_to_js
                               RsaOaepParams.t_to_js x3029);(union5_to_js
                                                               AesKeyAlgorithm.t_to_js
                                                               AlgorithmIdentifier.t_to_js
                                                               EcKeyImportParams.t_to_js
                                                               HmacImportParams.t_to_js
                                                               RsaHashedImportParams.t_to_js
                                                               x3035);(
                             Ojs.bool_to_js x3041);(Iterable.t_1_to_js
                                                      KeyUsage.t_to_js x3042)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SubtleCrypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SubtleCrypto") [||])
  end
module CryptoStatic =
  struct
    let (subtle : unit -> SubtleCrypto.t) =
      fun () ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "crypto")
             "subtle")
    let (getRandomValues : 'T -> 'T) =
      fun (x3047 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto")
             "getRandomValues" [|(Obj.magic x3047)|])
  end
module ConsoleStatic =
  struct
    let (assert_ : ?condition:bool -> data:any list -> unit -> unit) =
      fun ?condition:(x3048 : bool option) ->
        fun ~data:(x3049 : any list) ->
          fun () ->
            ignore
              (let x3053 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3053 "assert") "apply"
                 [|x3053;((let x3050 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3048 with
                            | Some x3052 ->
                                ignore
                                  (Ojs.call x3050 "push"
                                     [|(Ojs.bool_to_js x3052)|])
                            | None -> ());
                           List.iter
                             (fun (x3051 : any) ->
                                ignore
                                  (Ojs.call x3050 "push"
                                     [|(any_to_js x3051)|])) x3049;
                           x3050))|])
    let (clear : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "clear" [||])
    let (count : ?label:string -> unit -> unit) =
      fun ?label:(x3054 : string option) ->
        fun () ->
          ignore
            (let x3057 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3057 "count") "apply"
               [|x3057;((let x3055 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3054 with
                          | Some x3056 ->
                              ignore
                                (Ojs.call x3055 "push"
                                   [|(Ojs.string_to_js x3056)|])
                          | None -> ());
                         x3055))|])
    let (countReset : ?label:string -> unit -> unit) =
      fun ?label:(x3058 : string option) ->
        fun () ->
          ignore
            (let x3061 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3061 "countReset") "apply"
               [|x3061;((let x3059 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3058 with
                          | Some x3060 ->
                              ignore
                                (Ojs.call x3059 "push"
                                   [|(Ojs.string_to_js x3060)|])
                          | None -> ());
                         x3059))|])
    let (debug : any list -> unit) =
      fun (x3062 : any list) ->
        ignore
          (let x3065 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3065 "debug") "apply"
             [|x3065;((let x3063 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3064 : any) ->
                            ignore
                              (Ojs.call x3063 "push" [|(any_to_js x3064)|]))
                         x3062;
                       x3063))|])
    let (dir : ?item:any -> ?options:any -> unit -> unit) =
      fun ?item:(x3066 : any option) ->
        fun ?options:(x3067 : any option) ->
          fun () ->
            ignore
              (let x3071 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3071 "dir") "apply"
                 [|x3071;((let x3068 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3066 with
                            | Some x3070 ->
                                ignore
                                  (Ojs.call x3068 "push"
                                     [|(any_to_js x3070)|])
                            | None -> ());
                           (match x3067 with
                            | Some x3069 ->
                                ignore
                                  (Ojs.call x3068 "push"
                                     [|(any_to_js x3069)|])
                            | None -> ());
                           x3068))|])
    let (dirxml : any list -> unit) =
      fun (x3072 : any list) ->
        ignore
          (let x3075 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3075 "dirxml") "apply"
             [|x3075;((let x3073 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3074 : any) ->
                            ignore
                              (Ojs.call x3073 "push" [|(any_to_js x3074)|]))
                         x3072;
                       x3073))|])
    let (error : any list -> unit) =
      fun (x3076 : any list) ->
        ignore
          (let x3079 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3079 "error") "apply"
             [|x3079;((let x3077 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3078 : any) ->
                            ignore
                              (Ojs.call x3077 "push" [|(any_to_js x3078)|]))
                         x3076;
                       x3077))|])
    let (group : any list -> unit) =
      fun (x3080 : any list) ->
        ignore
          (let x3083 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3083 "group") "apply"
             [|x3083;((let x3081 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3082 : any) ->
                            ignore
                              (Ojs.call x3081 "push" [|(any_to_js x3082)|]))
                         x3080;
                       x3081))|])
    let (groupCollapsed : any list -> unit) =
      fun (x3084 : any list) ->
        ignore
          (let x3087 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3087 "groupCollapsed") "apply"
             [|x3087;((let x3085 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3086 : any) ->
                            ignore
                              (Ojs.call x3085 "push" [|(any_to_js x3086)|]))
                         x3084;
                       x3085))|])
    let (groupEnd : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "groupEnd" [||])
    let (info : any list -> unit) =
      fun (x3088 : any list) ->
        ignore
          (let x3091 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3091 "info") "apply"
             [|x3091;((let x3089 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3090 : any) ->
                            ignore
                              (Ojs.call x3089 "push" [|(any_to_js x3090)|]))
                         x3088;
                       x3089))|])
    let (log : any list -> unit) =
      fun (x3092 : any list) ->
        ignore
          (let x3095 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3095 "log") "apply"
             [|x3095;((let x3093 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3094 : any) ->
                            ignore
                              (Ojs.call x3093 "push" [|(any_to_js x3094)|]))
                         x3092;
                       x3093))|])
    let (table : ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun ?tabularData:(x3096 : any option) ->
        fun ?properties:(x3097 : string list option) ->
          fun () ->
            ignore
              (let x3102 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3102 "table") "apply"
                 [|x3102;((let x3098 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3096 with
                            | Some x3101 ->
                                ignore
                                  (Ojs.call x3098 "push"
                                     [|(any_to_js x3101)|])
                            | None -> ());
                           (match x3097 with
                            | Some x3099 ->
                                ignore
                                  (Ojs.call x3098 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x3099)|])
                            | None -> ());
                           x3098))|])
    let (time : ?label:string -> unit -> unit) =
      fun ?label:(x3103 : string option) ->
        fun () ->
          ignore
            (let x3106 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3106 "time") "apply"
               [|x3106;((let x3104 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3103 with
                          | Some x3105 ->
                              ignore
                                (Ojs.call x3104 "push"
                                   [|(Ojs.string_to_js x3105)|])
                          | None -> ());
                         x3104))|])
    let (timeEnd : ?label:string -> unit -> unit) =
      fun ?label:(x3107 : string option) ->
        fun () ->
          ignore
            (let x3110 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3110 "timeEnd") "apply"
               [|x3110;((let x3108 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3107 with
                          | Some x3109 ->
                              ignore
                                (Ojs.call x3108 "push"
                                   [|(Ojs.string_to_js x3109)|])
                          | None -> ());
                         x3108))|])
    let (timeLog : ?label:string -> data:any list -> unit -> unit) =
      fun ?label:(x3111 : string option) ->
        fun ~data:(x3112 : any list) ->
          fun () ->
            ignore
              (let x3116 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3116 "timeLog") "apply"
                 [|x3116;((let x3113 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3111 with
                            | Some x3115 ->
                                ignore
                                  (Ojs.call x3113 "push"
                                     [|(Ojs.string_to_js x3115)|])
                            | None -> ());
                           List.iter
                             (fun (x3114 : any) ->
                                ignore
                                  (Ojs.call x3113 "push"
                                     [|(any_to_js x3114)|])) x3112;
                           x3113))|])
    let (timeStamp : ?label:string -> unit -> unit) =
      fun ?label:(x3117 : string option) ->
        fun () ->
          ignore
            (let x3120 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3120 "timeStamp") "apply"
               [|x3120;((let x3118 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3117 with
                          | Some x3119 ->
                              ignore
                                (Ojs.call x3118 "push"
                                   [|(Ojs.string_to_js x3119)|])
                          | None -> ());
                         x3118))|])
    let (trace : any list -> unit) =
      fun (x3121 : any list) ->
        ignore
          (let x3124 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3124 "trace") "apply"
             [|x3124;((let x3122 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3123 : any) ->
                            ignore
                              (Ojs.call x3122 "push" [|(any_to_js x3123)|]))
                         x3121;
                       x3122))|])
    let (warn : any list -> unit) =
      fun (x3125 : any list) ->
        ignore
          (let x3128 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3128 "warn") "apply"
             [|x3128;((let x3126 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3127 : any) ->
                            ignore
                              (Ojs.call x3126 "push" [|(any_to_js x3127)|]))
                         x3125;
                       x3126))|])
  end
module CacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3130 : Ojs.t) -> t_of_js x3130
    and t_0_to_js : t_0 -> Ojs.t = fun (x3129 : t) -> t_to_js x3129
    type tags = [ `CacheQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3133 : Ojs.t) -> intf_of_js __tags_of_js x3133
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3131 : __tags intf) -> intf_to_js __tags_to_js x3131
    let (get_ignoreMethod : 'tags this -> bool) =
      fun (x3135 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3135) "ignoreMethod")
    let (set_ignoreMethod : 'tags this -> bool -> unit) =
      fun (x3137 : 'tags this) ->
        fun (x3138 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3137) "ignoreMethod"
            (Ojs.bool_to_js x3138)
    let (get_ignoreSearch : 'tags this -> bool) =
      fun (x3140 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3140) "ignoreSearch")
    let (set_ignoreSearch : 'tags this -> bool -> unit) =
      fun (x3142 : 'tags this) ->
        fun (x3143 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3142) "ignoreSearch"
            (Ojs.bool_to_js x3143)
    let (get_ignoreVary : 'tags this -> bool) =
      fun (x3145 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3145) "ignoreVary")
    let (set_ignoreVary : 'tags this -> bool -> unit) =
      fun (x3147 : 'tags this) ->
        fun (x3148 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3147) "ignoreVary"
            (Ojs.bool_to_js x3148)
    let cast_from = Obj.magic
  end
module MultiCacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions  | `MultiCacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3151 : Ojs.t) -> t_of_js x3151
    and t_0_to_js : t_0 -> Ojs.t = fun (x3150 : t) -> t_to_js x3150
    type tags = [ `CacheQueryOptions  | `MultiCacheQueryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MultiCacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3154 : Ojs.t) -> intf_of_js __tags_of_js x3154
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3152 : __tags intf) -> intf_to_js __tags_to_js x3152
    let (get_cacheName : 'tags this -> string) =
      fun (x3156 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3156) "cacheName")
    let (set_cacheName : 'tags this -> string -> unit) =
      fun (x3158 : 'tags this) ->
        fun (x3159 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3158) "cacheName"
            (Ojs.string_to_js x3159)
    let cast_from = Obj.magic
  end
module RequestDestination =
  struct
    type t =
      [ `L_s0  | `L_s38_audio  | `L_s39_audioworklet  | `L_s62_document 
      | `L_s64_embed  | `L_s76_font  | `L_s78_frame  | `L_s89_iframe 
      | `L_s90_image  | `L_s109_manifest  | `L_s132_object 
      | `L_s145_paintworklet  | `L_s169_report  | `L_s174_script 
      | `L_s176_sharedworker  | `L_s187_style  | `L_s193_track 
      | `L_s204_video  | `L_s209_worker  | `L_s212_xslt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3162 : Ojs.t) ->
        let x3163 = x3162 in
        match Ojs.string_of_js x3163 with
        | "" -> `L_s0
        | "audio" -> `L_s38_audio
        | "audioworklet" -> `L_s39_audioworklet
        | "document" -> `L_s62_document
        | "embed" -> `L_s64_embed
        | "font" -> `L_s76_font
        | "frame" -> `L_s78_frame
        | "iframe" -> `L_s89_iframe
        | "image" -> `L_s90_image
        | "manifest" -> `L_s109_manifest
        | "object" -> `L_s132_object
        | "paintworklet" -> `L_s145_paintworklet
        | "report" -> `L_s169_report
        | "script" -> `L_s174_script
        | "sharedworker" -> `L_s176_sharedworker
        | "style" -> `L_s187_style
        | "track" -> `L_s193_track
        | "video" -> `L_s204_video
        | "worker" -> `L_s209_worker
        | "xslt" -> `L_s212_xslt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3161 :
          [ `L_s0  | `L_s38_audio  | `L_s39_audioworklet  | `L_s62_document 
          | `L_s64_embed  | `L_s76_font  | `L_s78_frame  | `L_s89_iframe 
          | `L_s90_image  | `L_s109_manifest  | `L_s132_object 
          | `L_s145_paintworklet  | `L_s169_report  | `L_s174_script 
          | `L_s176_sharedworker  | `L_s187_style  | `L_s193_track 
          | `L_s204_video  | `L_s209_worker  | `L_s212_xslt ])
        ->
        match x3161 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s38_audio -> Ojs.string_to_js "audio"
        | `L_s39_audioworklet -> Ojs.string_to_js "audioworklet"
        | `L_s62_document -> Ojs.string_to_js "document"
        | `L_s64_embed -> Ojs.string_to_js "embed"
        | `L_s76_font -> Ojs.string_to_js "font"
        | `L_s78_frame -> Ojs.string_to_js "frame"
        | `L_s89_iframe -> Ojs.string_to_js "iframe"
        | `L_s90_image -> Ojs.string_to_js "image"
        | `L_s109_manifest -> Ojs.string_to_js "manifest"
        | `L_s132_object -> Ojs.string_to_js "object"
        | `L_s145_paintworklet -> Ojs.string_to_js "paintworklet"
        | `L_s169_report -> Ojs.string_to_js "report"
        | `L_s174_script -> Ojs.string_to_js "script"
        | `L_s176_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s187_style -> Ojs.string_to_js "style"
        | `L_s193_track -> Ojs.string_to_js "track"
        | `L_s204_video -> Ojs.string_to_js "video"
        | `L_s209_worker -> Ojs.string_to_js "worker"
        | `L_s212_xslt -> Ojs.string_to_js "xslt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3165 : Ojs.t) -> t_of_js x3165
    and t_0_to_js : t_0 -> Ojs.t = fun (x3164 : t) -> t_to_js x3164
  end
module RequestRedirect =
  struct
    type t = [ `L_s67_error  | `L_s75_follow  | `L_s110_manual ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3167 : Ojs.t) ->
        let x3168 = x3167 in
        match Ojs.string_of_js x3168 with
        | "error" -> `L_s67_error
        | "follow" -> `L_s75_follow
        | "manual" -> `L_s110_manual
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3166 : [ `L_s67_error  | `L_s75_follow  | `L_s110_manual ]) ->
        match x3166 with
        | `L_s67_error -> Ojs.string_to_js "error"
        | `L_s75_follow -> Ojs.string_to_js "follow"
        | `L_s110_manual -> Ojs.string_to_js "manual"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3170 : Ojs.t) -> t_of_js x3170
    and t_0_to_js : t_0 -> Ojs.t = fun (x3169 : t) -> t_to_js x3169
  end
module RequestMode =
  struct
    type t =
      [ `L_s55_cors  | `L_s119_navigate  | `L_s124_no_cors 
      | `L_s172_same_origin ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3172 : Ojs.t) ->
        let x3173 = x3172 in
        match Ojs.string_of_js x3173 with
        | "cors" -> `L_s55_cors
        | "navigate" -> `L_s119_navigate
        | "no-cors" -> `L_s124_no_cors
        | "same-origin" -> `L_s172_same_origin
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3171 :
          [ `L_s55_cors  | `L_s119_navigate  | `L_s124_no_cors 
          | `L_s172_same_origin ])
        ->
        match x3171 with
        | `L_s55_cors -> Ojs.string_to_js "cors"
        | `L_s119_navigate -> Ojs.string_to_js "navigate"
        | `L_s124_no_cors -> Ojs.string_to_js "no-cors"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3175 : Ojs.t) -> t_of_js x3175
    and t_0_to_js : t_0 -> Ojs.t = fun (x3174 : t) -> t_to_js x3174
  end
module RequestCache =
  struct
    type t =
      [ `L_s57_default  | `L_s77_force_cache  | `L_s123_no_cache 
      | `L_s127_no_store  | `L_s136_only_if_cached  | `L_s168_reload ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3177 : Ojs.t) ->
        let x3178 = x3177 in
        match Ojs.string_of_js x3178 with
        | "default" -> `L_s57_default
        | "force-cache" -> `L_s77_force_cache
        | "no-cache" -> `L_s123_no_cache
        | "no-store" -> `L_s127_no_store
        | "only-if-cached" -> `L_s136_only_if_cached
        | "reload" -> `L_s168_reload
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3176 :
          [ `L_s57_default  | `L_s77_force_cache  | `L_s123_no_cache 
          | `L_s127_no_store  | `L_s136_only_if_cached  | `L_s168_reload ])
        ->
        match x3176 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s77_force_cache -> Ojs.string_to_js "force-cache"
        | `L_s123_no_cache -> Ojs.string_to_js "no-cache"
        | `L_s127_no_store -> Ojs.string_to_js "no-store"
        | `L_s136_only_if_cached -> Ojs.string_to_js "only-if-cached"
        | `L_s168_reload -> Ojs.string_to_js "reload"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3180 : Ojs.t) -> t_of_js x3180
    and t_0_to_js : t_0 -> Ojs.t = fun (x3179 : t) -> t_to_js x3179
  end
module ReferrerPolicy =
  struct
    type t =
      [ `L_s0  | `L_s125_no_referrer  | `L_s126_no_referrer_when_downgrade 
      | `L_s140_origin  | `L_s141_origin_when_cross_origin 
      | `L_s172_same_origin  | `L_s185_strict_origin 
      | `L_s186_strict_origin_when_cross_origin  | `L_s198_unsafe_url ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3182 : Ojs.t) ->
        let x3183 = x3182 in
        match Ojs.string_of_js x3183 with
        | "" -> `L_s0
        | "no-referrer" -> `L_s125_no_referrer
        | "no-referrer-when-downgrade" -> `L_s126_no_referrer_when_downgrade
        | "origin" -> `L_s140_origin
        | "origin-when-cross-origin" -> `L_s141_origin_when_cross_origin
        | "same-origin" -> `L_s172_same_origin
        | "strict-origin" -> `L_s185_strict_origin
        | "strict-origin-when-cross-origin" ->
            `L_s186_strict_origin_when_cross_origin
        | "unsafe-url" -> `L_s198_unsafe_url
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3181 :
          [ `L_s0  | `L_s125_no_referrer 
          | `L_s126_no_referrer_when_downgrade  | `L_s140_origin 
          | `L_s141_origin_when_cross_origin  | `L_s172_same_origin 
          | `L_s185_strict_origin  | `L_s186_strict_origin_when_cross_origin 
          | `L_s198_unsafe_url ])
        ->
        match x3181 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s125_no_referrer -> Ojs.string_to_js "no-referrer"
        | `L_s126_no_referrer_when_downgrade ->
            Ojs.string_to_js "no-referrer-when-downgrade"
        | `L_s140_origin -> Ojs.string_to_js "origin"
        | `L_s141_origin_when_cross_origin ->
            Ojs.string_to_js "origin-when-cross-origin"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s185_strict_origin -> Ojs.string_to_js "strict-origin"
        | `L_s186_strict_origin_when_cross_origin ->
            Ojs.string_to_js "strict-origin-when-cross-origin"
        | `L_s198_unsafe_url -> Ojs.string_to_js "unsafe-url"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3185 : Ojs.t) -> t_of_js x3185
    and t_0_to_js : t_0 -> Ojs.t = fun (x3184 : t) -> t_to_js x3184
  end
module RequestCredentials =
  struct
    type t = [ `L_s92_include  | `L_s134_omit  | `L_s172_same_origin ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3187 : Ojs.t) ->
        let x3188 = x3187 in
        match Ojs.string_of_js x3188 with
        | "include" -> `L_s92_include
        | "omit" -> `L_s134_omit
        | "same-origin" -> `L_s172_same_origin
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3186 : [ `L_s92_include  | `L_s134_omit  | `L_s172_same_origin ])
        ->
        match x3186 with
        | `L_s92_include -> Ojs.string_to_js "include"
        | `L_s134_omit -> Ojs.string_to_js "omit"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3190 : Ojs.t) -> t_of_js x3190
    and t_0_to_js : t_0 -> Ojs.t = fun (x3189 : t) -> t_to_js x3189
  end
module rec
  AnonymousInterface43:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Headers.t
                         val set_prototype : t -> Headers.t -> unit
                         val create :
                           t -> ?init:HeadersInit.t -> unit -> Headers.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3192 : Ojs.t) -> x3192
    and t_to_js : t -> Ojs.t = fun (x3191 : Ojs.t) -> x3191
    let (get_prototype : t -> Headers.t) =
      fun (x3193 : t) ->
        Headers.t_of_js (Ojs.get_prop_ascii (t_to_js x3193) "prototype")
    let (set_prototype : t -> Headers.t -> unit) =
      fun (x3194 : t) ->
        fun (x3195 : Headers.t) ->
          Ojs.set_prop_ascii (t_to_js x3194) "prototype"
            (Headers.t_to_js x3195)
    let (create : t -> ?init:HeadersInit.t -> unit -> Headers.t) =
      fun (x3199 : t) ->
        fun ?init:(x3196 : HeadersInit.t option) ->
          fun () ->
            Headers.t_of_js
              (Ojs.new_obj_arr (t_to_js x3199)
                 (let x3197 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3196 with
                   | Some x3198 ->
                       ignore
                         (Ojs.call x3197 "push"
                            [|(HeadersInit.t_to_js x3198)|])
                   | None -> ());
                  x3197))
  end
 and
  Headers:sig
            type t =
              [ `Headers  | (string * string) IterableIterator.tags_1] intf
            type t_0 = t
            [@@@js.stop ]
            type tags =
              [ `Headers  | (string * string) IterableIterator.tags_1]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags =
                [ `Headers  | (string * string) IterableIterator.tags_1]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val append : 'tags this -> name:string -> value:string -> unit
            val delete : 'tags this -> name:string -> unit
            val get_ : 'tags this -> name:string -> string or_null
            val has : 'tags this -> name:string -> bool
            val set_ : 'tags this -> name:string -> value:string -> unit
            val forEach :
              'tags this ->
                callbackfn:(value:string -> key:string -> parent:t -> unit)
                  -> ?thisArg:any -> unit -> unit
            val entries :
              'tags this -> (string * string) IterableIterator.t_1
            val keys : 'tags this -> string IterableIterator.t_1
            val values : 'tags this -> string IterableIterator.t_1
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create : ?init:HeadersInit.t -> unit -> t
          end =
  struct
    type t = [ `Headers  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3201 : Ojs.t) -> t_of_js x3201
    and t_0_to_js : t_0 -> Ojs.t = fun (x3200 : t) -> t_to_js x3200
    type tags = [ `Headers  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3204 : Ojs.t) -> intf_of_js __tags_of_js x3204
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3202 : __tags intf) -> intf_to_js __tags_to_js x3202
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x3208 : 'tags this) ->
        fun ~name:(x3206 : string) ->
          fun ~value:(x3207 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3208) "append"
                 [|(Ojs.string_to_js x3206);(Ojs.string_to_js x3207)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x3211 : 'tags this) ->
        fun ~name:(x3210 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x3211) "delete"
               [|(Ojs.string_to_js x3210)|])
    let (get_ : 'tags this -> name:string -> string or_null) =
      fun (x3214 : 'tags this) ->
        fun ~name:(x3213 : string) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3214) "get"
               [|(Ojs.string_to_js x3213)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x3218 : 'tags this) ->
        fun ~name:(x3217 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x3218) "has"
               [|(Ojs.string_to_js x3217)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x3222 : 'tags this) ->
        fun ~name:(x3220 : string) ->
          fun ~value:(x3221 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3222) "set"
                 [|(Ojs.string_to_js x3220);(Ojs.string_to_js x3221)|])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3231 : 'tags this) ->
        fun
          ~callbackfn:(x3224 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x3225 : any option) ->
            fun () ->
              ignore
                (let x3233 = this_to_js Obj.magic x3231 in
                 Ojs.call (Ojs.get_prop_ascii x3233 "forEach") "apply"
                   [|x3233;((let x3226 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3226 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3228 : Ojs.t) ->
                                          fun (x3229 : Ojs.t) ->
                                            fun (x3230 : Ojs.t) ->
                                              x3224
                                                ~value:(Ojs.string_of_js
                                                          x3228)
                                                ~key:(Ojs.string_of_js x3229)
                                                ~parent:(t_of_js x3230)))|]);
                             (match x3225 with
                              | Some x3227 ->
                                  ignore
                                    (Ojs.call x3226 "push"
                                       [|(any_to_js x3227)|])
                              | None -> ());
                             x3226))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x3234 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x3236 : Ojs.t) ->
             let x3237 = x3236 in
             ((Ojs.string_of_js (Ojs.array_get x3237 0)),
               (Ojs.string_of_js (Ojs.array_get x3237 1))))
          (Ojs.call (this_to_js Obj.magic x3234) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x3238 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3238) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x3241 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3241) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Headers")
             "prototype")
    let (create : ?init:HeadersInit.t -> unit -> t) =
      fun ?init:(x3244 : HeadersInit.t option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Headers")
               (let x3245 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x3244 with
                 | Some x3246 ->
                     ignore
                       (Ojs.call x3245 "push" [|(HeadersInit.t_to_js x3246)|])
                 | None -> ());
                x3245))
  end and
       HeadersInit:sig
                     type t =
                       ((Headers.t, (string, string) Record.t_2) union2,
                         string list) or_array
                     type t_0 = t
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                   end =
       struct
         type t =
           ((Headers.t, (string, string) Record.t_2) union2, string list)
             or_array
         let rec t_of_js : Ojs.t -> t =
           fun (x3255 : Ojs.t) ->
             or_array_of_js
               (fun (x3256 : Ojs.t) ->
                  union2_of_js Headers.t_of_js
                    (fun (x3258 : Ojs.t) ->
                       Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js
                         x3258) x3256)
               (fun (x3261 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x3261)
               x3255
         and t_to_js : t -> Ojs.t =
           fun
             (x3247 :
               ((Headers.t, (string, string) Record.t_2) union2, string list)
                 or_array)
             ->
             or_array_to_js
               (fun (x3248 : (Headers.t, (string, string) Record.t_2) union2)
                  ->
                  union2_to_js Headers.t_to_js
                    (fun (x3250 : (string, string) Record.t_2) ->
                       Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js
                         x3250) x3248)
               (fun (x3253 : string list) ->
                  Ojs.list_to_js Ojs.string_to_js x3253) x3247
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x3264 : Ojs.t) -> t_of_js x3264
         and t_0_to_js : t_0 -> Ojs.t = fun (x3263 : t) -> t_to_js x3263
       end
module EndingType =
  struct
    type t = [ `L_s118_native  | `L_s194_transparent ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3266 : Ojs.t) ->
        let x3267 = x3266 in
        match Ojs.string_of_js x3267 with
        | "native" -> `L_s118_native
        | "transparent" -> `L_s194_transparent
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3265 : [ `L_s118_native  | `L_s194_transparent ]) ->
        match x3265 with
        | `L_s118_native -> Ojs.string_to_js "native"
        | `L_s194_transparent -> Ojs.string_to_js "transparent"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3269 : Ojs.t) -> t_of_js x3269
    and t_0_to_js : t_0 -> Ojs.t = fun (x3268 : t) -> t_to_js x3268
  end
module BlobPropertyBag =
  struct
    type t = [ `BlobPropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3271 : Ojs.t) -> t_of_js x3271
    and t_0_to_js : t_0 -> Ojs.t = fun (x3270 : t) -> t_to_js x3270
    type tags = [ `BlobPropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BlobPropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3274 : Ojs.t) -> intf_of_js __tags_of_js x3274
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3272 : __tags intf) -> intf_to_js __tags_to_js x3272
    let (get_endings : 'tags this -> EndingType.t) =
      fun (x3276 : 'tags this) ->
        EndingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3276) "endings")
    let (set_endings : 'tags this -> EndingType.t -> unit) =
      fun (x3278 : 'tags this) ->
        fun (x3279 : EndingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3278) "endings"
            (EndingType.t_to_js x3279)
    let (get_type : 'tags this -> string) =
      fun (x3281 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3281) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x3283 : 'tags this) ->
        fun (x3284 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3283) "type"
            (Ojs.string_to_js x3284)
    let cast_from = Obj.magic
  end
module FilePropertyBag =
  struct
    type t = [ `BlobPropertyBag  | `FilePropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3287 : Ojs.t) -> t_of_js x3287
    and t_0_to_js : t_0 -> Ojs.t = fun (x3286 : t) -> t_to_js x3286
    type tags = [ `BlobPropertyBag  | `FilePropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FilePropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3290 : Ojs.t) -> intf_of_js __tags_of_js x3290
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3288 : __tags intf) -> intf_to_js __tags_to_js x3288
    let (get_lastModified : 'tags this -> float) =
      fun (x3292 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3292) "lastModified")
    let (set_lastModified : 'tags this -> float -> unit) =
      fun (x3294 : 'tags this) ->
        fun (x3295 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3294) "lastModified"
            (Ojs.float_to_js x3295)
    let cast_from = Obj.magic
  end
module StreamPipeOptions =
  struct
    type t = [ `StreamPipeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3298 : Ojs.t) -> t_of_js x3298
    and t_0_to_js : t_0 -> Ojs.t = fun (x3297 : t) -> t_to_js x3297
    type tags = [ `StreamPipeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StreamPipeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3301 : Ojs.t) -> intf_of_js __tags_of_js x3301
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3299 : __tags intf) -> intf_to_js __tags_to_js x3299
    let (get_preventAbort : 'tags this -> bool) =
      fun (x3303 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3303) "preventAbort")
    let (set_preventAbort : 'tags this -> bool -> unit) =
      fun (x3305 : 'tags this) ->
        fun (x3306 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3305) "preventAbort"
            (Ojs.bool_to_js x3306)
    let (get_preventCancel : 'tags this -> bool) =
      fun (x3308 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3308) "preventCancel")
    let (set_preventCancel : 'tags this -> bool -> unit) =
      fun (x3310 : 'tags this) ->
        fun (x3311 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3310) "preventCancel"
            (Ojs.bool_to_js x3311)
    let (get_preventClose : 'tags this -> bool) =
      fun (x3313 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3313) "preventClose")
    let (set_preventClose : 'tags this -> bool -> unit) =
      fun (x3315 : 'tags this) ->
        fun (x3316 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3315) "preventClose"
            (Ojs.bool_to_js x3316)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x3318 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3318) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x3320 : 'tags this) ->
        fun (x3321 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3320) "signal"
            (AbortSignal.t_to_js x3321)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface135:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype :
                            t -> WritableStreamDefaultController.t
                          val set_prototype :
                            t -> WritableStreamDefaultController.t -> unit
                          val create : t -> WritableStreamDefaultController.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3324 : Ojs.t) -> x3324
    and t_to_js : t -> Ojs.t = fun (x3323 : Ojs.t) -> x3323
    let (get_prototype : t -> WritableStreamDefaultController.t) =
      fun (x3325 : t) ->
        WritableStreamDefaultController.t_of_js
          (Ojs.get_prop_ascii (t_to_js x3325) "prototype")
    let (set_prototype : t -> WritableStreamDefaultController.t -> unit) =
      fun (x3326 : t) ->
        fun (x3327 : WritableStreamDefaultController.t) ->
          Ojs.set_prop_ascii (t_to_js x3326) "prototype"
            (WritableStreamDefaultController.t_to_js x3327)
    let (create : t -> WritableStreamDefaultController.t) =
      fun (x3328 : t) ->
        WritableStreamDefaultController.t_of_js
          (Ojs.new_obj (t_to_js x3328) [||])
  end
 and
  WritableStreamDefaultController:sig
                                    type t =
                                      [ `WritableStreamDefaultController ]
                                        intf
                                    type t_0 = t
                                    [@@@js.stop ]
                                    type tags =
                                      [ `WritableStreamDefaultController ]
                                    type tags_0 = tags
                                    [@@@js.start ]
                                    [@@@js.implem
                                      type tags =
                                        [ `WritableStreamDefaultController ]
                                      type tags_0 = tags]
                                    type 'tags this =
                                      'tags intf constraint 'tags =
                                                  [>
                                                    `WritableStreamDefaultController
                                                      ]
                                    val t_to_js : t -> Ojs.t
                                    val t_of_js : Ojs.t -> t
                                    val t_0_to_js : t_0 -> Ojs.t
                                    val t_0_of_js : Ojs.t -> t_0
                                    val error :
                                      'tags this -> ?e:any -> unit -> unit
                                    val cast_from : 'tags this -> t
                                    val prototype : unit -> t
                                    val create : unit -> t
                                  end =
  struct
    type t = [ `WritableStreamDefaultController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3330 : Ojs.t) -> t_of_js x3330
    and t_0_to_js : t_0 -> Ojs.t = fun (x3329 : t) -> t_to_js x3329
    type tags = [ `WritableStreamDefaultController ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3333 : Ojs.t) -> intf_of_js __tags_of_js x3333
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3331 : __tags intf) -> intf_to_js __tags_to_js x3331
    let (error : 'tags this -> ?e:any -> unit -> unit) =
      fun (x3338 : 'tags this) ->
        fun ?e:(x3335 : any option) ->
          fun () ->
            ignore
              (let x3340 = this_to_js Obj.magic x3338 in
               Ojs.call (Ojs.get_prop_ascii x3340 "error") "apply"
                 [|x3340;((let x3336 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3335 with
                            | Some x3337 ->
                                ignore
                                  (Ojs.call x3336 "push"
                                     [|(any_to_js x3337)|])
                            | None -> ());
                           x3336))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             [||])
  end
module UnderlyingSinkWriteCallback =
  struct
    type 'W t = [ `UnderlyingSinkWriteCallback of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3343 : Ojs.t) -> t_of_js __W_of_js x3343
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3341 : __W t) -> t_to_js __W_to_js x3341
    type 'W tags = [ `UnderlyingSinkWriteCallback of 'W ]
    type 'W tags_1 = 'W tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSinkWriteCallback of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3347 : Ojs.t) -> intf_of_js __tags_of_js x3347
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3345 : __tags intf) -> intf_to_js __tags_to_js x3345
    let (apply :
      ('tags, 'W) this ->
        chunk:'W ->
          controller:WritableStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3351 : ('tags, 'W) this) ->
        fun ~chunk:(x3349 : 'W) ->
          fun ~controller:(x3350 : WritableStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3355 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x3355)
              (Ojs.apply (this_to_js Obj.magic Obj.magic x3351)
                 [|(Obj.magic x3349);(WritableStreamDefaultController.t_to_js
                                        x3350)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkStartCallback =
  struct
    type t = [ `UnderlyingSinkStartCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3358 : Ojs.t) -> t_of_js x3358
    and t_0_to_js : t_0 -> Ojs.t = fun (x3357 : t) -> t_to_js x3357
    type tags = [ `UnderlyingSinkStartCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkStartCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3361 : Ojs.t) -> intf_of_js __tags_of_js x3361
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3359 : __tags intf) -> intf_to_js __tags_to_js x3359
    let (apply :
      'tags this -> controller:WritableStreamDefaultController.t -> any) =
      fun (x3364 : 'tags this) ->
        fun ~controller:(x3363 : WritableStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x3364)
               [|(WritableStreamDefaultController.t_to_js x3363)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkCloseCallback =
  struct
    type t = [ `UnderlyingSinkCloseCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3367 : Ojs.t) -> t_of_js x3367
    and t_0_to_js : t_0 -> Ojs.t = fun (x3366 : t) -> t_to_js x3366
    type tags = [ `UnderlyingSinkCloseCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkCloseCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3370 : Ojs.t) -> intf_of_js __tags_of_js x3370
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3368 : __tags intf) -> intf_to_js __tags_to_js x3368
    let (apply : 'tags this -> (unit, unit PromiseLike.t_1) union2) =
      fun (x3372 : 'tags this) ->
        union2_of_js Ojs.unit_of_js
          (fun (x3375 : Ojs.t) -> PromiseLike.t_1_of_js Ojs.unit_of_js x3375)
          (Ojs.apply (this_to_js Obj.magic x3372) [||])
    let cast_from = Obj.magic
  end
module UnderlyingSinkAbortCallback =
  struct
    type t = [ `UnderlyingSinkAbortCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3378 : Ojs.t) -> t_of_js x3378
    and t_0_to_js : t_0 -> Ojs.t = fun (x3377 : t) -> t_to_js x3377
    type tags = [ `UnderlyingSinkAbortCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkAbortCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3381 : Ojs.t) -> intf_of_js __tags_of_js x3381
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3379 : __tags intf) -> intf_to_js __tags_to_js x3379
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3386 : 'tags this) ->
        fun ?reason:(x3383 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x3389 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x3389)
              (Ojs.call (this_to_js Obj.magic x3386) "apply"
                 [|Ojs.null;((let x3384 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3383 with
                               | Some x3385 ->
                                   ignore
                                     (Ojs.call x3384 "push"
                                        [|(any_to_js x3385)|])
                               | None -> ());
                              x3384))|])
    let cast_from = Obj.magic
  end
module UnderlyingSink =
  struct
    type 'W t = [ `UnderlyingSink of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3393 : Ojs.t) -> t_of_js __W_of_js x3393
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3391 : __W t) -> t_to_js __W_to_js x3391
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3397 : Ojs.t) -> t_of_js any_of_js x3397
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3395 : any t) -> t_to_js any_to_js x3395
    type 'W tags = [ `UnderlyingSink of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSink of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3401 : Ojs.t) -> intf_of_js __tags_of_js x3401
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3399 : __tags intf) -> intf_to_js __tags_to_js x3399
    let (get_abort : ('tags, 'W) this -> UnderlyingSinkAbortCallback.t) =
      fun (x3403 : ('tags, 'W) this) ->
        UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3403) "abort")
    let (set_abort :
      ('tags, 'W) this -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x3406 : ('tags, 'W) this) ->
        fun (x3407 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3406) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x3407)
    let (get_close : ('tags, 'W) this -> UnderlyingSinkCloseCallback.t) =
      fun (x3410 : ('tags, 'W) this) ->
        UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3410) "close")
    let (set_close :
      ('tags, 'W) this -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x3413 : ('tags, 'W) this) ->
        fun (x3414 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3413) "close"
            (UnderlyingSinkCloseCallback.t_to_js x3414)
    let (get_start : ('tags, 'W) this -> UnderlyingSinkStartCallback.t) =
      fun (x3417 : ('tags, 'W) this) ->
        UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3417) "start")
    let (set_start :
      ('tags, 'W) this -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x3420 : ('tags, 'W) this) ->
        fun (x3421 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3420) "start"
            (UnderlyingSinkStartCallback.t_to_js x3421)
    let (get_type : ('tags, 'W) this -> never or_undefined) =
      fun (x3424 : ('tags, 'W) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3424) "type")
    let (set_type : ('tags, 'W) this -> never or_undefined -> unit) =
      fun (x3428 : ('tags, 'W) this) ->
        fun (x3429 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3428) "type"
            (or_undefined_to_js never_to_js x3429)
    let (get_write : ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t) =
      fun (x3433 : ('tags, 'W) this) ->
        UnderlyingSinkWriteCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3433) "write")
    let (set_write :
      ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t -> unit) =
      fun (x3437 : ('tags, 'W) this) ->
        fun (x3438 : 'W UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3437) "write"
            (UnderlyingSinkWriteCallback.t_to_js Obj.magic x3438)
    let cast_from = Obj.magic
  end
module QueuingStrategySize =
  struct
    type 'T t = [ `QueuingStrategySize of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3444 : Ojs.t) -> t_of_js __T_of_js x3444
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3442 : __T t) -> t_to_js __T_to_js x3442
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3448 : Ojs.t) -> t_of_js any_of_js x3448
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3446 : any t) -> t_to_js any_to_js x3446
    type 'T tags = [ `QueuingStrategySize of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategySize of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3452 : Ojs.t) -> intf_of_js __tags_of_js x3452
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3450 : __tags intf) -> intf_to_js __tags_to_js x3450
    let (apply : ('tags, 'T) this -> chunk:'T -> float) =
      fun (x3455 : ('tags, 'T) this) ->
        fun ~chunk:(x3454 : 'T) ->
          Ojs.float_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3455)
               [|(Obj.magic x3454)|])
    let cast_from = Obj.magic
  end
module QueuingStrategy =
  struct
    type 'T t = [ `QueuingStrategy of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3460 : Ojs.t) -> t_of_js __T_of_js x3460
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3458 : __T t) -> t_to_js __T_to_js x3458
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3464 : Ojs.t) -> t_of_js any_of_js x3464
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3462 : any t) -> t_to_js any_to_js x3462
    type 'T tags = [ `QueuingStrategy of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategy of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3468 : Ojs.t) -> intf_of_js __tags_of_js x3468
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3466 : __tags intf) -> intf_to_js __tags_to_js x3466
    let (get_highWaterMark : ('tags, 'T) this -> float) =
      fun (x3470 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3470)
             "highWaterMark")
    let (set_highWaterMark : ('tags, 'T) this -> float -> unit) =
      fun (x3473 : ('tags, 'T) this) ->
        fun (x3474 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3473)
            "highWaterMark" (Ojs.float_to_js x3474)
    let (get_size : ('tags, 'T) this -> 'T QueuingStrategySize.t) =
      fun (x3477 : ('tags, 'T) this) ->
        QueuingStrategySize.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3477) "size")
    let (set_size : ('tags, 'T) this -> 'T QueuingStrategySize.t -> unit) =
      fun (x3481 : ('tags, 'T) this) ->
        fun (x3482 : 'T QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3481) "size"
            (QueuingStrategySize.t_to_js Obj.magic x3482)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface134:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WritableStream.t_0
                          val set_prototype : t -> WritableStream.t_0 -> unit
                          val create :
                            t ->
                              ?underlyingSink:'W UnderlyingSink.t ->
                                ?strategy:'W QueuingStrategy.t ->
                                  unit -> 'W WritableStream.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3487 : Ojs.t) -> x3487
    and t_to_js : t -> Ojs.t = fun (x3486 : Ojs.t) -> x3486
    let (get_prototype : t -> WritableStream.t_0) =
      fun (x3488 : t) ->
        WritableStream.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x3488) "prototype")
    let (set_prototype : t -> WritableStream.t_0 -> unit) =
      fun (x3489 : t) ->
        fun (x3490 : WritableStream.t_0) ->
          Ojs.set_prop_ascii (t_to_js x3489) "prototype"
            (WritableStream.t_0_to_js x3490)
    let (create :
      t ->
        ?underlyingSink:'W UnderlyingSink.t ->
          ?strategy:'W QueuingStrategy.t -> unit -> 'W WritableStream.t)
      =
      fun (x3498 : t) ->
        fun ?underlyingSink:(x3491 : 'W UnderlyingSink.t option) ->
          fun ?strategy:(x3492 : 'W QueuingStrategy.t option) ->
            fun () ->
              WritableStream.t_of_js Obj.magic
                (Ojs.new_obj_arr (t_to_js x3498)
                   (let x3493 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x3491 with
                     | Some x3496 ->
                         ignore
                           (Ojs.call x3493 "push"
                              [|(UnderlyingSink.t_to_js Obj.magic x3496)|])
                     | None -> ());
                    (match x3492 with
                     | Some x3494 ->
                         ignore
                           (Ojs.call x3493 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x3494)|])
                     | None -> ());
                    x3493))
  end
 and
  AnonymousInterface136:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype :
                            t -> WritableStreamDefaultWriter.t_0
                          val set_prototype :
                            t -> WritableStreamDefaultWriter.t_0 -> unit
                          val create :
                            t ->
                              stream:'W WritableStream.t ->
                                'W WritableStreamDefaultWriter.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3501 : Ojs.t) -> x3501
    and t_to_js : t -> Ojs.t = fun (x3500 : Ojs.t) -> x3500
    let (get_prototype : t -> WritableStreamDefaultWriter.t_0) =
      fun (x3502 : t) ->
        WritableStreamDefaultWriter.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x3502) "prototype")
    let (set_prototype : t -> WritableStreamDefaultWriter.t_0 -> unit) =
      fun (x3503 : t) ->
        fun (x3504 : WritableStreamDefaultWriter.t_0) ->
          Ojs.set_prop_ascii (t_to_js x3503) "prototype"
            (WritableStreamDefaultWriter.t_0_to_js x3504)
    let (create :
      t -> stream:'W WritableStream.t -> 'W WritableStreamDefaultWriter.t) =
      fun (x3507 : t) ->
        fun ~stream:(x3505 : 'W WritableStream.t) ->
          WritableStreamDefaultWriter.t_of_js Obj.magic
            (Ojs.new_obj (t_to_js x3507)
               [|(WritableStream.t_to_js Obj.magic x3505)|])
  end and
       WritableStream:sig
                        type 'W t = [ `WritableStream of 'W ] intf
                        type 'W t_1 = 'W t
                        type t_0 = any t
                        [@@@js.stop ]
                        type 'W tags = [ `WritableStream of 'W ]
                        type 'W tags_1 = 'W tags
                        type tags_0 = any tags
                        [@@@js.start ]
                        [@@@js.implem
                          type 'W tags = [ `WritableStream of 'W ]
                          type 'W tags_1 = 'W tags
                          type tags_0 = any tags]
                        type ('tags, 'W) this =
                          'tags intf constraint 'tags =
                                      [> `WritableStream of 'W ]
                        val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                        val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                        val t_1_to_js : ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                        val t_1_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val get_locked : ('tags, 'W) this -> bool
                        val abort :
                          ('tags, 'W) this ->
                            ?reason:any -> unit -> unit Promise.t_1
                        val close : ('tags, 'W) this -> unit Promise.t_1
                        val getWriter :
                          ('tags, 'W) this ->
                            'W WritableStreamDefaultWriter.t
                        val cast_from : ('tags, 'W) this -> 'W t
                        val prototype : unit -> t_0
                        val create :
                          ?underlyingSink:'W UnderlyingSink.t ->
                            ?strategy:'W QueuingStrategy.t -> unit -> 'W t
                      end =
       struct
         type 'W t = [ `WritableStream of 'W ] intf
         let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
           fun _W -> Obj.magic
         and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t =
           fun _W -> Obj.magic
         type 'W t_1 = 'W t
         let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun
           (type __W) ->
           fun (__W_of_js : Ojs.t -> __W) ->
             fun (x3511 : Ojs.t) -> t_of_js __W_of_js x3511
         and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type
           __W) ->
           fun (__W_to_js : __W -> Ojs.t) ->
             fun (x3509 : __W t) -> t_to_js __W_to_js x3509
         type t_0 = any t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x3515 : Ojs.t) -> t_of_js any_of_js x3515
         and t_0_to_js : t_0 -> Ojs.t =
           fun (x3513 : any t) -> t_to_js any_to_js x3513
         type 'W tags = [ `WritableStream of 'W ]
         type 'W tags_1 = 'W tags
         type tags_0 = any tags
         type ('tags, 'W) this =
           'tags intf constraint 'tags = [> `WritableStream of 'W ]
         let rec this_of_js :
           'tags 'W .
             (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
           = fun (type __tags) -> fun (type __W) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (__W_of_js : Ojs.t -> __W) ->
               fun (x3519 : Ojs.t) -> intf_of_js __tags_of_js x3519
         and this_to_js :
           'tags 'W .
             ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
           = fun (type __tags) -> fun (type __W) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (__W_to_js : __W -> Ojs.t) ->
               fun (x3517 : __tags intf) -> intf_to_js __tags_to_js x3517
         let (get_locked : ('tags, 'W) this -> bool) =
           fun (x3521 : ('tags, 'W) this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3521)
                  "locked")
         let (abort :
           ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1) =
           fun (x3527 : ('tags, 'W) this) ->
             fun ?reason:(x3524 : any option) ->
               fun () ->
                 Promise.t_1_of_js Ojs.unit_of_js
                   (let x3530 = this_to_js Obj.magic Obj.magic x3527 in
                    Ojs.call (Ojs.get_prop_ascii x3530 "abort") "apply"
                      [|x3530;((let x3525 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x3524 with
                                 | Some x3526 ->
                                     ignore
                                       (Ojs.call x3525 "push"
                                          [|(any_to_js x3526)|])
                                 | None -> ());
                                x3525))|])
         let (close : ('tags, 'W) this -> unit Promise.t_1) =
           fun (x3532 : ('tags, 'W) this) ->
             Promise.t_1_of_js Ojs.unit_of_js
               (Ojs.call (this_to_js Obj.magic Obj.magic x3532) "close" [||])
         let (getWriter :
           ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t) =
           fun (x3536 : ('tags, 'W) this) ->
             WritableStreamDefaultWriter.t_of_js Obj.magic
               (Ojs.call (this_to_js Obj.magic Obj.magic x3536) "getWriter"
                  [||])
         let cast_from = Obj.magic
         let (prototype : unit -> t_0) =
           fun () ->
             t_0_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "WritableStream")
                  "prototype")
         let (create :
           ?underlyingSink:'W UnderlyingSink.t ->
             ?strategy:'W QueuingStrategy.t -> unit -> 'W t)
           =
           fun ?underlyingSink:(x3540 : 'W UnderlyingSink.t option) ->
             fun ?strategy:(x3541 : 'W QueuingStrategy.t option) ->
               fun () ->
                 t_of_js Obj.magic
                   (Ojs.new_obj_arr
                      (Ojs.get_prop_ascii Ojs.global "WritableStream")
                      (let x3542 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       (match x3540 with
                        | Some x3545 ->
                            ignore
                              (Ojs.call x3542 "push"
                                 [|(UnderlyingSink.t_to_js Obj.magic x3545)|])
                        | None -> ());
                       (match x3541 with
                        | Some x3543 ->
                            ignore
                              (Ojs.call x3542 "push"
                                 [|(QueuingStrategy.t_to_js Obj.magic x3543)|])
                        | None -> ());
                       x3542))
       end and
            WritableStreamDefaultWriter:sig
                                          type 'W t =
                                            [
                                              `WritableStreamDefaultWriter of
                                                'W ]
                                              intf
                                          type 'W t_1 = 'W t
                                          type t_0 = any t
                                          [@@@js.stop ]
                                          type 'W tags =
                                            [
                                              `WritableStreamDefaultWriter of
                                                'W ]
                                          type 'W tags_1 = 'W tags
                                          type tags_0 = any tags
                                          [@@@js.start ]
                                          [@@@js.implem
                                            type 'W tags =
                                              [
                                                `WritableStreamDefaultWriter
                                                  of 'W ]
                                            type 'W tags_1 = 'W tags
                                            type tags_0 = any tags]
                                          type ('tags, 'W) this =
                                            'tags intf constraint 'tags =
                                                        [>
                                                          `WritableStreamDefaultWriter
                                                            of 'W ]
                                          val t_to_js :
                                            ('W -> Ojs.t) -> 'W t -> Ojs.t
                                          val t_of_js :
                                            (Ojs.t -> 'W) -> Ojs.t -> 'W t
                                          val t_1_to_js :
                                            ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                                          val t_1_of_js :
                                            (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                                          val t_0_to_js : t_0 -> Ojs.t
                                          val t_0_of_js : Ojs.t -> t_0
                                          val get_closed :
                                            ('tags, 'W) this ->
                                              never or_undefined Promise.t_1
                                          val get_desiredSize :
                                            ('tags, 'W) this -> float or_null
                                          val get_ready :
                                            ('tags, 'W) this ->
                                              never or_undefined Promise.t_1
                                          val abort :
                                            ('tags, 'W) this ->
                                              ?reason:any ->
                                                unit -> unit Promise.t_1
                                          val close :
                                            ('tags, 'W) this ->
                                              unit Promise.t_1
                                          val releaseLock :
                                            ('tags, 'W) this -> unit
                                          val write :
                                            ('tags, 'W) this ->
                                              ?chunk:'W ->
                                                unit -> unit Promise.t_1
                                          val cast_from :
                                            ('tags, 'W) this -> 'W t
                                          val prototype : unit -> t_0
                                          val create :
                                            'W WritableStream.t -> 'W t
                                        end =
            struct
              type 'W t = [ `WritableStreamDefaultWriter of 'W ] intf
              let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
                fun _W -> Obj.magic
              and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t =
                fun _W -> Obj.magic
              type 'W t_1 = 'W t
              let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun
                (type __W) ->
                fun (__W_of_js : Ojs.t -> __W) ->
                  fun (x3550 : Ojs.t) -> t_of_js __W_of_js x3550
              and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun
                (type __W) ->
                fun (__W_to_js : __W -> Ojs.t) ->
                  fun (x3548 : __W t) -> t_to_js __W_to_js x3548
              type t_0 = any t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x3554 : Ojs.t) -> t_of_js any_of_js x3554
              and t_0_to_js : t_0 -> Ojs.t =
                fun (x3552 : any t) -> t_to_js any_to_js x3552
              type 'W tags = [ `WritableStreamDefaultWriter of 'W ]
              type 'W tags_1 = 'W tags
              type tags_0 = any tags
              type ('tags, 'W) this =
                'tags intf constraint 'tags =
                            [> `WritableStreamDefaultWriter of 'W ]
              let rec this_of_js :
                'tags 'W .
                  (Ojs.t -> 'tags) ->
                    (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
                = fun (type __tags) -> fun (type __W) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (__W_of_js : Ojs.t -> __W) ->
                    fun (x3558 : Ojs.t) -> intf_of_js __tags_of_js x3558
              and this_to_js :
                'tags 'W .
                  ('tags -> Ojs.t) ->
                    ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
                = fun (type __tags) -> fun (type __W) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (__W_to_js : __W -> Ojs.t) ->
                    fun (x3556 : __tags intf) ->
                      intf_to_js __tags_to_js x3556
              let (get_closed :
                ('tags, 'W) this -> never or_undefined Promise.t_1) =
                fun (x3560 : ('tags, 'W) this) ->
                  Promise.t_1_of_js
                    (fun (x3563 : Ojs.t) ->
                       or_undefined_of_js never_of_js x3563)
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x3560) "closed")
              let (get_desiredSize : ('tags, 'W) this -> float or_null) =
                fun (x3565 : ('tags, 'W) this) ->
                  or_null_of_js Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x3565) "desiredSize")
              let (get_ready :
                ('tags, 'W) this -> never or_undefined Promise.t_1) =
                fun (x3569 : ('tags, 'W) this) ->
                  Promise.t_1_of_js
                    (fun (x3572 : Ojs.t) ->
                       or_undefined_of_js never_of_js x3572)
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x3569) "ready")
              let (abort :
                ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
                =
                fun (x3577 : ('tags, 'W) this) ->
                  fun ?reason:(x3574 : any option) ->
                    fun () ->
                      Promise.t_1_of_js Ojs.unit_of_js
                        (let x3580 = this_to_js Obj.magic Obj.magic x3577 in
                         Ojs.call (Ojs.get_prop_ascii x3580 "abort") "apply"
                           [|x3580;((let x3575 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x3574 with
                                      | Some x3576 ->
                                          ignore
                                            (Ojs.call x3575 "push"
                                               [|(any_to_js x3576)|])
                                      | None -> ());
                                     x3575))|])
              let (close : ('tags, 'W) this -> unit Promise.t_1) =
                fun (x3582 : ('tags, 'W) this) ->
                  Promise.t_1_of_js Ojs.unit_of_js
                    (Ojs.call (this_to_js Obj.magic Obj.magic x3582) "close"
                       [||])
              let (releaseLock : ('tags, 'W) this -> unit) =
                fun (x3586 : ('tags, 'W) this) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic Obj.magic x3586)
                       "releaseLock" [||])
              let (write :
                ('tags, 'W) this -> ?chunk:'W -> unit -> unit Promise.t_1) =
                fun (x3592 : ('tags, 'W) this) ->
                  fun ?chunk:(x3589 : 'W option) ->
                    fun () ->
                      Promise.t_1_of_js Ojs.unit_of_js
                        (let x3595 = this_to_js Obj.magic Obj.magic x3592 in
                         Ojs.call (Ojs.get_prop_ascii x3595 "write") "apply"
                           [|x3595;((let x3590 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x3589 with
                                      | Some x3591 ->
                                          ignore
                                            (Ojs.call x3590 "push"
                                               [|(Obj.magic x3591)|])
                                      | None -> ());
                                     x3590))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t_0) =
                fun () ->
                  t_0_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "WritableStreamDefaultWriter") "prototype")
              let (create : 'W WritableStream.t -> 'W t) =
                fun (x3597 : 'W WritableStream.t) ->
                  t_of_js Obj.magic
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global
                          "WritableStreamDefaultWriter")
                       [|(WritableStream.t_to_js Obj.magic x3597)|])
            end
module ReadableStreamGenericReader =
  struct
    type t = [ `ReadableStreamGenericReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3601 : Ojs.t) -> t_of_js x3601
    and t_0_to_js : t_0 -> Ojs.t = fun (x3600 : t) -> t_to_js x3600
    type tags = [ `ReadableStreamGenericReader ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamGenericReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3604 : Ojs.t) -> intf_of_js __tags_of_js x3604
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3602 : __tags intf) -> intf_to_js __tags_to_js x3602
    let (get_closed : 'tags this -> never or_undefined Promise.t_1) =
      fun (x3606 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x3608 : Ojs.t) -> or_undefined_of_js never_of_js x3608)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3606) "closed")
    let (cancel : 'tags this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x3613 : 'tags this) ->
        fun ?reason:(x3610 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3615 = this_to_js Obj.magic x3613 in
               Ojs.call (Ojs.get_prop_ascii x3615 "cancel") "apply"
                 [|x3615;((let x3611 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3610 with
                            | Some x3612 ->
                                ignore
                                  (Ojs.call x3611 "push"
                                     [|(any_to_js x3612)|])
                            | None -> ());
                           x3611))|])
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadValueResult =
  struct
    type 'T t = [ `ReadableStreamDefaultReadValueResult of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3619 : Ojs.t) -> t_of_js __T_of_js x3619
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3617 : __T t) -> t_to_js __T_to_js x3617
    type 'T tags = [ `ReadableStreamDefaultReadValueResult of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultReadValueResult of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3623 : Ojs.t) -> intf_of_js __tags_of_js x3623
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3621 : __tags intf) -> intf_to_js __tags_to_js x3621
    let (get_done : ('tags, 'T) this -> [ `L_b_false ]) =
      fun (x3625 : ('tags, 'T) this) ->
        let x3628 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3625) "done" in
        match Ojs.bool_of_js x3628 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : ('tags, 'T) this -> [ `L_b_false ] -> unit) =
      fun (x3629 : ('tags, 'T) this) ->
        fun (x3630 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3629) "done"
            (match x3630 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : ('tags, 'T) this -> 'T) =
      fun (x3633 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3633) "value")
    let (set_value : ('tags, 'T) this -> 'T -> unit) =
      fun (x3636 : ('tags, 'T) this) ->
        fun (x3637 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3636) "value"
            (Obj.magic x3637)
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadDoneResult =
  struct
    type t = [ `ReadableStreamDefaultReadDoneResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3641 : Ojs.t) -> t_of_js x3641
    and t_0_to_js : t_0 -> Ojs.t = fun (x3640 : t) -> t_to_js x3640
    type tags = [ `ReadableStreamDefaultReadDoneResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReadDoneResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3644 : Ojs.t) -> intf_of_js __tags_of_js x3644
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3642 : __tags intf) -> intf_to_js __tags_to_js x3642
    let (get_done : 'tags this -> [ `L_b_true ]) =
      fun (x3646 : 'tags this) ->
        let x3648 = Ojs.get_prop_ascii (this_to_js Obj.magic x3646) "done" in
        match Ojs.bool_of_js x3648 with
        | true -> `L_b_true
        | _ -> assert false
    let (set_done : 'tags this -> [ `L_b_true ] -> unit) =
      fun (x3649 : 'tags this) ->
        fun (x3650 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3649) "done"
            (match x3650 with | `L_b_true -> Ojs.bool_to_js true)
    let (get_value : 'tags this -> never or_undefined) =
      fun (x3652 : 'tags this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3652) "value")
    let (set_value : 'tags this -> never or_undefined -> unit) =
      fun (x3655 : 'tags this) ->
        fun (x3656 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3655) "value"
            (or_undefined_to_js never_to_js x3656)
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadResult =
  struct
    type 'T t =
      [ `U_b_false of 'T ReadableStreamDefaultReadValueResult.t 
      | `U_b_true of ReadableStreamDefaultReadDoneResult.t ]
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3663 : Ojs.t) ->
          let x3664 = x3663 in
          match Ojs.bool_of_js (Ojs.get_prop_ascii x3664 "done") with
          | false ->
              `U_b_false
                (ReadableStreamDefaultReadValueResult.t_of_js __T_of_js x3664)
          | true ->
              `U_b_true (ReadableStreamDefaultReadDoneResult.t_of_js x3664)
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun
          (x3659 :
            [ `U_b_false of __T ReadableStreamDefaultReadValueResult.t 
            | `U_b_true of ReadableStreamDefaultReadDoneResult.t ])
          ->
          match x3659 with
          | `U_b_false x3660 ->
              ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x3660
          | `U_b_true x3662 ->
              ReadableStreamDefaultReadDoneResult.t_to_js x3662
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3668 : Ojs.t) -> t_of_js __T_of_js x3668
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3666 : __T t) -> t_to_js __T_to_js x3666
  end
module rec
  AnonymousInterface88:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> ReadableStreamDefaultController.t_0
                         val set_prototype :
                           t -> ReadableStreamDefaultController.t_0 -> unit
                         val create :
                           t -> ReadableStreamDefaultController.t_0
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3671 : Ojs.t) -> x3671
    and t_to_js : t -> Ojs.t = fun (x3670 : Ojs.t) -> x3670
    let (get_prototype : t -> ReadableStreamDefaultController.t_0) =
      fun (x3672 : t) ->
        ReadableStreamDefaultController.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x3672) "prototype")
    let (set_prototype : t -> ReadableStreamDefaultController.t_0 -> unit) =
      fun (x3673 : t) ->
        fun (x3674 : ReadableStreamDefaultController.t_0) ->
          Ojs.set_prop_ascii (t_to_js x3673) "prototype"
            (ReadableStreamDefaultController.t_0_to_js x3674)
    let (create : t -> ReadableStreamDefaultController.t_0) =
      fun (x3675 : t) ->
        ReadableStreamDefaultController.t_0_of_js
          (Ojs.new_obj (t_to_js x3675) [||])
  end
 and
  ReadableStreamDefaultController:sig
                                    type 'R t =
                                      [
                                        `ReadableStreamDefaultController of
                                          'R ]
                                        intf
                                    type 'R t_1 = 'R t
                                    type t_0 = any t
                                    [@@@js.stop ]
                                    type 'R tags =
                                      [
                                        `ReadableStreamDefaultController of
                                          'R ]
                                    type 'R tags_1 = 'R tags
                                    type tags_0 = any tags
                                    [@@@js.start ]
                                    [@@@js.implem
                                      type 'R tags =
                                        [
                                          `ReadableStreamDefaultController of
                                            'R ]
                                      type 'R tags_1 = 'R tags
                                      type tags_0 = any tags]
                                    type ('tags, 'R) this =
                                      'tags intf constraint 'tags =
                                                  [>
                                                    `ReadableStreamDefaultController
                                                      of 'R ]
                                    val t_to_js :
                                      ('R -> Ojs.t) -> 'R t -> Ojs.t
                                    val t_of_js :
                                      (Ojs.t -> 'R) -> Ojs.t -> 'R t
                                    val t_1_to_js :
                                      ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                    val t_1_of_js :
                                      (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                    val t_0_to_js : t_0 -> Ojs.t
                                    val t_0_of_js : Ojs.t -> t_0
                                    val get_desiredSize :
                                      ('tags, 'R) this -> float or_null
                                    val close : ('tags, 'R) this -> unit
                                    val enqueue :
                                      ('tags, 'R) this ->
                                        ?chunk:'R -> unit -> unit
                                    val error :
                                      ('tags, 'R) this ->
                                        ?e:any -> unit -> unit
                                    val cast_from : ('tags, 'R) this -> 'R t
                                    val prototype : unit -> t_0
                                    val create : unit -> t_0
                                  end =
  struct
    type 'R t = [ `ReadableStreamDefaultController of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3678 : Ojs.t) -> t_of_js __R_of_js x3678
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3676 : __R t) -> t_to_js __R_to_js x3676
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3682 : Ojs.t) -> t_of_js any_of_js x3682
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3680 : any t) -> t_to_js any_to_js x3680
    type 'R tags = [ `ReadableStreamDefaultController of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultController of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3686 : Ojs.t) -> intf_of_js __tags_of_js x3686
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3684 : __tags intf) -> intf_to_js __tags_to_js x3684
    let (get_desiredSize : ('tags, 'R) this -> float or_null) =
      fun (x3688 : ('tags, 'R) this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3688)
             "desiredSize")
    let (close : ('tags, 'R) this -> unit) =
      fun (x3692 : ('tags, 'R) this) ->
        ignore (Ojs.call (this_to_js Obj.magic Obj.magic x3692) "close" [||])
    let (enqueue : ('tags, 'R) this -> ?chunk:'R -> unit -> unit) =
      fun (x3698 : ('tags, 'R) this) ->
        fun ?chunk:(x3695 : 'R option) ->
          fun () ->
            ignore
              (let x3701 = this_to_js Obj.magic Obj.magic x3698 in
               Ojs.call (Ojs.get_prop_ascii x3701 "enqueue") "apply"
                 [|x3701;((let x3696 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3695 with
                            | Some x3697 ->
                                ignore
                                  (Ojs.call x3696 "push"
                                     [|(Obj.magic x3697)|])
                            | None -> ());
                           x3696))|])
    let (error : ('tags, 'R) this -> ?e:any -> unit -> unit) =
      fun (x3705 : ('tags, 'R) this) ->
        fun ?e:(x3702 : any option) ->
          fun () ->
            ignore
              (let x3708 = this_to_js Obj.magic Obj.magic x3705 in
               Ojs.call (Ojs.get_prop_ascii x3708 "error") "apply"
                 [|x3708;((let x3703 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3702 with
                            | Some x3704 ->
                                ignore
                                  (Ojs.call x3703 "push"
                                     [|(any_to_js x3704)|])
                            | None -> ());
                           x3703))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             [||])
  end
module ReadableStreamController =
  struct
    type 'T t = 'T ReadableStreamDefaultController.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3711 : Ojs.t) ->
          ReadableStreamDefaultController.t_of_js __T_of_js x3711
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3709 : __T ReadableStreamDefaultController.t) ->
          ReadableStreamDefaultController.t_to_js __T_to_js x3709
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3715 : Ojs.t) -> t_of_js __T_of_js x3715
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3713 : __T t) -> t_to_js __T_to_js x3713
  end
module UnderlyingSourceStartCallback =
  struct
    type 'R t = [ `UnderlyingSourceStartCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3719 : Ojs.t) -> t_of_js __R_of_js x3719
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3717 : __R t) -> t_to_js __R_to_js x3717
    type 'R tags = [ `UnderlyingSourceStartCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourceStartCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3723 : Ojs.t) -> intf_of_js __tags_of_js x3723
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3721 : __tags intf) -> intf_to_js __tags_to_js x3721
    let (apply :
      ('tags, 'R) this -> controller:'R ReadableStreamController.t -> any) =
      fun (x3727 : ('tags, 'R) this) ->
        fun ~controller:(x3725 : 'R ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3727)
               [|(ReadableStreamController.t_to_js Obj.magic x3725)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourcePullCallback =
  struct
    type 'R t = [ `UnderlyingSourcePullCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3732 : Ojs.t) -> t_of_js __R_of_js x3732
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3730 : __R t) -> t_to_js __R_to_js x3730
    type 'R tags = [ `UnderlyingSourcePullCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourcePullCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3736 : Ojs.t) -> intf_of_js __tags_of_js x3736
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3734 : __tags intf) -> intf_to_js __tags_to_js x3734
    let (apply :
      ('tags, 'R) this ->
        controller:'R ReadableStreamController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3740 : ('tags, 'R) this) ->
        fun ~controller:(x3738 : 'R ReadableStreamController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x3744 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x3744)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3740)
               [|(ReadableStreamController.t_to_js Obj.magic x3738)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourceCancelCallback =
  struct
    type t = [ `UnderlyingSourceCancelCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3747 : Ojs.t) -> t_of_js x3747
    and t_0_to_js : t_0 -> Ojs.t = fun (x3746 : t) -> t_to_js x3746
    type tags = [ `UnderlyingSourceCancelCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSourceCancelCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3750 : Ojs.t) -> intf_of_js __tags_of_js x3750
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3748 : __tags intf) -> intf_to_js __tags_to_js x3748
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3755 : 'tags this) ->
        fun ?reason:(x3752 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x3758 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x3758)
              (Ojs.call (this_to_js Obj.magic x3755) "apply"
                 [|Ojs.null;((let x3753 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3752 with
                               | Some x3754 ->
                                   ignore
                                     (Ojs.call x3753 "push"
                                        [|(any_to_js x3754)|])
                               | None -> ());
                              x3753))|])
    let cast_from = Obj.magic
  end
module UnderlyingSource =
  struct
    type 'R t = [ `UnderlyingSource of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3762 : Ojs.t) -> t_of_js __R_of_js x3762
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3760 : __R t) -> t_to_js __R_to_js x3760
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3766 : Ojs.t) -> t_of_js any_of_js x3766
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3764 : any t) -> t_to_js any_to_js x3764
    type 'R tags = [ `UnderlyingSource of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSource of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3770 : Ojs.t) -> intf_of_js __tags_of_js x3770
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3768 : __tags intf) -> intf_to_js __tags_to_js x3768
    let (get_cancel : ('tags, 'R) this -> UnderlyingSourceCancelCallback.t) =
      fun (x3772 : ('tags, 'R) this) ->
        UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3772) "cancel")
    let (set_cancel :
      ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x3775 : ('tags, 'R) this) ->
        fun (x3776 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3775) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x3776)
    let (get_pull : ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t) =
      fun (x3779 : ('tags, 'R) this) ->
        UnderlyingSourcePullCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3779) "pull")
    let (set_pull :
      ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t -> unit) =
      fun (x3783 : ('tags, 'R) this) ->
        fun (x3784 : 'R UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3783) "pull"
            (UnderlyingSourcePullCallback.t_to_js Obj.magic x3784)
    let (get_start : ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t)
      =
      fun (x3788 : ('tags, 'R) this) ->
        UnderlyingSourceStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3788) "start")
    let (set_start :
      ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t -> unit) =
      fun (x3792 : ('tags, 'R) this) ->
        fun (x3793 : 'R UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3792) "start"
            (UnderlyingSourceStartCallback.t_to_js Obj.magic x3793)
    let (get_type : ('tags, 'R) this -> never or_undefined) =
      fun (x3797 : ('tags, 'R) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3797) "type")
    let (set_type : ('tags, 'R) this -> never or_undefined -> unit) =
      fun (x3801 : ('tags, 'R) this) ->
        fun (x3802 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3801) "type"
            (or_undefined_to_js never_to_js x3802)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface87:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ReadableStream.t_0
                         val set_prototype : t -> ReadableStream.t_0 -> unit
                         val create :
                           t ->
                             ?underlyingSource:'R UnderlyingSource.t ->
                               ?strategy:'R QueuingStrategy.t ->
                                 unit -> 'R ReadableStream.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3807 : Ojs.t) -> x3807
    and t_to_js : t -> Ojs.t = fun (x3806 : Ojs.t) -> x3806
    let (get_prototype : t -> ReadableStream.t_0) =
      fun (x3808 : t) ->
        ReadableStream.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x3808) "prototype")
    let (set_prototype : t -> ReadableStream.t_0 -> unit) =
      fun (x3809 : t) ->
        fun (x3810 : ReadableStream.t_0) ->
          Ojs.set_prop_ascii (t_to_js x3809) "prototype"
            (ReadableStream.t_0_to_js x3810)
    let (create :
      t ->
        ?underlyingSource:'R UnderlyingSource.t ->
          ?strategy:'R QueuingStrategy.t -> unit -> 'R ReadableStream.t)
      =
      fun (x3818 : t) ->
        fun ?underlyingSource:(x3811 : 'R UnderlyingSource.t option) ->
          fun ?strategy:(x3812 : 'R QueuingStrategy.t option) ->
            fun () ->
              ReadableStream.t_of_js Obj.magic
                (Ojs.new_obj_arr (t_to_js x3818)
                   (let x3813 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x3811 with
                     | Some x3816 ->
                         ignore
                           (Ojs.call x3813 "push"
                              [|(UnderlyingSource.t_to_js Obj.magic x3816)|])
                     | None -> ());
                    (match x3812 with
                     | Some x3814 ->
                         ignore
                           (Ojs.call x3813 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x3814)|])
                     | None -> ());
                    x3813))
  end
 and
  AnonymousInterface89:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> ReadableStreamDefaultReader.t_0
                         val set_prototype :
                           t -> ReadableStreamDefaultReader.t_0 -> unit
                         val create :
                           t ->
                             stream:'R ReadableStream.t ->
                               'R ReadableStreamDefaultReader.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3821 : Ojs.t) -> x3821
    and t_to_js : t -> Ojs.t = fun (x3820 : Ojs.t) -> x3820
    let (get_prototype : t -> ReadableStreamDefaultReader.t_0) =
      fun (x3822 : t) ->
        ReadableStreamDefaultReader.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x3822) "prototype")
    let (set_prototype : t -> ReadableStreamDefaultReader.t_0 -> unit) =
      fun (x3823 : t) ->
        fun (x3824 : ReadableStreamDefaultReader.t_0) ->
          Ojs.set_prop_ascii (t_to_js x3823) "prototype"
            (ReadableStreamDefaultReader.t_0_to_js x3824)
    let (create :
      t -> stream:'R ReadableStream.t -> 'R ReadableStreamDefaultReader.t) =
      fun (x3827 : t) ->
        fun ~stream:(x3825 : 'R ReadableStream.t) ->
          ReadableStreamDefaultReader.t_of_js Obj.magic
            (Ojs.new_obj (t_to_js x3827)
               [|(ReadableStream.t_to_js Obj.magic x3825)|])
  end and
       ReadableStream:sig
                        type 'R t = [ `ReadableStream of 'R ] intf
                        type 'R t_1 = 'R t
                        type t_0 = any t
                        [@@@js.stop ]
                        type 'R tags = [ `ReadableStream of 'R ]
                        type 'R tags_1 = 'R tags
                        type tags_0 = any tags
                        [@@@js.start ]
                        [@@@js.implem
                          type 'R tags = [ `ReadableStream of 'R ]
                          type 'R tags_1 = 'R tags
                          type tags_0 = any tags]
                        type ('tags, 'R) this =
                          'tags intf constraint 'tags =
                                      [> `ReadableStream of 'R ]
                        val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                        val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                        val t_1_to_js : ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                        val t_1_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val get_locked : ('tags, 'R) this -> bool
                        val cancel :
                          ('tags, 'R) this ->
                            ?reason:any -> unit -> unit Promise.t_1
                        val getReader :
                          ('tags, 'R) this ->
                            'R ReadableStreamDefaultReader.t
                        val pipeThrough :
                          ('tags, 'R) this ->
                            transform:('T, 'R) ReadableWritablePair.t ->
                              ?options:StreamPipeOptions.t -> unit -> 'T t
                        val pipeTo :
                          ('tags, 'R) this ->
                            destination:'R WritableStream.t ->
                              ?options:StreamPipeOptions.t ->
                                unit -> unit Promise.t_1
                        val tee : ('tags, 'R) this -> ('R t * 'R t)
                        val cast_from : ('tags, 'R) this -> 'R t
                        val prototype : unit -> t_0
                        val create :
                          ?underlyingSource:'R UnderlyingSource.t ->
                            ?strategy:'R QueuingStrategy.t -> unit -> 'R t
                      end =
       struct
         type 'R t = [ `ReadableStream of 'R ] intf
         let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
           fun _R -> Obj.magic
         and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t =
           fun _R -> Obj.magic
         type 'R t_1 = 'R t
         let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun
           (type __R) ->
           fun (__R_of_js : Ojs.t -> __R) ->
             fun (x3831 : Ojs.t) -> t_of_js __R_of_js x3831
         and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type
           __R) ->
           fun (__R_to_js : __R -> Ojs.t) ->
             fun (x3829 : __R t) -> t_to_js __R_to_js x3829
         type t_0 = any t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x3835 : Ojs.t) -> t_of_js any_of_js x3835
         and t_0_to_js : t_0 -> Ojs.t =
           fun (x3833 : any t) -> t_to_js any_to_js x3833
         type 'R tags = [ `ReadableStream of 'R ]
         type 'R tags_1 = 'R tags
         type tags_0 = any tags
         type ('tags, 'R) this =
           'tags intf constraint 'tags = [> `ReadableStream of 'R ]
         let rec this_of_js :
           'tags 'R .
             (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
           = fun (type __tags) -> fun (type __R) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (__R_of_js : Ojs.t -> __R) ->
               fun (x3839 : Ojs.t) -> intf_of_js __tags_of_js x3839
         and this_to_js :
           'tags 'R .
             ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
           = fun (type __tags) -> fun (type __R) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (__R_to_js : __R -> Ojs.t) ->
               fun (x3837 : __tags intf) -> intf_to_js __tags_to_js x3837
         let (get_locked : ('tags, 'R) this -> bool) =
           fun (x3841 : ('tags, 'R) this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3841)
                  "locked")
         let (cancel :
           ('tags, 'R) this -> ?reason:any -> unit -> unit Promise.t_1) =
           fun (x3847 : ('tags, 'R) this) ->
             fun ?reason:(x3844 : any option) ->
               fun () ->
                 Promise.t_1_of_js Ojs.unit_of_js
                   (let x3850 = this_to_js Obj.magic Obj.magic x3847 in
                    Ojs.call (Ojs.get_prop_ascii x3850 "cancel") "apply"
                      [|x3850;((let x3845 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x3844 with
                                 | Some x3846 ->
                                     ignore
                                       (Ojs.call x3845 "push"
                                          [|(any_to_js x3846)|])
                                 | None -> ());
                                x3845))|])
         let (getReader :
           ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t) =
           fun (x3852 : ('tags, 'R) this) ->
             ReadableStreamDefaultReader.t_of_js Obj.magic
               (Ojs.call (this_to_js Obj.magic Obj.magic x3852) "getReader"
                  [||])
         let (pipeThrough :
           ('tags, 'R) this ->
             transform:('T, 'R) ReadableWritablePair.t ->
               ?options:StreamPipeOptions.t -> unit -> 'T t)
           =
           fun (x3862 : ('tags, 'R) this) ->
             fun ~transform:(x3856 : ('T, 'R) ReadableWritablePair.t) ->
               fun ?options:(x3857 : StreamPipeOptions.t option) ->
                 fun () ->
                   t_of_js Obj.magic
                     (let x3865 = this_to_js Obj.magic Obj.magic x3862 in
                      Ojs.call (Ojs.get_prop_ascii x3865 "pipeThrough")
                        "apply"
                        [|x3865;((let x3858 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x3858 "push"
                                       [|(ReadableWritablePair.t_to_js
                                            Obj.magic Obj.magic x3856)|]);
                                  (match x3857 with
                                   | Some x3859 ->
                                       ignore
                                         (Ojs.call x3858 "push"
                                            [|(StreamPipeOptions.t_to_js
                                                 x3859)|])
                                   | None -> ());
                                  x3858))|])
         let (pipeTo :
           ('tags, 'R) this ->
             destination:'R WritableStream.t ->
               ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
           =
           fun (x3872 : ('tags, 'R) this) ->
             fun ~destination:(x3867 : 'R WritableStream.t) ->
               fun ?options:(x3868 : StreamPipeOptions.t option) ->
                 fun () ->
                   Promise.t_1_of_js Ojs.unit_of_js
                     (let x3875 = this_to_js Obj.magic Obj.magic x3872 in
                      Ojs.call (Ojs.get_prop_ascii x3875 "pipeTo") "apply"
                        [|x3875;((let x3869 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x3869 "push"
                                       [|(WritableStream.t_to_js Obj.magic
                                            x3867)|]);
                                  (match x3868 with
                                   | Some x3870 ->
                                       ignore
                                         (Ojs.call x3869 "push"
                                            [|(StreamPipeOptions.t_to_js
                                                 x3870)|])
                                   | None -> ());
                                  x3869))|])
         let (tee : ('tags, 'R) this -> ('R t * 'R t)) =
           fun (x3877 : ('tags, 'R) this) ->
             let x3880 =
               Ojs.call (this_to_js Obj.magic Obj.magic x3877) "tee" [||] in
             ((t_of_js Obj.magic (Ojs.array_get x3880 0)),
               (t_of_js Obj.magic (Ojs.array_get x3880 1)))
         let cast_from = Obj.magic
         let (prototype : unit -> t_0) =
           fun () ->
             t_0_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "ReadableStream")
                  "prototype")
         let (create :
           ?underlyingSource:'R UnderlyingSource.t ->
             ?strategy:'R QueuingStrategy.t -> unit -> 'R t)
           =
           fun ?underlyingSource:(x3883 : 'R UnderlyingSource.t option) ->
             fun ?strategy:(x3884 : 'R QueuingStrategy.t option) ->
               fun () ->
                 t_of_js Obj.magic
                   (Ojs.new_obj_arr
                      (Ojs.get_prop_ascii Ojs.global "ReadableStream")
                      (let x3885 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       (match x3883 with
                        | Some x3888 ->
                            ignore
                              (Ojs.call x3885 "push"
                                 [|(UnderlyingSource.t_to_js Obj.magic x3888)|])
                        | None -> ());
                       (match x3884 with
                        | Some x3886 ->
                            ignore
                              (Ojs.call x3885 "push"
                                 [|(QueuingStrategy.t_to_js Obj.magic x3886)|])
                        | None -> ());
                       x3885))
       end and
            ReadableStreamDefaultReader:sig
                                          type 'R t =
                                            [
                                              `ReadableStreamDefaultReader of
                                                'R 
                                            | `ReadableStreamGenericReader ]
                                              intf
                                          type 'R t_1 = 'R t
                                          type t_0 = any t
                                          [@@@js.stop ]
                                          type 'R tags =
                                            [
                                              `ReadableStreamDefaultReader of
                                                'R 
                                            | `ReadableStreamGenericReader ]
                                          type 'R tags_1 = 'R tags
                                          type tags_0 = any tags
                                          [@@@js.start ]
                                          [@@@js.implem
                                            type 'R tags =
                                              [
                                                `ReadableStreamDefaultReader
                                                  of 'R 
                                              | `ReadableStreamGenericReader ]
                                            type 'R tags_1 = 'R tags
                                            type tags_0 = any tags]
                                          type ('tags, 'R) this =
                                            'tags intf constraint 'tags =
                                                        [>
                                                          `ReadableStreamDefaultReader
                                                            of 'R ]
                                          val t_to_js :
                                            ('R -> Ojs.t) -> 'R t -> Ojs.t
                                          val t_of_js :
                                            (Ojs.t -> 'R) -> Ojs.t -> 'R t
                                          val t_1_to_js :
                                            ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                          val t_1_of_js :
                                            (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                          val t_0_to_js : t_0 -> Ojs.t
                                          val t_0_of_js : Ojs.t -> t_0
                                          val read :
                                            ('tags, 'R) this ->
                                              'R
                                                ReadableStreamDefaultReadResult.t
                                                Promise.t_1
                                          val releaseLock :
                                            ('tags, 'R) this -> unit
                                          val cast_from :
                                            ('tags, 'R) this -> 'R t
                                          val prototype : unit -> t_0
                                          val create :
                                            'R ReadableStream.t -> 'R t
                                        end =
            struct
              type 'R t =
                [ `ReadableStreamDefaultReader of 'R 
                | `ReadableStreamGenericReader ] intf
              let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
                fun _R -> Obj.magic
              and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t =
                fun _R -> Obj.magic
              type 'R t_1 = 'R t
              let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun
                (type __R) ->
                fun (__R_of_js : Ojs.t -> __R) ->
                  fun (x3893 : Ojs.t) -> t_of_js __R_of_js x3893
              and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun
                (type __R) ->
                fun (__R_to_js : __R -> Ojs.t) ->
                  fun (x3891 : __R t) -> t_to_js __R_to_js x3891
              type t_0 = any t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x3897 : Ojs.t) -> t_of_js any_of_js x3897
              and t_0_to_js : t_0 -> Ojs.t =
                fun (x3895 : any t) -> t_to_js any_to_js x3895
              type 'R tags =
                [ `ReadableStreamDefaultReader of 'R 
                | `ReadableStreamGenericReader ]
              type 'R tags_1 = 'R tags
              type tags_0 = any tags
              type ('tags, 'R) this =
                'tags intf constraint 'tags =
                            [> `ReadableStreamDefaultReader of 'R ]
              let rec this_of_js :
                'tags 'R .
                  (Ojs.t -> 'tags) ->
                    (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
                = fun (type __tags) -> fun (type __R) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (__R_of_js : Ojs.t -> __R) ->
                    fun (x3901 : Ojs.t) -> intf_of_js __tags_of_js x3901
              and this_to_js :
                'tags 'R .
                  ('tags -> Ojs.t) ->
                    ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
                = fun (type __tags) -> fun (type __R) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (__R_to_js : __R -> Ojs.t) ->
                    fun (x3899 : __tags intf) ->
                      intf_to_js __tags_to_js x3899
              let (read :
                ('tags, 'R) this ->
                  'R ReadableStreamDefaultReadResult.t Promise.t_1)
                =
                fun (x3903 : ('tags, 'R) this) ->
                  Promise.t_1_of_js
                    (fun (x3906 : Ojs.t) ->
                       ReadableStreamDefaultReadResult.t_of_js Obj.magic
                         x3906)
                    (Ojs.call (this_to_js Obj.magic Obj.magic x3903) "read"
                       [||])
              let (releaseLock : ('tags, 'R) this -> unit) =
                fun (x3908 : ('tags, 'R) this) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic Obj.magic x3908)
                       "releaseLock" [||])
              let cast_from = Obj.magic
              let (prototype : unit -> t_0) =
                fun () ->
                  t_0_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "ReadableStreamDefaultReader") "prototype")
              let (create : 'R ReadableStream.t -> 'R t) =
                fun (x3911 : 'R ReadableStream.t) ->
                  t_of_js Obj.magic
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global
                          "ReadableStreamDefaultReader")
                       [|(ReadableStream.t_to_js Obj.magic x3911)|])
            end and
                 ReadableWritablePair:sig
                                        type ('R, 'W) t =
                                          [
                                            `ReadableWritablePair of
                                              ('R * 'W) ]
                                            intf
                                        type ('R, 'W) t_2 = ('R, 'W) t
                                        type 'R t_1 = ('R, any) t
                                        type t_0 = (any, any) t
                                        [@@@js.stop ]
                                        type ('R, 'W) tags =
                                          [
                                            `ReadableWritablePair of
                                              ('R * 'W) ]
                                        type ('R, 'W) tags_2 = ('R, 'W) tags
                                        type 'R tags_1 = ('R, any) tags
                                        type tags_0 = (any, any) tags
                                        [@@@js.start ]
                                        [@@@js.implem
                                          type ('R, 'W) tags =
                                            [
                                              `ReadableWritablePair of
                                                ('R * 'W) ]
                                          type ('R, 'W) tags_2 =
                                            ('R, 'W) tags
                                          type 'R tags_1 = ('R, any) tags
                                          type tags_0 = (any, any) tags]
                                        type ('tags, 'R, 'W) this =
                                          'tags intf constraint 'tags =
                                                      [>
                                                        `ReadableWritablePair
                                                          of ('R * 'W) ]
                                        val t_to_js :
                                          ('R -> Ojs.t) ->
                                            ('W -> Ojs.t) ->
                                              ('R, 'W) t -> Ojs.t
                                        val t_of_js :
                                          (Ojs.t -> 'R) ->
                                            (Ojs.t -> 'W) ->
                                              Ojs.t -> ('R, 'W) t
                                        val t_2_to_js :
                                          ('R -> Ojs.t) ->
                                            ('W -> Ojs.t) ->
                                              ('R, 'W) t_2 -> Ojs.t
                                        val t_2_of_js :
                                          (Ojs.t -> 'R) ->
                                            (Ojs.t -> 'W) ->
                                              Ojs.t -> ('R, 'W) t_2
                                        val t_1_to_js :
                                          ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                        val t_1_of_js :
                                          (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                        val t_0_to_js : t_0 -> Ojs.t
                                        val t_0_of_js : Ojs.t -> t_0
                                        val get_readable :
                                          ('tags, 'R, 'W) this ->
                                            'R ReadableStream.t
                                        val set_readable :
                                          ('tags, 'R, 'W) this ->
                                            'R ReadableStream.t -> unit
                                        val get_writable :
                                          ('tags, 'R, 'W) this ->
                                            'W WritableStream.t
                                        val set_writable :
                                          ('tags, 'R, 'W) this ->
                                            'W WritableStream.t -> unit
                                        val cast_from :
                                          ('tags, 'R, 'W) this -> ('R, 'W) t
                                      end =
                 struct
                   type ('R, 'W) t =
                     [ `ReadableWritablePair of ('R * 'W) ] intf
                   let rec t_of_js :
                     'R 'W .
                       (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t
                     = fun _R -> fun _W -> Obj.magic
                   and t_to_js :
                     'R 'W .
                       ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t
                     = fun _R -> fun _W -> Obj.magic
                   type ('R, 'W) t_2 = ('R, 'W) t
                   let rec t_2_of_js :
                     'R 'W .
                       (Ojs.t -> 'R) ->
                         (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2
                     = fun (type __R) -> fun (type __W) ->
                     fun (__R_of_js : Ojs.t -> __R) ->
                       fun (__W_of_js : Ojs.t -> __W) ->
                         fun (x3917 : Ojs.t) ->
                           t_of_js __R_of_js __W_of_js x3917
                   and t_2_to_js :
                     'R 'W .
                       ('R -> Ojs.t) ->
                         ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t
                     = fun (type __R) -> fun (type __W) ->
                     fun (__R_to_js : __R -> Ojs.t) ->
                       fun (__W_to_js : __W -> Ojs.t) ->
                         fun (x3914 : (__R, __W) t) ->
                           t_to_js __R_to_js __W_to_js x3914
                   type 'R t_1 = ('R, any) t
                   let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                     = fun (type __R) ->
                     fun (__R_of_js : Ojs.t -> __R) ->
                       fun (x3923 : Ojs.t) ->
                         t_of_js __R_of_js any_of_js x3923
                   and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
                     fun (type __R) ->
                     fun (__R_to_js : __R -> Ojs.t) ->
                       fun (x3920 : (__R, any) t) ->
                         t_to_js __R_to_js any_to_js x3920
                   type t_0 = (any, any) t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x3929 : Ojs.t) -> t_of_js any_of_js any_of_js x3929
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x3926 : (any, any) t) ->
                       t_to_js any_to_js any_to_js x3926
                   type ('R, 'W) tags =
                     [ `ReadableWritablePair of ('R * 'W) ]
                   type ('R, 'W) tags_2 = ('R, 'W) tags
                   type 'R tags_1 = ('R, any) tags
                   type tags_0 = (any, any) tags
                   type ('tags, 'R, 'W) this =
                     'tags intf constraint 'tags =
                                 [> `ReadableWritablePair of ('R * 'W) ]
                   let rec this_of_js :
                     'tags 'R 'W .
                       (Ojs.t -> 'tags) ->
                         (Ojs.t -> 'R) ->
                           (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'R, 'W) this
                     = fun (type __tags) -> fun (type __R) -> fun (type __W)
                     ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (__R_of_js : Ojs.t -> __R) ->
                         fun (__W_of_js : Ojs.t -> __W) ->
                           fun (x3934 : Ojs.t) ->
                             intf_of_js __tags_of_js x3934
                   and this_to_js :
                     'tags 'R 'W .
                       ('tags -> Ojs.t) ->
                         ('R -> Ojs.t) ->
                           ('W -> Ojs.t) -> ('tags, 'R, 'W) this -> Ojs.t
                     = fun (type __tags) -> fun (type __R) -> fun (type __W)
                     ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (__R_to_js : __R -> Ojs.t) ->
                         fun (__W_to_js : __W -> Ojs.t) ->
                           fun (x3932 : __tags intf) ->
                             intf_to_js __tags_to_js x3932
                   let (get_readable :
                     ('tags, 'R, 'W) this -> 'R ReadableStream.t) =
                     fun (x3936 : ('tags, 'R, 'W) this) ->
                       ReadableStream.t_of_js Obj.magic
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic Obj.magic x3936)
                            "readable")
                   let (set_readable :
                     ('tags, 'R, 'W) this -> 'R ReadableStream.t -> unit) =
                     fun (x3941 : ('tags, 'R, 'W) this) ->
                       fun (x3942 : 'R ReadableStream.t) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic Obj.magic x3941)
                           "readable"
                           (ReadableStream.t_to_js Obj.magic x3942)
                   let (get_writable :
                     ('tags, 'R, 'W) this -> 'W WritableStream.t) =
                     fun (x3947 : ('tags, 'R, 'W) this) ->
                       WritableStream.t_of_js Obj.magic
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic Obj.magic x3947)
                            "writable")
                   let (set_writable :
                     ('tags, 'R, 'W) this -> 'W WritableStream.t -> unit) =
                     fun (x3952 : ('tags, 'R, 'W) this) ->
                       fun (x3953 : 'W WritableStream.t) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic Obj.magic x3952)
                           "writable"
                           (WritableStream.t_to_js Obj.magic x3953)
                   let cast_from = Obj.magic
                 end
module rec
  AnonymousInterface2:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> Blob.t
                        val set_prototype : t -> Blob.t -> unit
                        val create :
                          t ->
                            ?blobParts:BlobPart.t list ->
                              ?options:BlobPropertyBag.t -> unit -> Blob.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3959 : Ojs.t) -> x3959
    and t_to_js : t -> Ojs.t = fun (x3958 : Ojs.t) -> x3958
    let (get_prototype : t -> Blob.t) =
      fun (x3960 : t) ->
        Blob.t_of_js (Ojs.get_prop_ascii (t_to_js x3960) "prototype")
    let (set_prototype : t -> Blob.t -> unit) =
      fun (x3961 : t) ->
        fun (x3962 : Blob.t) ->
          Ojs.set_prop_ascii (t_to_js x3961) "prototype" (Blob.t_to_js x3962)
    let (create :
      t ->
        ?blobParts:BlobPart.t list ->
          ?options:BlobPropertyBag.t -> unit -> Blob.t)
      =
      fun (x3969 : t) ->
        fun ?blobParts:(x3963 : BlobPart.t list option) ->
          fun ?options:(x3964 : BlobPropertyBag.t option) ->
            fun () ->
              Blob.t_of_js
                (Ojs.new_obj_arr (t_to_js x3969)
                   (let x3965 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x3963 with
                     | Some x3967 ->
                         ignore
                           (Ojs.call x3965 "push"
                              [|(Ojs.list_to_js BlobPart.t_to_js x3967)|])
                     | None -> ());
                    (match x3964 with
                     | Some x3966 ->
                         ignore
                           (Ojs.call x3965 "push"
                              [|(BlobPropertyBag.t_to_js x3966)|])
                     | None -> ());
                    x3965))
  end
 and
  Blob:sig
         type t = [ `Blob ] intf
         type t_0 = t
         [@@@js.stop ]
         type tags = [ `Blob ]
         type tags_0 = tags
         [@@@js.start ]
         [@@@js.implem type tags = [ `Blob ]
           type tags_0 = tags]
         type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
         val t_to_js : t -> Ojs.t
         val t_of_js : Ojs.t -> t
         val t_0_to_js : t_0 -> Ojs.t
         val t_0_of_js : Ojs.t -> t_0
         val get_size : 'tags this -> float
         val get_type : 'tags this -> string
         val arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1
         val slice :
           'tags this ->
             ?start:float -> ?end_:float -> ?contentType:string -> unit -> t
         val stream : 'tags this -> ReadableStream.t_0
         val text : 'tags this -> string Promise.t_1
         val cast_from : 'tags this -> t
         val prototype : unit -> t
         val create :
           ?blobParts:BlobPart.t list ->
             ?options:BlobPropertyBag.t -> unit -> t
       end =
  struct
    type t = [ `Blob ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3971 : Ojs.t) -> t_of_js x3971
    and t_0_to_js : t_0 -> Ojs.t = fun (x3970 : t) -> t_to_js x3970
    type tags = [ `Blob ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3974 : Ojs.t) -> intf_of_js __tags_of_js x3974
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3972 : __tags intf) -> intf_to_js __tags_to_js x3972
    let (get_size : 'tags this -> float) =
      fun (x3976 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3976) "size")
    let (get_type : 'tags this -> string) =
      fun (x3978 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3978) "type")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x3980 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x3980) "arrayBuffer" [||])
    let (slice :
      'tags this ->
        ?start:float -> ?end_:float -> ?contentType:string -> unit -> t)
      =
      fun (x3990 : 'tags this) ->
        fun ?start:(x3983 : float option) ->
          fun ?end_:(x3984 : float option) ->
            fun ?contentType:(x3985 : string option) ->
              fun () ->
                t_of_js
                  (let x3992 = this_to_js Obj.magic x3990 in
                   Ojs.call (Ojs.get_prop_ascii x3992 "slice") "apply"
                     [|x3992;((let x3986 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3983 with
                                | Some x3989 ->
                                    ignore
                                      (Ojs.call x3986 "push"
                                         [|(Ojs.float_to_js x3989)|])
                                | None -> ());
                               (match x3984 with
                                | Some x3988 ->
                                    ignore
                                      (Ojs.call x3986 "push"
                                         [|(Ojs.float_to_js x3988)|])
                                | None -> ());
                               (match x3985 with
                                | Some x3987 ->
                                    ignore
                                      (Ojs.call x3986 "push"
                                         [|(Ojs.string_to_js x3987)|])
                                | None -> ());
                               x3986))|])
    let (stream : 'tags this -> ReadableStream.t_0) =
      fun (x3993 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x3993) "stream" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x3995 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3995) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Blob")
             "prototype")
    let (create :
      ?blobParts:BlobPart.t list -> ?options:BlobPropertyBag.t -> unit -> t)
      =
      fun ?blobParts:(x3998 : BlobPart.t list option) ->
        fun ?options:(x3999 : BlobPropertyBag.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Blob")
                 (let x4000 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3998 with
                   | Some x4002 ->
                       ignore
                         (Ojs.call x4000 "push"
                            [|(Ojs.list_to_js BlobPart.t_to_js x4002)|])
                   | None -> ());
                  (match x3999 with
                   | Some x4001 ->
                       ignore
                         (Ojs.call x4000 "push"
                            [|(BlobPropertyBag.t_to_js x4001)|])
                   | None -> ());
                  x4000))
  end and
       BlobPart:sig
                  type t = (Blob.t, BufferSource.t) union2 or_string
                  type t_0 = t
                  val t_to_js : t -> Ojs.t
                  val t_of_js : Ojs.t -> t
                  val t_0_to_js : t_0 -> Ojs.t
                  val t_0_of_js : Ojs.t -> t_0
                end =
       struct
         type t = (Blob.t, BufferSource.t) union2 or_string
         let rec t_of_js : Ojs.t -> t =
           fun (x4008 : Ojs.t) ->
             or_string_of_js
               (fun (x4009 : Ojs.t) ->
                  union2_of_js Blob.t_of_js BufferSource.t_of_js x4009) x4008
         and t_to_js : t -> Ojs.t =
           fun (x4004 : (Blob.t, BufferSource.t) union2 or_string) ->
             or_string_to_js
               (fun (x4005 : (Blob.t, BufferSource.t) union2) ->
                  union2_to_js Blob.t_to_js BufferSource.t_to_js x4005) x4004
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x4013 : Ojs.t) -> t_of_js x4013
         and t_0_to_js : t_0 -> Ojs.t = fun (x4012 : t) -> t_to_js x4012
       end
module rec
  AnonymousInterface34:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> File.t
                         val set_prototype : t -> File.t -> unit
                         val create :
                           t ->
                             fileBits:BlobPart.t list ->
                               fileName:string ->
                                 ?options:FilePropertyBag.t -> unit -> File.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4015 : Ojs.t) -> x4015
    and t_to_js : t -> Ojs.t = fun (x4014 : Ojs.t) -> x4014
    let (get_prototype : t -> File.t) =
      fun (x4016 : t) ->
        File.t_of_js (Ojs.get_prop_ascii (t_to_js x4016) "prototype")
    let (set_prototype : t -> File.t -> unit) =
      fun (x4017 : t) ->
        fun (x4018 : File.t) ->
          Ojs.set_prop_ascii (t_to_js x4017) "prototype" (File.t_to_js x4018)
    let (create :
      t ->
        fileBits:BlobPart.t list ->
          fileName:string -> ?options:FilePropertyBag.t -> unit -> File.t)
      =
      fun (x4025 : t) ->
        fun ~fileBits:(x4019 : BlobPart.t list) ->
          fun ~fileName:(x4020 : string) ->
            fun ?options:(x4021 : FilePropertyBag.t option) ->
              fun () ->
                File.t_of_js
                  (Ojs.new_obj_arr (t_to_js x4025)
                     (let x4022 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x4022 "push"
                           [|(Ojs.list_to_js BlobPart.t_to_js x4019)|]);
                      ignore
                        (Ojs.call x4022 "push" [|(Ojs.string_to_js x4020)|]);
                      (match x4021 with
                       | Some x4023 ->
                           ignore
                             (Ojs.call x4022 "push"
                                [|(FilePropertyBag.t_to_js x4023)|])
                       | None -> ());
                      x4022))
  end
 and
  File:sig
         type t = [ `Blob  | `File ] intf
         type t_0 = t
         [@@@js.stop ]
         type tags = [ `Blob  | `File ]
         type tags_0 = tags
         [@@@js.start ]
         [@@@js.implem type tags = [ `Blob  | `File ]
           type tags_0 = tags]
         type 'tags this = 'tags intf constraint 'tags = [> `File ]
         val t_to_js : t -> Ojs.t
         val t_of_js : Ojs.t -> t
         val t_0_to_js : t_0 -> Ojs.t
         val t_0_of_js : Ojs.t -> t_0
         val get_lastModified : 'tags this -> float
         val get_name : 'tags this -> string
         val get_webkitRelativePath : 'tags this -> string
         val cast_from : 'tags this -> t
         val prototype : unit -> t
         val create :
           fileBits:BlobPart.t list ->
             fileName:string -> ?options:FilePropertyBag.t -> unit -> t
       end =
  struct
    type t = [ `Blob  | `File ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4027 : Ojs.t) -> t_of_js x4027
    and t_0_to_js : t_0 -> Ojs.t = fun (x4026 : t) -> t_to_js x4026
    type tags = [ `Blob  | `File ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `File ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4030 : Ojs.t) -> intf_of_js __tags_of_js x4030
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4028 : __tags intf) -> intf_to_js __tags_to_js x4028
    let (get_lastModified : 'tags this -> float) =
      fun (x4032 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4032) "lastModified")
    let (get_name : 'tags this -> string) =
      fun (x4034 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4034) "name")
    let (get_webkitRelativePath : 'tags this -> string) =
      fun (x4036 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4036)
             "webkitRelativePath")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "File")
             "prototype")
    let (create :
      fileBits:BlobPart.t list ->
        fileName:string -> ?options:FilePropertyBag.t -> unit -> t)
      =
      fun ~fileBits:(x4038 : BlobPart.t list) ->
        fun ~fileName:(x4039 : string) ->
          fun ?options:(x4040 : FilePropertyBag.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "File")
                   (let x4041 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4041 "push"
                         [|(Ojs.list_to_js BlobPart.t_to_js x4038)|]);
                    ignore
                      (Ojs.call x4041 "push" [|(Ojs.string_to_js x4039)|]);
                    (match x4040 with
                     | Some x4042 ->
                         ignore
                           (Ojs.call x4041 "push"
                              [|(FilePropertyBag.t_to_js x4042)|])
                     | None -> ());
                    x4041))
  end
module FormDataEntryValue =
  struct
    type t = File.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x4046 : Ojs.t) -> or_string_of_js File.t_of_js x4046
    and t_to_js : t -> Ojs.t =
      fun (x4044 : File.t or_string) -> or_string_to_js File.t_to_js x4044
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4049 : Ojs.t) -> t_of_js x4049
    and t_0_to_js : t_0 -> Ojs.t = fun (x4048 : t) -> t_to_js x4048
  end
module rec
  AnonymousInterface41:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FormData.t
                         val set_prototype : t -> FormData.t -> unit
                         val create : t -> FormData.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4051 : Ojs.t) -> x4051
    and t_to_js : t -> Ojs.t = fun (x4050 : Ojs.t) -> x4050
    let (get_prototype : t -> FormData.t) =
      fun (x4052 : t) ->
        FormData.t_of_js (Ojs.get_prop_ascii (t_to_js x4052) "prototype")
    let (set_prototype : t -> FormData.t -> unit) =
      fun (x4053 : t) ->
        fun (x4054 : FormData.t) ->
          Ojs.set_prop_ascii (t_to_js x4053) "prototype"
            (FormData.t_to_js x4054)
    let (create : t -> FormData.t) =
      fun (x4055 : t) -> FormData.t_of_js (Ojs.new_obj (t_to_js x4055) [||])
  end
 and
  FormData:sig
             type t =
               [ `FormData 
               | (string * FormDataEntryValue.t) IterableIterator.tags_1]
                 intf
             type t_0 = t
             [@@@js.stop ]
             type tags =
               [ `FormData 
               | (string * FormDataEntryValue.t) IterableIterator.tags_1]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags =
                 [ `FormData 
                 | (string * FormDataEntryValue.t) IterableIterator.tags_1]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val append :
               'tags this ->
                 name:string ->
                   value:Blob.t or_string -> ?fileName:string -> unit -> unit
             val delete : 'tags this -> name:string -> unit
             val get_ :
               'tags this -> name:string -> FormDataEntryValue.t or_null
             val getAll :
               'tags this -> name:string -> FormDataEntryValue.t list
             val has : 'tags this -> name:string -> bool
             val set_ :
               'tags this ->
                 name:string ->
                   value:Blob.t or_string -> ?fileName:string -> unit -> unit
             val forEach :
               'tags this ->
                 callbackfn:(value:FormDataEntryValue.t ->
                               key:string -> parent:t -> unit)
                   -> ?thisArg:any -> unit -> unit
             val entries :
               'tags this ->
                 (string * FormDataEntryValue.t) IterableIterator.t_1
             val keys : 'tags this -> string IterableIterator.t_1
             val values :
               'tags this -> FormDataEntryValue.t IterableIterator.t_1
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create : unit -> t
           end =
  struct
    type t =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4057 : Ojs.t) -> t_of_js x4057
    and t_0_to_js : t_0 -> Ojs.t = fun (x4056 : t) -> t_to_js x4056
    type tags =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4060 : Ojs.t) -> intf_of_js __tags_of_js x4060
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4058 : __tags intf) -> intf_to_js __tags_to_js x4058
    let (append :
      'tags this ->
        name:string ->
          value:Blob.t or_string -> ?fileName:string -> unit -> unit)
      =
      fun (x4068 : 'tags this) ->
        fun ~name:(x4062 : string) ->
          fun ~value:(x4063 : Blob.t or_string) ->
            fun ?fileName:(x4064 : string option) ->
              fun () ->
                ignore
                  (let x4070 = this_to_js Obj.magic x4068 in
                   Ojs.call (Ojs.get_prop_ascii x4070 "append") "apply"
                     [|x4070;((let x4065 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4065 "push"
                                    [|(Ojs.string_to_js x4062)|]);
                               ignore
                                 (Ojs.call x4065 "push"
                                    [|(or_string_to_js Blob.t_to_js x4063)|]);
                               (match x4064 with
                                | Some x4066 ->
                                    ignore
                                      (Ojs.call x4065 "push"
                                         [|(Ojs.string_to_js x4066)|])
                                | None -> ());
                               x4065))|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4072 : 'tags this) ->
        fun ~name:(x4071 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4072) "delete"
               [|(Ojs.string_to_js x4071)|])
    let (get_ : 'tags this -> name:string -> FormDataEntryValue.t or_null) =
      fun (x4075 : 'tags this) ->
        fun ~name:(x4074 : string) ->
          or_null_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4075) "get"
               [|(Ojs.string_to_js x4074)|])
    let (getAll : 'tags this -> name:string -> FormDataEntryValue.t list) =
      fun (x4079 : 'tags this) ->
        fun ~name:(x4078 : string) ->
          Ojs.list_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4079) "getAll"
               [|(Ojs.string_to_js x4078)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4083 : 'tags this) ->
        fun ~name:(x4082 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4083) "has"
               [|(Ojs.string_to_js x4082)|])
    let (set_ :
      'tags this ->
        name:string ->
          value:Blob.t or_string -> ?fileName:string -> unit -> unit)
      =
      fun (x4091 : 'tags this) ->
        fun ~name:(x4085 : string) ->
          fun ~value:(x4086 : Blob.t or_string) ->
            fun ?fileName:(x4087 : string option) ->
              fun () ->
                ignore
                  (let x4093 = this_to_js Obj.magic x4091 in
                   Ojs.call (Ojs.get_prop_ascii x4093 "set") "apply"
                     [|x4093;((let x4088 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4088 "push"
                                    [|(Ojs.string_to_js x4085)|]);
                               ignore
                                 (Ojs.call x4088 "push"
                                    [|(or_string_to_js Blob.t_to_js x4086)|]);
                               (match x4087 with
                                | Some x4089 ->
                                    ignore
                                      (Ojs.call x4088 "push"
                                         [|(Ojs.string_to_js x4089)|])
                                | None -> ());
                               x4088))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FormDataEntryValue.t ->
                      key:string -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x4101 : 'tags this) ->
        fun
          ~callbackfn:(x4094 :
                        value:FormDataEntryValue.t ->
                          key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4095 : any option) ->
            fun () ->
              ignore
                (let x4103 = this_to_js Obj.magic x4101 in
                 Ojs.call (Ojs.get_prop_ascii x4103 "forEach") "apply"
                   [|x4103;((let x4096 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4096 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4098 : Ojs.t) ->
                                          fun (x4099 : Ojs.t) ->
                                            fun (x4100 : Ojs.t) ->
                                              x4094
                                                ~value:(FormDataEntryValue.t_of_js
                                                          x4098)
                                                ~key:(Ojs.string_of_js x4099)
                                                ~parent:(t_of_js x4100)))|]);
                             (match x4095 with
                              | Some x4097 ->
                                  ignore
                                    (Ojs.call x4096 "push"
                                       [|(any_to_js x4097)|])
                              | None -> ());
                             x4096))|])
    let (entries :
      'tags this -> (string * FormDataEntryValue.t) IterableIterator.t_1) =
      fun (x4104 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4106 : Ojs.t) ->
             let x4107 = x4106 in
             ((Ojs.string_of_js (Ojs.array_get x4107 0)),
               (FormDataEntryValue.t_of_js (Ojs.array_get x4107 1))))
          (Ojs.call (this_to_js Obj.magic x4104) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4108 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4108) "keys" [||])
    let (values : 'tags this -> FormDataEntryValue.t IterableIterator.t_1) =
      fun (x4111 : 'tags this) ->
        IterableIterator.t_1_of_js FormDataEntryValue.t_of_js
          (Ojs.call (this_to_js Obj.magic x4111) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FormData")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FormData") [||])
  end
module rec
  AnonymousInterface110:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> URLSearchParams.t
                          val set_prototype : t -> URLSearchParams.t -> unit
                          val create :
                            t ->
                              ?init:((URLSearchParams.t,
                                       (string, string) Record.t_2) union2,
                                string list) or_array or_string ->
                                unit -> URLSearchParams.t
                          val toString : t -> string
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4115 : Ojs.t) -> x4115
    and t_to_js : t -> Ojs.t = fun (x4114 : Ojs.t) -> x4114
    let (get_prototype : t -> URLSearchParams.t) =
      fun (x4116 : t) ->
        URLSearchParams.t_of_js
          (Ojs.get_prop_ascii (t_to_js x4116) "prototype")
    let (set_prototype : t -> URLSearchParams.t -> unit) =
      fun (x4117 : t) ->
        fun (x4118 : URLSearchParams.t) ->
          Ojs.set_prop_ascii (t_to_js x4117) "prototype"
            (URLSearchParams.t_to_js x4118)
    let (create :
      t ->
        ?init:((URLSearchParams.t, (string, string) Record.t_2) union2,
          string list) or_array or_string -> unit -> URLSearchParams.t)
      =
      fun (x4130 : t) ->
        fun
          ?init:(x4119 :
                  ((URLSearchParams.t, (string, string) Record.t_2) union2,
                    string list) or_array or_string option)
          ->
          fun () ->
            URLSearchParams.t_of_js
              (Ojs.new_obj_arr (t_to_js x4130)
                 (let x4120 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x4119 with
                   | Some x4121 ->
                       ignore
                         (Ojs.call x4120 "push"
                            [|(or_string_to_js
                                 (fun
                                    (x4122 :
                                      ((URLSearchParams.t,
                                         (string, string) Record.t_2) union2,
                                        string list) or_array)
                                    ->
                                    or_array_to_js
                                      (fun
                                         (x4123 :
                                           (URLSearchParams.t,
                                             (string, string) Record.t_2)
                                             union2)
                                         ->
                                         union2_to_js URLSearchParams.t_to_js
                                           (fun
                                              (x4125 :
                                                (string, string) Record.t_2)
                                              ->
                                              Record.t_2_to_js
                                                Ojs.string_to_js
                                                Ojs.string_to_js x4125) x4123)
                                      (fun (x4128 : string list) ->
                                         Ojs.list_to_js Ojs.string_to_js
                                           x4128) x4122) x4121)|])
                   | None -> ());
                  x4120))
    let (toString : t -> string) =
      fun (x4131 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x4131) "toString" [||])
  end
 and
  URLSearchParams:sig
                    type t =
                      [ `URLSearchParams 
                      | (string * string) IterableIterator.tags_1] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags =
                      [ `URLSearchParams 
                      | (string * string) IterableIterator.tags_1]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags =
                        [ `URLSearchParams 
                        | (string * string) IterableIterator.tags_1]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `URLSearchParams ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val append :
                      'tags this -> name:string -> value:string -> unit
                    val delete : 'tags this -> name:string -> unit
                    val get_ : 'tags this -> name:string -> string or_null
                    val getAll : 'tags this -> name:string -> string list
                    val has : 'tags this -> name:string -> bool
                    val set_ :
                      'tags this -> name:string -> value:string -> unit
                    val sort : 'tags this -> unit
                    val toString : 'tags this -> string
                    val forEach :
                      'tags this ->
                        callbackfn:(value:string ->
                                      key:string -> parent:t -> unit)
                          -> ?thisArg:any -> unit -> unit
                    val entries :
                      'tags this -> (string * string) IterableIterator.t_1
                    val keys : 'tags this -> string IterableIterator.t_1
                    val values : 'tags this -> string IterableIterator.t_1
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create :
                      ?init:((t, (string, string) Record.t_2) union2,
                        string list) or_array or_string -> unit -> t
                    val toString' : unit -> string
                  end =
  struct
    type t =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4133 : Ojs.t) -> t_of_js x4133
    and t_0_to_js : t_0 -> Ojs.t = fun (x4132 : t) -> t_to_js x4132
    type tags =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URLSearchParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4136 : Ojs.t) -> intf_of_js __tags_of_js x4136
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4134 : __tags intf) -> intf_to_js __tags_to_js x4134
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x4140 : 'tags this) ->
        fun ~name:(x4138 : string) ->
          fun ~value:(x4139 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4140) "append"
                 [|(Ojs.string_to_js x4138);(Ojs.string_to_js x4139)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4143 : 'tags this) ->
        fun ~name:(x4142 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4143) "delete"
               [|(Ojs.string_to_js x4142)|])
    let (get_ : 'tags this -> name:string -> string or_null) =
      fun (x4146 : 'tags this) ->
        fun ~name:(x4145 : string) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4146) "get"
               [|(Ojs.string_to_js x4145)|])
    let (getAll : 'tags this -> name:string -> string list) =
      fun (x4150 : 'tags this) ->
        fun ~name:(x4149 : string) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4150) "getAll"
               [|(Ojs.string_to_js x4149)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4154 : 'tags this) ->
        fun ~name:(x4153 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4154) "has"
               [|(Ojs.string_to_js x4153)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x4158 : 'tags this) ->
        fun ~name:(x4156 : string) ->
          fun ~value:(x4157 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4158) "set"
                 [|(Ojs.string_to_js x4156);(Ojs.string_to_js x4157)|])
    let (sort : 'tags this -> unit) =
      fun (x4160 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4160) "sort" [||])
    let (toString : 'tags this -> string) =
      fun (x4162 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4162) "toString" [||])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4171 : 'tags this) ->
        fun
          ~callbackfn:(x4164 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4165 : any option) ->
            fun () ->
              ignore
                (let x4173 = this_to_js Obj.magic x4171 in
                 Ojs.call (Ojs.get_prop_ascii x4173 "forEach") "apply"
                   [|x4173;((let x4166 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4166 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4168 : Ojs.t) ->
                                          fun (x4169 : Ojs.t) ->
                                            fun (x4170 : Ojs.t) ->
                                              x4164
                                                ~value:(Ojs.string_of_js
                                                          x4168)
                                                ~key:(Ojs.string_of_js x4169)
                                                ~parent:(t_of_js x4170)))|]);
                             (match x4165 with
                              | Some x4167 ->
                                  ignore
                                    (Ojs.call x4166 "push"
                                       [|(any_to_js x4167)|])
                              | None -> ());
                             x4166))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x4174 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4176 : Ojs.t) ->
             let x4177 = x4176 in
             ((Ojs.string_of_js (Ojs.array_get x4177 0)),
               (Ojs.string_of_js (Ojs.array_get x4177 1))))
          (Ojs.call (this_to_js Obj.magic x4174) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4178 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4178) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x4181 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4181) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "URLSearchParams") "prototype")
    let (create :
      ?init:((t, (string, string) Record.t_2) union2, string list) or_array
        or_string -> unit -> t)
      =
      fun
        ?init:(x4184 :
                ((t, (string, string) Record.t_2) union2, string list)
                  or_array or_string option)
        ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
               (let x4185 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4184 with
                 | Some x4186 ->
                     ignore
                       (Ojs.call x4185 "push"
                          [|(or_string_to_js
                               (fun
                                  (x4187 :
                                    ((t, (string, string) Record.t_2) union2,
                                      string list) or_array)
                                  ->
                                  or_array_to_js
                                    (fun
                                       (x4188 :
                                         (t, (string, string) Record.t_2)
                                           union2)
                                       ->
                                       union2_to_js t_to_js
                                         (fun
                                            (x4190 :
                                              (string, string) Record.t_2)
                                            ->
                                            Record.t_2_to_js Ojs.string_to_js
                                              Ojs.string_to_js x4190) x4188)
                                    (fun (x4193 : string list) ->
                                       Ojs.list_to_js Ojs.string_to_js x4193)
                                    x4187) x4186)|])
                 | None -> ());
                x4185))
    let (toString' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
             "toString" [||])
  end
module XMLHttpRequestBodyInit =
  struct
    type t =
      (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4
        or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x4201 : Ojs.t) ->
        or_string_of_js
          (fun (x4202 : Ojs.t) ->
             union4_of_js Blob.t_of_js BufferSource.t_of_js FormData.t_of_js
               URLSearchParams.t_of_js x4202) x4201
    and t_to_js : t -> Ojs.t =
      fun
        (x4195 :
          (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4
            or_string)
        ->
        or_string_to_js
          (fun
             (x4196 :
               (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4)
             ->
             union4_to_js Blob.t_to_js BufferSource.t_to_js FormData.t_to_js
               URLSearchParams.t_to_js x4196) x4195
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4208 : Ojs.t) -> t_of_js x4208
    and t_0_to_js : t_0 -> Ojs.t = fun (x4207 : t) -> t_to_js x4207
  end
module BodyInit =
  struct
    type t = (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x4212 : Ojs.t) ->
        union2_of_js ReadableStream.t_0_of_js XMLHttpRequestBodyInit.t_of_js
          x4212
    and t_to_js : t -> Ojs.t =
      fun (x4209 : (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2) ->
        union2_to_js ReadableStream.t_0_to_js XMLHttpRequestBodyInit.t_to_js
          x4209
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4216 : Ojs.t) -> t_of_js x4216
    and t_0_to_js : t_0 -> Ojs.t = fun (x4215 : t) -> t_to_js x4215
  end
module RequestInit =
  struct
    type t = [ `RequestInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4218 : Ojs.t) -> t_of_js x4218
    and t_0_to_js : t_0 -> Ojs.t = fun (x4217 : t) -> t_to_js x4217
    type tags = [ `RequestInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RequestInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4221 : Ojs.t) -> intf_of_js __tags_of_js x4221
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4219 : __tags intf) -> intf_to_js __tags_to_js x4219
    let (get_body : 'tags this -> BodyInit.t or_null) =
      fun (x4223 : 'tags this) ->
        or_null_of_js BodyInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4223) "body")
    let (set_body : 'tags this -> BodyInit.t or_null -> unit) =
      fun (x4226 : 'tags this) ->
        fun (x4227 : BodyInit.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4226) "body"
            (or_null_to_js BodyInit.t_to_js x4227)
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4230 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4230) "cache")
    let (set_cache : 'tags this -> RequestCache.t -> unit) =
      fun (x4232 : 'tags this) ->
        fun (x4233 : RequestCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4232) "cache"
            (RequestCache.t_to_js x4233)
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4235 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4235) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x4237 : 'tags this) ->
        fun (x4238 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4237) "credentials"
            (RequestCredentials.t_to_js x4238)
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x4240 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4240) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4242 : 'tags this) ->
        fun (x4243 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4242) "headers"
            (HeadersInit.t_to_js x4243)
    let (get_integrity : 'tags this -> string) =
      fun (x4245 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4245) "integrity")
    let (set_integrity : 'tags this -> string -> unit) =
      fun (x4247 : 'tags this) ->
        fun (x4248 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4247) "integrity"
            (Ojs.string_to_js x4248)
    let (get_keepalive : 'tags this -> bool) =
      fun (x4250 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4250) "keepalive")
    let (set_keepalive : 'tags this -> bool -> unit) =
      fun (x4252 : 'tags this) ->
        fun (x4253 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4252) "keepalive"
            (Ojs.bool_to_js x4253)
    let (get_method : 'tags this -> string) =
      fun (x4255 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4255) "method")
    let (set_method : 'tags this -> string -> unit) =
      fun (x4257 : 'tags this) ->
        fun (x4258 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4257) "method"
            (Ojs.string_to_js x4258)
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4260 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4260) "mode")
    let (set_mode : 'tags this -> RequestMode.t -> unit) =
      fun (x4262 : 'tags this) ->
        fun (x4263 : RequestMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4262) "mode"
            (RequestMode.t_to_js x4263)
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4265 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4265) "redirect")
    let (set_redirect : 'tags this -> RequestRedirect.t -> unit) =
      fun (x4267 : 'tags this) ->
        fun (x4268 : RequestRedirect.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4267) "redirect"
            (RequestRedirect.t_to_js x4268)
    let (get_referrer : 'tags this -> string) =
      fun (x4270 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4270) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x4272 : 'tags this) ->
        fun (x4273 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4272) "referrer"
            (Ojs.string_to_js x4273)
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4275 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4275) "referrerPolicy")
    let (set_referrerPolicy : 'tags this -> ReferrerPolicy.t -> unit) =
      fun (x4277 : 'tags this) ->
        fun (x4278 : ReferrerPolicy.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4277) "referrerPolicy"
            (ReferrerPolicy.t_to_js x4278)
    let (get_signal : 'tags this -> AbortSignal.t or_null) =
      fun (x4280 : 'tags this) ->
        or_null_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4280) "signal")
    let (set_signal : 'tags this -> AbortSignal.t or_null -> unit) =
      fun (x4283 : 'tags this) ->
        fun (x4284 : AbortSignal.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4283) "signal"
            (or_null_to_js AbortSignal.t_to_js x4284)
    let (get_window : 'tags this -> never or_null) =
      fun (x4287 : 'tags this) ->
        or_null_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4287) "window")
    let (set_window : 'tags this -> never or_null -> unit) =
      fun (x4290 : 'tags this) ->
        fun (x4291 : never or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4290) "window"
            (or_null_to_js never_to_js x4291)
    let cast_from = Obj.magic
  end
module Body =
  struct
    type t = [ `Body ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4295 : Ojs.t) -> t_of_js x4295
    and t_0_to_js : t_0 -> Ojs.t = fun (x4294 : t) -> t_to_js x4294
    type tags = [ `Body ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Body ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4298 : Ojs.t) -> intf_of_js __tags_of_js x4298
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4296 : __tags intf) -> intf_to_js __tags_to_js x4296
    let (get_body : 'tags this -> Uint8Array.t_0 ReadableStream.t or_null) =
      fun (x4300 : 'tags this) ->
        or_null_of_js
          (fun (x4302 : Ojs.t) ->
             ReadableStream.t_of_js Uint8Array.t_0_of_js x4302)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4300) "body")
    let (get_bodyUsed : 'tags this -> bool) =
      fun (x4304 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4304) "bodyUsed")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x4306 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x4306) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t Promise.t_1) =
      fun (x4309 : 'tags this) ->
        Promise.t_1_of_js Blob.t_of_js
          (Ojs.call (this_to_js Obj.magic x4309) "blob" [||])
    let (formData : 'tags this -> FormData.t Promise.t_1) =
      fun (x4312 : 'tags this) ->
        Promise.t_1_of_js FormData.t_of_js
          (Ojs.call (this_to_js Obj.magic x4312) "formData" [||])
    let (json : 'tags this -> any Promise.t_1) =
      fun (x4315 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.call (this_to_js Obj.magic x4315) "json" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x4318 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4318) "text" [||])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface90:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Request.t
                         val set_prototype : t -> Request.t -> unit
                         val create :
                           t ->
                             input:RequestInfo.t ->
                               ?init:RequestInit.t -> unit -> Request.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4322 : Ojs.t) -> x4322
    and t_to_js : t -> Ojs.t = fun (x4321 : Ojs.t) -> x4321
    let (get_prototype : t -> Request.t) =
      fun (x4323 : t) ->
        Request.t_of_js (Ojs.get_prop_ascii (t_to_js x4323) "prototype")
    let (set_prototype : t -> Request.t -> unit) =
      fun (x4324 : t) ->
        fun (x4325 : Request.t) ->
          Ojs.set_prop_ascii (t_to_js x4324) "prototype"
            (Request.t_to_js x4325)
    let (create :
      t -> input:RequestInfo.t -> ?init:RequestInit.t -> unit -> Request.t) =
      fun (x4330 : t) ->
        fun ~input:(x4326 : RequestInfo.t) ->
          fun ?init:(x4327 : RequestInit.t option) ->
            fun () ->
              Request.t_of_js
                (Ojs.new_obj_arr (t_to_js x4330)
                   (let x4328 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4328 "push" [|(RequestInfo.t_to_js x4326)|]);
                    (match x4327 with
                     | Some x4329 ->
                         ignore
                           (Ojs.call x4328 "push"
                              [|(RequestInit.t_to_js x4329)|])
                     | None -> ());
                    x4328))
  end
 and
  Request:sig
            type t = [ `Body  | `Request ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `Body  | `Request ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags = [ `Body  | `Request ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Request ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_cache : 'tags this -> RequestCache.t
            val get_credentials : 'tags this -> RequestCredentials.t
            val get_destination : 'tags this -> RequestDestination.t
            val get_headers : 'tags this -> Headers.t
            val get_integrity : 'tags this -> string
            val get_keepalive : 'tags this -> bool
            val get_method : 'tags this -> string
            val get_mode : 'tags this -> RequestMode.t
            val get_redirect : 'tags this -> RequestRedirect.t
            val get_referrer : 'tags this -> string
            val get_referrerPolicy : 'tags this -> ReferrerPolicy.t
            val get_signal : 'tags this -> AbortSignal.t
            val get_url : 'tags this -> string
            val clone : 'tags this -> t
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t
          end =
  struct
    type t = [ `Body  | `Request ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4332 : Ojs.t) -> t_of_js x4332
    and t_0_to_js : t_0 -> Ojs.t = fun (x4331 : t) -> t_to_js x4331
    type tags = [ `Body  | `Request ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Request ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4335 : Ojs.t) -> intf_of_js __tags_of_js x4335
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4333 : __tags intf) -> intf_to_js __tags_to_js x4333
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4337 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4337) "cache")
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4339 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4339) "credentials")
    let (get_destination : 'tags this -> RequestDestination.t) =
      fun (x4341 : 'tags this) ->
        RequestDestination.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4341) "destination")
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4343 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4343) "headers")
    let (get_integrity : 'tags this -> string) =
      fun (x4345 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4345) "integrity")
    let (get_keepalive : 'tags this -> bool) =
      fun (x4347 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4347) "keepalive")
    let (get_method : 'tags this -> string) =
      fun (x4349 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4349) "method")
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4351 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4351) "mode")
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4353 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4353) "redirect")
    let (get_referrer : 'tags this -> string) =
      fun (x4355 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4355) "referrer")
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4357 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4357) "referrerPolicy")
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x4359 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4359) "signal")
    let (get_url : 'tags this -> string) =
      fun (x4361 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4361) "url")
    let (clone : 'tags this -> t) =
      fun (x4363 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4363) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Request")
             "prototype")
    let (create : input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t) =
      fun ~input:(x4365 : RequestInfo.t) ->
        fun ?init:(x4366 : RequestInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Request")
                 (let x4367 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4367 "push" [|(RequestInfo.t_to_js x4365)|]);
                  (match x4366 with
                   | Some x4368 ->
                       ignore
                         (Ojs.call x4367 "push"
                            [|(RequestInit.t_to_js x4368)|])
                   | None -> ());
                  x4367))
  end and
       RequestInfo:sig
                     type t = Request.t or_string
                     type t_0 = t
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                   end =
       struct
         type t = Request.t or_string
         let rec t_of_js : Ojs.t -> t =
           fun (x4371 : Ojs.t) -> or_string_of_js Request.t_of_js x4371
         and t_to_js : t -> Ojs.t =
           fun (x4369 : Request.t or_string) ->
             or_string_to_js Request.t_to_js x4369
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x4374 : Ojs.t) -> t_of_js x4374
         and t_0_to_js : t_0 -> Ojs.t = fun (x4373 : t) -> t_to_js x4373
       end
module ResponseType =
  struct
    type t =
      [ `L_s43_basic  | `L_s55_cors  | `L_s57_default  | `L_s67_error 
      | `L_s137_opaque  | `L_s138_opaqueredirect ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4376 : Ojs.t) ->
        let x4377 = x4376 in
        match Ojs.string_of_js x4377 with
        | "basic" -> `L_s43_basic
        | "cors" -> `L_s55_cors
        | "default" -> `L_s57_default
        | "error" -> `L_s67_error
        | "opaque" -> `L_s137_opaque
        | "opaqueredirect" -> `L_s138_opaqueredirect
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4375 :
          [ `L_s43_basic  | `L_s55_cors  | `L_s57_default  | `L_s67_error 
          | `L_s137_opaque  | `L_s138_opaqueredirect ])
        ->
        match x4375 with
        | `L_s43_basic -> Ojs.string_to_js "basic"
        | `L_s55_cors -> Ojs.string_to_js "cors"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s67_error -> Ojs.string_to_js "error"
        | `L_s137_opaque -> Ojs.string_to_js "opaque"
        | `L_s138_opaqueredirect -> Ojs.string_to_js "opaqueredirect"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4379 : Ojs.t) -> t_of_js x4379
    and t_0_to_js : t_0 -> Ojs.t = fun (x4378 : t) -> t_to_js x4378
  end
module ResponseInit =
  struct
    type t = [ `ResponseInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4381 : Ojs.t) -> t_of_js x4381
    and t_0_to_js : t_0 -> Ojs.t = fun (x4380 : t) -> t_to_js x4380
    type tags = [ `ResponseInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ResponseInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4384 : Ojs.t) -> intf_of_js __tags_of_js x4384
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4382 : __tags intf) -> intf_to_js __tags_to_js x4382
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x4386 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4386) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4388 : 'tags this) ->
        fun (x4389 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4388) "headers"
            (HeadersInit.t_to_js x4389)
    let (get_status : 'tags this -> float) =
      fun (x4391 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4391) "status")
    let (set_status : 'tags this -> float -> unit) =
      fun (x4393 : 'tags this) ->
        fun (x4394 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4393) "status"
            (Ojs.float_to_js x4394)
    let (get_statusText : 'tags this -> string) =
      fun (x4396 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4396) "statusText")
    let (set_statusText : 'tags this -> string -> unit) =
      fun (x4398 : 'tags this) ->
        fun (x4399 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4398) "statusText"
            (Ojs.string_to_js x4399)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface109:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> URL.t
                          val set_prototype : t -> URL.t -> unit
                          val create :
                            t ->
                              url:URL.t or_string ->
                                ?base:URL.t or_string -> unit -> URL.t
                          val createObjectURL : t -> obj:Blob.t -> string
                          val revokeObjectURL : t -> url:string -> unit
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4402 : Ojs.t) -> x4402
    and t_to_js : t -> Ojs.t = fun (x4401 : Ojs.t) -> x4401
    let (get_prototype : t -> URL.t) =
      fun (x4403 : t) ->
        URL.t_of_js (Ojs.get_prop_ascii (t_to_js x4403) "prototype")
    let (set_prototype : t -> URL.t -> unit) =
      fun (x4404 : t) ->
        fun (x4405 : URL.t) ->
          Ojs.set_prop_ascii (t_to_js x4404) "prototype" (URL.t_to_js x4405)
    let (create :
      t -> url:URL.t or_string -> ?base:URL.t or_string -> unit -> URL.t) =
      fun (x4412 : t) ->
        fun ~url:(x4406 : URL.t or_string) ->
          fun ?base:(x4407 : URL.t or_string option) ->
            fun () ->
              URL.t_of_js
                (Ojs.new_obj_arr (t_to_js x4412)
                   (let x4408 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4408 "push"
                         [|(or_string_to_js URL.t_to_js x4406)|]);
                    (match x4407 with
                     | Some x4409 ->
                         ignore
                           (Ojs.call x4408 "push"
                              [|(or_string_to_js URL.t_to_js x4409)|])
                     | None -> ());
                    x4408))
    let (createObjectURL : t -> obj:Blob.t -> string) =
      fun (x4414 : t) ->
        fun ~obj:(x4413 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x4414) "createObjectURL"
               [|(Blob.t_to_js x4413)|])
    let (revokeObjectURL : t -> url:string -> unit) =
      fun (x4416 : t) ->
        fun ~url:(x4415 : string) ->
          ignore
            (Ojs.call (t_to_js x4416) "revokeObjectURL"
               [|(Ojs.string_to_js x4415)|])
  end
 and
  URL:sig
        type t = [ `URL ] intf
        type t_0 = t
        [@@@js.stop ]
        type tags = [ `URL ]
        type tags_0 = tags
        [@@@js.start ]
        [@@@js.implem type tags = [ `URL ]
          type tags_0 = tags]
        type 'tags this = 'tags intf constraint 'tags = [> `URL ]
        val t_to_js : t -> Ojs.t
        val t_of_js : Ojs.t -> t
        val t_0_to_js : t_0 -> Ojs.t
        val t_0_of_js : Ojs.t -> t_0
        val get_hash : 'tags this -> string
        val set_hash : 'tags this -> string -> unit
        val get_host : 'tags this -> string
        val set_host : 'tags this -> string -> unit
        val get_hostname : 'tags this -> string
        val set_hostname : 'tags this -> string -> unit
        val get_href : 'tags this -> string
        val set_href : 'tags this -> string -> unit
        val toString : 'tags this -> string
        val get_origin : 'tags this -> string
        val get_password : 'tags this -> string
        val set_password : 'tags this -> string -> unit
        val get_pathname : 'tags this -> string
        val set_pathname : 'tags this -> string -> unit
        val get_port : 'tags this -> string
        val set_port : 'tags this -> string -> unit
        val get_protocol : 'tags this -> string
        val set_protocol : 'tags this -> string -> unit
        val get_search : 'tags this -> string
        val set_search : 'tags this -> string -> unit
        val get_searchParams : 'tags this -> URLSearchParams.t
        val get_username : 'tags this -> string
        val set_username : 'tags this -> string -> unit
        val toJSON : 'tags this -> string
        val cast_from : 'tags this -> t
        val prototype : unit -> t
        val create : url:t or_string -> ?base:t or_string -> unit -> t
        val createObjectURL : Blob.t -> string
        val revokeObjectURL : string -> unit
      end =
  struct
    type t = [ `URL ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4418 : Ojs.t) -> t_of_js x4418
    and t_0_to_js : t_0 -> Ojs.t = fun (x4417 : t) -> t_to_js x4417
    type tags = [ `URL ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URL ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4421 : Ojs.t) -> intf_of_js __tags_of_js x4421
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4419 : __tags intf) -> intf_to_js __tags_to_js x4419
    let (get_hash : 'tags this -> string) =
      fun (x4423 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4423) "hash")
    let (set_hash : 'tags this -> string -> unit) =
      fun (x4425 : 'tags this) ->
        fun (x4426 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4425) "hash"
            (Ojs.string_to_js x4426)
    let (get_host : 'tags this -> string) =
      fun (x4428 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4428) "host")
    let (set_host : 'tags this -> string -> unit) =
      fun (x4430 : 'tags this) ->
        fun (x4431 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4430) "host"
            (Ojs.string_to_js x4431)
    let (get_hostname : 'tags this -> string) =
      fun (x4433 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4433) "hostname")
    let (set_hostname : 'tags this -> string -> unit) =
      fun (x4435 : 'tags this) ->
        fun (x4436 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4435) "hostname"
            (Ojs.string_to_js x4436)
    let (get_href : 'tags this -> string) =
      fun (x4438 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4438) "href")
    let (set_href : 'tags this -> string -> unit) =
      fun (x4440 : 'tags this) ->
        fun (x4441 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4440) "href"
            (Ojs.string_to_js x4441)
    let (toString : 'tags this -> string) =
      fun (x4443 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4443) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x4445 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4445) "origin")
    let (get_password : 'tags this -> string) =
      fun (x4447 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4447) "password")
    let (set_password : 'tags this -> string -> unit) =
      fun (x4449 : 'tags this) ->
        fun (x4450 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4449) "password"
            (Ojs.string_to_js x4450)
    let (get_pathname : 'tags this -> string) =
      fun (x4452 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4452) "pathname")
    let (set_pathname : 'tags this -> string -> unit) =
      fun (x4454 : 'tags this) ->
        fun (x4455 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4454) "pathname"
            (Ojs.string_to_js x4455)
    let (get_port : 'tags this -> string) =
      fun (x4457 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4457) "port")
    let (set_port : 'tags this -> string -> unit) =
      fun (x4459 : 'tags this) ->
        fun (x4460 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4459) "port"
            (Ojs.string_to_js x4460)
    let (get_protocol : 'tags this -> string) =
      fun (x4462 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4462) "protocol")
    let (set_protocol : 'tags this -> string -> unit) =
      fun (x4464 : 'tags this) ->
        fun (x4465 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4464) "protocol"
            (Ojs.string_to_js x4465)
    let (get_search : 'tags this -> string) =
      fun (x4467 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4467) "search")
    let (set_search : 'tags this -> string -> unit) =
      fun (x4469 : 'tags this) ->
        fun (x4470 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4469) "search"
            (Ojs.string_to_js x4470)
    let (get_searchParams : 'tags this -> URLSearchParams.t) =
      fun (x4472 : 'tags this) ->
        URLSearchParams.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4472) "searchParams")
    let (get_username : 'tags this -> string) =
      fun (x4474 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4474) "username")
    let (set_username : 'tags this -> string -> unit) =
      fun (x4476 : 'tags this) ->
        fun (x4477 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4476) "username"
            (Ojs.string_to_js x4477)
    let (toJSON : 'tags this -> string) =
      fun (x4479 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4479) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "URL")
             "prototype")
    let (create : url:t or_string -> ?base:t or_string -> unit -> t) =
      fun ~url:(x4481 : t or_string) ->
        fun ?base:(x4482 : t or_string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URL")
                 (let x4483 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4483 "push"
                       [|(or_string_to_js t_to_js x4481)|]);
                  (match x4482 with
                   | Some x4484 ->
                       ignore
                         (Ojs.call x4483 "push"
                            [|(or_string_to_js t_to_js x4484)|])
                   | None -> ());
                  x4483))
    let (createObjectURL : Blob.t -> string) =
      fun (x4487 : Blob.t) ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "createObjectURL"
             [|(Blob.t_to_js x4487)|])
    let (revokeObjectURL : string -> unit) =
      fun (x4488 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "revokeObjectURL"
             [|(Ojs.string_to_js x4488)|])
  end
module rec
  AnonymousInterface91:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Response.t
                         val set_prototype : t -> Response.t -> unit
                         val create :
                           t ->
                             ?body:BodyInit.t or_null ->
                               ?init:ResponseInit.t -> unit -> Response.t
                         val error : t -> Response.t
                         val redirect :
                           t ->
                             url:URL.t or_string ->
                               ?status:float -> unit -> Response.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4490 : Ojs.t) -> x4490
    and t_to_js : t -> Ojs.t = fun (x4489 : Ojs.t) -> x4489
    let (get_prototype : t -> Response.t) =
      fun (x4491 : t) ->
        Response.t_of_js (Ojs.get_prop_ascii (t_to_js x4491) "prototype")
    let (set_prototype : t -> Response.t -> unit) =
      fun (x4492 : t) ->
        fun (x4493 : Response.t) ->
          Ojs.set_prop_ascii (t_to_js x4492) "prototype"
            (Response.t_to_js x4493)
    let (create :
      t ->
        ?body:BodyInit.t or_null ->
          ?init:ResponseInit.t -> unit -> Response.t)
      =
      fun (x4500 : t) ->
        fun ?body:(x4494 : BodyInit.t or_null option) ->
          fun ?init:(x4495 : ResponseInit.t option) ->
            fun () ->
              Response.t_of_js
                (Ojs.new_obj_arr (t_to_js x4500)
                   (let x4496 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x4494 with
                     | Some x4498 ->
                         ignore
                           (Ojs.call x4496 "push"
                              [|(or_null_to_js BodyInit.t_to_js x4498)|])
                     | None -> ());
                    (match x4495 with
                     | Some x4497 ->
                         ignore
                           (Ojs.call x4496 "push"
                              [|(ResponseInit.t_to_js x4497)|])
                     | None -> ());
                    x4496))
    let (error : t -> Response.t) =
      fun (x4501 : t) ->
        Response.t_of_js (Ojs.call (t_to_js x4501) "error" [||])
    let (redirect :
      t -> url:URL.t or_string -> ?status:float -> unit -> Response.t) =
      fun (x4507 : t) ->
        fun ~url:(x4502 : URL.t or_string) ->
          fun ?status:(x4503 : float option) ->
            fun () ->
              Response.t_of_js
                (let x4508 = t_to_js x4507 in
                 Ojs.call (Ojs.get_prop_ascii x4508 "redirect") "apply"
                   [|x4508;((let x4504 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4504 "push"
                                  [|(or_string_to_js URL.t_to_js x4502)|]);
                             (match x4503 with
                              | Some x4505 ->
                                  ignore
                                    (Ojs.call x4504 "push"
                                       [|(Ojs.float_to_js x4505)|])
                              | None -> ());
                             x4504))|])
  end
 and
  Response:sig
             type t = [ `Body  | `Response ] intf
             type t_0 = t
             [@@@js.stop ]
             type tags = [ `Body  | `Response ]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags = [ `Body  | `Response ]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `Response ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_headers : 'tags this -> Headers.t
             val get_ok : 'tags this -> bool
             val get_redirected : 'tags this -> bool
             val get_status : 'tags this -> float
             val get_statusText : 'tags this -> string
             val get_type : 'tags this -> ResponseType.t
             val get_url : 'tags this -> string
             val clone : 'tags this -> t
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create :
               ?body:BodyInit.t or_null -> ?init:ResponseInit.t -> unit -> t
             val error : unit -> t
             val redirect : url:URL.t or_string -> ?status:float -> unit -> t
           end =
  struct
    type t = [ `Body  | `Response ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4510 : Ojs.t) -> t_of_js x4510
    and t_0_to_js : t_0 -> Ojs.t = fun (x4509 : t) -> t_to_js x4509
    type tags = [ `Body  | `Response ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Response ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4513 : Ojs.t) -> intf_of_js __tags_of_js x4513
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4511 : __tags intf) -> intf_to_js __tags_to_js x4511
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4515 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4515) "headers")
    let (get_ok : 'tags this -> bool) =
      fun (x4517 : 'tags this) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4517) "ok")
    let (get_redirected : 'tags this -> bool) =
      fun (x4519 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4519) "redirected")
    let (get_status : 'tags this -> float) =
      fun (x4521 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4521) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4523 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4523) "statusText")
    let (get_type : 'tags this -> ResponseType.t) =
      fun (x4525 : 'tags this) ->
        ResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4525) "type")
    let (get_url : 'tags this -> string) =
      fun (x4527 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4527) "url")
    let (clone : 'tags this -> t) =
      fun (x4529 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4529) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Response")
             "prototype")
    let (create :
      ?body:BodyInit.t or_null -> ?init:ResponseInit.t -> unit -> t) =
      fun ?body:(x4531 : BodyInit.t or_null option) ->
        fun ?init:(x4532 : ResponseInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Response")
                 (let x4533 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x4531 with
                   | Some x4535 ->
                       ignore
                         (Ojs.call x4533 "push"
                            [|(or_null_to_js BodyInit.t_to_js x4535)|])
                   | None -> ());
                  (match x4532 with
                   | Some x4534 ->
                       ignore
                         (Ojs.call x4533 "push"
                            [|(ResponseInit.t_to_js x4534)|])
                   | None -> ());
                  x4533))
    let (error : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Response") "error" [||])
    let (redirect : url:URL.t or_string -> ?status:float -> unit -> t) =
      fun ~url:(x4537 : URL.t or_string) ->
        fun ?status:(x4538 : float option) ->
          fun () ->
            t_of_js
              (let x4542 = Ojs.get_prop_ascii Ojs.global "Response" in
               Ojs.call (Ojs.get_prop_ascii x4542 "redirect") "apply"
                 [|x4542;((let x4539 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4539 "push"
                                [|(or_string_to_js URL.t_to_js x4537)|]);
                           (match x4538 with
                            | Some x4540 ->
                                ignore
                                  (Ojs.call x4539 "push"
                                     [|(Ojs.float_to_js x4540)|])
                            | None -> ());
                           x4539))|])
  end
module rec
  AnonymousInterface5:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> Cache.t
                        val set_prototype : t -> Cache.t -> unit
                        val create : t -> Cache.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4544 : Ojs.t) -> x4544
    and t_to_js : t -> Ojs.t = fun (x4543 : Ojs.t) -> x4543
    let (get_prototype : t -> Cache.t) =
      fun (x4545 : t) ->
        Cache.t_of_js (Ojs.get_prop_ascii (t_to_js x4545) "prototype")
    let (set_prototype : t -> Cache.t -> unit) =
      fun (x4546 : t) ->
        fun (x4547 : Cache.t) ->
          Ojs.set_prop_ascii (t_to_js x4546) "prototype"
            (Cache.t_to_js x4547)
    let (create : t -> Cache.t) =
      fun (x4548 : t) -> Cache.t_of_js (Ojs.new_obj (t_to_js x4548) [||])
  end
 and
  Cache:sig
          type t = [ `Cache ] intf
          type t_0 = t
          [@@@js.stop ]
          type tags = [ `Cache ]
          type tags_0 = tags
          [@@@js.start ]
          [@@@js.implem type tags = [ `Cache ]
            type tags_0 = tags]
          type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
          val t_to_js : t -> Ojs.t
          val t_of_js : Ojs.t -> t
          val t_0_to_js : t_0 -> Ojs.t
          val t_0_of_js : Ojs.t -> t_0
          val add : 'tags this -> request:RequestInfo.t -> unit Promise.t_1
          val addAll :
            'tags this -> requests:RequestInfo.t list -> unit Promise.t_1
          val delete :
            'tags this ->
              request:RequestInfo.t ->
                ?options:CacheQueryOptions.t -> unit -> bool Promise.t_1
          val keys :
            'tags this ->
              ?request:RequestInfo.t ->
                ?options:CacheQueryOptions.t ->
                  unit -> Request.t list Promise.t_1
          val match_ :
            'tags this ->
              request:RequestInfo.t ->
                ?options:CacheQueryOptions.t ->
                  unit -> Response.t or_undefined Promise.t_1
          val matchAll :
            'tags this ->
              ?request:RequestInfo.t ->
                ?options:CacheQueryOptions.t ->
                  unit -> Response.t list Promise.t_1
          val put :
            'tags this ->
              request:RequestInfo.t ->
                response:Response.t -> unit Promise.t_1
          val addAll' :
            'tags this ->
              requests:RequestInfo.t Iterable.t_1 -> unit Promise.t_1
          val cast_from : 'tags this -> t
          val prototype : unit -> t
          val create : unit -> t
        end =
  struct
    type t = [ `Cache ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4550 : Ojs.t) -> t_of_js x4550
    and t_0_to_js : t_0 -> Ojs.t = fun (x4549 : t) -> t_to_js x4549
    type tags = [ `Cache ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4553 : Ojs.t) -> intf_of_js __tags_of_js x4553
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4551 : __tags intf) -> intf_to_js __tags_to_js x4551
    let (add : 'tags this -> request:RequestInfo.t -> unit Promise.t_1) =
      fun (x4556 : 'tags this) ->
        fun ~request:(x4555 : RequestInfo.t) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4556) "add"
               [|(RequestInfo.t_to_js x4555)|])
    let (addAll :
      'tags this -> requests:RequestInfo.t list -> unit Promise.t_1) =
      fun (x4561 : 'tags this) ->
        fun ~requests:(x4559 : RequestInfo.t list) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4561) "addAll"
               [|(Ojs.list_to_js RequestInfo.t_to_js x4559)|])
    let (delete :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> bool Promise.t_1)
      =
      fun (x4568 : 'tags this) ->
        fun ~request:(x4564 : RequestInfo.t) ->
          fun ?options:(x4565 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.bool_of_js
                (let x4570 = this_to_js Obj.magic x4568 in
                 Ojs.call (Ojs.get_prop_ascii x4570 "delete") "apply"
                   [|x4570;((let x4566 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4566 "push"
                                  [|(RequestInfo.t_to_js x4564)|]);
                             (match x4565 with
                              | Some x4567 ->
                                  ignore
                                    (Ojs.call x4566 "push"
                                       [|(CacheQueryOptions.t_to_js x4567)|])
                              | None -> ());
                             x4566))|])
    let (keys :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Request.t list Promise.t_1)
      =
      fun (x4577 : 'tags this) ->
        fun ?request:(x4572 : RequestInfo.t option) ->
          fun ?options:(x4573 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4580 : Ojs.t) -> Ojs.list_of_js Request.t_of_js x4580)
                (let x4579 = this_to_js Obj.magic x4577 in
                 Ojs.call (Ojs.get_prop_ascii x4579 "keys") "apply"
                   [|x4579;((let x4574 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4572 with
                              | Some x4576 ->
                                  ignore
                                    (Ojs.call x4574 "push"
                                       [|(RequestInfo.t_to_js x4576)|])
                              | None -> ());
                             (match x4573 with
                              | Some x4575 ->
                                  ignore
                                    (Ojs.call x4574 "push"
                                       [|(CacheQueryOptions.t_to_js x4575)|])
                              | None -> ());
                             x4574))|])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t ->
            unit -> Response.t or_undefined Promise.t_1)
      =
      fun (x4586 : 'tags this) ->
        fun ~request:(x4582 : RequestInfo.t) ->
          fun ?options:(x4583 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4589 : Ojs.t) ->
                   or_undefined_of_js Response.t_of_js x4589)
                (let x4588 = this_to_js Obj.magic x4586 in
                 Ojs.call (Ojs.get_prop_ascii x4588 "match") "apply"
                   [|x4588;((let x4584 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4584 "push"
                                  [|(RequestInfo.t_to_js x4582)|]);
                             (match x4583 with
                              | Some x4585 ->
                                  ignore
                                    (Ojs.call x4584 "push"
                                       [|(CacheQueryOptions.t_to_js x4585)|])
                              | None -> ());
                             x4584))|])
    let (matchAll :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Response.t list Promise.t_1)
      =
      fun (x4596 : 'tags this) ->
        fun ?request:(x4591 : RequestInfo.t option) ->
          fun ?options:(x4592 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4599 : Ojs.t) -> Ojs.list_of_js Response.t_of_js x4599)
                (let x4598 = this_to_js Obj.magic x4596 in
                 Ojs.call (Ojs.get_prop_ascii x4598 "matchAll") "apply"
                   [|x4598;((let x4593 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4591 with
                              | Some x4595 ->
                                  ignore
                                    (Ojs.call x4593 "push"
                                       [|(RequestInfo.t_to_js x4595)|])
                              | None -> ());
                             (match x4592 with
                              | Some x4594 ->
                                  ignore
                                    (Ojs.call x4593 "push"
                                       [|(CacheQueryOptions.t_to_js x4594)|])
                              | None -> ());
                             x4593))|])
    let (put :
      'tags this ->
        request:RequestInfo.t -> response:Response.t -> unit Promise.t_1)
      =
      fun (x4603 : 'tags this) ->
        fun ~request:(x4601 : RequestInfo.t) ->
          fun ~response:(x4602 : Response.t) ->
            Promise.t_1_of_js Ojs.unit_of_js
              (Ojs.call (this_to_js Obj.magic x4603) "put"
                 [|(RequestInfo.t_to_js x4601);(Response.t_to_js x4602)|])
    let (addAll' :
      'tags this -> requests:RequestInfo.t Iterable.t_1 -> unit Promise.t_1)
      =
      fun (x4608 : 'tags this) ->
        fun ~requests:(x4606 : RequestInfo.t Iterable.t_1) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4608) "addAll"
               [|(Iterable.t_1_to_js RequestInfo.t_to_js x4606)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Cache")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Cache") [||])
  end
module CachesStatic =
  struct
    let (delete : string -> bool Promise.t_1) =
      fun (x4611 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "delete"
             [|(Ojs.string_to_js x4611)|])
    let (has : string -> bool Promise.t_1) =
      fun (x4613 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "has"
             [|(Ojs.string_to_js x4613)|])
    let (keys : unit -> string list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x4615 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4615)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "keys" [||])
    let (match_ :
      request:RequestInfo.t ->
        ?options:MultiCacheQueryOptions.t ->
          unit -> Response.t or_undefined Promise.t_1)
      =
      fun ~request:(x4617 : RequestInfo.t) ->
        fun ?options:(x4618 : MultiCacheQueryOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x4622 : Ojs.t) ->
                 or_undefined_of_js Response.t_of_js x4622)
              (let x4621 = Ojs.get_prop_ascii Ojs.global "caches" in
               Ojs.call (Ojs.get_prop_ascii x4621 "match") "apply"
                 [|x4621;((let x4619 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4619 "push"
                                [|(RequestInfo.t_to_js x4617)|]);
                           (match x4618 with
                            | Some x4620 ->
                                ignore
                                  (Ojs.call x4619 "push"
                                     [|(MultiCacheQueryOptions.t_to_js x4620)|])
                            | None -> ());
                           x4619))|])
    let (open_ : string -> Cache.t Promise.t_1) =
      fun (x4624 : string) ->
        Promise.t_1_of_js Cache.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "open"
             [|(Ojs.string_to_js x4624)|])
  end
module XMLHttpRequestResponseType =
  struct
    type t =
      [ `L_s0  | `L_s37_arraybuffer  | `L_s44_blob  | `L_s62_document 
      | `L_s96_json  | `L_s190_text ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4627 : Ojs.t) ->
        let x4628 = x4627 in
        match Ojs.string_of_js x4628 with
        | "" -> `L_s0
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | "document" -> `L_s62_document
        | "json" -> `L_s96_json
        | "text" -> `L_s190_text
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4626 :
          [ `L_s0  | `L_s37_arraybuffer  | `L_s44_blob  | `L_s62_document 
          | `L_s96_json  | `L_s190_text ])
        ->
        match x4626 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
        | `L_s62_document -> Ojs.string_to_js "document"
        | `L_s96_json -> Ojs.string_to_js "json"
        | `L_s190_text -> Ojs.string_to_js "text"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4630 : Ojs.t) -> t_of_js x4630
    and t_0_to_js : t_0 -> Ojs.t = fun (x4629 : t) -> t_to_js x4629
  end
module ProgressEventInit =
  struct
    type t = [ `EventInit  | `ProgressEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4632 : Ojs.t) -> t_of_js x4632
    and t_0_to_js : t_0 -> Ojs.t = fun (x4631 : t) -> t_to_js x4631
    type tags = [ `EventInit  | `ProgressEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ProgressEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4635 : Ojs.t) -> intf_of_js __tags_of_js x4635
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4633 : __tags intf) -> intf_to_js __tags_to_js x4633
    let (get_lengthComputable : 'tags this -> bool) =
      fun (x4637 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4637) "lengthComputable")
    let (set_lengthComputable : 'tags this -> bool -> unit) =
      fun (x4639 : 'tags this) ->
        fun (x4640 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4639) "lengthComputable"
            (Ojs.bool_to_js x4640)
    let (get_loaded : 'tags this -> float) =
      fun (x4642 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4642) "loaded")
    let (set_loaded : 'tags this -> float -> unit) =
      fun (x4644 : 'tags this) ->
        fun (x4645 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4644) "loaded"
            (Ojs.float_to_js x4645)
    let (get_total : 'tags this -> float) =
      fun (x4647 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4647) "total")
    let (set_total : 'tags this -> float -> unit) =
      fun (x4649 : 'tags this) ->
        fun (x4650 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4649) "total"
            (Ojs.float_to_js x4650)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface80:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ProgressEvent.t_0
                         val set_prototype : t -> ProgressEvent.t_0 -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:ProgressEventInit.t ->
                                 unit -> ProgressEvent.t_0
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4653 : Ojs.t) -> x4653
    and t_to_js : t -> Ojs.t = fun (x4652 : Ojs.t) -> x4652
    let (get_prototype : t -> ProgressEvent.t_0) =
      fun (x4654 : t) ->
        ProgressEvent.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x4654) "prototype")
    let (set_prototype : t -> ProgressEvent.t_0 -> unit) =
      fun (x4655 : t) ->
        fun (x4656 : ProgressEvent.t_0) ->
          Ojs.set_prop_ascii (t_to_js x4655) "prototype"
            (ProgressEvent.t_0_to_js x4656)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:ProgressEventInit.t -> unit -> ProgressEvent.t_0)
      =
      fun (x4661 : t) ->
        fun ~type_:(x4657 : string) ->
          fun ?eventInitDict:(x4658 : ProgressEventInit.t option) ->
            fun () ->
              ProgressEvent.t_0_of_js
                (Ojs.new_obj_arr (t_to_js x4661)
                   (let x4659 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4659 "push" [|(Ojs.string_to_js x4657)|]);
                    (match x4658 with
                     | Some x4660 ->
                         ignore
                           (Ojs.call x4659 "push"
                              [|(ProgressEventInit.t_to_js x4660)|])
                     | None -> ());
                    x4659))
  end
 and
  ProgressEvent:sig
                  type 'T t = [ `Event  | `ProgressEvent of 'T ] intf
                  type 'T t_1 = 'T t
                  type t_0 = EventTarget.t t
                  [@@@js.stop ]
                  type 'T tags = [ `Event  | `ProgressEvent of 'T ]
                  type 'T tags_1 = 'T tags
                  type tags_0 = EventTarget.t tags
                  [@@@js.start ]
                  [@@@js.implem
                    type 'T tags = [ `Event  | `ProgressEvent of 'T ]
                    type 'T tags_1 = 'T tags
                    type tags_0 = EventTarget.t tags]
                  type ('tags, 'T) this =
                    'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
                  val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                  val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                  val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                  val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                  val t_0_to_js : t_0 -> Ojs.t
                  val t_0_of_js : Ojs.t -> t_0
                  val get_lengthComputable : ('tags, 'T) this -> bool
                  val get_loaded : ('tags, 'T) this -> float
                  val get_target : ('tags, 'T) this -> 'T or_null
                  val get_total : ('tags, 'T) this -> float
                  val cast_from : ('tags, 'T) this -> 'T t
                  val prototype : unit -> t_0
                  val create :
                    type_:string ->
                      ?eventInitDict:ProgressEventInit.t -> unit -> t_0
                end =
  struct
    type 'T t = [ `Event  | `ProgressEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4664 : Ojs.t) -> t_of_js __T_of_js x4664
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4662 : __T t) -> t_to_js __T_to_js x4662
    type t_0 = EventTarget.t t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4668 : Ojs.t) -> t_of_js EventTarget.t_of_js x4668
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4666 : EventTarget.t t) -> t_to_js EventTarget.t_to_js x4666
    type 'T tags = [ `Event  | `ProgressEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = EventTarget.t tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4672 : Ojs.t) -> intf_of_js __tags_of_js x4672
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4670 : __tags intf) -> intf_to_js __tags_to_js x4670
    let (get_lengthComputable : ('tags, 'T) this -> bool) =
      fun (x4674 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4674)
             "lengthComputable")
    let (get_loaded : ('tags, 'T) this -> float) =
      fun (x4677 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4677) "loaded")
    let (get_target : ('tags, 'T) this -> 'T or_null) =
      fun (x4680 : ('tags, 'T) this) ->
        or_null_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4680) "target")
    let (get_total : ('tags, 'T) this -> float) =
      fun (x4684 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4684) "total")
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:ProgressEventInit.t -> unit -> t_0) =
      fun ~type_:(x4687 : string) ->
        fun ?eventInitDict:(x4688 : ProgressEventInit.t option) ->
          fun () ->
            t_0_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
                 (let x4689 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4689 "push" [|(Ojs.string_to_js x4687)|]);
                  (match x4688 with
                   | Some x4690 ->
                       ignore
                         (Ojs.call x4689 "push"
                            [|(ProgressEventInit.t_to_js x4690)|])
                   | None -> ());
                  x4689))
  end
module rec
  AnonymousInterface137:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> XMLHttpRequest.t
                          val set_prototype : t -> XMLHttpRequest.t -> unit
                          val create : t -> XMLHttpRequest.t
                          val get_DONE : t -> float
                          val get_HEADERS_RECEIVED : t -> float
                          val get_LOADING : t -> float
                          val get_OPENED : t -> float
                          val get_UNSENT : t -> float
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4692 : Ojs.t) -> x4692
    and t_to_js : t -> Ojs.t = fun (x4691 : Ojs.t) -> x4691
    let (get_prototype : t -> XMLHttpRequest.t) =
      fun (x4693 : t) ->
        XMLHttpRequest.t_of_js
          (Ojs.get_prop_ascii (t_to_js x4693) "prototype")
    let (set_prototype : t -> XMLHttpRequest.t -> unit) =
      fun (x4694 : t) ->
        fun (x4695 : XMLHttpRequest.t) ->
          Ojs.set_prop_ascii (t_to_js x4694) "prototype"
            (XMLHttpRequest.t_to_js x4695)
    let (create : t -> XMLHttpRequest.t) =
      fun (x4696 : t) ->
        XMLHttpRequest.t_of_js (Ojs.new_obj (t_to_js x4696) [||])
    let (get_DONE : t -> float) =
      fun (x4697 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4697) "DONE")
    let (get_HEADERS_RECEIVED : t -> float) =
      fun (x4698 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x4698) "HEADERS_RECEIVED")
    let (get_LOADING : t -> float) =
      fun (x4699 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4699) "LOADING")
    let (get_OPENED : t -> float) =
      fun (x4700 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4700) "OPENED")
    let (get_UNSENT : t -> float) =
      fun (x4701 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4701) "UNSENT")
  end
 and
  AnonymousInterface138:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype :
                            t -> XMLHttpRequestEventTarget.t
                          val set_prototype :
                            t -> XMLHttpRequestEventTarget.t -> unit
                          val create : t -> XMLHttpRequestEventTarget.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4703 : Ojs.t) -> x4703
    and t_to_js : t -> Ojs.t = fun (x4702 : Ojs.t) -> x4702
    let (get_prototype : t -> XMLHttpRequestEventTarget.t) =
      fun (x4704 : t) ->
        XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (t_to_js x4704) "prototype")
    let (set_prototype : t -> XMLHttpRequestEventTarget.t -> unit) =
      fun (x4705 : t) ->
        fun (x4706 : XMLHttpRequestEventTarget.t) ->
          Ojs.set_prop_ascii (t_to_js x4705) "prototype"
            (XMLHttpRequestEventTarget.t_to_js x4706)
    let (create : t -> XMLHttpRequestEventTarget.t) =
      fun (x4707 : t) ->
        XMLHttpRequestEventTarget.t_of_js (Ojs.new_obj (t_to_js x4707) [||])
  end and
       AnonymousInterface139:sig
                               type t = private Ojs.t
                               val t_to_js : t -> Ojs.t
                               val t_of_js : Ojs.t -> t
                               val get_prototype :
                                 t -> XMLHttpRequestUpload.t
                               val set_prototype :
                                 t -> XMLHttpRequestUpload.t -> unit
                               val create : t -> XMLHttpRequestUpload.t
                             end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x4709 : Ojs.t) -> x4709
         and t_to_js : t -> Ojs.t = fun (x4708 : Ojs.t) -> x4708
         let (get_prototype : t -> XMLHttpRequestUpload.t) =
           fun (x4710 : t) ->
             XMLHttpRequestUpload.t_of_js
               (Ojs.get_prop_ascii (t_to_js x4710) "prototype")
         let (set_prototype : t -> XMLHttpRequestUpload.t -> unit) =
           fun (x4711 : t) ->
             fun (x4712 : XMLHttpRequestUpload.t) ->
               Ojs.set_prop_ascii (t_to_js x4711) "prototype"
                 (XMLHttpRequestUpload.t_to_js x4712)
         let (create : t -> XMLHttpRequestUpload.t) =
           fun (x4713 : t) ->
             XMLHttpRequestUpload.t_of_js (Ojs.new_obj (t_to_js x4713) [||])
       end and
            XMLHttpRequest:sig
                             type t =
                               [ `EventTarget  | `XMLHttpRequest 
                               | `XMLHttpRequestEventTarget ] intf
                             type t_0 = t
                             [@@@js.stop ]
                             type tags =
                               [ `EventTarget  | `XMLHttpRequest 
                               | `XMLHttpRequestEventTarget ]
                             type tags_0 = tags
                             [@@@js.start ]
                             [@@@js.implem
                               type tags =
                                 [ `EventTarget  | `XMLHttpRequest 
                                 | `XMLHttpRequestEventTarget ]
                               type tags_0 = tags]
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `XMLHttpRequest ]
                             val t_to_js : t -> Ojs.t
                             val t_of_js : Ojs.t -> t
                             val t_0_to_js : t_0 -> Ojs.t
                             val t_0_of_js : Ojs.t -> t_0
                             val get_onreadystatechange :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null
                             val set_onreadystatechange :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null ->
                                   unit
                             val get_readyState : 'tags this -> float
                             val get_response : 'tags this -> any
                             val get_responseText : 'tags this -> string
                             val get_responseType :
                               'tags this -> XMLHttpRequestResponseType.t
                             val set_responseType :
                               'tags this ->
                                 XMLHttpRequestResponseType.t -> unit
                             val get_responseURL : 'tags this -> string
                             val get_status : 'tags this -> float
                             val get_statusText : 'tags this -> string
                             val get_timeout : 'tags this -> float
                             val set_timeout : 'tags this -> float -> unit
                             val get_upload :
                               'tags this -> XMLHttpRequestUpload.t
                             val get_withCredentials : 'tags this -> bool
                             val set_withCredentials :
                               'tags this -> bool -> unit
                             val abort : 'tags this -> unit
                             val getAllResponseHeaders : 'tags this -> string
                             val getResponseHeader :
                               'tags this -> name:string -> string or_null
                             val open_ :
                               'tags this ->
                                 method_:string ->
                                   url:URL.t or_string -> unit
                             val open_' :
                               'tags this ->
                                 method_:string ->
                                   url:URL.t or_string ->
                                     async:bool ->
                                       ?username:string or_null ->
                                         ?password:string or_null ->
                                           unit -> unit
                             val overrideMimeType :
                               'tags this -> mime:string -> unit
                             val send :
                               'tags this ->
                                 ?body:XMLHttpRequestBodyInit.t or_null ->
                                   unit -> unit
                             val setRequestHeader :
                               'tags this ->
                                 name:string -> value:string -> unit
                             val get_DONE : 'tags this -> float
                             val get_HEADERS_RECEIVED : 'tags this -> float
                             val get_LOADING : 'tags this -> float
                             val get_OPENED : 'tags this -> float
                             val get_UNSENT : 'tags this -> float
                             val addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val cast_from : 'tags this -> t
                             val prototype : unit -> t
                             val create : unit -> t
                             val done_ : unit -> float
                             val headers_received : unit -> float
                             val loading : unit -> float
                             val opened : unit -> float
                             val unsent : unit -> float
                           end =
            struct
              type t =
                [ `EventTarget  | `XMLHttpRequest 
                | `XMLHttpRequestEventTarget ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x4715 : Ojs.t) -> t_of_js x4715
              and t_0_to_js : t_0 -> Ojs.t = fun (x4714 : t) -> t_to_js x4714
              type tags =
                [ `EventTarget  | `XMLHttpRequest 
                | `XMLHttpRequestEventTarget ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `XMLHttpRequest ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x4718 : Ojs.t) -> intf_of_js __tags_of_js x4718
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x4716 : __tags intf) -> intf_to_js __tags_to_js x4716
              let (get_onreadystatechange :
                'tags this -> (this:t -> ev:Event.t -> any) or_null) =
                fun (x4720 : 'tags this) ->
                  or_null_of_js
                    (fun (x4722 : Ojs.t) ->
                       fun ~this:(x4723 : t) ->
                         fun ~ev:(x4724 : Event.t) ->
                           any_of_js
                             (Ojs.apply x4722
                                [|(t_to_js x4723);(Event.t_to_js x4724)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4720)
                       "onreadystatechange")
              let (set_onreadystatechange :
                'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit)
                =
                fun (x4725 : 'tags this) ->
                  fun (x4726 : (this:t -> ev:Event.t -> any) or_null) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x4725)
                      "onreadystatechange"
                      (or_null_to_js
                         (fun (x4727 : this:t -> ev:Event.t -> any) ->
                            Ojs.fun_to_js 2
                              (fun (x4728 : Ojs.t) ->
                                 fun (x4729 : Ojs.t) ->
                                   any_to_js
                                     (x4727 ~this:(t_of_js x4728)
                                        ~ev:(Event.t_of_js x4729)))) x4726)
              let (get_readyState : 'tags this -> float) =
                fun (x4731 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4731)
                       "readyState")
              let (get_response : 'tags this -> any) =
                fun (x4733 : 'tags this) ->
                  any_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4733)
                       "response")
              let (get_responseText : 'tags this -> string) =
                fun (x4735 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4735)
                       "responseText")
              let (get_responseType :
                'tags this -> XMLHttpRequestResponseType.t) =
                fun (x4737 : 'tags this) ->
                  XMLHttpRequestResponseType.t_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4737)
                       "responseType")
              let (set_responseType :
                'tags this -> XMLHttpRequestResponseType.t -> unit) =
                fun (x4739 : 'tags this) ->
                  fun (x4740 : XMLHttpRequestResponseType.t) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x4739)
                      "responseType"
                      (XMLHttpRequestResponseType.t_to_js x4740)
              let (get_responseURL : 'tags this -> string) =
                fun (x4742 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4742)
                       "responseURL")
              let (get_status : 'tags this -> float) =
                fun (x4744 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4744) "status")
              let (get_statusText : 'tags this -> string) =
                fun (x4746 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4746)
                       "statusText")
              let (get_timeout : 'tags this -> float) =
                fun (x4748 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4748)
                       "timeout")
              let (set_timeout : 'tags this -> float -> unit) =
                fun (x4750 : 'tags this) ->
                  fun (x4751 : float) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x4750) "timeout"
                      (Ojs.float_to_js x4751)
              let (get_upload : 'tags this -> XMLHttpRequestUpload.t) =
                fun (x4753 : 'tags this) ->
                  XMLHttpRequestUpload.t_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4753) "upload")
              let (get_withCredentials : 'tags this -> bool) =
                fun (x4755 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4755)
                       "withCredentials")
              let (set_withCredentials : 'tags this -> bool -> unit) =
                fun (x4757 : 'tags this) ->
                  fun (x4758 : bool) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x4757)
                      "withCredentials" (Ojs.bool_to_js x4758)
              let (abort : 'tags this -> unit) =
                fun (x4760 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x4760) "abort" [||])
              let (getAllResponseHeaders : 'tags this -> string) =
                fun (x4762 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.call (this_to_js Obj.magic x4762)
                       "getAllResponseHeaders" [||])
              let (getResponseHeader :
                'tags this -> name:string -> string or_null) =
                fun (x4765 : 'tags this) ->
                  fun ~name:(x4764 : string) ->
                    or_null_of_js Ojs.string_of_js
                      (Ojs.call (this_to_js Obj.magic x4765)
                         "getResponseHeader" [|(Ojs.string_to_js x4764)|])
              let (open_ :
                'tags this -> method_:string -> url:URL.t or_string -> unit)
                =
                fun (x4771 : 'tags this) ->
                  fun ~method_:(x4768 : string) ->
                    fun ~url:(x4769 : URL.t or_string) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x4771) "open"
                           [|(Ojs.string_to_js x4768);(or_string_to_js
                                                         URL.t_to_js x4769)|])
              let (open_' :
                'tags this ->
                  method_:string ->
                    url:URL.t or_string ->
                      async:bool ->
                        ?username:string or_null ->
                          ?password:string or_null -> unit -> unit)
                =
                fun (x4784 : 'tags this) ->
                  fun ~method_:(x4773 : string) ->
                    fun ~url:(x4774 : URL.t or_string) ->
                      fun ~async:(x4775 : bool) ->
                        fun ?username:(x4776 : string or_null option) ->
                          fun ?password:(x4777 : string or_null option) ->
                            fun () ->
                              ignore
                                (let x4786 = this_to_js Obj.magic x4784 in
                                 Ojs.call (Ojs.get_prop_ascii x4786 "open")
                                   "apply"
                                   [|x4786;((let x4778 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x4778 "push"
                                                  [|(Ojs.string_to_js x4773)|]);
                                             ignore
                                               (Ojs.call x4778 "push"
                                                  [|(or_string_to_js
                                                       URL.t_to_js x4774)|]);
                                             ignore
                                               (Ojs.call x4778 "push"
                                                  [|(Ojs.bool_to_js x4775)|]);
                                             (match x4776 with
                                              | Some x4781 ->
                                                  ignore
                                                    (Ojs.call x4778 "push"
                                                       [|(or_null_to_js
                                                            Ojs.string_to_js
                                                            x4781)|])
                                              | None -> ());
                                             (match x4777 with
                                              | Some x4779 ->
                                                  ignore
                                                    (Ojs.call x4778 "push"
                                                       [|(or_null_to_js
                                                            Ojs.string_to_js
                                                            x4779)|])
                                              | None -> ());
                                             x4778))|])
              let (overrideMimeType : 'tags this -> mime:string -> unit) =
                fun (x4788 : 'tags this) ->
                  fun ~mime:(x4787 : string) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x4788)
                         "overrideMimeType" [|(Ojs.string_to_js x4787)|])
              let (send :
                'tags this ->
                  ?body:XMLHttpRequestBodyInit.t or_null -> unit -> unit)
                =
                fun (x4794 : 'tags this) ->
                  fun ?body:(x4790 : XMLHttpRequestBodyInit.t or_null option)
                    ->
                    fun () ->
                      ignore
                        (let x4796 = this_to_js Obj.magic x4794 in
                         Ojs.call (Ojs.get_prop_ascii x4796 "send") "apply"
                           [|x4796;((let x4791 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x4790 with
                                      | Some x4792 ->
                                          ignore
                                            (Ojs.call x4791 "push"
                                               [|(or_null_to_js
                                                    XMLHttpRequestBodyInit.t_to_js
                                                    x4792)|])
                                      | None -> ());
                                     x4791))|])
              let (setRequestHeader :
                'tags this -> name:string -> value:string -> unit) =
                fun (x4799 : 'tags this) ->
                  fun ~name:(x4797 : string) ->
                    fun ~value:(x4798 : string) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x4799)
                           "setRequestHeader"
                           [|(Ojs.string_to_js x4797);(Ojs.string_to_js x4798)|])
              let (get_DONE : 'tags this -> float) =
                fun (x4801 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4801) "DONE")
              let (get_HEADERS_RECEIVED : 'tags this -> float) =
                fun (x4803 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4803)
                       "HEADERS_RECEIVED")
              let (get_LOADING : 'tags this -> float) =
                fun (x4805 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4805)
                       "LOADING")
              let (get_OPENED : 'tags this -> float) =
                fun (x4807 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4807) "OPENED")
              let (get_UNSENT : 'tags this -> float) =
                fun (x4809 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4809) "UNSENT")
              let (addEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4819 : 'tags this) ->
                  fun ~type_:(x4811 : 'K) ->
                    fun ~listener:(x4812 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x4813 :
                                   AddEventListenerOptions.t or_boolean
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x4821 = this_to_js Obj.magic x4819 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4821 "addEventListener")
                               "apply"
                               [|x4821;((let x4814 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4814 "push"
                                              [|(Obj.magic x4811)|]);
                                         ignore
                                           (Ojs.call x4814 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x4817 : Ojs.t) ->
                                                      fun (x4818 : Ojs.t) ->
                                                        any_to_js
                                                          (x4812
                                                             ~this:(t_of_js
                                                                    x4817)
                                                             ~ev:(any_of_js
                                                                    x4818))))|]);
                                         (match x4813 with
                                          | Some x4815 ->
                                              ignore
                                                (Ojs.call x4814 "push"
                                                   [|(or_boolean_to_js
                                                        AddEventListenerOptions.t_to_js
                                                        x4815)|])
                                          | None -> ());
                                         x4814))|])
              let (addEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4828 : 'tags this) ->
                  fun ~type_:(x4822 : string) ->
                    fun
                      ~listener:(x4823 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x4824 :
                                   AddEventListenerOptions.t or_boolean
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x4830 = this_to_js Obj.magic x4828 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4830 "addEventListener")
                               "apply"
                               [|x4830;((let x4825 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4825 "push"
                                              [|(Ojs.string_to_js x4822)|]);
                                         ignore
                                           (Ojs.call x4825 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x4823)|]);
                                         (match x4824 with
                                          | Some x4826 ->
                                              ignore
                                                (Ojs.call x4825 "push"
                                                   [|(or_boolean_to_js
                                                        AddEventListenerOptions.t_to_js
                                                        x4826)|])
                                          | None -> ());
                                         x4825))|])
              let (removeEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4839 : 'tags this) ->
                  fun ~type_:(x4831 : 'K) ->
                    fun ~listener:(x4832 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x4833 :
                                   EventListenerOptions.t or_boolean option)
                        ->
                        fun () ->
                          ignore
                            (let x4841 = this_to_js Obj.magic x4839 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4841
                                  "removeEventListener") "apply"
                               [|x4841;((let x4834 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4834 "push"
                                              [|(Obj.magic x4831)|]);
                                         ignore
                                           (Ojs.call x4834 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x4837 : Ojs.t) ->
                                                      fun (x4838 : Ojs.t) ->
                                                        any_to_js
                                                          (x4832
                                                             ~this:(t_of_js
                                                                    x4837)
                                                             ~ev:(any_of_js
                                                                    x4838))))|]);
                                         (match x4833 with
                                          | Some x4835 ->
                                              ignore
                                                (Ojs.call x4834 "push"
                                                   [|(or_boolean_to_js
                                                        EventListenerOptions.t_to_js
                                                        x4835)|])
                                          | None -> ());
                                         x4834))|])
              let (removeEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4848 : 'tags this) ->
                  fun ~type_:(x4842 : string) ->
                    fun
                      ~listener:(x4843 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x4844 :
                                   EventListenerOptions.t or_boolean option)
                        ->
                        fun () ->
                          ignore
                            (let x4850 = this_to_js Obj.magic x4848 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4850
                                  "removeEventListener") "apply"
                               [|x4850;((let x4845 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4845 "push"
                                              [|(Ojs.string_to_js x4842)|]);
                                         ignore
                                           (Ojs.call x4845 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x4843)|]);
                                         (match x4844 with
                                          | Some x4846 ->
                                              ignore
                                                (Ojs.call x4845 "push"
                                                   [|(or_boolean_to_js
                                                        EventListenerOptions.t_to_js
                                                        x4846)|])
                                          | None -> ());
                                         x4845))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") 
                       [||])
              let (done_ : unit -> float) =
                fun () ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "DONE")
              let (headers_received : unit -> float) =
                fun () ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "HEADERS_RECEIVED")
              let (loading : unit -> float) =
                fun () ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "LOADING")
              let (opened : unit -> float) =
                fun () ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "OPENED")
              let (unsent : unit -> float) =
                fun () ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "UNSENT")
            end and
                 XMLHttpRequestEventTarget:sig
                                             type t =
                                               [ `EventTarget 
                                               | `XMLHttpRequestEventTarget ]
                                                 intf
                                             type t_0 = t
                                             [@@@js.stop ]
                                             type tags =
                                               [ `EventTarget 
                                               | `XMLHttpRequestEventTarget ]
                                             type tags_0 = tags
                                             [@@@js.start ]
                                             [@@@js.implem
                                               type tags =
                                                 [ `EventTarget 
                                                 | `XMLHttpRequestEventTarget ]
                                               type tags_0 = tags]
                                             type 'tags this =
                                               'tags intf constraint 
                                                           'tags =
                                                           [>
                                                             `XMLHttpRequestEventTarget
                                                               ]
                                             val t_to_js : t -> Ojs.t
                                             val t_of_js : Ojs.t -> t
                                             val t_0_to_js : t_0 -> Ojs.t
                                             val t_0_of_js : Ojs.t -> t_0
                                             val get_onabort :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onabort :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_onerror :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onerror :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_onload :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onload :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_onloadend :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onloadend :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_onloadstart :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onloadstart :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_onprogress :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onprogress :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_ontimeout :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_ontimeout :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val addEventListener :
                                               'tags this ->
                                                 type_:'K ->
                                                   listener:(this:t ->
                                                               ev:any -> any)
                                                     ->
                                                     ?options:AddEventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val addEventListener' :
                                               'tags this ->
                                                 type_:string ->
                                                   listener:EventListenerOrEventListenerObject.t
                                                     ->
                                                     ?options:AddEventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val removeEventListener :
                                               'tags this ->
                                                 type_:'K ->
                                                   listener:(this:t ->
                                                               ev:any -> any)
                                                     ->
                                                     ?options:EventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val removeEventListener' :
                                               'tags this ->
                                                 type_:string ->
                                                   listener:EventListenerOrEventListenerObject.t
                                                     ->
                                                     ?options:EventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val cast_from : 'tags this -> t
                                             val prototype : unit -> t
                                             val create : unit -> t
                                           end =
                 struct
                   type t =
                     [ `EventTarget  | `XMLHttpRequestEventTarget ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x4852 : Ojs.t) -> t_of_js x4852
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x4851 : t) -> t_to_js x4851
                   type tags = [ `EventTarget  | `XMLHttpRequestEventTarget ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags =
                                 [> `XMLHttpRequestEventTarget ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x4855 : Ojs.t) -> intf_of_js __tags_of_js x4855
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x4853 : __tags intf) ->
                         intf_to_js __tags_to_js x4853
                   let (get_onabort :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4857 : 'tags this) ->
                       or_null_of_js
                         (fun (x4859 : Ojs.t) ->
                            fun ~this:(x4860 : XMLHttpRequest.t) ->
                              fun ~ev:(x4861 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4859
                                     [|(XMLHttpRequest.t_to_js x4860);(
                                       ProgressEvent.t_0_to_js x4861)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4857)
                            "onabort")
                   let (set_onabort :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4862 : 'tags this) ->
                       fun
                         (x4863 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4862)
                           "onabort"
                           (or_null_to_js
                              (fun
                                 (x4864 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4865 : Ojs.t) ->
                                      fun (x4866 : Ojs.t) ->
                                        any_to_js
                                          (x4864
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4865)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4866)))) x4863)
                   let (get_onerror :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4868 : 'tags this) ->
                       or_null_of_js
                         (fun (x4870 : Ojs.t) ->
                            fun ~this:(x4871 : XMLHttpRequest.t) ->
                              fun ~ev:(x4872 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4870
                                     [|(XMLHttpRequest.t_to_js x4871);(
                                       ProgressEvent.t_0_to_js x4872)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4868)
                            "onerror")
                   let (set_onerror :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4873 : 'tags this) ->
                       fun
                         (x4874 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4873)
                           "onerror"
                           (or_null_to_js
                              (fun
                                 (x4875 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4876 : Ojs.t) ->
                                      fun (x4877 : Ojs.t) ->
                                        any_to_js
                                          (x4875
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4876)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4877)))) x4874)
                   let (get_onload :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4879 : 'tags this) ->
                       or_null_of_js
                         (fun (x4881 : Ojs.t) ->
                            fun ~this:(x4882 : XMLHttpRequest.t) ->
                              fun ~ev:(x4883 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4881
                                     [|(XMLHttpRequest.t_to_js x4882);(
                                       ProgressEvent.t_0_to_js x4883)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4879)
                            "onload")
                   let (set_onload :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4884 : 'tags this) ->
                       fun
                         (x4885 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4884)
                           "onload"
                           (or_null_to_js
                              (fun
                                 (x4886 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4887 : Ojs.t) ->
                                      fun (x4888 : Ojs.t) ->
                                        any_to_js
                                          (x4886
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4887)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4888)))) x4885)
                   let (get_onloadend :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4890 : 'tags this) ->
                       or_null_of_js
                         (fun (x4892 : Ojs.t) ->
                            fun ~this:(x4893 : XMLHttpRequest.t) ->
                              fun ~ev:(x4894 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4892
                                     [|(XMLHttpRequest.t_to_js x4893);(
                                       ProgressEvent.t_0_to_js x4894)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4890)
                            "onloadend")
                   let (set_onloadend :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4895 : 'tags this) ->
                       fun
                         (x4896 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4895)
                           "onloadend"
                           (or_null_to_js
                              (fun
                                 (x4897 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4898 : Ojs.t) ->
                                      fun (x4899 : Ojs.t) ->
                                        any_to_js
                                          (x4897
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4898)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4899)))) x4896)
                   let (get_onloadstart :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4901 : 'tags this) ->
                       or_null_of_js
                         (fun (x4903 : Ojs.t) ->
                            fun ~this:(x4904 : XMLHttpRequest.t) ->
                              fun ~ev:(x4905 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4903
                                     [|(XMLHttpRequest.t_to_js x4904);(
                                       ProgressEvent.t_0_to_js x4905)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4901)
                            "onloadstart")
                   let (set_onloadstart :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4906 : 'tags this) ->
                       fun
                         (x4907 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4906)
                           "onloadstart"
                           (or_null_to_js
                              (fun
                                 (x4908 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4909 : Ojs.t) ->
                                      fun (x4910 : Ojs.t) ->
                                        any_to_js
                                          (x4908
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4909)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4910)))) x4907)
                   let (get_onprogress :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4912 : 'tags this) ->
                       or_null_of_js
                         (fun (x4914 : Ojs.t) ->
                            fun ~this:(x4915 : XMLHttpRequest.t) ->
                              fun ~ev:(x4916 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4914
                                     [|(XMLHttpRequest.t_to_js x4915);(
                                       ProgressEvent.t_0_to_js x4916)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4912)
                            "onprogress")
                   let (set_onprogress :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4917 : 'tags this) ->
                       fun
                         (x4918 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4917)
                           "onprogress"
                           (or_null_to_js
                              (fun
                                 (x4919 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4920 : Ojs.t) ->
                                      fun (x4921 : Ojs.t) ->
                                        any_to_js
                                          (x4919
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4920)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4921)))) x4918)
                   let (get_ontimeout :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4923 : 'tags this) ->
                       or_null_of_js
                         (fun (x4925 : Ojs.t) ->
                            fun ~this:(x4926 : XMLHttpRequest.t) ->
                              fun ~ev:(x4927 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4925
                                     [|(XMLHttpRequest.t_to_js x4926);(
                                       ProgressEvent.t_0_to_js x4927)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4923)
                            "ontimeout")
                   let (set_ontimeout :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4928 : 'tags this) ->
                       fun
                         (x4929 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4928)
                           "ontimeout"
                           (or_null_to_js
                              (fun
                                 (x4930 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4931 : Ojs.t) ->
                                      fun (x4932 : Ojs.t) ->
                                        any_to_js
                                          (x4930
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4931)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4932)))) x4929)
                   let (addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x4942 : 'tags this) ->
                       fun ~type_:(x4934 : 'K) ->
                         fun ~listener:(x4935 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x4936 :
                                        AddEventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x4944 = this_to_js Obj.magic x4942 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x4944
                                       "addEventListener") "apply"
                                    [|x4944;((let x4937 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x4937 "push"
                                                   [|(Obj.magic x4934)|]);
                                              ignore
                                                (Ojs.call x4937 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x4940 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x4941 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x4935
                                                                  ~this:(
                                                                  t_of_js
                                                                    x4940)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x4941))))|]);
                                              (match x4936 with
                                               | Some x4938 ->
                                                   ignore
                                                     (Ojs.call x4937 "push"
                                                        [|(or_boolean_to_js
                                                             AddEventListenerOptions.t_to_js
                                                             x4938)|])
                                               | None -> ());
                                              x4937))|])
                   let (addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x4951 : 'tags this) ->
                       fun ~type_:(x4945 : string) ->
                         fun
                           ~listener:(x4946 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x4947 :
                                        AddEventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x4953 = this_to_js Obj.magic x4951 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x4953
                                       "addEventListener") "apply"
                                    [|x4953;((let x4948 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x4948 "push"
                                                   [|(Ojs.string_to_js x4945)|]);
                                              ignore
                                                (Ojs.call x4948 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x4946)|]);
                                              (match x4947 with
                                               | Some x4949 ->
                                                   ignore
                                                     (Ojs.call x4948 "push"
                                                        [|(or_boolean_to_js
                                                             AddEventListenerOptions.t_to_js
                                                             x4949)|])
                                               | None -> ());
                                              x4948))|])
                   let (removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x4962 : 'tags this) ->
                       fun ~type_:(x4954 : 'K) ->
                         fun ~listener:(x4955 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x4956 :
                                        EventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x4964 = this_to_js Obj.magic x4962 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x4964
                                       "removeEventListener") "apply"
                                    [|x4964;((let x4957 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x4957 "push"
                                                   [|(Obj.magic x4954)|]);
                                              ignore
                                                (Ojs.call x4957 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x4960 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x4961 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x4955
                                                                  ~this:(
                                                                  t_of_js
                                                                    x4960)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x4961))))|]);
                                              (match x4956 with
                                               | Some x4958 ->
                                                   ignore
                                                     (Ojs.call x4957 "push"
                                                        [|(or_boolean_to_js
                                                             EventListenerOptions.t_to_js
                                                             x4958)|])
                                               | None -> ());
                                              x4957))|])
                   let (removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x4971 : 'tags this) ->
                       fun ~type_:(x4965 : string) ->
                         fun
                           ~listener:(x4966 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x4967 :
                                        EventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x4973 = this_to_js Obj.magic x4971 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x4973
                                       "removeEventListener") "apply"
                                    [|x4973;((let x4968 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x4968 "push"
                                                   [|(Ojs.string_to_js x4965)|]);
                                              ignore
                                                (Ojs.call x4968 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x4966)|]);
                                              (match x4967 with
                                               | Some x4969 ->
                                                   ignore
                                                     (Ojs.call x4968 "push"
                                                        [|(or_boolean_to_js
                                                             EventListenerOptions.t_to_js
                                                             x4969)|])
                                               | None -> ());
                                              x4968))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "XMLHttpRequestEventTarget") "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global
                               "XMLHttpRequestEventTarget") [||])
                 end and
                      XMLHttpRequestUpload:sig
                                             type t =
                                               [ `EventTarget 
                                               | `XMLHttpRequestEventTarget 
                                               | `XMLHttpRequestUpload ] intf
                                             type t_0 = t
                                             [@@@js.stop ]
                                             type tags =
                                               [ `EventTarget 
                                               | `XMLHttpRequestEventTarget 
                                               | `XMLHttpRequestUpload ]
                                             type tags_0 = tags
                                             [@@@js.start ]
                                             [@@@js.implem
                                               type tags =
                                                 [ `EventTarget 
                                                 | `XMLHttpRequestEventTarget 
                                                 | `XMLHttpRequestUpload ]
                                               type tags_0 = tags]
                                             type 'tags this =
                                               'tags intf constraint 
                                                           'tags =
                                                           [>
                                                             `XMLHttpRequestUpload
                                                               ]
                                             val t_to_js : t -> Ojs.t
                                             val t_of_js : Ojs.t -> t
                                             val t_0_to_js : t_0 -> Ojs.t
                                             val t_0_of_js : Ojs.t -> t_0
                                             val addEventListener :
                                               'tags this ->
                                                 type_:'K ->
                                                   listener:(this:t ->
                                                               ev:any -> any)
                                                     ->
                                                     ?options:AddEventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val addEventListener' :
                                               'tags this ->
                                                 type_:string ->
                                                   listener:EventListenerOrEventListenerObject.t
                                                     ->
                                                     ?options:AddEventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val removeEventListener :
                                               'tags this ->
                                                 type_:'K ->
                                                   listener:(this:t ->
                                                               ev:any -> any)
                                                     ->
                                                     ?options:EventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val removeEventListener' :
                                               'tags this ->
                                                 type_:string ->
                                                   listener:EventListenerOrEventListenerObject.t
                                                     ->
                                                     ?options:EventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val cast_from : 'tags this -> t
                                             val prototype : unit -> t
                                             val create : unit -> t
                                           end =
                      struct
                        type t =
                          [ `EventTarget  | `XMLHttpRequestEventTarget 
                          | `XMLHttpRequestUpload ] intf
                        let rec t_of_js : Ojs.t -> t = Obj.magic
                        and t_to_js : t -> Ojs.t = Obj.magic
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x4975 : Ojs.t) -> t_of_js x4975
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x4974 : t) -> t_to_js x4974
                        type tags =
                          [ `EventTarget  | `XMLHttpRequestEventTarget 
                          | `XMLHttpRequestUpload ]
                        type tags_0 = tags
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `XMLHttpRequestUpload ]
                        let rec this_of_js :
                          'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                          fun (type __tags) ->
                          fun (__tags_of_js : Ojs.t -> __tags) ->
                            fun (x4978 : Ojs.t) ->
                              intf_of_js __tags_of_js x4978
                        and this_to_js :
                          'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                          fun (type __tags) ->
                          fun (__tags_to_js : __tags -> Ojs.t) ->
                            fun (x4976 : __tags intf) ->
                              intf_to_js __tags_to_js x4976
                        let (addEventListener :
                          'tags this ->
                            type_:'K ->
                              listener:(this:t -> ev:any -> any) ->
                                ?options:AddEventListenerOptions.t or_boolean
                                  -> unit -> unit)
                          =
                          fun (x4988 : 'tags this) ->
                            fun ~type_:(x4980 : 'K) ->
                              fun ~listener:(x4981 : this:t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x4982 :
                                             AddEventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x4990 = this_to_js Obj.magic x4988 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x4990
                                            "addEventListener") "apply"
                                         [|x4990;((let x4983 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x4983 "push"
                                                        [|(Obj.magic x4980)|]);
                                                   ignore
                                                     (Ojs.call x4983 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x4986 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x4987 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x4981
                                                                    ~this:(
                                                                    t_of_js
                                                                    x4986)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x4987))))|]);
                                                   (match x4982 with
                                                    | Some x4984 ->
                                                        ignore
                                                          (Ojs.call x4983
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  AddEventListenerOptions.t_to_js
                                                                  x4984)|])
                                                    | None -> ());
                                                   x4983))|])
                        let (addEventListener' :
                          'tags this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:AddEventListenerOptions.t or_boolean
                                  -> unit -> unit)
                          =
                          fun (x4997 : 'tags this) ->
                            fun ~type_:(x4991 : string) ->
                              fun
                                ~listener:(x4992 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x4993 :
                                             AddEventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x4999 = this_to_js Obj.magic x4997 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x4999
                                            "addEventListener") "apply"
                                         [|x4999;((let x4994 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x4994 "push"
                                                        [|(Ojs.string_to_js
                                                             x4991)|]);
                                                   ignore
                                                     (Ojs.call x4994 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x4992)|]);
                                                   (match x4993 with
                                                    | Some x4995 ->
                                                        ignore
                                                          (Ojs.call x4994
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  AddEventListenerOptions.t_to_js
                                                                  x4995)|])
                                                    | None -> ());
                                                   x4994))|])
                        let (removeEventListener :
                          'tags this ->
                            type_:'K ->
                              listener:(this:t -> ev:any -> any) ->
                                ?options:EventListenerOptions.t or_boolean ->
                                  unit -> unit)
                          =
                          fun (x5008 : 'tags this) ->
                            fun ~type_:(x5000 : 'K) ->
                              fun ~listener:(x5001 : this:t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x5002 :
                                             EventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x5010 = this_to_js Obj.magic x5008 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x5010
                                            "removeEventListener") "apply"
                                         [|x5010;((let x5003 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x5003 "push"
                                                        [|(Obj.magic x5000)|]);
                                                   ignore
                                                     (Ojs.call x5003 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x5006 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x5007 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x5001
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5006)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5007))))|]);
                                                   (match x5002 with
                                                    | Some x5004 ->
                                                        ignore
                                                          (Ojs.call x5003
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  EventListenerOptions.t_to_js
                                                                  x5004)|])
                                                    | None -> ());
                                                   x5003))|])
                        let (removeEventListener' :
                          'tags this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:EventListenerOptions.t or_boolean ->
                                  unit -> unit)
                          =
                          fun (x5017 : 'tags this) ->
                            fun ~type_:(x5011 : string) ->
                              fun
                                ~listener:(x5012 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x5013 :
                                             EventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x5019 = this_to_js Obj.magic x5017 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x5019
                                            "removeEventListener") "apply"
                                         [|x5019;((let x5014 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x5014 "push"
                                                        [|(Ojs.string_to_js
                                                             x5011)|]);
                                                   ignore
                                                     (Ojs.call x5014 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x5012)|]);
                                                   (match x5013 with
                                                    | Some x5015 ->
                                                        ignore
                                                          (Ojs.call x5014
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  EventListenerOptions.t_to_js
                                                                  x5015)|])
                                                    | None -> ());
                                                   x5014))|])
                        let cast_from = Obj.magic
                        let (prototype : unit -> t) =
                          fun () ->
                            t_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "XMLHttpRequestUpload") "prototype")
                        let (create : unit -> t) =
                          fun () ->
                            t_of_js
                              (Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global
                                    "XMLHttpRequestUpload") [||])
                      end
module XMLHttpRequestEventTargetEventMap =
  struct
    type t = [ `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5021 : Ojs.t) -> t_of_js x5021
    and t_0_to_js : t_0 -> Ojs.t = fun (x5020 : t) -> t_to_js x5020
    type tags = [ `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTargetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5024 : Ojs.t) -> intf_of_js __tags_of_js x5024
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5022 : __tags intf) -> intf_to_js __tags_to_js x5022
    let (get_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5026 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5026) "abort")
    let (set_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5029 : 'tags this) ->
        fun (x5030 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5029) "abort"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5030)
    let (get_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5033 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5033) "error")
    let (set_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5036 : 'tags this) ->
        fun (x5037 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5036) "error"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5037)
    let (get_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5040 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5040) "load")
    let (set_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5043 : 'tags this) ->
        fun (x5044 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5043) "load"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5044)
    let (get_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5047 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5047) "loadend")
    let (set_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5050 : 'tags this) ->
        fun (x5051 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5050) "loadend"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5051)
    let (get_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5054 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5054) "loadstart")
    let (set_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5057 : 'tags this) ->
        fun (x5058 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5057) "loadstart"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5058)
    let (get_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5061 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5061) "progress")
    let (set_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5064 : 'tags this) ->
        fun (x5065 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5064) "progress"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5065)
    let (get_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5068 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5068) "timeout")
    let (set_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5071 : 'tags this) ->
        fun (x5072 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5071) "timeout"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5072)
    let cast_from = Obj.magic
  end
module XMLHttpRequestEventMap =
  struct
    type t =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5076 : Ojs.t) -> t_of_js x5076
    and t_0_to_js : t_0 -> Ojs.t = fun (x5075 : t) -> t_to_js x5075
    type tags =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5079 : Ojs.t) -> intf_of_js __tags_of_js x5079
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5077 : __tags intf) -> intf_to_js __tags_to_js x5077
    let (get_readystatechange : 'tags this -> Event.t) =
      fun (x5081 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5081) "readystatechange")
    let (set_readystatechange : 'tags this -> Event.t -> unit) =
      fun (x5083 : 'tags this) ->
        fun (x5084 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5083) "readystatechange"
            (Event.t_to_js x5084)
    let cast_from = Obj.magic
  end
module ServiceWorkerState =
  struct
    type t =
      [ `L_s33_activated  | `L_s34_activating  | `L_s94_installed 
      | `L_s95_installing  | `L_s146_parsed  | `L_s166_redundant ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5087 : Ojs.t) ->
        let x5088 = x5087 in
        match Ojs.string_of_js x5088 with
        | "activated" -> `L_s33_activated
        | "activating" -> `L_s34_activating
        | "installed" -> `L_s94_installed
        | "installing" -> `L_s95_installing
        | "parsed" -> `L_s146_parsed
        | "redundant" -> `L_s166_redundant
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x5086 :
          [ `L_s33_activated  | `L_s34_activating  | `L_s94_installed 
          | `L_s95_installing  | `L_s146_parsed  | `L_s166_redundant ])
        ->
        match x5086 with
        | `L_s33_activated -> Ojs.string_to_js "activated"
        | `L_s34_activating -> Ojs.string_to_js "activating"
        | `L_s94_installed -> Ojs.string_to_js "installed"
        | `L_s95_installing -> Ojs.string_to_js "installing"
        | `L_s146_parsed -> Ojs.string_to_js "parsed"
        | `L_s166_redundant -> Ojs.string_to_js "redundant"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5090 : Ojs.t) -> t_of_js x5090
    and t_0_to_js : t_0 -> Ojs.t = fun (x5089 : t) -> t_to_js x5089
  end
module rec
  AnonymousInterface55:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ImageBitmap.t
                         val set_prototype : t -> ImageBitmap.t -> unit
                         val create : t -> ImageBitmap.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5092 : Ojs.t) -> x5092
    and t_to_js : t -> Ojs.t = fun (x5091 : Ojs.t) -> x5091
    let (get_prototype : t -> ImageBitmap.t) =
      fun (x5093 : t) ->
        ImageBitmap.t_of_js (Ojs.get_prop_ascii (t_to_js x5093) "prototype")
    let (set_prototype : t -> ImageBitmap.t -> unit) =
      fun (x5094 : t) ->
        fun (x5095 : ImageBitmap.t) ->
          Ojs.set_prop_ascii (t_to_js x5094) "prototype"
            (ImageBitmap.t_to_js x5095)
    let (create : t -> ImageBitmap.t) =
      fun (x5096 : t) ->
        ImageBitmap.t_of_js (Ojs.new_obj (t_to_js x5096) [||])
  end
 and
  ImageBitmap:sig
                type t = [ `ImageBitmap ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `ImageBitmap ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `ImageBitmap ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `ImageBitmap ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_height : 'tags this -> float
                val get_width : 'tags this -> float
                val close : 'tags this -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `ImageBitmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5098 : Ojs.t) -> t_of_js x5098
    and t_0_to_js : t_0 -> Ojs.t = fun (x5097 : t) -> t_to_js x5097
    type tags = [ `ImageBitmap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5101 : Ojs.t) -> intf_of_js __tags_of_js x5101
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5099 : __tags intf) -> intf_to_js __tags_to_js x5099
    let (get_height : 'tags this -> float) =
      fun (x5103 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5103) "height")
    let (get_width : 'tags this -> float) =
      fun (x5105 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5105) "width")
    let (close : 'tags this -> unit) =
      fun (x5107 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5107) "close" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageBitmap")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ImageBitmap") [||])
  end
module StructuredSerializeOptions =
  struct
    type t = [ `StructuredSerializeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5110 : Ojs.t) -> t_of_js x5110
    and t_0_to_js : t_0 -> Ojs.t = fun (x5109 : t) -> t_to_js x5109
    type tags = [ `StructuredSerializeOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `StructuredSerializeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5113 : Ojs.t) -> intf_of_js __tags_of_js x5113
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5111 : __tags intf) -> intf_to_js __tags_to_js x5111
    let (get_transfer : 'tags this -> any list) =
      fun (x5115 : 'tags this) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5115) "transfer")
    let (set_transfer : 'tags this -> any list -> unit) =
      fun (x5118 : 'tags this) ->
        fun (x5119 : any list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5118) "transfer"
            (Ojs.list_to_js any_to_js x5119)
    let cast_from = Obj.magic
  end
module ErrorEventInit =
  struct
    type t = [ `ErrorEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5123 : Ojs.t) -> t_of_js x5123
    and t_0_to_js : t_0 -> Ojs.t = fun (x5122 : t) -> t_to_js x5122
    type tags = [ `ErrorEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5126 : Ojs.t) -> intf_of_js __tags_of_js x5126
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5124 : __tags intf) -> intf_to_js __tags_to_js x5124
    let (get_colno : 'tags this -> float) =
      fun (x5128 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5128) "colno")
    let (set_colno : 'tags this -> float -> unit) =
      fun (x5130 : 'tags this) ->
        fun (x5131 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5130) "colno"
            (Ojs.float_to_js x5131)
    let (get_error : 'tags this -> any) =
      fun (x5133 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5133) "error")
    let (set_error : 'tags this -> any -> unit) =
      fun (x5135 : 'tags this) ->
        fun (x5136 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5135) "error"
            (any_to_js x5136)
    let (get_filename : 'tags this -> string) =
      fun (x5138 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5138) "filename")
    let (set_filename : 'tags this -> string -> unit) =
      fun (x5140 : 'tags this) ->
        fun (x5141 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5140) "filename"
            (Ojs.string_to_js x5141)
    let (get_lineno : 'tags this -> float) =
      fun (x5143 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5143) "lineno")
    let (set_lineno : 'tags this -> float -> unit) =
      fun (x5145 : 'tags this) ->
        fun (x5146 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5145) "lineno"
            (Ojs.float_to_js x5146)
    let (get_message : 'tags this -> string) =
      fun (x5148 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5148) "message")
    let (set_message : 'tags this -> string -> unit) =
      fun (x5150 : 'tags this) ->
        fun (x5151 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5150) "message"
            (Ojs.string_to_js x5151)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface27:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ErrorEvent.t
                         val set_prototype : t -> ErrorEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:ErrorEventInit.t ->
                                 unit -> ErrorEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5154 : Ojs.t) -> x5154
    and t_to_js : t -> Ojs.t = fun (x5153 : Ojs.t) -> x5153
    let (get_prototype : t -> ErrorEvent.t) =
      fun (x5155 : t) ->
        ErrorEvent.t_of_js (Ojs.get_prop_ascii (t_to_js x5155) "prototype")
    let (set_prototype : t -> ErrorEvent.t -> unit) =
      fun (x5156 : t) ->
        fun (x5157 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x5156) "prototype"
            (ErrorEvent.t_to_js x5157)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:ErrorEventInit.t -> unit -> ErrorEvent.t)
      =
      fun (x5162 : t) ->
        fun ~type_:(x5158 : string) ->
          fun ?eventInitDict:(x5159 : ErrorEventInit.t option) ->
            fun () ->
              ErrorEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x5162)
                   (let x5160 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5160 "push" [|(Ojs.string_to_js x5158)|]);
                    (match x5159 with
                     | Some x5161 ->
                         ignore
                           (Ojs.call x5160 "push"
                              [|(ErrorEventInit.t_to_js x5161)|])
                     | None -> ());
                    x5160))
  end
 and
  ErrorEvent:sig
               type t = [ `ErrorEvent  | `Event ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `ErrorEvent  | `Event ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem
                 type tags = [ `ErrorEvent  | `Event ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `ErrorEvent ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_colno : 'tags this -> float
               val get_error : 'tags this -> any
               val get_filename : 'tags this -> string
               val get_lineno : 'tags this -> float
               val get_message : 'tags this -> string
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t
             end =
  struct
    type t = [ `ErrorEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5164 : Ojs.t) -> t_of_js x5164
    and t_0_to_js : t_0 -> Ojs.t = fun (x5163 : t) -> t_to_js x5163
    type tags = [ `ErrorEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5167 : Ojs.t) -> intf_of_js __tags_of_js x5167
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5165 : __tags intf) -> intf_to_js __tags_to_js x5165
    let (get_colno : 'tags this -> float) =
      fun (x5169 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5169) "colno")
    let (get_error : 'tags this -> any) =
      fun (x5171 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5171) "error")
    let (get_filename : 'tags this -> string) =
      fun (x5173 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5173) "filename")
    let (get_lineno : 'tags this -> float) =
      fun (x5175 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5175) "lineno")
    let (get_message : 'tags this -> string) =
      fun (x5177 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5177) "message")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t) =
      fun ~type_:(x5179 : string) ->
        fun ?eventInitDict:(x5180 : ErrorEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
                 (let x5181 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5181 "push" [|(Ojs.string_to_js x5179)|]);
                  (match x5180 with
                   | Some x5182 ->
                       ignore
                         (Ojs.call x5181 "push"
                            [|(ErrorEventInit.t_to_js x5182)|])
                   | None -> ());
                  x5181))
  end
module AbstractWorker =
  struct
    type t = [ `AbstractWorker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5184 : Ojs.t) -> t_of_js x5184
    and t_0_to_js : t_0 -> Ojs.t = fun (x5183 : t) -> t_to_js x5183
    type tags = [ `AbstractWorker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5187 : Ojs.t) -> intf_of_js __tags_of_js x5187
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5185 : __tags intf) -> intf_to_js __tags_to_js x5185
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null) =
      fun (x5189 : 'tags this) ->
        or_null_of_js
          (fun (x5191 : Ojs.t) ->
             fun ~this:(x5192 : t) ->
               fun ~ev:(x5193 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x5191
                      [|(t_to_js x5192);(ErrorEvent.t_to_js x5193)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5189) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null -> unit) =
      fun (x5194 : 'tags this) ->
        fun (x5195 : (this:t -> ev:ErrorEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5194) "onerror"
            (or_null_to_js
               (fun (x5196 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5197 : Ojs.t) ->
                       fun (x5198 : Ojs.t) ->
                         any_to_js
                           (x5196 ~this:(t_of_js x5197)
                              ~ev:(ErrorEvent.t_of_js x5198)))) x5195)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5208 : 'tags this) ->
        fun ~type_:(x5200 : 'K) ->
          fun ~listener:(x5201 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5202 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5210 = this_to_js Obj.magic x5208 in
                   Ojs.call (Ojs.get_prop_ascii x5210 "addEventListener")
                     "apply"
                     [|x5210;((let x5203 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5203 "push" [|(Obj.magic x5200)|]);
                               ignore
                                 (Ojs.call x5203 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5206 : Ojs.t) ->
                                            fun (x5207 : Ojs.t) ->
                                              any_to_js
                                                (x5201 ~this:(t_of_js x5206)
                                                   ~ev:(any_of_js x5207))))|]);
                               (match x5202 with
                                | Some x5204 ->
                                    ignore
                                      (Ojs.call x5203 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5204)|])
                                | None -> ());
                               x5203))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5217 : 'tags this) ->
        fun ~type_:(x5211 : string) ->
          fun ~listener:(x5212 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5213 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5219 = this_to_js Obj.magic x5217 in
                   Ojs.call (Ojs.get_prop_ascii x5219 "addEventListener")
                     "apply"
                     [|x5219;((let x5214 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5214 "push"
                                    [|(Ojs.string_to_js x5211)|]);
                               ignore
                                 (Ojs.call x5214 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5212)|]);
                               (match x5213 with
                                | Some x5215 ->
                                    ignore
                                      (Ojs.call x5214 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5215)|])
                                | None -> ());
                               x5214))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5228 : 'tags this) ->
        fun ~type_:(x5220 : 'K) ->
          fun ~listener:(x5221 : this:t -> ev:any -> any) ->
            fun ?options:(x5222 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5230 = this_to_js Obj.magic x5228 in
                   Ojs.call (Ojs.get_prop_ascii x5230 "removeEventListener")
                     "apply"
                     [|x5230;((let x5223 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5223 "push" [|(Obj.magic x5220)|]);
                               ignore
                                 (Ojs.call x5223 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5226 : Ojs.t) ->
                                            fun (x5227 : Ojs.t) ->
                                              any_to_js
                                                (x5221 ~this:(t_of_js x5226)
                                                   ~ev:(any_of_js x5227))))|]);
                               (match x5222 with
                                | Some x5224 ->
                                    ignore
                                      (Ojs.call x5223 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5224)|])
                                | None -> ());
                               x5223))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5237 : 'tags this) ->
        fun ~type_:(x5231 : string) ->
          fun ~listener:(x5232 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x5233 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5239 = this_to_js Obj.magic x5237 in
                   Ojs.call (Ojs.get_prop_ascii x5239 "removeEventListener")
                     "apply"
                     [|x5239;((let x5234 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5234 "push"
                                    [|(Ojs.string_to_js x5231)|]);
                               ignore
                                 (Ojs.call x5234 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5232)|]);
                               (match x5233 with
                                | Some x5235 ->
                                    ignore
                                      (Ojs.call x5234 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5235)|])
                                | None -> ());
                               x5234))|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface63:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> MessageEvent.t_0
                         val set_prototype : t -> MessageEvent.t_0 -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:'T MessageEventInit.t ->
                                 unit -> 'T MessageEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5241 : Ojs.t) -> x5241
    and t_to_js : t -> Ojs.t = fun (x5240 : Ojs.t) -> x5240
    let (get_prototype : t -> MessageEvent.t_0) =
      fun (x5242 : t) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x5242) "prototype")
    let (set_prototype : t -> MessageEvent.t_0 -> unit) =
      fun (x5243 : t) ->
        fun (x5244 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (t_to_js x5243) "prototype"
            (MessageEvent.t_0_to_js x5244)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:'T MessageEventInit.t -> unit -> 'T MessageEvent.t)
      =
      fun (x5250 : t) ->
        fun ~type_:(x5245 : string) ->
          fun ?eventInitDict:(x5246 : 'T MessageEventInit.t option) ->
            fun () ->
              MessageEvent.t_of_js Obj.magic
                (Ojs.new_obj_arr (t_to_js x5250)
                   (let x5247 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5247 "push" [|(Ojs.string_to_js x5245)|]);
                    (match x5246 with
                     | Some x5248 ->
                         ignore
                           (Ojs.call x5247 "push"
                              [|(MessageEventInit.t_to_js Obj.magic x5248)|])
                     | None -> ());
                    x5247))
  end
 and
  AnonymousInterface64:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> MessagePort.t
                         val set_prototype : t -> MessagePort.t -> unit
                         val create : t -> MessagePort.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5253 : Ojs.t) -> x5253
    and t_to_js : t -> Ojs.t = fun (x5252 : Ojs.t) -> x5252
    let (get_prototype : t -> MessagePort.t) =
      fun (x5254 : t) ->
        MessagePort.t_of_js (Ojs.get_prop_ascii (t_to_js x5254) "prototype")
    let (set_prototype : t -> MessagePort.t -> unit) =
      fun (x5255 : t) ->
        fun (x5256 : MessagePort.t) ->
          Ojs.set_prop_ascii (t_to_js x5255) "prototype"
            (MessagePort.t_to_js x5256)
    let (create : t -> MessagePort.t) =
      fun (x5257 : t) ->
        MessagePort.t_of_js (Ojs.new_obj (t_to_js x5257) [||])
  end and
       AnonymousInterface94:sig
                              type t = private Ojs.t
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val get_prototype : t -> ServiceWorker.t
                              val set_prototype :
                                t -> ServiceWorker.t -> unit
                              val create : t -> ServiceWorker.t
                            end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x5259 : Ojs.t) -> x5259
         and t_to_js : t -> Ojs.t = fun (x5258 : Ojs.t) -> x5258
         let (get_prototype : t -> ServiceWorker.t) =
           fun (x5260 : t) ->
             ServiceWorker.t_of_js
               (Ojs.get_prop_ascii (t_to_js x5260) "prototype")
         let (set_prototype : t -> ServiceWorker.t -> unit) =
           fun (x5261 : t) ->
             fun (x5262 : ServiceWorker.t) ->
               Ojs.set_prop_ascii (t_to_js x5261) "prototype"
                 (ServiceWorker.t_to_js x5262)
         let (create : t -> ServiceWorker.t) =
           fun (x5263 : t) ->
             ServiceWorker.t_of_js (Ojs.new_obj (t_to_js x5263) [||])
       end and
            MessageEvent:sig
                           type 'T t = [ `Event  | `MessageEvent of 'T ] intf
                           type 'T t_1 = 'T t
                           type t_0 = any t
                           [@@@js.stop ]
                           type 'T tags = [ `Event  | `MessageEvent of 'T ]
                           type 'T tags_1 = 'T tags
                           type tags_0 = any tags
                           [@@@js.start ]
                           [@@@js.implem
                             type 'T tags = [ `Event  | `MessageEvent of 'T ]
                             type 'T tags_1 = 'T tags
                             type tags_0 = any tags]
                           type ('tags, 'T) this =
                             'tags intf constraint 'tags =
                                         [> `MessageEvent of 'T ]
                           val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                           val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                           val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                           val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val get_data : ('tags, 'T) this -> 'T
                           val get_lastEventId : ('tags, 'T) this -> string
                           val get_origin : ('tags, 'T) this -> string
                           val get_ports :
                             ('tags, 'T) this -> MessagePort.t list
                           val get_source :
                             ('tags, 'T) this -> MessageEventSource.t or_null
                           val initMessageEvent :
                             ('tags, 'T) this ->
                               type_:string ->
                                 ?bubbles:bool ->
                                   ?cancelable:bool ->
                                     ?data:any ->
                                       ?origin:string ->
                                         ?lastEventId:string ->
                                           ?source:MessageEventSource.t
                                             or_null ->
                                             ?ports:MessagePort.t list ->
                                               unit -> unit
                           val initMessageEvent' :
                             ('tags, 'T) this ->
                               type_:string ->
                                 ?bubbles:bool ->
                                   ?cancelable:bool ->
                                     ?data:any ->
                                       ?origin:string ->
                                         ?lastEventId:string ->
                                           ?source:MessageEventSource.t
                                             or_null ->
                                             ?ports:MessagePort.t
                                               Iterable.t_1 -> unit -> unit
                           val cast_from : ('tags, 'T) this -> 'T t
                           val prototype : unit -> t_0
                           val create :
                             type_:string ->
                               ?eventInitDict:'T MessageEventInit.t ->
                                 unit -> 'T t
                         end =
            struct
              type 'T t = [ `Event  | `MessageEvent of 'T ] intf
              let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
                fun _T -> Obj.magic
              and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
                fun _T -> Obj.magic
              type 'T t_1 = 'T t
              let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun
                (type __T) ->
                fun (__T_of_js : Ojs.t -> __T) ->
                  fun (x5266 : Ojs.t) -> t_of_js __T_of_js x5266
              and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun
                (type __T) ->
                fun (__T_to_js : __T -> Ojs.t) ->
                  fun (x5264 : __T t) -> t_to_js __T_to_js x5264
              type t_0 = any t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x5270 : Ojs.t) -> t_of_js any_of_js x5270
              and t_0_to_js : t_0 -> Ojs.t =
                fun (x5268 : any t) -> t_to_js any_to_js x5268
              type 'T tags = [ `Event  | `MessageEvent of 'T ]
              type 'T tags_1 = 'T tags
              type tags_0 = any tags
              type ('tags, 'T) this =
                'tags intf constraint 'tags = [> `MessageEvent of 'T ]
              let rec this_of_js :
                'tags 'T .
                  (Ojs.t -> 'tags) ->
                    (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
                = fun (type __tags) -> fun (type __T) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (__T_of_js : Ojs.t -> __T) ->
                    fun (x5274 : Ojs.t) -> intf_of_js __tags_of_js x5274
              and this_to_js :
                'tags 'T .
                  ('tags -> Ojs.t) ->
                    ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
                = fun (type __tags) -> fun (type __T) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (__T_to_js : __T -> Ojs.t) ->
                    fun (x5272 : __tags intf) ->
                      intf_to_js __tags_to_js x5272
              let (get_data : ('tags, 'T) this -> 'T) =
                fun (x5276 : ('tags, 'T) this) ->
                  Obj.magic
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x5276) "data")
              let (get_lastEventId : ('tags, 'T) this -> string) =
                fun (x5279 : ('tags, 'T) this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x5279) "lastEventId")
              let (get_origin : ('tags, 'T) this -> string) =
                fun (x5282 : ('tags, 'T) this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x5282) "origin")
              let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
                fun (x5285 : ('tags, 'T) this) ->
                  Ojs.list_of_js MessagePort.t_of_js
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x5285) "ports")
              let (get_source :
                ('tags, 'T) this -> MessageEventSource.t or_null) =
                fun (x5289 : ('tags, 'T) this) ->
                  or_null_of_js MessageEventSource.t_of_js
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x5289) "source")
              let (initMessageEvent :
                ('tags, 'T) this ->
                  type_:string ->
                    ?bubbles:bool ->
                      ?cancelable:bool ->
                        ?data:any ->
                          ?origin:string ->
                            ?lastEventId:string ->
                              ?source:MessageEventSource.t or_null ->
                                ?ports:MessagePort.t list -> unit -> unit)
                =
                fun (x5311 : ('tags, 'T) this) ->
                  fun ~type_:(x5293 : string) ->
                    fun ?bubbles:(x5294 : bool option) ->
                      fun ?cancelable:(x5295 : bool option) ->
                        fun ?data:(x5296 : any option) ->
                          fun ?origin:(x5297 : string option) ->
                            fun ?lastEventId:(x5298 : string option) ->
                              fun
                                ?source:(x5299 :
                                          MessageEventSource.t or_null option)
                                ->
                                fun
                                  ?ports:(x5300 : MessagePort.t list option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x5314 =
                                         this_to_js Obj.magic Obj.magic x5311 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x5314
                                            "initMessageEvent") "apply"
                                         [|x5314;((let x5301 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x5301 "push"
                                                        [|(Ojs.string_to_js
                                                             x5293)|]);
                                                   (match x5294 with
                                                    | Some x5310 ->
                                                        ignore
                                                          (Ojs.call x5301
                                                             "push"
                                                             [|(Ojs.bool_to_js
                                                                  x5310)|])
                                                    | None -> ());
                                                   (match x5295 with
                                                    | Some x5309 ->
                                                        ignore
                                                          (Ojs.call x5301
                                                             "push"
                                                             [|(Ojs.bool_to_js
                                                                  x5309)|])
                                                    | None -> ());
                                                   (match x5296 with
                                                    | Some x5308 ->
                                                        ignore
                                                          (Ojs.call x5301
                                                             "push"
                                                             [|(any_to_js
                                                                  x5308)|])
                                                    | None -> ());
                                                   (match x5297 with
                                                    | Some x5307 ->
                                                        ignore
                                                          (Ojs.call x5301
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5307)|])
                                                    | None -> ());
                                                   (match x5298 with
                                                    | Some x5306 ->
                                                        ignore
                                                          (Ojs.call x5301
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5306)|])
                                                    | None -> ());
                                                   (match x5299 with
                                                    | Some x5304 ->
                                                        ignore
                                                          (Ojs.call x5301
                                                             "push"
                                                             [|(or_null_to_js
                                                                  MessageEventSource.t_to_js
                                                                  x5304)|])
                                                    | None -> ());
                                                   (match x5300 with
                                                    | Some x5302 ->
                                                        ignore
                                                          (Ojs.call x5301
                                                             "push"
                                                             [|(Ojs.list_to_js
                                                                  MessagePort.t_to_js
                                                                  x5302)|])
                                                    | None -> ());
                                                   x5301))|])
              let (initMessageEvent' :
                ('tags, 'T) this ->
                  type_:string ->
                    ?bubbles:bool ->
                      ?cancelable:bool ->
                        ?data:any ->
                          ?origin:string ->
                            ?lastEventId:string ->
                              ?source:MessageEventSource.t or_null ->
                                ?ports:MessagePort.t Iterable.t_1 ->
                                  unit -> unit)
                =
                fun (x5333 : ('tags, 'T) this) ->
                  fun ~type_:(x5315 : string) ->
                    fun ?bubbles:(x5316 : bool option) ->
                      fun ?cancelable:(x5317 : bool option) ->
                        fun ?data:(x5318 : any option) ->
                          fun ?origin:(x5319 : string option) ->
                            fun ?lastEventId:(x5320 : string option) ->
                              fun
                                ?source:(x5321 :
                                          MessageEventSource.t or_null option)
                                ->
                                fun
                                  ?ports:(x5322 :
                                           MessagePort.t Iterable.t_1 option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x5336 =
                                         this_to_js Obj.magic Obj.magic x5333 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x5336
                                            "initMessageEvent") "apply"
                                         [|x5336;((let x5323 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x5323 "push"
                                                        [|(Ojs.string_to_js
                                                             x5315)|]);
                                                   (match x5316 with
                                                    | Some x5332 ->
                                                        ignore
                                                          (Ojs.call x5323
                                                             "push"
                                                             [|(Ojs.bool_to_js
                                                                  x5332)|])
                                                    | None -> ());
                                                   (match x5317 with
                                                    | Some x5331 ->
                                                        ignore
                                                          (Ojs.call x5323
                                                             "push"
                                                             [|(Ojs.bool_to_js
                                                                  x5331)|])
                                                    | None -> ());
                                                   (match x5318 with
                                                    | Some x5330 ->
                                                        ignore
                                                          (Ojs.call x5323
                                                             "push"
                                                             [|(any_to_js
                                                                  x5330)|])
                                                    | None -> ());
                                                   (match x5319 with
                                                    | Some x5329 ->
                                                        ignore
                                                          (Ojs.call x5323
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5329)|])
                                                    | None -> ());
                                                   (match x5320 with
                                                    | Some x5328 ->
                                                        ignore
                                                          (Ojs.call x5323
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5328)|])
                                                    | None -> ());
                                                   (match x5321 with
                                                    | Some x5326 ->
                                                        ignore
                                                          (Ojs.call x5323
                                                             "push"
                                                             [|(or_null_to_js
                                                                  MessageEventSource.t_to_js
                                                                  x5326)|])
                                                    | None -> ());
                                                   (match x5322 with
                                                    | Some x5324 ->
                                                        ignore
                                                          (Ojs.call x5323
                                                             "push"
                                                             [|(Iterable.t_1_to_js
                                                                  MessagePort.t_to_js
                                                                  x5324)|])
                                                    | None -> ());
                                                   x5323))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t_0) =
                fun () ->
                  t_0_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "MessageEvent")
                       "prototype")
              let (create :
                type_:string ->
                  ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t)
                =
                fun ~type_:(x5337 : string) ->
                  fun ?eventInitDict:(x5338 : 'T MessageEventInit.t option)
                    ->
                    fun () ->
                      t_of_js Obj.magic
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii Ojs.global "MessageEvent")
                           (let x5339 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x5339 "push"
                                 [|(Ojs.string_to_js x5337)|]);
                            (match x5338 with
                             | Some x5340 ->
                                 ignore
                                   (Ojs.call x5339 "push"
                                      [|(MessageEventInit.t_to_js Obj.magic
                                           x5340)|])
                             | None -> ());
                            x5339))
            end and
                 MessageEventInit:sig
                                    type 'T t =
                                      [ `EventInit 
                                      | `MessageEventInit of 'T ] intf
                                    type 'T t_1 = 'T t
                                    type t_0 = any t
                                    [@@@js.stop ]
                                    type 'T tags =
                                      [ `EventInit 
                                      | `MessageEventInit of 'T ]
                                    type 'T tags_1 = 'T tags
                                    type tags_0 = any tags
                                    [@@@js.start ]
                                    [@@@js.implem
                                      type 'T tags =
                                        [ `EventInit 
                                        | `MessageEventInit of 'T ]
                                      type 'T tags_1 = 'T tags
                                      type tags_0 = any tags]
                                    type ('tags, 'T) this =
                                      'tags intf constraint 'tags =
                                                  [>
                                                    `MessageEventInit of 'T ]
                                    val t_to_js :
                                      ('T -> Ojs.t) -> 'T t -> Ojs.t
                                    val t_of_js :
                                      (Ojs.t -> 'T) -> Ojs.t -> 'T t
                                    val t_1_to_js :
                                      ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                                    val t_1_of_js :
                                      (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                                    val t_0_to_js : t_0 -> Ojs.t
                                    val t_0_of_js : Ojs.t -> t_0
                                    val get_data : ('tags, 'T) this -> 'T
                                    val set_data :
                                      ('tags, 'T) this -> 'T -> unit
                                    val get_lastEventId :
                                      ('tags, 'T) this -> string
                                    val set_lastEventId :
                                      ('tags, 'T) this -> string -> unit
                                    val get_origin :
                                      ('tags, 'T) this -> string
                                    val set_origin :
                                      ('tags, 'T) this -> string -> unit
                                    val get_ports :
                                      ('tags, 'T) this -> MessagePort.t list
                                    val set_ports :
                                      ('tags, 'T) this ->
                                        MessagePort.t list -> unit
                                    val get_source :
                                      ('tags, 'T) this ->
                                        MessageEventSource.t or_null
                                    val set_source :
                                      ('tags, 'T) this ->
                                        MessageEventSource.t or_null -> unit
                                    val cast_from : ('tags, 'T) this -> 'T t
                                  end =
                 struct
                   type 'T t = [ `EventInit  | `MessageEventInit of 'T ] intf
                   let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
                     fun _T -> Obj.magic
                   and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
                     fun _T -> Obj.magic
                   type 'T t_1 = 'T t
                   let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                     = fun (type __T) ->
                     fun (__T_of_js : Ojs.t -> __T) ->
                       fun (x5345 : Ojs.t) -> t_of_js __T_of_js x5345
                   and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
                     fun (type __T) ->
                     fun (__T_to_js : __T -> Ojs.t) ->
                       fun (x5343 : __T t) -> t_to_js __T_to_js x5343
                   type t_0 = any t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x5349 : Ojs.t) -> t_of_js any_of_js x5349
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x5347 : any t) -> t_to_js any_to_js x5347
                   type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
                   type 'T tags_1 = 'T tags
                   type tags_0 = any tags
                   type ('tags, 'T) this =
                     'tags intf constraint 'tags =
                                 [> `MessageEventInit of 'T ]
                   let rec this_of_js :
                     'tags 'T .
                       (Ojs.t -> 'tags) ->
                         (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
                     = fun (type __tags) -> fun (type __T) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (__T_of_js : Ojs.t -> __T) ->
                         fun (x5353 : Ojs.t) -> intf_of_js __tags_of_js x5353
                   and this_to_js :
                     'tags 'T .
                       ('tags -> Ojs.t) ->
                         ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
                     = fun (type __tags) -> fun (type __T) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (__T_to_js : __T -> Ojs.t) ->
                         fun (x5351 : __tags intf) ->
                           intf_to_js __tags_to_js x5351
                   let (get_data : ('tags, 'T) this -> 'T) =
                     fun (x5355 : ('tags, 'T) this) ->
                       Obj.magic
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic x5355) "data")
                   let (set_data : ('tags, 'T) this -> 'T -> unit) =
                     fun (x5358 : ('tags, 'T) this) ->
                       fun (x5359 : 'T) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic x5358) "data"
                           (Obj.magic x5359)
                   let (get_lastEventId : ('tags, 'T) this -> string) =
                     fun (x5362 : ('tags, 'T) this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic x5362)
                            "lastEventId")
                   let (set_lastEventId : ('tags, 'T) this -> string -> unit)
                     =
                     fun (x5365 : ('tags, 'T) this) ->
                       fun (x5366 : string) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic x5365)
                           "lastEventId" (Ojs.string_to_js x5366)
                   let (get_origin : ('tags, 'T) this -> string) =
                     fun (x5369 : ('tags, 'T) this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic x5369) "origin")
                   let (set_origin : ('tags, 'T) this -> string -> unit) =
                     fun (x5372 : ('tags, 'T) this) ->
                       fun (x5373 : string) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic x5372) "origin"
                           (Ojs.string_to_js x5373)
                   let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
                     fun (x5376 : ('tags, 'T) this) ->
                       Ojs.list_of_js MessagePort.t_of_js
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic x5376) "ports")
                   let (set_ports :
                     ('tags, 'T) this -> MessagePort.t list -> unit) =
                     fun (x5380 : ('tags, 'T) this) ->
                       fun (x5381 : MessagePort.t list) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic x5380) "ports"
                           (Ojs.list_to_js MessagePort.t_to_js x5381)
                   let (get_source :
                     ('tags, 'T) this -> MessageEventSource.t or_null) =
                     fun (x5385 : ('tags, 'T) this) ->
                       or_null_of_js MessageEventSource.t_of_js
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic x5385) "source")
                   let (set_source :
                     ('tags, 'T) this -> MessageEventSource.t or_null -> unit)
                     =
                     fun (x5389 : ('tags, 'T) this) ->
                       fun (x5390 : MessageEventSource.t or_null) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic x5389) "source"
                           (or_null_to_js MessageEventSource.t_to_js x5390)
                   let cast_from = Obj.magic
                 end and
                      MessageEventSource:sig
                                           type t =
                                             (MessagePort.t, ServiceWorker.t)
                                               union2
                                           type t_0 = t
                                           val t_to_js : t -> Ojs.t
                                           val t_of_js : Ojs.t -> t
                                           val t_0_to_js : t_0 -> Ojs.t
                                           val t_0_of_js : Ojs.t -> t_0
                                         end =
                      struct
                        type t = (MessagePort.t, ServiceWorker.t) union2
                        let rec t_of_js : Ojs.t -> t =
                          fun (x5397 : Ojs.t) ->
                            union2_of_js MessagePort.t_of_js
                              ServiceWorker.t_of_js x5397
                        and t_to_js : t -> Ojs.t =
                          fun
                            (x5394 : (MessagePort.t, ServiceWorker.t) union2)
                            ->
                            union2_to_js MessagePort.t_to_js
                              ServiceWorker.t_to_js x5394
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x5401 : Ojs.t) -> t_of_js x5401
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x5400 : t) -> t_to_js x5400
                      end and
                           MessagePort:sig
                                         type t =
                                           [ `EventTarget  | `MessagePort ]
                                             intf
                                         type t_0 = t
                                         [@@@js.stop ]
                                         type tags =
                                           [ `EventTarget  | `MessagePort ]
                                         type tags_0 = tags
                                         [@@@js.start ]
                                         [@@@js.implem
                                           type tags =
                                             [ `EventTarget  | `MessagePort ]
                                           type tags_0 = tags]
                                         type 'tags this =
                                           'tags intf constraint 'tags =
                                                       [> `MessagePort ]
                                         val t_to_js : t -> Ojs.t
                                         val t_of_js : Ojs.t -> t
                                         val t_0_to_js : t_0 -> Ojs.t
                                         val t_0_of_js : Ojs.t -> t_0
                                         val get_onmessage :
                                           'tags this ->
                                             (this:t ->
                                                ev:MessageEvent.t_0 -> any)
                                               or_null
                                         val set_onmessage :
                                           'tags this ->
                                             (this:t ->
                                                ev:MessageEvent.t_0 -> any)
                                               or_null -> unit
                                         val get_onmessageerror :
                                           'tags this ->
                                             (this:t ->
                                                ev:MessageEvent.t_0 -> any)
                                               or_null
                                         val set_onmessageerror :
                                           'tags this ->
                                             (this:t ->
                                                ev:MessageEvent.t_0 -> any)
                                               or_null -> unit
                                         val close : 'tags this -> unit
                                         val postMessage :
                                           'tags this ->
                                             message:any ->
                                               transfer:Transferable.t list
                                                 -> unit
                                         val postMessage' :
                                           'tags this ->
                                             message:any ->
                                               ?options:StructuredSerializeOptions.t
                                                 -> unit -> unit
                                         val start : 'tags this -> unit
                                         val addEventListener :
                                           'tags this ->
                                             type_:'K ->
                                               listener:(this:t ->
                                                           ev:any -> any)
                                                 ->
                                                 ?options:AddEventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val addEventListener' :
                                           'tags this ->
                                             type_:string ->
                                               listener:EventListenerOrEventListenerObject.t
                                                 ->
                                                 ?options:AddEventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val removeEventListener :
                                           'tags this ->
                                             type_:'K ->
                                               listener:(this:t ->
                                                           ev:any -> any)
                                                 ->
                                                 ?options:EventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val removeEventListener' :
                                           'tags this ->
                                             type_:string ->
                                               listener:EventListenerOrEventListenerObject.t
                                                 ->
                                                 ?options:EventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val cast_from : 'tags this -> t
                                         val prototype : unit -> t
                                         val create : unit -> t
                                       end =
                           struct
                             type t = [ `EventTarget  | `MessagePort ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x5403 : Ojs.t) -> t_of_js x5403
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x5402 : t) -> t_to_js x5402
                             type tags = [ `EventTarget  | `MessagePort ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `MessagePort ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               = fun (type __tags) ->
                               fun (__tags_of_js : Ojs.t -> __tags) ->
                                 fun (x5406 : Ojs.t) ->
                                   intf_of_js __tags_of_js x5406
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               = fun (type __tags) ->
                               fun (__tags_to_js : __tags -> Ojs.t) ->
                                 fun (x5404 : __tags intf) ->
                                   intf_to_js __tags_to_js x5404
                             let (get_onmessage :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null)
                               =
                               fun (x5408 : 'tags this) ->
                                 or_null_of_js
                                   (fun (x5410 : Ojs.t) ->
                                      fun ~this:(x5411 : t) ->
                                        fun ~ev:(x5412 : MessageEvent.t_0) ->
                                          any_of_js
                                            (Ojs.apply x5410
                                               [|(t_to_js x5411);(MessageEvent.t_0_to_js
                                                                    x5412)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x5408)
                                      "onmessage")
                             let (set_onmessage :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null -> unit)
                               =
                               fun (x5413 : 'tags this) ->
                                 fun
                                   (x5414 :
                                     (this:t -> ev:MessageEvent.t_0 -> any)
                                       or_null)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x5413) "onmessage"
                                     (or_null_to_js
                                        (fun
                                           (x5415 :
                                             this:t ->
                                               ev:MessageEvent.t_0 -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x5416 : Ojs.t) ->
                                                fun (x5417 : Ojs.t) ->
                                                  any_to_js
                                                    (x5415
                                                       ~this:(t_of_js x5416)
                                                       ~ev:(MessageEvent.t_0_of_js
                                                              x5417)))) x5414)
                             let (get_onmessageerror :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null)
                               =
                               fun (x5419 : 'tags this) ->
                                 or_null_of_js
                                   (fun (x5421 : Ojs.t) ->
                                      fun ~this:(x5422 : t) ->
                                        fun ~ev:(x5423 : MessageEvent.t_0) ->
                                          any_of_js
                                            (Ojs.apply x5421
                                               [|(t_to_js x5422);(MessageEvent.t_0_to_js
                                                                    x5423)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x5419)
                                      "onmessageerror")
                             let (set_onmessageerror :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null -> unit)
                               =
                               fun (x5424 : 'tags this) ->
                                 fun
                                   (x5425 :
                                     (this:t -> ev:MessageEvent.t_0 -> any)
                                       or_null)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x5424)
                                     "onmessageerror"
                                     (or_null_to_js
                                        (fun
                                           (x5426 :
                                             this:t ->
                                               ev:MessageEvent.t_0 -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x5427 : Ojs.t) ->
                                                fun (x5428 : Ojs.t) ->
                                                  any_to_js
                                                    (x5426
                                                       ~this:(t_of_js x5427)
                                                       ~ev:(MessageEvent.t_0_of_js
                                                              x5428)))) x5425)
                             let (close : 'tags this -> unit) =
                               fun (x5430 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x5430)
                                      "close" [||])
                             let (postMessage :
                               'tags this ->
                                 message:any ->
                                   transfer:Transferable.t list -> unit)
                               =
                               fun (x5435 : 'tags this) ->
                                 fun ~message:(x5432 : any) ->
                                   fun
                                     ~transfer:(x5433 : Transferable.t list)
                                     ->
                                     ignore
                                       (Ojs.call (this_to_js Obj.magic x5435)
                                          "postMessage"
                                          [|(any_to_js x5432);(Ojs.list_to_js
                                                                 Transferable.t_to_js
                                                                 x5433)|])
                             let (postMessage' :
                               'tags this ->
                                 message:any ->
                                   ?options:StructuredSerializeOptions.t ->
                                     unit -> unit)
                               =
                               fun (x5441 : 'tags this) ->
                                 fun ~message:(x5437 : any) ->
                                   fun
                                     ?options:(x5438 :
                                                StructuredSerializeOptions.t
                                                  option)
                                     ->
                                     fun () ->
                                       ignore
                                         (let x5443 =
                                            this_to_js Obj.magic x5441 in
                                          Ojs.call
                                            (Ojs.get_prop_ascii x5443
                                               "postMessage") "apply"
                                            [|x5443;((let x5439 =
                                                        Ojs.new_obj
                                                          (Ojs.get_prop_ascii
                                                             Ojs.global
                                                             "Array") 
                                                          [||] in
                                                      ignore
                                                        (Ojs.call x5439
                                                           "push"
                                                           [|(any_to_js x5437)|]);
                                                      (match x5438 with
                                                       | Some x5440 ->
                                                           ignore
                                                             (Ojs.call x5439
                                                                "push"
                                                                [|(StructuredSerializeOptions.t_to_js
                                                                    x5440)|])
                                                       | None -> ());
                                                      x5439))|])
                             let (start : 'tags this -> unit) =
                               fun (x5444 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x5444)
                                      "start" [||])
                             let (addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x5454 : 'tags this) ->
                                 fun ~type_:(x5446 : 'K) ->
                                   fun
                                     ~listener:(x5447 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x5448 :
                                                  AddEventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x5456 =
                                              this_to_js Obj.magic x5454 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x5456
                                                 "addEventListener") "apply"
                                              [|x5456;((let x5449 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x5449
                                                             "push"
                                                             [|(Obj.magic
                                                                  x5446)|]);
                                                        ignore
                                                          (Ojs.call x5449
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x5452 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x5453 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x5447
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5452)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5453))))|]);
                                                        (match x5448 with
                                                         | Some x5450 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x5449
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x5450)|])
                                                         | None -> ());
                                                        x5449))|])
                             let (addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x5463 : 'tags this) ->
                                 fun ~type_:(x5457 : string) ->
                                   fun
                                     ~listener:(x5458 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x5459 :
                                                  AddEventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x5465 =
                                              this_to_js Obj.magic x5463 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x5465
                                                 "addEventListener") "apply"
                                              [|x5465;((let x5460 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x5460
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5457)|]);
                                                        ignore
                                                          (Ojs.call x5460
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x5458)|]);
                                                        (match x5459 with
                                                         | Some x5461 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x5460
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x5461)|])
                                                         | None -> ());
                                                        x5460))|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x5474 : 'tags this) ->
                                 fun ~type_:(x5466 : 'K) ->
                                   fun
                                     ~listener:(x5467 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x5468 :
                                                  EventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x5476 =
                                              this_to_js Obj.magic x5474 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x5476
                                                 "removeEventListener")
                                              "apply"
                                              [|x5476;((let x5469 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x5469
                                                             "push"
                                                             [|(Obj.magic
                                                                  x5466)|]);
                                                        ignore
                                                          (Ojs.call x5469
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x5472 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x5473 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x5467
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5472)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5473))))|]);
                                                        (match x5468 with
                                                         | Some x5470 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x5469
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x5470)|])
                                                         | None -> ());
                                                        x5469))|])
                             let (removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x5483 : 'tags this) ->
                                 fun ~type_:(x5477 : string) ->
                                   fun
                                     ~listener:(x5478 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x5479 :
                                                  EventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x5485 =
                                              this_to_js Obj.magic x5483 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x5485
                                                 "removeEventListener")
                                              "apply"
                                              [|x5485;((let x5480 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x5480
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5477)|]);
                                                        ignore
                                                          (Ojs.call x5480
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x5478)|]);
                                                        (match x5479 with
                                                         | Some x5481 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x5480
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x5481)|])
                                                         | None -> ());
                                                        x5480))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "MessagePort") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "MessagePort") [||])
                           end and
                                ServiceWorker:sig
                                                type t =
                                                  [ `AbstractWorker 
                                                  | `EventTarget 
                                                  | `ServiceWorker ] intf
                                                type t_0 = t
                                                [@@@js.stop ]
                                                type tags =
                                                  [ `AbstractWorker 
                                                  | `EventTarget 
                                                  | `ServiceWorker ]
                                                type tags_0 = tags
                                                [@@@js.start ]
                                                [@@@js.implem
                                                  type tags =
                                                    [ `AbstractWorker 
                                                    | `EventTarget 
                                                    | `ServiceWorker ]
                                                  type tags_0 = tags]
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `ServiceWorker
                                                                  ]
                                                val t_to_js : t -> Ojs.t
                                                val t_of_js : Ojs.t -> t
                                                val t_0_to_js : t_0 -> Ojs.t
                                                val t_0_of_js : Ojs.t -> t_0
                                                val get_onstatechange :
                                                  'tags this ->
                                                    (this:t ->
                                                       ev:Event.t -> any)
                                                      or_null
                                                val set_onstatechange :
                                                  'tags this ->
                                                    (this:t ->
                                                       ev:Event.t -> any)
                                                      or_null -> unit
                                                val get_scriptURL :
                                                  'tags this -> string
                                                val get_state :
                                                  'tags this ->
                                                    ServiceWorkerState.t
                                                val postMessage :
                                                  'tags this ->
                                                    message:any ->
                                                      transfer:Transferable.t
                                                        list -> unit
                                                val postMessage' :
                                                  'tags this ->
                                                    message:any ->
                                                      ?options:StructuredSerializeOptions.t
                                                        -> unit -> unit
                                                val addEventListener :
                                                  'tags this ->
                                                    type_:'K ->
                                                      listener:(this:t ->
                                                                  ev:any ->
                                                                    any)
                                                        ->
                                                        ?options:AddEventListenerOptions.t
                                                          or_boolean ->
                                                          unit -> unit
                                                val addEventListener' :
                                                  'tags this ->
                                                    type_:string ->
                                                      listener:EventListenerOrEventListenerObject.t
                                                        ->
                                                        ?options:AddEventListenerOptions.t
                                                          or_boolean ->
                                                          unit -> unit
                                                val removeEventListener :
                                                  'tags this ->
                                                    type_:'K ->
                                                      listener:(this:t ->
                                                                  ev:any ->
                                                                    any)
                                                        ->
                                                        ?options:EventListenerOptions.t
                                                          or_boolean ->
                                                          unit -> unit
                                                val removeEventListener' :
                                                  'tags this ->
                                                    type_:string ->
                                                      listener:EventListenerOrEventListenerObject.t
                                                        ->
                                                        ?options:EventListenerOptions.t
                                                          or_boolean ->
                                                          unit -> unit
                                                val cast_from :
                                                  'tags this -> t
                                                val prototype : unit -> t
                                                val create : unit -> t
                                              end =
                                struct
                                  type t =
                                    [ `AbstractWorker  | `EventTarget 
                                    | `ServiceWorker ] intf
                                  let rec t_of_js : Ojs.t -> t = Obj.magic
                                  and t_to_js : t -> Ojs.t = Obj.magic
                                  type t_0 = t
                                  let rec t_0_of_js : Ojs.t -> t_0 =
                                    fun (x5487 : Ojs.t) -> t_of_js x5487
                                  and t_0_to_js : t_0 -> Ojs.t =
                                    fun (x5486 : t) -> t_to_js x5486
                                  type tags =
                                    [ `AbstractWorker  | `EventTarget 
                                    | `ServiceWorker ]
                                  type tags_0 = tags
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `ServiceWorker ]
                                  let rec this_of_js :
                                    'tags .
                                      (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                                    = fun (type __tags) ->
                                    fun (__tags_of_js : Ojs.t -> __tags) ->
                                      fun (x5490 : Ojs.t) ->
                                        intf_of_js __tags_of_js x5490
                                  and this_to_js :
                                    'tags .
                                      ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                                    = fun (type __tags) ->
                                    fun (__tags_to_js : __tags -> Ojs.t) ->
                                      fun (x5488 : __tags intf) ->
                                        intf_to_js __tags_to_js x5488
                                  let (get_onstatechange :
                                    'tags this ->
                                      (this:t -> ev:Event.t -> any) or_null)
                                    =
                                    fun (x5492 : 'tags this) ->
                                      or_null_of_js
                                        (fun (x5494 : Ojs.t) ->
                                           fun ~this:(x5495 : t) ->
                                             fun ~ev:(x5496 : Event.t) ->
                                               any_of_js
                                                 (Ojs.apply x5494
                                                    [|(t_to_js x5495);(
                                                      Event.t_to_js x5496)|]))
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x5492)
                                           "onstatechange")
                                  let (set_onstatechange :
                                    'tags this ->
                                      (this:t -> ev:Event.t -> any) or_null
                                        -> unit)
                                    =
                                    fun (x5497 : 'tags this) ->
                                      fun
                                        (x5498 :
                                          (this:t -> ev:Event.t -> any)
                                            or_null)
                                        ->
                                        Ojs.set_prop_ascii
                                          (this_to_js Obj.magic x5497)
                                          "onstatechange"
                                          (or_null_to_js
                                             (fun
                                                (x5499 :
                                                  this:t -> ev:Event.t -> any)
                                                ->
                                                Ojs.fun_to_js 2
                                                  (fun (x5500 : Ojs.t) ->
                                                     fun (x5501 : Ojs.t) ->
                                                       any_to_js
                                                         (x5499
                                                            ~this:(t_of_js
                                                                    x5500)
                                                            ~ev:(Event.t_of_js
                                                                   x5501))))
                                             x5498)
                                  let (get_scriptURL : 'tags this -> string)
                                    =
                                    fun (x5503 : 'tags this) ->
                                      Ojs.string_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x5503)
                                           "scriptURL")
                                  let (get_state :
                                    'tags this -> ServiceWorkerState.t) =
                                    fun (x5505 : 'tags this) ->
                                      ServiceWorkerState.t_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x5505)
                                           "state")
                                  let (postMessage :
                                    'tags this ->
                                      message:any ->
                                        transfer:Transferable.t list -> unit)
                                    =
                                    fun (x5510 : 'tags this) ->
                                      fun ~message:(x5507 : any) ->
                                        fun
                                          ~transfer:(x5508 :
                                                      Transferable.t list)
                                          ->
                                          ignore
                                            (Ojs.call
                                               (this_to_js Obj.magic x5510)
                                               "postMessage"
                                               [|(any_to_js x5507);(Ojs.list_to_js
                                                                    Transferable.t_to_js
                                                                    x5508)|])
                                  let (postMessage' :
                                    'tags this ->
                                      message:any ->
                                        ?options:StructuredSerializeOptions.t
                                          -> unit -> unit)
                                    =
                                    fun (x5516 : 'tags this) ->
                                      fun ~message:(x5512 : any) ->
                                        fun
                                          ?options:(x5513 :
                                                     StructuredSerializeOptions.t
                                                       option)
                                          ->
                                          fun () ->
                                            ignore
                                              (let x5518 =
                                                 this_to_js Obj.magic x5516 in
                                               Ojs.call
                                                 (Ojs.get_prop_ascii x5518
                                                    "postMessage") "apply"
                                                 [|x5518;((let x5514 =
                                                             Ojs.new_obj
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "Array")
                                                               [||] in
                                                           ignore
                                                             (Ojs.call x5514
                                                                "push"
                                                                [|(any_to_js
                                                                    x5512)|]);
                                                           (match x5513 with
                                                            | Some x5515 ->
                                                                ignore
                                                                  (Ojs.call
                                                                    x5514
                                                                    "push"
                                                                    [|(
                                                                    StructuredSerializeOptions.t_to_js
                                                                    x5515)|])
                                                            | None -> ());
                                                           x5514))|])
                                  let (addEventListener :
                                    'tags this ->
                                      type_:'K ->
                                        listener:(this:t -> ev:any -> any) ->
                                          ?options:AddEventListenerOptions.t
                                            or_boolean -> unit -> unit)
                                    =
                                    fun (x5527 : 'tags this) ->
                                      fun ~type_:(x5519 : 'K) ->
                                        fun
                                          ~listener:(x5520 :
                                                      this:t -> ev:any -> any)
                                          ->
                                          fun
                                            ?options:(x5521 :
                                                       AddEventListenerOptions.t
                                                         or_boolean option)
                                            ->
                                            fun () ->
                                              ignore
                                                (let x5529 =
                                                   this_to_js Obj.magic x5527 in
                                                 Ojs.call
                                                   (Ojs.get_prop_ascii x5529
                                                      "addEventListener")
                                                   "apply"
                                                   [|x5529;((let x5522 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x5522
                                                                  "push"
                                                                  [|(
                                                                    Obj.magic
                                                                    x5519)|]);
                                                             ignore
                                                               (Ojs.call
                                                                  x5522
                                                                  "push"
                                                                  [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x5525 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x5526 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x5520
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5525)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5526))))|]);
                                                             (match x5521
                                                              with
                                                              | Some x5523 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x5522
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x5523)|])
                                                              | None -> ());
                                                             x5522))|])
                                  let (addEventListener' :
                                    'tags this ->
                                      type_:string ->
                                        listener:EventListenerOrEventListenerObject.t
                                          ->
                                          ?options:AddEventListenerOptions.t
                                            or_boolean -> unit -> unit)
                                    =
                                    fun (x5536 : 'tags this) ->
                                      fun ~type_:(x5530 : string) ->
                                        fun
                                          ~listener:(x5531 :
                                                      EventListenerOrEventListenerObject.t)
                                          ->
                                          fun
                                            ?options:(x5532 :
                                                       AddEventListenerOptions.t
                                                         or_boolean option)
                                            ->
                                            fun () ->
                                              ignore
                                                (let x5538 =
                                                   this_to_js Obj.magic x5536 in
                                                 Ojs.call
                                                   (Ojs.get_prop_ascii x5538
                                                      "addEventListener")
                                                   "apply"
                                                   [|x5538;((let x5533 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x5533
                                                                  "push"
                                                                  [|(
                                                                    Ojs.string_to_js
                                                                    x5530)|]);
                                                             ignore
                                                               (Ojs.call
                                                                  x5533
                                                                  "push"
                                                                  [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x5531)|]);
                                                             (match x5532
                                                              with
                                                              | Some x5534 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x5533
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x5534)|])
                                                              | None -> ());
                                                             x5533))|])
                                  let (removeEventListener :
                                    'tags this ->
                                      type_:'K ->
                                        listener:(this:t -> ev:any -> any) ->
                                          ?options:EventListenerOptions.t
                                            or_boolean -> unit -> unit)
                                    =
                                    fun (x5547 : 'tags this) ->
                                      fun ~type_:(x5539 : 'K) ->
                                        fun
                                          ~listener:(x5540 :
                                                      this:t -> ev:any -> any)
                                          ->
                                          fun
                                            ?options:(x5541 :
                                                       EventListenerOptions.t
                                                         or_boolean option)
                                            ->
                                            fun () ->
                                              ignore
                                                (let x5549 =
                                                   this_to_js Obj.magic x5547 in
                                                 Ojs.call
                                                   (Ojs.get_prop_ascii x5549
                                                      "removeEventListener")
                                                   "apply"
                                                   [|x5549;((let x5542 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x5542
                                                                  "push"
                                                                  [|(
                                                                    Obj.magic
                                                                    x5539)|]);
                                                             ignore
                                                               (Ojs.call
                                                                  x5542
                                                                  "push"
                                                                  [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x5545 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x5546 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x5540
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5545)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5546))))|]);
                                                             (match x5541
                                                              with
                                                              | Some x5543 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x5542
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x5543)|])
                                                              | None -> ());
                                                             x5542))|])
                                  let (removeEventListener' :
                                    'tags this ->
                                      type_:string ->
                                        listener:EventListenerOrEventListenerObject.t
                                          ->
                                          ?options:EventListenerOptions.t
                                            or_boolean -> unit -> unit)
                                    =
                                    fun (x5556 : 'tags this) ->
                                      fun ~type_:(x5550 : string) ->
                                        fun
                                          ~listener:(x5551 :
                                                      EventListenerOrEventListenerObject.t)
                                          ->
                                          fun
                                            ?options:(x5552 :
                                                       EventListenerOptions.t
                                                         or_boolean option)
                                            ->
                                            fun () ->
                                              ignore
                                                (let x5558 =
                                                   this_to_js Obj.magic x5556 in
                                                 Ojs.call
                                                   (Ojs.get_prop_ascii x5558
                                                      "removeEventListener")
                                                   "apply"
                                                   [|x5558;((let x5553 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x5553
                                                                  "push"
                                                                  [|(
                                                                    Ojs.string_to_js
                                                                    x5550)|]);
                                                             ignore
                                                               (Ojs.call
                                                                  x5553
                                                                  "push"
                                                                  [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x5551)|]);
                                                             (match x5552
                                                              with
                                                              | Some x5554 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x5553
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x5554)|])
                                                              | None -> ());
                                                             x5553))|])
                                  let cast_from = Obj.magic
                                  let (prototype : unit -> t) =
                                    fun () ->
                                      t_of_js
                                        (Ojs.get_prop_ascii
                                           (Ojs.get_prop_ascii Ojs.global
                                              "ServiceWorker") "prototype")
                                  let (create : unit -> t) =
                                    fun () ->
                                      t_of_js
                                        (Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "ServiceWorker") [||])
                                end and
                                     Transferable:sig
                                                    type t =
                                                      (ArrayBuffer.t_0,
                                                        ImageBitmap.t,
                                                        MessagePort.t) union3
                                                    type t_0 = t
                                                    val t_to_js : t -> Ojs.t
                                                    val t_of_js : Ojs.t -> t
                                                    val t_0_to_js :
                                                      t_0 -> Ojs.t
                                                    val t_0_of_js :
                                                      Ojs.t -> t_0
                                                  end =
                                     struct
                                       type t =
                                         (ArrayBuffer.t_0, ImageBitmap.t,
                                           MessagePort.t) union3
                                       let rec t_of_js : Ojs.t -> t =
                                         fun (x5563 : Ojs.t) ->
                                           union3_of_js ArrayBuffer.t_0_of_js
                                             ImageBitmap.t_of_js
                                             MessagePort.t_of_js x5563
                                       and t_to_js : t -> Ojs.t =
                                         fun
                                           (x5559 :
                                             (ArrayBuffer.t_0, ImageBitmap.t,
                                               MessagePort.t) union3)
                                           ->
                                           union3_to_js ArrayBuffer.t_0_to_js
                                             ImageBitmap.t_to_js
                                             MessagePort.t_to_js x5559
                                       type t_0 = t
                                       let rec t_0_of_js : Ojs.t -> t_0 =
                                         fun (x5568 : Ojs.t) -> t_of_js x5568
                                       and t_0_to_js : t_0 -> Ojs.t =
                                         fun (x5567 : t) -> t_to_js x5567
                                     end
module AbstractWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5570 : Ojs.t) -> t_of_js x5570
    and t_0_to_js : t_0 -> Ojs.t = fun (x5569 : t) -> t_to_js x5569
    type tags = [ `AbstractWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AbstractWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5573 : Ojs.t) -> intf_of_js __tags_of_js x5573
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5571 : __tags intf) -> intf_to_js __tags_to_js x5571
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x5575 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5575) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x5577 : 'tags this) ->
        fun (x5578 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5577) "error"
            (ErrorEvent.t_to_js x5578)
    let cast_from = Obj.magic
  end
module WorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `WorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5581 : Ojs.t) -> t_of_js x5581
    and t_0_to_js : t_0 -> Ojs.t = fun (x5580 : t) -> t_to_js x5580
    type tags = [ `AbstractWorkerEventMap  | `WorkerEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5584 : Ojs.t) -> intf_of_js __tags_of_js x5584
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5582 : __tags intf) -> intf_to_js __tags_to_js x5582
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5586 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5586) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5588 : 'tags this) ->
        fun (x5589 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5588) "message"
            (MessageEvent.t_0_to_js x5589)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x5591 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5591) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5593 : 'tags this) ->
        fun (x5594 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5593) "messageerror"
            (MessageEvent.t_0_to_js x5594)
    let cast_from = Obj.magic
  end
module CloseEventInit =
  struct
    type t = [ `CloseEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5597 : Ojs.t) -> t_of_js x5597
    and t_0_to_js : t_0 -> Ojs.t = fun (x5596 : t) -> t_to_js x5596
    type tags = [ `CloseEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5600 : Ojs.t) -> intf_of_js __tags_of_js x5600
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5598 : __tags intf) -> intf_to_js __tags_to_js x5598
    let (get_code : 'tags this -> float) =
      fun (x5602 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5602) "code")
    let (set_code : 'tags this -> float -> unit) =
      fun (x5604 : 'tags this) ->
        fun (x5605 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5604) "code"
            (Ojs.float_to_js x5605)
    let (get_reason : 'tags this -> string) =
      fun (x5607 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5607) "reason")
    let (set_reason : 'tags this -> string -> unit) =
      fun (x5609 : 'tags this) ->
        fun (x5610 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5609) "reason"
            (Ojs.string_to_js x5610)
    let (get_wasClean : 'tags this -> bool) =
      fun (x5612 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5612) "wasClean")
    let (set_wasClean : 'tags this -> bool -> unit) =
      fun (x5614 : 'tags this) ->
        fun (x5615 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5614) "wasClean"
            (Ojs.bool_to_js x5615)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface11:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> CloseEvent.t
                         val set_prototype : t -> CloseEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:CloseEventInit.t ->
                                 unit -> CloseEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5618 : Ojs.t) -> x5618
    and t_to_js : t -> Ojs.t = fun (x5617 : Ojs.t) -> x5617
    let (get_prototype : t -> CloseEvent.t) =
      fun (x5619 : t) ->
        CloseEvent.t_of_js (Ojs.get_prop_ascii (t_to_js x5619) "prototype")
    let (set_prototype : t -> CloseEvent.t -> unit) =
      fun (x5620 : t) ->
        fun (x5621 : CloseEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x5620) "prototype"
            (CloseEvent.t_to_js x5621)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:CloseEventInit.t -> unit -> CloseEvent.t)
      =
      fun (x5626 : t) ->
        fun ~type_:(x5622 : string) ->
          fun ?eventInitDict:(x5623 : CloseEventInit.t option) ->
            fun () ->
              CloseEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x5626)
                   (let x5624 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5624 "push" [|(Ojs.string_to_js x5622)|]);
                    (match x5623 with
                     | Some x5625 ->
                         ignore
                           (Ojs.call x5624 "push"
                              [|(CloseEventInit.t_to_js x5625)|])
                     | None -> ());
                    x5624))
  end
 and
  CloseEvent:sig
               type t = [ `CloseEvent  | `Event ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `CloseEvent  | `Event ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem
                 type tags = [ `CloseEvent  | `Event ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `CloseEvent ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_code : 'tags this -> float
               val get_reason : 'tags this -> string
               val get_wasClean : 'tags this -> bool
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t
             end =
  struct
    type t = [ `CloseEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5628 : Ojs.t) -> t_of_js x5628
    and t_0_to_js : t_0 -> Ojs.t = fun (x5627 : t) -> t_to_js x5627
    type tags = [ `CloseEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5631 : Ojs.t) -> intf_of_js __tags_of_js x5631
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5629 : __tags intf) -> intf_to_js __tags_to_js x5629
    let (get_code : 'tags this -> float) =
      fun (x5633 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5633) "code")
    let (get_reason : 'tags this -> string) =
      fun (x5635 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5635) "reason")
    let (get_wasClean : 'tags this -> bool) =
      fun (x5637 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5637) "wasClean")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CloseEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t) =
      fun ~type_:(x5639 : string) ->
        fun ?eventInitDict:(x5640 : CloseEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CloseEvent")
                 (let x5641 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5641 "push" [|(Ojs.string_to_js x5639)|]);
                  (match x5640 with
                   | Some x5642 ->
                       ignore
                         (Ojs.call x5641 "push"
                            [|(CloseEventInit.t_to_js x5642)|])
                   | None -> ());
                  x5641))
  end
module WebSocketEventMap =
  struct
    type t = [ `WebSocketEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5644 : Ojs.t) -> t_of_js x5644
    and t_0_to_js : t_0 -> Ojs.t = fun (x5643 : t) -> t_to_js x5643
    type tags = [ `WebSocketEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocketEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5647 : Ojs.t) -> intf_of_js __tags_of_js x5647
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5645 : __tags intf) -> intf_to_js __tags_to_js x5645
    let (get_close : 'tags this -> CloseEvent.t) =
      fun (x5649 : 'tags this) ->
        CloseEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5649) "close")
    let (set_close : 'tags this -> CloseEvent.t -> unit) =
      fun (x5651 : 'tags this) ->
        fun (x5652 : CloseEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5651) "close"
            (CloseEvent.t_to_js x5652)
    let (get_error : 'tags this -> Event.t) =
      fun (x5654 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5654) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x5656 : 'tags this) ->
        fun (x5657 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5656) "error"
            (Event.t_to_js x5657)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5659 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5659) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5661 : 'tags this) ->
        fun (x5662 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5661) "message"
            (MessageEvent.t_0_to_js x5662)
    let (get_open : 'tags this -> Event.t) =
      fun (x5664 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5664) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x5666 : 'tags this) ->
        fun (x5667 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5666) "open"
            (Event.t_to_js x5667)
    let cast_from = Obj.magic
  end
module PromiseRejectionEventInit =
  struct
    type t = [ `EventInit  | `PromiseRejectionEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5670 : Ojs.t) -> t_of_js x5670
    and t_0_to_js : t_0 -> Ojs.t = fun (x5669 : t) -> t_to_js x5669
    type tags = [ `EventInit  | `PromiseRejectionEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5673 : Ojs.t) -> intf_of_js __tags_of_js x5673
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5671 : __tags intf) -> intf_to_js __tags_to_js x5671
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x5675 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5675) "promise")
    let (set_promise : 'tags this -> any Promise.t_1 -> unit) =
      fun (x5678 : 'tags this) ->
        fun (x5679 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5678) "promise"
            (Promise.t_1_to_js any_to_js x5679)
    let (get_reason : 'tags this -> any) =
      fun (x5682 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5682) "reason")
    let (set_reason : 'tags this -> any -> unit) =
      fun (x5684 : 'tags this) ->
        fun (x5685 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5684) "reason"
            (any_to_js x5685)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface81:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PromiseRejectionEvent.t
                         val set_prototype :
                           t -> PromiseRejectionEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               eventInitDict:PromiseRejectionEventInit.t ->
                                 PromiseRejectionEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5688 : Ojs.t) -> x5688
    and t_to_js : t -> Ojs.t = fun (x5687 : Ojs.t) -> x5687
    let (get_prototype : t -> PromiseRejectionEvent.t) =
      fun (x5689 : t) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x5689) "prototype")
    let (set_prototype : t -> PromiseRejectionEvent.t -> unit) =
      fun (x5690 : t) ->
        fun (x5691 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x5690) "prototype"
            (PromiseRejectionEvent.t_to_js x5691)
    let (create :
      t ->
        type_:string ->
          eventInitDict:PromiseRejectionEventInit.t ->
            PromiseRejectionEvent.t)
      =
      fun (x5694 : t) ->
        fun ~type_:(x5692 : string) ->
          fun ~eventInitDict:(x5693 : PromiseRejectionEventInit.t) ->
            PromiseRejectionEvent.t_of_js
              (Ojs.new_obj (t_to_js x5694)
                 [|(Ojs.string_to_js x5692);(PromiseRejectionEventInit.t_to_js
                                               x5693)|])
  end
 and
  PromiseRejectionEvent:sig
                          type t = [ `Event  | `PromiseRejectionEvent ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags = [ `Event  | `PromiseRejectionEvent ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags = [ `Event  | `PromiseRejectionEvent ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags =
                                        [> `PromiseRejectionEvent ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val get_promise : 'tags this -> any Promise.t_1
                          val get_reason : 'tags this -> any
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create :
                            type_:string ->
                              eventInitDict:PromiseRejectionEventInit.t -> t
                        end =
  struct
    type t = [ `Event  | `PromiseRejectionEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5696 : Ojs.t) -> t_of_js x5696
    and t_0_to_js : t_0 -> Ojs.t = fun (x5695 : t) -> t_to_js x5695
    type tags = [ `Event  | `PromiseRejectionEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5699 : Ojs.t) -> intf_of_js __tags_of_js x5699
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5697 : __tags intf) -> intf_to_js __tags_to_js x5697
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x5701 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5701) "promise")
    let (get_reason : 'tags this -> any) =
      fun (x5704 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5704) "reason")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
             "prototype")
    let (create :
      type_:string -> eventInitDict:PromiseRejectionEventInit.t -> t) =
      fun ~type_:(x5706 : string) ->
        fun ~eventInitDict:(x5707 : PromiseRejectionEventInit.t) ->
          t_of_js
            (Ojs.new_obj
               (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
               [|(Ojs.string_to_js x5706);(PromiseRejectionEventInit.t_to_js
                                             x5707)|])
  end
module WorkerGlobalScopeEventMap =
  struct
    type t = [ `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5709 : Ojs.t) -> t_of_js x5709
    and t_0_to_js : t_0 -> Ojs.t = fun (x5708 : t) -> t_to_js x5708
    type tags = [ `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5712 : Ojs.t) -> intf_of_js __tags_of_js x5712
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5710 : __tags intf) -> intf_to_js __tags_to_js x5710
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x5714 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5714) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x5716 : 'tags this) ->
        fun (x5717 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5716) "error"
            (ErrorEvent.t_to_js x5717)
    let (get_languagechange : 'tags this -> Event.t) =
      fun (x5719 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5719) "languagechange")
    let (set_languagechange : 'tags this -> Event.t -> unit) =
      fun (x5721 : 'tags this) ->
        fun (x5722 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5721) "languagechange"
            (Event.t_to_js x5722)
    let (get_offline : 'tags this -> Event.t) =
      fun (x5724 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5724) "offline")
    let (set_offline : 'tags this -> Event.t -> unit) =
      fun (x5726 : 'tags this) ->
        fun (x5727 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5726) "offline"
            (Event.t_to_js x5727)
    let (get_online : 'tags this -> Event.t) =
      fun (x5729 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5729) "online")
    let (set_online : 'tags this -> Event.t -> unit) =
      fun (x5731 : 'tags this) ->
        fun (x5732 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5731) "online"
            (Event.t_to_js x5732)
    let (get_rejectionhandled : 'tags this -> PromiseRejectionEvent.t) =
      fun (x5734 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5734) "rejectionhandled")
    let (set_rejectionhandled :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x5736 : 'tags this) ->
        fun (x5737 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5736) "rejectionhandled"
            (PromiseRejectionEvent.t_to_js x5737)
    let (get_unhandledrejection : 'tags this -> PromiseRejectionEvent.t) =
      fun (x5739 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5739)
             "unhandledrejection")
    let (set_unhandledrejection :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x5741 : 'tags this) ->
        fun (x5742 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5741)
            "unhandledrejection" (PromiseRejectionEvent.t_to_js x5742)
    let cast_from = Obj.magic
  end
module SharedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5745 : Ojs.t) -> t_of_js x5745
    and t_0_to_js : t_0 -> Ojs.t = fun (x5744 : t) -> t_to_js x5744
    type tags =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5748 : Ojs.t) -> intf_of_js __tags_of_js x5748
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5746 : __tags intf) -> intf_to_js __tags_to_js x5746
    let (get_connect : 'tags this -> MessageEvent.t_0) =
      fun (x5750 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5750) "connect")
    let (set_connect : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5752 : 'tags this) ->
        fun (x5753 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5752) "connect"
            (MessageEvent.t_0_to_js x5753)
    let cast_from = Obj.magic
  end
module ServiceWorkerRegistrationEventMap =
  struct
    type t = [ `ServiceWorkerRegistrationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5756 : Ojs.t) -> t_of_js x5756
    and t_0_to_js : t_0 -> Ojs.t = fun (x5755 : t) -> t_to_js x5755
    type tags = [ `ServiceWorkerRegistrationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistrationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5759 : Ojs.t) -> intf_of_js __tags_of_js x5759
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5757 : __tags intf) -> intf_to_js __tags_to_js x5757
    let (get_updatefound : 'tags this -> Event.t) =
      fun (x5761 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5761) "updatefound")
    let (set_updatefound : 'tags this -> Event.t -> unit) =
      fun (x5763 : 'tags this) ->
        fun (x5764 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5763) "updatefound"
            (Event.t_to_js x5764)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface84:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PushMessageData.t
                         val set_prototype : t -> PushMessageData.t -> unit
                         val create : t -> PushMessageData.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5767 : Ojs.t) -> x5767
    and t_to_js : t -> Ojs.t = fun (x5766 : Ojs.t) -> x5766
    let (get_prototype : t -> PushMessageData.t) =
      fun (x5768 : t) ->
        PushMessageData.t_of_js
          (Ojs.get_prop_ascii (t_to_js x5768) "prototype")
    let (set_prototype : t -> PushMessageData.t -> unit) =
      fun (x5769 : t) ->
        fun (x5770 : PushMessageData.t) ->
          Ojs.set_prop_ascii (t_to_js x5769) "prototype"
            (PushMessageData.t_to_js x5770)
    let (create : t -> PushMessageData.t) =
      fun (x5771 : t) ->
        PushMessageData.t_of_js (Ojs.new_obj (t_to_js x5771) [||])
  end
 and
  PushMessageData:sig
                    type t = [ `PushMessageData ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `PushMessageData ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `PushMessageData ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `PushMessageData ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val arrayBuffer : 'tags this -> ArrayBuffer.t_0
                    val blob : 'tags this -> Blob.t
                    val json : 'tags this -> any
                    val text : 'tags this -> string
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create : unit -> t
                  end =
  struct
    type t = [ `PushMessageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5773 : Ojs.t) -> t_of_js x5773
    and t_0_to_js : t_0 -> Ojs.t = fun (x5772 : t) -> t_to_js x5772
    type tags = [ `PushMessageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushMessageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5776 : Ojs.t) -> intf_of_js __tags_of_js x5776
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5774 : __tags intf) -> intf_to_js __tags_to_js x5774
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0) =
      fun (x5778 : 'tags this) ->
        ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x5778) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t) =
      fun (x5780 : 'tags this) ->
        Blob.t_of_js (Ojs.call (this_to_js Obj.magic x5780) "blob" [||])
    let (json : 'tags this -> any) =
      fun (x5782 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x5782) "json" [||])
    let (text : 'tags this -> string) =
      fun (x5784 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x5784) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushMessageData") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushMessageData") [||])
  end
module PushMessageDataInit =
  struct
    type t = BufferSource.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x5788 : Ojs.t) -> or_string_of_js BufferSource.t_of_js x5788
    and t_to_js : t -> Ojs.t =
      fun (x5786 : BufferSource.t or_string) ->
        or_string_to_js BufferSource.t_to_js x5786
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5791 : Ojs.t) -> t_of_js x5791
    and t_0_to_js : t_0 -> Ojs.t = fun (x5790 : t) -> t_to_js x5790
  end
module ExtendableEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5793 : Ojs.t) -> t_of_js x5793
    and t_0_to_js : t_0 -> Ojs.t = fun (x5792 : t) -> t_to_js x5792
    type tags = [ `EventInit  | `ExtendableEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5796 : Ojs.t) -> intf_of_js __tags_of_js x5796
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5794 : __tags intf) -> intf_to_js __tags_to_js x5794
    let cast_from = Obj.magic
  end
module PushEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5799 : Ojs.t) -> t_of_js x5799
    and t_0_to_js : t_0 -> Ojs.t = fun (x5798 : t) -> t_to_js x5798
    type tags = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5802 : Ojs.t) -> intf_of_js __tags_of_js x5802
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5800 : __tags intf) -> intf_to_js __tags_to_js x5800
    let (get_data : 'tags this -> PushMessageDataInit.t) =
      fun (x5804 : 'tags this) ->
        PushMessageDataInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5804) "data")
    let (set_data : 'tags this -> PushMessageDataInit.t -> unit) =
      fun (x5806 : 'tags this) ->
        fun (x5807 : PushMessageDataInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5806) "data"
            (PushMessageDataInit.t_to_js x5807)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface31:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ExtendableEvent.t
                         val set_prototype : t -> ExtendableEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:ExtendableEventInit.t ->
                                 unit -> ExtendableEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5810 : Ojs.t) -> x5810
    and t_to_js : t -> Ojs.t = fun (x5809 : Ojs.t) -> x5809
    let (get_prototype : t -> ExtendableEvent.t) =
      fun (x5811 : t) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x5811) "prototype")
    let (set_prototype : t -> ExtendableEvent.t -> unit) =
      fun (x5812 : t) ->
        fun (x5813 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x5812) "prototype"
            (ExtendableEvent.t_to_js x5813)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:ExtendableEventInit.t -> unit -> ExtendableEvent.t)
      =
      fun (x5818 : t) ->
        fun ~type_:(x5814 : string) ->
          fun ?eventInitDict:(x5815 : ExtendableEventInit.t option) ->
            fun () ->
              ExtendableEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x5818)
                   (let x5816 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5816 "push" [|(Ojs.string_to_js x5814)|]);
                    (match x5815 with
                     | Some x5817 ->
                         ignore
                           (Ojs.call x5816 "push"
                              [|(ExtendableEventInit.t_to_js x5817)|])
                     | None -> ());
                    x5816))
  end
 and
  ExtendableEvent:sig
                    type t = [ `Event  | `ExtendableEvent ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `Event  | `ExtendableEvent ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `Event  | `ExtendableEvent ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `ExtendableEvent ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val waitUntil : 'tags this -> f:any -> unit
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create :
                      type_:string ->
                        ?eventInitDict:ExtendableEventInit.t -> unit -> t
                  end =
  struct
    type t = [ `Event  | `ExtendableEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5820 : Ojs.t) -> t_of_js x5820
    and t_0_to_js : t_0 -> Ojs.t = fun (x5819 : t) -> t_to_js x5819
    type tags = [ `Event  | `ExtendableEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5823 : Ojs.t) -> intf_of_js __tags_of_js x5823
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5821 : __tags intf) -> intf_to_js __tags_to_js x5821
    let (waitUntil : 'tags this -> f:any -> unit) =
      fun (x5826 : 'tags this) ->
        fun ~f:(x5825 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x5826) "waitUntil"
               [|(any_to_js x5825)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableEvent") "prototype")
    let (create :
      type_:string -> ?eventInitDict:ExtendableEventInit.t -> unit -> t) =
      fun ~type_:(x5828 : string) ->
        fun ?eventInitDict:(x5829 : ExtendableEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableEvent")
                 (let x5830 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5830 "push" [|(Ojs.string_to_js x5828)|]);
                  (match x5829 with
                   | Some x5831 ->
                       ignore
                         (Ojs.call x5830 "push"
                            [|(ExtendableEventInit.t_to_js x5831)|])
                   | None -> ());
                  x5830))
  end
module rec
  AnonymousInterface82:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PushEvent.t
                         val set_prototype : t -> PushEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:PushEventInit.t ->
                                 unit -> PushEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5833 : Ojs.t) -> x5833
    and t_to_js : t -> Ojs.t = fun (x5832 : Ojs.t) -> x5832
    let (get_prototype : t -> PushEvent.t) =
      fun (x5834 : t) ->
        PushEvent.t_of_js (Ojs.get_prop_ascii (t_to_js x5834) "prototype")
    let (set_prototype : t -> PushEvent.t -> unit) =
      fun (x5835 : t) ->
        fun (x5836 : PushEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x5835) "prototype"
            (PushEvent.t_to_js x5836)
    let (create :
      t ->
        type_:string -> ?eventInitDict:PushEventInit.t -> unit -> PushEvent.t)
      =
      fun (x5841 : t) ->
        fun ~type_:(x5837 : string) ->
          fun ?eventInitDict:(x5838 : PushEventInit.t option) ->
            fun () ->
              PushEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x5841)
                   (let x5839 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5839 "push" [|(Ojs.string_to_js x5837)|]);
                    (match x5838 with
                     | Some x5840 ->
                         ignore
                           (Ojs.call x5839 "push"
                              [|(PushEventInit.t_to_js x5840)|])
                     | None -> ());
                    x5839))
  end
 and
  PushEvent:sig
              type t = [ `Event  | `ExtendableEvent  | `PushEvent ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem
                type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_data : 'tags this -> PushMessageData.t or_null
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create :
                type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t
            end =
  struct
    type t = [ `Event  | `ExtendableEvent  | `PushEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5843 : Ojs.t) -> t_of_js x5843
    and t_0_to_js : t_0 -> Ojs.t = fun (x5842 : t) -> t_to_js x5842
    type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5846 : Ojs.t) -> intf_of_js __tags_of_js x5846
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5844 : __tags intf) -> intf_to_js __tags_to_js x5844
    let (get_data : 'tags this -> PushMessageData.t or_null) =
      fun (x5848 : 'tags this) ->
        or_null_of_js PushMessageData.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5848) "data")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t) =
      fun ~type_:(x5851 : string) ->
        fun ?eventInitDict:(x5852 : PushEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "PushEvent")
                 (let x5853 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5853 "push" [|(Ojs.string_to_js x5851)|]);
                  (match x5852 with
                   | Some x5854 ->
                       ignore
                         (Ojs.call x5853 "push"
                            [|(PushEventInit.t_to_js x5854)|])
                   | None -> ());
                  x5853))
  end
module NotificationPermission =
  struct
    type t = [ `L_s57_default  | `L_s58_denied  | `L_s82_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5856 : Ojs.t) ->
        let x5857 = x5856 in
        match Ojs.string_of_js x5857 with
        | "default" -> `L_s57_default
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5855 : [ `L_s57_default  | `L_s58_denied  | `L_s82_granted ]) ->
        match x5855 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5859 : Ojs.t) -> t_of_js x5859
    and t_0_to_js : t_0 -> Ojs.t = fun (x5858 : t) -> t_to_js x5858
  end
module VibratePattern =
  struct
    type t = float list or_number
    let rec t_of_js : Ojs.t -> t =
      fun (x5863 : Ojs.t) ->
        or_number_of_js
          (fun (x5864 : Ojs.t) -> Ojs.list_of_js Ojs.float_of_js x5864) x5863
    and t_to_js : t -> Ojs.t =
      fun (x5860 : float list or_number) ->
        or_number_to_js
          (fun (x5861 : float list) -> Ojs.list_to_js Ojs.float_to_js x5861)
          x5860
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5867 : Ojs.t) -> t_of_js x5867
    and t_0_to_js : t_0 -> Ojs.t = fun (x5866 : t) -> t_to_js x5866
  end
module NotificationAction =
  struct
    type t = [ `NotificationAction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5869 : Ojs.t) -> t_of_js x5869
    and t_0_to_js : t_0 -> Ojs.t = fun (x5868 : t) -> t_to_js x5868
    type tags = [ `NotificationAction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationAction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5872 : Ojs.t) -> intf_of_js __tags_of_js x5872
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5870 : __tags intf) -> intf_to_js __tags_to_js x5870
    let (get_action : 'tags this -> string) =
      fun (x5874 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5874) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x5876 : 'tags this) ->
        fun (x5877 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5876) "action"
            (Ojs.string_to_js x5877)
    let (get_icon : 'tags this -> string) =
      fun (x5879 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5879) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x5881 : 'tags this) ->
        fun (x5882 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5881) "icon"
            (Ojs.string_to_js x5882)
    let (get_title : 'tags this -> string) =
      fun (x5884 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5884) "title")
    let (set_title : 'tags this -> string -> unit) =
      fun (x5886 : 'tags this) ->
        fun (x5887 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5886) "title"
            (Ojs.string_to_js x5887)
    let cast_from = Obj.magic
  end
module DOMTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5890 : Ojs.t) -> Ojs.float_of_js x5890
    and t_to_js : t -> Ojs.t = fun (x5889 : float) -> Ojs.float_to_js x5889
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5892 : Ojs.t) -> t_of_js x5892
    and t_0_to_js : t_0 -> Ojs.t = fun (x5891 : t) -> t_to_js x5891
  end
module NotificationDirection =
  struct
    type t = [ `L_s41_auto  | `L_s108_ltr  | `L_s171_rtl ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5894 : Ojs.t) ->
        let x5895 = x5894 in
        match Ojs.string_of_js x5895 with
        | "auto" -> `L_s41_auto
        | "ltr" -> `L_s108_ltr
        | "rtl" -> `L_s171_rtl
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5893 : [ `L_s41_auto  | `L_s108_ltr  | `L_s171_rtl ]) ->
        match x5893 with
        | `L_s41_auto -> Ojs.string_to_js "auto"
        | `L_s108_ltr -> Ojs.string_to_js "ltr"
        | `L_s171_rtl -> Ojs.string_to_js "rtl"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5897 : Ojs.t) -> t_of_js x5897
    and t_0_to_js : t_0 -> Ojs.t = fun (x5896 : t) -> t_to_js x5896
  end
module NotificationOptions =
  struct
    type t = [ `NotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5899 : Ojs.t) -> t_of_js x5899
    and t_0_to_js : t_0 -> Ojs.t = fun (x5898 : t) -> t_to_js x5898
    type tags = [ `NotificationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5902 : Ojs.t) -> intf_of_js __tags_of_js x5902
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5900 : __tags intf) -> intf_to_js __tags_to_js x5900
    let (get_actions : 'tags this -> NotificationAction.t list) =
      fun (x5904 : 'tags this) ->
        Ojs.list_of_js NotificationAction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5904) "actions")
    let (set_actions : 'tags this -> NotificationAction.t list -> unit) =
      fun (x5907 : 'tags this) ->
        fun (x5908 : NotificationAction.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5907) "actions"
            (Ojs.list_to_js NotificationAction.t_to_js x5908)
    let (get_badge : 'tags this -> string) =
      fun (x5911 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5911) "badge")
    let (set_badge : 'tags this -> string -> unit) =
      fun (x5913 : 'tags this) ->
        fun (x5914 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5913) "badge"
            (Ojs.string_to_js x5914)
    let (get_body : 'tags this -> string) =
      fun (x5916 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5916) "body")
    let (set_body : 'tags this -> string -> unit) =
      fun (x5918 : 'tags this) ->
        fun (x5919 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5918) "body"
            (Ojs.string_to_js x5919)
    let (get_data : 'tags this -> any) =
      fun (x5921 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5921) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x5923 : 'tags this) ->
        fun (x5924 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5923) "data"
            (any_to_js x5924)
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x5926 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5926) "dir")
    let (set_dir : 'tags this -> NotificationDirection.t -> unit) =
      fun (x5928 : 'tags this) ->
        fun (x5929 : NotificationDirection.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5928) "dir"
            (NotificationDirection.t_to_js x5929)
    let (get_icon : 'tags this -> string) =
      fun (x5931 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5931) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x5933 : 'tags this) ->
        fun (x5934 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5933) "icon"
            (Ojs.string_to_js x5934)
    let (get_image : 'tags this -> string) =
      fun (x5936 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5936) "image")
    let (set_image : 'tags this -> string -> unit) =
      fun (x5938 : 'tags this) ->
        fun (x5939 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5938) "image"
            (Ojs.string_to_js x5939)
    let (get_lang : 'tags this -> string) =
      fun (x5941 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5941) "lang")
    let (set_lang : 'tags this -> string -> unit) =
      fun (x5943 : 'tags this) ->
        fun (x5944 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5943) "lang"
            (Ojs.string_to_js x5944)
    let (get_renotify : 'tags this -> bool) =
      fun (x5946 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5946) "renotify")
    let (set_renotify : 'tags this -> bool -> unit) =
      fun (x5948 : 'tags this) ->
        fun (x5949 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5948) "renotify"
            (Ojs.bool_to_js x5949)
    let (get_requireInteraction : 'tags this -> bool) =
      fun (x5951 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5951)
             "requireInteraction")
    let (set_requireInteraction : 'tags this -> bool -> unit) =
      fun (x5953 : 'tags this) ->
        fun (x5954 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5953)
            "requireInteraction" (Ojs.bool_to_js x5954)
    let (get_silent : 'tags this -> bool) =
      fun (x5956 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5956) "silent")
    let (set_silent : 'tags this -> bool -> unit) =
      fun (x5958 : 'tags this) ->
        fun (x5959 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5958) "silent"
            (Ojs.bool_to_js x5959)
    let (get_tag : 'tags this -> string) =
      fun (x5961 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5961) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x5963 : 'tags this) ->
        fun (x5964 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5963) "tag"
            (Ojs.string_to_js x5964)
    let (get_timestamp : 'tags this -> DOMTimeStamp.t) =
      fun (x5966 : 'tags this) ->
        DOMTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5966) "timestamp")
    let (set_timestamp : 'tags this -> DOMTimeStamp.t -> unit) =
      fun (x5968 : 'tags this) ->
        fun (x5969 : DOMTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5968) "timestamp"
            (DOMTimeStamp.t_to_js x5969)
    let (get_vibrate : 'tags this -> VibratePattern.t) =
      fun (x5971 : 'tags this) ->
        VibratePattern.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5971) "vibrate")
    let (set_vibrate : 'tags this -> VibratePattern.t -> unit) =
      fun (x5973 : 'tags this) ->
        fun (x5974 : VibratePattern.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5973) "vibrate"
            (VibratePattern.t_to_js x5974)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface67:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Notification.t
                         val set_prototype : t -> Notification.t -> unit
                         val create :
                           t ->
                             title:string ->
                               ?options:NotificationOptions.t ->
                                 unit -> Notification.t
                         val get_permission : t -> NotificationPermission.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5977 : Ojs.t) -> x5977
    and t_to_js : t -> Ojs.t = fun (x5976 : Ojs.t) -> x5976
    let (get_prototype : t -> Notification.t) =
      fun (x5978 : t) ->
        Notification.t_of_js (Ojs.get_prop_ascii (t_to_js x5978) "prototype")
    let (set_prototype : t -> Notification.t -> unit) =
      fun (x5979 : t) ->
        fun (x5980 : Notification.t) ->
          Ojs.set_prop_ascii (t_to_js x5979) "prototype"
            (Notification.t_to_js x5980)
    let (create :
      t ->
        title:string ->
          ?options:NotificationOptions.t -> unit -> Notification.t)
      =
      fun (x5985 : t) ->
        fun ~title:(x5981 : string) ->
          fun ?options:(x5982 : NotificationOptions.t option) ->
            fun () ->
              Notification.t_of_js
                (Ojs.new_obj_arr (t_to_js x5985)
                   (let x5983 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5983 "push" [|(Ojs.string_to_js x5981)|]);
                    (match x5982 with
                     | Some x5984 ->
                         ignore
                           (Ojs.call x5983 "push"
                              [|(NotificationOptions.t_to_js x5984)|])
                     | None -> ());
                    x5983))
    let (get_permission : t -> NotificationPermission.t) =
      fun (x5986 : t) ->
        NotificationPermission.t_of_js
          (Ojs.get_prop_ascii (t_to_js x5986) "permission")
  end
 and
  Notification:sig
                 type t = [ `EventTarget  | `Notification ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `EventTarget  | `Notification ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `EventTarget  | `Notification ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `Notification ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val get_body : 'tags this -> string
                 val get_data : 'tags this -> any
                 val get_dir : 'tags this -> NotificationDirection.t
                 val get_icon : 'tags this -> string
                 val get_lang : 'tags this -> string
                 val get_onclick :
                   'tags this -> (this:t -> ev:Event.t -> any) or_null
                 val set_onclick :
                   'tags this ->
                     (this:t -> ev:Event.t -> any) or_null -> unit
                 val get_onclose :
                   'tags this -> (this:t -> ev:Event.t -> any) or_null
                 val set_onclose :
                   'tags this ->
                     (this:t -> ev:Event.t -> any) or_null -> unit
                 val get_onerror :
                   'tags this -> (this:t -> ev:Event.t -> any) or_null
                 val set_onerror :
                   'tags this ->
                     (this:t -> ev:Event.t -> any) or_null -> unit
                 val get_onshow :
                   'tags this -> (this:t -> ev:Event.t -> any) or_null
                 val set_onshow :
                   'tags this ->
                     (this:t -> ev:Event.t -> any) or_null -> unit
                 val get_tag : 'tags this -> string
                 val get_title : 'tags this -> string
                 val close : 'tags this -> unit
                 val addEventListener :
                   'tags this ->
                     type_:'K ->
                       listener:(this:t -> ev:any -> any) ->
                         ?options:AddEventListenerOptions.t or_boolean ->
                           unit -> unit
                 val addEventListener' :
                   'tags this ->
                     type_:string ->
                       listener:EventListenerOrEventListenerObject.t ->
                         ?options:AddEventListenerOptions.t or_boolean ->
                           unit -> unit
                 val removeEventListener :
                   'tags this ->
                     type_:'K ->
                       listener:(this:t -> ev:any -> any) ->
                         ?options:EventListenerOptions.t or_boolean ->
                           unit -> unit
                 val removeEventListener' :
                   'tags this ->
                     type_:string ->
                       listener:EventListenerOrEventListenerObject.t ->
                         ?options:EventListenerOptions.t or_boolean ->
                           unit -> unit
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create :
                   title:string ->
                     ?options:NotificationOptions.t -> unit -> t
                 val permission : unit -> NotificationPermission.t
               end =
  struct
    type t = [ `EventTarget  | `Notification ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5988 : Ojs.t) -> t_of_js x5988
    and t_0_to_js : t_0 -> Ojs.t = fun (x5987 : t) -> t_to_js x5987
    type tags = [ `EventTarget  | `Notification ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Notification ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5991 : Ojs.t) -> intf_of_js __tags_of_js x5991
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5989 : __tags intf) -> intf_to_js __tags_to_js x5989
    let (get_body : 'tags this -> string) =
      fun (x5993 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5993) "body")
    let (get_data : 'tags this -> any) =
      fun (x5995 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5995) "data")
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x5997 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5997) "dir")
    let (get_icon : 'tags this -> string) =
      fun (x5999 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5999) "icon")
    let (get_lang : 'tags this -> string) =
      fun (x6001 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6001) "lang")
    let (get_onclick : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x6003 : 'tags this) ->
        or_null_of_js
          (fun (x6005 : Ojs.t) ->
             fun ~this:(x6006 : t) ->
               fun ~ev:(x6007 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6005 [|(t_to_js x6006);(Event.t_to_js x6007)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6003) "onclick")
    let (set_onclick :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x6008 : 'tags this) ->
        fun (x6009 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6008) "onclick"
            (or_null_to_js
               (fun (x6010 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6011 : Ojs.t) ->
                       fun (x6012 : Ojs.t) ->
                         any_to_js
                           (x6010 ~this:(t_of_js x6011)
                              ~ev:(Event.t_of_js x6012)))) x6009)
    let (get_onclose : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x6014 : 'tags this) ->
        or_null_of_js
          (fun (x6016 : Ojs.t) ->
             fun ~this:(x6017 : t) ->
               fun ~ev:(x6018 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6016 [|(t_to_js x6017);(Event.t_to_js x6018)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6014) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x6019 : 'tags this) ->
        fun (x6020 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6019) "onclose"
            (or_null_to_js
               (fun (x6021 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6022 : Ojs.t) ->
                       fun (x6023 : Ojs.t) ->
                         any_to_js
                           (x6021 ~this:(t_of_js x6022)
                              ~ev:(Event.t_of_js x6023)))) x6020)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x6025 : 'tags this) ->
        or_null_of_js
          (fun (x6027 : Ojs.t) ->
             fun ~this:(x6028 : t) ->
               fun ~ev:(x6029 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6027 [|(t_to_js x6028);(Event.t_to_js x6029)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6025) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x6030 : 'tags this) ->
        fun (x6031 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6030) "onerror"
            (or_null_to_js
               (fun (x6032 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6033 : Ojs.t) ->
                       fun (x6034 : Ojs.t) ->
                         any_to_js
                           (x6032 ~this:(t_of_js x6033)
                              ~ev:(Event.t_of_js x6034)))) x6031)
    let (get_onshow : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x6036 : 'tags this) ->
        or_null_of_js
          (fun (x6038 : Ojs.t) ->
             fun ~this:(x6039 : t) ->
               fun ~ev:(x6040 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6038 [|(t_to_js x6039);(Event.t_to_js x6040)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6036) "onshow")
    let (set_onshow :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x6041 : 'tags this) ->
        fun (x6042 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6041) "onshow"
            (or_null_to_js
               (fun (x6043 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6044 : Ojs.t) ->
                       fun (x6045 : Ojs.t) ->
                         any_to_js
                           (x6043 ~this:(t_of_js x6044)
                              ~ev:(Event.t_of_js x6045)))) x6042)
    let (get_tag : 'tags this -> string) =
      fun (x6047 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6047) "tag")
    let (get_title : 'tags this -> string) =
      fun (x6049 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6049) "title")
    let (close : 'tags this -> unit) =
      fun (x6051 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6051) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6061 : 'tags this) ->
        fun ~type_:(x6053 : 'K) ->
          fun ~listener:(x6054 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6055 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6063 = this_to_js Obj.magic x6061 in
                   Ojs.call (Ojs.get_prop_ascii x6063 "addEventListener")
                     "apply"
                     [|x6063;((let x6056 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6056 "push" [|(Obj.magic x6053)|]);
                               ignore
                                 (Ojs.call x6056 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6059 : Ojs.t) ->
                                            fun (x6060 : Ojs.t) ->
                                              any_to_js
                                                (x6054 ~this:(t_of_js x6059)
                                                   ~ev:(any_of_js x6060))))|]);
                               (match x6055 with
                                | Some x6057 ->
                                    ignore
                                      (Ojs.call x6056 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x6057)|])
                                | None -> ());
                               x6056))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6070 : 'tags this) ->
        fun ~type_:(x6064 : string) ->
          fun ~listener:(x6065 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6066 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6072 = this_to_js Obj.magic x6070 in
                   Ojs.call (Ojs.get_prop_ascii x6072 "addEventListener")
                     "apply"
                     [|x6072;((let x6067 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6067 "push"
                                    [|(Ojs.string_to_js x6064)|]);
                               ignore
                                 (Ojs.call x6067 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6065)|]);
                               (match x6066 with
                                | Some x6068 ->
                                    ignore
                                      (Ojs.call x6067 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x6068)|])
                                | None -> ());
                               x6067))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6081 : 'tags this) ->
        fun ~type_:(x6073 : 'K) ->
          fun ~listener:(x6074 : this:t -> ev:any -> any) ->
            fun ?options:(x6075 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6083 = this_to_js Obj.magic x6081 in
                   Ojs.call (Ojs.get_prop_ascii x6083 "removeEventListener")
                     "apply"
                     [|x6083;((let x6076 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6076 "push" [|(Obj.magic x6073)|]);
                               ignore
                                 (Ojs.call x6076 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6079 : Ojs.t) ->
                                            fun (x6080 : Ojs.t) ->
                                              any_to_js
                                                (x6074 ~this:(t_of_js x6079)
                                                   ~ev:(any_of_js x6080))))|]);
                               (match x6075 with
                                | Some x6077 ->
                                    ignore
                                      (Ojs.call x6076 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x6077)|])
                                | None -> ());
                               x6076))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6090 : 'tags this) ->
        fun ~type_:(x6084 : string) ->
          fun ~listener:(x6085 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x6086 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6092 = this_to_js Obj.magic x6090 in
                   Ojs.call (Ojs.get_prop_ascii x6092 "removeEventListener")
                     "apply"
                     [|x6092;((let x6087 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6087 "push"
                                    [|(Ojs.string_to_js x6084)|]);
                               ignore
                                 (Ojs.call x6087 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6085)|]);
                               (match x6086 with
                                | Some x6088 ->
                                    ignore
                                      (Ojs.call x6087 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x6088)|])
                                | None -> ());
                               x6087))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "prototype")
    let (create :
      title:string -> ?options:NotificationOptions.t -> unit -> t) =
      fun ~title:(x6093 : string) ->
        fun ?options:(x6094 : NotificationOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Notification")
                 (let x6095 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x6095 "push" [|(Ojs.string_to_js x6093)|]);
                  (match x6094 with
                   | Some x6096 ->
                       ignore
                         (Ojs.call x6095 "push"
                            [|(NotificationOptions.t_to_js x6096)|])
                   | None -> ());
                  x6095))
    let (permission : unit -> NotificationPermission.t) =
      fun () ->
        NotificationPermission.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "permission")
  end
module NotificationEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6098 : Ojs.t) -> t_of_js x6098
    and t_0_to_js : t_0 -> Ojs.t = fun (x6097 : t) -> t_to_js x6097
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6101 : Ojs.t) -> intf_of_js __tags_of_js x6101
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6099 : __tags intf) -> intf_to_js __tags_to_js x6099
    let (get_action : 'tags this -> string) =
      fun (x6103 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6103) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x6105 : 'tags this) ->
        fun (x6106 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6105) "action"
            (Ojs.string_to_js x6106)
    let (get_notification : 'tags this -> Notification.t) =
      fun (x6108 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6108) "notification")
    let (set_notification : 'tags this -> Notification.t -> unit) =
      fun (x6110 : 'tags this) ->
        fun (x6111 : Notification.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6110) "notification"
            (Notification.t_to_js x6111)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface68:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> NotificationEvent.t
                         val set_prototype : t -> NotificationEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               eventInitDict:NotificationEventInit.t ->
                                 NotificationEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6114 : Ojs.t) -> x6114
    and t_to_js : t -> Ojs.t = fun (x6113 : Ojs.t) -> x6113
    let (get_prototype : t -> NotificationEvent.t) =
      fun (x6115 : t) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x6115) "prototype")
    let (set_prototype : t -> NotificationEvent.t -> unit) =
      fun (x6116 : t) ->
        fun (x6117 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x6116) "prototype"
            (NotificationEvent.t_to_js x6117)
    let (create :
      t ->
        type_:string ->
          eventInitDict:NotificationEventInit.t -> NotificationEvent.t)
      =
      fun (x6120 : t) ->
        fun ~type_:(x6118 : string) ->
          fun ~eventInitDict:(x6119 : NotificationEventInit.t) ->
            NotificationEvent.t_of_js
              (Ojs.new_obj (t_to_js x6120)
                 [|(Ojs.string_to_js x6118);(NotificationEventInit.t_to_js
                                               x6119)|])
  end
 and
  NotificationEvent:sig
                      type t =
                        [ `Event  | `ExtendableEvent  | `NotificationEvent ]
                          intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags =
                        [ `Event  | `ExtendableEvent  | `NotificationEvent ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags =
                          [ `Event  | `ExtendableEvent 
                          | `NotificationEvent ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `NotificationEvent ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_action : 'tags this -> string
                      val get_notification : 'tags this -> Notification.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create :
                        type_:string ->
                          eventInitDict:NotificationEventInit.t -> t
                    end =
  struct
    type t = [ `Event  | `ExtendableEvent  | `NotificationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6122 : Ojs.t) -> t_of_js x6122
    and t_0_to_js : t_0 -> Ojs.t = fun (x6121 : t) -> t_to_js x6121
    type tags = [ `Event  | `ExtendableEvent  | `NotificationEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6125 : Ojs.t) -> intf_of_js __tags_of_js x6125
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6123 : __tags intf) -> intf_to_js __tags_to_js x6123
    let (get_action : 'tags this -> string) =
      fun (x6127 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6127) "action")
    let (get_notification : 'tags this -> Notification.t) =
      fun (x6129 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6129) "notification")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NotificationEvent") "prototype")
    let (create : type_:string -> eventInitDict:NotificationEventInit.t -> t)
      =
      fun ~type_:(x6131 : string) ->
        fun ~eventInitDict:(x6132 : NotificationEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationEvent")
               [|(Ojs.string_to_js x6131);(NotificationEventInit.t_to_js
                                             x6132)|])
  end
module FetchEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6134 : Ojs.t) -> t_of_js x6134
    and t_0_to_js : t_0 -> Ojs.t = fun (x6133 : t) -> t_to_js x6133
    type tags = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6137 : Ojs.t) -> intf_of_js __tags_of_js x6137
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6135 : __tags intf) -> intf_to_js __tags_to_js x6135
    let (get_clientId : 'tags this -> string) =
      fun (x6139 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6139) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x6141 : 'tags this) ->
        fun (x6142 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6141) "clientId"
            (Ojs.string_to_js x6142)
    let (get_handled : 'tags this -> never or_undefined Promise.t_1) =
      fun (x6144 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x6146 : Ojs.t) -> or_undefined_of_js never_of_js x6146)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6144) "handled")
    let (set_handled : 'tags this -> never or_undefined Promise.t_1 -> unit)
      =
      fun (x6148 : 'tags this) ->
        fun (x6149 : never or_undefined Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6148) "handled"
            (Promise.t_1_to_js
               (fun (x6150 : never or_undefined) ->
                  or_undefined_to_js never_to_js x6150) x6149)
    let (get_preloadResponse : 'tags this -> any Promise.t_1) =
      fun (x6153 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6153) "preloadResponse")
    let (set_preloadResponse : 'tags this -> any Promise.t_1 -> unit) =
      fun (x6156 : 'tags this) ->
        fun (x6157 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6156) "preloadResponse"
            (Promise.t_1_to_js any_to_js x6157)
    let (get_replacesClientId : 'tags this -> string) =
      fun (x6160 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6160) "replacesClientId")
    let (set_replacesClientId : 'tags this -> string -> unit) =
      fun (x6162 : 'tags this) ->
        fun (x6163 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6162) "replacesClientId"
            (Ojs.string_to_js x6163)
    let (get_request : 'tags this -> Request.t) =
      fun (x6165 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6165) "request")
    let (set_request : 'tags this -> Request.t -> unit) =
      fun (x6167 : 'tags this) ->
        fun (x6168 : Request.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6167) "request"
            (Request.t_to_js x6168)
    let (get_resultingClientId : 'tags this -> string) =
      fun (x6170 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6170)
             "resultingClientId")
    let (set_resultingClientId : 'tags this -> string -> unit) =
      fun (x6172 : 'tags this) ->
        fun (x6173 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6172) "resultingClientId"
            (Ojs.string_to_js x6173)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface33:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FetchEvent.t
                         val set_prototype : t -> FetchEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               eventInitDict:FetchEventInit.t -> FetchEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6176 : Ojs.t) -> x6176
    and t_to_js : t -> Ojs.t = fun (x6175 : Ojs.t) -> x6175
    let (get_prototype : t -> FetchEvent.t) =
      fun (x6177 : t) ->
        FetchEvent.t_of_js (Ojs.get_prop_ascii (t_to_js x6177) "prototype")
    let (set_prototype : t -> FetchEvent.t -> unit) =
      fun (x6178 : t) ->
        fun (x6179 : FetchEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x6178) "prototype"
            (FetchEvent.t_to_js x6179)
    let (create :
      t -> type_:string -> eventInitDict:FetchEventInit.t -> FetchEvent.t) =
      fun (x6182 : t) ->
        fun ~type_:(x6180 : string) ->
          fun ~eventInitDict:(x6181 : FetchEventInit.t) ->
            FetchEvent.t_of_js
              (Ojs.new_obj (t_to_js x6182)
                 [|(Ojs.string_to_js x6180);(FetchEventInit.t_to_js x6181)|])
  end
 and
  FetchEvent:sig
               type t = [ `Event  | `ExtendableEvent  | `FetchEvent ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem
                 type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `FetchEvent ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_clientId : 'tags this -> string
               val get_handled : 'tags this -> never or_undefined Promise.t_1
               val get_request : 'tags this -> Request.t
               val get_resultingClientId : 'tags this -> string
               val respondWith :
                 'tags this ->
                   r:(Response.t, Response.t PromiseLike.t_1) union2 -> unit
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> eventInitDict:FetchEventInit.t -> t
             end =
  struct
    type t = [ `Event  | `ExtendableEvent  | `FetchEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6184 : Ojs.t) -> t_of_js x6184
    and t_0_to_js : t_0 -> Ojs.t = fun (x6183 : t) -> t_to_js x6183
    type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6187 : Ojs.t) -> intf_of_js __tags_of_js x6187
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6185 : __tags intf) -> intf_to_js __tags_to_js x6185
    let (get_clientId : 'tags this -> string) =
      fun (x6189 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6189) "clientId")
    let (get_handled : 'tags this -> never or_undefined Promise.t_1) =
      fun (x6191 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x6193 : Ojs.t) -> or_undefined_of_js never_of_js x6193)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6191) "handled")
    let (get_request : 'tags this -> Request.t) =
      fun (x6195 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6195) "request")
    let (get_resultingClientId : 'tags this -> string) =
      fun (x6197 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6197)
             "resultingClientId")
    let (respondWith :
      'tags this -> r:(Response.t, Response.t PromiseLike.t_1) union2 -> unit)
      =
      fun (x6203 : 'tags this) ->
        fun ~r:(x6199 : (Response.t, Response.t PromiseLike.t_1) union2) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6203) "respondWith"
               [|(union2_to_js Response.t_to_js
                    (fun (x6201 : Response.t PromiseLike.t_1) ->
                       PromiseLike.t_1_to_js Response.t_to_js x6201) x6199)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FetchEvent")
             "prototype")
    let (create : type_:string -> eventInitDict:FetchEventInit.t -> t) =
      fun ~type_:(x6205 : string) ->
        fun ~eventInitDict:(x6206 : FetchEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FetchEvent")
               [|(Ojs.string_to_js x6205);(FetchEventInit.t_to_js x6206)|])
  end
module FrameType =
  struct
    type t =
      [ `L_s42_auxiliary  | `L_s120_nested  | `L_s128_none 
      | `L_s192_top_level ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6208 : Ojs.t) ->
        let x6209 = x6208 in
        match Ojs.string_of_js x6209 with
        | "auxiliary" -> `L_s42_auxiliary
        | "nested" -> `L_s120_nested
        | "none" -> `L_s128_none
        | "top-level" -> `L_s192_top_level
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x6207 :
          [ `L_s42_auxiliary  | `L_s120_nested  | `L_s128_none 
          | `L_s192_top_level ])
        ->
        match x6207 with
        | `L_s42_auxiliary -> Ojs.string_to_js "auxiliary"
        | `L_s120_nested -> Ojs.string_to_js "nested"
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s192_top_level -> Ojs.string_to_js "top-level"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6211 : Ojs.t) -> t_of_js x6211
    and t_0_to_js : t_0 -> Ojs.t = fun (x6210 : t) -> t_to_js x6210
  end
module ClientTypes =
  struct
    type t =
      [ `L_s35_all  | `L_s176_sharedworker  | `L_s208_window 
      | `L_s209_worker ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6213 : Ojs.t) ->
        let x6214 = x6213 in
        match Ojs.string_of_js x6214 with
        | "all" -> `L_s35_all
        | "sharedworker" -> `L_s176_sharedworker
        | "window" -> `L_s208_window
        | "worker" -> `L_s209_worker
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x6212 :
          [ `L_s35_all  | `L_s176_sharedworker  | `L_s208_window 
          | `L_s209_worker ])
        ->
        match x6212 with
        | `L_s35_all -> Ojs.string_to_js "all"
        | `L_s176_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s208_window -> Ojs.string_to_js "window"
        | `L_s209_worker -> Ojs.string_to_js "worker"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6216 : Ojs.t) -> t_of_js x6216
    and t_0_to_js : t_0 -> Ojs.t = fun (x6215 : t) -> t_to_js x6215
  end
module rec
  AnonymousInterface9:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> Client.t
                        val set_prototype : t -> Client.t -> unit
                        val create : t -> Client.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6218 : Ojs.t) -> x6218
    and t_to_js : t -> Ojs.t = fun (x6217 : Ojs.t) -> x6217
    let (get_prototype : t -> Client.t) =
      fun (x6219 : t) ->
        Client.t_of_js (Ojs.get_prop_ascii (t_to_js x6219) "prototype")
    let (set_prototype : t -> Client.t -> unit) =
      fun (x6220 : t) ->
        fun (x6221 : Client.t) ->
          Ojs.set_prop_ascii (t_to_js x6220) "prototype"
            (Client.t_to_js x6221)
    let (create : t -> Client.t) =
      fun (x6222 : t) -> Client.t_of_js (Ojs.new_obj (t_to_js x6222) [||])
  end
 and
  Client:sig
           type t = [ `Client ] intf
           type t_0 = t
           [@@@js.stop ]
           type tags = [ `Client ]
           type tags_0 = tags
           [@@@js.start ]
           [@@@js.implem type tags = [ `Client ]
             type tags_0 = tags]
           type 'tags this = 'tags intf constraint 'tags = [> `Client ]
           val t_to_js : t -> Ojs.t
           val t_of_js : Ojs.t -> t
           val t_0_to_js : t_0 -> Ojs.t
           val t_0_of_js : Ojs.t -> t_0
           val get_frameType : 'tags this -> FrameType.t
           val get_id : 'tags this -> string
           val get_type : 'tags this -> ClientTypes.t
           val get_url : 'tags this -> string
           val postMessage :
             'tags this ->
               message:any -> transfer:Transferable.t list -> unit
           val postMessage' :
             'tags this ->
               message:any ->
                 ?options:StructuredSerializeOptions.t -> unit -> unit
           val cast_from : 'tags this -> t
           val prototype : unit -> t
           val create : unit -> t
         end =
  struct
    type t = [ `Client ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6224 : Ojs.t) -> t_of_js x6224
    and t_0_to_js : t_0 -> Ojs.t = fun (x6223 : t) -> t_to_js x6223
    type tags = [ `Client ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Client ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6227 : Ojs.t) -> intf_of_js __tags_of_js x6227
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6225 : __tags intf) -> intf_to_js __tags_to_js x6225
    let (get_frameType : 'tags this -> FrameType.t) =
      fun (x6229 : 'tags this) ->
        FrameType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6229) "frameType")
    let (get_id : 'tags this -> string) =
      fun (x6231 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6231) "id")
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x6233 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6233) "type")
    let (get_url : 'tags this -> string) =
      fun (x6235 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6235) "url")
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x6240 : 'tags this) ->
        fun ~message:(x6237 : any) ->
          fun ~transfer:(x6238 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6240) "postMessage"
                 [|(any_to_js x6237);(Ojs.list_to_js Transferable.t_to_js
                                        x6238)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x6246 : 'tags this) ->
        fun ~message:(x6242 : any) ->
          fun ?options:(x6243 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x6248 = this_to_js Obj.magic x6246 in
                 Ojs.call (Ojs.get_prop_ascii x6248 "postMessage") "apply"
                   [|x6248;((let x6244 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6244 "push" [|(any_to_js x6242)|]);
                             (match x6243 with
                              | Some x6245 ->
                                  ignore
                                    (Ojs.call x6244 "push"
                                       [|(StructuredSerializeOptions.t_to_js
                                            x6245)|])
                              | None -> ());
                             x6244))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Client")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Client") [||])
  end
module ExtendableMessageEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6250 : Ojs.t) -> t_of_js x6250
    and t_0_to_js : t_0 -> Ojs.t = fun (x6249 : t) -> t_to_js x6249
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6253 : Ojs.t) -> intf_of_js __tags_of_js x6253
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6251 : __tags intf) -> intf_to_js __tags_to_js x6251
    let (get_data : 'tags this -> any) =
      fun (x6255 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x6255) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x6257 : 'tags this) ->
        fun (x6258 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6257) "data"
            (any_to_js x6258)
    let (get_lastEventId : 'tags this -> string) =
      fun (x6260 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6260) "lastEventId")
    let (set_lastEventId : 'tags this -> string -> unit) =
      fun (x6262 : 'tags this) ->
        fun (x6263 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6262) "lastEventId"
            (Ojs.string_to_js x6263)
    let (get_origin : 'tags this -> string) =
      fun (x6265 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6265) "origin")
    let (set_origin : 'tags this -> string -> unit) =
      fun (x6267 : 'tags this) ->
        fun (x6268 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6267) "origin"
            (Ojs.string_to_js x6268)
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x6270 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6270) "ports")
    let (set_ports : 'tags this -> MessagePort.t list -> unit) =
      fun (x6273 : 'tags this) ->
        fun (x6274 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6273) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x6274)
    let (get_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
          | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s94_installed of ServiceWorker.t 
           | `U_s95_installing of ServiceWorker.t 
           | `U_s146_parsed of ServiceWorker.t 
           | `U_s166_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null)
      =
      fun (x6277 : 'tags this) ->
        or_null_of_js
          (fun (x6279 : Ojs.t) ->
             or__of_js
               (fun (x6280 : Ojs.t) ->
                  union2_of_js
                    (fun (x6281 : Ojs.t) ->
                       let x6282 = x6281 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x6282 "frameType")
                       with
                       | "auxiliary" ->
                           `U_s42_auxiliary (Client.t_of_js x6282)
                       | "nested" -> `U_s120_nested (Client.t_of_js x6282)
                       | "none" -> `U_s128_none (Client.t_of_js x6282)
                       | "top-level" ->
                           `U_s192_top_level (Client.t_of_js x6282)
                       | _ -> assert false)
                    (fun (x6283 : Ojs.t) ->
                       let x6284 = x6283 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x6284 "state")
                       with
                       | "activated" ->
                           `U_s33_activated (ServiceWorker.t_of_js x6284)
                       | "activating" ->
                           `U_s34_activating (ServiceWorker.t_of_js x6284)
                       | "installed" ->
                           `U_s94_installed (ServiceWorker.t_of_js x6284)
                       | "installing" ->
                           `U_s95_installing (ServiceWorker.t_of_js x6284)
                       | "parsed" ->
                           `U_s146_parsed (ServiceWorker.t_of_js x6284)
                       | "redundant" ->
                           `U_s166_redundant (ServiceWorker.t_of_js x6284)
                       | _ -> assert false) x6280) MessagePort.t_of_js x6279)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6277) "source")
    let (set_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
          | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s94_installed of ServiceWorker.t 
           | `U_s95_installing of ServiceWorker.t 
           | `U_s146_parsed of ServiceWorker.t 
           | `U_s166_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null -> unit)
      =
      fun (x6286 : 'tags this) ->
        fun
          (x6287 :
            (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
              | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
               [ `U_s33_activated of ServiceWorker.t 
               | `U_s34_activating of ServiceWorker.t 
               | `U_s94_installed of ServiceWorker.t 
               | `U_s95_installing of ServiceWorker.t 
               | `U_s146_parsed of ServiceWorker.t 
               | `U_s166_redundant of ServiceWorker.t ]) union2,
              MessagePort.t) or_ or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6286) "source"
            (or_null_to_js
               (fun
                  (x6288 :
                    (([ `U_s42_auxiliary of Client.t 
                      | `U_s120_nested of Client.t 
                      | `U_s128_none of Client.t 
                      | `U_s192_top_level of Client.t ],
                       [ `U_s33_activated of ServiceWorker.t 
                       | `U_s34_activating of ServiceWorker.t 
                       | `U_s94_installed of ServiceWorker.t 
                       | `U_s95_installing of ServiceWorker.t 
                       | `U_s146_parsed of ServiceWorker.t 
                       | `U_s166_redundant of ServiceWorker.t ]) union2,
                      MessagePort.t) or_)
                  ->
                  or__to_js
                    (fun
                       (x6289 :
                         ([ `U_s42_auxiliary of Client.t 
                          | `U_s120_nested of Client.t 
                          | `U_s128_none of Client.t 
                          | `U_s192_top_level of Client.t ],
                           [ `U_s33_activated of ServiceWorker.t 
                           | `U_s34_activating of ServiceWorker.t 
                           | `U_s94_installed of ServiceWorker.t 
                           | `U_s95_installing of ServiceWorker.t 
                           | `U_s146_parsed of ServiceWorker.t 
                           | `U_s166_redundant of ServiceWorker.t ]) union2)
                       ->
                       union2_to_js
                         (fun
                            (x6290 :
                              [ `U_s42_auxiliary of Client.t 
                              | `U_s120_nested of Client.t 
                              | `U_s128_none of Client.t 
                              | `U_s192_top_level of Client.t ])
                            ->
                            match x6290 with
                            | `U_s42_auxiliary x6291 -> Client.t_to_js x6291
                            | `U_s120_nested x6292 -> Client.t_to_js x6292
                            | `U_s128_none x6293 -> Client.t_to_js x6293
                            | `U_s192_top_level x6294 -> Client.t_to_js x6294)
                         (fun
                            (x6295 :
                              [ `U_s33_activated of ServiceWorker.t 
                              | `U_s34_activating of ServiceWorker.t 
                              | `U_s94_installed of ServiceWorker.t 
                              | `U_s95_installing of ServiceWorker.t 
                              | `U_s146_parsed of ServiceWorker.t 
                              | `U_s166_redundant of ServiceWorker.t ])
                            ->
                            match x6295 with
                            | `U_s33_activated x6296 ->
                                ServiceWorker.t_to_js x6296
                            | `U_s34_activating x6297 ->
                                ServiceWorker.t_to_js x6297
                            | `U_s94_installed x6298 ->
                                ServiceWorker.t_to_js x6298
                            | `U_s95_installing x6299 ->
                                ServiceWorker.t_to_js x6299
                            | `U_s146_parsed x6300 ->
                                ServiceWorker.t_to_js x6300
                            | `U_s166_redundant x6301 ->
                                ServiceWorker.t_to_js x6301) x6289)
                    MessagePort.t_to_js x6288) x6287)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface32:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ExtendableMessageEvent.t
                         val set_prototype :
                           t -> ExtendableMessageEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:ExtendableMessageEventInit.t ->
                                 unit -> ExtendableMessageEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6305 : Ojs.t) -> x6305
    and t_to_js : t -> Ojs.t = fun (x6304 : Ojs.t) -> x6304
    let (get_prototype : t -> ExtendableMessageEvent.t) =
      fun (x6306 : t) ->
        ExtendableMessageEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x6306) "prototype")
    let (set_prototype : t -> ExtendableMessageEvent.t -> unit) =
      fun (x6307 : t) ->
        fun (x6308 : ExtendableMessageEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x6307) "prototype"
            (ExtendableMessageEvent.t_to_js x6308)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:ExtendableMessageEventInit.t ->
            unit -> ExtendableMessageEvent.t)
      =
      fun (x6313 : t) ->
        fun ~type_:(x6309 : string) ->
          fun ?eventInitDict:(x6310 : ExtendableMessageEventInit.t option) ->
            fun () ->
              ExtendableMessageEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x6313)
                   (let x6311 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x6311 "push" [|(Ojs.string_to_js x6309)|]);
                    (match x6310 with
                     | Some x6312 ->
                         ignore
                           (Ojs.call x6311 "push"
                              [|(ExtendableMessageEventInit.t_to_js x6312)|])
                     | None -> ());
                    x6311))
  end
 and
  ExtendableMessageEvent:sig
                           type t =
                             [ `Event  | `ExtendableEvent 
                             | `ExtendableMessageEvent ] intf
                           type t_0 = t
                           [@@@js.stop ]
                           type tags =
                             [ `Event  | `ExtendableEvent 
                             | `ExtendableMessageEvent ]
                           type tags_0 = tags
                           [@@@js.start ]
                           [@@@js.implem
                             type tags =
                               [ `Event  | `ExtendableEvent 
                               | `ExtendableMessageEvent ]
                             type tags_0 = tags]
                           type 'tags this =
                             'tags intf constraint 'tags =
                                         [> `ExtendableMessageEvent ]
                           val t_to_js : t -> Ojs.t
                           val t_of_js : Ojs.t -> t
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val get_data : 'tags this -> any
                           val get_lastEventId : 'tags this -> string
                           val get_origin : 'tags this -> string
                           val get_ports : 'tags this -> MessagePort.t list
                           val get_source :
                             'tags this ->
                               (([ `U_s42_auxiliary of Client.t 
                                 | `U_s120_nested of Client.t 
                                 | `U_s128_none of Client.t 
                                 | `U_s192_top_level of Client.t ],
                                  [ `U_s33_activated of ServiceWorker.t 
                                  | `U_s34_activating of ServiceWorker.t 
                                  | `U_s94_installed of ServiceWorker.t 
                                  | `U_s95_installing of ServiceWorker.t 
                                  | `U_s146_parsed of ServiceWorker.t 
                                  | `U_s166_redundant of ServiceWorker.t ])
                                  union2,
                                 MessagePort.t) or_ or_null
                           val cast_from : 'tags this -> t
                           val prototype : unit -> t
                           val create :
                             type_:string ->
                               ?eventInitDict:ExtendableMessageEventInit.t ->
                                 unit -> t
                         end =
  struct
    type t = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6315 : Ojs.t) -> t_of_js x6315
    and t_0_to_js : t_0 -> Ojs.t = fun (x6314 : t) -> t_to_js x6314
    type tags = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6318 : Ojs.t) -> intf_of_js __tags_of_js x6318
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6316 : __tags intf) -> intf_to_js __tags_to_js x6316
    let (get_data : 'tags this -> any) =
      fun (x6320 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x6320) "data")
    let (get_lastEventId : 'tags this -> string) =
      fun (x6322 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6322) "lastEventId")
    let (get_origin : 'tags this -> string) =
      fun (x6324 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6324) "origin")
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x6326 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6326) "ports")
    let (get_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
          | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s94_installed of ServiceWorker.t 
           | `U_s95_installing of ServiceWorker.t 
           | `U_s146_parsed of ServiceWorker.t 
           | `U_s166_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null)
      =
      fun (x6329 : 'tags this) ->
        or_null_of_js
          (fun (x6331 : Ojs.t) ->
             or__of_js
               (fun (x6332 : Ojs.t) ->
                  union2_of_js
                    (fun (x6333 : Ojs.t) ->
                       let x6334 = x6333 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x6334 "frameType")
                       with
                       | "auxiliary" ->
                           `U_s42_auxiliary (Client.t_of_js x6334)
                       | "nested" -> `U_s120_nested (Client.t_of_js x6334)
                       | "none" -> `U_s128_none (Client.t_of_js x6334)
                       | "top-level" ->
                           `U_s192_top_level (Client.t_of_js x6334)
                       | _ -> assert false)
                    (fun (x6335 : Ojs.t) ->
                       let x6336 = x6335 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x6336 "state")
                       with
                       | "activated" ->
                           `U_s33_activated (ServiceWorker.t_of_js x6336)
                       | "activating" ->
                           `U_s34_activating (ServiceWorker.t_of_js x6336)
                       | "installed" ->
                           `U_s94_installed (ServiceWorker.t_of_js x6336)
                       | "installing" ->
                           `U_s95_installing (ServiceWorker.t_of_js x6336)
                       | "parsed" ->
                           `U_s146_parsed (ServiceWorker.t_of_js x6336)
                       | "redundant" ->
                           `U_s166_redundant (ServiceWorker.t_of_js x6336)
                       | _ -> assert false) x6332) MessagePort.t_of_js x6331)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6329) "source")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
             "prototype")
    let (create :
      type_:string ->
        ?eventInitDict:ExtendableMessageEventInit.t -> unit -> t)
      =
      fun ~type_:(x6338 : string) ->
        fun ?eventInitDict:(x6339 : ExtendableMessageEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
                 (let x6340 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x6340 "push" [|(Ojs.string_to_js x6338)|]);
                  (match x6339 with
                   | Some x6341 ->
                       ignore
                         (Ojs.call x6340 "push"
                            [|(ExtendableMessageEventInit.t_to_js x6341)|])
                   | None -> ());
                  x6340))
  end
module ServiceWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6343 : Ojs.t) -> t_of_js x6343
    and t_0_to_js : t_0 -> Ojs.t = fun (x6342 : t) -> t_to_js x6342
    type tags =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6346 : Ojs.t) -> intf_of_js __tags_of_js x6346
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6344 : __tags intf) -> intf_to_js __tags_to_js x6344
    let (get_activate : 'tags this -> ExtendableEvent.t) =
      fun (x6348 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6348) "activate")
    let (set_activate : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x6350 : 'tags this) ->
        fun (x6351 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6350) "activate"
            (ExtendableEvent.t_to_js x6351)
    let (get_fetch : 'tags this -> FetchEvent.t) =
      fun (x6353 : 'tags this) ->
        FetchEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6353) "fetch")
    let (set_fetch : 'tags this -> FetchEvent.t -> unit) =
      fun (x6355 : 'tags this) ->
        fun (x6356 : FetchEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6355) "fetch"
            (FetchEvent.t_to_js x6356)
    let (get_install : 'tags this -> ExtendableEvent.t) =
      fun (x6358 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6358) "install")
    let (set_install : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x6360 : 'tags this) ->
        fun (x6361 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6360) "install"
            (ExtendableEvent.t_to_js x6361)
    let (get_message : 'tags this -> ExtendableMessageEvent.t) =
      fun (x6363 : 'tags this) ->
        ExtendableMessageEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6363) "message")
    let (set_message : 'tags this -> ExtendableMessageEvent.t -> unit) =
      fun (x6365 : 'tags this) ->
        fun (x6366 : ExtendableMessageEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6365) "message"
            (ExtendableMessageEvent.t_to_js x6366)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x6368 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6368) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6370 : 'tags this) ->
        fun (x6371 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6370) "messageerror"
            (MessageEvent.t_0_to_js x6371)
    let (get_notificationclick : 'tags this -> NotificationEvent.t) =
      fun (x6373 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6373)
             "notificationclick")
    let (set_notificationclick : 'tags this -> NotificationEvent.t -> unit) =
      fun (x6375 : 'tags this) ->
        fun (x6376 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6375) "notificationclick"
            (NotificationEvent.t_to_js x6376)
    let (get_notificationclose : 'tags this -> NotificationEvent.t) =
      fun (x6378 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6378)
             "notificationclose")
    let (set_notificationclose : 'tags this -> NotificationEvent.t -> unit) =
      fun (x6380 : 'tags this) ->
        fun (x6381 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6380) "notificationclose"
            (NotificationEvent.t_to_js x6381)
    let (get_push : 'tags this -> PushEvent.t) =
      fun (x6383 : 'tags this) ->
        PushEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6383) "push")
    let (set_push : 'tags this -> PushEvent.t -> unit) =
      fun (x6385 : 'tags this) ->
        fun (x6386 : PushEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6385) "push"
            (PushEvent.t_to_js x6386)
    let cast_from = Obj.magic
  end
module ServiceWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6389 : Ojs.t) -> t_of_js x6389
    and t_0_to_js : t_0 -> Ojs.t = fun (x6388 : t) -> t_to_js x6388
    type tags = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6392 : Ojs.t) -> intf_of_js __tags_of_js x6392
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6390 : __tags intf) -> intf_to_js __tags_to_js x6390
    let (get_statechange : 'tags this -> Event.t) =
      fun (x6394 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6394) "statechange")
    let (set_statechange : 'tags this -> Event.t -> unit) =
      fun (x6396 : 'tags this) ->
        fun (x6397 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6396) "statechange"
            (Event.t_to_js x6397)
    let cast_from = Obj.magic
  end
module ServiceWorkerContainerEventMap =
  struct
    type t = [ `ServiceWorkerContainerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6400 : Ojs.t) -> t_of_js x6400
    and t_0_to_js : t_0 -> Ojs.t = fun (x6399 : t) -> t_to_js x6399
    type tags = [ `ServiceWorkerContainerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6403 : Ojs.t) -> intf_of_js __tags_of_js x6403
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6401 : __tags intf) -> intf_to_js __tags_to_js x6401
    let (get_controllerchange : 'tags this -> Event.t) =
      fun (x6405 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6405) "controllerchange")
    let (set_controllerchange : 'tags this -> Event.t -> unit) =
      fun (x6407 : 'tags this) ->
        fun (x6408 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6407) "controllerchange"
            (Event.t_to_js x6408)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x6410 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6410) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6412 : 'tags this) ->
        fun (x6413 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6412) "message"
            (MessageEvent.t_0_to_js x6413)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x6415 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6415) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6417 : 'tags this) ->
        fun (x6418 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6417) "messageerror"
            (MessageEvent.t_0_to_js x6418)
    let cast_from = Obj.magic
  end
module ReadableStreamReader =
  struct
    type 'T t = 'T ReadableStreamDefaultReader.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x6422 : Ojs.t) ->
          ReadableStreamDefaultReader.t_of_js __T_of_js x6422
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x6420 : __T ReadableStreamDefaultReader.t) ->
          ReadableStreamDefaultReader.t_to_js __T_to_js x6420
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x6426 : Ojs.t) -> t_of_js __T_of_js x6426
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x6424 : __T t) -> t_to_js __T_to_js x6424
  end
module PermissionStatusEventMap =
  struct
    type t = [ `PermissionStatusEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6429 : Ojs.t) -> t_of_js x6429
    and t_0_to_js : t_0 -> Ojs.t = fun (x6428 : t) -> t_to_js x6428
    type tags = [ `PermissionStatusEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionStatusEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6432 : Ojs.t) -> intf_of_js __tags_of_js x6432
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6430 : __tags intf) -> intf_to_js __tags_to_js x6430
    let (get_change : 'tags this -> Event.t) =
      fun (x6434 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6434) "change")
    let (set_change : 'tags this -> Event.t -> unit) =
      fun (x6436 : 'tags this) ->
        fun (x6437 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6436) "change"
            (Event.t_to_js x6437)
    let cast_from = Obj.magic
  end
module PerformanceEventMap =
  struct
    type t = [ `PerformanceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6440 : Ojs.t) -> t_of_js x6440
    and t_0_to_js : t_0 -> Ojs.t = fun (x6439 : t) -> t_to_js x6439
    type tags = [ `PerformanceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6443 : Ojs.t) -> intf_of_js __tags_of_js x6443
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6441 : __tags intf) -> intf_to_js __tags_to_js x6441
    let (get_resourcetimingbufferfull : 'tags this -> Event.t) =
      fun (x6445 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6445)
             "resourcetimingbufferfull")
    let (set_resourcetimingbufferfull : 'tags this -> Event.t -> unit) =
      fun (x6447 : 'tags this) ->
        fun (x6448 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6447)
            "resourcetimingbufferfull" (Event.t_to_js x6448)
    let cast_from = Obj.magic
  end
module OnErrorEventHandlerNonNull =
  struct
    type t = [ `OnErrorEventHandlerNonNull ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6451 : Ojs.t) -> t_of_js x6451
    and t_0_to_js : t_0 -> Ojs.t = fun (x6450 : t) -> t_to_js x6450
    type tags = [ `OnErrorEventHandlerNonNull ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OnErrorEventHandlerNonNull ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6454 : Ojs.t) -> intf_of_js __tags_of_js x6454
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6452 : __tags intf) -> intf_to_js __tags_to_js x6452
    let (apply :
      'tags this ->
        event:Event.t or_string ->
          ?source:string ->
            ?lineno:float -> ?colno:float -> ?error:Error.t_0 -> unit -> any)
      =
      fun (x6467 : 'tags this) ->
        fun ~event:(x6456 : Event.t or_string) ->
          fun ?source:(x6457 : string option) ->
            fun ?lineno:(x6458 : float option) ->
              fun ?colno:(x6459 : float option) ->
                fun ?error:(x6460 : Error.t_0 option) ->
                  fun () ->
                    any_of_js
                      (Ojs.call (this_to_js Obj.magic x6467) "apply"
                         [|Ojs.null;((let x6461 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x6461 "push"
                                           [|(or_string_to_js Event.t_to_js
                                                x6456)|]);
                                      (match x6457 with
                                       | Some x6465 ->
                                           ignore
                                             (Ojs.call x6461 "push"
                                                [|(Ojs.string_to_js x6465)|])
                                       | None -> ());
                                      (match x6458 with
                                       | Some x6464 ->
                                           ignore
                                             (Ojs.call x6461 "push"
                                                [|(Ojs.float_to_js x6464)|])
                                       | None -> ());
                                      (match x6459 with
                                       | Some x6463 ->
                                           ignore
                                             (Ojs.call x6461 "push"
                                                [|(Ojs.float_to_js x6463)|])
                                       | None -> ());
                                      (match x6460 with
                                       | Some x6462 ->
                                           ignore
                                             (Ojs.call x6461 "push"
                                                [|(Error.t_0_to_js x6462)|])
                                       | None -> ());
                                      x6461))|])
    let cast_from = Obj.magic
  end
module OnErrorEventHandler =
  struct
    type t = OnErrorEventHandlerNonNull.t or_null
    let rec t_of_js : Ojs.t -> t =
      fun (x6471 : Ojs.t) ->
        or_null_of_js OnErrorEventHandlerNonNull.t_of_js x6471
    and t_to_js : t -> Ojs.t =
      fun (x6469 : OnErrorEventHandlerNonNull.t or_null) ->
        or_null_to_js OnErrorEventHandlerNonNull.t_to_js x6469
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6474 : Ojs.t) -> t_of_js x6474
    and t_0_to_js : t_0 -> Ojs.t = fun (x6473 : t) -> t_to_js x6473
  end
module OES_fbo_render_mipmap =
  struct
    type t = [ `OES_fbo_render_mipmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6476 : Ojs.t) -> t_of_js x6476
    and t_0_to_js : t_0 -> Ojs.t = fun (x6475 : t) -> t_to_js x6475
    type tags = [ `OES_fbo_render_mipmap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_fbo_render_mipmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6479 : Ojs.t) -> intf_of_js __tags_of_js x6479
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6477 : __tags intf) -> intf_to_js __tags_to_js x6477
    let cast_from = Obj.magic
  end
module NotificationEventMap =
  struct
    type t = [ `NotificationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6482 : Ojs.t) -> t_of_js x6482
    and t_0_to_js : t_0 -> Ojs.t = fun (x6481 : t) -> t_to_js x6481
    type tags = [ `NotificationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6485 : Ojs.t) -> intf_of_js __tags_of_js x6485
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6483 : __tags intf) -> intf_to_js __tags_to_js x6483
    let (get_click : 'tags this -> Event.t) =
      fun (x6487 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6487) "click")
    let (set_click : 'tags this -> Event.t -> unit) =
      fun (x6489 : 'tags this) ->
        fun (x6490 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6489) "click"
            (Event.t_to_js x6490)
    let (get_close : 'tags this -> Event.t) =
      fun (x6492 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6492) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x6494 : 'tags this) ->
        fun (x6495 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6494) "close"
            (Event.t_to_js x6495)
    let (get_error : 'tags this -> Event.t) =
      fun (x6497 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6497) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6499 : 'tags this) ->
        fun (x6500 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6499) "error"
            (Event.t_to_js x6500)
    let (get_show : 'tags this -> Event.t) =
      fun (x6502 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6502) "show")
    let (set_show : 'tags this -> Event.t -> unit) =
      fun (x6504 : 'tags this) ->
        fun (x6505 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6504) "show"
            (Event.t_to_js x6505)
    let cast_from = Obj.magic
  end
module MessagePortEventMap =
  struct
    type t = [ `MessagePortEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6508 : Ojs.t) -> t_of_js x6508
    and t_0_to_js : t_0 -> Ojs.t = fun (x6507 : t) -> t_to_js x6507
    type tags = [ `MessagePortEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessagePortEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6511 : Ojs.t) -> intf_of_js __tags_of_js x6511
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6509 : __tags intf) -> intf_to_js __tags_to_js x6509
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x6513 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6513) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6515 : 'tags this) ->
        fun (x6516 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6515) "message"
            (MessageEvent.t_0_to_js x6516)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x6518 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6518) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6520 : 'tags this) ->
        fun (x6521 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6520) "messageerror"
            (MessageEvent.t_0_to_js x6521)
    let cast_from = Obj.magic
  end
module ImportMeta =
  struct
    type t = [ `ImportMeta ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6524 : Ojs.t) -> t_of_js x6524
    and t_0_to_js : t_0 -> Ojs.t = fun (x6523 : t) -> t_to_js x6523
    type tags = [ `ImportMeta ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6527 : Ojs.t) -> intf_of_js __tags_of_js x6527
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6525 : __tags intf) -> intf_to_js __tags_to_js x6525
    let (get_url : 'tags this -> string) =
      fun (x6529 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6529) "url")
    let (set_url : 'tags this -> string -> unit) =
      fun (x6531 : 'tags this) ->
        fun (x6532 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6531) "url"
            (Ojs.string_to_js x6532)
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContextSettings =
  struct
    type t = [ `ImageBitmapRenderingContextSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6535 : Ojs.t) -> t_of_js x6535
    and t_0_to_js : t_0 -> Ojs.t = fun (x6534 : t) -> t_to_js x6534
    type tags = [ `ImageBitmapRenderingContextSettings ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContextSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6538 : Ojs.t) -> intf_of_js __tags_of_js x6538
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6536 : __tags intf) -> intf_to_js __tags_to_js x6536
    let (get_alpha : 'tags this -> bool) =
      fun (x6540 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6540) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x6542 : 'tags this) ->
        fun (x6543 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6542) "alpha"
            (Ojs.bool_to_js x6543)
    let cast_from = Obj.magic
  end
module IDBTransactionEventMap =
  struct
    type t = [ `IDBTransactionEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6546 : Ojs.t) -> t_of_js x6546
    and t_0_to_js : t_0 -> Ojs.t = fun (x6545 : t) -> t_to_js x6545
    type tags = [ `IDBTransactionEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBTransactionEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6549 : Ojs.t) -> intf_of_js __tags_of_js x6549
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6547 : __tags intf) -> intf_to_js __tags_to_js x6547
    let (get_abort : 'tags this -> Event.t) =
      fun (x6551 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6551) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x6553 : 'tags this) ->
        fun (x6554 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6553) "abort"
            (Event.t_to_js x6554)
    let (get_complete : 'tags this -> Event.t) =
      fun (x6556 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6556) "complete")
    let (set_complete : 'tags this -> Event.t -> unit) =
      fun (x6558 : 'tags this) ->
        fun (x6559 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6558) "complete"
            (Event.t_to_js x6559)
    let (get_error : 'tags this -> Event.t) =
      fun (x6561 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6561) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6563 : 'tags this) ->
        fun (x6564 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6563) "error"
            (Event.t_to_js x6564)
    let cast_from = Obj.magic
  end
module IDBRequestEventMap =
  struct
    type t = [ `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6567 : Ojs.t) -> t_of_js x6567
    and t_0_to_js : t_0 -> Ojs.t = fun (x6566 : t) -> t_to_js x6566
    type tags = [ `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6570 : Ojs.t) -> intf_of_js __tags_of_js x6570
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6568 : __tags intf) -> intf_to_js __tags_to_js x6568
    let (get_error : 'tags this -> Event.t) =
      fun (x6572 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6572) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6574 : 'tags this) ->
        fun (x6575 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6574) "error"
            (Event.t_to_js x6575)
    let (get_success : 'tags this -> Event.t) =
      fun (x6577 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6577) "success")
    let (set_success : 'tags this -> Event.t -> unit) =
      fun (x6579 : 'tags this) ->
        fun (x6580 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6579) "success"
            (Event.t_to_js x6580)
    let cast_from = Obj.magic
  end
module IDBOpenDBRequestEventMap =
  struct
    type t = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6583 : Ojs.t) -> t_of_js x6583
    and t_0_to_js : t_0 -> Ojs.t = fun (x6582 : t) -> t_to_js x6582
    type tags = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBOpenDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6586 : Ojs.t) -> intf_of_js __tags_of_js x6586
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6584 : __tags intf) -> intf_to_js __tags_to_js x6584
    let (get_blocked : 'tags this -> Event.t) =
      fun (x6588 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6588) "blocked")
    let (set_blocked : 'tags this -> Event.t -> unit) =
      fun (x6590 : 'tags this) ->
        fun (x6591 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6590) "blocked"
            (Event.t_to_js x6591)
    let (get_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x6593 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6593) "upgradeneeded")
    let (set_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x6595 : 'tags this) ->
        fun (x6596 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6595) "upgradeneeded"
            (IDBVersionChangeEvent.t_to_js x6596)
    let cast_from = Obj.magic
  end
module IDBDatabaseEventMap =
  struct
    type t = [ `IDBDatabaseEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6599 : Ojs.t) -> t_of_js x6599
    and t_0_to_js : t_0 -> Ojs.t = fun (x6598 : t) -> t_to_js x6598
    type tags = [ `IDBDatabaseEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6602 : Ojs.t) -> intf_of_js __tags_of_js x6602
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6600 : __tags intf) -> intf_to_js __tags_to_js x6600
    let (get_abort : 'tags this -> Event.t) =
      fun (x6604 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6604) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x6606 : 'tags this) ->
        fun (x6607 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6606) "abort"
            (Event.t_to_js x6607)
    let (get_close : 'tags this -> Event.t) =
      fun (x6609 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6609) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x6611 : 'tags this) ->
        fun (x6612 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6611) "close"
            (Event.t_to_js x6612)
    let (get_error : 'tags this -> Event.t) =
      fun (x6614 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6614) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6616 : 'tags this) ->
        fun (x6617 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6616) "error"
            (Event.t_to_js x6617)
    let (get_versionchange : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x6619 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6619) "versionchange")
    let (set_versionchange : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x6621 : 'tags this) ->
        fun (x6622 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6621) "versionchange"
            (IDBVersionChangeEvent.t_to_js x6622)
    let cast_from = Obj.magic
  end
module FontFaceSetEventMap =
  struct
    type t = [ `FontFaceSetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6625 : Ojs.t) -> t_of_js x6625
    and t_0_to_js : t_0 -> Ojs.t = fun (x6624 : t) -> t_to_js x6624
    type tags = [ `FontFaceSetEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6628 : Ojs.t) -> intf_of_js __tags_of_js x6628
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6626 : __tags intf) -> intf_to_js __tags_to_js x6626
    let (get_loading : 'tags this -> Event.t) =
      fun (x6630 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6630) "loading")
    let (set_loading : 'tags this -> Event.t -> unit) =
      fun (x6632 : 'tags this) ->
        fun (x6633 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6632) "loading"
            (Event.t_to_js x6633)
    let (get_loadingdone : 'tags this -> Event.t) =
      fun (x6635 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6635) "loadingdone")
    let (set_loadingdone : 'tags this -> Event.t -> unit) =
      fun (x6637 : 'tags this) ->
        fun (x6638 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6637) "loadingdone"
            (Event.t_to_js x6638)
    let (get_loadingerror : 'tags this -> Event.t) =
      fun (x6640 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6640) "loadingerror")
    let (set_loadingerror : 'tags this -> Event.t -> unit) =
      fun (x6642 : 'tags this) ->
        fun (x6643 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6642) "loadingerror"
            (Event.t_to_js x6643)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface36:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FileReader.t
                         val set_prototype : t -> FileReader.t -> unit
                         val create : t -> FileReader.t
                         val get_DONE : t -> float
                         val get_EMPTY : t -> float
                         val get_LOADING : t -> float
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6646 : Ojs.t) -> x6646
    and t_to_js : t -> Ojs.t = fun (x6645 : Ojs.t) -> x6645
    let (get_prototype : t -> FileReader.t) =
      fun (x6647 : t) ->
        FileReader.t_of_js (Ojs.get_prop_ascii (t_to_js x6647) "prototype")
    let (set_prototype : t -> FileReader.t -> unit) =
      fun (x6648 : t) ->
        fun (x6649 : FileReader.t) ->
          Ojs.set_prop_ascii (t_to_js x6648) "prototype"
            (FileReader.t_to_js x6649)
    let (create : t -> FileReader.t) =
      fun (x6650 : t) ->
        FileReader.t_of_js (Ojs.new_obj (t_to_js x6650) [||])
    let (get_DONE : t -> float) =
      fun (x6651 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x6651) "DONE")
    let (get_EMPTY : t -> float) =
      fun (x6652 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x6652) "EMPTY")
    let (get_LOADING : t -> float) =
      fun (x6653 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x6653) "LOADING")
  end
 and
  FileReader:sig
               type t = [ `EventTarget  | `FileReader ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `EventTarget  | `FileReader ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem
                 type tags = [ `EventTarget  | `FileReader ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `FileReader ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_error : 'tags this -> DOMException.t or_null
               val get_onabort :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onabort :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_onerror :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onerror :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_onload :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onload :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_onloadend :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onloadend :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_onloadstart :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onloadstart :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_onprogress :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onprogress :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_readyState : 'tags this -> float
               val get_result :
                 'tags this -> ArrayBuffer.t_0 or_string or_null
               val abort : 'tags this -> unit
               val readAsArrayBuffer : 'tags this -> blob:Blob.t -> unit
               val readAsBinaryString : 'tags this -> blob:Blob.t -> unit
               val readAsDataURL : 'tags this -> blob:Blob.t -> unit
               val readAsText :
                 'tags this ->
                   blob:Blob.t -> ?encoding:string -> unit -> unit
               val get_DONE : 'tags this -> float
               val get_EMPTY : 'tags this -> float
               val get_LOADING : 'tags this -> float
               val addEventListener :
                 'tags this ->
                   type_:'K ->
                     listener:(this:t -> ev:any -> any) ->
                       ?options:AddEventListenerOptions.t or_boolean ->
                         unit -> unit
               val addEventListener' :
                 'tags this ->
                   type_:string ->
                     listener:EventListenerOrEventListenerObject.t ->
                       ?options:AddEventListenerOptions.t or_boolean ->
                         unit -> unit
               val removeEventListener :
                 'tags this ->
                   type_:'K ->
                     listener:(this:t -> ev:any -> any) ->
                       ?options:EventListenerOptions.t or_boolean ->
                         unit -> unit
               val removeEventListener' :
                 'tags this ->
                   type_:string ->
                     listener:EventListenerOrEventListenerObject.t ->
                       ?options:EventListenerOptions.t or_boolean ->
                         unit -> unit
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create : unit -> t
               val done_ : unit -> float
               val empty : unit -> float
               val loading : unit -> float
             end =
  struct
    type t = [ `EventTarget  | `FileReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6655 : Ojs.t) -> t_of_js x6655
    and t_0_to_js : t_0 -> Ojs.t = fun (x6654 : t) -> t_to_js x6654
    type tags = [ `EventTarget  | `FileReader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6658 : Ojs.t) -> intf_of_js __tags_of_js x6658
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6656 : __tags intf) -> intf_to_js __tags_to_js x6656
    let (get_error : 'tags this -> DOMException.t or_null) =
      fun (x6660 : 'tags this) ->
        or_null_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6660) "error")
    let (get_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6663 : 'tags this) ->
        or_null_of_js
          (fun (x6665 : Ojs.t) ->
             fun ~this:(x6666 : t) ->
               fun ~ev:(x6667 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6665
                      [|(t_to_js x6666);(ProgressEvent.t_to_js t_to_js x6667)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6663) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6669 : 'tags this) ->
        fun (x6670 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6669) "onabort"
            (or_null_to_js
               (fun (x6671 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6672 : Ojs.t) ->
                       fun (x6673 : Ojs.t) ->
                         any_to_js
                           (x6671 ~this:(t_of_js x6672)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6673))))
               x6670)
    let (get_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6676 : 'tags this) ->
        or_null_of_js
          (fun (x6678 : Ojs.t) ->
             fun ~this:(x6679 : t) ->
               fun ~ev:(x6680 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6678
                      [|(t_to_js x6679);(ProgressEvent.t_to_js t_to_js x6680)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6676) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6682 : 'tags this) ->
        fun (x6683 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6682) "onerror"
            (or_null_to_js
               (fun (x6684 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6685 : Ojs.t) ->
                       fun (x6686 : Ojs.t) ->
                         any_to_js
                           (x6684 ~this:(t_of_js x6685)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6686))))
               x6683)
    let (get_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6689 : 'tags this) ->
        or_null_of_js
          (fun (x6691 : Ojs.t) ->
             fun ~this:(x6692 : t) ->
               fun ~ev:(x6693 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6691
                      [|(t_to_js x6692);(ProgressEvent.t_to_js t_to_js x6693)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6689) "onload")
    let (set_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6695 : 'tags this) ->
        fun (x6696 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6695) "onload"
            (or_null_to_js
               (fun (x6697 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6698 : Ojs.t) ->
                       fun (x6699 : Ojs.t) ->
                         any_to_js
                           (x6697 ~this:(t_of_js x6698)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6699))))
               x6696)
    let (get_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6702 : 'tags this) ->
        or_null_of_js
          (fun (x6704 : Ojs.t) ->
             fun ~this:(x6705 : t) ->
               fun ~ev:(x6706 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6704
                      [|(t_to_js x6705);(ProgressEvent.t_to_js t_to_js x6706)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6702) "onloadend")
    let (set_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6708 : 'tags this) ->
        fun (x6709 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6708) "onloadend"
            (or_null_to_js
               (fun (x6710 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6711 : Ojs.t) ->
                       fun (x6712 : Ojs.t) ->
                         any_to_js
                           (x6710 ~this:(t_of_js x6711)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6712))))
               x6709)
    let (get_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6715 : 'tags this) ->
        or_null_of_js
          (fun (x6717 : Ojs.t) ->
             fun ~this:(x6718 : t) ->
               fun ~ev:(x6719 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6717
                      [|(t_to_js x6718);(ProgressEvent.t_to_js t_to_js x6719)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6715) "onloadstart")
    let (set_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6721 : 'tags this) ->
        fun (x6722 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6721) "onloadstart"
            (or_null_to_js
               (fun (x6723 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6724 : Ojs.t) ->
                       fun (x6725 : Ojs.t) ->
                         any_to_js
                           (x6723 ~this:(t_of_js x6724)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6725))))
               x6722)
    let (get_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6728 : 'tags this) ->
        or_null_of_js
          (fun (x6730 : Ojs.t) ->
             fun ~this:(x6731 : t) ->
               fun ~ev:(x6732 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6730
                      [|(t_to_js x6731);(ProgressEvent.t_to_js t_to_js x6732)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6728) "onprogress")
    let (set_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6734 : 'tags this) ->
        fun (x6735 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6734) "onprogress"
            (or_null_to_js
               (fun (x6736 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6737 : Ojs.t) ->
                       fun (x6738 : Ojs.t) ->
                         any_to_js
                           (x6736 ~this:(t_of_js x6737)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6738))))
               x6735)
    let (get_readyState : 'tags this -> float) =
      fun (x6741 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6741) "readyState")
    let (get_result : 'tags this -> ArrayBuffer.t_0 or_string or_null) =
      fun (x6743 : 'tags this) ->
        or_null_of_js
          (fun (x6745 : Ojs.t) -> or_string_of_js ArrayBuffer.t_0_of_js x6745)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6743) "result")
    let (abort : 'tags this -> unit) =
      fun (x6747 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6747) "abort" [||])
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> unit) =
      fun (x6750 : 'tags this) ->
        fun ~blob:(x6749 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6750) "readAsArrayBuffer"
               [|(Blob.t_to_js x6749)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> unit) =
      fun (x6753 : 'tags this) ->
        fun ~blob:(x6752 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6753) "readAsBinaryString"
               [|(Blob.t_to_js x6752)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> unit) =
      fun (x6756 : 'tags this) ->
        fun ~blob:(x6755 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6756) "readAsDataURL"
               [|(Blob.t_to_js x6755)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> unit) =
      fun (x6762 : 'tags this) ->
        fun ~blob:(x6758 : Blob.t) ->
          fun ?encoding:(x6759 : string option) ->
            fun () ->
              ignore
                (let x6764 = this_to_js Obj.magic x6762 in
                 Ojs.call (Ojs.get_prop_ascii x6764 "readAsText") "apply"
                   [|x6764;((let x6760 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6760 "push"
                                  [|(Blob.t_to_js x6758)|]);
                             (match x6759 with
                              | Some x6761 ->
                                  ignore
                                    (Ojs.call x6760 "push"
                                       [|(Ojs.string_to_js x6761)|])
                              | None -> ());
                             x6760))|])
    let (get_DONE : 'tags this -> float) =
      fun (x6765 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6765) "DONE")
    let (get_EMPTY : 'tags this -> float) =
      fun (x6767 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6767) "EMPTY")
    let (get_LOADING : 'tags this -> float) =
      fun (x6769 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6769) "LOADING")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6779 : 'tags this) ->
        fun ~type_:(x6771 : 'K) ->
          fun ~listener:(x6772 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6773 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6781 = this_to_js Obj.magic x6779 in
                   Ojs.call (Ojs.get_prop_ascii x6781 "addEventListener")
                     "apply"
                     [|x6781;((let x6774 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6774 "push" [|(Obj.magic x6771)|]);
                               ignore
                                 (Ojs.call x6774 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6777 : Ojs.t) ->
                                            fun (x6778 : Ojs.t) ->
                                              any_to_js
                                                (x6772 ~this:(t_of_js x6777)
                                                   ~ev:(any_of_js x6778))))|]);
                               (match x6773 with
                                | Some x6775 ->
                                    ignore
                                      (Ojs.call x6774 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x6775)|])
                                | None -> ());
                               x6774))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6788 : 'tags this) ->
        fun ~type_:(x6782 : string) ->
          fun ~listener:(x6783 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6784 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6790 = this_to_js Obj.magic x6788 in
                   Ojs.call (Ojs.get_prop_ascii x6790 "addEventListener")
                     "apply"
                     [|x6790;((let x6785 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6785 "push"
                                    [|(Ojs.string_to_js x6782)|]);
                               ignore
                                 (Ojs.call x6785 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6783)|]);
                               (match x6784 with
                                | Some x6786 ->
                                    ignore
                                      (Ojs.call x6785 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x6786)|])
                                | None -> ());
                               x6785))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6799 : 'tags this) ->
        fun ~type_:(x6791 : 'K) ->
          fun ~listener:(x6792 : this:t -> ev:any -> any) ->
            fun ?options:(x6793 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6801 = this_to_js Obj.magic x6799 in
                   Ojs.call (Ojs.get_prop_ascii x6801 "removeEventListener")
                     "apply"
                     [|x6801;((let x6794 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6794 "push" [|(Obj.magic x6791)|]);
                               ignore
                                 (Ojs.call x6794 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6797 : Ojs.t) ->
                                            fun (x6798 : Ojs.t) ->
                                              any_to_js
                                                (x6792 ~this:(t_of_js x6797)
                                                   ~ev:(any_of_js x6798))))|]);
                               (match x6793 with
                                | Some x6795 ->
                                    ignore
                                      (Ojs.call x6794 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x6795)|])
                                | None -> ());
                               x6794))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6808 : 'tags this) ->
        fun ~type_:(x6802 : string) ->
          fun ~listener:(x6803 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x6804 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6810 = this_to_js Obj.magic x6808 in
                   Ojs.call (Ojs.get_prop_ascii x6810 "removeEventListener")
                     "apply"
                     [|x6810;((let x6805 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6805 "push"
                                    [|(Ojs.string_to_js x6802)|]);
                               ignore
                                 (Ojs.call x6805 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6803)|]);
                               (match x6804 with
                                | Some x6806 ->
                                    ignore
                                      (Ojs.call x6805 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x6806)|])
                                | None -> ());
                               x6805))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReader") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "DONE")
    let (empty : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "EMPTY")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "LOADING")
  end
module FileReaderEventMap =
  struct
    type t = [ `FileReaderEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6812 : Ojs.t) -> t_of_js x6812
    and t_0_to_js : t_0 -> Ojs.t = fun (x6811 : t) -> t_to_js x6811
    type tags = [ `FileReaderEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6815 : Ojs.t) -> intf_of_js __tags_of_js x6815
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6813 : __tags intf) -> intf_to_js __tags_to_js x6813
    let (get_abort : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6817 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6817) "abort")
    let (set_abort : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x6820 : 'tags this) ->
        fun (x6821 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6820) "abort"
            (ProgressEvent.t_to_js FileReader.t_to_js x6821)
    let (get_error : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6824 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6824) "error")
    let (set_error : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x6827 : 'tags this) ->
        fun (x6828 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6827) "error"
            (ProgressEvent.t_to_js FileReader.t_to_js x6828)
    let (get_load : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6831 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6831) "load")
    let (set_load : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x6834 : 'tags this) ->
        fun (x6835 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6834) "load"
            (ProgressEvent.t_to_js FileReader.t_to_js x6835)
    let (get_loadend : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6838 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6838) "loadend")
    let (set_loadend : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x6841 : 'tags this) ->
        fun (x6842 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6841) "loadend"
            (ProgressEvent.t_to_js FileReader.t_to_js x6842)
    let (get_loadstart : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6845 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6845) "loadstart")
    let (set_loadstart : 'tags this -> FileReader.t ProgressEvent.t -> unit)
      =
      fun (x6848 : 'tags this) ->
        fun (x6849 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6848) "loadstart"
            (ProgressEvent.t_to_js FileReader.t_to_js x6849)
    let (get_progress : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6852 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6852) "progress")
    let (set_progress : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x6855 : 'tags this) ->
        fun (x6856 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6855) "progress"
            (ProgressEvent.t_to_js FileReader.t_to_js x6856)
    let cast_from = Obj.magic
  end
module EventSourceEventMap =
  struct
    type t = [ `EventSourceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6860 : Ojs.t) -> t_of_js x6860
    and t_0_to_js : t_0 -> Ojs.t = fun (x6859 : t) -> t_to_js x6859
    type tags = [ `EventSourceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6863 : Ojs.t) -> intf_of_js __tags_of_js x6863
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6861 : __tags intf) -> intf_to_js __tags_to_js x6861
    let (get_error : 'tags this -> Event.t) =
      fun (x6865 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6865) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6867 : 'tags this) ->
        fun (x6868 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6867) "error"
            (Event.t_to_js x6868)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x6870 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6870) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6872 : 'tags this) ->
        fun (x6873 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6872) "message"
            (MessageEvent.t_0_to_js x6873)
    let (get_open : 'tags this -> Event.t) =
      fun (x6875 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6875) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x6877 : 'tags this) ->
        fun (x6878 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6877) "open"
            (Event.t_to_js x6878)
    let cast_from = Obj.magic
  end
module GLenum =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6881 : Ojs.t) -> Ojs.float_of_js x6881
    and t_to_js : t -> Ojs.t = fun (x6880 : float) -> Ojs.float_to_js x6880
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6883 : Ojs.t) -> t_of_js x6883
    and t_0_to_js : t_0 -> Ojs.t = fun (x6882 : t) -> t_to_js x6882
  end
module EXT_texture_compression_rgtc =
  struct
    type t = [ `EXT_texture_compression_rgtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6885 : Ojs.t) -> t_of_js x6885
    and t_0_to_js : t_0 -> Ojs.t = fun (x6884 : t) -> t_to_js x6884
    type tags = [ `EXT_texture_compression_rgtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_compression_rgtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6888 : Ojs.t) -> intf_of_js __tags_of_js x6888
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6886 : __tags intf) -> intf_to_js __tags_to_js x6886
    let (get_COMPRESSED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t) =
      fun (x6890 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6890)
             "COMPRESSED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x6892 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6892)
             "COMPRESSED_RED_RGTC1_EXT")
    let (get_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t)
      =
      fun (x6894 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6894)
             "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_SIGNED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x6896 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6896)
             "COMPRESSED_SIGNED_RED_RGTC1_EXT")
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6899 : Ojs.t) -> t_of_js x6899
    and t_0_to_js : t_0 -> Ojs.t = fun (x6898 : t) -> t_to_js x6898
    type tags =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6902 : Ojs.t) -> intf_of_js __tags_of_js x6902
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6900 : __tags intf) -> intf_to_js __tags_to_js x6900
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x6904 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6904) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6906 : 'tags this) ->
        fun (x6907 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6906) "message"
            (MessageEvent.t_0_to_js x6907)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x6909 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6909) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6911 : 'tags this) ->
        fun (x6912 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6911) "messageerror"
            (MessageEvent.t_0_to_js x6912)
    let cast_from = Obj.magic
  end
module Console =
  struct
    type t = [ `Console ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6915 : Ojs.t) -> t_of_js x6915
    and t_0_to_js : t_0 -> Ojs.t = fun (x6914 : t) -> t_to_js x6914
    type tags = [ `Console ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Console ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6918 : Ojs.t) -> intf_of_js __tags_of_js x6918
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6916 : __tags intf) -> intf_to_js __tags_to_js x6916
    let (assert_ :
      'tags this -> ?condition:bool -> data:any list -> unit -> unit) =
      fun (x6925 : 'tags this) ->
        fun ?condition:(x6920 : bool option) ->
          fun ~data:(x6921 : any list) ->
            fun () ->
              ignore
                (let x6927 = this_to_js Obj.magic x6925 in
                 Ojs.call (Ojs.get_prop_ascii x6927 "assert") "apply"
                   [|x6927;((let x6922 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6920 with
                              | Some x6924 ->
                                  ignore
                                    (Ojs.call x6922 "push"
                                       [|(Ojs.bool_to_js x6924)|])
                              | None -> ());
                             List.iter
                               (fun (x6923 : any) ->
                                  ignore
                                    (Ojs.call x6922 "push"
                                       [|(any_to_js x6923)|])) x6921;
                             x6922))|])
    let (clear : 'tags this -> unit) =
      fun (x6928 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6928) "clear" [||])
    let (count : 'tags this -> ?label:string -> unit -> unit) =
      fun (x6933 : 'tags this) ->
        fun ?label:(x6930 : string option) ->
          fun () ->
            ignore
              (let x6935 = this_to_js Obj.magic x6933 in
               Ojs.call (Ojs.get_prop_ascii x6935 "count") "apply"
                 [|x6935;((let x6931 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6930 with
                            | Some x6932 ->
                                ignore
                                  (Ojs.call x6931 "push"
                                     [|(Ojs.string_to_js x6932)|])
                            | None -> ());
                           x6931))|])
    let (countReset : 'tags this -> ?label:string -> unit -> unit) =
      fun (x6939 : 'tags this) ->
        fun ?label:(x6936 : string option) ->
          fun () ->
            ignore
              (let x6941 = this_to_js Obj.magic x6939 in
               Ojs.call (Ojs.get_prop_ascii x6941 "countReset") "apply"
                 [|x6941;((let x6937 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6936 with
                            | Some x6938 ->
                                ignore
                                  (Ojs.call x6937 "push"
                                     [|(Ojs.string_to_js x6938)|])
                            | None -> ());
                           x6937))|])
    let (debug : 'tags this -> data:any list -> unit) =
      fun (x6945 : 'tags this) ->
        fun ~data:(x6942 : any list) ->
          ignore
            (let x6947 = this_to_js Obj.magic x6945 in
             Ojs.call (Ojs.get_prop_ascii x6947 "debug") "apply"
               [|x6947;((let x6943 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6944 : any) ->
                              ignore
                                (Ojs.call x6943 "push" [|(any_to_js x6944)|]))
                           x6942;
                         x6943))|])
    let (dir : 'tags this -> ?item:any -> ?options:any -> unit -> unit) =
      fun (x6953 : 'tags this) ->
        fun ?item:(x6948 : any option) ->
          fun ?options:(x6949 : any option) ->
            fun () ->
              ignore
                (let x6955 = this_to_js Obj.magic x6953 in
                 Ojs.call (Ojs.get_prop_ascii x6955 "dir") "apply"
                   [|x6955;((let x6950 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6948 with
                              | Some x6952 ->
                                  ignore
                                    (Ojs.call x6950 "push"
                                       [|(any_to_js x6952)|])
                              | None -> ());
                             (match x6949 with
                              | Some x6951 ->
                                  ignore
                                    (Ojs.call x6950 "push"
                                       [|(any_to_js x6951)|])
                              | None -> ());
                             x6950))|])
    let (dirxml : 'tags this -> data:any list -> unit) =
      fun (x6959 : 'tags this) ->
        fun ~data:(x6956 : any list) ->
          ignore
            (let x6961 = this_to_js Obj.magic x6959 in
             Ojs.call (Ojs.get_prop_ascii x6961 "dirxml") "apply"
               [|x6961;((let x6957 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6958 : any) ->
                              ignore
                                (Ojs.call x6957 "push" [|(any_to_js x6958)|]))
                           x6956;
                         x6957))|])
    let (error : 'tags this -> data:any list -> unit) =
      fun (x6965 : 'tags this) ->
        fun ~data:(x6962 : any list) ->
          ignore
            (let x6967 = this_to_js Obj.magic x6965 in
             Ojs.call (Ojs.get_prop_ascii x6967 "error") "apply"
               [|x6967;((let x6963 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6964 : any) ->
                              ignore
                                (Ojs.call x6963 "push" [|(any_to_js x6964)|]))
                           x6962;
                         x6963))|])
    let (group : 'tags this -> data:any list -> unit) =
      fun (x6971 : 'tags this) ->
        fun ~data:(x6968 : any list) ->
          ignore
            (let x6973 = this_to_js Obj.magic x6971 in
             Ojs.call (Ojs.get_prop_ascii x6973 "group") "apply"
               [|x6973;((let x6969 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6970 : any) ->
                              ignore
                                (Ojs.call x6969 "push" [|(any_to_js x6970)|]))
                           x6968;
                         x6969))|])
    let (groupCollapsed : 'tags this -> data:any list -> unit) =
      fun (x6977 : 'tags this) ->
        fun ~data:(x6974 : any list) ->
          ignore
            (let x6979 = this_to_js Obj.magic x6977 in
             Ojs.call (Ojs.get_prop_ascii x6979 "groupCollapsed") "apply"
               [|x6979;((let x6975 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6976 : any) ->
                              ignore
                                (Ojs.call x6975 "push" [|(any_to_js x6976)|]))
                           x6974;
                         x6975))|])
    let (groupEnd : 'tags this -> unit) =
      fun (x6980 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6980) "groupEnd" [||])
    let (info : 'tags this -> data:any list -> unit) =
      fun (x6985 : 'tags this) ->
        fun ~data:(x6982 : any list) ->
          ignore
            (let x6987 = this_to_js Obj.magic x6985 in
             Ojs.call (Ojs.get_prop_ascii x6987 "info") "apply"
               [|x6987;((let x6983 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6984 : any) ->
                              ignore
                                (Ojs.call x6983 "push" [|(any_to_js x6984)|]))
                           x6982;
                         x6983))|])
    let (log : 'tags this -> data:any list -> unit) =
      fun (x6991 : 'tags this) ->
        fun ~data:(x6988 : any list) ->
          ignore
            (let x6993 = this_to_js Obj.magic x6991 in
             Ojs.call (Ojs.get_prop_ascii x6993 "log") "apply"
               [|x6993;((let x6989 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6990 : any) ->
                              ignore
                                (Ojs.call x6989 "push" [|(any_to_js x6990)|]))
                           x6988;
                         x6989))|])
    let (table :
      'tags this ->
        ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun (x7000 : 'tags this) ->
        fun ?tabularData:(x6994 : any option) ->
          fun ?properties:(x6995 : string list option) ->
            fun () ->
              ignore
                (let x7002 = this_to_js Obj.magic x7000 in
                 Ojs.call (Ojs.get_prop_ascii x7002 "table") "apply"
                   [|x7002;((let x6996 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6994 with
                              | Some x6999 ->
                                  ignore
                                    (Ojs.call x6996 "push"
                                       [|(any_to_js x6999)|])
                              | None -> ());
                             (match x6995 with
                              | Some x6997 ->
                                  ignore
                                    (Ojs.call x6996 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x6997)|])
                              | None -> ());
                             x6996))|])
    let (time : 'tags this -> ?label:string -> unit -> unit) =
      fun (x7006 : 'tags this) ->
        fun ?label:(x7003 : string option) ->
          fun () ->
            ignore
              (let x7008 = this_to_js Obj.magic x7006 in
               Ojs.call (Ojs.get_prop_ascii x7008 "time") "apply"
                 [|x7008;((let x7004 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7003 with
                            | Some x7005 ->
                                ignore
                                  (Ojs.call x7004 "push"
                                     [|(Ojs.string_to_js x7005)|])
                            | None -> ());
                           x7004))|])
    let (timeEnd : 'tags this -> ?label:string -> unit -> unit) =
      fun (x7012 : 'tags this) ->
        fun ?label:(x7009 : string option) ->
          fun () ->
            ignore
              (let x7014 = this_to_js Obj.magic x7012 in
               Ojs.call (Ojs.get_prop_ascii x7014 "timeEnd") "apply"
                 [|x7014;((let x7010 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7009 with
                            | Some x7011 ->
                                ignore
                                  (Ojs.call x7010 "push"
                                     [|(Ojs.string_to_js x7011)|])
                            | None -> ());
                           x7010))|])
    let (timeLog :
      'tags this -> ?label:string -> data:any list -> unit -> unit) =
      fun (x7020 : 'tags this) ->
        fun ?label:(x7015 : string option) ->
          fun ~data:(x7016 : any list) ->
            fun () ->
              ignore
                (let x7022 = this_to_js Obj.magic x7020 in
                 Ojs.call (Ojs.get_prop_ascii x7022 "timeLog") "apply"
                   [|x7022;((let x7017 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7015 with
                              | Some x7019 ->
                                  ignore
                                    (Ojs.call x7017 "push"
                                       [|(Ojs.string_to_js x7019)|])
                              | None -> ());
                             List.iter
                               (fun (x7018 : any) ->
                                  ignore
                                    (Ojs.call x7017 "push"
                                       [|(any_to_js x7018)|])) x7016;
                             x7017))|])
    let (timeStamp : 'tags this -> ?label:string -> unit -> unit) =
      fun (x7026 : 'tags this) ->
        fun ?label:(x7023 : string option) ->
          fun () ->
            ignore
              (let x7028 = this_to_js Obj.magic x7026 in
               Ojs.call (Ojs.get_prop_ascii x7028 "timeStamp") "apply"
                 [|x7028;((let x7024 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7023 with
                            | Some x7025 ->
                                ignore
                                  (Ojs.call x7024 "push"
                                     [|(Ojs.string_to_js x7025)|])
                            | None -> ());
                           x7024))|])
    let (trace : 'tags this -> data:any list -> unit) =
      fun (x7032 : 'tags this) ->
        fun ~data:(x7029 : any list) ->
          ignore
            (let x7034 = this_to_js Obj.magic x7032 in
             Ojs.call (Ojs.get_prop_ascii x7034 "trace") "apply"
               [|x7034;((let x7030 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x7031 : any) ->
                              ignore
                                (Ojs.call x7030 "push" [|(any_to_js x7031)|]))
                           x7029;
                         x7030))|])
    let (warn : 'tags this -> data:any list -> unit) =
      fun (x7038 : 'tags this) ->
        fun ~data:(x7035 : any list) ->
          ignore
            (let x7040 = this_to_js Obj.magic x7038 in
             Ojs.call (Ojs.get_prop_ascii x7040 "warn") "apply"
               [|x7040;((let x7036 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x7037 : any) ->
                              ignore
                                (Ojs.call x7036 "push" [|(any_to_js x7037)|]))
                           x7035;
                         x7036))|])
    let cast_from = Obj.magic
  end
module BroadcastChannelEventMap =
  struct
    type t = [ `BroadcastChannelEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7042 : Ojs.t) -> t_of_js x7042
    and t_0_to_js : t_0 -> Ojs.t = fun (x7041 : t) -> t_to_js x7041
    type tags = [ `BroadcastChannelEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `BroadcastChannelEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7045 : Ojs.t) -> intf_of_js __tags_of_js x7045
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7043 : __tags intf) -> intf_to_js __tags_to_js x7043
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x7047 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7047) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x7049 : 'tags this) ->
        fun (x7050 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7049) "message"
            (MessageEvent.t_0_to_js x7050)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x7052 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7052) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x7054 : 'tags this) ->
        fun (x7055 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7054) "messageerror"
            (MessageEvent.t_0_to_js x7055)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface133:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WorkerNavigator.t
                          val set_prototype : t -> WorkerNavigator.t -> unit
                          val create : t -> WorkerNavigator.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7058 : Ojs.t) -> x7058
    and t_to_js : t -> Ojs.t = fun (x7057 : Ojs.t) -> x7057
    let (get_prototype : t -> WorkerNavigator.t) =
      fun (x7059 : t) ->
        WorkerNavigator.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7059) "prototype")
    let (set_prototype : t -> WorkerNavigator.t -> unit) =
      fun (x7060 : t) ->
        fun (x7061 : WorkerNavigator.t) ->
          Ojs.set_prop_ascii (t_to_js x7060) "prototype"
            (WorkerNavigator.t_to_js x7061)
    let (create : t -> WorkerNavigator.t) =
      fun (x7062 : t) ->
        WorkerNavigator.t_of_js (Ojs.new_obj (t_to_js x7062) [||])
  end
 and
  WorkerNavigator:sig
                    type t =
                      [ `NavigatorConcurrentHardware  | `NavigatorID 
                      | `NavigatorLanguage  | `NavigatorNetworkInformation 
                      | `NavigatorOnLine  | `NavigatorStorage 
                      | `WorkerNavigator ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags =
                      [ `NavigatorConcurrentHardware  | `NavigatorID 
                      | `NavigatorLanguage  | `NavigatorNetworkInformation 
                      | `NavigatorOnLine  | `NavigatorStorage 
                      | `WorkerNavigator ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags =
                        [ `NavigatorConcurrentHardware  | `NavigatorID 
                        | `NavigatorLanguage  | `NavigatorNetworkInformation 
                        | `NavigatorOnLine  | `NavigatorStorage 
                        | `WorkerNavigator ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `WorkerNavigator ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_mediaCapabilities :
                      'tags this -> MediaCapabilities.t
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create : unit -> t
                  end =
  struct
    type t =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7064 : Ojs.t) -> t_of_js x7064
    and t_0_to_js : t_0 -> Ojs.t = fun (x7063 : t) -> t_to_js x7063
    type tags =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerNavigator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7067 : Ojs.t) -> intf_of_js __tags_of_js x7067
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7065 : __tags intf) -> intf_to_js __tags_to_js x7065
    let (get_mediaCapabilities : 'tags this -> MediaCapabilities.t) =
      fun (x7069 : 'tags this) ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7069)
             "mediaCapabilities")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") [||])
  end
module rec
  AnonymousInterface132:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WorkerLocation.t
                          val set_prototype : t -> WorkerLocation.t -> unit
                          val create : t -> WorkerLocation.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7072 : Ojs.t) -> x7072
    and t_to_js : t -> Ojs.t = fun (x7071 : Ojs.t) -> x7071
    let (get_prototype : t -> WorkerLocation.t) =
      fun (x7073 : t) ->
        WorkerLocation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7073) "prototype")
    let (set_prototype : t -> WorkerLocation.t -> unit) =
      fun (x7074 : t) ->
        fun (x7075 : WorkerLocation.t) ->
          Ojs.set_prop_ascii (t_to_js x7074) "prototype"
            (WorkerLocation.t_to_js x7075)
    let (create : t -> WorkerLocation.t) =
      fun (x7076 : t) ->
        WorkerLocation.t_of_js (Ojs.new_obj (t_to_js x7076) [||])
  end
 and
  WorkerLocation:sig
                   type t = [ `WorkerLocation ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `WorkerLocation ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `WorkerLocation ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `WorkerLocation ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_hash : 'tags this -> string
                   val get_host : 'tags this -> string
                   val get_hostname : 'tags this -> string
                   val get_href : 'tags this -> string
                   val toString : 'tags this -> string
                   val get_origin : 'tags this -> string
                   val get_pathname : 'tags this -> string
                   val get_port : 'tags this -> string
                   val get_protocol : 'tags this -> string
                   val get_search : 'tags this -> string
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                 end =
  struct
    type t = [ `WorkerLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7078 : Ojs.t) -> t_of_js x7078
    and t_0_to_js : t_0 -> Ojs.t = fun (x7077 : t) -> t_to_js x7077
    type tags = [ `WorkerLocation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7081 : Ojs.t) -> intf_of_js __tags_of_js x7081
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7079 : __tags intf) -> intf_to_js __tags_to_js x7079
    let (get_hash : 'tags this -> string) =
      fun (x7083 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7083) "hash")
    let (get_host : 'tags this -> string) =
      fun (x7085 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7085) "host")
    let (get_hostname : 'tags this -> string) =
      fun (x7087 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7087) "hostname")
    let (get_href : 'tags this -> string) =
      fun (x7089 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7089) "href")
    let (toString : 'tags this -> string) =
      fun (x7091 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x7091) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x7093 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7093) "origin")
    let (get_pathname : 'tags this -> string) =
      fun (x7095 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7095) "pathname")
    let (get_port : 'tags this -> string) =
      fun (x7097 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7097) "port")
    let (get_protocol : 'tags this -> string) =
      fun (x7099 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7099) "protocol")
    let (get_search : 'tags this -> string) =
      fun (x7101 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7101) "search")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerLocation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerLocation") [||])
  end
module VoidFunction =
  struct
    type t = [ `VoidFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7104 : Ojs.t) -> t_of_js x7104
    and t_0_to_js : t_0 -> Ojs.t = fun (x7103 : t) -> t_to_js x7103
    type tags = [ `VoidFunction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VoidFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7107 : Ojs.t) -> intf_of_js __tags_of_js x7107
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7105 : __tags intf) -> intf_to_js __tags_to_js x7105
    let (apply : 'tags this -> unit) =
      fun (x7109 : 'tags this) ->
        ignore (Ojs.apply (this_to_js Obj.magic x7109) [||])
    let cast_from = Obj.magic
  end
module TimerHandler =
  struct
    type t = untyped_function or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x7113 : Ojs.t) -> or_string_of_js untyped_function_of_js x7113
    and t_to_js : t -> Ojs.t =
      fun (x7111 : untyped_function or_string) ->
        or_string_to_js untyped_function_to_js x7111
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7116 : Ojs.t) -> t_of_js x7116
    and t_0_to_js : t_0 -> Ojs.t = fun (x7115 : t) -> t_to_js x7115
  end
module OffscreenCanvas =
  struct
    type t = [ `EventTarget  | `OffscreenCanvas ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7118 : Ojs.t) -> t_of_js x7118
    and t_0_to_js : t_0 -> Ojs.t = fun (x7117 : t) -> t_to_js x7117
    type tags = [ `EventTarget  | `OffscreenCanvas ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvas ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7121 : Ojs.t) -> intf_of_js __tags_of_js x7121
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7119 : __tags intf) -> intf_to_js __tags_to_js x7119
    let cast_from = Obj.magic
  end
module CanvasImageSource =
  struct
    type t = (ImageBitmap.t, OffscreenCanvas.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x7126 : Ojs.t) ->
        union2_of_js ImageBitmap.t_of_js OffscreenCanvas.t_of_js x7126
    and t_to_js : t -> Ojs.t =
      fun (x7123 : (ImageBitmap.t, OffscreenCanvas.t) union2) ->
        union2_to_js ImageBitmap.t_to_js OffscreenCanvas.t_to_js x7123
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7130 : Ojs.t) -> t_of_js x7130
    and t_0_to_js : t_0 -> Ojs.t = fun (x7129 : t) -> t_to_js x7129
  end
module PredefinedColorSpace =
  struct
    type t = [ `L_s61_display_p3  | `L_s183_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7132 : Ojs.t) ->
        let x7133 = x7132 in
        match Ojs.string_of_js x7133 with
        | "display-p3" -> `L_s61_display_p3
        | "srgb" -> `L_s183_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7131 : [ `L_s61_display_p3  | `L_s183_srgb ]) ->
        match x7131 with
        | `L_s61_display_p3 -> Ojs.string_to_js "display-p3"
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7135 : Ojs.t) -> t_of_js x7135
    and t_0_to_js : t_0 -> Ojs.t = fun (x7134 : t) -> t_to_js x7134
  end
module ImageDataSettings =
  struct
    type t = [ `ImageDataSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7137 : Ojs.t) -> t_of_js x7137
    and t_0_to_js : t_0 -> Ojs.t = fun (x7136 : t) -> t_to_js x7136
    type tags = [ `ImageDataSettings ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageDataSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7140 : Ojs.t) -> intf_of_js __tags_of_js x7140
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7138 : __tags intf) -> intf_to_js __tags_to_js x7138
    let (get_colorSpace : 'tags this -> PredefinedColorSpace.t) =
      fun (x7142 : 'tags this) ->
        PredefinedColorSpace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7142) "colorSpace")
    let (set_colorSpace : 'tags this -> PredefinedColorSpace.t -> unit) =
      fun (x7144 : 'tags this) ->
        fun (x7145 : PredefinedColorSpace.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7144) "colorSpace"
            (PredefinedColorSpace.t_to_js x7145)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface57:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ImageData.t
                         val set_prototype : t -> ImageData.t -> unit
                         val create :
                           t ->
                             sw:float ->
                               sh:float ->
                                 ?settings:ImageDataSettings.t ->
                                   unit -> ImageData.t
                         val create' :
                           t ->
                             data:Uint8ClampedArray.t_0 ->
                               sw:float ->
                                 ?sh:float ->
                                   ?settings:ImageDataSettings.t ->
                                     unit -> ImageData.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7148 : Ojs.t) -> x7148
    and t_to_js : t -> Ojs.t = fun (x7147 : Ojs.t) -> x7147
    let (get_prototype : t -> ImageData.t) =
      fun (x7149 : t) ->
        ImageData.t_of_js (Ojs.get_prop_ascii (t_to_js x7149) "prototype")
    let (set_prototype : t -> ImageData.t -> unit) =
      fun (x7150 : t) ->
        fun (x7151 : ImageData.t) ->
          Ojs.set_prop_ascii (t_to_js x7150) "prototype"
            (ImageData.t_to_js x7151)
    let (create :
      t ->
        sw:float ->
          sh:float -> ?settings:ImageDataSettings.t -> unit -> ImageData.t)
      =
      fun (x7157 : t) ->
        fun ~sw:(x7152 : float) ->
          fun ~sh:(x7153 : float) ->
            fun ?settings:(x7154 : ImageDataSettings.t option) ->
              fun () ->
                ImageData.t_of_js
                  (Ojs.new_obj_arr (t_to_js x7157)
                     (let x7155 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x7155 "push" [|(Ojs.float_to_js x7152)|]);
                      ignore
                        (Ojs.call x7155 "push" [|(Ojs.float_to_js x7153)|]);
                      (match x7154 with
                       | Some x7156 ->
                           ignore
                             (Ojs.call x7155 "push"
                                [|(ImageDataSettings.t_to_js x7156)|])
                       | None -> ());
                      x7155))
    let (create' :
      t ->
        data:Uint8ClampedArray.t_0 ->
          sw:float ->
            ?sh:float -> ?settings:ImageDataSettings.t -> unit -> ImageData.t)
      =
      fun (x7165 : t) ->
        fun ~data:(x7158 : Uint8ClampedArray.t_0) ->
          fun ~sw:(x7159 : float) ->
            fun ?sh:(x7160 : float option) ->
              fun ?settings:(x7161 : ImageDataSettings.t option) ->
                fun () ->
                  ImageData.t_of_js
                    (Ojs.new_obj_arr (t_to_js x7165)
                       (let x7162 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x7162 "push"
                             [|(Uint8ClampedArray.t_0_to_js x7158)|]);
                        ignore
                          (Ojs.call x7162 "push" [|(Ojs.float_to_js x7159)|]);
                        (match x7160 with
                         | Some x7164 ->
                             ignore
                               (Ojs.call x7162 "push"
                                  [|(Ojs.float_to_js x7164)|])
                         | None -> ());
                        (match x7161 with
                         | Some x7163 ->
                             ignore
                               (Ojs.call x7162 "push"
                                  [|(ImageDataSettings.t_to_js x7163)|])
                         | None -> ());
                        x7162))
  end
 and
  ImageData:sig
              type t = [ `ImageData ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `ImageData ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `ImageData ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_data : 'tags this -> Uint8ClampedArray.t_0
              val get_height : 'tags this -> float
              val get_width : 'tags this -> float
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create :
                sw:float ->
                  sh:float -> ?settings:ImageDataSettings.t -> unit -> t
              val create' :
                data:Uint8ClampedArray.t_0 ->
                  sw:float ->
                    ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t
            end =
  struct
    type t = [ `ImageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7167 : Ojs.t) -> t_of_js x7167
    and t_0_to_js : t_0 -> Ojs.t = fun (x7166 : t) -> t_to_js x7166
    type tags = [ `ImageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7170 : Ojs.t) -> intf_of_js __tags_of_js x7170
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7168 : __tags intf) -> intf_to_js __tags_to_js x7168
    let (get_data : 'tags this -> Uint8ClampedArray.t_0) =
      fun (x7172 : 'tags this) ->
        Uint8ClampedArray.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7172) "data")
    let (get_height : 'tags this -> float) =
      fun (x7174 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7174) "height")
    let (get_width : 'tags this -> float) =
      fun (x7176 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7176) "width")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageData")
             "prototype")
    let (create :
      sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> t) =
      fun ~sw:(x7178 : float) ->
        fun ~sh:(x7179 : float) ->
          fun ?settings:(x7180 : ImageDataSettings.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ImageData")
                   (let x7181 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x7181 "push" [|(Ojs.float_to_js x7178)|]);
                    ignore
                      (Ojs.call x7181 "push" [|(Ojs.float_to_js x7179)|]);
                    (match x7180 with
                     | Some x7182 ->
                         ignore
                           (Ojs.call x7181 "push"
                              [|(ImageDataSettings.t_to_js x7182)|])
                     | None -> ());
                    x7181))
    let (create' :
      data:Uint8ClampedArray.t_0 ->
        sw:float -> ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t)
      =
      fun ~data:(x7183 : Uint8ClampedArray.t_0) ->
        fun ~sw:(x7184 : float) ->
          fun ?sh:(x7185 : float option) ->
            fun ?settings:(x7186 : ImageDataSettings.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "ImageData")
                     (let x7187 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x7187 "push"
                           [|(Uint8ClampedArray.t_0_to_js x7183)|]);
                      ignore
                        (Ojs.call x7187 "push" [|(Ojs.float_to_js x7184)|]);
                      (match x7185 with
                       | Some x7189 ->
                           ignore
                             (Ojs.call x7187 "push"
                                [|(Ojs.float_to_js x7189)|])
                       | None -> ());
                      (match x7186 with
                       | Some x7188 ->
                           ignore
                             (Ojs.call x7187 "push"
                                [|(ImageDataSettings.t_to_js x7188)|])
                       | None -> ());
                      x7187))
  end
module ImageBitmapSource =
  struct
    type t = (Blob.t, CanvasImageSource.t, ImageData.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x7194 : Ojs.t) ->
        union3_of_js Blob.t_of_js CanvasImageSource.t_of_js ImageData.t_of_js
          x7194
    and t_to_js : t -> Ojs.t =
      fun (x7190 : (Blob.t, CanvasImageSource.t, ImageData.t) union3) ->
        union3_to_js Blob.t_to_js CanvasImageSource.t_to_js ImageData.t_to_js
          x7190
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7199 : Ojs.t) -> t_of_js x7199
    and t_0_to_js : t_0 -> Ojs.t = fun (x7198 : t) -> t_to_js x7198
  end
module ResizeQuality =
  struct
    type t =
      [ `L_s84_high  | `L_s106_low  | `L_s112_medium  | `L_s149_pixelated ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7201 : Ojs.t) ->
        let x7202 = x7201 in
        match Ojs.string_of_js x7202 with
        | "high" -> `L_s84_high
        | "low" -> `L_s106_low
        | "medium" -> `L_s112_medium
        | "pixelated" -> `L_s149_pixelated
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x7200 :
          [ `L_s84_high  | `L_s106_low  | `L_s112_medium 
          | `L_s149_pixelated ])
        ->
        match x7200 with
        | `L_s84_high -> Ojs.string_to_js "high"
        | `L_s106_low -> Ojs.string_to_js "low"
        | `L_s112_medium -> Ojs.string_to_js "medium"
        | `L_s149_pixelated -> Ojs.string_to_js "pixelated"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7204 : Ojs.t) -> t_of_js x7204
    and t_0_to_js : t_0 -> Ojs.t = fun (x7203 : t) -> t_to_js x7203
  end
module PremultiplyAlpha =
  struct
    type t = [ `L_s57_default  | `L_s128_none  | `L_s152_premultiply ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7206 : Ojs.t) ->
        let x7207 = x7206 in
        match Ojs.string_of_js x7207 with
        | "default" -> `L_s57_default
        | "none" -> `L_s128_none
        | "premultiply" -> `L_s152_premultiply
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7205 : [ `L_s57_default  | `L_s128_none  | `L_s152_premultiply ])
        ->
        match x7205 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s152_premultiply -> Ojs.string_to_js "premultiply"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7209 : Ojs.t) -> t_of_js x7209
    and t_0_to_js : t_0 -> Ojs.t = fun (x7208 : t) -> t_to_js x7208
  end
module ImageOrientation =
  struct
    type t = [ `L_s74_flipY  | `L_s128_none ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7211 : Ojs.t) ->
        let x7212 = x7211 in
        match Ojs.string_of_js x7212 with
        | "flipY" -> `L_s74_flipY
        | "none" -> `L_s128_none
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7210 : [ `L_s74_flipY  | `L_s128_none ]) ->
        match x7210 with
        | `L_s74_flipY -> Ojs.string_to_js "flipY"
        | `L_s128_none -> Ojs.string_to_js "none"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7214 : Ojs.t) -> t_of_js x7214
    and t_0_to_js : t_0 -> Ojs.t = fun (x7213 : t) -> t_to_js x7213
  end
module ColorSpaceConversion =
  struct
    type t = [ `L_s57_default  | `L_s128_none ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7216 : Ojs.t) ->
        let x7217 = x7216 in
        match Ojs.string_of_js x7217 with
        | "default" -> `L_s57_default
        | "none" -> `L_s128_none
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7215 : [ `L_s57_default  | `L_s128_none ]) ->
        match x7215 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s128_none -> Ojs.string_to_js "none"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7219 : Ojs.t) -> t_of_js x7219
    and t_0_to_js : t_0 -> Ojs.t = fun (x7218 : t) -> t_to_js x7218
  end
module ImageBitmapOptions =
  struct
    type t = [ `ImageBitmapOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7221 : Ojs.t) -> t_of_js x7221
    and t_0_to_js : t_0 -> Ojs.t = fun (x7220 : t) -> t_to_js x7220
    type tags = [ `ImageBitmapOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7224 : Ojs.t) -> intf_of_js __tags_of_js x7224
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7222 : __tags intf) -> intf_to_js __tags_to_js x7222
    let (get_colorSpaceConversion : 'tags this -> ColorSpaceConversion.t) =
      fun (x7226 : 'tags this) ->
        ColorSpaceConversion.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7226)
             "colorSpaceConversion")
    let (set_colorSpaceConversion :
      'tags this -> ColorSpaceConversion.t -> unit) =
      fun (x7228 : 'tags this) ->
        fun (x7229 : ColorSpaceConversion.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7228)
            "colorSpaceConversion" (ColorSpaceConversion.t_to_js x7229)
    let (get_imageOrientation : 'tags this -> ImageOrientation.t) =
      fun (x7231 : 'tags this) ->
        ImageOrientation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7231) "imageOrientation")
    let (set_imageOrientation : 'tags this -> ImageOrientation.t -> unit) =
      fun (x7233 : 'tags this) ->
        fun (x7234 : ImageOrientation.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7233) "imageOrientation"
            (ImageOrientation.t_to_js x7234)
    let (get_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t) =
      fun (x7236 : 'tags this) ->
        PremultiplyAlpha.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7236) "premultiplyAlpha")
    let (set_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t -> unit) =
      fun (x7238 : 'tags this) ->
        fun (x7239 : PremultiplyAlpha.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7238) "premultiplyAlpha"
            (PremultiplyAlpha.t_to_js x7239)
    let (get_resizeHeight : 'tags this -> float) =
      fun (x7241 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7241) "resizeHeight")
    let (set_resizeHeight : 'tags this -> float -> unit) =
      fun (x7243 : 'tags this) ->
        fun (x7244 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7243) "resizeHeight"
            (Ojs.float_to_js x7244)
    let (get_resizeQuality : 'tags this -> ResizeQuality.t) =
      fun (x7246 : 'tags this) ->
        ResizeQuality.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7246) "resizeQuality")
    let (set_resizeQuality : 'tags this -> ResizeQuality.t -> unit) =
      fun (x7248 : 'tags this) ->
        fun (x7249 : ResizeQuality.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7248) "resizeQuality"
            (ResizeQuality.t_to_js x7249)
    let (get_resizeWidth : 'tags this -> float) =
      fun (x7251 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7251) "resizeWidth")
    let (set_resizeWidth : 'tags this -> float -> unit) =
      fun (x7253 : 'tags this) ->
        fun (x7254 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7253) "resizeWidth"
            (Ojs.float_to_js x7254)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface47:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBFactory.t
                         val set_prototype : t -> IDBFactory.t -> unit
                         val create : t -> IDBFactory.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7257 : Ojs.t) -> x7257
    and t_to_js : t -> Ojs.t = fun (x7256 : Ojs.t) -> x7256
    let (get_prototype : t -> IDBFactory.t) =
      fun (x7258 : t) ->
        IDBFactory.t_of_js (Ojs.get_prop_ascii (t_to_js x7258) "prototype")
    let (set_prototype : t -> IDBFactory.t -> unit) =
      fun (x7259 : t) ->
        fun (x7260 : IDBFactory.t) ->
          Ojs.set_prop_ascii (t_to_js x7259) "prototype"
            (IDBFactory.t_to_js x7260)
    let (create : t -> IDBFactory.t) =
      fun (x7261 : t) ->
        IDBFactory.t_of_js (Ojs.new_obj (t_to_js x7261) [||])
  end
 and
  IDBFactory:sig
               type t = [ `IDBFactory ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `IDBFactory ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem type tags = [ `IDBFactory ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `IDBFactory ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val cmp : 'tags this -> first:any -> second:any -> float
               val databases :
                 'tags this -> IDBDatabaseInfo.t list Promise.t_1
               val deleteDatabase :
                 'tags this -> name:string -> IDBOpenDBRequest.t
               val open_ :
                 'tags this ->
                   name:string ->
                     ?version:float -> unit -> IDBOpenDBRequest.t
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create : unit -> t
             end =
  struct
    type t = [ `IDBFactory ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7263 : Ojs.t) -> t_of_js x7263
    and t_0_to_js : t_0 -> Ojs.t = fun (x7262 : t) -> t_to_js x7262
    type tags = [ `IDBFactory ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBFactory ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7266 : Ojs.t) -> intf_of_js __tags_of_js x7266
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7264 : __tags intf) -> intf_to_js __tags_to_js x7264
    let (cmp : 'tags this -> first:any -> second:any -> float) =
      fun (x7270 : 'tags this) ->
        fun ~first:(x7268 : any) ->
          fun ~second:(x7269 : any) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x7270) "cmp"
                 [|(any_to_js x7268);(any_to_js x7269)|])
    let (databases : 'tags this -> IDBDatabaseInfo.t list Promise.t_1) =
      fun (x7272 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x7274 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x7274)
          (Ojs.call (this_to_js Obj.magic x7272) "databases" [||])
    let (deleteDatabase : 'tags this -> name:string -> IDBOpenDBRequest.t) =
      fun (x7277 : 'tags this) ->
        fun ~name:(x7276 : string) ->
          IDBOpenDBRequest.t_of_js
            (Ojs.call (this_to_js Obj.magic x7277) "deleteDatabase"
               [|(Ojs.string_to_js x7276)|])
    let (open_ :
      'tags this ->
        name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun (x7283 : 'tags this) ->
        fun ~name:(x7279 : string) ->
          fun ?version:(x7280 : float option) ->
            fun () ->
              IDBOpenDBRequest.t_of_js
                (let x7285 = this_to_js Obj.magic x7283 in
                 Ojs.call (Ojs.get_prop_ascii x7285 "open") "apply"
                   [|x7285;((let x7281 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7281 "push"
                                  [|(Ojs.string_to_js x7279)|]);
                             (match x7280 with
                              | Some x7282 ->
                                  ignore
                                    (Ojs.call x7281 "push"
                                       [|(Ojs.float_to_js x7282)|])
                              | None -> ());
                             x7281))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBFactory")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBFactory") [||])
  end
module rec
  AnonymousInterface14:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Crypto.t
                         val set_prototype : t -> Crypto.t -> unit
                         val create : t -> Crypto.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7287 : Ojs.t) -> x7287
    and t_to_js : t -> Ojs.t = fun (x7286 : Ojs.t) -> x7286
    let (get_prototype : t -> Crypto.t) =
      fun (x7288 : t) ->
        Crypto.t_of_js (Ojs.get_prop_ascii (t_to_js x7288) "prototype")
    let (set_prototype : t -> Crypto.t -> unit) =
      fun (x7289 : t) ->
        fun (x7290 : Crypto.t) ->
          Ojs.set_prop_ascii (t_to_js x7289) "prototype"
            (Crypto.t_to_js x7290)
    let (create : t -> Crypto.t) =
      fun (x7291 : t) -> Crypto.t_of_js (Ojs.new_obj (t_to_js x7291) [||])
  end
 and
  Crypto:sig
           type t = [ `Crypto ] intf
           type t_0 = t
           [@@@js.stop ]
           type tags = [ `Crypto ]
           type tags_0 = tags
           [@@@js.start ]
           [@@@js.implem type tags = [ `Crypto ]
             type tags_0 = tags]
           type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
           val t_to_js : t -> Ojs.t
           val t_of_js : Ojs.t -> t
           val t_0_to_js : t_0 -> Ojs.t
           val t_0_of_js : Ojs.t -> t_0
           val get_subtle : 'tags this -> SubtleCrypto.t
           val getRandomValues : 'tags this -> array:'T -> 'T
           val cast_from : 'tags this -> t
           val prototype : unit -> t
           val create : unit -> t
         end =
  struct
    type t = [ `Crypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7293 : Ojs.t) -> t_of_js x7293
    and t_0_to_js : t_0 -> Ojs.t = fun (x7292 : t) -> t_to_js x7292
    type tags = [ `Crypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7296 : Ojs.t) -> intf_of_js __tags_of_js x7296
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7294 : __tags intf) -> intf_to_js __tags_to_js x7294
    let (get_subtle : 'tags this -> SubtleCrypto.t) =
      fun (x7298 : 'tags this) ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7298) "subtle")
    let (getRandomValues : 'tags this -> array:'T -> 'T) =
      fun (x7301 : 'tags this) ->
        fun ~array:(x7300 : 'T) ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic x7301) "getRandomValues"
               [|(Obj.magic x7300)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Crypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Crypto") [||])
  end
module rec
  AnonymousInterface6:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> CacheStorage.t
                        val set_prototype : t -> CacheStorage.t -> unit
                        val create : t -> CacheStorage.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7304 : Ojs.t) -> x7304
    and t_to_js : t -> Ojs.t = fun (x7303 : Ojs.t) -> x7303
    let (get_prototype : t -> CacheStorage.t) =
      fun (x7305 : t) ->
        CacheStorage.t_of_js (Ojs.get_prop_ascii (t_to_js x7305) "prototype")
    let (set_prototype : t -> CacheStorage.t -> unit) =
      fun (x7306 : t) ->
        fun (x7307 : CacheStorage.t) ->
          Ojs.set_prop_ascii (t_to_js x7306) "prototype"
            (CacheStorage.t_to_js x7307)
    let (create : t -> CacheStorage.t) =
      fun (x7308 : t) ->
        CacheStorage.t_of_js (Ojs.new_obj (t_to_js x7308) [||])
  end
 and
  CacheStorage:sig
                 type t = [ `CacheStorage ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `CacheStorage ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `CacheStorage ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `CacheStorage ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val delete :
                   'tags this -> cacheName:string -> bool Promise.t_1
                 val has : 'tags this -> cacheName:string -> bool Promise.t_1
                 val keys : 'tags this -> string list Promise.t_1
                 val match_ :
                   'tags this ->
                     request:RequestInfo.t ->
                       ?options:MultiCacheQueryOptions.t ->
                         unit -> Response.t or_undefined Promise.t_1
                 val open_ :
                   'tags this -> cacheName:string -> Cache.t Promise.t_1
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `CacheStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7310 : Ojs.t) -> t_of_js x7310
    and t_0_to_js : t_0 -> Ojs.t = fun (x7309 : t) -> t_to_js x7309
    type tags = [ `CacheStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7313 : Ojs.t) -> intf_of_js __tags_of_js x7313
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7311 : __tags intf) -> intf_to_js __tags_to_js x7311
    let (delete : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x7316 : 'tags this) ->
        fun ~cacheName:(x7315 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x7316) "delete"
               [|(Ojs.string_to_js x7315)|])
    let (has : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x7320 : 'tags this) ->
        fun ~cacheName:(x7319 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x7320) "has"
               [|(Ojs.string_to_js x7319)|])
    let (keys : 'tags this -> string list Promise.t_1) =
      fun (x7323 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x7325 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x7325)
          (Ojs.call (this_to_js Obj.magic x7323) "keys" [||])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:MultiCacheQueryOptions.t ->
            unit -> Response.t or_undefined Promise.t_1)
      =
      fun (x7331 : 'tags this) ->
        fun ~request:(x7327 : RequestInfo.t) ->
          fun ?options:(x7328 : MultiCacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x7334 : Ojs.t) ->
                   or_undefined_of_js Response.t_of_js x7334)
                (let x7333 = this_to_js Obj.magic x7331 in
                 Ojs.call (Ojs.get_prop_ascii x7333 "match") "apply"
                   [|x7333;((let x7329 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7329 "push"
                                  [|(RequestInfo.t_to_js x7327)|]);
                             (match x7328 with
                              | Some x7330 ->
                                  ignore
                                    (Ojs.call x7329 "push"
                                       [|(MultiCacheQueryOptions.t_to_js
                                            x7330)|])
                              | None -> ());
                             x7329))|])
    let (open_ : 'tags this -> cacheName:string -> Cache.t Promise.t_1) =
      fun (x7337 : 'tags this) ->
        fun ~cacheName:(x7336 : string) ->
          Promise.t_1_of_js Cache.t_of_js
            (Ojs.call (this_to_js Obj.magic x7337) "open"
               [|(Ojs.string_to_js x7336)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CacheStorage")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CacheStorage") [||])
  end
module WindowOrWorkerGlobalScope =
  struct
    type t = [ `WindowOrWorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7341 : Ojs.t) -> t_of_js x7341
    and t_0_to_js : t_0 -> Ojs.t = fun (x7340 : t) -> t_to_js x7340
    type tags = [ `WindowOrWorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WindowOrWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7344 : Ojs.t) -> intf_of_js __tags_of_js x7344
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7342 : __tags intf) -> intf_to_js __tags_to_js x7342
    let (get_caches : 'tags this -> CacheStorage.t) =
      fun (x7346 : 'tags this) ->
        CacheStorage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7346) "caches")
    let (get_crossOriginIsolated : 'tags this -> bool) =
      fun (x7348 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7348)
             "crossOriginIsolated")
    let (get_crypto : 'tags this -> Crypto.t) =
      fun (x7350 : 'tags this) ->
        Crypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7350) "crypto")
    let (get_indexedDB : 'tags this -> IDBFactory.t) =
      fun (x7352 : 'tags this) ->
        IDBFactory.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7352) "indexedDB")
    let (get_isSecureContext : 'tags this -> bool) =
      fun (x7354 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7354) "isSecureContext")
    let (get_origin : 'tags this -> string) =
      fun (x7356 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7356) "origin")
    let (get_performance : 'tags this -> Performance.t) =
      fun (x7358 : 'tags this) ->
        Performance.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7358) "performance")
    let (atob : 'tags this -> data:string -> string) =
      fun (x7361 : 'tags this) ->
        fun ~data:(x7360 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7361) "atob"
               [|(Ojs.string_to_js x7360)|])
    let (btoa : 'tags this -> data:string -> string) =
      fun (x7364 : 'tags this) ->
        fun ~data:(x7363 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7364) "btoa"
               [|(Ojs.string_to_js x7363)|])
    let (clearInterval : 'tags this -> ?handle:float -> unit -> unit) =
      fun (x7369 : 'tags this) ->
        fun ?handle:(x7366 : float option) ->
          fun () ->
            ignore
              (let x7371 = this_to_js Obj.magic x7369 in
               Ojs.call (Ojs.get_prop_ascii x7371 "clearInterval") "apply"
                 [|x7371;((let x7367 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7366 with
                            | Some x7368 ->
                                ignore
                                  (Ojs.call x7367 "push"
                                     [|(Ojs.float_to_js x7368)|])
                            | None -> ());
                           x7367))|])
    let (clearTimeout : 'tags this -> ?handle:float -> unit -> unit) =
      fun (x7375 : 'tags this) ->
        fun ?handle:(x7372 : float option) ->
          fun () ->
            ignore
              (let x7377 = this_to_js Obj.magic x7375 in
               Ojs.call (Ojs.get_prop_ascii x7377 "clearTimeout") "apply"
                 [|x7377;((let x7373 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7372 with
                            | Some x7374 ->
                                ignore
                                  (Ojs.call x7373 "push"
                                     [|(Ojs.float_to_js x7374)|])
                            | None -> ());
                           x7373))|])
    let (createImageBitmap :
      'tags this ->
        image:ImageBitmapSource.t ->
          ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x7382 : 'tags this) ->
        fun ~image:(x7378 : ImageBitmapSource.t) ->
          fun ?options:(x7379 : ImageBitmapOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ImageBitmap.t_of_js
                (let x7384 = this_to_js Obj.magic x7382 in
                 Ojs.call (Ojs.get_prop_ascii x7384 "createImageBitmap")
                   "apply"
                   [|x7384;((let x7380 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7380 "push"
                                  [|(ImageBitmapSource.t_to_js x7378)|]);
                             (match x7379 with
                              | Some x7381 ->
                                  ignore
                                    (Ojs.call x7380 "push"
                                       [|(ImageBitmapOptions.t_to_js x7381)|])
                              | None -> ());
                             x7380))|])
    let (createImageBitmap' :
      'tags this ->
        image:ImageBitmapSource.t ->
          sx:float ->
            sy:float ->
              sw:float ->
                sh:float ->
                  ?options:ImageBitmapOptions.t ->
                    unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x7394 : 'tags this) ->
        fun ~image:(x7386 : ImageBitmapSource.t) ->
          fun ~sx:(x7387 : float) ->
            fun ~sy:(x7388 : float) ->
              fun ~sw:(x7389 : float) ->
                fun ~sh:(x7390 : float) ->
                  fun ?options:(x7391 : ImageBitmapOptions.t option) ->
                    fun () ->
                      Promise.t_1_of_js ImageBitmap.t_of_js
                        (let x7396 = this_to_js Obj.magic x7394 in
                         Ojs.call
                           (Ojs.get_prop_ascii x7396 "createImageBitmap")
                           "apply"
                           [|x7396;((let x7392 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x7392 "push"
                                          [|(ImageBitmapSource.t_to_js x7386)|]);
                                     ignore
                                       (Ojs.call x7392 "push"
                                          [|(Ojs.float_to_js x7387)|]);
                                     ignore
                                       (Ojs.call x7392 "push"
                                          [|(Ojs.float_to_js x7388)|]);
                                     ignore
                                       (Ojs.call x7392 "push"
                                          [|(Ojs.float_to_js x7389)|]);
                                     ignore
                                       (Ojs.call x7392 "push"
                                          [|(Ojs.float_to_js x7390)|]);
                                     (match x7391 with
                                      | Some x7393 ->
                                          ignore
                                            (Ojs.call x7392 "push"
                                               [|(ImageBitmapOptions.t_to_js
                                                    x7393)|])
                                      | None -> ());
                                     x7392))|])
    let (fetch :
      'tags this ->
        input:RequestInfo.t ->
          ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
      =
      fun (x7402 : 'tags this) ->
        fun ~input:(x7398 : RequestInfo.t) ->
          fun ?init:(x7399 : RequestInit.t option) ->
            fun () ->
              Promise.t_1_of_js Response.t_of_js
                (let x7404 = this_to_js Obj.magic x7402 in
                 Ojs.call (Ojs.get_prop_ascii x7404 "fetch") "apply"
                   [|x7404;((let x7400 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7400 "push"
                                  [|(RequestInfo.t_to_js x7398)|]);
                             (match x7399 with
                              | Some x7401 ->
                                  ignore
                                    (Ojs.call x7400 "push"
                                       [|(RequestInit.t_to_js x7401)|])
                              | None -> ());
                             x7400))|])
    let (queueMicrotask : 'tags this -> callback:VoidFunction.t -> unit) =
      fun (x7407 : 'tags this) ->
        fun ~callback:(x7406 : VoidFunction.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7407) "queueMicrotask"
               [|(VoidFunction.t_to_js x7406)|])
    let (setInterval :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x7415 : 'tags this) ->
        fun ~handler:(x7409 : TimerHandler.t) ->
          fun ?timeout:(x7410 : float option) ->
            fun ~arguments:(x7411 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x7417 = this_to_js Obj.magic x7415 in
                   Ojs.call (Ojs.get_prop_ascii x7417 "setInterval") "apply"
                     [|x7417;((let x7412 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7412 "push"
                                    [|(TimerHandler.t_to_js x7409)|]);
                               (match x7410 with
                                | Some x7414 ->
                                    ignore
                                      (Ojs.call x7412 "push"
                                         [|(Ojs.float_to_js x7414)|])
                                | None -> ());
                               List.iter
                                 (fun (x7413 : any) ->
                                    ignore
                                      (Ojs.call x7412 "push"
                                         [|(any_to_js x7413)|])) x7411;
                               x7412))|])
    let (setTimeout :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x7424 : 'tags this) ->
        fun ~handler:(x7418 : TimerHandler.t) ->
          fun ?timeout:(x7419 : float option) ->
            fun ~arguments:(x7420 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x7426 = this_to_js Obj.magic x7424 in
                   Ojs.call (Ojs.get_prop_ascii x7426 "setTimeout") "apply"
                     [|x7426;((let x7421 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7421 "push"
                                    [|(TimerHandler.t_to_js x7418)|]);
                               (match x7419 with
                                | Some x7423 ->
                                    ignore
                                      (Ojs.call x7421 "push"
                                         [|(Ojs.float_to_js x7423)|])
                                | None -> ());
                               List.iter
                                 (fun (x7422 : any) ->
                                    ignore
                                      (Ojs.call x7421 "push"
                                         [|(any_to_js x7422)|])) x7420;
                               x7421))|])
    let cast_from = Obj.magic
  end
module FontFaceSource =
  struct
    type t = [ `FontFaceSource ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7428 : Ojs.t) -> t_of_js x7428
    and t_0_to_js : t_0 -> Ojs.t = fun (x7427 : t) -> t_to_js x7427
    type tags = [ `FontFaceSource ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7431 : Ojs.t) -> intf_of_js __tags_of_js x7431
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7429 : __tags intf) -> intf_to_js __tags_to_js x7429
    let (get_fonts : 'tags this -> FontFaceSet.t) =
      fun (x7433 : 'tags this) ->
        FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7433) "fonts")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface131:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WorkerGlobalScope.t
                          val set_prototype :
                            t -> WorkerGlobalScope.t -> unit
                          val create : t -> WorkerGlobalScope.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7436 : Ojs.t) -> x7436
    and t_to_js : t -> Ojs.t = fun (x7435 : Ojs.t) -> x7435
    let (get_prototype : t -> WorkerGlobalScope.t) =
      fun (x7437 : t) ->
        WorkerGlobalScope.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7437) "prototype")
    let (set_prototype : t -> WorkerGlobalScope.t -> unit) =
      fun (x7438 : t) ->
        fun (x7439 : WorkerGlobalScope.t) ->
          Ojs.set_prop_ascii (t_to_js x7438) "prototype"
            (WorkerGlobalScope.t_to_js x7439)
    let (create : t -> WorkerGlobalScope.t) =
      fun (x7440 : t) ->
        WorkerGlobalScope.t_of_js (Ojs.new_obj (t_to_js x7440) [||])
  end
 and
  WorkerGlobalScope:sig
                      type t =
                        [ `EventTarget  | `FontFaceSource 
                        | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
                          intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags =
                        [ `EventTarget  | `FontFaceSource 
                        | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags =
                          [ `EventTarget  | `FontFaceSource 
                          | `WindowOrWorkerGlobalScope 
                          | `WorkerGlobalScope ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `WorkerGlobalScope ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_location : 'tags this -> WorkerLocation.t
                      val get_navigator : 'tags this -> WorkerNavigator.t
                      val get_onerror :
                        'tags this ->
                          (this:t -> ev:ErrorEvent.t -> any) or_null
                      val set_onerror :
                        'tags this ->
                          (this:t -> ev:ErrorEvent.t -> any) or_null -> unit
                      val get_onlanguagechange :
                        'tags this -> (this:t -> ev:Event.t -> any) or_null
                      val set_onlanguagechange :
                        'tags this ->
                          (this:t -> ev:Event.t -> any) or_null -> unit
                      val get_onoffline :
                        'tags this -> (this:t -> ev:Event.t -> any) or_null
                      val set_onoffline :
                        'tags this ->
                          (this:t -> ev:Event.t -> any) or_null -> unit
                      val get_ononline :
                        'tags this -> (this:t -> ev:Event.t -> any) or_null
                      val set_ononline :
                        'tags this ->
                          (this:t -> ev:Event.t -> any) or_null -> unit
                      val get_onrejectionhandled :
                        'tags this ->
                          (this:t -> ev:PromiseRejectionEvent.t -> any)
                            or_null
                      val set_onrejectionhandled :
                        'tags this ->
                          (this:t -> ev:PromiseRejectionEvent.t -> any)
                            or_null -> unit
                      val get_onunhandledrejection :
                        'tags this ->
                          (this:t -> ev:PromiseRejectionEvent.t -> any)
                            or_null
                      val set_onunhandledrejection :
                        'tags this ->
                          (this:t -> ev:PromiseRejectionEvent.t -> any)
                            or_null -> unit
                      val get_self : 'tags this -> (t, any) intersection2
                      val importScripts :
                        'tags this -> urls:URL.t or_string list -> unit
                      val addEventListener :
                        'tags this ->
                          type_:'K ->
                            listener:(this:t -> ev:any -> any) ->
                              ?options:AddEventListenerOptions.t or_boolean
                                -> unit -> unit
                      val addEventListener' :
                        'tags this ->
                          type_:string ->
                            listener:EventListenerOrEventListenerObject.t ->
                              ?options:AddEventListenerOptions.t or_boolean
                                -> unit -> unit
                      val removeEventListener :
                        'tags this ->
                          type_:'K ->
                            listener:(this:t -> ev:any -> any) ->
                              ?options:EventListenerOptions.t or_boolean ->
                                unit -> unit
                      val removeEventListener' :
                        'tags this ->
                          type_:string ->
                            listener:EventListenerOrEventListenerObject.t ->
                              ?options:EventListenerOptions.t or_boolean ->
                                unit -> unit
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create : unit -> t
                    end =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7442 : Ojs.t) -> t_of_js x7442
    and t_0_to_js : t_0 -> Ojs.t = fun (x7441 : t) -> t_to_js x7441
    type tags =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7445 : Ojs.t) -> intf_of_js __tags_of_js x7445
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7443 : __tags intf) -> intf_to_js __tags_to_js x7443
    let (get_location : 'tags this -> WorkerLocation.t) =
      fun (x7447 : 'tags this) ->
        WorkerLocation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7447) "location")
    let (get_navigator : 'tags this -> WorkerNavigator.t) =
      fun (x7449 : 'tags this) ->
        WorkerNavigator.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7449) "navigator")
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null) =
      fun (x7451 : 'tags this) ->
        or_null_of_js
          (fun (x7453 : Ojs.t) ->
             fun ~this:(x7454 : t) ->
               fun ~ev:(x7455 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x7453
                      [|(t_to_js x7454);(ErrorEvent.t_to_js x7455)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7451) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null -> unit) =
      fun (x7456 : 'tags this) ->
        fun (x7457 : (this:t -> ev:ErrorEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7456) "onerror"
            (or_null_to_js
               (fun (x7458 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7459 : Ojs.t) ->
                       fun (x7460 : Ojs.t) ->
                         any_to_js
                           (x7458 ~this:(t_of_js x7459)
                              ~ev:(ErrorEvent.t_of_js x7460)))) x7457)
    let (get_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x7462 : 'tags this) ->
        or_null_of_js
          (fun (x7464 : Ojs.t) ->
             fun ~this:(x7465 : t) ->
               fun ~ev:(x7466 : Event.t) ->
                 any_of_js
                   (Ojs.apply x7464 [|(t_to_js x7465);(Event.t_to_js x7466)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7462) "onlanguagechange")
    let (set_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x7467 : 'tags this) ->
        fun (x7468 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7467) "onlanguagechange"
            (or_null_to_js
               (fun (x7469 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7470 : Ojs.t) ->
                       fun (x7471 : Ojs.t) ->
                         any_to_js
                           (x7469 ~this:(t_of_js x7470)
                              ~ev:(Event.t_of_js x7471)))) x7468)
    let (get_onoffline : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x7473 : 'tags this) ->
        or_null_of_js
          (fun (x7475 : Ojs.t) ->
             fun ~this:(x7476 : t) ->
               fun ~ev:(x7477 : Event.t) ->
                 any_of_js
                   (Ojs.apply x7475 [|(t_to_js x7476);(Event.t_to_js x7477)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7473) "onoffline")
    let (set_onoffline :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x7478 : 'tags this) ->
        fun (x7479 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7478) "onoffline"
            (or_null_to_js
               (fun (x7480 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7481 : Ojs.t) ->
                       fun (x7482 : Ojs.t) ->
                         any_to_js
                           (x7480 ~this:(t_of_js x7481)
                              ~ev:(Event.t_of_js x7482)))) x7479)
    let (get_ononline : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x7484 : 'tags this) ->
        or_null_of_js
          (fun (x7486 : Ojs.t) ->
             fun ~this:(x7487 : t) ->
               fun ~ev:(x7488 : Event.t) ->
                 any_of_js
                   (Ojs.apply x7486 [|(t_to_js x7487);(Event.t_to_js x7488)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7484) "ononline")
    let (set_ononline :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x7489 : 'tags this) ->
        fun (x7490 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7489) "ononline"
            (or_null_to_js
               (fun (x7491 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7492 : Ojs.t) ->
                       fun (x7493 : Ojs.t) ->
                         any_to_js
                           (x7491 ~this:(t_of_js x7492)
                              ~ev:(Event.t_of_js x7493)))) x7490)
    let (get_onrejectionhandled :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) or_null) =
      fun (x7495 : 'tags this) ->
        or_null_of_js
          (fun (x7497 : Ojs.t) ->
             fun ~this:(x7498 : t) ->
               fun ~ev:(x7499 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x7497
                      [|(t_to_js x7498);(PromiseRejectionEvent.t_to_js x7499)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7495)
             "onrejectionhandled")
    let (set_onrejectionhandled :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) or_null -> unit)
      =
      fun (x7500 : 'tags this) ->
        fun (x7501 : (this:t -> ev:PromiseRejectionEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7500)
            "onrejectionhandled"
            (or_null_to_js
               (fun (x7502 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7503 : Ojs.t) ->
                       fun (x7504 : Ojs.t) ->
                         any_to_js
                           (x7502 ~this:(t_of_js x7503)
                              ~ev:(PromiseRejectionEvent.t_of_js x7504))))
               x7501)
    let (get_onunhandledrejection :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) or_null) =
      fun (x7506 : 'tags this) ->
        or_null_of_js
          (fun (x7508 : Ojs.t) ->
             fun ~this:(x7509 : t) ->
               fun ~ev:(x7510 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x7508
                      [|(t_to_js x7509);(PromiseRejectionEvent.t_to_js x7510)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7506)
             "onunhandledrejection")
    let (set_onunhandledrejection :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) or_null -> unit)
      =
      fun (x7511 : 'tags this) ->
        fun (x7512 : (this:t -> ev:PromiseRejectionEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7511)
            "onunhandledrejection"
            (or_null_to_js
               (fun (x7513 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7514 : Ojs.t) ->
                       fun (x7515 : Ojs.t) ->
                         any_to_js
                           (x7513 ~this:(t_of_js x7514)
                              ~ev:(PromiseRejectionEvent.t_of_js x7515))))
               x7512)
    let (get_self : 'tags this -> (t, any) intersection2) =
      fun (x7517 : 'tags this) ->
        intersection2_of_js t_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7517) "self")
    let (importScripts : 'tags this -> urls:URL.t or_string list -> unit) =
      fun (x7525 : 'tags this) ->
        fun ~urls:(x7521 : URL.t or_string list) ->
          ignore
            (let x7527 = this_to_js Obj.magic x7525 in
             Ojs.call (Ojs.get_prop_ascii x7527 "importScripts") "apply"
               [|x7527;((let x7522 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x7523 : URL.t or_string) ->
                              ignore
                                (Ojs.call x7522 "push"
                                   [|(or_string_to_js URL.t_to_js x7523)|]))
                           x7521;
                         x7522))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7536 : 'tags this) ->
        fun ~type_:(x7528 : 'K) ->
          fun ~listener:(x7529 : this:t -> ev:any -> any) ->
            fun
              ?options:(x7530 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7538 = this_to_js Obj.magic x7536 in
                   Ojs.call (Ojs.get_prop_ascii x7538 "addEventListener")
                     "apply"
                     [|x7538;((let x7531 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7531 "push" [|(Obj.magic x7528)|]);
                               ignore
                                 (Ojs.call x7531 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7534 : Ojs.t) ->
                                            fun (x7535 : Ojs.t) ->
                                              any_to_js
                                                (x7529 ~this:(t_of_js x7534)
                                                   ~ev:(any_of_js x7535))))|]);
                               (match x7530 with
                                | Some x7532 ->
                                    ignore
                                      (Ojs.call x7531 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7532)|])
                                | None -> ());
                               x7531))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7545 : 'tags this) ->
        fun ~type_:(x7539 : string) ->
          fun ~listener:(x7540 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x7541 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7547 = this_to_js Obj.magic x7545 in
                   Ojs.call (Ojs.get_prop_ascii x7547 "addEventListener")
                     "apply"
                     [|x7547;((let x7542 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7542 "push"
                                    [|(Ojs.string_to_js x7539)|]);
                               ignore
                                 (Ojs.call x7542 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7540)|]);
                               (match x7541 with
                                | Some x7543 ->
                                    ignore
                                      (Ojs.call x7542 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7543)|])
                                | None -> ());
                               x7542))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7556 : 'tags this) ->
        fun ~type_:(x7548 : 'K) ->
          fun ~listener:(x7549 : this:t -> ev:any -> any) ->
            fun ?options:(x7550 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7558 = this_to_js Obj.magic x7556 in
                   Ojs.call (Ojs.get_prop_ascii x7558 "removeEventListener")
                     "apply"
                     [|x7558;((let x7551 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7551 "push" [|(Obj.magic x7548)|]);
                               ignore
                                 (Ojs.call x7551 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7554 : Ojs.t) ->
                                            fun (x7555 : Ojs.t) ->
                                              any_to_js
                                                (x7549 ~this:(t_of_js x7554)
                                                   ~ev:(any_of_js x7555))))|]);
                               (match x7550 with
                                | Some x7552 ->
                                    ignore
                                      (Ojs.call x7551 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7552)|])
                                | None -> ());
                               x7551))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7565 : 'tags this) ->
        fun ~type_:(x7559 : string) ->
          fun ~listener:(x7560 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x7561 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7567 = this_to_js Obj.magic x7565 in
                   Ojs.call (Ojs.get_prop_ascii x7567 "removeEventListener")
                     "apply"
                     [|x7567;((let x7562 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7562 "push"
                                    [|(Ojs.string_to_js x7559)|]);
                               ignore
                                 (Ojs.call x7562 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7560)|]);
                               (match x7561 with
                                | Some x7563 ->
                                    ignore
                                      (Ojs.call x7562 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7563)|])
                                | None -> ());
                               x7562))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope")
             [||])
  end
module rec
  AnonymousInterface98:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> SharedWorkerGlobalScope.t
                         val set_prototype :
                           t -> SharedWorkerGlobalScope.t -> unit
                         val create : t -> SharedWorkerGlobalScope.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7569 : Ojs.t) -> x7569
    and t_to_js : t -> Ojs.t = fun (x7568 : Ojs.t) -> x7568
    let (get_prototype : t -> SharedWorkerGlobalScope.t) =
      fun (x7570 : t) ->
        SharedWorkerGlobalScope.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7570) "prototype")
    let (set_prototype : t -> SharedWorkerGlobalScope.t -> unit) =
      fun (x7571 : t) ->
        fun (x7572 : SharedWorkerGlobalScope.t) ->
          Ojs.set_prop_ascii (t_to_js x7571) "prototype"
            (SharedWorkerGlobalScope.t_to_js x7572)
    let (create : t -> SharedWorkerGlobalScope.t) =
      fun (x7573 : t) ->
        SharedWorkerGlobalScope.t_of_js (Ojs.new_obj (t_to_js x7573) [||])
  end
 and
  SharedWorkerGlobalScope:sig
                            type t =
                              [ `EventTarget  | `FontFaceSource 
                              | `SharedWorkerGlobalScope 
                              | `WindowOrWorkerGlobalScope 
                              | `WorkerGlobalScope ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags =
                              [ `EventTarget  | `FontFaceSource 
                              | `SharedWorkerGlobalScope 
                              | `WindowOrWorkerGlobalScope 
                              | `WorkerGlobalScope ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags =
                                [ `EventTarget  | `FontFaceSource 
                                | `SharedWorkerGlobalScope 
                                | `WindowOrWorkerGlobalScope 
                                | `WorkerGlobalScope ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `SharedWorkerGlobalScope ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_name : 'tags this -> string
                            val get_onconnect :
                              'tags this ->
                                (this:t -> ev:MessageEvent.t_0 -> any)
                                  or_null
                            val set_onconnect :
                              'tags this ->
                                (this:t -> ev:MessageEvent.t_0 -> any)
                                  or_null -> unit
                            val close : 'tags this -> unit
                            val addEventListener :
                              'tags this ->
                                type_:'K ->
                                  listener:(this:t -> ev:any -> any) ->
                                    ?options:AddEventListenerOptions.t
                                      or_boolean -> unit -> unit
                            val addEventListener' :
                              'tags this ->
                                type_:string ->
                                  listener:EventListenerOrEventListenerObject.t
                                    ->
                                    ?options:AddEventListenerOptions.t
                                      or_boolean -> unit -> unit
                            val removeEventListener :
                              'tags this ->
                                type_:'K ->
                                  listener:(this:t -> ev:any -> any) ->
                                    ?options:EventListenerOptions.t
                                      or_boolean -> unit -> unit
                            val removeEventListener' :
                              'tags this ->
                                type_:string ->
                                  listener:EventListenerOrEventListenerObject.t
                                    ->
                                    ?options:EventListenerOptions.t
                                      or_boolean -> unit -> unit
                            val cast_from : 'tags this -> t
                            val prototype : unit -> t
                            val create : unit -> t
                          end =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7575 : Ojs.t) -> t_of_js x7575
    and t_0_to_js : t_0 -> Ojs.t = fun (x7574 : t) -> t_to_js x7574
    type tags =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7578 : Ojs.t) -> intf_of_js __tags_of_js x7578
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7576 : __tags intf) -> intf_to_js __tags_to_js x7576
    let (get_name : 'tags this -> string) =
      fun (x7580 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7580) "name")
    let (get_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x7582 : 'tags this) ->
        or_null_of_js
          (fun (x7584 : Ojs.t) ->
             fun ~this:(x7585 : t) ->
               fun ~ev:(x7586 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x7584
                      [|(t_to_js x7585);(MessageEvent.t_0_to_js x7586)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7582) "onconnect")
    let (set_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x7587 : 'tags this) ->
        fun (x7588 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7587) "onconnect"
            (or_null_to_js
               (fun (x7589 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7590 : Ojs.t) ->
                       fun (x7591 : Ojs.t) ->
                         any_to_js
                           (x7589 ~this:(t_of_js x7590)
                              ~ev:(MessageEvent.t_0_of_js x7591)))) x7588)
    let (close : 'tags this -> unit) =
      fun (x7593 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7593) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7603 : 'tags this) ->
        fun ~type_:(x7595 : 'K) ->
          fun ~listener:(x7596 : this:t -> ev:any -> any) ->
            fun
              ?options:(x7597 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7605 = this_to_js Obj.magic x7603 in
                   Ojs.call (Ojs.get_prop_ascii x7605 "addEventListener")
                     "apply"
                     [|x7605;((let x7598 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7598 "push" [|(Obj.magic x7595)|]);
                               ignore
                                 (Ojs.call x7598 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7601 : Ojs.t) ->
                                            fun (x7602 : Ojs.t) ->
                                              any_to_js
                                                (x7596 ~this:(t_of_js x7601)
                                                   ~ev:(any_of_js x7602))))|]);
                               (match x7597 with
                                | Some x7599 ->
                                    ignore
                                      (Ojs.call x7598 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7599)|])
                                | None -> ());
                               x7598))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7612 : 'tags this) ->
        fun ~type_:(x7606 : string) ->
          fun ~listener:(x7607 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x7608 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7614 = this_to_js Obj.magic x7612 in
                   Ojs.call (Ojs.get_prop_ascii x7614 "addEventListener")
                     "apply"
                     [|x7614;((let x7609 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7609 "push"
                                    [|(Ojs.string_to_js x7606)|]);
                               ignore
                                 (Ojs.call x7609 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7607)|]);
                               (match x7608 with
                                | Some x7610 ->
                                    ignore
                                      (Ojs.call x7609 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7610)|])
                                | None -> ());
                               x7609))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7623 : 'tags this) ->
        fun ~type_:(x7615 : 'K) ->
          fun ~listener:(x7616 : this:t -> ev:any -> any) ->
            fun ?options:(x7617 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7625 = this_to_js Obj.magic x7623 in
                   Ojs.call (Ojs.get_prop_ascii x7625 "removeEventListener")
                     "apply"
                     [|x7625;((let x7618 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7618 "push" [|(Obj.magic x7615)|]);
                               ignore
                                 (Ojs.call x7618 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7621 : Ojs.t) ->
                                            fun (x7622 : Ojs.t) ->
                                              any_to_js
                                                (x7616 ~this:(t_of_js x7621)
                                                   ~ev:(any_of_js x7622))))|]);
                               (match x7617 with
                                | Some x7619 ->
                                    ignore
                                      (Ojs.call x7618 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7619)|])
                                | None -> ());
                               x7618))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7632 : 'tags this) ->
        fun ~type_:(x7626 : string) ->
          fun ~listener:(x7627 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x7628 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7634 = this_to_js Obj.magic x7632 in
                   Ojs.call (Ojs.get_prop_ascii x7634 "removeEventListener")
                     "apply"
                     [|x7634;((let x7629 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7629 "push"
                                    [|(Ojs.string_to_js x7626)|]);
                               ignore
                                 (Ojs.call x7629 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7627)|]);
                               (match x7628 with
                                | Some x7630 ->
                                    ignore
                                      (Ojs.call x7629 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7630)|])
                                | None -> ());
                               x7629))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope") 
             [||])
  end
module GetNotificationOptions =
  struct
    type t = [ `GetNotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7636 : Ojs.t) -> t_of_js x7636
    and t_0_to_js : t_0 -> Ojs.t = fun (x7635 : t) -> t_to_js x7635
    type tags = [ `GetNotificationOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GetNotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7639 : Ojs.t) -> intf_of_js __tags_of_js x7639
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7637 : __tags intf) -> intf_to_js __tags_to_js x7637
    let (get_tag : 'tags this -> string) =
      fun (x7641 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7641) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x7643 : 'tags this) ->
        fun (x7644 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7643) "tag"
            (Ojs.string_to_js x7644)
    let cast_from = Obj.magic
  end
module ServiceWorkerUpdateViaCache =
  struct
    type t = [ `L_s35_all  | `L_s91_imports  | `L_s128_none ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7647 : Ojs.t) ->
        let x7648 = x7647 in
        match Ojs.string_of_js x7648 with
        | "all" -> `L_s35_all
        | "imports" -> `L_s91_imports
        | "none" -> `L_s128_none
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7646 : [ `L_s35_all  | `L_s91_imports  | `L_s128_none ]) ->
        match x7646 with
        | `L_s35_all -> Ojs.string_to_js "all"
        | `L_s91_imports -> Ojs.string_to_js "imports"
        | `L_s128_none -> Ojs.string_to_js "none"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7650 : Ojs.t) -> t_of_js x7650
    and t_0_to_js : t_0 -> Ojs.t = fun (x7649 : t) -> t_to_js x7649
  end
module PushSubscriptionOptionsInit =
  struct
    type t = [ `PushSubscriptionOptionsInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7652 : Ojs.t) -> t_of_js x7652
    and t_0_to_js : t_0 -> Ojs.t = fun (x7651 : t) -> t_to_js x7651
    type tags = [ `PushSubscriptionOptionsInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptionsInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7655 : Ojs.t) -> intf_of_js __tags_of_js x7655
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7653 : __tags intf) -> intf_to_js __tags_to_js x7653
    let (get_applicationServerKey :
      'tags this -> BufferSource.t or_string or_null) =
      fun (x7657 : 'tags this) ->
        or_null_of_js
          (fun (x7659 : Ojs.t) -> or_string_of_js BufferSource.t_of_js x7659)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7657)
             "applicationServerKey")
    let (set_applicationServerKey :
      'tags this -> BufferSource.t or_string or_null -> unit) =
      fun (x7661 : 'tags this) ->
        fun (x7662 : BufferSource.t or_string or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7661)
            "applicationServerKey"
            (or_null_to_js
               (fun (x7663 : BufferSource.t or_string) ->
                  or_string_to_js BufferSource.t_to_js x7663) x7662)
    let (get_userVisibleOnly : 'tags this -> bool) =
      fun (x7666 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7666) "userVisibleOnly")
    let (set_userVisibleOnly : 'tags this -> bool -> unit) =
      fun (x7668 : 'tags this) ->
        fun (x7669 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7668) "userVisibleOnly"
            (Ojs.bool_to_js x7669)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface86:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PushSubscriptionOptions.t
                         val set_prototype :
                           t -> PushSubscriptionOptions.t -> unit
                         val create : t -> PushSubscriptionOptions.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7672 : Ojs.t) -> x7672
    and t_to_js : t -> Ojs.t = fun (x7671 : Ojs.t) -> x7671
    let (get_prototype : t -> PushSubscriptionOptions.t) =
      fun (x7673 : t) ->
        PushSubscriptionOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7673) "prototype")
    let (set_prototype : t -> PushSubscriptionOptions.t -> unit) =
      fun (x7674 : t) ->
        fun (x7675 : PushSubscriptionOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x7674) "prototype"
            (PushSubscriptionOptions.t_to_js x7675)
    let (create : t -> PushSubscriptionOptions.t) =
      fun (x7676 : t) ->
        PushSubscriptionOptions.t_of_js (Ojs.new_obj (t_to_js x7676) [||])
  end
 and
  PushSubscriptionOptions:sig
                            type t = [ `PushSubscriptionOptions ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags = [ `PushSubscriptionOptions ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags = [ `PushSubscriptionOptions ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `PushSubscriptionOptions ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_applicationServerKey :
                              'tags this -> ArrayBuffer.t_0 or_null
                            val cast_from : 'tags this -> t
                            val prototype : unit -> t
                            val create : unit -> t
                          end =
  struct
    type t = [ `PushSubscriptionOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7678 : Ojs.t) -> t_of_js x7678
    and t_0_to_js : t_0 -> Ojs.t = fun (x7677 : t) -> t_to_js x7677
    type tags = [ `PushSubscriptionOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7681 : Ojs.t) -> intf_of_js __tags_of_js x7681
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7679 : __tags intf) -> intf_to_js __tags_to_js x7679
    let (get_applicationServerKey : 'tags this -> ArrayBuffer.t_0 or_null) =
      fun (x7683 : 'tags this) ->
        or_null_of_js ArrayBuffer.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7683)
             "applicationServerKey")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions") 
             [||])
  end
module PushSubscriptionJSON =
  struct
    type t = [ `PushSubscriptionJSON ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7687 : Ojs.t) -> t_of_js x7687
    and t_0_to_js : t_0 -> Ojs.t = fun (x7686 : t) -> t_to_js x7686
    type tags = [ `PushSubscriptionJSON ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionJSON ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7690 : Ojs.t) -> intf_of_js __tags_of_js x7690
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7688 : __tags intf) -> intf_to_js __tags_to_js x7688
    let (get_endpoint : 'tags this -> string) =
      fun (x7692 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7692) "endpoint")
    let (set_endpoint : 'tags this -> string -> unit) =
      fun (x7694 : 'tags this) ->
        fun (x7695 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7694) "endpoint"
            (Ojs.string_to_js x7695)
    let (get_expirationTime : 'tags this -> DOMTimeStamp.t or_null) =
      fun (x7697 : 'tags this) ->
        or_null_of_js DOMTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7697) "expirationTime")
    let (set_expirationTime : 'tags this -> DOMTimeStamp.t or_null -> unit) =
      fun (x7700 : 'tags this) ->
        fun (x7701 : DOMTimeStamp.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7700) "expirationTime"
            (or_null_to_js DOMTimeStamp.t_to_js x7701)
    let (get_keys : 'tags this -> (string, string) Record.t_2) =
      fun (x7704 : 'tags this) ->
        Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7704) "keys")
    let (set_keys : 'tags this -> (string, string) Record.t_2 -> unit) =
      fun (x7708 : 'tags this) ->
        fun (x7709 : (string, string) Record.t_2) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7708) "keys"
            (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x7709)
    let cast_from = Obj.magic
  end
module PushEncryptionKeyName =
  struct
    type t = [ `L_s40_auth  | `L_s143_p256dh ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7714 : Ojs.t) ->
        let x7715 = x7714 in
        match Ojs.string_of_js x7715 with
        | "auth" -> `L_s40_auth
        | "p256dh" -> `L_s143_p256dh
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7713 : [ `L_s40_auth  | `L_s143_p256dh ]) ->
        match x7713 with
        | `L_s40_auth -> Ojs.string_to_js "auth"
        | `L_s143_p256dh -> Ojs.string_to_js "p256dh"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7717 : Ojs.t) -> t_of_js x7717
    and t_0_to_js : t_0 -> Ojs.t = fun (x7716 : t) -> t_to_js x7716
  end
module rec
  AnonymousInterface85:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PushSubscription.t
                         val set_prototype : t -> PushSubscription.t -> unit
                         val create : t -> PushSubscription.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7719 : Ojs.t) -> x7719
    and t_to_js : t -> Ojs.t = fun (x7718 : Ojs.t) -> x7718
    let (get_prototype : t -> PushSubscription.t) =
      fun (x7720 : t) ->
        PushSubscription.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7720) "prototype")
    let (set_prototype : t -> PushSubscription.t -> unit) =
      fun (x7721 : t) ->
        fun (x7722 : PushSubscription.t) ->
          Ojs.set_prop_ascii (t_to_js x7721) "prototype"
            (PushSubscription.t_to_js x7722)
    let (create : t -> PushSubscription.t) =
      fun (x7723 : t) ->
        PushSubscription.t_of_js (Ojs.new_obj (t_to_js x7723) [||])
  end
 and
  PushSubscription:sig
                     type t = [ `PushSubscription ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `PushSubscription ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `PushSubscription ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `PushSubscription ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_endpoint : 'tags this -> string
                     val get_options :
                       'tags this -> PushSubscriptionOptions.t
                     val getKey :
                       'tags this ->
                         name:PushEncryptionKeyName.t ->
                           ArrayBuffer.t_0 or_null
                     val toJSON : 'tags this -> PushSubscriptionJSON.t
                     val unsubscribe : 'tags this -> bool Promise.t_1
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
  struct
    type t = [ `PushSubscription ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7725 : Ojs.t) -> t_of_js x7725
    and t_0_to_js : t_0 -> Ojs.t = fun (x7724 : t) -> t_to_js x7724
    type tags = [ `PushSubscription ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushSubscription ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7728 : Ojs.t) -> intf_of_js __tags_of_js x7728
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7726 : __tags intf) -> intf_to_js __tags_to_js x7726
    let (get_endpoint : 'tags this -> string) =
      fun (x7730 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7730) "endpoint")
    let (get_options : 'tags this -> PushSubscriptionOptions.t) =
      fun (x7732 : 'tags this) ->
        PushSubscriptionOptions.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7732) "options")
    let (getKey :
      'tags this -> name:PushEncryptionKeyName.t -> ArrayBuffer.t_0 or_null)
      =
      fun (x7735 : 'tags this) ->
        fun ~name:(x7734 : PushEncryptionKeyName.t) ->
          or_null_of_js ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x7735) "getKey"
               [|(PushEncryptionKeyName.t_to_js x7734)|])
    let (toJSON : 'tags this -> PushSubscriptionJSON.t) =
      fun (x7738 : 'tags this) ->
        PushSubscriptionJSON.t_of_js
          (Ojs.call (this_to_js Obj.magic x7738) "toJSON" [||])
    let (unsubscribe : 'tags this -> bool Promise.t_1) =
      fun (x7740 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x7740) "unsubscribe" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscription") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushSubscription")
             [||])
  end
module PushPermissionState =
  struct
    type t = [ `L_s58_denied  | `L_s82_granted  | `L_s157_prompt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7744 : Ojs.t) ->
        let x7745 = x7744 in
        match Ojs.string_of_js x7745 with
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | "prompt" -> `L_s157_prompt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7743 : [ `L_s58_denied  | `L_s82_granted  | `L_s157_prompt ]) ->
        match x7743 with
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
        | `L_s157_prompt -> Ojs.string_to_js "prompt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7747 : Ojs.t) -> t_of_js x7747
    and t_0_to_js : t_0 -> Ojs.t = fun (x7746 : t) -> t_to_js x7746
  end
module rec
  AnonymousInterface83:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PushManager.t
                         val set_prototype : t -> PushManager.t -> unit
                         val create : t -> PushManager.t
                         val get_supportedContentEncodings : t -> string list
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7749 : Ojs.t) -> x7749
    and t_to_js : t -> Ojs.t = fun (x7748 : Ojs.t) -> x7748
    let (get_prototype : t -> PushManager.t) =
      fun (x7750 : t) ->
        PushManager.t_of_js (Ojs.get_prop_ascii (t_to_js x7750) "prototype")
    let (set_prototype : t -> PushManager.t -> unit) =
      fun (x7751 : t) ->
        fun (x7752 : PushManager.t) ->
          Ojs.set_prop_ascii (t_to_js x7751) "prototype"
            (PushManager.t_to_js x7752)
    let (create : t -> PushManager.t) =
      fun (x7753 : t) ->
        PushManager.t_of_js (Ojs.new_obj (t_to_js x7753) [||])
    let (get_supportedContentEncodings : t -> string list) =
      fun (x7754 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x7754) "supportedContentEncodings")
  end
 and
  PushManager:sig
                type t = [ `PushManager ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `PushManager ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `PushManager ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `PushManager ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val getSubscription :
                  'tags this -> PushSubscription.t or_null Promise.t_1
                val permissionState :
                  'tags this ->
                    ?options:PushSubscriptionOptionsInit.t ->
                      unit -> PushPermissionState.t Promise.t_1
                val subscribe :
                  'tags this ->
                    ?options:PushSubscriptionOptionsInit.t ->
                      unit -> PushSubscription.t Promise.t_1
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
                val supportedContentEncodings : unit -> string list
              end =
  struct
    type t = [ `PushManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7757 : Ojs.t) -> t_of_js x7757
    and t_0_to_js : t_0 -> Ojs.t = fun (x7756 : t) -> t_to_js x7756
    type tags = [ `PushManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7760 : Ojs.t) -> intf_of_js __tags_of_js x7760
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7758 : __tags intf) -> intf_to_js __tags_to_js x7758
    let (getSubscription :
      'tags this -> PushSubscription.t or_null Promise.t_1) =
      fun (x7762 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x7764 : Ojs.t) ->
             or_null_of_js PushSubscription.t_of_js x7764)
          (Ojs.call (this_to_js Obj.magic x7762) "getSubscription" [||])
    let (permissionState :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushPermissionState.t Promise.t_1)
      =
      fun (x7769 : 'tags this) ->
        fun ?options:(x7766 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushPermissionState.t_of_js
              (let x7771 = this_to_js Obj.magic x7769 in
               Ojs.call (Ojs.get_prop_ascii x7771 "permissionState") "apply"
                 [|x7771;((let x7767 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7766 with
                            | Some x7768 ->
                                ignore
                                  (Ojs.call x7767 "push"
                                     [|(PushSubscriptionOptionsInit.t_to_js
                                          x7768)|])
                            | None -> ());
                           x7767))|])
    let (subscribe :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushSubscription.t Promise.t_1)
      =
      fun (x7776 : 'tags this) ->
        fun ?options:(x7773 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushSubscription.t_of_js
              (let x7778 = this_to_js Obj.magic x7776 in
               Ojs.call (Ojs.get_prop_ascii x7778 "subscribe") "apply"
                 [|x7778;((let x7774 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7773 with
                            | Some x7775 ->
                                ignore
                                  (Ojs.call x7774 "push"
                                     [|(PushSubscriptionOptionsInit.t_to_js
                                          x7775)|])
                            | None -> ());
                           x7774))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushManager") [||])
    let (supportedContentEncodings : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "supportedContentEncodings")
  end
module rec
  AnonymousInterface97:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ServiceWorkerRegistration.t
                         val set_prototype :
                           t -> ServiceWorkerRegistration.t -> unit
                         val create : t -> ServiceWorkerRegistration.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7782 : Ojs.t) -> x7782
    and t_to_js : t -> Ojs.t = fun (x7781 : Ojs.t) -> x7781
    let (get_prototype : t -> ServiceWorkerRegistration.t) =
      fun (x7783 : t) ->
        ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7783) "prototype")
    let (set_prototype : t -> ServiceWorkerRegistration.t -> unit) =
      fun (x7784 : t) ->
        fun (x7785 : ServiceWorkerRegistration.t) ->
          Ojs.set_prop_ascii (t_to_js x7784) "prototype"
            (ServiceWorkerRegistration.t_to_js x7785)
    let (create : t -> ServiceWorkerRegistration.t) =
      fun (x7786 : t) ->
        ServiceWorkerRegistration.t_of_js (Ojs.new_obj (t_to_js x7786) [||])
  end
 and
  ServiceWorkerRegistration:sig
                              type t =
                                [ `EventTarget 
                                | `ServiceWorkerRegistration ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget 
                                | `ServiceWorkerRegistration ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `ServiceWorkerRegistration ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `ServiceWorkerRegistration ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_active :
                                'tags this -> ServiceWorker.t or_null
                              val get_installing :
                                'tags this -> ServiceWorker.t or_null
                              val get_onupdatefound :
                                'tags this ->
                                  (this:t -> ev:Event.t -> any) or_null
                              val set_onupdatefound :
                                'tags this ->
                                  (this:t -> ev:Event.t -> any) or_null ->
                                    unit
                              val get_pushManager :
                                'tags this -> PushManager.t
                              val get_scope : 'tags this -> string
                              val get_updateViaCache :
                                'tags this -> ServiceWorkerUpdateViaCache.t
                              val get_waiting :
                                'tags this -> ServiceWorker.t or_null
                              val getNotifications :
                                'tags this ->
                                  ?filter:GetNotificationOptions.t ->
                                    unit -> Notification.t list Promise.t_1
                              val showNotification :
                                'tags this ->
                                  title:string ->
                                    ?options:NotificationOptions.t ->
                                      unit -> unit Promise.t_1
                              val unregister : 'tags this -> bool Promise.t_1
                              val update : 'tags this -> unit Promise.t_1
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
  struct
    type t = [ `EventTarget  | `ServiceWorkerRegistration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7788 : Ojs.t) -> t_of_js x7788
    and t_0_to_js : t_0 -> Ojs.t = fun (x7787 : t) -> t_to_js x7787
    type tags = [ `EventTarget  | `ServiceWorkerRegistration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7791 : Ojs.t) -> intf_of_js __tags_of_js x7791
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7789 : __tags intf) -> intf_to_js __tags_to_js x7789
    let (get_active : 'tags this -> ServiceWorker.t or_null) =
      fun (x7793 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7793) "active")
    let (get_installing : 'tags this -> ServiceWorker.t or_null) =
      fun (x7796 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7796) "installing")
    let (get_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x7799 : 'tags this) ->
        or_null_of_js
          (fun (x7801 : Ojs.t) ->
             fun ~this:(x7802 : t) ->
               fun ~ev:(x7803 : Event.t) ->
                 any_of_js
                   (Ojs.apply x7801 [|(t_to_js x7802);(Event.t_to_js x7803)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7799) "onupdatefound")
    let (set_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x7804 : 'tags this) ->
        fun (x7805 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7804) "onupdatefound"
            (or_null_to_js
               (fun (x7806 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7807 : Ojs.t) ->
                       fun (x7808 : Ojs.t) ->
                         any_to_js
                           (x7806 ~this:(t_of_js x7807)
                              ~ev:(Event.t_of_js x7808)))) x7805)
    let (get_pushManager : 'tags this -> PushManager.t) =
      fun (x7810 : 'tags this) ->
        PushManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7810) "pushManager")
    let (get_scope : 'tags this -> string) =
      fun (x7812 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7812) "scope")
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x7814 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7814) "updateViaCache")
    let (get_waiting : 'tags this -> ServiceWorker.t or_null) =
      fun (x7816 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7816) "waiting")
    let (getNotifications :
      'tags this ->
        ?filter:GetNotificationOptions.t ->
          unit -> Notification.t list Promise.t_1)
      =
      fun (x7822 : 'tags this) ->
        fun ?filter:(x7819 : GetNotificationOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x7825 : Ojs.t) ->
                 Ojs.list_of_js Notification.t_of_js x7825)
              (let x7824 = this_to_js Obj.magic x7822 in
               Ojs.call (Ojs.get_prop_ascii x7824 "getNotifications") "apply"
                 [|x7824;((let x7820 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7819 with
                            | Some x7821 ->
                                ignore
                                  (Ojs.call x7820 "push"
                                     [|(GetNotificationOptions.t_to_js x7821)|])
                            | None -> ());
                           x7820))|])
    let (showNotification :
      'tags this ->
        title:string ->
          ?options:NotificationOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x7831 : 'tags this) ->
        fun ~title:(x7827 : string) ->
          fun ?options:(x7828 : NotificationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x7833 = this_to_js Obj.magic x7831 in
                 Ojs.call (Ojs.get_prop_ascii x7833 "showNotification")
                   "apply"
                   [|x7833;((let x7829 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7829 "push"
                                  [|(Ojs.string_to_js x7827)|]);
                             (match x7828 with
                              | Some x7830 ->
                                  ignore
                                    (Ojs.call x7829 "push"
                                       [|(NotificationOptions.t_to_js x7830)|])
                              | None -> ());
                             x7829))|])
    let (unregister : 'tags this -> bool Promise.t_1) =
      fun (x7835 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x7835) "unregister" [||])
    let (update : 'tags this -> unit Promise.t_1) =
      fun (x7838 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x7838) "update" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7849 : 'tags this) ->
        fun ~type_:(x7841 : 'K) ->
          fun ~listener:(x7842 : this:t -> ev:any -> any) ->
            fun
              ?options:(x7843 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7851 = this_to_js Obj.magic x7849 in
                   Ojs.call (Ojs.get_prop_ascii x7851 "addEventListener")
                     "apply"
                     [|x7851;((let x7844 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7844 "push" [|(Obj.magic x7841)|]);
                               ignore
                                 (Ojs.call x7844 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7847 : Ojs.t) ->
                                            fun (x7848 : Ojs.t) ->
                                              any_to_js
                                                (x7842 ~this:(t_of_js x7847)
                                                   ~ev:(any_of_js x7848))))|]);
                               (match x7843 with
                                | Some x7845 ->
                                    ignore
                                      (Ojs.call x7844 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7845)|])
                                | None -> ());
                               x7844))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7858 : 'tags this) ->
        fun ~type_:(x7852 : string) ->
          fun ~listener:(x7853 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x7854 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7860 = this_to_js Obj.magic x7858 in
                   Ojs.call (Ojs.get_prop_ascii x7860 "addEventListener")
                     "apply"
                     [|x7860;((let x7855 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7855 "push"
                                    [|(Ojs.string_to_js x7852)|]);
                               ignore
                                 (Ojs.call x7855 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7853)|]);
                               (match x7854 with
                                | Some x7856 ->
                                    ignore
                                      (Ojs.call x7855 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7856)|])
                                | None -> ());
                               x7855))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7869 : 'tags this) ->
        fun ~type_:(x7861 : 'K) ->
          fun ~listener:(x7862 : this:t -> ev:any -> any) ->
            fun ?options:(x7863 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7871 = this_to_js Obj.magic x7869 in
                   Ojs.call (Ojs.get_prop_ascii x7871 "removeEventListener")
                     "apply"
                     [|x7871;((let x7864 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7864 "push" [|(Obj.magic x7861)|]);
                               ignore
                                 (Ojs.call x7864 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7867 : Ojs.t) ->
                                            fun (x7868 : Ojs.t) ->
                                              any_to_js
                                                (x7862 ~this:(t_of_js x7867)
                                                   ~ev:(any_of_js x7868))))|]);
                               (match x7863 with
                                | Some x7865 ->
                                    ignore
                                      (Ojs.call x7864 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7865)|])
                                | None -> ());
                               x7864))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7878 : 'tags this) ->
        fun ~type_:(x7872 : string) ->
          fun ~listener:(x7873 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x7874 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7880 = this_to_js Obj.magic x7878 in
                   Ojs.call (Ojs.get_prop_ascii x7880 "removeEventListener")
                     "apply"
                     [|x7880;((let x7875 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7875 "push"
                                    [|(Ojs.string_to_js x7872)|]);
                               ignore
                                 (Ojs.call x7875 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7873)|]);
                               (match x7874 with
                                | Some x7876 ->
                                    ignore
                                      (Ojs.call x7875 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7876)|])
                                | None -> ());
                               x7875))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration") 
             [||])
  end
module VisibilityState =
  struct
    type t = [ `L_s83_hidden  | `L_s205_visible ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7882 : Ojs.t) ->
        let x7883 = x7882 in
        match Ojs.string_of_js x7883 with
        | "hidden" -> `L_s83_hidden
        | "visible" -> `L_s205_visible
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7881 : [ `L_s83_hidden  | `L_s205_visible ]) ->
        match x7881 with
        | `L_s83_hidden -> Ojs.string_to_js "hidden"
        | `L_s205_visible -> Ojs.string_to_js "visible"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7885 : Ojs.t) -> t_of_js x7885
    and t_0_to_js : t_0 -> Ojs.t = fun (x7884 : t) -> t_to_js x7884
  end
module rec
  AnonymousInterface129:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WindowClient.t
                          val set_prototype : t -> WindowClient.t -> unit
                          val create : t -> WindowClient.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7887 : Ojs.t) -> x7887
    and t_to_js : t -> Ojs.t = fun (x7886 : Ojs.t) -> x7886
    let (get_prototype : t -> WindowClient.t) =
      fun (x7888 : t) ->
        WindowClient.t_of_js (Ojs.get_prop_ascii (t_to_js x7888) "prototype")
    let (set_prototype : t -> WindowClient.t -> unit) =
      fun (x7889 : t) ->
        fun (x7890 : WindowClient.t) ->
          Ojs.set_prop_ascii (t_to_js x7889) "prototype"
            (WindowClient.t_to_js x7890)
    let (create : t -> WindowClient.t) =
      fun (x7891 : t) ->
        WindowClient.t_of_js (Ojs.new_obj (t_to_js x7891) [||])
  end
 and
  WindowClient:sig
                 type t = [ `Client  | `WindowClient ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `Client  | `WindowClient ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `Client  | `WindowClient ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `WindowClient ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val get_focused : 'tags this -> bool
                 val get_visibilityState : 'tags this -> VisibilityState.t
                 val focus : 'tags this -> t Promise.t_1
                 val navigate :
                   'tags this -> url:URL.t or_string -> t or_null Promise.t_1
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `Client  | `WindowClient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7893 : Ojs.t) -> t_of_js x7893
    and t_0_to_js : t_0 -> Ojs.t = fun (x7892 : t) -> t_to_js x7892
    type tags = [ `Client  | `WindowClient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WindowClient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7896 : Ojs.t) -> intf_of_js __tags_of_js x7896
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7894 : __tags intf) -> intf_to_js __tags_to_js x7894
    let (get_focused : 'tags this -> bool) =
      fun (x7898 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7898) "focused")
    let (get_visibilityState : 'tags this -> VisibilityState.t) =
      fun (x7900 : 'tags this) ->
        VisibilityState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7900) "visibilityState")
    let (focus : 'tags this -> t Promise.t_1) =
      fun (x7902 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x7902) "focus" [||])
    let (navigate :
      'tags this -> url:URL.t or_string -> t or_null Promise.t_1) =
      fun (x7907 : 'tags this) ->
        fun ~url:(x7905 : URL.t or_string) ->
          Promise.t_1_of_js
            (fun (x7909 : Ojs.t) -> or_null_of_js t_of_js x7909)
            (Ojs.call (this_to_js Obj.magic x7907) "navigate"
               [|(or_string_to_js URL.t_to_js x7905)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WindowClient")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WindowClient") [||])
  end
module ClientQueryOptions =
  struct
    type t = [ `ClientQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7912 : Ojs.t) -> t_of_js x7912
    and t_0_to_js : t_0 -> Ojs.t = fun (x7911 : t) -> t_to_js x7911
    type tags = [ `ClientQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ClientQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7915 : Ojs.t) -> intf_of_js __tags_of_js x7915
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7913 : __tags intf) -> intf_to_js __tags_to_js x7913
    let (get_includeUncontrolled : 'tags this -> bool) =
      fun (x7917 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7917)
             "includeUncontrolled")
    let (set_includeUncontrolled : 'tags this -> bool -> unit) =
      fun (x7919 : 'tags this) ->
        fun (x7920 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7919)
            "includeUncontrolled" (Ojs.bool_to_js x7920)
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x7922 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7922) "type")
    let (set_type : 'tags this -> ClientTypes.t -> unit) =
      fun (x7924 : 'tags this) ->
        fun (x7925 : ClientTypes.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7924) "type"
            (ClientTypes.t_to_js x7925)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface10:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Clients.t
                         val set_prototype : t -> Clients.t -> unit
                         val create : t -> Clients.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7928 : Ojs.t) -> x7928
    and t_to_js : t -> Ojs.t = fun (x7927 : Ojs.t) -> x7927
    let (get_prototype : t -> Clients.t) =
      fun (x7929 : t) ->
        Clients.t_of_js (Ojs.get_prop_ascii (t_to_js x7929) "prototype")
    let (set_prototype : t -> Clients.t -> unit) =
      fun (x7930 : t) ->
        fun (x7931 : Clients.t) ->
          Ojs.set_prop_ascii (t_to_js x7930) "prototype"
            (Clients.t_to_js x7931)
    let (create : t -> Clients.t) =
      fun (x7932 : t) -> Clients.t_of_js (Ojs.new_obj (t_to_js x7932) [||])
  end
 and
  Clients:sig
            type t = [ `Clients ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `Clients ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem type tags = [ `Clients ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val claim : 'tags this -> unit Promise.t_1
            val get_ :
              'tags this -> id:string -> Client.t or_undefined Promise.t_1
            val matchAll :
              'tags this -> ?options:'T -> unit -> any list Promise.t_1
            val openWindow :
              'tags this ->
                url:URL.t or_string -> WindowClient.t or_null Promise.t_1
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create : unit -> t
          end =
  struct
    type t = [ `Clients ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7934 : Ojs.t) -> t_of_js x7934
    and t_0_to_js : t_0 -> Ojs.t = fun (x7933 : t) -> t_to_js x7933
    type tags = [ `Clients ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7937 : Ojs.t) -> intf_of_js __tags_of_js x7937
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7935 : __tags intf) -> intf_to_js __tags_to_js x7935
    let (claim : 'tags this -> unit Promise.t_1) =
      fun (x7939 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x7939) "claim" [||])
    let (get_ : 'tags this -> id:string -> Client.t or_undefined Promise.t_1)
      =
      fun (x7943 : 'tags this) ->
        fun ~id:(x7942 : string) ->
          Promise.t_1_of_js
            (fun (x7945 : Ojs.t) -> or_undefined_of_js Client.t_of_js x7945)
            (Ojs.call (this_to_js Obj.magic x7943) "get"
               [|(Ojs.string_to_js x7942)|])
    let (matchAll :
      'tags this -> ?options:'T -> unit -> any list Promise.t_1) =
      fun (x7950 : 'tags this) ->
        fun ?options:(x7947 : 'T option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x7953 : Ojs.t) -> Ojs.list_of_js any_of_js x7953)
              (let x7952 = this_to_js Obj.magic x7950 in
               Ojs.call (Ojs.get_prop_ascii x7952 "matchAll") "apply"
                 [|x7952;((let x7948 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7947 with
                            | Some x7949 ->
                                ignore
                                  (Ojs.call x7948 "push"
                                     [|(Obj.magic x7949)|])
                            | None -> ());
                           x7948))|])
    let (openWindow :
      'tags this -> url:URL.t or_string -> WindowClient.t or_null Promise.t_1)
      =
      fun (x7957 : 'tags this) ->
        fun ~url:(x7955 : URL.t or_string) ->
          Promise.t_1_of_js
            (fun (x7959 : Ojs.t) -> or_null_of_js WindowClient.t_of_js x7959)
            (Ojs.call (this_to_js Obj.magic x7957) "openWindow"
               [|(or_string_to_js URL.t_to_js x7955)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Clients")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Clients") [||])
  end
module rec
  AnonymousInterface96:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ServiceWorkerGlobalScope.t
                         val set_prototype :
                           t -> ServiceWorkerGlobalScope.t -> unit
                         val create : t -> ServiceWorkerGlobalScope.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7962 : Ojs.t) -> x7962
    and t_to_js : t -> Ojs.t = fun (x7961 : Ojs.t) -> x7961
    let (get_prototype : t -> ServiceWorkerGlobalScope.t) =
      fun (x7963 : t) ->
        ServiceWorkerGlobalScope.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7963) "prototype")
    let (set_prototype : t -> ServiceWorkerGlobalScope.t -> unit) =
      fun (x7964 : t) ->
        fun (x7965 : ServiceWorkerGlobalScope.t) ->
          Ojs.set_prop_ascii (t_to_js x7964) "prototype"
            (ServiceWorkerGlobalScope.t_to_js x7965)
    let (create : t -> ServiceWorkerGlobalScope.t) =
      fun (x7966 : t) ->
        ServiceWorkerGlobalScope.t_of_js (Ojs.new_obj (t_to_js x7966) [||])
  end
 and
  ServiceWorkerGlobalScope:sig
                             type t =
                               [ `EventTarget  | `FontFaceSource 
                               | `ServiceWorkerGlobalScope 
                               | `WindowOrWorkerGlobalScope 
                               | `WorkerGlobalScope ] intf
                             type t_0 = t
                             [@@@js.stop ]
                             type tags =
                               [ `EventTarget  | `FontFaceSource 
                               | `ServiceWorkerGlobalScope 
                               | `WindowOrWorkerGlobalScope 
                               | `WorkerGlobalScope ]
                             type tags_0 = tags
                             [@@@js.start ]
                             [@@@js.implem
                               type tags =
                                 [ `EventTarget  | `FontFaceSource 
                                 | `ServiceWorkerGlobalScope 
                                 | `WindowOrWorkerGlobalScope 
                                 | `WorkerGlobalScope ]
                               type tags_0 = tags]
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `ServiceWorkerGlobalScope ]
                             val t_to_js : t -> Ojs.t
                             val t_of_js : Ojs.t -> t
                             val t_0_to_js : t_0 -> Ojs.t
                             val t_0_of_js : Ojs.t -> t_0
                             val get_clients : 'tags this -> Clients.t
                             val get_onactivate :
                               'tags this ->
                                 (this:t -> ev:ExtendableEvent.t -> any)
                                   or_null
                             val set_onactivate :
                               'tags this ->
                                 (this:t -> ev:ExtendableEvent.t -> any)
                                   or_null -> unit
                             val get_onfetch :
                               'tags this ->
                                 (this:t -> ev:FetchEvent.t -> any) or_null
                             val set_onfetch :
                               'tags this ->
                                 (this:t -> ev:FetchEvent.t -> any) or_null
                                   -> unit
                             val get_oninstall :
                               'tags this ->
                                 (this:t -> ev:ExtendableEvent.t -> any)
                                   or_null
                             val set_oninstall :
                               'tags this ->
                                 (this:t -> ev:ExtendableEvent.t -> any)
                                   or_null -> unit
                             val get_onmessage :
                               'tags this ->
                                 (this:t ->
                                    ev:ExtendableMessageEvent.t -> any)
                                   or_null
                             val set_onmessage :
                               'tags this ->
                                 (this:t ->
                                    ev:ExtendableMessageEvent.t -> any)
                                   or_null -> unit
                             val get_onmessageerror :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null
                             val set_onmessageerror :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null -> unit
                             val get_onnotificationclick :
                               'tags this ->
                                 (this:t -> ev:NotificationEvent.t -> any)
                                   or_null
                             val set_onnotificationclick :
                               'tags this ->
                                 (this:t -> ev:NotificationEvent.t -> any)
                                   or_null -> unit
                             val get_onnotificationclose :
                               'tags this ->
                                 (this:t -> ev:NotificationEvent.t -> any)
                                   or_null
                             val set_onnotificationclose :
                               'tags this ->
                                 (this:t -> ev:NotificationEvent.t -> any)
                                   or_null -> unit
                             val get_onpush :
                               'tags this ->
                                 (this:t -> ev:PushEvent.t -> any) or_null
                             val set_onpush :
                               'tags this ->
                                 (this:t -> ev:PushEvent.t -> any) or_null ->
                                   unit
                             val get_registration :
                               'tags this -> ServiceWorkerRegistration.t
                             val skipWaiting : 'tags this -> unit Promise.t_1
                             val addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val cast_from : 'tags this -> t
                             val prototype : unit -> t
                             val create : unit -> t
                           end =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7968 : Ojs.t) -> t_of_js x7968
    and t_0_to_js : t_0 -> Ojs.t = fun (x7967 : t) -> t_to_js x7967
    type tags =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7971 : Ojs.t) -> intf_of_js __tags_of_js x7971
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7969 : __tags intf) -> intf_to_js __tags_to_js x7969
    let (get_clients : 'tags this -> Clients.t) =
      fun (x7973 : 'tags this) ->
        Clients.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7973) "clients")
    let (get_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null) =
      fun (x7975 : 'tags this) ->
        or_null_of_js
          (fun (x7977 : Ojs.t) ->
             fun ~this:(x7978 : t) ->
               fun ~ev:(x7979 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x7977
                      [|(t_to_js x7978);(ExtendableEvent.t_to_js x7979)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7975) "onactivate")
    let (set_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null -> unit)
      =
      fun (x7980 : 'tags this) ->
        fun (x7981 : (this:t -> ev:ExtendableEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7980) "onactivate"
            (or_null_to_js
               (fun (x7982 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7983 : Ojs.t) ->
                       fun (x7984 : Ojs.t) ->
                         any_to_js
                           (x7982 ~this:(t_of_js x7983)
                              ~ev:(ExtendableEvent.t_of_js x7984)))) x7981)
    let (get_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) or_null) =
      fun (x7986 : 'tags this) ->
        or_null_of_js
          (fun (x7988 : Ojs.t) ->
             fun ~this:(x7989 : t) ->
               fun ~ev:(x7990 : FetchEvent.t) ->
                 any_of_js
                   (Ojs.apply x7988
                      [|(t_to_js x7989);(FetchEvent.t_to_js x7990)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7986) "onfetch")
    let (set_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) or_null -> unit) =
      fun (x7991 : 'tags this) ->
        fun (x7992 : (this:t -> ev:FetchEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7991) "onfetch"
            (or_null_to_js
               (fun (x7993 : this:t -> ev:FetchEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7994 : Ojs.t) ->
                       fun (x7995 : Ojs.t) ->
                         any_to_js
                           (x7993 ~this:(t_of_js x7994)
                              ~ev:(FetchEvent.t_of_js x7995)))) x7992)
    let (get_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null) =
      fun (x7997 : 'tags this) ->
        or_null_of_js
          (fun (x7999 : Ojs.t) ->
             fun ~this:(x8000 : t) ->
               fun ~ev:(x8001 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x7999
                      [|(t_to_js x8000);(ExtendableEvent.t_to_js x8001)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7997) "oninstall")
    let (set_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null -> unit)
      =
      fun (x8002 : 'tags this) ->
        fun (x8003 : (this:t -> ev:ExtendableEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8002) "oninstall"
            (or_null_to_js
               (fun (x8004 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8005 : Ojs.t) ->
                       fun (x8006 : Ojs.t) ->
                         any_to_js
                           (x8004 ~this:(t_of_js x8005)
                              ~ev:(ExtendableEvent.t_of_js x8006)))) x8003)
    let (get_onmessage :
      'tags this -> (this:t -> ev:ExtendableMessageEvent.t -> any) or_null) =
      fun (x8008 : 'tags this) ->
        or_null_of_js
          (fun (x8010 : Ojs.t) ->
             fun ~this:(x8011 : t) ->
               fun ~ev:(x8012 : ExtendableMessageEvent.t) ->
                 any_of_js
                   (Ojs.apply x8010
                      [|(t_to_js x8011);(ExtendableMessageEvent.t_to_js x8012)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8008) "onmessage")
    let (set_onmessage :
      'tags this ->
        (this:t -> ev:ExtendableMessageEvent.t -> any) or_null -> unit)
      =
      fun (x8013 : 'tags this) ->
        fun (x8014 : (this:t -> ev:ExtendableMessageEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8013) "onmessage"
            (or_null_to_js
               (fun (x8015 : this:t -> ev:ExtendableMessageEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8016 : Ojs.t) ->
                       fun (x8017 : Ojs.t) ->
                         any_to_js
                           (x8015 ~this:(t_of_js x8016)
                              ~ev:(ExtendableMessageEvent.t_of_js x8017))))
               x8014)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x8019 : 'tags this) ->
        or_null_of_js
          (fun (x8021 : Ojs.t) ->
             fun ~this:(x8022 : t) ->
               fun ~ev:(x8023 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x8021
                      [|(t_to_js x8022);(MessageEvent.t_0_to_js x8023)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8019) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x8024 : 'tags this) ->
        fun (x8025 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8024) "onmessageerror"
            (or_null_to_js
               (fun (x8026 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8027 : Ojs.t) ->
                       fun (x8028 : Ojs.t) ->
                         any_to_js
                           (x8026 ~this:(t_of_js x8027)
                              ~ev:(MessageEvent.t_0_of_js x8028)))) x8025)
    let (get_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null) =
      fun (x8030 : 'tags this) ->
        or_null_of_js
          (fun (x8032 : Ojs.t) ->
             fun ~this:(x8033 : t) ->
               fun ~ev:(x8034 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x8032
                      [|(t_to_js x8033);(NotificationEvent.t_to_js x8034)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8030)
             "onnotificationclick")
    let (set_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null -> unit)
      =
      fun (x8035 : 'tags this) ->
        fun (x8036 : (this:t -> ev:NotificationEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8035)
            "onnotificationclick"
            (or_null_to_js
               (fun (x8037 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8038 : Ojs.t) ->
                       fun (x8039 : Ojs.t) ->
                         any_to_js
                           (x8037 ~this:(t_of_js x8038)
                              ~ev:(NotificationEvent.t_of_js x8039)))) x8036)
    let (get_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null) =
      fun (x8041 : 'tags this) ->
        or_null_of_js
          (fun (x8043 : Ojs.t) ->
             fun ~this:(x8044 : t) ->
               fun ~ev:(x8045 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x8043
                      [|(t_to_js x8044);(NotificationEvent.t_to_js x8045)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8041)
             "onnotificationclose")
    let (set_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null -> unit)
      =
      fun (x8046 : 'tags this) ->
        fun (x8047 : (this:t -> ev:NotificationEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8046)
            "onnotificationclose"
            (or_null_to_js
               (fun (x8048 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8049 : Ojs.t) ->
                       fun (x8050 : Ojs.t) ->
                         any_to_js
                           (x8048 ~this:(t_of_js x8049)
                              ~ev:(NotificationEvent.t_of_js x8050)))) x8047)
    let (get_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) or_null) =
      fun (x8052 : 'tags this) ->
        or_null_of_js
          (fun (x8054 : Ojs.t) ->
             fun ~this:(x8055 : t) ->
               fun ~ev:(x8056 : PushEvent.t) ->
                 any_of_js
                   (Ojs.apply x8054
                      [|(t_to_js x8055);(PushEvent.t_to_js x8056)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8052) "onpush")
    let (set_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) or_null -> unit) =
      fun (x8057 : 'tags this) ->
        fun (x8058 : (this:t -> ev:PushEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8057) "onpush"
            (or_null_to_js
               (fun (x8059 : this:t -> ev:PushEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8060 : Ojs.t) ->
                       fun (x8061 : Ojs.t) ->
                         any_to_js
                           (x8059 ~this:(t_of_js x8060)
                              ~ev:(PushEvent.t_of_js x8061)))) x8058)
    let (get_registration : 'tags this -> ServiceWorkerRegistration.t) =
      fun (x8063 : 'tags this) ->
        ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8063) "registration")
    let (skipWaiting : 'tags this -> unit Promise.t_1) =
      fun (x8065 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x8065) "skipWaiting" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8076 : 'tags this) ->
        fun ~type_:(x8068 : 'K) ->
          fun ~listener:(x8069 : this:t -> ev:any -> any) ->
            fun
              ?options:(x8070 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8078 = this_to_js Obj.magic x8076 in
                   Ojs.call (Ojs.get_prop_ascii x8078 "addEventListener")
                     "apply"
                     [|x8078;((let x8071 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8071 "push" [|(Obj.magic x8068)|]);
                               ignore
                                 (Ojs.call x8071 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8074 : Ojs.t) ->
                                            fun (x8075 : Ojs.t) ->
                                              any_to_js
                                                (x8069 ~this:(t_of_js x8074)
                                                   ~ev:(any_of_js x8075))))|]);
                               (match x8070 with
                                | Some x8072 ->
                                    ignore
                                      (Ojs.call x8071 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8072)|])
                                | None -> ());
                               x8071))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8085 : 'tags this) ->
        fun ~type_:(x8079 : string) ->
          fun ~listener:(x8080 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x8081 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8087 = this_to_js Obj.magic x8085 in
                   Ojs.call (Ojs.get_prop_ascii x8087 "addEventListener")
                     "apply"
                     [|x8087;((let x8082 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8082 "push"
                                    [|(Ojs.string_to_js x8079)|]);
                               ignore
                                 (Ojs.call x8082 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8080)|]);
                               (match x8081 with
                                | Some x8083 ->
                                    ignore
                                      (Ojs.call x8082 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8083)|])
                                | None -> ());
                               x8082))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8096 : 'tags this) ->
        fun ~type_:(x8088 : 'K) ->
          fun ~listener:(x8089 : this:t -> ev:any -> any) ->
            fun ?options:(x8090 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8098 = this_to_js Obj.magic x8096 in
                   Ojs.call (Ojs.get_prop_ascii x8098 "removeEventListener")
                     "apply"
                     [|x8098;((let x8091 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8091 "push" [|(Obj.magic x8088)|]);
                               ignore
                                 (Ojs.call x8091 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8094 : Ojs.t) ->
                                            fun (x8095 : Ojs.t) ->
                                              any_to_js
                                                (x8089 ~this:(t_of_js x8094)
                                                   ~ev:(any_of_js x8095))))|]);
                               (match x8090 with
                                | Some x8092 ->
                                    ignore
                                      (Ojs.call x8091 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8092)|])
                                | None -> ());
                               x8091))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8105 : 'tags this) ->
        fun ~type_:(x8099 : string) ->
          fun ~listener:(x8100 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x8101 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8107 = this_to_js Obj.magic x8105 in
                   Ojs.call (Ojs.get_prop_ascii x8107 "removeEventListener")
                     "apply"
                     [|x8107;((let x8102 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8102 "push"
                                    [|(Ojs.string_to_js x8099)|]);
                               ignore
                                 (Ojs.call x8102 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8100)|]);
                               (match x8101 with
                                | Some x8103 ->
                                    ignore
                                      (Ojs.call x8102 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8103)|])
                                | None -> ());
                               x8102))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope") 
             [||])
  end
module WorkerType =
  struct
    type t = [ `L_s49_classic  | `L_s117_module ]
    let rec t_of_js : Ojs.t -> t =
      fun (x8109 : Ojs.t) ->
        let x8110 = x8109 in
        match Ojs.string_of_js x8110 with
        | "classic" -> `L_s49_classic
        | "module" -> `L_s117_module
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x8108 : [ `L_s49_classic  | `L_s117_module ]) ->
        match x8108 with
        | `L_s49_classic -> Ojs.string_to_js "classic"
        | `L_s117_module -> Ojs.string_to_js "module"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8112 : Ojs.t) -> t_of_js x8112
    and t_0_to_js : t_0 -> Ojs.t = fun (x8111 : t) -> t_to_js x8111
  end
module RegistrationOptions =
  struct
    type t = [ `RegistrationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8114 : Ojs.t) -> t_of_js x8114
    and t_0_to_js : t_0 -> Ojs.t = fun (x8113 : t) -> t_to_js x8113
    type tags = [ `RegistrationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegistrationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8117 : Ojs.t) -> intf_of_js __tags_of_js x8117
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8115 : __tags intf) -> intf_to_js __tags_to_js x8115
    let (get_scope : 'tags this -> string) =
      fun (x8119 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8119) "scope")
    let (set_scope : 'tags this -> string -> unit) =
      fun (x8121 : 'tags this) ->
        fun (x8122 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8121) "scope"
            (Ojs.string_to_js x8122)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x8124 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8124) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x8126 : 'tags this) ->
        fun (x8127 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8126) "type"
            (WorkerType.t_to_js x8127)
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x8129 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8129) "updateViaCache")
    let (set_updateViaCache :
      'tags this -> ServiceWorkerUpdateViaCache.t -> unit) =
      fun (x8131 : 'tags this) ->
        fun (x8132 : ServiceWorkerUpdateViaCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8131) "updateViaCache"
            (ServiceWorkerUpdateViaCache.t_to_js x8132)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface95:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ServiceWorkerContainer.t
                         val set_prototype :
                           t -> ServiceWorkerContainer.t -> unit
                         val create : t -> ServiceWorkerContainer.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8135 : Ojs.t) -> x8135
    and t_to_js : t -> Ojs.t = fun (x8134 : Ojs.t) -> x8134
    let (get_prototype : t -> ServiceWorkerContainer.t) =
      fun (x8136 : t) ->
        ServiceWorkerContainer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8136) "prototype")
    let (set_prototype : t -> ServiceWorkerContainer.t -> unit) =
      fun (x8137 : t) ->
        fun (x8138 : ServiceWorkerContainer.t) ->
          Ojs.set_prop_ascii (t_to_js x8137) "prototype"
            (ServiceWorkerContainer.t_to_js x8138)
    let (create : t -> ServiceWorkerContainer.t) =
      fun (x8139 : t) ->
        ServiceWorkerContainer.t_of_js (Ojs.new_obj (t_to_js x8139) [||])
  end
 and
  ServiceWorkerContainer:sig
                           type t =
                             [ `EventTarget  | `ServiceWorkerContainer ] intf
                           type t_0 = t
                           [@@@js.stop ]
                           type tags =
                             [ `EventTarget  | `ServiceWorkerContainer ]
                           type tags_0 = tags
                           [@@@js.start ]
                           [@@@js.implem
                             type tags =
                               [ `EventTarget  | `ServiceWorkerContainer ]
                             type tags_0 = tags]
                           type 'tags this =
                             'tags intf constraint 'tags =
                                         [> `ServiceWorkerContainer ]
                           val t_to_js : t -> Ojs.t
                           val t_of_js : Ojs.t -> t
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val get_controller :
                             'tags this -> ServiceWorker.t or_null
                           val get_oncontrollerchange :
                             'tags this ->
                               (this:t -> ev:Event.t -> any) or_null
                           val set_oncontrollerchange :
                             'tags this ->
                               (this:t -> ev:Event.t -> any) or_null -> unit
                           val get_onmessage :
                             'tags this ->
                               (this:t -> ev:MessageEvent.t_0 -> any) or_null
                           val set_onmessage :
                             'tags this ->
                               (this:t -> ev:MessageEvent.t_0 -> any) or_null
                                 -> unit
                           val get_onmessageerror :
                             'tags this ->
                               (this:t -> ev:MessageEvent.t_0 -> any) or_null
                           val set_onmessageerror :
                             'tags this ->
                               (this:t -> ev:MessageEvent.t_0 -> any) or_null
                                 -> unit
                           val get_ready :
                             'tags this ->
                               ServiceWorkerRegistration.t Promise.t_1
                           val getRegistration :
                             'tags this ->
                               ?clientURL:URL.t or_string ->
                                 unit ->
                                   ServiceWorkerRegistration.t or_undefined
                                     Promise.t_1
                           val getRegistrations :
                             'tags this ->
                               ServiceWorkerRegistration.t list Promise.t_1
                           val register :
                             'tags this ->
                               scriptURL:URL.t or_string ->
                                 ?options:RegistrationOptions.t ->
                                   unit ->
                                     ServiceWorkerRegistration.t Promise.t_1
                           val startMessages : 'tags this -> unit
                           val addEventListener :
                             'tags this ->
                               type_:'K ->
                                 listener:(this:t -> ev:any -> any) ->
                                   ?options:AddEventListenerOptions.t
                                     or_boolean -> unit -> unit
                           val addEventListener' :
                             'tags this ->
                               type_:string ->
                                 listener:EventListenerOrEventListenerObject.t
                                   ->
                                   ?options:AddEventListenerOptions.t
                                     or_boolean -> unit -> unit
                           val removeEventListener :
                             'tags this ->
                               type_:'K ->
                                 listener:(this:t -> ev:any -> any) ->
                                   ?options:EventListenerOptions.t or_boolean
                                     -> unit -> unit
                           val removeEventListener' :
                             'tags this ->
                               type_:string ->
                                 listener:EventListenerOrEventListenerObject.t
                                   ->
                                   ?options:EventListenerOptions.t or_boolean
                                     -> unit -> unit
                           val cast_from : 'tags this -> t
                           val prototype : unit -> t
                           val create : unit -> t
                         end =
  struct
    type t = [ `EventTarget  | `ServiceWorkerContainer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8141 : Ojs.t) -> t_of_js x8141
    and t_0_to_js : t_0 -> Ojs.t = fun (x8140 : t) -> t_to_js x8140
    type tags = [ `EventTarget  | `ServiceWorkerContainer ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8144 : Ojs.t) -> intf_of_js __tags_of_js x8144
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8142 : __tags intf) -> intf_to_js __tags_to_js x8142
    let (get_controller : 'tags this -> ServiceWorker.t or_null) =
      fun (x8146 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8146) "controller")
    let (get_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x8149 : 'tags this) ->
        or_null_of_js
          (fun (x8151 : Ojs.t) ->
             fun ~this:(x8152 : t) ->
               fun ~ev:(x8153 : Event.t) ->
                 any_of_js
                   (Ojs.apply x8151 [|(t_to_js x8152);(Event.t_to_js x8153)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8149)
             "oncontrollerchange")
    let (set_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x8154 : 'tags this) ->
        fun (x8155 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8154)
            "oncontrollerchange"
            (or_null_to_js
               (fun (x8156 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8157 : Ojs.t) ->
                       fun (x8158 : Ojs.t) ->
                         any_to_js
                           (x8156 ~this:(t_of_js x8157)
                              ~ev:(Event.t_of_js x8158)))) x8155)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x8160 : 'tags this) ->
        or_null_of_js
          (fun (x8162 : Ojs.t) ->
             fun ~this:(x8163 : t) ->
               fun ~ev:(x8164 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x8162
                      [|(t_to_js x8163);(MessageEvent.t_0_to_js x8164)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8160) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x8165 : 'tags this) ->
        fun (x8166 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8165) "onmessage"
            (or_null_to_js
               (fun (x8167 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8168 : Ojs.t) ->
                       fun (x8169 : Ojs.t) ->
                         any_to_js
                           (x8167 ~this:(t_of_js x8168)
                              ~ev:(MessageEvent.t_0_of_js x8169)))) x8166)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x8171 : 'tags this) ->
        or_null_of_js
          (fun (x8173 : Ojs.t) ->
             fun ~this:(x8174 : t) ->
               fun ~ev:(x8175 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x8173
                      [|(t_to_js x8174);(MessageEvent.t_0_to_js x8175)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8171) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x8176 : 'tags this) ->
        fun (x8177 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8176) "onmessageerror"
            (or_null_to_js
               (fun (x8178 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8179 : Ojs.t) ->
                       fun (x8180 : Ojs.t) ->
                         any_to_js
                           (x8178 ~this:(t_of_js x8179)
                              ~ev:(MessageEvent.t_0_of_js x8180)))) x8177)
    let (get_ready : 'tags this -> ServiceWorkerRegistration.t Promise.t_1) =
      fun (x8182 : 'tags this) ->
        Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8182) "ready")
    let (getRegistration :
      'tags this ->
        ?clientURL:URL.t or_string ->
          unit -> ServiceWorkerRegistration.t or_undefined Promise.t_1)
      =
      fun (x8189 : 'tags this) ->
        fun ?clientURL:(x8185 : URL.t or_string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x8192 : Ojs.t) ->
                 or_undefined_of_js ServiceWorkerRegistration.t_of_js x8192)
              (let x8191 = this_to_js Obj.magic x8189 in
               Ojs.call (Ojs.get_prop_ascii x8191 "getRegistration") "apply"
                 [|x8191;((let x8186 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8185 with
                            | Some x8187 ->
                                ignore
                                  (Ojs.call x8186 "push"
                                     [|(or_string_to_js URL.t_to_js x8187)|])
                            | None -> ());
                           x8186))|])
    let (getRegistrations :
      'tags this -> ServiceWorkerRegistration.t list Promise.t_1) =
      fun (x8194 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x8196 : Ojs.t) ->
             Ojs.list_of_js ServiceWorkerRegistration.t_of_js x8196)
          (Ojs.call (this_to_js Obj.magic x8194) "getRegistrations" [||])
    let (register :
      'tags this ->
        scriptURL:URL.t or_string ->
          ?options:RegistrationOptions.t ->
            unit -> ServiceWorkerRegistration.t Promise.t_1)
      =
      fun (x8203 : 'tags this) ->
        fun ~scriptURL:(x8198 : URL.t or_string) ->
          fun ?options:(x8199 : RegistrationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
                (let x8205 = this_to_js Obj.magic x8203 in
                 Ojs.call (Ojs.get_prop_ascii x8205 "register") "apply"
                   [|x8205;((let x8200 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8200 "push"
                                  [|(or_string_to_js URL.t_to_js x8198)|]);
                             (match x8199 with
                              | Some x8201 ->
                                  ignore
                                    (Ojs.call x8200 "push"
                                       [|(RegistrationOptions.t_to_js x8201)|])
                              | None -> ());
                             x8200))|])
    let (startMessages : 'tags this -> unit) =
      fun (x8207 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x8207) "startMessages" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8217 : 'tags this) ->
        fun ~type_:(x8209 : 'K) ->
          fun ~listener:(x8210 : this:t -> ev:any -> any) ->
            fun
              ?options:(x8211 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8219 = this_to_js Obj.magic x8217 in
                   Ojs.call (Ojs.get_prop_ascii x8219 "addEventListener")
                     "apply"
                     [|x8219;((let x8212 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8212 "push" [|(Obj.magic x8209)|]);
                               ignore
                                 (Ojs.call x8212 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8215 : Ojs.t) ->
                                            fun (x8216 : Ojs.t) ->
                                              any_to_js
                                                (x8210 ~this:(t_of_js x8215)
                                                   ~ev:(any_of_js x8216))))|]);
                               (match x8211 with
                                | Some x8213 ->
                                    ignore
                                      (Ojs.call x8212 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8213)|])
                                | None -> ());
                               x8212))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8226 : 'tags this) ->
        fun ~type_:(x8220 : string) ->
          fun ~listener:(x8221 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x8222 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8228 = this_to_js Obj.magic x8226 in
                   Ojs.call (Ojs.get_prop_ascii x8228 "addEventListener")
                     "apply"
                     [|x8228;((let x8223 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8223 "push"
                                    [|(Ojs.string_to_js x8220)|]);
                               ignore
                                 (Ojs.call x8223 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8221)|]);
                               (match x8222 with
                                | Some x8224 ->
                                    ignore
                                      (Ojs.call x8223 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8224)|])
                                | None -> ());
                               x8223))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8237 : 'tags this) ->
        fun ~type_:(x8229 : 'K) ->
          fun ~listener:(x8230 : this:t -> ev:any -> any) ->
            fun ?options:(x8231 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8239 = this_to_js Obj.magic x8237 in
                   Ojs.call (Ojs.get_prop_ascii x8239 "removeEventListener")
                     "apply"
                     [|x8239;((let x8232 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8232 "push" [|(Obj.magic x8229)|]);
                               ignore
                                 (Ojs.call x8232 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8235 : Ojs.t) ->
                                            fun (x8236 : Ojs.t) ->
                                              any_to_js
                                                (x8230 ~this:(t_of_js x8235)
                                                   ~ev:(any_of_js x8236))))|]);
                               (match x8231 with
                                | Some x8233 ->
                                    ignore
                                      (Ojs.call x8232 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8233)|])
                                | None -> ());
                               x8232))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8246 : 'tags this) ->
        fun ~type_:(x8240 : string) ->
          fun ~listener:(x8241 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x8242 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8248 = this_to_js Obj.magic x8246 in
                   Ojs.call (Ojs.get_prop_ascii x8248 "removeEventListener")
                     "apply"
                     [|x8248;((let x8243 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8243 "push"
                                    [|(Ojs.string_to_js x8240)|]);
                               ignore
                                 (Ojs.call x8243 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8241)|]);
                               (match x8242 with
                                | Some x8244 ->
                                    ignore
                                      (Ojs.call x8243 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8244)|])
                                | None -> ());
                               x8243))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer") 
             [||])
  end
module SecurityPolicyViolationEventDisposition =
  struct
    type t = [ `L_s66_enforce  | `L_s169_report ]
    let rec t_of_js : Ojs.t -> t =
      fun (x8250 : Ojs.t) ->
        let x8251 = x8250 in
        match Ojs.string_of_js x8251 with
        | "enforce" -> `L_s66_enforce
        | "report" -> `L_s169_report
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x8249 : [ `L_s66_enforce  | `L_s169_report ]) ->
        match x8249 with
        | `L_s66_enforce -> Ojs.string_to_js "enforce"
        | `L_s169_report -> Ojs.string_to_js "report"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8253 : Ojs.t) -> t_of_js x8253
    and t_0_to_js : t_0 -> Ojs.t = fun (x8252 : t) -> t_to_js x8252
  end
module SecurityPolicyViolationEventInit =
  struct
    type t = [ `EventInit  | `SecurityPolicyViolationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8255 : Ojs.t) -> t_of_js x8255
    and t_0_to_js : t_0 -> Ojs.t = fun (x8254 : t) -> t_to_js x8254
    type tags = [ `EventInit  | `SecurityPolicyViolationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8258 : Ojs.t) -> intf_of_js __tags_of_js x8258
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8256 : __tags intf) -> intf_to_js __tags_to_js x8256
    let (get_blockedURI : 'tags this -> string) =
      fun (x8260 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8260) "blockedURI")
    let (set_blockedURI : 'tags this -> string -> unit) =
      fun (x8262 : 'tags this) ->
        fun (x8263 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8262) "blockedURI"
            (Ojs.string_to_js x8263)
    let (get_columnNumber : 'tags this -> float) =
      fun (x8265 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8265) "columnNumber")
    let (set_columnNumber : 'tags this -> float -> unit) =
      fun (x8267 : 'tags this) ->
        fun (x8268 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8267) "columnNumber"
            (Ojs.float_to_js x8268)
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x8270 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8270) "disposition")
    let (set_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t -> unit) =
      fun (x8272 : 'tags this) ->
        fun (x8273 : SecurityPolicyViolationEventDisposition.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8272) "disposition"
            (SecurityPolicyViolationEventDisposition.t_to_js x8273)
    let (get_documentURI : 'tags this -> string) =
      fun (x8275 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8275) "documentURI")
    let (set_documentURI : 'tags this -> string -> unit) =
      fun (x8277 : 'tags this) ->
        fun (x8278 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8277) "documentURI"
            (Ojs.string_to_js x8278)
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x8280 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8280)
             "effectiveDirective")
    let (set_effectiveDirective : 'tags this -> string -> unit) =
      fun (x8282 : 'tags this) ->
        fun (x8283 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8282)
            "effectiveDirective" (Ojs.string_to_js x8283)
    let (get_lineNumber : 'tags this -> float) =
      fun (x8285 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8285) "lineNumber")
    let (set_lineNumber : 'tags this -> float -> unit) =
      fun (x8287 : 'tags this) ->
        fun (x8288 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8287) "lineNumber"
            (Ojs.float_to_js x8288)
    let (get_originalPolicy : 'tags this -> string) =
      fun (x8290 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8290) "originalPolicy")
    let (set_originalPolicy : 'tags this -> string -> unit) =
      fun (x8292 : 'tags this) ->
        fun (x8293 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8292) "originalPolicy"
            (Ojs.string_to_js x8293)
    let (get_referrer : 'tags this -> string) =
      fun (x8295 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8295) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x8297 : 'tags this) ->
        fun (x8298 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8297) "referrer"
            (Ojs.string_to_js x8298)
    let (get_sample : 'tags this -> string) =
      fun (x8300 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8300) "sample")
    let (set_sample : 'tags this -> string -> unit) =
      fun (x8302 : 'tags this) ->
        fun (x8303 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8302) "sample"
            (Ojs.string_to_js x8303)
    let (get_sourceFile : 'tags this -> string) =
      fun (x8305 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8305) "sourceFile")
    let (set_sourceFile : 'tags this -> string -> unit) =
      fun (x8307 : 'tags this) ->
        fun (x8308 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8307) "sourceFile"
            (Ojs.string_to_js x8308)
    let (get_statusCode : 'tags this -> float) =
      fun (x8310 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8310) "statusCode")
    let (set_statusCode : 'tags this -> float -> unit) =
      fun (x8312 : 'tags this) ->
        fun (x8313 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8312) "statusCode"
            (Ojs.float_to_js x8313)
    let (get_violatedDirective : 'tags this -> string) =
      fun (x8315 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8315)
             "violatedDirective")
    let (set_violatedDirective : 'tags this -> string -> unit) =
      fun (x8317 : 'tags this) ->
        fun (x8318 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8317) "violatedDirective"
            (Ojs.string_to_js x8318)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface93:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> SecurityPolicyViolationEvent.t
                         val set_prototype :
                           t -> SecurityPolicyViolationEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:SecurityPolicyViolationEventInit.t
                                 -> unit -> SecurityPolicyViolationEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8321 : Ojs.t) -> x8321
    and t_to_js : t -> Ojs.t = fun (x8320 : Ojs.t) -> x8320
    let (get_prototype : t -> SecurityPolicyViolationEvent.t) =
      fun (x8322 : t) ->
        SecurityPolicyViolationEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8322) "prototype")
    let (set_prototype : t -> SecurityPolicyViolationEvent.t -> unit) =
      fun (x8323 : t) ->
        fun (x8324 : SecurityPolicyViolationEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x8323) "prototype"
            (SecurityPolicyViolationEvent.t_to_js x8324)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:SecurityPolicyViolationEventInit.t ->
            unit -> SecurityPolicyViolationEvent.t)
      =
      fun (x8329 : t) ->
        fun ~type_:(x8325 : string) ->
          fun
            ?eventInitDict:(x8326 :
                             SecurityPolicyViolationEventInit.t option)
            ->
            fun () ->
              SecurityPolicyViolationEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x8329)
                   (let x8327 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x8327 "push" [|(Ojs.string_to_js x8325)|]);
                    (match x8326 with
                     | Some x8328 ->
                         ignore
                           (Ojs.call x8327 "push"
                              [|(SecurityPolicyViolationEventInit.t_to_js
                                   x8328)|])
                     | None -> ());
                    x8327))
  end
 and
  SecurityPolicyViolationEvent:sig
                                 type t =
                                   [ `Event 
                                   | `SecurityPolicyViolationEvent ] intf
                                 type t_0 = t
                                 [@@@js.stop ]
                                 type tags =
                                   [ `Event 
                                   | `SecurityPolicyViolationEvent ]
                                 type tags_0 = tags
                                 [@@@js.start ]
                                 [@@@js.implem
                                   type tags =
                                     [ `Event 
                                     | `SecurityPolicyViolationEvent ]
                                   type tags_0 = tags]
                                 type 'tags this =
                                   'tags intf constraint 'tags =
                                               [>
                                                 `SecurityPolicyViolationEvent
                                                   ]
                                 val t_to_js : t -> Ojs.t
                                 val t_of_js : Ojs.t -> t
                                 val t_0_to_js : t_0 -> Ojs.t
                                 val t_0_of_js : Ojs.t -> t_0
                                 val get_blockedURI : 'tags this -> string
                                 val get_columnNumber : 'tags this -> float
                                 val get_disposition :
                                   'tags this ->
                                     SecurityPolicyViolationEventDisposition.t
                                 val get_documentURI : 'tags this -> string
                                 val get_effectiveDirective :
                                   'tags this -> string
                                 val get_lineNumber : 'tags this -> float
                                 val get_originalPolicy :
                                   'tags this -> string
                                 val get_referrer : 'tags this -> string
                                 val get_sample : 'tags this -> string
                                 val get_sourceFile : 'tags this -> string
                                 val get_statusCode : 'tags this -> float
                                 val get_violatedDirective :
                                   'tags this -> string
                                 val cast_from : 'tags this -> t
                                 val prototype : unit -> t
                                 val create :
                                   type_:string ->
                                     ?eventInitDict:SecurityPolicyViolationEventInit.t
                                       -> unit -> t
                               end =
  struct
    type t = [ `Event  | `SecurityPolicyViolationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8331 : Ojs.t) -> t_of_js x8331
    and t_0_to_js : t_0 -> Ojs.t = fun (x8330 : t) -> t_to_js x8330
    type tags = [ `Event  | `SecurityPolicyViolationEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8334 : Ojs.t) -> intf_of_js __tags_of_js x8334
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8332 : __tags intf) -> intf_to_js __tags_to_js x8332
    let (get_blockedURI : 'tags this -> string) =
      fun (x8336 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8336) "blockedURI")
    let (get_columnNumber : 'tags this -> float) =
      fun (x8338 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8338) "columnNumber")
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x8340 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8340) "disposition")
    let (get_documentURI : 'tags this -> string) =
      fun (x8342 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8342) "documentURI")
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x8344 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8344)
             "effectiveDirective")
    let (get_lineNumber : 'tags this -> float) =
      fun (x8346 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8346) "lineNumber")
    let (get_originalPolicy : 'tags this -> string) =
      fun (x8348 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8348) "originalPolicy")
    let (get_referrer : 'tags this -> string) =
      fun (x8350 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8350) "referrer")
    let (get_sample : 'tags this -> string) =
      fun (x8352 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8352) "sample")
    let (get_sourceFile : 'tags this -> string) =
      fun (x8354 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8354) "sourceFile")
    let (get_statusCode : 'tags this -> float) =
      fun (x8356 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8356) "statusCode")
    let (get_violatedDirective : 'tags this -> string) =
      fun (x8358 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8358)
             "violatedDirective")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SecurityPolicyViolationEvent")
             "prototype")
    let (create :
      type_:string ->
        ?eventInitDict:SecurityPolicyViolationEventInit.t -> unit -> t)
      =
      fun ~type_:(x8360 : string) ->
        fun
          ?eventInitDict:(x8361 : SecurityPolicyViolationEventInit.t option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global
                    "SecurityPolicyViolationEvent")
                 (let x8362 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x8362 "push" [|(Ojs.string_to_js x8360)|]);
                  (match x8361 with
                   | Some x8363 ->
                       ignore
                         (Ojs.call x8362 "push"
                            [|(SecurityPolicyViolationEventInit.t_to_js x8363)|])
                   | None -> ());
                  x8362))
  end
module DOMMatrix2DInit =
  struct
    type t = [ `DOMMatrix2DInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8365 : Ojs.t) -> t_of_js x8365
    and t_0_to_js : t_0 -> Ojs.t = fun (x8364 : t) -> t_to_js x8364
    type tags = [ `DOMMatrix2DInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix2DInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8368 : Ojs.t) -> intf_of_js __tags_of_js x8368
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8366 : __tags intf) -> intf_to_js __tags_to_js x8366
    let (get_a : 'tags this -> float) =
      fun (x8370 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8370) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x8372 : 'tags this) ->
        fun (x8373 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8372) "a"
            (Ojs.float_to_js x8373)
    let (get_b : 'tags this -> float) =
      fun (x8375 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8375) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x8377 : 'tags this) ->
        fun (x8378 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8377) "b"
            (Ojs.float_to_js x8378)
    let (get_c : 'tags this -> float) =
      fun (x8380 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8380) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x8382 : 'tags this) ->
        fun (x8383 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8382) "c"
            (Ojs.float_to_js x8383)
    let (get_d : 'tags this -> float) =
      fun (x8385 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8385) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x8387 : 'tags this) ->
        fun (x8388 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8387) "d"
            (Ojs.float_to_js x8388)
    let (get_e : 'tags this -> float) =
      fun (x8390 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8390) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x8392 : 'tags this) ->
        fun (x8393 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8392) "e"
            (Ojs.float_to_js x8393)
    let (get_f : 'tags this -> float) =
      fun (x8395 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8395) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x8397 : 'tags this) ->
        fun (x8398 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8397) "f"
            (Ojs.float_to_js x8398)
    let (get_m11 : 'tags this -> float) =
      fun (x8400 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8400) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x8402 : 'tags this) ->
        fun (x8403 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8402) "m11"
            (Ojs.float_to_js x8403)
    let (get_m12 : 'tags this -> float) =
      fun (x8405 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8405) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x8407 : 'tags this) ->
        fun (x8408 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8407) "m12"
            (Ojs.float_to_js x8408)
    let (get_m21 : 'tags this -> float) =
      fun (x8410 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8410) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x8412 : 'tags this) ->
        fun (x8413 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8412) "m21"
            (Ojs.float_to_js x8413)
    let (get_m22 : 'tags this -> float) =
      fun (x8415 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8415) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x8417 : 'tags this) ->
        fun (x8418 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8417) "m22"
            (Ojs.float_to_js x8418)
    let (get_m41 : 'tags this -> float) =
      fun (x8420 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8420) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x8422 : 'tags this) ->
        fun (x8423 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8422) "m41"
            (Ojs.float_to_js x8423)
    let (get_m42 : 'tags this -> float) =
      fun (x8425 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8425) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x8427 : 'tags this) ->
        fun (x8428 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8427) "m42"
            (Ojs.float_to_js x8428)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface8:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> CanvasPattern.t
                        val set_prototype : t -> CanvasPattern.t -> unit
                        val create : t -> CanvasPattern.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8431 : Ojs.t) -> x8431
    and t_to_js : t -> Ojs.t = fun (x8430 : Ojs.t) -> x8430
    let (get_prototype : t -> CanvasPattern.t) =
      fun (x8432 : t) ->
        CanvasPattern.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8432) "prototype")
    let (set_prototype : t -> CanvasPattern.t -> unit) =
      fun (x8433 : t) ->
        fun (x8434 : CanvasPattern.t) ->
          Ojs.set_prop_ascii (t_to_js x8433) "prototype"
            (CanvasPattern.t_to_js x8434)
    let (create : t -> CanvasPattern.t) =
      fun (x8435 : t) ->
        CanvasPattern.t_of_js (Ojs.new_obj (t_to_js x8435) [||])
  end
 and
  CanvasPattern:sig
                  type t = [ `CanvasPattern ] intf
                  type t_0 = t
                  [@@@js.stop ]
                  type tags = [ `CanvasPattern ]
                  type tags_0 = tags
                  [@@@js.start ]
                  [@@@js.implem
                    type tags = [ `CanvasPattern ]
                    type tags_0 = tags]
                  type 'tags this =
                    'tags intf constraint 'tags = [> `CanvasPattern ]
                  val t_to_js : t -> Ojs.t
                  val t_of_js : Ojs.t -> t
                  val t_0_to_js : t_0 -> Ojs.t
                  val t_0_of_js : Ojs.t -> t_0
                  val setTransform :
                    'tags this ->
                      ?transform:DOMMatrix2DInit.t -> unit -> unit
                  val cast_from : 'tags this -> t
                  val prototype : unit -> t
                  val create : unit -> t
                end =
  struct
    type t = [ `CanvasPattern ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8437 : Ojs.t) -> t_of_js x8437
    and t_0_to_js : t_0 -> Ojs.t = fun (x8436 : t) -> t_to_js x8436
    type tags = [ `CanvasPattern ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPattern ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8440 : Ojs.t) -> intf_of_js __tags_of_js x8440
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8438 : __tags intf) -> intf_to_js __tags_to_js x8438
    let (setTransform :
      'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x8445 : 'tags this) ->
        fun ?transform:(x8442 : DOMMatrix2DInit.t option) ->
          fun () ->
            ignore
              (let x8447 = this_to_js Obj.magic x8445 in
               Ojs.call (Ojs.get_prop_ascii x8447 "setTransform") "apply"
                 [|x8447;((let x8443 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8442 with
                            | Some x8444 ->
                                ignore
                                  (Ojs.call x8443 "push"
                                     [|(DOMMatrix2DInit.t_to_js x8444)|])
                            | None -> ());
                           x8443))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CanvasPattern")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasPattern") [||])
  end
module PermissionName =
  struct
    type t =
      [ `L_s80_geolocation  | `L_s131_notifications 
      | `L_s148_persistent_storage  | `L_s159_push 
      | `L_s173_screen_wake_lock  | `L_s211_xr_spatial_tracking ]
    let rec t_of_js : Ojs.t -> t =
      fun (x8449 : Ojs.t) ->
        let x8450 = x8449 in
        match Ojs.string_of_js x8450 with
        | "geolocation" -> `L_s80_geolocation
        | "notifications" -> `L_s131_notifications
        | "persistent-storage" -> `L_s148_persistent_storage
        | "push" -> `L_s159_push
        | "screen-wake-lock" -> `L_s173_screen_wake_lock
        | "xr-spatial-tracking" -> `L_s211_xr_spatial_tracking
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x8448 :
          [ `L_s80_geolocation  | `L_s131_notifications 
          | `L_s148_persistent_storage  | `L_s159_push 
          | `L_s173_screen_wake_lock  | `L_s211_xr_spatial_tracking ])
        ->
        match x8448 with
        | `L_s80_geolocation -> Ojs.string_to_js "geolocation"
        | `L_s131_notifications -> Ojs.string_to_js "notifications"
        | `L_s148_persistent_storage -> Ojs.string_to_js "persistent-storage"
        | `L_s159_push -> Ojs.string_to_js "push"
        | `L_s173_screen_wake_lock -> Ojs.string_to_js "screen-wake-lock"
        | `L_s211_xr_spatial_tracking ->
            Ojs.string_to_js "xr-spatial-tracking"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8452 : Ojs.t) -> t_of_js x8452
    and t_0_to_js : t_0 -> Ojs.t = fun (x8451 : t) -> t_to_js x8451
  end
module PermissionDescriptor =
  struct
    type t = [ `PermissionDescriptor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8454 : Ojs.t) -> t_of_js x8454
    and t_0_to_js : t_0 -> Ojs.t = fun (x8453 : t) -> t_to_js x8453
    type tags = [ `PermissionDescriptor ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionDescriptor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8457 : Ojs.t) -> intf_of_js __tags_of_js x8457
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8455 : __tags intf) -> intf_to_js __tags_to_js x8455
    let (get_name : 'tags this -> PermissionName.t) =
      fun (x8459 : 'tags this) ->
        PermissionName.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8459) "name")
    let (set_name : 'tags this -> PermissionName.t -> unit) =
      fun (x8461 : 'tags this) ->
        fun (x8462 : PermissionName.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8461) "name"
            (PermissionName.t_to_js x8462)
    let cast_from = Obj.magic
  end
module PermissionState =
  struct
    type t = [ `L_s58_denied  | `L_s82_granted  | `L_s157_prompt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x8465 : Ojs.t) ->
        let x8466 = x8465 in
        match Ojs.string_of_js x8466 with
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | "prompt" -> `L_s157_prompt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x8464 : [ `L_s58_denied  | `L_s82_granted  | `L_s157_prompt ]) ->
        match x8464 with
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
        | `L_s157_prompt -> Ojs.string_to_js "prompt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8468 : Ojs.t) -> t_of_js x8468
    and t_0_to_js : t_0 -> Ojs.t = fun (x8467 : t) -> t_to_js x8467
  end
module rec
  AnonymousInterface78:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PermissionStatus.t
                         val set_prototype : t -> PermissionStatus.t -> unit
                         val create : t -> PermissionStatus.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8470 : Ojs.t) -> x8470
    and t_to_js : t -> Ojs.t = fun (x8469 : Ojs.t) -> x8469
    let (get_prototype : t -> PermissionStatus.t) =
      fun (x8471 : t) ->
        PermissionStatus.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8471) "prototype")
    let (set_prototype : t -> PermissionStatus.t -> unit) =
      fun (x8472 : t) ->
        fun (x8473 : PermissionStatus.t) ->
          Ojs.set_prop_ascii (t_to_js x8472) "prototype"
            (PermissionStatus.t_to_js x8473)
    let (create : t -> PermissionStatus.t) =
      fun (x8474 : t) ->
        PermissionStatus.t_of_js (Ojs.new_obj (t_to_js x8474) [||])
  end
 and
  PermissionStatus:sig
                     type t = [ `EventTarget  | `PermissionStatus ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `EventTarget  | `PermissionStatus ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `EventTarget  | `PermissionStatus ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `PermissionStatus ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_onchange :
                       'tags this -> (this:t -> ev:Event.t -> any) or_null
                     val set_onchange :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) or_null -> unit
                     val get_state : 'tags this -> PermissionState.t
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
  struct
    type t = [ `EventTarget  | `PermissionStatus ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8476 : Ojs.t) -> t_of_js x8476
    and t_0_to_js : t_0 -> Ojs.t = fun (x8475 : t) -> t_to_js x8475
    type tags = [ `EventTarget  | `PermissionStatus ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatus ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8479 : Ojs.t) -> intf_of_js __tags_of_js x8479
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8477 : __tags intf) -> intf_to_js __tags_to_js x8477
    let (get_onchange : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x8481 : 'tags this) ->
        or_null_of_js
          (fun (x8483 : Ojs.t) ->
             fun ~this:(x8484 : t) ->
               fun ~ev:(x8485 : Event.t) ->
                 any_of_js
                   (Ojs.apply x8483 [|(t_to_js x8484);(Event.t_to_js x8485)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8481) "onchange")
    let (set_onchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x8486 : 'tags this) ->
        fun (x8487 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8486) "onchange"
            (or_null_to_js
               (fun (x8488 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8489 : Ojs.t) ->
                       fun (x8490 : Ojs.t) ->
                         any_to_js
                           (x8488 ~this:(t_of_js x8489)
                              ~ev:(Event.t_of_js x8490)))) x8487)
    let (get_state : 'tags this -> PermissionState.t) =
      fun (x8492 : 'tags this) ->
        PermissionState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8492) "state")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8502 : 'tags this) ->
        fun ~type_:(x8494 : 'K) ->
          fun ~listener:(x8495 : this:t -> ev:any -> any) ->
            fun
              ?options:(x8496 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8504 = this_to_js Obj.magic x8502 in
                   Ojs.call (Ojs.get_prop_ascii x8504 "addEventListener")
                     "apply"
                     [|x8504;((let x8497 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8497 "push" [|(Obj.magic x8494)|]);
                               ignore
                                 (Ojs.call x8497 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8500 : Ojs.t) ->
                                            fun (x8501 : Ojs.t) ->
                                              any_to_js
                                                (x8495 ~this:(t_of_js x8500)
                                                   ~ev:(any_of_js x8501))))|]);
                               (match x8496 with
                                | Some x8498 ->
                                    ignore
                                      (Ojs.call x8497 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8498)|])
                                | None -> ());
                               x8497))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8511 : 'tags this) ->
        fun ~type_:(x8505 : string) ->
          fun ~listener:(x8506 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x8507 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8513 = this_to_js Obj.magic x8511 in
                   Ojs.call (Ojs.get_prop_ascii x8513 "addEventListener")
                     "apply"
                     [|x8513;((let x8508 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8508 "push"
                                    [|(Ojs.string_to_js x8505)|]);
                               ignore
                                 (Ojs.call x8508 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8506)|]);
                               (match x8507 with
                                | Some x8509 ->
                                    ignore
                                      (Ojs.call x8508 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8509)|])
                                | None -> ());
                               x8508))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8522 : 'tags this) ->
        fun ~type_:(x8514 : 'K) ->
          fun ~listener:(x8515 : this:t -> ev:any -> any) ->
            fun ?options:(x8516 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8524 = this_to_js Obj.magic x8522 in
                   Ojs.call (Ojs.get_prop_ascii x8524 "removeEventListener")
                     "apply"
                     [|x8524;((let x8517 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8517 "push" [|(Obj.magic x8514)|]);
                               ignore
                                 (Ojs.call x8517 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8520 : Ojs.t) ->
                                            fun (x8521 : Ojs.t) ->
                                              any_to_js
                                                (x8515 ~this:(t_of_js x8520)
                                                   ~ev:(any_of_js x8521))))|]);
                               (match x8516 with
                                | Some x8518 ->
                                    ignore
                                      (Ojs.call x8517 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8518)|])
                                | None -> ());
                               x8517))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8531 : 'tags this) ->
        fun ~type_:(x8525 : string) ->
          fun ~listener:(x8526 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x8527 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8533 = this_to_js Obj.magic x8531 in
                   Ojs.call (Ojs.get_prop_ascii x8533 "removeEventListener")
                     "apply"
                     [|x8533;((let x8528 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8528 "push"
                                    [|(Ojs.string_to_js x8525)|]);
                               ignore
                                 (Ojs.call x8528 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8526)|]);
                               (match x8527 with
                                | Some x8529 ->
                                    ignore
                                      (Ojs.call x8528 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8529)|])
                                | None -> ());
                               x8528))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PermissionStatus") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PermissionStatus")
             [||])
  end
module rec
  AnonymousInterface79:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Permissions.t
                         val set_prototype : t -> Permissions.t -> unit
                         val create : t -> Permissions.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8535 : Ojs.t) -> x8535
    and t_to_js : t -> Ojs.t = fun (x8534 : Ojs.t) -> x8534
    let (get_prototype : t -> Permissions.t) =
      fun (x8536 : t) ->
        Permissions.t_of_js (Ojs.get_prop_ascii (t_to_js x8536) "prototype")
    let (set_prototype : t -> Permissions.t -> unit) =
      fun (x8537 : t) ->
        fun (x8538 : Permissions.t) ->
          Ojs.set_prop_ascii (t_to_js x8537) "prototype"
            (Permissions.t_to_js x8538)
    let (create : t -> Permissions.t) =
      fun (x8539 : t) ->
        Permissions.t_of_js (Ojs.new_obj (t_to_js x8539) [||])
  end
 and
  Permissions:sig
                type t = [ `Permissions ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `Permissions ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `Permissions ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `Permissions ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val query :
                  'tags this ->
                    permissionDesc:PermissionDescriptor.t ->
                      PermissionStatus.t Promise.t_1
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `Permissions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8541 : Ojs.t) -> t_of_js x8541
    and t_0_to_js : t_0 -> Ojs.t = fun (x8540 : t) -> t_to_js x8540
    type tags = [ `Permissions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Permissions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8544 : Ojs.t) -> intf_of_js __tags_of_js x8544
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8542 : __tags intf) -> intf_to_js __tags_to_js x8542
    let (query :
      'tags this ->
        permissionDesc:PermissionDescriptor.t ->
          PermissionStatus.t Promise.t_1)
      =
      fun (x8547 : 'tags this) ->
        fun ~permissionDesc:(x8546 : PermissionDescriptor.t) ->
          Promise.t_1_of_js PermissionStatus.t_of_js
            (Ojs.call (this_to_js Obj.magic x8547) "query"
               [|(PermissionDescriptor.t_to_js x8546)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Permissions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Permissions") [||])
  end
module rec
  AnonymousInterface77:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceServerTiming.t
                         val set_prototype :
                           t -> PerformanceServerTiming.t -> unit
                         val create : t -> PerformanceServerTiming.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8551 : Ojs.t) -> x8551
    and t_to_js : t -> Ojs.t = fun (x8550 : Ojs.t) -> x8550
    let (get_prototype : t -> PerformanceServerTiming.t) =
      fun (x8552 : t) ->
        PerformanceServerTiming.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8552) "prototype")
    let (set_prototype : t -> PerformanceServerTiming.t -> unit) =
      fun (x8553 : t) ->
        fun (x8554 : PerformanceServerTiming.t) ->
          Ojs.set_prop_ascii (t_to_js x8553) "prototype"
            (PerformanceServerTiming.t_to_js x8554)
    let (create : t -> PerformanceServerTiming.t) =
      fun (x8555 : t) ->
        PerformanceServerTiming.t_of_js (Ojs.new_obj (t_to_js x8555) [||])
  end
 and
  PerformanceServerTiming:sig
                            type t = [ `PerformanceServerTiming ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags = [ `PerformanceServerTiming ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags = [ `PerformanceServerTiming ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `PerformanceServerTiming ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_description : 'tags this -> string
                            val get_duration :
                              'tags this -> DOMHighResTimeStamp.t
                            val get_name : 'tags this -> string
                            val toJSON : 'tags this -> any
                            val cast_from : 'tags this -> t
                            val prototype : unit -> t
                            val create : unit -> t
                          end =
  struct
    type t = [ `PerformanceServerTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8557 : Ojs.t) -> t_of_js x8557
    and t_0_to_js : t_0 -> Ojs.t = fun (x8556 : t) -> t_to_js x8556
    type tags = [ `PerformanceServerTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceServerTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8560 : Ojs.t) -> intf_of_js __tags_of_js x8560
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8558 : __tags intf) -> intf_to_js __tags_to_js x8558
    let (get_description : 'tags this -> string) =
      fun (x8562 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8562) "description")
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8564 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8564) "duration")
    let (get_name : 'tags this -> string) =
      fun (x8566 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8566) "name")
    let (toJSON : 'tags this -> any) =
      fun (x8568 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x8568) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming") 
             [||])
  end
module rec
  AnonymousInterface76:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceResourceTiming.t
                         val set_prototype :
                           t -> PerformanceResourceTiming.t -> unit
                         val create : t -> PerformanceResourceTiming.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8571 : Ojs.t) -> x8571
    and t_to_js : t -> Ojs.t = fun (x8570 : Ojs.t) -> x8570
    let (get_prototype : t -> PerformanceResourceTiming.t) =
      fun (x8572 : t) ->
        PerformanceResourceTiming.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8572) "prototype")
    let (set_prototype : t -> PerformanceResourceTiming.t -> unit) =
      fun (x8573 : t) ->
        fun (x8574 : PerformanceResourceTiming.t) ->
          Ojs.set_prop_ascii (t_to_js x8573) "prototype"
            (PerformanceResourceTiming.t_to_js x8574)
    let (create : t -> PerformanceResourceTiming.t) =
      fun (x8575 : t) ->
        PerformanceResourceTiming.t_of_js (Ojs.new_obj (t_to_js x8575) [||])
  end
 and
  PerformanceResourceTiming:sig
                              type t =
                                [ `PerformanceEntry 
                                | `PerformanceResourceTiming ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `PerformanceEntry 
                                | `PerformanceResourceTiming ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `PerformanceEntry 
                                  | `PerformanceResourceTiming ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `PerformanceResourceTiming ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_connectEnd :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_connectStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_decodedBodySize : 'tags this -> float
                              val get_domainLookupEnd :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_domainLookupStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_encodedBodySize : 'tags this -> float
                              val get_fetchStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_initiatorType : 'tags this -> string
                              val get_nextHopProtocol : 'tags this -> string
                              val get_redirectEnd :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_redirectStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_requestStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_responseEnd :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_responseStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_secureConnectionStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_serverTiming :
                                'tags this -> PerformanceServerTiming.t list
                              val get_transferSize : 'tags this -> float
                              val get_workerStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val toJSON : 'tags this -> any
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
  struct
    type t = [ `PerformanceEntry  | `PerformanceResourceTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8577 : Ojs.t) -> t_of_js x8577
    and t_0_to_js : t_0 -> Ojs.t = fun (x8576 : t) -> t_to_js x8576
    type tags = [ `PerformanceEntry  | `PerformanceResourceTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceResourceTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8580 : Ojs.t) -> intf_of_js __tags_of_js x8580
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8578 : __tags intf) -> intf_to_js __tags_to_js x8578
    let (get_connectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8582 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8582) "connectEnd")
    let (get_connectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8584 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8584) "connectStart")
    let (get_decodedBodySize : 'tags this -> float) =
      fun (x8586 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8586) "decodedBodySize")
    let (get_domainLookupEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8588 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8588) "domainLookupEnd")
    let (get_domainLookupStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8590 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8590)
             "domainLookupStart")
    let (get_encodedBodySize : 'tags this -> float) =
      fun (x8592 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8592) "encodedBodySize")
    let (get_fetchStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8594 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8594) "fetchStart")
    let (get_initiatorType : 'tags this -> string) =
      fun (x8596 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8596) "initiatorType")
    let (get_nextHopProtocol : 'tags this -> string) =
      fun (x8598 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8598) "nextHopProtocol")
    let (get_redirectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8600 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8600) "redirectEnd")
    let (get_redirectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8602 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8602) "redirectStart")
    let (get_requestStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8604 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8604) "requestStart")
    let (get_responseEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8606 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8606) "responseEnd")
    let (get_responseStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8608 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8608) "responseStart")
    let (get_secureConnectionStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8610 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8610)
             "secureConnectionStart")
    let (get_serverTiming : 'tags this -> PerformanceServerTiming.t list) =
      fun (x8612 : 'tags this) ->
        Ojs.list_of_js PerformanceServerTiming.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8612) "serverTiming")
    let (get_transferSize : 'tags this -> float) =
      fun (x8615 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8615) "transferSize")
    let (get_workerStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8617 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8617) "workerStart")
    let (toJSON : 'tags this -> any) =
      fun (x8619 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x8619) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming") 
             [||])
  end
module PerformanceObserverInit =
  struct
    type t = [ `PerformanceObserverInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8622 : Ojs.t) -> t_of_js x8622
    and t_0_to_js : t_0 -> Ojs.t = fun (x8621 : t) -> t_to_js x8621
    type tags = [ `PerformanceObserverInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8625 : Ojs.t) -> intf_of_js __tags_of_js x8625
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8623 : __tags intf) -> intf_to_js __tags_to_js x8623
    let (get_buffered : 'tags this -> bool) =
      fun (x8627 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8627) "buffered")
    let (set_buffered : 'tags this -> bool -> unit) =
      fun (x8629 : 'tags this) ->
        fun (x8630 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8629) "buffered"
            (Ojs.bool_to_js x8630)
    let (get_entryTypes : 'tags this -> string list) =
      fun (x8632 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8632) "entryTypes")
    let (set_entryTypes : 'tags this -> string list -> unit) =
      fun (x8635 : 'tags this) ->
        fun (x8636 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8635) "entryTypes"
            (Ojs.list_to_js Ojs.string_to_js x8636)
    let (get_type : 'tags this -> string) =
      fun (x8639 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8639) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x8641 : 'tags this) ->
        fun (x8642 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8641) "type"
            (Ojs.string_to_js x8642)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface75:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> PerformanceObserverEntryList.t
                         val set_prototype :
                           t -> PerformanceObserverEntryList.t -> unit
                         val create : t -> PerformanceObserverEntryList.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8645 : Ojs.t) -> x8645
    and t_to_js : t -> Ojs.t = fun (x8644 : Ojs.t) -> x8644
    let (get_prototype : t -> PerformanceObserverEntryList.t) =
      fun (x8646 : t) ->
        PerformanceObserverEntryList.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8646) "prototype")
    let (set_prototype : t -> PerformanceObserverEntryList.t -> unit) =
      fun (x8647 : t) ->
        fun (x8648 : PerformanceObserverEntryList.t) ->
          Ojs.set_prop_ascii (t_to_js x8647) "prototype"
            (PerformanceObserverEntryList.t_to_js x8648)
    let (create : t -> PerformanceObserverEntryList.t) =
      fun (x8649 : t) ->
        PerformanceObserverEntryList.t_of_js
          (Ojs.new_obj (t_to_js x8649) [||])
  end
 and
  PerformanceObserverEntryList:sig
                                 type t =
                                   [ `PerformanceObserverEntryList ] intf
                                 type t_0 = t
                                 [@@@js.stop ]
                                 type tags =
                                   [ `PerformanceObserverEntryList ]
                                 type tags_0 = tags
                                 [@@@js.start ]
                                 [@@@js.implem
                                   type tags =
                                     [ `PerformanceObserverEntryList ]
                                   type tags_0 = tags]
                                 type 'tags this =
                                   'tags intf constraint 'tags =
                                               [>
                                                 `PerformanceObserverEntryList
                                                   ]
                                 val t_to_js : t -> Ojs.t
                                 val t_of_js : Ojs.t -> t
                                 val t_0_to_js : t_0 -> Ojs.t
                                 val t_0_of_js : Ojs.t -> t_0
                                 val getEntries :
                                   'tags this -> PerformanceEntryList.t
                                 val getEntriesByName :
                                   'tags this ->
                                     name:string ->
                                       ?type_:string ->
                                         unit -> PerformanceEntryList.t
                                 val getEntriesByType :
                                   'tags this ->
                                     type_:string -> PerformanceEntryList.t
                                 val cast_from : 'tags this -> t
                                 val prototype : unit -> t
                                 val create : unit -> t
                               end =
  struct
    type t = [ `PerformanceObserverEntryList ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8651 : Ojs.t) -> t_of_js x8651
    and t_0_to_js : t_0 -> Ojs.t = fun (x8650 : t) -> t_to_js x8650
    type tags = [ `PerformanceObserverEntryList ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverEntryList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8654 : Ojs.t) -> intf_of_js __tags_of_js x8654
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8652 : __tags intf) -> intf_to_js __tags_to_js x8652
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x8656 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x8656) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x8662 : 'tags this) ->
        fun ~name:(x8658 : string) ->
          fun ?type_:(x8659 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x8664 = this_to_js Obj.magic x8662 in
                 Ojs.call (Ojs.get_prop_ascii x8664 "getEntriesByName")
                   "apply"
                   [|x8664;((let x8660 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8660 "push"
                                  [|(Ojs.string_to_js x8658)|]);
                             (match x8659 with
                              | Some x8661 ->
                                  ignore
                                    (Ojs.call x8660 "push"
                                       [|(Ojs.string_to_js x8661)|])
                              | None -> ());
                             x8660))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x8666 : 'tags this) ->
        fun ~type_:(x8665 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x8666) "getEntriesByType"
               [|(Ojs.string_to_js x8665)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             [||])
  end
module rec
  AnonymousInterface74:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceObserver.t
                         val set_prototype :
                           t -> PerformanceObserver.t -> unit
                         val create :
                           t ->
                             callback:PerformanceObserverCallback.t ->
                               PerformanceObserver.t
                         val get_supportedEntryTypes : t -> string list
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8669 : Ojs.t) -> x8669
    and t_to_js : t -> Ojs.t = fun (x8668 : Ojs.t) -> x8668
    let (get_prototype : t -> PerformanceObserver.t) =
      fun (x8670 : t) ->
        PerformanceObserver.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8670) "prototype")
    let (set_prototype : t -> PerformanceObserver.t -> unit) =
      fun (x8671 : t) ->
        fun (x8672 : PerformanceObserver.t) ->
          Ojs.set_prop_ascii (t_to_js x8671) "prototype"
            (PerformanceObserver.t_to_js x8672)
    let (create :
      t -> callback:PerformanceObserverCallback.t -> PerformanceObserver.t) =
      fun (x8674 : t) ->
        fun ~callback:(x8673 : PerformanceObserverCallback.t) ->
          PerformanceObserver.t_of_js
            (Ojs.new_obj (t_to_js x8674)
               [|(PerformanceObserverCallback.t_to_js x8673)|])
    let (get_supportedEntryTypes : t -> string list) =
      fun (x8675 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x8675) "supportedEntryTypes")
  end
 and
  PerformanceObserver:sig
                        type t = [ `PerformanceObserver ] intf
                        type t_0 = t
                        [@@@js.stop ]
                        type tags = [ `PerformanceObserver ]
                        type tags_0 = tags
                        [@@@js.start ]
                        [@@@js.implem
                          type tags = [ `PerformanceObserver ]
                          type tags_0 = tags]
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `PerformanceObserver ]
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val disconnect : 'tags this -> unit
                        val observe :
                          'tags this ->
                            ?options:PerformanceObserverInit.t ->
                              unit -> unit
                        val takeRecords :
                          'tags this -> PerformanceEntryList.t
                        val cast_from : 'tags this -> t
                        val prototype : unit -> t
                        val create : PerformanceObserverCallback.t -> t
                        val supportedEntryTypes : unit -> string list
                      end =
  struct
    type t = [ `PerformanceObserver ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8678 : Ojs.t) -> t_of_js x8678
    and t_0_to_js : t_0 -> Ojs.t = fun (x8677 : t) -> t_to_js x8677
    type tags = [ `PerformanceObserver ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserver ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8681 : Ojs.t) -> intf_of_js __tags_of_js x8681
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8679 : __tags intf) -> intf_to_js __tags_to_js x8679
    let (disconnect : 'tags this -> unit) =
      fun (x8683 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x8683) "disconnect" [||])
    let (observe :
      'tags this -> ?options:PerformanceObserverInit.t -> unit -> unit) =
      fun (x8688 : 'tags this) ->
        fun ?options:(x8685 : PerformanceObserverInit.t option) ->
          fun () ->
            ignore
              (let x8690 = this_to_js Obj.magic x8688 in
               Ojs.call (Ojs.get_prop_ascii x8690 "observe") "apply"
                 [|x8690;((let x8686 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8685 with
                            | Some x8687 ->
                                ignore
                                  (Ojs.call x8686 "push"
                                     [|(PerformanceObserverInit.t_to_js x8687)|])
                            | None -> ());
                           x8686))|])
    let (takeRecords : 'tags this -> PerformanceEntryList.t) =
      fun (x8691 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x8691) "takeRecords" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "prototype")
    let (create : PerformanceObserverCallback.t -> t) =
      fun (x8693 : PerformanceObserverCallback.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             [|(PerformanceObserverCallback.t_to_js x8693)|])
    let (supportedEntryTypes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "supportedEntryTypes")
  end and
       PerformanceObserverCallback:sig
                                     type t =
                                       [ `PerformanceObserverCallback ] intf
                                     type t_0 = t
                                     [@@@js.stop ]
                                     type tags =
                                       [ `PerformanceObserverCallback ]
                                     type tags_0 = tags
                                     [@@@js.start ]
                                     [@@@js.implem
                                       type tags =
                                         [ `PerformanceObserverCallback ]
                                       type tags_0 = tags]
                                     type 'tags this =
                                       'tags intf constraint 'tags =
                                                   [>
                                                     `PerformanceObserverCallback
                                                       ]
                                     val t_to_js : t -> Ojs.t
                                     val t_of_js : Ojs.t -> t
                                     val t_0_to_js : t_0 -> Ojs.t
                                     val t_0_of_js : Ojs.t -> t_0
                                     val apply :
                                       'tags this ->
                                         entries:PerformanceObserverEntryList.t
                                           ->
                                           observer:PerformanceObserver.t ->
                                             unit
                                     val cast_from : 'tags this -> t
                                   end =
       struct
         type t = [ `PerformanceObserverCallback ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x8696 : Ojs.t) -> t_of_js x8696
         and t_0_to_js : t_0 -> Ojs.t = fun (x8695 : t) -> t_to_js x8695
         type tags = [ `PerformanceObserverCallback ]
         type tags_0 = tags
         type 'tags this =
           'tags intf constraint 'tags = [> `PerformanceObserverCallback ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x8699 : Ojs.t) -> intf_of_js __tags_of_js x8699
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x8697 : __tags intf) -> intf_to_js __tags_to_js x8697
         let (apply :
           'tags this ->
             entries:PerformanceObserverEntryList.t ->
               observer:PerformanceObserver.t -> unit)
           =
           fun (x8703 : 'tags this) ->
             fun ~entries:(x8701 : PerformanceObserverEntryList.t) ->
               fun ~observer:(x8702 : PerformanceObserver.t) ->
                 ignore
                   (Ojs.apply (this_to_js Obj.magic x8703)
                      [|(PerformanceObserverEntryList.t_to_js x8701);(
                        PerformanceObserver.t_to_js x8702)|])
         let cast_from = Obj.magic
       end
module rec
  AnonymousInterface7:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> CanvasGradient.t
                        val set_prototype : t -> CanvasGradient.t -> unit
                        val create : t -> CanvasGradient.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8706 : Ojs.t) -> x8706
    and t_to_js : t -> Ojs.t = fun (x8705 : Ojs.t) -> x8705
    let (get_prototype : t -> CanvasGradient.t) =
      fun (x8707 : t) ->
        CanvasGradient.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8707) "prototype")
    let (set_prototype : t -> CanvasGradient.t -> unit) =
      fun (x8708 : t) ->
        fun (x8709 : CanvasGradient.t) ->
          Ojs.set_prop_ascii (t_to_js x8708) "prototype"
            (CanvasGradient.t_to_js x8709)
    let (create : t -> CanvasGradient.t) =
      fun (x8710 : t) ->
        CanvasGradient.t_of_js (Ojs.new_obj (t_to_js x8710) [||])
  end
 and
  CanvasGradient:sig
                   type t = [ `CanvasGradient ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `CanvasGradient ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `CanvasGradient ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `CanvasGradient ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val addColorStop :
                     'tags this -> offset:float -> color:string -> unit
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                 end =
  struct
    type t = [ `CanvasGradient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8712 : Ojs.t) -> t_of_js x8712
    and t_0_to_js : t_0 -> Ojs.t = fun (x8711 : t) -> t_to_js x8711
    type tags = [ `CanvasGradient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasGradient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8715 : Ojs.t) -> intf_of_js __tags_of_js x8715
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8713 : __tags intf) -> intf_to_js __tags_to_js x8713
    let (addColorStop : 'tags this -> offset:float -> color:string -> unit) =
      fun (x8719 : 'tags this) ->
        fun ~offset:(x8717 : float) ->
          fun ~color:(x8718 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8719) "addColorStop"
                 [|(Ojs.float_to_js x8717);(Ojs.string_to_js x8718)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CanvasGradient") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasGradient") [||])
  end
module CanvasPath =
  struct
    type t = [ `CanvasPath ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8722 : Ojs.t) -> t_of_js x8722
    and t_0_to_js : t_0 -> Ojs.t = fun (x8721 : t) -> t_to_js x8721
    type tags = [ `CanvasPath ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPath ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8725 : Ojs.t) -> intf_of_js __tags_of_js x8725
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8723 : __tags intf) -> intf_to_js __tags_to_js x8723
    let (arc :
      'tags this ->
        x:float ->
          y:float ->
            radius:float ->
              startAngle:float ->
                endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x8735 : 'tags this) ->
        fun ~x:(x8727 : float) ->
          fun ~y:(x8728 : float) ->
            fun ~radius:(x8729 : float) ->
              fun ~startAngle:(x8730 : float) ->
                fun ~endAngle:(x8731 : float) ->
                  fun ?counterclockwise:(x8732 : bool option) ->
                    fun () ->
                      ignore
                        (let x8737 = this_to_js Obj.magic x8735 in
                         Ojs.call (Ojs.get_prop_ascii x8737 "arc") "apply"
                           [|x8737;((let x8733 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x8733 "push"
                                          [|(Ojs.float_to_js x8727)|]);
                                     ignore
                                       (Ojs.call x8733 "push"
                                          [|(Ojs.float_to_js x8728)|]);
                                     ignore
                                       (Ojs.call x8733 "push"
                                          [|(Ojs.float_to_js x8729)|]);
                                     ignore
                                       (Ojs.call x8733 "push"
                                          [|(Ojs.float_to_js x8730)|]);
                                     ignore
                                       (Ojs.call x8733 "push"
                                          [|(Ojs.float_to_js x8731)|]);
                                     (match x8732 with
                                      | Some x8734 ->
                                          ignore
                                            (Ojs.call x8733 "push"
                                               [|(Ojs.bool_to_js x8734)|])
                                      | None -> ());
                                     x8733))|])
    let (arcTo :
      'tags this ->
        x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit)
      =
      fun (x8743 : 'tags this) ->
        fun ~x1:(x8738 : float) ->
          fun ~y1:(x8739 : float) ->
            fun ~x2:(x8740 : float) ->
              fun ~y2:(x8741 : float) ->
                fun ~radius:(x8742 : float) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8743) "arcTo"
                       [|(Ojs.float_to_js x8738);(Ojs.float_to_js x8739);(
                         Ojs.float_to_js x8740);(Ojs.float_to_js x8741);(
                         Ojs.float_to_js x8742)|])
    let (bezierCurveTo :
      'tags this ->
        cp1x:float ->
          cp1y:float ->
            cp2x:float -> cp2y:float -> x:float -> y:float -> unit)
      =
      fun (x8751 : 'tags this) ->
        fun ~cp1x:(x8745 : float) ->
          fun ~cp1y:(x8746 : float) ->
            fun ~cp2x:(x8747 : float) ->
              fun ~cp2y:(x8748 : float) ->
                fun ~x:(x8749 : float) ->
                  fun ~y:(x8750 : float) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8751) "bezierCurveTo"
                         [|(Ojs.float_to_js x8745);(Ojs.float_to_js x8746);(
                           Ojs.float_to_js x8747);(Ojs.float_to_js x8748);(
                           Ojs.float_to_js x8749);(Ojs.float_to_js x8750)|])
    let (closePath : 'tags this -> unit) =
      fun (x8753 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x8753) "closePath" [||])
    let (ellipse :
      'tags this ->
        x:float ->
          y:float ->
            radiusX:float ->
              radiusY:float ->
                rotation:float ->
                  startAngle:float ->
                    endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x8765 : 'tags this) ->
        fun ~x:(x8755 : float) ->
          fun ~y:(x8756 : float) ->
            fun ~radiusX:(x8757 : float) ->
              fun ~radiusY:(x8758 : float) ->
                fun ~rotation:(x8759 : float) ->
                  fun ~startAngle:(x8760 : float) ->
                    fun ~endAngle:(x8761 : float) ->
                      fun ?counterclockwise:(x8762 : bool option) ->
                        fun () ->
                          ignore
                            (let x8767 = this_to_js Obj.magic x8765 in
                             Ojs.call (Ojs.get_prop_ascii x8767 "ellipse")
                               "apply"
                               [|x8767;((let x8763 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x8763 "push"
                                              [|(Ojs.float_to_js x8755)|]);
                                         ignore
                                           (Ojs.call x8763 "push"
                                              [|(Ojs.float_to_js x8756)|]);
                                         ignore
                                           (Ojs.call x8763 "push"
                                              [|(Ojs.float_to_js x8757)|]);
                                         ignore
                                           (Ojs.call x8763 "push"
                                              [|(Ojs.float_to_js x8758)|]);
                                         ignore
                                           (Ojs.call x8763 "push"
                                              [|(Ojs.float_to_js x8759)|]);
                                         ignore
                                           (Ojs.call x8763 "push"
                                              [|(Ojs.float_to_js x8760)|]);
                                         ignore
                                           (Ojs.call x8763 "push"
                                              [|(Ojs.float_to_js x8761)|]);
                                         (match x8762 with
                                          | Some x8764 ->
                                              ignore
                                                (Ojs.call x8763 "push"
                                                   [|(Ojs.bool_to_js x8764)|])
                                          | None -> ());
                                         x8763))|])
    let (lineTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x8770 : 'tags this) ->
        fun ~x:(x8768 : float) ->
          fun ~y:(x8769 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8770) "lineTo"
                 [|(Ojs.float_to_js x8768);(Ojs.float_to_js x8769)|])
    let (moveTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x8774 : 'tags this) ->
        fun ~x:(x8772 : float) ->
          fun ~y:(x8773 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8774) "moveTo"
                 [|(Ojs.float_to_js x8772);(Ojs.float_to_js x8773)|])
    let (quadraticCurveTo :
      'tags this -> cpx:float -> cpy:float -> x:float -> y:float -> unit) =
      fun (x8780 : 'tags this) ->
        fun ~cpx:(x8776 : float) ->
          fun ~cpy:(x8777 : float) ->
            fun ~x:(x8778 : float) ->
              fun ~y:(x8779 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x8780) "quadraticCurveTo"
                     [|(Ojs.float_to_js x8776);(Ojs.float_to_js x8777);(
                       Ojs.float_to_js x8778);(Ojs.float_to_js x8779)|])
    let (rect :
      'tags this -> x:float -> y:float -> w:float -> h:float -> unit) =
      fun (x8786 : 'tags this) ->
        fun ~x:(x8782 : float) ->
          fun ~y:(x8783 : float) ->
            fun ~w:(x8784 : float) ->
              fun ~h:(x8785 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x8786) "rect"
                     [|(Ojs.float_to_js x8782);(Ojs.float_to_js x8783);(
                       Ojs.float_to_js x8784);(Ojs.float_to_js x8785)|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface69:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Path2D.t
                         val set_prototype : t -> Path2D.t -> unit
                         val create :
                           t -> ?path:Path2D.t or_string -> unit -> Path2D.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8789 : Ojs.t) -> x8789
    and t_to_js : t -> Ojs.t = fun (x8788 : Ojs.t) -> x8788
    let (get_prototype : t -> Path2D.t) =
      fun (x8790 : t) ->
        Path2D.t_of_js (Ojs.get_prop_ascii (t_to_js x8790) "prototype")
    let (set_prototype : t -> Path2D.t -> unit) =
      fun (x8791 : t) ->
        fun (x8792 : Path2D.t) ->
          Ojs.set_prop_ascii (t_to_js x8791) "prototype"
            (Path2D.t_to_js x8792)
    let (create : t -> ?path:Path2D.t or_string -> unit -> Path2D.t) =
      fun (x8797 : t) ->
        fun ?path:(x8793 : Path2D.t or_string option) ->
          fun () ->
            Path2D.t_of_js
              (Ojs.new_obj_arr (t_to_js x8797)
                 (let x8794 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x8793 with
                   | Some x8795 ->
                       ignore
                         (Ojs.call x8794 "push"
                            [|(or_string_to_js Path2D.t_to_js x8795)|])
                   | None -> ());
                  x8794))
  end
 and
  Path2D:sig
           type t = [ `CanvasPath  | `Path2D ] intf
           type t_0 = t
           [@@@js.stop ]
           type tags = [ `CanvasPath  | `Path2D ]
           type tags_0 = tags
           [@@@js.start ]
           [@@@js.implem
             type tags = [ `CanvasPath  | `Path2D ]
             type tags_0 = tags]
           type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
           val t_to_js : t -> Ojs.t
           val t_of_js : Ojs.t -> t
           val t_0_to_js : t_0 -> Ojs.t
           val t_0_of_js : Ojs.t -> t_0
           val addPath :
             'tags this ->
               path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit
           val cast_from : 'tags this -> t
           val prototype : unit -> t
           val create : ?path:t or_string -> unit -> t
         end =
  struct
    type t = [ `CanvasPath  | `Path2D ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8799 : Ojs.t) -> t_of_js x8799
    and t_0_to_js : t_0 -> Ojs.t = fun (x8798 : t) -> t_to_js x8798
    type tags = [ `CanvasPath  | `Path2D ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8802 : Ojs.t) -> intf_of_js __tags_of_js x8802
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8800 : __tags intf) -> intf_to_js __tags_to_js x8800
    let (addPath :
      'tags this -> path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x8808 : 'tags this) ->
        fun ~path:(x8804 : t) ->
          fun ?transform:(x8805 : DOMMatrix2DInit.t option) ->
            fun () ->
              ignore
                (let x8810 = this_to_js Obj.magic x8808 in
                 Ojs.call (Ojs.get_prop_ascii x8810 "addPath") "apply"
                   [|x8810;((let x8806 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8806 "push" [|(t_to_js x8804)|]);
                             (match x8805 with
                              | Some x8807 ->
                                  ignore
                                    (Ojs.call x8806 "push"
                                       [|(DOMMatrix2DInit.t_to_js x8807)|])
                              | None -> ());
                             x8806))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Path2D")
             "prototype")
    let (create : ?path:t or_string -> unit -> t) =
      fun ?path:(x8811 : t or_string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Path2D")
               (let x8812 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x8811 with
                 | Some x8813 ->
                     ignore
                       (Ojs.call x8812 "push"
                          [|(or_string_to_js t_to_js x8813)|])
                 | None -> ());
                x8812))
  end
module rec
  AnonymousInterface62:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> MessageChannel.t
                         val set_prototype : t -> MessageChannel.t -> unit
                         val create : t -> MessageChannel.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8816 : Ojs.t) -> x8816
    and t_to_js : t -> Ojs.t = fun (x8815 : Ojs.t) -> x8815
    let (get_prototype : t -> MessageChannel.t) =
      fun (x8817 : t) ->
        MessageChannel.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8817) "prototype")
    let (set_prototype : t -> MessageChannel.t -> unit) =
      fun (x8818 : t) ->
        fun (x8819 : MessageChannel.t) ->
          Ojs.set_prop_ascii (t_to_js x8818) "prototype"
            (MessageChannel.t_to_js x8819)
    let (create : t -> MessageChannel.t) =
      fun (x8820 : t) ->
        MessageChannel.t_of_js (Ojs.new_obj (t_to_js x8820) [||])
  end
 and
  MessageChannel:sig
                   type t = [ `MessageChannel ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `MessageChannel ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `MessageChannel ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `MessageChannel ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_port1 : 'tags this -> MessagePort.t
                   val get_port2 : 'tags this -> MessagePort.t
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                 end =
  struct
    type t = [ `MessageChannel ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8822 : Ojs.t) -> t_of_js x8822
    and t_0_to_js : t_0 -> Ojs.t = fun (x8821 : t) -> t_to_js x8821
    type tags = [ `MessageChannel ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessageChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8825 : Ojs.t) -> intf_of_js __tags_of_js x8825
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8823 : __tags intf) -> intf_to_js __tags_to_js x8823
    let (get_port1 : 'tags this -> MessagePort.t) =
      fun (x8827 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8827) "port1")
    let (get_port2 : 'tags this -> MessagePort.t) =
      fun (x8829 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8829) "port2")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MessageChannel") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MessageChannel") [||])
  end
module rec
  AnonymousInterface56:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> ImageBitmapRenderingContext.t
                         val set_prototype :
                           t -> ImageBitmapRenderingContext.t -> unit
                         val create : t -> ImageBitmapRenderingContext.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8832 : Ojs.t) -> x8832
    and t_to_js : t -> Ojs.t = fun (x8831 : Ojs.t) -> x8831
    let (get_prototype : t -> ImageBitmapRenderingContext.t) =
      fun (x8833 : t) ->
        ImageBitmapRenderingContext.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8833) "prototype")
    let (set_prototype : t -> ImageBitmapRenderingContext.t -> unit) =
      fun (x8834 : t) ->
        fun (x8835 : ImageBitmapRenderingContext.t) ->
          Ojs.set_prop_ascii (t_to_js x8834) "prototype"
            (ImageBitmapRenderingContext.t_to_js x8835)
    let (create : t -> ImageBitmapRenderingContext.t) =
      fun (x8836 : t) ->
        ImageBitmapRenderingContext.t_of_js
          (Ojs.new_obj (t_to_js x8836) [||])
  end
 and
  ImageBitmapRenderingContext:sig
                                type t =
                                  [ `ImageBitmapRenderingContext ] intf
                                type t_0 = t
                                [@@@js.stop ]
                                type tags = [ `ImageBitmapRenderingContext ]
                                type tags_0 = tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type tags =
                                    [ `ImageBitmapRenderingContext ]
                                  type tags_0 = tags]
                                type 'tags this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `ImageBitmapRenderingContext ]
                                val t_to_js : t -> Ojs.t
                                val t_of_js : Ojs.t -> t
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val transferFromImageBitmap :
                                  'tags this ->
                                    bitmap:ImageBitmap.t or_null -> unit
                                val cast_from : 'tags this -> t
                                val prototype : unit -> t
                                val create : unit -> t
                              end =
  struct
    type t = [ `ImageBitmapRenderingContext ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8838 : Ojs.t) -> t_of_js x8838
    and t_0_to_js : t_0 -> Ojs.t = fun (x8837 : t) -> t_to_js x8837
    type tags = [ `ImageBitmapRenderingContext ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8841 : Ojs.t) -> intf_of_js __tags_of_js x8841
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8839 : __tags intf) -> intf_to_js __tags_to_js x8839
    let (transferFromImageBitmap :
      'tags this -> bitmap:ImageBitmap.t or_null -> unit) =
      fun (x8845 : 'tags this) ->
        fun ~bitmap:(x8843 : ImageBitmap.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8845) "transferFromImageBitmap"
               [|(or_null_to_js ImageBitmap.t_to_js x8843)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             [||])
  end
module FontFaceSetLoadEventInit =
  struct
    type t = [ `EventInit  | `FontFaceSetLoadEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8848 : Ojs.t) -> t_of_js x8848
    and t_0_to_js : t_0 -> Ojs.t = fun (x8847 : t) -> t_to_js x8847
    type tags = [ `EventInit  | `FontFaceSetLoadEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8851 : Ojs.t) -> intf_of_js __tags_of_js x8851
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8849 : __tags intf) -> intf_to_js __tags_to_js x8849
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x8853 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8853) "fontfaces")
    let (set_fontfaces : 'tags this -> FontFace.t list -> unit) =
      fun (x8856 : 'tags this) ->
        fun (x8857 : FontFace.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8856) "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x8857)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface40:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FontFaceSetLoadEvent.t
                         val set_prototype :
                           t -> FontFaceSetLoadEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:FontFaceSetLoadEventInit.t ->
                                 unit -> FontFaceSetLoadEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8861 : Ojs.t) -> x8861
    and t_to_js : t -> Ojs.t = fun (x8860 : Ojs.t) -> x8860
    let (get_prototype : t -> FontFaceSetLoadEvent.t) =
      fun (x8862 : t) ->
        FontFaceSetLoadEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8862) "prototype")
    let (set_prototype : t -> FontFaceSetLoadEvent.t -> unit) =
      fun (x8863 : t) ->
        fun (x8864 : FontFaceSetLoadEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x8863) "prototype"
            (FontFaceSetLoadEvent.t_to_js x8864)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:FontFaceSetLoadEventInit.t ->
            unit -> FontFaceSetLoadEvent.t)
      =
      fun (x8869 : t) ->
        fun ~type_:(x8865 : string) ->
          fun ?eventInitDict:(x8866 : FontFaceSetLoadEventInit.t option) ->
            fun () ->
              FontFaceSetLoadEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x8869)
                   (let x8867 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x8867 "push" [|(Ojs.string_to_js x8865)|]);
                    (match x8866 with
                     | Some x8868 ->
                         ignore
                           (Ojs.call x8867 "push"
                              [|(FontFaceSetLoadEventInit.t_to_js x8868)|])
                     | None -> ());
                    x8867))
  end
 and
  FontFaceSetLoadEvent:sig
                         type t = [ `Event  | `FontFaceSetLoadEvent ] intf
                         type t_0 = t
                         [@@@js.stop ]
                         type tags = [ `Event  | `FontFaceSetLoadEvent ]
                         type tags_0 = tags
                         [@@@js.start ]
                         [@@@js.implem
                           type tags = [ `Event  | `FontFaceSetLoadEvent ]
                           type tags_0 = tags]
                         type 'tags this =
                           'tags intf constraint 'tags =
                                       [> `FontFaceSetLoadEvent ]
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val t_0_to_js : t_0 -> Ojs.t
                         val t_0_of_js : Ojs.t -> t_0
                         val get_fontfaces : 'tags this -> FontFace.t list
                         val cast_from : 'tags this -> t
                         val prototype : unit -> t
                         val create :
                           type_:string ->
                             ?eventInitDict:FontFaceSetLoadEventInit.t ->
                               unit -> t
                       end =
  struct
    type t = [ `Event  | `FontFaceSetLoadEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8871 : Ojs.t) -> t_of_js x8871
    and t_0_to_js : t_0 -> Ojs.t = fun (x8870 : t) -> t_to_js x8870
    type tags = [ `Event  | `FontFaceSetLoadEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8874 : Ojs.t) -> intf_of_js __tags_of_js x8874
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8872 : __tags intf) -> intf_to_js __tags_to_js x8872
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x8876 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8876) "fontfaces")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:FontFaceSetLoadEventInit.t -> unit -> t)
      =
      fun ~type_:(x8879 : string) ->
        fun ?eventInitDict:(x8880 : FontFaceSetLoadEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
                 (let x8881 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x8881 "push" [|(Ojs.string_to_js x8879)|]);
                  (match x8880 with
                   | Some x8882 ->
                       ignore
                         (Ojs.call x8881 "push"
                            [|(FontFaceSetLoadEventInit.t_to_js x8882)|])
                   | None -> ());
                  x8881))
  end
module QueuingStrategyInit =
  struct
    type t = [ `QueuingStrategyInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8884 : Ojs.t) -> t_of_js x8884
    and t_0_to_js : t_0 -> Ojs.t = fun (x8883 : t) -> t_to_js x8883
    type tags = [ `QueuingStrategyInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `QueuingStrategyInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8887 : Ojs.t) -> intf_of_js __tags_of_js x8887
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8885 : __tags intf) -> intf_to_js __tags_to_js x8885
    let (get_highWaterMark : 'tags this -> float) =
      fun (x8889 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8889) "highWaterMark")
    let (set_highWaterMark : 'tags this -> float -> unit) =
      fun (x8891 : 'tags this) ->
        fun (x8892 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8891) "highWaterMark"
            (Ojs.float_to_js x8892)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface4:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> ByteLengthQueuingStrategy.t
                        val set_prototype :
                          t -> ByteLengthQueuingStrategy.t -> unit
                        val create :
                          t ->
                            init:QueuingStrategyInit.t ->
                              ByteLengthQueuingStrategy.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8895 : Ojs.t) -> x8895
    and t_to_js : t -> Ojs.t = fun (x8894 : Ojs.t) -> x8894
    let (get_prototype : t -> ByteLengthQueuingStrategy.t) =
      fun (x8896 : t) ->
        ByteLengthQueuingStrategy.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8896) "prototype")
    let (set_prototype : t -> ByteLengthQueuingStrategy.t -> unit) =
      fun (x8897 : t) ->
        fun (x8898 : ByteLengthQueuingStrategy.t) ->
          Ojs.set_prop_ascii (t_to_js x8897) "prototype"
            (ByteLengthQueuingStrategy.t_to_js x8898)
    let (create :
      t -> init:QueuingStrategyInit.t -> ByteLengthQueuingStrategy.t) =
      fun (x8900 : t) ->
        fun ~init:(x8899 : QueuingStrategyInit.t) ->
          ByteLengthQueuingStrategy.t_of_js
            (Ojs.new_obj (t_to_js x8900)
               [|(QueuingStrategyInit.t_to_js x8899)|])
  end
 and
  ByteLengthQueuingStrategy:sig
                              type t =
                                [ `ByteLengthQueuingStrategy 
                                | `QueuingStrategy of ArrayBufferView.t_0 ]
                                  intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `ByteLengthQueuingStrategy 
                                | `QueuingStrategy of ArrayBufferView.t_0 ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `ByteLengthQueuingStrategy 
                                  | `QueuingStrategy of ArrayBufferView.t_0 ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `ByteLengthQueuingStrategy ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_highWaterMark : 'tags this -> float
                              val get_size :
                                'tags this ->
                                  ArrayBufferView.t_0 QueuingStrategySize.t
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : QueuingStrategyInit.t -> t
                            end =
  struct
    type t =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8902 : Ojs.t) -> t_of_js x8902
    and t_0_to_js : t_0 -> Ojs.t = fun (x8901 : t) -> t_to_js x8901
    type tags =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ByteLengthQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8905 : Ojs.t) -> intf_of_js __tags_of_js x8905
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8903 : __tags intf) -> intf_to_js __tags_to_js x8903
    let (get_highWaterMark : 'tags this -> float) =
      fun (x8907 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8907) "highWaterMark")
    let (get_size : 'tags this -> ArrayBufferView.t_0 QueuingStrategySize.t)
      =
      fun (x8909 : 'tags this) ->
        QueuingStrategySize.t_of_js ArrayBufferView.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8909) "size")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             "prototype")
    let (create : QueuingStrategyInit.t -> t) =
      fun (x8912 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x8912)|])
  end
module rec
  AnonymousInterface37:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FileReaderSync.t
                         val set_prototype : t -> FileReaderSync.t -> unit
                         val create : t -> FileReaderSync.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8914 : Ojs.t) -> x8914
    and t_to_js : t -> Ojs.t = fun (x8913 : Ojs.t) -> x8913
    let (get_prototype : t -> FileReaderSync.t) =
      fun (x8915 : t) ->
        FileReaderSync.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8915) "prototype")
    let (set_prototype : t -> FileReaderSync.t -> unit) =
      fun (x8916 : t) ->
        fun (x8917 : FileReaderSync.t) ->
          Ojs.set_prop_ascii (t_to_js x8916) "prototype"
            (FileReaderSync.t_to_js x8917)
    let (create : t -> FileReaderSync.t) =
      fun (x8918 : t) ->
        FileReaderSync.t_of_js (Ojs.new_obj (t_to_js x8918) [||])
  end
 and
  FileReaderSync:sig
                   type t = [ `FileReaderSync ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `FileReaderSync ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `FileReaderSync ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `FileReaderSync ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val readAsArrayBuffer :
                     'tags this -> blob:Blob.t -> ArrayBuffer.t_0
                   val readAsBinaryString :
                     'tags this -> blob:Blob.t -> string
                   val readAsDataURL : 'tags this -> blob:Blob.t -> string
                   val readAsText :
                     'tags this ->
                       blob:Blob.t -> ?encoding:string -> unit -> string
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                 end =
  struct
    type t = [ `FileReaderSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8920 : Ojs.t) -> t_of_js x8920
    and t_0_to_js : t_0 -> Ojs.t = fun (x8919 : t) -> t_to_js x8919
    type tags = [ `FileReaderSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8923 : Ojs.t) -> intf_of_js __tags_of_js x8923
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8921 : __tags intf) -> intf_to_js __tags_to_js x8921
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> ArrayBuffer.t_0) =
      fun (x8926 : 'tags this) ->
        fun ~blob:(x8925 : Blob.t) ->
          ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x8926) "readAsArrayBuffer"
               [|(Blob.t_to_js x8925)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> string) =
      fun (x8929 : 'tags this) ->
        fun ~blob:(x8928 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x8929) "readAsBinaryString"
               [|(Blob.t_to_js x8928)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> string) =
      fun (x8932 : 'tags this) ->
        fun ~blob:(x8931 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x8932) "readAsDataURL"
               [|(Blob.t_to_js x8931)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> string) =
      fun (x8938 : 'tags this) ->
        fun ~blob:(x8934 : Blob.t) ->
          fun ?encoding:(x8935 : string option) ->
            fun () ->
              Ojs.string_of_js
                (let x8940 = this_to_js Obj.magic x8938 in
                 Ojs.call (Ojs.get_prop_ascii x8940 "readAsText") "apply"
                   [|x8940;((let x8936 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8936 "push"
                                  [|(Blob.t_to_js x8934)|]);
                             (match x8935 with
                              | Some x8937 ->
                                  ignore
                                    (Ojs.call x8936 "push"
                                       [|(Ojs.string_to_js x8937)|])
                              | None -> ());
                             x8936))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileReaderSync") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReaderSync") [||])
  end
module rec
  AnonymousInterface35:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FileList.t
                         val set_prototype : t -> FileList.t -> unit
                         val create : t -> FileList.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8942 : Ojs.t) -> x8942
    and t_to_js : t -> Ojs.t = fun (x8941 : Ojs.t) -> x8941
    let (get_prototype : t -> FileList.t) =
      fun (x8943 : t) ->
        FileList.t_of_js (Ojs.get_prop_ascii (t_to_js x8943) "prototype")
    let (set_prototype : t -> FileList.t -> unit) =
      fun (x8944 : t) ->
        fun (x8945 : FileList.t) ->
          Ojs.set_prop_ascii (t_to_js x8944) "prototype"
            (FileList.t_to_js x8945)
    let (create : t -> FileList.t) =
      fun (x8946 : t) -> FileList.t_of_js (Ojs.new_obj (t_to_js x8946) [||])
  end
 and
  FileList:sig
             type t =
               [ `FileList  | File.t ArrayLike.tags_1
               | File.t IterableIterator.tags_1] intf
             type t_0 = t
             [@@@js.stop ]
             type tags =
               [ `FileList  | File.t ArrayLike.tags_1
               | File.t IterableIterator.tags_1]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags =
                 [ `FileList  | File.t ArrayLike.tags_1
                 | File.t IterableIterator.tags_1]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_length : 'tags this -> float
             val item : 'tags this -> index:float -> File.t or_null
             val get : 'tags this -> float -> File.t
             val set : 'tags this -> float -> File.t -> unit
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create : unit -> t
           end =
  struct
    type t =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8948 : Ojs.t) -> t_of_js x8948
    and t_0_to_js : t_0 -> Ojs.t = fun (x8947 : t) -> t_to_js x8947
    type tags =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8951 : Ojs.t) -> intf_of_js __tags_of_js x8951
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8949 : __tags intf) -> intf_to_js __tags_to_js x8949
    let (get_length : 'tags this -> float) =
      fun (x8953 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8953) "length")
    let (item : 'tags this -> index:float -> File.t or_null) =
      fun (x8956 : 'tags this) ->
        fun ~index:(x8955 : float) ->
          or_null_of_js File.t_of_js
            (Ojs.call (this_to_js Obj.magic x8956) "item"
               [|(Ojs.float_to_js x8955)|])
    let (get : 'tags this -> float -> File.t) =
      fun (x8959 : 'tags this) ->
        fun (x8961 : float) ->
          File.t_of_js
            (Ojs.get_prop (this_to_js Obj.magic x8959)
               (Ojs.float_to_js x8961))
    let (set : 'tags this -> float -> File.t -> unit) =
      fun (x8962 : 'tags this) ->
        fun (x8964 : float) ->
          fun (x8965 : File.t) ->
            Ojs.set_prop (this_to_js Obj.magic x8962) (Ojs.float_to_js x8964)
              (File.t_to_js x8965)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileList") [||])
  end
module rec
  AnonymousInterface3:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> BroadcastChannel.t
                        val set_prototype : t -> BroadcastChannel.t -> unit
                        val create : t -> name:string -> BroadcastChannel.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8967 : Ojs.t) -> x8967
    and t_to_js : t -> Ojs.t = fun (x8966 : Ojs.t) -> x8966
    let (get_prototype : t -> BroadcastChannel.t) =
      fun (x8968 : t) ->
        BroadcastChannel.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8968) "prototype")
    let (set_prototype : t -> BroadcastChannel.t -> unit) =
      fun (x8969 : t) ->
        fun (x8970 : BroadcastChannel.t) ->
          Ojs.set_prop_ascii (t_to_js x8969) "prototype"
            (BroadcastChannel.t_to_js x8970)
    let (create : t -> name:string -> BroadcastChannel.t) =
      fun (x8972 : t) ->
        fun ~name:(x8971 : string) ->
          BroadcastChannel.t_of_js
            (Ojs.new_obj (t_to_js x8972) [|(Ojs.string_to_js x8971)|])
  end
 and
  BroadcastChannel:sig
                     type t = [ `BroadcastChannel  | `EventTarget ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `BroadcastChannel  | `EventTarget ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `BroadcastChannel  | `EventTarget ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `BroadcastChannel ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_name : 'tags this -> string
                     val get_onmessage :
                       'tags this ->
                         (this:t -> ev:MessageEvent.t_0 -> any) or_null
                     val set_onmessage :
                       'tags this ->
                         (this:t -> ev:MessageEvent.t_0 -> any) or_null ->
                           unit
                     val get_onmessageerror :
                       'tags this ->
                         (this:t -> ev:MessageEvent.t_0 -> any) or_null
                     val set_onmessageerror :
                       'tags this ->
                         (this:t -> ev:MessageEvent.t_0 -> any) or_null ->
                           unit
                     val close : 'tags this -> unit
                     val postMessage : 'tags this -> message:any -> unit
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : string -> t
                   end =
  struct
    type t = [ `BroadcastChannel  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8974 : Ojs.t) -> t_of_js x8974
    and t_0_to_js : t_0 -> Ojs.t = fun (x8973 : t) -> t_to_js x8973
    type tags = [ `BroadcastChannel  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8977 : Ojs.t) -> intf_of_js __tags_of_js x8977
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8975 : __tags intf) -> intf_to_js __tags_to_js x8975
    let (get_name : 'tags this -> string) =
      fun (x8979 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8979) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x8981 : 'tags this) ->
        or_null_of_js
          (fun (x8983 : Ojs.t) ->
             fun ~this:(x8984 : t) ->
               fun ~ev:(x8985 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x8983
                      [|(t_to_js x8984);(MessageEvent.t_0_to_js x8985)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8981) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x8986 : 'tags this) ->
        fun (x8987 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8986) "onmessage"
            (or_null_to_js
               (fun (x8988 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8989 : Ojs.t) ->
                       fun (x8990 : Ojs.t) ->
                         any_to_js
                           (x8988 ~this:(t_of_js x8989)
                              ~ev:(MessageEvent.t_0_of_js x8990)))) x8987)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x8992 : 'tags this) ->
        or_null_of_js
          (fun (x8994 : Ojs.t) ->
             fun ~this:(x8995 : t) ->
               fun ~ev:(x8996 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x8994
                      [|(t_to_js x8995);(MessageEvent.t_0_to_js x8996)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8992) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x8997 : 'tags this) ->
        fun (x8998 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8997) "onmessageerror"
            (or_null_to_js
               (fun (x8999 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9000 : Ojs.t) ->
                       fun (x9001 : Ojs.t) ->
                         any_to_js
                           (x8999 ~this:(t_of_js x9000)
                              ~ev:(MessageEvent.t_0_of_js x9001)))) x8998)
    let (close : 'tags this -> unit) =
      fun (x9003 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x9003) "close" [||])
    let (postMessage : 'tags this -> message:any -> unit) =
      fun (x9006 : 'tags this) ->
        fun ~message:(x9005 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9006) "postMessage"
               [|(any_to_js x9005)|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9016 : 'tags this) ->
        fun ~type_:(x9008 : 'K) ->
          fun ~listener:(x9009 : this:t -> ev:any -> any) ->
            fun
              ?options:(x9010 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9018 = this_to_js Obj.magic x9016 in
                   Ojs.call (Ojs.get_prop_ascii x9018 "addEventListener")
                     "apply"
                     [|x9018;((let x9011 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9011 "push" [|(Obj.magic x9008)|]);
                               ignore
                                 (Ojs.call x9011 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9014 : Ojs.t) ->
                                            fun (x9015 : Ojs.t) ->
                                              any_to_js
                                                (x9009 ~this:(t_of_js x9014)
                                                   ~ev:(any_of_js x9015))))|]);
                               (match x9010 with
                                | Some x9012 ->
                                    ignore
                                      (Ojs.call x9011 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9012)|])
                                | None -> ());
                               x9011))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9025 : 'tags this) ->
        fun ~type_:(x9019 : string) ->
          fun ~listener:(x9020 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x9021 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9027 = this_to_js Obj.magic x9025 in
                   Ojs.call (Ojs.get_prop_ascii x9027 "addEventListener")
                     "apply"
                     [|x9027;((let x9022 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9022 "push"
                                    [|(Ojs.string_to_js x9019)|]);
                               ignore
                                 (Ojs.call x9022 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9020)|]);
                               (match x9021 with
                                | Some x9023 ->
                                    ignore
                                      (Ojs.call x9022 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9023)|])
                                | None -> ());
                               x9022))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9036 : 'tags this) ->
        fun ~type_:(x9028 : 'K) ->
          fun ~listener:(x9029 : this:t -> ev:any -> any) ->
            fun ?options:(x9030 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9038 = this_to_js Obj.magic x9036 in
                   Ojs.call (Ojs.get_prop_ascii x9038 "removeEventListener")
                     "apply"
                     [|x9038;((let x9031 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9031 "push" [|(Obj.magic x9028)|]);
                               ignore
                                 (Ojs.call x9031 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9034 : Ojs.t) ->
                                            fun (x9035 : Ojs.t) ->
                                              any_to_js
                                                (x9029 ~this:(t_of_js x9034)
                                                   ~ev:(any_of_js x9035))))|]);
                               (match x9030 with
                                | Some x9032 ->
                                    ignore
                                      (Ojs.call x9031 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9032)|])
                                | None -> ());
                               x9031))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9045 : 'tags this) ->
        fun ~type_:(x9039 : string) ->
          fun ~listener:(x9040 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x9041 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9047 = this_to_js Obj.magic x9045 in
                   Ojs.call (Ojs.get_prop_ascii x9047 "removeEventListener")
                     "apply"
                     [|x9047;((let x9042 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9042 "push"
                                    [|(Ojs.string_to_js x9039)|]);
                               ignore
                                 (Ojs.call x9042 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9040)|]);
                               (match x9041 with
                                | Some x9043 ->
                                    ignore
                                      (Ojs.call x9042 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9043)|])
                                | None -> ());
                               x9042))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "BroadcastChannel") "prototype")
    let (create : string -> t) =
      fun (x9048 : string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BroadcastChannel")
             [|(Ojs.string_to_js x9048)|])
  end
module EventSourceInit =
  struct
    type t = [ `EventSourceInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9050 : Ojs.t) -> t_of_js x9050
    and t_0_to_js : t_0 -> Ojs.t = fun (x9049 : t) -> t_to_js x9049
    type tags = [ `EventSourceInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9053 : Ojs.t) -> intf_of_js __tags_of_js x9053
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9051 : __tags intf) -> intf_to_js __tags_to_js x9051
    let (get_withCredentials : 'tags this -> bool) =
      fun (x9055 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9055) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x9057 : 'tags this) ->
        fun (x9058 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9057) "withCredentials"
            (Ojs.bool_to_js x9058)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface29:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> EventSource.t
                         val set_prototype : t -> EventSource.t -> unit
                         val create :
                           t ->
                             url:URL.t or_string ->
                               ?eventSourceInitDict:EventSourceInit.t ->
                                 unit -> EventSource.t
                         val get_CLOSED : t -> float
                         val get_CONNECTING : t -> float
                         val get_OPEN : t -> float
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9061 : Ojs.t) -> x9061
    and t_to_js : t -> Ojs.t = fun (x9060 : Ojs.t) -> x9060
    let (get_prototype : t -> EventSource.t) =
      fun (x9062 : t) ->
        EventSource.t_of_js (Ojs.get_prop_ascii (t_to_js x9062) "prototype")
    let (set_prototype : t -> EventSource.t -> unit) =
      fun (x9063 : t) ->
        fun (x9064 : EventSource.t) ->
          Ojs.set_prop_ascii (t_to_js x9063) "prototype"
            (EventSource.t_to_js x9064)
    let (create :
      t ->
        url:URL.t or_string ->
          ?eventSourceInitDict:EventSourceInit.t -> unit -> EventSource.t)
      =
      fun (x9070 : t) ->
        fun ~url:(x9065 : URL.t or_string) ->
          fun ?eventSourceInitDict:(x9066 : EventSourceInit.t option) ->
            fun () ->
              EventSource.t_of_js
                (Ojs.new_obj_arr (t_to_js x9070)
                   (let x9067 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x9067 "push"
                         [|(or_string_to_js URL.t_to_js x9065)|]);
                    (match x9066 with
                     | Some x9068 ->
                         ignore
                           (Ojs.call x9067 "push"
                              [|(EventSourceInit.t_to_js x9068)|])
                     | None -> ());
                    x9067))
    let (get_CLOSED : t -> float) =
      fun (x9071 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x9071) "CLOSED")
    let (get_CONNECTING : t -> float) =
      fun (x9072 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x9072) "CONNECTING")
    let (get_OPEN : t -> float) =
      fun (x9073 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x9073) "OPEN")
  end
 and
  EventSource:sig
                type t = [ `EventSource  | `EventTarget ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `EventSource  | `EventTarget ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `EventSource  | `EventTarget ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `EventSource ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_onerror :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onerror :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_onmessage :
                  'tags this ->
                    (this:t -> ev:MessageEvent.t_0 -> any) or_null
                val set_onmessage :
                  'tags this ->
                    (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit
                val get_onopen :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onopen :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_readyState : 'tags this -> float
                val get_url : 'tags this -> string
                val get_withCredentials : 'tags this -> bool
                val close : 'tags this -> unit
                val get_CLOSED : 'tags this -> float
                val get_CONNECTING : 'tags this -> float
                val get_OPEN : 'tags this -> float
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create :
                  url:URL.t or_string ->
                    ?eventSourceInitDict:EventSourceInit.t -> unit -> t
                val closed : unit -> float
                val connecting : unit -> float
                val open_ : unit -> float
              end =
  struct
    type t = [ `EventSource  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9075 : Ojs.t) -> t_of_js x9075
    and t_0_to_js : t_0 -> Ojs.t = fun (x9074 : t) -> t_to_js x9074
    type tags = [ `EventSource  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9078 : Ojs.t) -> intf_of_js __tags_of_js x9078
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9076 : __tags intf) -> intf_to_js __tags_to_js x9076
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x9080 : 'tags this) ->
        or_null_of_js
          (fun (x9082 : Ojs.t) ->
             fun ~this:(x9083 : t) ->
               fun ~ev:(x9084 : Event.t) ->
                 any_of_js
                   (Ojs.apply x9082 [|(t_to_js x9083);(Event.t_to_js x9084)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9080) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x9085 : 'tags this) ->
        fun (x9086 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9085) "onerror"
            (or_null_to_js
               (fun (x9087 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9088 : Ojs.t) ->
                       fun (x9089 : Ojs.t) ->
                         any_to_js
                           (x9087 ~this:(t_of_js x9088)
                              ~ev:(Event.t_of_js x9089)))) x9086)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x9091 : 'tags this) ->
        or_null_of_js
          (fun (x9093 : Ojs.t) ->
             fun ~this:(x9094 : t) ->
               fun ~ev:(x9095 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x9093
                      [|(t_to_js x9094);(MessageEvent.t_0_to_js x9095)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9091) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x9096 : 'tags this) ->
        fun (x9097 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9096) "onmessage"
            (or_null_to_js
               (fun (x9098 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9099 : Ojs.t) ->
                       fun (x9100 : Ojs.t) ->
                         any_to_js
                           (x9098 ~this:(t_of_js x9099)
                              ~ev:(MessageEvent.t_0_of_js x9100)))) x9097)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x9102 : 'tags this) ->
        or_null_of_js
          (fun (x9104 : Ojs.t) ->
             fun ~this:(x9105 : t) ->
               fun ~ev:(x9106 : Event.t) ->
                 any_of_js
                   (Ojs.apply x9104 [|(t_to_js x9105);(Event.t_to_js x9106)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9102) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x9107 : 'tags this) ->
        fun (x9108 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9107) "onopen"
            (or_null_to_js
               (fun (x9109 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9110 : Ojs.t) ->
                       fun (x9111 : Ojs.t) ->
                         any_to_js
                           (x9109 ~this:(t_of_js x9110)
                              ~ev:(Event.t_of_js x9111)))) x9108)
    let (get_readyState : 'tags this -> float) =
      fun (x9113 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9113) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x9115 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9115) "url")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x9117 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9117) "withCredentials")
    let (close : 'tags this -> unit) =
      fun (x9119 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x9119) "close" [||])
    let (get_CLOSED : 'tags this -> float) =
      fun (x9121 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9121) "CLOSED")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x9123 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9123) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x9125 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9125) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9135 : 'tags this) ->
        fun ~type_:(x9127 : 'K) ->
          fun ~listener:(x9128 : this:t -> ev:any -> any) ->
            fun
              ?options:(x9129 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9137 = this_to_js Obj.magic x9135 in
                   Ojs.call (Ojs.get_prop_ascii x9137 "addEventListener")
                     "apply"
                     [|x9137;((let x9130 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9130 "push" [|(Obj.magic x9127)|]);
                               ignore
                                 (Ojs.call x9130 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9133 : Ojs.t) ->
                                            fun (x9134 : Ojs.t) ->
                                              any_to_js
                                                (x9128 ~this:(t_of_js x9133)
                                                   ~ev:(any_of_js x9134))))|]);
                               (match x9129 with
                                | Some x9131 ->
                                    ignore
                                      (Ojs.call x9130 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9131)|])
                                | None -> ());
                               x9130))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9144 : 'tags this) ->
        fun ~type_:(x9138 : string) ->
          fun ~listener:(x9139 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x9140 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9146 = this_to_js Obj.magic x9144 in
                   Ojs.call (Ojs.get_prop_ascii x9146 "addEventListener")
                     "apply"
                     [|x9146;((let x9141 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9141 "push"
                                    [|(Ojs.string_to_js x9138)|]);
                               ignore
                                 (Ojs.call x9141 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9139)|]);
                               (match x9140 with
                                | Some x9142 ->
                                    ignore
                                      (Ojs.call x9141 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9142)|])
                                | None -> ());
                               x9141))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9155 : 'tags this) ->
        fun ~type_:(x9147 : 'K) ->
          fun ~listener:(x9148 : this:t -> ev:any -> any) ->
            fun ?options:(x9149 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9157 = this_to_js Obj.magic x9155 in
                   Ojs.call (Ojs.get_prop_ascii x9157 "removeEventListener")
                     "apply"
                     [|x9157;((let x9150 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9150 "push" [|(Obj.magic x9147)|]);
                               ignore
                                 (Ojs.call x9150 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9153 : Ojs.t) ->
                                            fun (x9154 : Ojs.t) ->
                                              any_to_js
                                                (x9148 ~this:(t_of_js x9153)
                                                   ~ev:(any_of_js x9154))))|]);
                               (match x9149 with
                                | Some x9151 ->
                                    ignore
                                      (Ojs.call x9150 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9151)|])
                                | None -> ());
                               x9150))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9164 : 'tags this) ->
        fun ~type_:(x9158 : string) ->
          fun ~listener:(x9159 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x9160 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9166 = this_to_js Obj.magic x9164 in
                   Ojs.call (Ojs.get_prop_ascii x9166 "removeEventListener")
                     "apply"
                     [|x9166;((let x9161 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9161 "push"
                                    [|(Ojs.string_to_js x9158)|]);
                               ignore
                                 (Ojs.call x9161 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9159)|]);
                               (match x9160 with
                                | Some x9162 ->
                                    ignore
                                      (Ojs.call x9161 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9162)|])
                                | None -> ());
                               x9161))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "prototype")
    let (create :
      url:URL.t or_string ->
        ?eventSourceInitDict:EventSourceInit.t -> unit -> t)
      =
      fun ~url:(x9167 : URL.t or_string) ->
        fun ?eventSourceInitDict:(x9168 : EventSourceInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EventSource")
                 (let x9169 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x9169 "push"
                       [|(or_string_to_js URL.t_to_js x9167)|]);
                  (match x9168 with
                   | Some x9170 ->
                       ignore
                         (Ojs.call x9169 "push"
                            [|(EventSourceInit.t_to_js x9170)|])
                   | None -> ());
                  x9169))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CLOSED")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "OPEN")
  end
module FrameRequestCallback =
  struct
    type t = [ `FrameRequestCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9173 : Ojs.t) -> t_of_js x9173
    and t_0_to_js : t_0 -> Ojs.t = fun (x9172 : t) -> t_to_js x9172
    type tags = [ `FrameRequestCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FrameRequestCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9176 : Ojs.t) -> intf_of_js __tags_of_js x9176
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9174 : __tags intf) -> intf_to_js __tags_to_js x9174
    let (apply : 'tags this -> time:DOMHighResTimeStamp.t -> unit) =
      fun (x9179 : 'tags this) ->
        fun ~time:(x9178 : DOMHighResTimeStamp.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic x9179)
               [|(DOMHighResTimeStamp.t_to_js x9178)|])
    let cast_from = Obj.magic
  end
module AnimationFrameProvider =
  struct
    type t = [ `AnimationFrameProvider ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9182 : Ojs.t) -> t_of_js x9182
    and t_0_to_js : t_0 -> Ojs.t = fun (x9181 : t) -> t_to_js x9181
    type tags = [ `AnimationFrameProvider ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AnimationFrameProvider ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9185 : Ojs.t) -> intf_of_js __tags_of_js x9185
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9183 : __tags intf) -> intf_to_js __tags_to_js x9183
    let (cancelAnimationFrame : 'tags this -> handle:float -> unit) =
      fun (x9188 : 'tags this) ->
        fun ~handle:(x9187 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9188) "cancelAnimationFrame"
               [|(Ojs.float_to_js x9187)|])
    let (requestAnimationFrame :
      'tags this -> callback:FrameRequestCallback.t -> float) =
      fun (x9191 : 'tags this) ->
        fun ~callback:(x9190 : FrameRequestCallback.t) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x9191) "requestAnimationFrame"
               [|(FrameRequestCallback.t_to_js x9190)|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface26:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> DedicatedWorkerGlobalScope.t
                         val set_prototype :
                           t -> DedicatedWorkerGlobalScope.t -> unit
                         val create : t -> DedicatedWorkerGlobalScope.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9194 : Ojs.t) -> x9194
    and t_to_js : t -> Ojs.t = fun (x9193 : Ojs.t) -> x9193
    let (get_prototype : t -> DedicatedWorkerGlobalScope.t) =
      fun (x9195 : t) ->
        DedicatedWorkerGlobalScope.t_of_js
          (Ojs.get_prop_ascii (t_to_js x9195) "prototype")
    let (set_prototype : t -> DedicatedWorkerGlobalScope.t -> unit) =
      fun (x9196 : t) ->
        fun (x9197 : DedicatedWorkerGlobalScope.t) ->
          Ojs.set_prop_ascii (t_to_js x9196) "prototype"
            (DedicatedWorkerGlobalScope.t_to_js x9197)
    let (create : t -> DedicatedWorkerGlobalScope.t) =
      fun (x9198 : t) ->
        DedicatedWorkerGlobalScope.t_of_js (Ojs.new_obj (t_to_js x9198) [||])
  end
 and
  DedicatedWorkerGlobalScope:sig
                               type t =
                                 [ `AnimationFrameProvider 
                                 | `DedicatedWorkerGlobalScope 
                                 | `EventTarget  | `FontFaceSource 
                                 | `WindowOrWorkerGlobalScope 
                                 | `WorkerGlobalScope ] intf
                               type t_0 = t
                               [@@@js.stop ]
                               type tags =
                                 [ `AnimationFrameProvider 
                                 | `DedicatedWorkerGlobalScope 
                                 | `EventTarget  | `FontFaceSource 
                                 | `WindowOrWorkerGlobalScope 
                                 | `WorkerGlobalScope ]
                               type tags_0 = tags
                               [@@@js.start ]
                               [@@@js.implem
                                 type tags =
                                   [ `AnimationFrameProvider 
                                   | `DedicatedWorkerGlobalScope 
                                   | `EventTarget  | `FontFaceSource 
                                   | `WindowOrWorkerGlobalScope 
                                   | `WorkerGlobalScope ]
                                 type tags_0 = tags]
                               type 'tags this =
                                 'tags intf constraint 'tags =
                                             [> `DedicatedWorkerGlobalScope ]
                               val t_to_js : t -> Ojs.t
                               val t_of_js : Ojs.t -> t
                               val t_0_to_js : t_0 -> Ojs.t
                               val t_0_of_js : Ojs.t -> t_0
                               val get_name : 'tags this -> string
                               val get_onmessage :
                                 'tags this ->
                                   (this:t -> ev:MessageEvent.t_0 -> any)
                                     or_null
                               val set_onmessage :
                                 'tags this ->
                                   (this:t -> ev:MessageEvent.t_0 -> any)
                                     or_null -> unit
                               val get_onmessageerror :
                                 'tags this ->
                                   (this:t -> ev:MessageEvent.t_0 -> any)
                                     or_null
                               val set_onmessageerror :
                                 'tags this ->
                                   (this:t -> ev:MessageEvent.t_0 -> any)
                                     or_null -> unit
                               val close : 'tags this -> unit
                               val postMessage :
                                 'tags this ->
                                   message:any ->
                                     transfer:Transferable.t list -> unit
                               val postMessage' :
                                 'tags this ->
                                   message:any ->
                                     ?options:StructuredSerializeOptions.t ->
                                       unit -> unit
                               val addEventListener :
                                 'tags this ->
                                   type_:'K ->
                                     listener:(this:t -> ev:any -> any) ->
                                       ?options:AddEventListenerOptions.t
                                         or_boolean -> unit -> unit
                               val addEventListener' :
                                 'tags this ->
                                   type_:string ->
                                     listener:EventListenerOrEventListenerObject.t
                                       ->
                                       ?options:AddEventListenerOptions.t
                                         or_boolean -> unit -> unit
                               val removeEventListener :
                                 'tags this ->
                                   type_:'K ->
                                     listener:(this:t -> ev:any -> any) ->
                                       ?options:EventListenerOptions.t
                                         or_boolean -> unit -> unit
                               val removeEventListener' :
                                 'tags this ->
                                   type_:string ->
                                     listener:EventListenerOrEventListenerObject.t
                                       ->
                                       ?options:EventListenerOptions.t
                                         or_boolean -> unit -> unit
                               val cast_from : 'tags this -> t
                               val prototype : unit -> t
                               val create : unit -> t
                             end =
  struct
    type t =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9200 : Ojs.t) -> t_of_js x9200
    and t_0_to_js : t_0 -> Ojs.t = fun (x9199 : t) -> t_to_js x9199
    type tags =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9203 : Ojs.t) -> intf_of_js __tags_of_js x9203
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9201 : __tags intf) -> intf_to_js __tags_to_js x9201
    let (get_name : 'tags this -> string) =
      fun (x9205 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9205) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x9207 : 'tags this) ->
        or_null_of_js
          (fun (x9209 : Ojs.t) ->
             fun ~this:(x9210 : t) ->
               fun ~ev:(x9211 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x9209
                      [|(t_to_js x9210);(MessageEvent.t_0_to_js x9211)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9207) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x9212 : 'tags this) ->
        fun (x9213 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9212) "onmessage"
            (or_null_to_js
               (fun (x9214 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9215 : Ojs.t) ->
                       fun (x9216 : Ojs.t) ->
                         any_to_js
                           (x9214 ~this:(t_of_js x9215)
                              ~ev:(MessageEvent.t_0_of_js x9216)))) x9213)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x9218 : 'tags this) ->
        or_null_of_js
          (fun (x9220 : Ojs.t) ->
             fun ~this:(x9221 : t) ->
               fun ~ev:(x9222 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x9220
                      [|(t_to_js x9221);(MessageEvent.t_0_to_js x9222)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9218) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x9223 : 'tags this) ->
        fun (x9224 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9223) "onmessageerror"
            (or_null_to_js
               (fun (x9225 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9226 : Ojs.t) ->
                       fun (x9227 : Ojs.t) ->
                         any_to_js
                           (x9225 ~this:(t_of_js x9226)
                              ~ev:(MessageEvent.t_0_of_js x9227)))) x9224)
    let (close : 'tags this -> unit) =
      fun (x9229 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x9229) "close" [||])
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x9234 : 'tags this) ->
        fun ~message:(x9231 : any) ->
          fun ~transfer:(x9232 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9234) "postMessage"
                 [|(any_to_js x9231);(Ojs.list_to_js Transferable.t_to_js
                                        x9232)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x9240 : 'tags this) ->
        fun ~message:(x9236 : any) ->
          fun ?options:(x9237 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x9242 = this_to_js Obj.magic x9240 in
                 Ojs.call (Ojs.get_prop_ascii x9242 "postMessage") "apply"
                   [|x9242;((let x9238 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x9238 "push" [|(any_to_js x9236)|]);
                             (match x9237 with
                              | Some x9239 ->
                                  ignore
                                    (Ojs.call x9238 "push"
                                       [|(StructuredSerializeOptions.t_to_js
                                            x9239)|])
                              | None -> ());
                             x9238))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9251 : 'tags this) ->
        fun ~type_:(x9243 : 'K) ->
          fun ~listener:(x9244 : this:t -> ev:any -> any) ->
            fun
              ?options:(x9245 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9253 = this_to_js Obj.magic x9251 in
                   Ojs.call (Ojs.get_prop_ascii x9253 "addEventListener")
                     "apply"
                     [|x9253;((let x9246 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9246 "push" [|(Obj.magic x9243)|]);
                               ignore
                                 (Ojs.call x9246 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9249 : Ojs.t) ->
                                            fun (x9250 : Ojs.t) ->
                                              any_to_js
                                                (x9244 ~this:(t_of_js x9249)
                                                   ~ev:(any_of_js x9250))))|]);
                               (match x9245 with
                                | Some x9247 ->
                                    ignore
                                      (Ojs.call x9246 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9247)|])
                                | None -> ());
                               x9246))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9260 : 'tags this) ->
        fun ~type_:(x9254 : string) ->
          fun ~listener:(x9255 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x9256 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9262 = this_to_js Obj.magic x9260 in
                   Ojs.call (Ojs.get_prop_ascii x9262 "addEventListener")
                     "apply"
                     [|x9262;((let x9257 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9257 "push"
                                    [|(Ojs.string_to_js x9254)|]);
                               ignore
                                 (Ojs.call x9257 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9255)|]);
                               (match x9256 with
                                | Some x9258 ->
                                    ignore
                                      (Ojs.call x9257 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9258)|])
                                | None -> ());
                               x9257))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9271 : 'tags this) ->
        fun ~type_:(x9263 : 'K) ->
          fun ~listener:(x9264 : this:t -> ev:any -> any) ->
            fun ?options:(x9265 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9273 = this_to_js Obj.magic x9271 in
                   Ojs.call (Ojs.get_prop_ascii x9273 "removeEventListener")
                     "apply"
                     [|x9273;((let x9266 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9266 "push" [|(Obj.magic x9263)|]);
                               ignore
                                 (Ojs.call x9266 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9269 : Ojs.t) ->
                                            fun (x9270 : Ojs.t) ->
                                              any_to_js
                                                (x9264 ~this:(t_of_js x9269)
                                                   ~ev:(any_of_js x9270))))|]);
                               (match x9265 with
                                | Some x9267 ->
                                    ignore
                                      (Ojs.call x9266 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9267)|])
                                | None -> ());
                               x9266))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9280 : 'tags this) ->
        fun ~type_:(x9274 : string) ->
          fun ~listener:(x9275 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x9276 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9282 = this_to_js Obj.magic x9280 in
                   Ojs.call (Ojs.get_prop_ascii x9282 "removeEventListener")
                     "apply"
                     [|x9282;((let x9277 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9277 "push"
                                    [|(Ojs.string_to_js x9274)|]);
                               ignore
                                 (Ojs.call x9277 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9275)|]);
                               (match x9276 with
                                | Some x9278 ->
                                    ignore
                                      (Ojs.call x9277 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9278)|])
                                | None -> ());
                               x9277))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             [||])
  end
module DOMRectInit =
  struct
    type t = [ `DOMRectInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9284 : Ojs.t) -> t_of_js x9284
    and t_0_to_js : t_0 -> Ojs.t = fun (x9283 : t) -> t_to_js x9283
    type tags = [ `DOMRectInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9287 : Ojs.t) -> intf_of_js __tags_of_js x9287
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9285 : __tags intf) -> intf_to_js __tags_to_js x9285
    let (get_height : 'tags this -> float) =
      fun (x9289 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9289) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x9291 : 'tags this) ->
        fun (x9292 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9291) "height"
            (Ojs.float_to_js x9292)
    let (get_width : 'tags this -> float) =
      fun (x9294 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9294) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x9296 : 'tags this) ->
        fun (x9297 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9296) "width"
            (Ojs.float_to_js x9297)
    let (get_x : 'tags this -> float) =
      fun (x9299 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9299) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x9301 : 'tags this) ->
        fun (x9302 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9301) "x"
            (Ojs.float_to_js x9302)
    let (get_y : 'tags this -> float) =
      fun (x9304 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9304) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x9306 : 'tags this) ->
        fun (x9307 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9306) "y"
            (Ojs.float_to_js x9307)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface24:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMRectReadOnly.t
                         val set_prototype : t -> DOMRectReadOnly.t -> unit
                         val create :
                           t ->
                             ?x:float ->
                               ?y:float ->
                                 ?width:float ->
                                   ?height:float -> unit -> DOMRectReadOnly.t
                         val fromRect :
                           t ->
                             ?other:DOMRectInit.t ->
                               unit -> DOMRectReadOnly.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9310 : Ojs.t) -> x9310
    and t_to_js : t -> Ojs.t = fun (x9309 : Ojs.t) -> x9309
    let (get_prototype : t -> DOMRectReadOnly.t) =
      fun (x9311 : t) ->
        DOMRectReadOnly.t_of_js
          (Ojs.get_prop_ascii (t_to_js x9311) "prototype")
    let (set_prototype : t -> DOMRectReadOnly.t -> unit) =
      fun (x9312 : t) ->
        fun (x9313 : DOMRectReadOnly.t) ->
          Ojs.set_prop_ascii (t_to_js x9312) "prototype"
            (DOMRectReadOnly.t_to_js x9313)
    let (create :
      t ->
        ?x:float ->
          ?y:float ->
            ?width:float -> ?height:float -> unit -> DOMRectReadOnly.t)
      =
      fun (x9323 : t) ->
        fun ?x:(x9314 : float option) ->
          fun ?y:(x9315 : float option) ->
            fun ?width:(x9316 : float option) ->
              fun ?height:(x9317 : float option) ->
                fun () ->
                  DOMRectReadOnly.t_of_js
                    (Ojs.new_obj_arr (t_to_js x9323)
                       (let x9318 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x9314 with
                         | Some x9322 ->
                             ignore
                               (Ojs.call x9318 "push"
                                  [|(Ojs.float_to_js x9322)|])
                         | None -> ());
                        (match x9315 with
                         | Some x9321 ->
                             ignore
                               (Ojs.call x9318 "push"
                                  [|(Ojs.float_to_js x9321)|])
                         | None -> ());
                        (match x9316 with
                         | Some x9320 ->
                             ignore
                               (Ojs.call x9318 "push"
                                  [|(Ojs.float_to_js x9320)|])
                         | None -> ());
                        (match x9317 with
                         | Some x9319 ->
                             ignore
                               (Ojs.call x9318 "push"
                                  [|(Ojs.float_to_js x9319)|])
                         | None -> ());
                        x9318))
    let (fromRect : t -> ?other:DOMRectInit.t -> unit -> DOMRectReadOnly.t) =
      fun (x9327 : t) ->
        fun ?other:(x9324 : DOMRectInit.t option) ->
          fun () ->
            DOMRectReadOnly.t_of_js
              (let x9328 = t_to_js x9327 in
               Ojs.call (Ojs.get_prop_ascii x9328 "fromRect") "apply"
                 [|x9328;((let x9325 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9324 with
                            | Some x9326 ->
                                ignore
                                  (Ojs.call x9325 "push"
                                     [|(DOMRectInit.t_to_js x9326)|])
                            | None -> ());
                           x9325))|])
  end
 and
  DOMRectReadOnly:sig
                    type t = [ `DOMRectReadOnly ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `DOMRectReadOnly ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `DOMRectReadOnly ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `DOMRectReadOnly ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_bottom : 'tags this -> float
                    val get_height : 'tags this -> float
                    val get_left : 'tags this -> float
                    val get_right : 'tags this -> float
                    val get_top : 'tags this -> float
                    val get_width : 'tags this -> float
                    val get_x : 'tags this -> float
                    val get_y : 'tags this -> float
                    val toJSON : 'tags this -> any
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create :
                      ?x:float ->
                        ?y:float ->
                          ?width:float -> ?height:float -> unit -> t
                    val fromRect : ?other:DOMRectInit.t -> unit -> t
                  end =
  struct
    type t = [ `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9330 : Ojs.t) -> t_of_js x9330
    and t_0_to_js : t_0 -> Ojs.t = fun (x9329 : t) -> t_to_js x9329
    type tags = [ `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9333 : Ojs.t) -> intf_of_js __tags_of_js x9333
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9331 : __tags intf) -> intf_to_js __tags_to_js x9331
    let (get_bottom : 'tags this -> float) =
      fun (x9335 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9335) "bottom")
    let (get_height : 'tags this -> float) =
      fun (x9337 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9337) "height")
    let (get_left : 'tags this -> float) =
      fun (x9339 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9339) "left")
    let (get_right : 'tags this -> float) =
      fun (x9341 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9341) "right")
    let (get_top : 'tags this -> float) =
      fun (x9343 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9343) "top")
    let (get_width : 'tags this -> float) =
      fun (x9345 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9345) "width")
    let (get_x : 'tags this -> float) =
      fun (x9347 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9347) "x")
    let (get_y : 'tags this -> float) =
      fun (x9349 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9349) "y")
    let (toJSON : 'tags this -> any) =
      fun (x9351 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x9351) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly") "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x9353 : float option) ->
        fun ?y:(x9354 : float option) ->
          fun ?width:(x9355 : float option) ->
            fun ?height:(x9356 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly")
                     (let x9357 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x9353 with
                       | Some x9361 ->
                           ignore
                             (Ojs.call x9357 "push"
                                [|(Ojs.float_to_js x9361)|])
                       | None -> ());
                      (match x9354 with
                       | Some x9360 ->
                           ignore
                             (Ojs.call x9357 "push"
                                [|(Ojs.float_to_js x9360)|])
                       | None -> ());
                      (match x9355 with
                       | Some x9359 ->
                           ignore
                             (Ojs.call x9357 "push"
                                [|(Ojs.float_to_js x9359)|])
                       | None -> ());
                      (match x9356 with
                       | Some x9358 ->
                           ignore
                             (Ojs.call x9357 "push"
                                [|(Ojs.float_to_js x9358)|])
                       | None -> ());
                      x9357))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x9362 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x9365 = Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x9365 "fromRect") "apply"
               [|x9365;((let x9363 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x9362 with
                          | Some x9364 ->
                              ignore
                                (Ojs.call x9363 "push"
                                   [|(DOMRectInit.t_to_js x9364)|])
                          | None -> ());
                         x9363))|])
  end
module rec
  AnonymousInterface23:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMRect.t
                         val set_prototype : t -> DOMRect.t -> unit
                         val create :
                           t ->
                             ?x:float ->
                               ?y:float ->
                                 ?width:float ->
                                   ?height:float -> unit -> DOMRect.t
                         val fromRect :
                           t -> ?other:DOMRectInit.t -> unit -> DOMRect.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9367 : Ojs.t) -> x9367
    and t_to_js : t -> Ojs.t = fun (x9366 : Ojs.t) -> x9366
    let (get_prototype : t -> DOMRect.t) =
      fun (x9368 : t) ->
        DOMRect.t_of_js (Ojs.get_prop_ascii (t_to_js x9368) "prototype")
    let (set_prototype : t -> DOMRect.t -> unit) =
      fun (x9369 : t) ->
        fun (x9370 : DOMRect.t) ->
          Ojs.set_prop_ascii (t_to_js x9369) "prototype"
            (DOMRect.t_to_js x9370)
    let (create :
      t ->
        ?x:float ->
          ?y:float -> ?width:float -> ?height:float -> unit -> DOMRect.t)
      =
      fun (x9380 : t) ->
        fun ?x:(x9371 : float option) ->
          fun ?y:(x9372 : float option) ->
            fun ?width:(x9373 : float option) ->
              fun ?height:(x9374 : float option) ->
                fun () ->
                  DOMRect.t_of_js
                    (Ojs.new_obj_arr (t_to_js x9380)
                       (let x9375 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x9371 with
                         | Some x9379 ->
                             ignore
                               (Ojs.call x9375 "push"
                                  [|(Ojs.float_to_js x9379)|])
                         | None -> ());
                        (match x9372 with
                         | Some x9378 ->
                             ignore
                               (Ojs.call x9375 "push"
                                  [|(Ojs.float_to_js x9378)|])
                         | None -> ());
                        (match x9373 with
                         | Some x9377 ->
                             ignore
                               (Ojs.call x9375 "push"
                                  [|(Ojs.float_to_js x9377)|])
                         | None -> ());
                        (match x9374 with
                         | Some x9376 ->
                             ignore
                               (Ojs.call x9375 "push"
                                  [|(Ojs.float_to_js x9376)|])
                         | None -> ());
                        x9375))
    let (fromRect : t -> ?other:DOMRectInit.t -> unit -> DOMRect.t) =
      fun (x9384 : t) ->
        fun ?other:(x9381 : DOMRectInit.t option) ->
          fun () ->
            DOMRect.t_of_js
              (let x9385 = t_to_js x9384 in
               Ojs.call (Ojs.get_prop_ascii x9385 "fromRect") "apply"
                 [|x9385;((let x9382 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9381 with
                            | Some x9383 ->
                                ignore
                                  (Ojs.call x9382 "push"
                                     [|(DOMRectInit.t_to_js x9383)|])
                            | None -> ());
                           x9382))|])
  end
 and
  DOMRect:sig
            type t = [ `DOMRect  | `DOMRectReadOnly ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `DOMRect  | `DOMRectReadOnly ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags = [ `DOMRect  | `DOMRectReadOnly ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_height : 'tags this -> float
            val set_height : 'tags this -> float -> unit
            val get_width : 'tags this -> float
            val set_width : 'tags this -> float -> unit
            val get_x : 'tags this -> float
            val set_x : 'tags this -> float -> unit
            val get_y : 'tags this -> float
            val set_y : 'tags this -> float -> unit
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              ?x:float ->
                ?y:float -> ?width:float -> ?height:float -> unit -> t
            val fromRect : ?other:DOMRectInit.t -> unit -> t
          end =
  struct
    type t = [ `DOMRect  | `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9387 : Ojs.t) -> t_of_js x9387
    and t_0_to_js : t_0 -> Ojs.t = fun (x9386 : t) -> t_to_js x9386
    type tags = [ `DOMRect  | `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9390 : Ojs.t) -> intf_of_js __tags_of_js x9390
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9388 : __tags intf) -> intf_to_js __tags_to_js x9388
    let (get_height : 'tags this -> float) =
      fun (x9392 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9392) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x9394 : 'tags this) ->
        fun (x9395 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9394) "height"
            (Ojs.float_to_js x9395)
    let (get_width : 'tags this -> float) =
      fun (x9397 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9397) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x9399 : 'tags this) ->
        fun (x9400 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9399) "width"
            (Ojs.float_to_js x9400)
    let (get_x : 'tags this -> float) =
      fun (x9402 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9402) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x9404 : 'tags this) ->
        fun (x9405 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9404) "x"
            (Ojs.float_to_js x9405)
    let (get_y : 'tags this -> float) =
      fun (x9407 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9407) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x9409 : 'tags this) ->
        fun (x9410 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9409) "y"
            (Ojs.float_to_js x9410)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMRect")
             "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x9412 : float option) ->
        fun ?y:(x9413 : float option) ->
          fun ?width:(x9414 : float option) ->
            fun ?height:(x9415 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMRect")
                     (let x9416 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x9412 with
                       | Some x9420 ->
                           ignore
                             (Ojs.call x9416 "push"
                                [|(Ojs.float_to_js x9420)|])
                       | None -> ());
                      (match x9413 with
                       | Some x9419 ->
                           ignore
                             (Ojs.call x9416 "push"
                                [|(Ojs.float_to_js x9419)|])
                       | None -> ());
                      (match x9414 with
                       | Some x9418 ->
                           ignore
                             (Ojs.call x9416 "push"
                                [|(Ojs.float_to_js x9418)|])
                       | None -> ());
                      (match x9415 with
                       | Some x9417 ->
                           ignore
                             (Ojs.call x9416 "push"
                                [|(Ojs.float_to_js x9417)|])
                       | None -> ());
                      x9416))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x9421 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x9424 = Ojs.get_prop_ascii Ojs.global "DOMRect" in
             Ojs.call (Ojs.get_prop_ascii x9424 "fromRect") "apply"
               [|x9424;((let x9422 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x9421 with
                          | Some x9423 ->
                              ignore
                                (Ojs.call x9422 "push"
                                   [|(DOMRectInit.t_to_js x9423)|])
                          | None -> ());
                         x9422))|])
  end
module DOMPointInit =
  struct
    type t = [ `DOMPointInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9426 : Ojs.t) -> t_of_js x9426
    and t_0_to_js : t_0 -> Ojs.t = fun (x9425 : t) -> t_to_js x9425
    type tags = [ `DOMPointInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9429 : Ojs.t) -> intf_of_js __tags_of_js x9429
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9427 : __tags intf) -> intf_to_js __tags_to_js x9427
    let (get_w : 'tags this -> float) =
      fun (x9431 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9431) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x9433 : 'tags this) ->
        fun (x9434 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9433) "w"
            (Ojs.float_to_js x9434)
    let (get_x : 'tags this -> float) =
      fun (x9436 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9436) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x9438 : 'tags this) ->
        fun (x9439 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9438) "x"
            (Ojs.float_to_js x9439)
    let (get_y : 'tags this -> float) =
      fun (x9441 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9441) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x9443 : 'tags this) ->
        fun (x9444 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9443) "y"
            (Ojs.float_to_js x9444)
    let (get_z : 'tags this -> float) =
      fun (x9446 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9446) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x9448 : 'tags this) ->
        fun (x9449 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9448) "z"
            (Ojs.float_to_js x9449)
    let cast_from = Obj.magic
  end
module DOMQuadInit =
  struct
    type t = [ `DOMQuadInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9452 : Ojs.t) -> t_of_js x9452
    and t_0_to_js : t_0 -> Ojs.t = fun (x9451 : t) -> t_to_js x9451
    type tags = [ `DOMQuadInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuadInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9455 : Ojs.t) -> intf_of_js __tags_of_js x9455
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9453 : __tags intf) -> intf_to_js __tags_to_js x9453
    let (get_p1 : 'tags this -> DOMPointInit.t) =
      fun (x9457 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9457) "p1")
    let (set_p1 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x9459 : 'tags this) ->
        fun (x9460 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9459) "p1"
            (DOMPointInit.t_to_js x9460)
    let (get_p2 : 'tags this -> DOMPointInit.t) =
      fun (x9462 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9462) "p2")
    let (set_p2 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x9464 : 'tags this) ->
        fun (x9465 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9464) "p2"
            (DOMPointInit.t_to_js x9465)
    let (get_p3 : 'tags this -> DOMPointInit.t) =
      fun (x9467 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9467) "p3")
    let (set_p3 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x9469 : 'tags this) ->
        fun (x9470 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9469) "p3"
            (DOMPointInit.t_to_js x9470)
    let (get_p4 : 'tags this -> DOMPointInit.t) =
      fun (x9472 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9472) "p4")
    let (set_p4 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x9474 : 'tags this) ->
        fun (x9475 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9474) "p4"
            (DOMPointInit.t_to_js x9475)
    let cast_from = Obj.magic
  end
module DOMMatrixInit =
  struct
    type t = [ `DOMMatrix2DInit  | `DOMMatrixInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9478 : Ojs.t) -> t_of_js x9478
    and t_0_to_js : t_0 -> Ojs.t = fun (x9477 : t) -> t_to_js x9477
    type tags = [ `DOMMatrix2DInit  | `DOMMatrixInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9481 : Ojs.t) -> intf_of_js __tags_of_js x9481
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9479 : __tags intf) -> intf_to_js __tags_to_js x9479
    let (get_is2D : 'tags this -> bool) =
      fun (x9483 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9483) "is2D")
    let (set_is2D : 'tags this -> bool -> unit) =
      fun (x9485 : 'tags this) ->
        fun (x9486 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9485) "is2D"
            (Ojs.bool_to_js x9486)
    let (get_m13 : 'tags this -> float) =
      fun (x9488 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9488) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x9490 : 'tags this) ->
        fun (x9491 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9490) "m13"
            (Ojs.float_to_js x9491)
    let (get_m14 : 'tags this -> float) =
      fun (x9493 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9493) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x9495 : 'tags this) ->
        fun (x9496 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9495) "m14"
            (Ojs.float_to_js x9496)
    let (get_m23 : 'tags this -> float) =
      fun (x9498 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9498) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x9500 : 'tags this) ->
        fun (x9501 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9500) "m23"
            (Ojs.float_to_js x9501)
    let (get_m24 : 'tags this -> float) =
      fun (x9503 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9503) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x9505 : 'tags this) ->
        fun (x9506 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9505) "m24"
            (Ojs.float_to_js x9506)
    let (get_m31 : 'tags this -> float) =
      fun (x9508 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9508) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x9510 : 'tags this) ->
        fun (x9511 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9510) "m31"
            (Ojs.float_to_js x9511)
    let (get_m32 : 'tags this -> float) =
      fun (x9513 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9513) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x9515 : 'tags this) ->
        fun (x9516 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9515) "m32"
            (Ojs.float_to_js x9516)
    let (get_m33 : 'tags this -> float) =
      fun (x9518 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9518) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x9520 : 'tags this) ->
        fun (x9521 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9520) "m33"
            (Ojs.float_to_js x9521)
    let (get_m34 : 'tags this -> float) =
      fun (x9523 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9523) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x9525 : 'tags this) ->
        fun (x9526 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9525) "m34"
            (Ojs.float_to_js x9526)
    let (get_m43 : 'tags this -> float) =
      fun (x9528 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9528) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x9530 : 'tags this) ->
        fun (x9531 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9530) "m43"
            (Ojs.float_to_js x9531)
    let (get_m44 : 'tags this -> float) =
      fun (x9533 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9533) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x9535 : 'tags this) ->
        fun (x9536 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9535) "m44"
            (Ojs.float_to_js x9536)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface20:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMPoint.t
                         val set_prototype : t -> DOMPoint.t -> unit
                         val create :
                           t ->
                             ?x:float ->
                               ?y:float ->
                                 ?z:float -> ?w:float -> unit -> DOMPoint.t
                         val fromPoint :
                           t -> ?other:DOMPointInit.t -> unit -> DOMPoint.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9539 : Ojs.t) -> x9539
    and t_to_js : t -> Ojs.t = fun (x9538 : Ojs.t) -> x9538
    let (get_prototype : t -> DOMPoint.t) =
      fun (x9540 : t) ->
        DOMPoint.t_of_js (Ojs.get_prop_ascii (t_to_js x9540) "prototype")
    let (set_prototype : t -> DOMPoint.t -> unit) =
      fun (x9541 : t) ->
        fun (x9542 : DOMPoint.t) ->
          Ojs.set_prop_ascii (t_to_js x9541) "prototype"
            (DOMPoint.t_to_js x9542)
    let (create :
      t -> ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> DOMPoint.t)
      =
      fun (x9552 : t) ->
        fun ?x:(x9543 : float option) ->
          fun ?y:(x9544 : float option) ->
            fun ?z:(x9545 : float option) ->
              fun ?w:(x9546 : float option) ->
                fun () ->
                  DOMPoint.t_of_js
                    (Ojs.new_obj_arr (t_to_js x9552)
                       (let x9547 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x9543 with
                         | Some x9551 ->
                             ignore
                               (Ojs.call x9547 "push"
                                  [|(Ojs.float_to_js x9551)|])
                         | None -> ());
                        (match x9544 with
                         | Some x9550 ->
                             ignore
                               (Ojs.call x9547 "push"
                                  [|(Ojs.float_to_js x9550)|])
                         | None -> ());
                        (match x9545 with
                         | Some x9549 ->
                             ignore
                               (Ojs.call x9547 "push"
                                  [|(Ojs.float_to_js x9549)|])
                         | None -> ());
                        (match x9546 with
                         | Some x9548 ->
                             ignore
                               (Ojs.call x9547 "push"
                                  [|(Ojs.float_to_js x9548)|])
                         | None -> ());
                        x9547))
    let (fromPoint : t -> ?other:DOMPointInit.t -> unit -> DOMPoint.t) =
      fun (x9556 : t) ->
        fun ?other:(x9553 : DOMPointInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x9557 = t_to_js x9556 in
               Ojs.call (Ojs.get_prop_ascii x9557 "fromPoint") "apply"
                 [|x9557;((let x9554 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9553 with
                            | Some x9555 ->
                                ignore
                                  (Ojs.call x9554 "push"
                                     [|(DOMPointInit.t_to_js x9555)|])
                            | None -> ());
                           x9554))|])
  end
 and
  AnonymousInterface21:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMPointReadOnly.t
                         val set_prototype : t -> DOMPointReadOnly.t -> unit
                         val create :
                           t ->
                             ?x:float ->
                               ?y:float ->
                                 ?z:float ->
                                   ?w:float -> unit -> DOMPointReadOnly.t
                         val fromPoint :
                           t ->
                             ?other:DOMPointInit.t ->
                               unit -> DOMPointReadOnly.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9559 : Ojs.t) -> x9559
    and t_to_js : t -> Ojs.t = fun (x9558 : Ojs.t) -> x9558
    let (get_prototype : t -> DOMPointReadOnly.t) =
      fun (x9560 : t) ->
        DOMPointReadOnly.t_of_js
          (Ojs.get_prop_ascii (t_to_js x9560) "prototype")
    let (set_prototype : t -> DOMPointReadOnly.t -> unit) =
      fun (x9561 : t) ->
        fun (x9562 : DOMPointReadOnly.t) ->
          Ojs.set_prop_ascii (t_to_js x9561) "prototype"
            (DOMPointReadOnly.t_to_js x9562)
    let (create :
      t ->
        ?x:float ->
          ?y:float -> ?z:float -> ?w:float -> unit -> DOMPointReadOnly.t)
      =
      fun (x9572 : t) ->
        fun ?x:(x9563 : float option) ->
          fun ?y:(x9564 : float option) ->
            fun ?z:(x9565 : float option) ->
              fun ?w:(x9566 : float option) ->
                fun () ->
                  DOMPointReadOnly.t_of_js
                    (Ojs.new_obj_arr (t_to_js x9572)
                       (let x9567 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x9563 with
                         | Some x9571 ->
                             ignore
                               (Ojs.call x9567 "push"
                                  [|(Ojs.float_to_js x9571)|])
                         | None -> ());
                        (match x9564 with
                         | Some x9570 ->
                             ignore
                               (Ojs.call x9567 "push"
                                  [|(Ojs.float_to_js x9570)|])
                         | None -> ());
                        (match x9565 with
                         | Some x9569 ->
                             ignore
                               (Ojs.call x9567 "push"
                                  [|(Ojs.float_to_js x9569)|])
                         | None -> ());
                        (match x9566 with
                         | Some x9568 ->
                             ignore
                               (Ojs.call x9567 "push"
                                  [|(Ojs.float_to_js x9568)|])
                         | None -> ());
                        x9567))
    let (fromPoint :
      t -> ?other:DOMPointInit.t -> unit -> DOMPointReadOnly.t) =
      fun (x9576 : t) ->
        fun ?other:(x9573 : DOMPointInit.t option) ->
          fun () ->
            DOMPointReadOnly.t_of_js
              (let x9577 = t_to_js x9576 in
               Ojs.call (Ojs.get_prop_ascii x9577 "fromPoint") "apply"
                 [|x9577;((let x9574 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9573 with
                            | Some x9575 ->
                                ignore
                                  (Ojs.call x9574 "push"
                                     [|(DOMPointInit.t_to_js x9575)|])
                            | None -> ());
                           x9574))|])
  end and
       DOMPoint:sig
                  type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
                  type t_0 = t
                  [@@@js.stop ]
                  type tags = [ `DOMPoint  | `DOMPointReadOnly ]
                  type tags_0 = tags
                  [@@@js.start ]
                  [@@@js.implem
                    type tags = [ `DOMPoint  | `DOMPointReadOnly ]
                    type tags_0 = tags]
                  type 'tags this =
                    'tags intf constraint 'tags = [> `DOMPoint ]
                  val t_to_js : t -> Ojs.t
                  val t_of_js : Ojs.t -> t
                  val t_0_to_js : t_0 -> Ojs.t
                  val t_0_of_js : Ojs.t -> t_0
                  val get_w : 'tags this -> float
                  val set_w : 'tags this -> float -> unit
                  val get_x : 'tags this -> float
                  val set_x : 'tags this -> float -> unit
                  val get_y : 'tags this -> float
                  val set_y : 'tags this -> float -> unit
                  val get_z : 'tags this -> float
                  val set_z : 'tags this -> float -> unit
                  val cast_from : 'tags this -> t
                  val prototype : unit -> t
                  val create :
                    ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t
                  val fromPoint : ?other:DOMPointInit.t -> unit -> t
                end =
       struct
         type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x9579 : Ojs.t) -> t_of_js x9579
         and t_0_to_js : t_0 -> Ojs.t = fun (x9578 : t) -> t_to_js x9578
         type tags = [ `DOMPoint  | `DOMPointReadOnly ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x9582 : Ojs.t) -> intf_of_js __tags_of_js x9582
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x9580 : __tags intf) -> intf_to_js __tags_to_js x9580
         let (get_w : 'tags this -> float) =
           fun (x9584 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9584) "w")
         let (set_w : 'tags this -> float -> unit) =
           fun (x9586 : 'tags this) ->
             fun (x9587 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9586) "w"
                 (Ojs.float_to_js x9587)
         let (get_x : 'tags this -> float) =
           fun (x9589 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9589) "x")
         let (set_x : 'tags this -> float -> unit) =
           fun (x9591 : 'tags this) ->
             fun (x9592 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9591) "x"
                 (Ojs.float_to_js x9592)
         let (get_y : 'tags this -> float) =
           fun (x9594 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9594) "y")
         let (set_y : 'tags this -> float -> unit) =
           fun (x9596 : 'tags this) ->
             fun (x9597 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9596) "y"
                 (Ojs.float_to_js x9597)
         let (get_z : 'tags this -> float) =
           fun (x9599 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9599) "z")
         let (set_z : 'tags this -> float -> unit) =
           fun (x9601 : 'tags this) ->
             fun (x9602 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9601) "z"
                 (Ojs.float_to_js x9602)
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMPoint")
                  "prototype")
         let (create :
           ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t) =
           fun ?x:(x9604 : float option) ->
             fun ?y:(x9605 : float option) ->
               fun ?z:(x9606 : float option) ->
                 fun ?w:(x9607 : float option) ->
                   fun () ->
                     t_of_js
                       (Ojs.new_obj_arr
                          (Ojs.get_prop_ascii Ojs.global "DOMPoint")
                          (let x9608 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9604 with
                            | Some x9612 ->
                                ignore
                                  (Ojs.call x9608 "push"
                                     [|(Ojs.float_to_js x9612)|])
                            | None -> ());
                           (match x9605 with
                            | Some x9611 ->
                                ignore
                                  (Ojs.call x9608 "push"
                                     [|(Ojs.float_to_js x9611)|])
                            | None -> ());
                           (match x9606 with
                            | Some x9610 ->
                                ignore
                                  (Ojs.call x9608 "push"
                                     [|(Ojs.float_to_js x9610)|])
                            | None -> ());
                           (match x9607 with
                            | Some x9609 ->
                                ignore
                                  (Ojs.call x9608 "push"
                                     [|(Ojs.float_to_js x9609)|])
                            | None -> ());
                           x9608))
         let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
           fun ?other:(x9613 : DOMPointInit.t option) ->
             fun () ->
               t_of_js
                 (let x9616 = Ojs.get_prop_ascii Ojs.global "DOMPoint" in
                  Ojs.call (Ojs.get_prop_ascii x9616 "fromPoint") "apply"
                    [|x9616;((let x9614 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x9613 with
                               | Some x9615 ->
                                   ignore
                                     (Ojs.call x9614 "push"
                                        [|(DOMPointInit.t_to_js x9615)|])
                               | None -> ());
                              x9614))|])
       end and
            DOMPointReadOnly:sig
                               type t = [ `DOMPointReadOnly ] intf
                               type t_0 = t
                               [@@@js.stop ]
                               type tags = [ `DOMPointReadOnly ]
                               type tags_0 = tags
                               [@@@js.start ]
                               [@@@js.implem
                                 type tags = [ `DOMPointReadOnly ]
                                 type tags_0 = tags]
                               type 'tags this =
                                 'tags intf constraint 'tags =
                                             [> `DOMPointReadOnly ]
                               val t_to_js : t -> Ojs.t
                               val t_of_js : Ojs.t -> t
                               val t_0_to_js : t_0 -> Ojs.t
                               val t_0_of_js : Ojs.t -> t_0
                               val get_w : 'tags this -> float
                               val get_x : 'tags this -> float
                               val get_y : 'tags this -> float
                               val get_z : 'tags this -> float
                               val matrixTransform :
                                 'tags this ->
                                   ?matrix:DOMMatrixInit.t ->
                                     unit -> DOMPoint.t
                               val toJSON : 'tags this -> any
                               val cast_from : 'tags this -> t
                               val prototype : unit -> t
                               val create :
                                 ?x:float ->
                                   ?y:float ->
                                     ?z:float -> ?w:float -> unit -> t
                               val fromPoint :
                                 ?other:DOMPointInit.t -> unit -> t
                             end =
            struct
              type t = [ `DOMPointReadOnly ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x9618 : Ojs.t) -> t_of_js x9618
              and t_0_to_js : t_0 -> Ojs.t = fun (x9617 : t) -> t_to_js x9617
              type tags = [ `DOMPointReadOnly ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `DOMPointReadOnly ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x9621 : Ojs.t) -> intf_of_js __tags_of_js x9621
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x9619 : __tags intf) -> intf_to_js __tags_to_js x9619
              let (get_w : 'tags this -> float) =
                fun (x9623 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9623) "w")
              let (get_x : 'tags this -> float) =
                fun (x9625 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9625) "x")
              let (get_y : 'tags this -> float) =
                fun (x9627 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9627) "y")
              let (get_z : 'tags this -> float) =
                fun (x9629 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9629) "z")
              let (matrixTransform :
                'tags this -> ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t)
                =
                fun (x9634 : 'tags this) ->
                  fun ?matrix:(x9631 : DOMMatrixInit.t option) ->
                    fun () ->
                      DOMPoint.t_of_js
                        (let x9636 = this_to_js Obj.magic x9634 in
                         Ojs.call
                           (Ojs.get_prop_ascii x9636 "matrixTransform")
                           "apply"
                           [|x9636;((let x9632 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x9631 with
                                      | Some x9633 ->
                                          ignore
                                            (Ojs.call x9632 "push"
                                               [|(DOMMatrixInit.t_to_js x9633)|])
                                      | None -> ());
                                     x9632))|])
              let (toJSON : 'tags this -> any) =
                fun (x9637 : 'tags this) ->
                  any_of_js
                    (Ojs.call (this_to_js Obj.magic x9637) "toJSON" [||])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly")
                       "prototype")
              let (create :
                ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t) =
                fun ?x:(x9639 : float option) ->
                  fun ?y:(x9640 : float option) ->
                    fun ?z:(x9641 : float option) ->
                      fun ?w:(x9642 : float option) ->
                        fun () ->
                          t_of_js
                            (Ojs.new_obj_arr
                               (Ojs.get_prop_ascii Ojs.global
                                  "DOMPointReadOnly")
                               (let x9643 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9639 with
                                 | Some x9647 ->
                                     ignore
                                       (Ojs.call x9643 "push"
                                          [|(Ojs.float_to_js x9647)|])
                                 | None -> ());
                                (match x9640 with
                                 | Some x9646 ->
                                     ignore
                                       (Ojs.call x9643 "push"
                                          [|(Ojs.float_to_js x9646)|])
                                 | None -> ());
                                (match x9641 with
                                 | Some x9645 ->
                                     ignore
                                       (Ojs.call x9643 "push"
                                          [|(Ojs.float_to_js x9645)|])
                                 | None -> ());
                                (match x9642 with
                                 | Some x9644 ->
                                     ignore
                                       (Ojs.call x9643 "push"
                                          [|(Ojs.float_to_js x9644)|])
                                 | None -> ());
                                x9643))
              let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
                fun ?other:(x9648 : DOMPointInit.t option) ->
                  fun () ->
                    t_of_js
                      (let x9651 =
                         Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly" in
                       Ojs.call (Ojs.get_prop_ascii x9651 "fromPoint")
                         "apply"
                         [|x9651;((let x9649 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   (match x9648 with
                                    | Some x9650 ->
                                        ignore
                                          (Ojs.call x9649 "push"
                                             [|(DOMPointInit.t_to_js x9650)|])
                                    | None -> ());
                                   x9649))|])
            end
module rec
  AnonymousInterface22:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMQuad.t
                         val set_prototype : t -> DOMQuad.t -> unit
                         val create :
                           t ->
                             ?p1:DOMPointInit.t ->
                               ?p2:DOMPointInit.t ->
                                 ?p3:DOMPointInit.t ->
                                   ?p4:DOMPointInit.t -> unit -> DOMQuad.t
                         val fromQuad :
                           t -> ?other:DOMQuadInit.t -> unit -> DOMQuad.t
                         val fromRect :
                           t -> ?other:DOMRectInit.t -> unit -> DOMQuad.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9653 : Ojs.t) -> x9653
    and t_to_js : t -> Ojs.t = fun (x9652 : Ojs.t) -> x9652
    let (get_prototype : t -> DOMQuad.t) =
      fun (x9654 : t) ->
        DOMQuad.t_of_js (Ojs.get_prop_ascii (t_to_js x9654) "prototype")
    let (set_prototype : t -> DOMQuad.t -> unit) =
      fun (x9655 : t) ->
        fun (x9656 : DOMQuad.t) ->
          Ojs.set_prop_ascii (t_to_js x9655) "prototype"
            (DOMQuad.t_to_js x9656)
    let (create :
      t ->
        ?p1:DOMPointInit.t ->
          ?p2:DOMPointInit.t ->
            ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> DOMQuad.t)
      =
      fun (x9666 : t) ->
        fun ?p1:(x9657 : DOMPointInit.t option) ->
          fun ?p2:(x9658 : DOMPointInit.t option) ->
            fun ?p3:(x9659 : DOMPointInit.t option) ->
              fun ?p4:(x9660 : DOMPointInit.t option) ->
                fun () ->
                  DOMQuad.t_of_js
                    (Ojs.new_obj_arr (t_to_js x9666)
                       (let x9661 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x9657 with
                         | Some x9665 ->
                             ignore
                               (Ojs.call x9661 "push"
                                  [|(DOMPointInit.t_to_js x9665)|])
                         | None -> ());
                        (match x9658 with
                         | Some x9664 ->
                             ignore
                               (Ojs.call x9661 "push"
                                  [|(DOMPointInit.t_to_js x9664)|])
                         | None -> ());
                        (match x9659 with
                         | Some x9663 ->
                             ignore
                               (Ojs.call x9661 "push"
                                  [|(DOMPointInit.t_to_js x9663)|])
                         | None -> ());
                        (match x9660 with
                         | Some x9662 ->
                             ignore
                               (Ojs.call x9661 "push"
                                  [|(DOMPointInit.t_to_js x9662)|])
                         | None -> ());
                        x9661))
    let (fromQuad : t -> ?other:DOMQuadInit.t -> unit -> DOMQuad.t) =
      fun (x9670 : t) ->
        fun ?other:(x9667 : DOMQuadInit.t option) ->
          fun () ->
            DOMQuad.t_of_js
              (let x9671 = t_to_js x9670 in
               Ojs.call (Ojs.get_prop_ascii x9671 "fromQuad") "apply"
                 [|x9671;((let x9668 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9667 with
                            | Some x9669 ->
                                ignore
                                  (Ojs.call x9668 "push"
                                     [|(DOMQuadInit.t_to_js x9669)|])
                            | None -> ());
                           x9668))|])
    let (fromRect : t -> ?other:DOMRectInit.t -> unit -> DOMQuad.t) =
      fun (x9675 : t) ->
        fun ?other:(x9672 : DOMRectInit.t option) ->
          fun () ->
            DOMQuad.t_of_js
              (let x9676 = t_to_js x9675 in
               Ojs.call (Ojs.get_prop_ascii x9676 "fromRect") "apply"
                 [|x9676;((let x9673 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9672 with
                            | Some x9674 ->
                                ignore
                                  (Ojs.call x9673 "push"
                                     [|(DOMRectInit.t_to_js x9674)|])
                            | None -> ());
                           x9673))|])
  end
 and
  DOMQuad:sig
            type t = [ `DOMQuad ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `DOMQuad ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem type tags = [ `DOMQuad ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_p1 : 'tags this -> DOMPoint.t
            val get_p2 : 'tags this -> DOMPoint.t
            val get_p3 : 'tags this -> DOMPoint.t
            val get_p4 : 'tags this -> DOMPoint.t
            val getBounds : 'tags this -> DOMRect.t
            val toJSON : 'tags this -> any
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              ?p1:DOMPointInit.t ->
                ?p2:DOMPointInit.t ->
                  ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t
            val fromQuad : ?other:DOMQuadInit.t -> unit -> t
            val fromRect : ?other:DOMRectInit.t -> unit -> t
          end =
  struct
    type t = [ `DOMQuad ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9678 : Ojs.t) -> t_of_js x9678
    and t_0_to_js : t_0 -> Ojs.t = fun (x9677 : t) -> t_to_js x9677
    type tags = [ `DOMQuad ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9681 : Ojs.t) -> intf_of_js __tags_of_js x9681
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9679 : __tags intf) -> intf_to_js __tags_to_js x9679
    let (get_p1 : 'tags this -> DOMPoint.t) =
      fun (x9683 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9683) "p1")
    let (get_p2 : 'tags this -> DOMPoint.t) =
      fun (x9685 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9685) "p2")
    let (get_p3 : 'tags this -> DOMPoint.t) =
      fun (x9687 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9687) "p3")
    let (get_p4 : 'tags this -> DOMPoint.t) =
      fun (x9689 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9689) "p4")
    let (getBounds : 'tags this -> DOMRect.t) =
      fun (x9691 : 'tags this) ->
        DOMRect.t_of_js
          (Ojs.call (this_to_js Obj.magic x9691) "getBounds" [||])
    let (toJSON : 'tags this -> any) =
      fun (x9693 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x9693) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMQuad")
             "prototype")
    let (create :
      ?p1:DOMPointInit.t ->
        ?p2:DOMPointInit.t ->
          ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t)
      =
      fun ?p1:(x9695 : DOMPointInit.t option) ->
        fun ?p2:(x9696 : DOMPointInit.t option) ->
          fun ?p3:(x9697 : DOMPointInit.t option) ->
            fun ?p4:(x9698 : DOMPointInit.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMQuad")
                     (let x9699 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x9695 with
                       | Some x9703 ->
                           ignore
                             (Ojs.call x9699 "push"
                                [|(DOMPointInit.t_to_js x9703)|])
                       | None -> ());
                      (match x9696 with
                       | Some x9702 ->
                           ignore
                             (Ojs.call x9699 "push"
                                [|(DOMPointInit.t_to_js x9702)|])
                       | None -> ());
                      (match x9697 with
                       | Some x9701 ->
                           ignore
                             (Ojs.call x9699 "push"
                                [|(DOMPointInit.t_to_js x9701)|])
                       | None -> ());
                      (match x9698 with
                       | Some x9700 ->
                           ignore
                             (Ojs.call x9699 "push"
                                [|(DOMPointInit.t_to_js x9700)|])
                       | None -> ());
                      x9699))
    let (fromQuad : ?other:DOMQuadInit.t -> unit -> t) =
      fun ?other:(x9704 : DOMQuadInit.t option) ->
        fun () ->
          t_of_js
            (let x9707 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x9707 "fromQuad") "apply"
               [|x9707;((let x9705 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x9704 with
                          | Some x9706 ->
                              ignore
                                (Ojs.call x9705 "push"
                                   [|(DOMQuadInit.t_to_js x9706)|])
                          | None -> ());
                         x9705))|])
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x9708 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x9711 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x9711 "fromRect") "apply"
               [|x9711;((let x9709 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x9708 with
                          | Some x9710 ->
                              ignore
                                (Ojs.call x9709 "push"
                                   [|(DOMRectInit.t_to_js x9710)|])
                          | None -> ());
                         x9709))|])
  end
module rec
  AnonymousInterface18:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMMatrix.t
                         val set_prototype : t -> DOMMatrix.t -> unit
                         val create :
                           t ->
                             ?init:float list or_string ->
                               unit -> DOMMatrix.t
                         val fromFloat32Array :
                           t -> array32:Float32Array.t_0 -> DOMMatrix.t
                         val fromFloat64Array :
                           t -> array64:Float64Array.t_0 -> DOMMatrix.t
                         val fromMatrix :
                           t -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9713 : Ojs.t) -> x9713
    and t_to_js : t -> Ojs.t = fun (x9712 : Ojs.t) -> x9712
    let (get_prototype : t -> DOMMatrix.t) =
      fun (x9714 : t) ->
        DOMMatrix.t_of_js (Ojs.get_prop_ascii (t_to_js x9714) "prototype")
    let (set_prototype : t -> DOMMatrix.t -> unit) =
      fun (x9715 : t) ->
        fun (x9716 : DOMMatrix.t) ->
          Ojs.set_prop_ascii (t_to_js x9715) "prototype"
            (DOMMatrix.t_to_js x9716)
    let (create : t -> ?init:float list or_string -> unit -> DOMMatrix.t) =
      fun (x9722 : t) ->
        fun ?init:(x9717 : float list or_string option) ->
          fun () ->
            DOMMatrix.t_of_js
              (Ojs.new_obj_arr (t_to_js x9722)
                 (let x9718 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x9717 with
                   | Some x9719 ->
                       ignore
                         (Ojs.call x9718 "push"
                            [|(or_string_to_js
                                 (fun (x9720 : float list) ->
                                    Ojs.list_to_js Ojs.float_to_js x9720)
                                 x9719)|])
                   | None -> ());
                  x9718))
    let (fromFloat32Array : t -> array32:Float32Array.t_0 -> DOMMatrix.t) =
      fun (x9724 : t) ->
        fun ~array32:(x9723 : Float32Array.t_0) ->
          DOMMatrix.t_of_js
            (Ojs.call (t_to_js x9724) "fromFloat32Array"
               [|(Float32Array.t_0_to_js x9723)|])
    let (fromFloat64Array : t -> array64:Float64Array.t_0 -> DOMMatrix.t) =
      fun (x9726 : t) ->
        fun ~array64:(x9725 : Float64Array.t_0) ->
          DOMMatrix.t_of_js
            (Ojs.call (t_to_js x9726) "fromFloat64Array"
               [|(Float64Array.t_0_to_js x9725)|])
    let (fromMatrix : t -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t) =
      fun (x9730 : t) ->
        fun ?other:(x9727 : DOMMatrixInit.t option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x9731 = t_to_js x9730 in
               Ojs.call (Ojs.get_prop_ascii x9731 "fromMatrix") "apply"
                 [|x9731;((let x9728 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9727 with
                            | Some x9729 ->
                                ignore
                                  (Ojs.call x9728 "push"
                                     [|(DOMMatrixInit.t_to_js x9729)|])
                            | None -> ());
                           x9728))|])
  end
 and
  AnonymousInterface19:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMMatrixReadOnly.t
                         val set_prototype : t -> DOMMatrixReadOnly.t -> unit
                         val create :
                           t ->
                             ?init:float list or_string ->
                               unit -> DOMMatrixReadOnly.t
                         val fromFloat32Array :
                           t ->
                             array32:Float32Array.t_0 -> DOMMatrixReadOnly.t
                         val fromFloat64Array :
                           t ->
                             array64:Float64Array.t_0 -> DOMMatrixReadOnly.t
                         val fromMatrix :
                           t ->
                             ?other:DOMMatrixInit.t ->
                               unit -> DOMMatrixReadOnly.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9733 : Ojs.t) -> x9733
    and t_to_js : t -> Ojs.t = fun (x9732 : Ojs.t) -> x9732
    let (get_prototype : t -> DOMMatrixReadOnly.t) =
      fun (x9734 : t) ->
        DOMMatrixReadOnly.t_of_js
          (Ojs.get_prop_ascii (t_to_js x9734) "prototype")
    let (set_prototype : t -> DOMMatrixReadOnly.t -> unit) =
      fun (x9735 : t) ->
        fun (x9736 : DOMMatrixReadOnly.t) ->
          Ojs.set_prop_ascii (t_to_js x9735) "prototype"
            (DOMMatrixReadOnly.t_to_js x9736)
    let (create :
      t -> ?init:float list or_string -> unit -> DOMMatrixReadOnly.t) =
      fun (x9742 : t) ->
        fun ?init:(x9737 : float list or_string option) ->
          fun () ->
            DOMMatrixReadOnly.t_of_js
              (Ojs.new_obj_arr (t_to_js x9742)
                 (let x9738 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x9737 with
                   | Some x9739 ->
                       ignore
                         (Ojs.call x9738 "push"
                            [|(or_string_to_js
                                 (fun (x9740 : float list) ->
                                    Ojs.list_to_js Ojs.float_to_js x9740)
                                 x9739)|])
                   | None -> ());
                  x9738))
    let (fromFloat32Array :
      t -> array32:Float32Array.t_0 -> DOMMatrixReadOnly.t) =
      fun (x9744 : t) ->
        fun ~array32:(x9743 : Float32Array.t_0) ->
          DOMMatrixReadOnly.t_of_js
            (Ojs.call (t_to_js x9744) "fromFloat32Array"
               [|(Float32Array.t_0_to_js x9743)|])
    let (fromFloat64Array :
      t -> array64:Float64Array.t_0 -> DOMMatrixReadOnly.t) =
      fun (x9746 : t) ->
        fun ~array64:(x9745 : Float64Array.t_0) ->
          DOMMatrixReadOnly.t_of_js
            (Ojs.call (t_to_js x9746) "fromFloat64Array"
               [|(Float64Array.t_0_to_js x9745)|])
    let (fromMatrix :
      t -> ?other:DOMMatrixInit.t -> unit -> DOMMatrixReadOnly.t) =
      fun (x9750 : t) ->
        fun ?other:(x9747 : DOMMatrixInit.t option) ->
          fun () ->
            DOMMatrixReadOnly.t_of_js
              (let x9751 = t_to_js x9750 in
               Ojs.call (Ojs.get_prop_ascii x9751 "fromMatrix") "apply"
                 [|x9751;((let x9748 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9747 with
                            | Some x9749 ->
                                ignore
                                  (Ojs.call x9748 "push"
                                     [|(DOMMatrixInit.t_to_js x9749)|])
                            | None -> ());
                           x9748))|])
  end and
       DOMMatrix:sig
                   type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `DOMMatrix ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_a : 'tags this -> float
                   val set_a : 'tags this -> float -> unit
                   val get_b : 'tags this -> float
                   val set_b : 'tags this -> float -> unit
                   val get_c : 'tags this -> float
                   val set_c : 'tags this -> float -> unit
                   val get_d : 'tags this -> float
                   val set_d : 'tags this -> float -> unit
                   val get_e : 'tags this -> float
                   val set_e : 'tags this -> float -> unit
                   val get_f : 'tags this -> float
                   val set_f : 'tags this -> float -> unit
                   val get_m11 : 'tags this -> float
                   val set_m11 : 'tags this -> float -> unit
                   val get_m12 : 'tags this -> float
                   val set_m12 : 'tags this -> float -> unit
                   val get_m13 : 'tags this -> float
                   val set_m13 : 'tags this -> float -> unit
                   val get_m14 : 'tags this -> float
                   val set_m14 : 'tags this -> float -> unit
                   val get_m21 : 'tags this -> float
                   val set_m21 : 'tags this -> float -> unit
                   val get_m22 : 'tags this -> float
                   val set_m22 : 'tags this -> float -> unit
                   val get_m23 : 'tags this -> float
                   val set_m23 : 'tags this -> float -> unit
                   val get_m24 : 'tags this -> float
                   val set_m24 : 'tags this -> float -> unit
                   val get_m31 : 'tags this -> float
                   val set_m31 : 'tags this -> float -> unit
                   val get_m32 : 'tags this -> float
                   val set_m32 : 'tags this -> float -> unit
                   val get_m33 : 'tags this -> float
                   val set_m33 : 'tags this -> float -> unit
                   val get_m34 : 'tags this -> float
                   val set_m34 : 'tags this -> float -> unit
                   val get_m41 : 'tags this -> float
                   val set_m41 : 'tags this -> float -> unit
                   val get_m42 : 'tags this -> float
                   val set_m42 : 'tags this -> float -> unit
                   val get_m43 : 'tags this -> float
                   val set_m43 : 'tags this -> float -> unit
                   val get_m44 : 'tags this -> float
                   val set_m44 : 'tags this -> float -> unit
                   val invertSelf : 'tags this -> t
                   val multiplySelf :
                     'tags this -> ?other:DOMMatrixInit.t -> unit -> t
                   val preMultiplySelf :
                     'tags this -> ?other:DOMMatrixInit.t -> unit -> t
                   val rotateAxisAngleSelf :
                     'tags this ->
                       ?x:float ->
                         ?y:float -> ?z:float -> ?angle:float -> unit -> t
                   val rotateFromVectorSelf :
                     'tags this -> ?x:float -> ?y:float -> unit -> t
                   val rotateSelf :
                     'tags this ->
                       ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t
                   val scale3dSelf :
                     'tags this ->
                       ?scale:float ->
                         ?originX:float ->
                           ?originY:float -> ?originZ:float -> unit -> t
                   val scaleSelf :
                     'tags this ->
                       ?scaleX:float ->
                         ?scaleY:float ->
                           ?scaleZ:float ->
                             ?originX:float ->
                               ?originY:float -> ?originZ:float -> unit -> t
                   val skewXSelf : 'tags this -> ?sx:float -> unit -> t
                   val skewYSelf : 'tags this -> ?sy:float -> unit -> t
                   val translateSelf :
                     'tags this ->
                       ?tx:float -> ?ty:float -> ?tz:float -> unit -> t
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : ?init:float list or_string -> unit -> t
                   val fromFloat32Array : Float32Array.t_0 -> t
                   val fromFloat64Array : Float64Array.t_0 -> t
                   val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
                 end =
       struct
         type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x9753 : Ojs.t) -> t_of_js x9753
         and t_0_to_js : t_0 -> Ojs.t = fun (x9752 : t) -> t_to_js x9752
         type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x9756 : Ojs.t) -> intf_of_js __tags_of_js x9756
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x9754 : __tags intf) -> intf_to_js __tags_to_js x9754
         let (get_a : 'tags this -> float) =
           fun (x9758 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9758) "a")
         let (set_a : 'tags this -> float -> unit) =
           fun (x9760 : 'tags this) ->
             fun (x9761 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9760) "a"
                 (Ojs.float_to_js x9761)
         let (get_b : 'tags this -> float) =
           fun (x9763 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9763) "b")
         let (set_b : 'tags this -> float -> unit) =
           fun (x9765 : 'tags this) ->
             fun (x9766 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9765) "b"
                 (Ojs.float_to_js x9766)
         let (get_c : 'tags this -> float) =
           fun (x9768 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9768) "c")
         let (set_c : 'tags this -> float -> unit) =
           fun (x9770 : 'tags this) ->
             fun (x9771 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9770) "c"
                 (Ojs.float_to_js x9771)
         let (get_d : 'tags this -> float) =
           fun (x9773 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9773) "d")
         let (set_d : 'tags this -> float -> unit) =
           fun (x9775 : 'tags this) ->
             fun (x9776 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9775) "d"
                 (Ojs.float_to_js x9776)
         let (get_e : 'tags this -> float) =
           fun (x9778 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9778) "e")
         let (set_e : 'tags this -> float -> unit) =
           fun (x9780 : 'tags this) ->
             fun (x9781 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9780) "e"
                 (Ojs.float_to_js x9781)
         let (get_f : 'tags this -> float) =
           fun (x9783 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9783) "f")
         let (set_f : 'tags this -> float -> unit) =
           fun (x9785 : 'tags this) ->
             fun (x9786 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9785) "f"
                 (Ojs.float_to_js x9786)
         let (get_m11 : 'tags this -> float) =
           fun (x9788 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9788) "m11")
         let (set_m11 : 'tags this -> float -> unit) =
           fun (x9790 : 'tags this) ->
             fun (x9791 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9790) "m11"
                 (Ojs.float_to_js x9791)
         let (get_m12 : 'tags this -> float) =
           fun (x9793 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9793) "m12")
         let (set_m12 : 'tags this -> float -> unit) =
           fun (x9795 : 'tags this) ->
             fun (x9796 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9795) "m12"
                 (Ojs.float_to_js x9796)
         let (get_m13 : 'tags this -> float) =
           fun (x9798 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9798) "m13")
         let (set_m13 : 'tags this -> float -> unit) =
           fun (x9800 : 'tags this) ->
             fun (x9801 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9800) "m13"
                 (Ojs.float_to_js x9801)
         let (get_m14 : 'tags this -> float) =
           fun (x9803 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9803) "m14")
         let (set_m14 : 'tags this -> float -> unit) =
           fun (x9805 : 'tags this) ->
             fun (x9806 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9805) "m14"
                 (Ojs.float_to_js x9806)
         let (get_m21 : 'tags this -> float) =
           fun (x9808 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9808) "m21")
         let (set_m21 : 'tags this -> float -> unit) =
           fun (x9810 : 'tags this) ->
             fun (x9811 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9810) "m21"
                 (Ojs.float_to_js x9811)
         let (get_m22 : 'tags this -> float) =
           fun (x9813 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9813) "m22")
         let (set_m22 : 'tags this -> float -> unit) =
           fun (x9815 : 'tags this) ->
             fun (x9816 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9815) "m22"
                 (Ojs.float_to_js x9816)
         let (get_m23 : 'tags this -> float) =
           fun (x9818 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9818) "m23")
         let (set_m23 : 'tags this -> float -> unit) =
           fun (x9820 : 'tags this) ->
             fun (x9821 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9820) "m23"
                 (Ojs.float_to_js x9821)
         let (get_m24 : 'tags this -> float) =
           fun (x9823 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9823) "m24")
         let (set_m24 : 'tags this -> float -> unit) =
           fun (x9825 : 'tags this) ->
             fun (x9826 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9825) "m24"
                 (Ojs.float_to_js x9826)
         let (get_m31 : 'tags this -> float) =
           fun (x9828 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9828) "m31")
         let (set_m31 : 'tags this -> float -> unit) =
           fun (x9830 : 'tags this) ->
             fun (x9831 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9830) "m31"
                 (Ojs.float_to_js x9831)
         let (get_m32 : 'tags this -> float) =
           fun (x9833 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9833) "m32")
         let (set_m32 : 'tags this -> float -> unit) =
           fun (x9835 : 'tags this) ->
             fun (x9836 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9835) "m32"
                 (Ojs.float_to_js x9836)
         let (get_m33 : 'tags this -> float) =
           fun (x9838 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9838) "m33")
         let (set_m33 : 'tags this -> float -> unit) =
           fun (x9840 : 'tags this) ->
             fun (x9841 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9840) "m33"
                 (Ojs.float_to_js x9841)
         let (get_m34 : 'tags this -> float) =
           fun (x9843 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9843) "m34")
         let (set_m34 : 'tags this -> float -> unit) =
           fun (x9845 : 'tags this) ->
             fun (x9846 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9845) "m34"
                 (Ojs.float_to_js x9846)
         let (get_m41 : 'tags this -> float) =
           fun (x9848 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9848) "m41")
         let (set_m41 : 'tags this -> float -> unit) =
           fun (x9850 : 'tags this) ->
             fun (x9851 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9850) "m41"
                 (Ojs.float_to_js x9851)
         let (get_m42 : 'tags this -> float) =
           fun (x9853 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9853) "m42")
         let (set_m42 : 'tags this -> float -> unit) =
           fun (x9855 : 'tags this) ->
             fun (x9856 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9855) "m42"
                 (Ojs.float_to_js x9856)
         let (get_m43 : 'tags this -> float) =
           fun (x9858 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9858) "m43")
         let (set_m43 : 'tags this -> float -> unit) =
           fun (x9860 : 'tags this) ->
             fun (x9861 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9860) "m43"
                 (Ojs.float_to_js x9861)
         let (get_m44 : 'tags this -> float) =
           fun (x9863 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9863) "m44")
         let (set_m44 : 'tags this -> float -> unit) =
           fun (x9865 : 'tags this) ->
             fun (x9866 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9865) "m44"
                 (Ojs.float_to_js x9866)
         let (invertSelf : 'tags this -> t) =
           fun (x9868 : 'tags this) ->
             t_of_js
               (Ojs.call (this_to_js Obj.magic x9868) "invertSelf" [||])
         let (multiplySelf :
           'tags this -> ?other:DOMMatrixInit.t -> unit -> t) =
           fun (x9873 : 'tags this) ->
             fun ?other:(x9870 : DOMMatrixInit.t option) ->
               fun () ->
                 t_of_js
                   (let x9875 = this_to_js Obj.magic x9873 in
                    Ojs.call (Ojs.get_prop_ascii x9875 "multiplySelf")
                      "apply"
                      [|x9875;((let x9871 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9870 with
                                 | Some x9872 ->
                                     ignore
                                       (Ojs.call x9871 "push"
                                          [|(DOMMatrixInit.t_to_js x9872)|])
                                 | None -> ());
                                x9871))|])
         let (preMultiplySelf :
           'tags this -> ?other:DOMMatrixInit.t -> unit -> t) =
           fun (x9879 : 'tags this) ->
             fun ?other:(x9876 : DOMMatrixInit.t option) ->
               fun () ->
                 t_of_js
                   (let x9881 = this_to_js Obj.magic x9879 in
                    Ojs.call (Ojs.get_prop_ascii x9881 "preMultiplySelf")
                      "apply"
                      [|x9881;((let x9877 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9876 with
                                 | Some x9878 ->
                                     ignore
                                       (Ojs.call x9877 "push"
                                          [|(DOMMatrixInit.t_to_js x9878)|])
                                 | None -> ());
                                x9877))|])
         let (rotateAxisAngleSelf :
           'tags this ->
             ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> t)
           =
           fun (x9891 : 'tags this) ->
             fun ?x:(x9882 : float option) ->
               fun ?y:(x9883 : float option) ->
                 fun ?z:(x9884 : float option) ->
                   fun ?angle:(x9885 : float option) ->
                     fun () ->
                       t_of_js
                         (let x9893 = this_to_js Obj.magic x9891 in
                          Ojs.call
                            (Ojs.get_prop_ascii x9893 "rotateAxisAngleSelf")
                            "apply"
                            [|x9893;((let x9886 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x9882 with
                                       | Some x9890 ->
                                           ignore
                                             (Ojs.call x9886 "push"
                                                [|(Ojs.float_to_js x9890)|])
                                       | None -> ());
                                      (match x9883 with
                                       | Some x9889 ->
                                           ignore
                                             (Ojs.call x9886 "push"
                                                [|(Ojs.float_to_js x9889)|])
                                       | None -> ());
                                      (match x9884 with
                                       | Some x9888 ->
                                           ignore
                                             (Ojs.call x9886 "push"
                                                [|(Ojs.float_to_js x9888)|])
                                       | None -> ());
                                      (match x9885 with
                                       | Some x9887 ->
                                           ignore
                                             (Ojs.call x9886 "push"
                                                [|(Ojs.float_to_js x9887)|])
                                       | None -> ());
                                      x9886))|])
         let (rotateFromVectorSelf :
           'tags this -> ?x:float -> ?y:float -> unit -> t) =
           fun (x9899 : 'tags this) ->
             fun ?x:(x9894 : float option) ->
               fun ?y:(x9895 : float option) ->
                 fun () ->
                   t_of_js
                     (let x9901 = this_to_js Obj.magic x9899 in
                      Ojs.call
                        (Ojs.get_prop_ascii x9901 "rotateFromVectorSelf")
                        "apply"
                        [|x9901;((let x9896 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x9894 with
                                   | Some x9898 ->
                                       ignore
                                         (Ojs.call x9896 "push"
                                            [|(Ojs.float_to_js x9898)|])
                                   | None -> ());
                                  (match x9895 with
                                   | Some x9897 ->
                                       ignore
                                         (Ojs.call x9896 "push"
                                            [|(Ojs.float_to_js x9897)|])
                                   | None -> ());
                                  x9896))|])
         let (rotateSelf :
           'tags this ->
             ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t)
           =
           fun (x9909 : 'tags this) ->
             fun ?rotX:(x9902 : float option) ->
               fun ?rotY:(x9903 : float option) ->
                 fun ?rotZ:(x9904 : float option) ->
                   fun () ->
                     t_of_js
                       (let x9911 = this_to_js Obj.magic x9909 in
                        Ojs.call (Ojs.get_prop_ascii x9911 "rotateSelf")
                          "apply"
                          [|x9911;((let x9905 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x9902 with
                                     | Some x9908 ->
                                         ignore
                                           (Ojs.call x9905 "push"
                                              [|(Ojs.float_to_js x9908)|])
                                     | None -> ());
                                    (match x9903 with
                                     | Some x9907 ->
                                         ignore
                                           (Ojs.call x9905 "push"
                                              [|(Ojs.float_to_js x9907)|])
                                     | None -> ());
                                    (match x9904 with
                                     | Some x9906 ->
                                         ignore
                                           (Ojs.call x9905 "push"
                                              [|(Ojs.float_to_js x9906)|])
                                     | None -> ());
                                    x9905))|])
         let (scale3dSelf :
           'tags this ->
             ?scale:float ->
               ?originX:float ->
                 ?originY:float -> ?originZ:float -> unit -> t)
           =
           fun (x9921 : 'tags this) ->
             fun ?scale:(x9912 : float option) ->
               fun ?originX:(x9913 : float option) ->
                 fun ?originY:(x9914 : float option) ->
                   fun ?originZ:(x9915 : float option) ->
                     fun () ->
                       t_of_js
                         (let x9923 = this_to_js Obj.magic x9921 in
                          Ojs.call (Ojs.get_prop_ascii x9923 "scale3dSelf")
                            "apply"
                            [|x9923;((let x9916 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x9912 with
                                       | Some x9920 ->
                                           ignore
                                             (Ojs.call x9916 "push"
                                                [|(Ojs.float_to_js x9920)|])
                                       | None -> ());
                                      (match x9913 with
                                       | Some x9919 ->
                                           ignore
                                             (Ojs.call x9916 "push"
                                                [|(Ojs.float_to_js x9919)|])
                                       | None -> ());
                                      (match x9914 with
                                       | Some x9918 ->
                                           ignore
                                             (Ojs.call x9916 "push"
                                                [|(Ojs.float_to_js x9918)|])
                                       | None -> ());
                                      (match x9915 with
                                       | Some x9917 ->
                                           ignore
                                             (Ojs.call x9916 "push"
                                                [|(Ojs.float_to_js x9917)|])
                                       | None -> ());
                                      x9916))|])
         let (scaleSelf :
           'tags this ->
             ?scaleX:float ->
               ?scaleY:float ->
                 ?scaleZ:float ->
                   ?originX:float ->
                     ?originY:float -> ?originZ:float -> unit -> t)
           =
           fun (x9937 : 'tags this) ->
             fun ?scaleX:(x9924 : float option) ->
               fun ?scaleY:(x9925 : float option) ->
                 fun ?scaleZ:(x9926 : float option) ->
                   fun ?originX:(x9927 : float option) ->
                     fun ?originY:(x9928 : float option) ->
                       fun ?originZ:(x9929 : float option) ->
                         fun () ->
                           t_of_js
                             (let x9939 = this_to_js Obj.magic x9937 in
                              Ojs.call (Ojs.get_prop_ascii x9939 "scaleSelf")
                                "apply"
                                [|x9939;((let x9930 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x9924 with
                                           | Some x9936 ->
                                               ignore
                                                 (Ojs.call x9930 "push"
                                                    [|(Ojs.float_to_js x9936)|])
                                           | None -> ());
                                          (match x9925 with
                                           | Some x9935 ->
                                               ignore
                                                 (Ojs.call x9930 "push"
                                                    [|(Ojs.float_to_js x9935)|])
                                           | None -> ());
                                          (match x9926 with
                                           | Some x9934 ->
                                               ignore
                                                 (Ojs.call x9930 "push"
                                                    [|(Ojs.float_to_js x9934)|])
                                           | None -> ());
                                          (match x9927 with
                                           | Some x9933 ->
                                               ignore
                                                 (Ojs.call x9930 "push"
                                                    [|(Ojs.float_to_js x9933)|])
                                           | None -> ());
                                          (match x9928 with
                                           | Some x9932 ->
                                               ignore
                                                 (Ojs.call x9930 "push"
                                                    [|(Ojs.float_to_js x9932)|])
                                           | None -> ());
                                          (match x9929 with
                                           | Some x9931 ->
                                               ignore
                                                 (Ojs.call x9930 "push"
                                                    [|(Ojs.float_to_js x9931)|])
                                           | None -> ());
                                          x9930))|])
         let (skewXSelf : 'tags this -> ?sx:float -> unit -> t) =
           fun (x9943 : 'tags this) ->
             fun ?sx:(x9940 : float option) ->
               fun () ->
                 t_of_js
                   (let x9945 = this_to_js Obj.magic x9943 in
                    Ojs.call (Ojs.get_prop_ascii x9945 "skewXSelf") "apply"
                      [|x9945;((let x9941 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9940 with
                                 | Some x9942 ->
                                     ignore
                                       (Ojs.call x9941 "push"
                                          [|(Ojs.float_to_js x9942)|])
                                 | None -> ());
                                x9941))|])
         let (skewYSelf : 'tags this -> ?sy:float -> unit -> t) =
           fun (x9949 : 'tags this) ->
             fun ?sy:(x9946 : float option) ->
               fun () ->
                 t_of_js
                   (let x9951 = this_to_js Obj.magic x9949 in
                    Ojs.call (Ojs.get_prop_ascii x9951 "skewYSelf") "apply"
                      [|x9951;((let x9947 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9946 with
                                 | Some x9948 ->
                                     ignore
                                       (Ojs.call x9947 "push"
                                          [|(Ojs.float_to_js x9948)|])
                                 | None -> ());
                                x9947))|])
         let (translateSelf :
           'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> t) =
           fun (x9959 : 'tags this) ->
             fun ?tx:(x9952 : float option) ->
               fun ?ty:(x9953 : float option) ->
                 fun ?tz:(x9954 : float option) ->
                   fun () ->
                     t_of_js
                       (let x9961 = this_to_js Obj.magic x9959 in
                        Ojs.call (Ojs.get_prop_ascii x9961 "translateSelf")
                          "apply"
                          [|x9961;((let x9955 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x9952 with
                                     | Some x9958 ->
                                         ignore
                                           (Ojs.call x9955 "push"
                                              [|(Ojs.float_to_js x9958)|])
                                     | None -> ());
                                    (match x9953 with
                                     | Some x9957 ->
                                         ignore
                                           (Ojs.call x9955 "push"
                                              [|(Ojs.float_to_js x9957)|])
                                     | None -> ());
                                    (match x9954 with
                                     | Some x9956 ->
                                         ignore
                                           (Ojs.call x9955 "push"
                                              [|(Ojs.float_to_js x9956)|])
                                     | None -> ());
                                    x9955))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "DOMMatrix") "prototype")
         let (create : ?init:float list or_string -> unit -> t) =
           fun ?init:(x9962 : float list or_string option) ->
             fun () ->
               t_of_js
                 (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
                    (let x9963 =
                       Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                         [||] in
                     (match x9962 with
                      | Some x9964 ->
                          ignore
                            (Ojs.call x9963 "push"
                               [|(or_string_to_js
                                    (fun (x9965 : float list) ->
                                       Ojs.list_to_js Ojs.float_to_js x9965)
                                    x9964)|])
                      | None -> ());
                     x9963))
         let (fromFloat32Array : Float32Array.t_0 -> t) =
           fun (x9967 : Float32Array.t_0) ->
             t_of_js
               (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
                  "fromFloat32Array" [|(Float32Array.t_0_to_js x9967)|])
         let (fromFloat64Array : Float64Array.t_0 -> t) =
           fun (x9968 : Float64Array.t_0) ->
             t_of_js
               (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
                  "fromFloat64Array" [|(Float64Array.t_0_to_js x9968)|])
         let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
           fun ?other:(x9969 : DOMMatrixInit.t option) ->
             fun () ->
               t_of_js
                 (let x9972 = Ojs.get_prop_ascii Ojs.global "DOMMatrix" in
                  Ojs.call (Ojs.get_prop_ascii x9972 "fromMatrix") "apply"
                    [|x9972;((let x9970 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x9969 with
                               | Some x9971 ->
                                   ignore
                                     (Ojs.call x9970 "push"
                                        [|(DOMMatrixInit.t_to_js x9971)|])
                               | None -> ());
                              x9970))|])
       end and
            DOMMatrixReadOnly:sig
                                type t = [ `DOMMatrixReadOnly ] intf
                                type t_0 = t
                                [@@@js.stop ]
                                type tags = [ `DOMMatrixReadOnly ]
                                type tags_0 = tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type tags = [ `DOMMatrixReadOnly ]
                                  type tags_0 = tags]
                                type 'tags this =
                                  'tags intf constraint 'tags =
                                              [> `DOMMatrixReadOnly ]
                                val t_to_js : t -> Ojs.t
                                val t_of_js : Ojs.t -> t
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val get_a : 'tags this -> float
                                val get_b : 'tags this -> float
                                val get_c : 'tags this -> float
                                val get_d : 'tags this -> float
                                val get_e : 'tags this -> float
                                val get_f : 'tags this -> float
                                val get_is2D : 'tags this -> bool
                                val get_isIdentity : 'tags this -> bool
                                val get_m11 : 'tags this -> float
                                val get_m12 : 'tags this -> float
                                val get_m13 : 'tags this -> float
                                val get_m14 : 'tags this -> float
                                val get_m21 : 'tags this -> float
                                val get_m22 : 'tags this -> float
                                val get_m23 : 'tags this -> float
                                val get_m24 : 'tags this -> float
                                val get_m31 : 'tags this -> float
                                val get_m32 : 'tags this -> float
                                val get_m33 : 'tags this -> float
                                val get_m34 : 'tags this -> float
                                val get_m41 : 'tags this -> float
                                val get_m42 : 'tags this -> float
                                val get_m43 : 'tags this -> float
                                val get_m44 : 'tags this -> float
                                val flipX : 'tags this -> DOMMatrix.t
                                val flipY : 'tags this -> DOMMatrix.t
                                val inverse : 'tags this -> DOMMatrix.t
                                val multiply :
                                  'tags this ->
                                    ?other:DOMMatrixInit.t ->
                                      unit -> DOMMatrix.t
                                val rotate :
                                  'tags this ->
                                    ?rotX:float ->
                                      ?rotY:float ->
                                        ?rotZ:float -> unit -> DOMMatrix.t
                                val rotateAxisAngle :
                                  'tags this ->
                                    ?x:float ->
                                      ?y:float ->
                                        ?z:float ->
                                          ?angle:float -> unit -> DOMMatrix.t
                                val rotateFromVector :
                                  'tags this ->
                                    ?x:float ->
                                      ?y:float -> unit -> DOMMatrix.t
                                val scale :
                                  'tags this ->
                                    ?scaleX:float ->
                                      ?scaleY:float ->
                                        ?scaleZ:float ->
                                          ?originX:float ->
                                            ?originY:float ->
                                              ?originZ:float ->
                                                unit -> DOMMatrix.t
                                val scale3d :
                                  'tags this ->
                                    ?scale:float ->
                                      ?originX:float ->
                                        ?originY:float ->
                                          ?originZ:float ->
                                            unit -> DOMMatrix.t
                                val scaleNonUniform :
                                  'tags this ->
                                    ?scaleX:float ->
                                      ?scaleY:float -> unit -> DOMMatrix.t
                                val skewX :
                                  'tags this ->
                                    ?sx:float -> unit -> DOMMatrix.t
                                val skewY :
                                  'tags this ->
                                    ?sy:float -> unit -> DOMMatrix.t
                                val toFloat32Array :
                                  'tags this -> Float32Array.t_0
                                val toFloat64Array :
                                  'tags this -> Float64Array.t_0
                                val toJSON : 'tags this -> any
                                val transformPoint :
                                  'tags this ->
                                    ?point:DOMPointInit.t ->
                                      unit -> DOMPoint.t
                                val translate :
                                  'tags this ->
                                    ?tx:float ->
                                      ?ty:float ->
                                        ?tz:float -> unit -> DOMMatrix.t
                                val cast_from : 'tags this -> t
                                val prototype : unit -> t
                                val create :
                                  ?init:float list or_string -> unit -> t
                                val fromFloat32Array : Float32Array.t_0 -> t
                                val fromFloat64Array : Float64Array.t_0 -> t
                                val fromMatrix :
                                  ?other:DOMMatrixInit.t -> unit -> t
                              end =
            struct
              type t = [ `DOMMatrixReadOnly ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x9974 : Ojs.t) -> t_of_js x9974
              and t_0_to_js : t_0 -> Ojs.t = fun (x9973 : t) -> t_to_js x9973
              type tags = [ `DOMMatrixReadOnly ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x9977 : Ojs.t) -> intf_of_js __tags_of_js x9977
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x9975 : __tags intf) -> intf_to_js __tags_to_js x9975
              let (get_a : 'tags this -> float) =
                fun (x9979 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9979) "a")
              let (get_b : 'tags this -> float) =
                fun (x9981 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9981) "b")
              let (get_c : 'tags this -> float) =
                fun (x9983 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9983) "c")
              let (get_d : 'tags this -> float) =
                fun (x9985 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9985) "d")
              let (get_e : 'tags this -> float) =
                fun (x9987 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9987) "e")
              let (get_f : 'tags this -> float) =
                fun (x9989 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9989) "f")
              let (get_is2D : 'tags this -> bool) =
                fun (x9991 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9991) "is2D")
              let (get_isIdentity : 'tags this -> bool) =
                fun (x9993 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9993)
                       "isIdentity")
              let (get_m11 : 'tags this -> float) =
                fun (x9995 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9995) "m11")
              let (get_m12 : 'tags this -> float) =
                fun (x9997 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9997) "m12")
              let (get_m13 : 'tags this -> float) =
                fun (x9999 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9999) "m13")
              let (get_m14 : 'tags this -> float) =
                fun (x10001 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10001) "m14")
              let (get_m21 : 'tags this -> float) =
                fun (x10003 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10003) "m21")
              let (get_m22 : 'tags this -> float) =
                fun (x10005 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10005) "m22")
              let (get_m23 : 'tags this -> float) =
                fun (x10007 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10007) "m23")
              let (get_m24 : 'tags this -> float) =
                fun (x10009 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10009) "m24")
              let (get_m31 : 'tags this -> float) =
                fun (x10011 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10011) "m31")
              let (get_m32 : 'tags this -> float) =
                fun (x10013 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10013) "m32")
              let (get_m33 : 'tags this -> float) =
                fun (x10015 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10015) "m33")
              let (get_m34 : 'tags this -> float) =
                fun (x10017 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10017) "m34")
              let (get_m41 : 'tags this -> float) =
                fun (x10019 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10019) "m41")
              let (get_m42 : 'tags this -> float) =
                fun (x10021 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10021) "m42")
              let (get_m43 : 'tags this -> float) =
                fun (x10023 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10023) "m43")
              let (get_m44 : 'tags this -> float) =
                fun (x10025 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10025) "m44")
              let (flipX : 'tags this -> DOMMatrix.t) =
                fun (x10027 : 'tags this) ->
                  DOMMatrix.t_of_js
                    (Ojs.call (this_to_js Obj.magic x10027) "flipX" [||])
              let (flipY : 'tags this -> DOMMatrix.t) =
                fun (x10029 : 'tags this) ->
                  DOMMatrix.t_of_js
                    (Ojs.call (this_to_js Obj.magic x10029) "flipY" [||])
              let (inverse : 'tags this -> DOMMatrix.t) =
                fun (x10031 : 'tags this) ->
                  DOMMatrix.t_of_js
                    (Ojs.call (this_to_js Obj.magic x10031) "inverse" [||])
              let (multiply :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t)
                =
                fun (x10036 : 'tags this) ->
                  fun ?other:(x10033 : DOMMatrixInit.t option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x10038 = this_to_js Obj.magic x10036 in
                         Ojs.call (Ojs.get_prop_ascii x10038 "multiply")
                           "apply"
                           [|x10038;((let x10034 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x10033 with
                                       | Some x10035 ->
                                           ignore
                                             (Ojs.call x10034 "push"
                                                [|(DOMMatrixInit.t_to_js
                                                     x10035)|])
                                       | None -> ());
                                      x10034))|])
              let (rotate :
                'tags this ->
                  ?rotX:float ->
                    ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t)
                =
                fun (x10046 : 'tags this) ->
                  fun ?rotX:(x10039 : float option) ->
                    fun ?rotY:(x10040 : float option) ->
                      fun ?rotZ:(x10041 : float option) ->
                        fun () ->
                          DOMMatrix.t_of_js
                            (let x10048 = this_to_js Obj.magic x10046 in
                             Ojs.call (Ojs.get_prop_ascii x10048 "rotate")
                               "apply"
                               [|x10048;((let x10042 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x10039 with
                                           | Some x10045 ->
                                               ignore
                                                 (Ojs.call x10042 "push"
                                                    [|(Ojs.float_to_js x10045)|])
                                           | None -> ());
                                          (match x10040 with
                                           | Some x10044 ->
                                               ignore
                                                 (Ojs.call x10042 "push"
                                                    [|(Ojs.float_to_js x10044)|])
                                           | None -> ());
                                          (match x10041 with
                                           | Some x10043 ->
                                               ignore
                                                 (Ojs.call x10042 "push"
                                                    [|(Ojs.float_to_js x10043)|])
                                           | None -> ());
                                          x10042))|])
              let (rotateAxisAngle :
                'tags this ->
                  ?x:float ->
                    ?y:float ->
                      ?z:float -> ?angle:float -> unit -> DOMMatrix.t)
                =
                fun (x10058 : 'tags this) ->
                  fun ?x:(x10049 : float option) ->
                    fun ?y:(x10050 : float option) ->
                      fun ?z:(x10051 : float option) ->
                        fun ?angle:(x10052 : float option) ->
                          fun () ->
                            DOMMatrix.t_of_js
                              (let x10060 = this_to_js Obj.magic x10058 in
                               Ojs.call
                                 (Ojs.get_prop_ascii x10060 "rotateAxisAngle")
                                 "apply"
                                 [|x10060;((let x10053 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x10049 with
                                             | Some x10057 ->
                                                 ignore
                                                   (Ojs.call x10053 "push"
                                                      [|(Ojs.float_to_js
                                                           x10057)|])
                                             | None -> ());
                                            (match x10050 with
                                             | Some x10056 ->
                                                 ignore
                                                   (Ojs.call x10053 "push"
                                                      [|(Ojs.float_to_js
                                                           x10056)|])
                                             | None -> ());
                                            (match x10051 with
                                             | Some x10055 ->
                                                 ignore
                                                   (Ojs.call x10053 "push"
                                                      [|(Ojs.float_to_js
                                                           x10055)|])
                                             | None -> ());
                                            (match x10052 with
                                             | Some x10054 ->
                                                 ignore
                                                   (Ojs.call x10053 "push"
                                                      [|(Ojs.float_to_js
                                                           x10054)|])
                                             | None -> ());
                                            x10053))|])
              let (rotateFromVector :
                'tags this -> ?x:float -> ?y:float -> unit -> DOMMatrix.t) =
                fun (x10066 : 'tags this) ->
                  fun ?x:(x10061 : float option) ->
                    fun ?y:(x10062 : float option) ->
                      fun () ->
                        DOMMatrix.t_of_js
                          (let x10068 = this_to_js Obj.magic x10066 in
                           Ojs.call
                             (Ojs.get_prop_ascii x10068 "rotateFromVector")
                             "apply"
                             [|x10068;((let x10063 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        (match x10061 with
                                         | Some x10065 ->
                                             ignore
                                               (Ojs.call x10063 "push"
                                                  [|(Ojs.float_to_js x10065)|])
                                         | None -> ());
                                        (match x10062 with
                                         | Some x10064 ->
                                             ignore
                                               (Ojs.call x10063 "push"
                                                  [|(Ojs.float_to_js x10064)|])
                                         | None -> ());
                                        x10063))|])
              let (scale :
                'tags this ->
                  ?scaleX:float ->
                    ?scaleY:float ->
                      ?scaleZ:float ->
                        ?originX:float ->
                          ?originY:float ->
                            ?originZ:float -> unit -> DOMMatrix.t)
                =
                fun (x10082 : 'tags this) ->
                  fun ?scaleX:(x10069 : float option) ->
                    fun ?scaleY:(x10070 : float option) ->
                      fun ?scaleZ:(x10071 : float option) ->
                        fun ?originX:(x10072 : float option) ->
                          fun ?originY:(x10073 : float option) ->
                            fun ?originZ:(x10074 : float option) ->
                              fun () ->
                                DOMMatrix.t_of_js
                                  (let x10084 = this_to_js Obj.magic x10082 in
                                   Ojs.call
                                     (Ojs.get_prop_ascii x10084 "scale")
                                     "apply"
                                     [|x10084;((let x10075 =
                                                  Ojs.new_obj
                                                    (Ojs.get_prop_ascii
                                                       Ojs.global "Array")
                                                    [||] in
                                                (match x10069 with
                                                 | Some x10081 ->
                                                     ignore
                                                       (Ojs.call x10075
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10081)|])
                                                 | None -> ());
                                                (match x10070 with
                                                 | Some x10080 ->
                                                     ignore
                                                       (Ojs.call x10075
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10080)|])
                                                 | None -> ());
                                                (match x10071 with
                                                 | Some x10079 ->
                                                     ignore
                                                       (Ojs.call x10075
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10079)|])
                                                 | None -> ());
                                                (match x10072 with
                                                 | Some x10078 ->
                                                     ignore
                                                       (Ojs.call x10075
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10078)|])
                                                 | None -> ());
                                                (match x10073 with
                                                 | Some x10077 ->
                                                     ignore
                                                       (Ojs.call x10075
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10077)|])
                                                 | None -> ());
                                                (match x10074 with
                                                 | Some x10076 ->
                                                     ignore
                                                       (Ojs.call x10075
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10076)|])
                                                 | None -> ());
                                                x10075))|])
              let (scale3d :
                'tags this ->
                  ?scale:float ->
                    ?originX:float ->
                      ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
                =
                fun (x10094 : 'tags this) ->
                  fun ?scale:(x10085 : float option) ->
                    fun ?originX:(x10086 : float option) ->
                      fun ?originY:(x10087 : float option) ->
                        fun ?originZ:(x10088 : float option) ->
                          fun () ->
                            DOMMatrix.t_of_js
                              (let x10096 = this_to_js Obj.magic x10094 in
                               Ojs.call (Ojs.get_prop_ascii x10096 "scale3d")
                                 "apply"
                                 [|x10096;((let x10089 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x10085 with
                                             | Some x10093 ->
                                                 ignore
                                                   (Ojs.call x10089 "push"
                                                      [|(Ojs.float_to_js
                                                           x10093)|])
                                             | None -> ());
                                            (match x10086 with
                                             | Some x10092 ->
                                                 ignore
                                                   (Ojs.call x10089 "push"
                                                      [|(Ojs.float_to_js
                                                           x10092)|])
                                             | None -> ());
                                            (match x10087 with
                                             | Some x10091 ->
                                                 ignore
                                                   (Ojs.call x10089 "push"
                                                      [|(Ojs.float_to_js
                                                           x10091)|])
                                             | None -> ());
                                            (match x10088 with
                                             | Some x10090 ->
                                                 ignore
                                                   (Ojs.call x10089 "push"
                                                      [|(Ojs.float_to_js
                                                           x10090)|])
                                             | None -> ());
                                            x10089))|])
              let (scaleNonUniform :
                'tags this ->
                  ?scaleX:float -> ?scaleY:float -> unit -> DOMMatrix.t)
                =
                fun (x10102 : 'tags this) ->
                  fun ?scaleX:(x10097 : float option) ->
                    fun ?scaleY:(x10098 : float option) ->
                      fun () ->
                        DOMMatrix.t_of_js
                          (let x10104 = this_to_js Obj.magic x10102 in
                           Ojs.call
                             (Ojs.get_prop_ascii x10104 "scaleNonUniform")
                             "apply"
                             [|x10104;((let x10099 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        (match x10097 with
                                         | Some x10101 ->
                                             ignore
                                               (Ojs.call x10099 "push"
                                                  [|(Ojs.float_to_js x10101)|])
                                         | None -> ());
                                        (match x10098 with
                                         | Some x10100 ->
                                             ignore
                                               (Ojs.call x10099 "push"
                                                  [|(Ojs.float_to_js x10100)|])
                                         | None -> ());
                                        x10099))|])
              let (skewX : 'tags this -> ?sx:float -> unit -> DOMMatrix.t) =
                fun (x10108 : 'tags this) ->
                  fun ?sx:(x10105 : float option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x10110 = this_to_js Obj.magic x10108 in
                         Ojs.call (Ojs.get_prop_ascii x10110 "skewX") "apply"
                           [|x10110;((let x10106 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x10105 with
                                       | Some x10107 ->
                                           ignore
                                             (Ojs.call x10106 "push"
                                                [|(Ojs.float_to_js x10107)|])
                                       | None -> ());
                                      x10106))|])
              let (skewY : 'tags this -> ?sy:float -> unit -> DOMMatrix.t) =
                fun (x10114 : 'tags this) ->
                  fun ?sy:(x10111 : float option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x10116 = this_to_js Obj.magic x10114 in
                         Ojs.call (Ojs.get_prop_ascii x10116 "skewY") "apply"
                           [|x10116;((let x10112 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x10111 with
                                       | Some x10113 ->
                                           ignore
                                             (Ojs.call x10112 "push"
                                                [|(Ojs.float_to_js x10113)|])
                                       | None -> ());
                                      x10112))|])
              let (toFloat32Array : 'tags this -> Float32Array.t_0) =
                fun (x10117 : 'tags this) ->
                  Float32Array.t_0_of_js
                    (Ojs.call (this_to_js Obj.magic x10117) "toFloat32Array"
                       [||])
              let (toFloat64Array : 'tags this -> Float64Array.t_0) =
                fun (x10119 : 'tags this) ->
                  Float64Array.t_0_of_js
                    (Ojs.call (this_to_js Obj.magic x10119) "toFloat64Array"
                       [||])
              let (toJSON : 'tags this -> any) =
                fun (x10121 : 'tags this) ->
                  any_of_js
                    (Ojs.call (this_to_js Obj.magic x10121) "toJSON" [||])
              let (transformPoint :
                'tags this -> ?point:DOMPointInit.t -> unit -> DOMPoint.t) =
                fun (x10126 : 'tags this) ->
                  fun ?point:(x10123 : DOMPointInit.t option) ->
                    fun () ->
                      DOMPoint.t_of_js
                        (let x10128 = this_to_js Obj.magic x10126 in
                         Ojs.call
                           (Ojs.get_prop_ascii x10128 "transformPoint")
                           "apply"
                           [|x10128;((let x10124 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x10123 with
                                       | Some x10125 ->
                                           ignore
                                             (Ojs.call x10124 "push"
                                                [|(DOMPointInit.t_to_js
                                                     x10125)|])
                                       | None -> ());
                                      x10124))|])
              let (translate :
                'tags this ->
                  ?tx:float -> ?ty:float -> ?tz:float -> unit -> DOMMatrix.t)
                =
                fun (x10136 : 'tags this) ->
                  fun ?tx:(x10129 : float option) ->
                    fun ?ty:(x10130 : float option) ->
                      fun ?tz:(x10131 : float option) ->
                        fun () ->
                          DOMMatrix.t_of_js
                            (let x10138 = this_to_js Obj.magic x10136 in
                             Ojs.call (Ojs.get_prop_ascii x10138 "translate")
                               "apply"
                               [|x10138;((let x10132 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x10129 with
                                           | Some x10135 ->
                                               ignore
                                                 (Ojs.call x10132 "push"
                                                    [|(Ojs.float_to_js x10135)|])
                                           | None -> ());
                                          (match x10130 with
                                           | Some x10134 ->
                                               ignore
                                                 (Ojs.call x10132 "push"
                                                    [|(Ojs.float_to_js x10134)|])
                                           | None -> ());
                                          (match x10131 with
                                           | Some x10133 ->
                                               ignore
                                                 (Ojs.call x10132 "push"
                                                    [|(Ojs.float_to_js x10133)|])
                                           | None -> ());
                                          x10132))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
                       "prototype")
              let (create : ?init:float list or_string -> unit -> t) =
                fun ?init:(x10139 : float list or_string option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
                         (let x10140 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x10139 with
                           | Some x10141 ->
                               ignore
                                 (Ojs.call x10140 "push"
                                    [|(or_string_to_js
                                         (fun (x10142 : float list) ->
                                            Ojs.list_to_js Ojs.float_to_js
                                              x10142) x10141)|])
                           | None -> ());
                          x10140))
              let (fromFloat32Array : Float32Array.t_0 -> t) =
                fun (x10144 : Float32Array.t_0) ->
                  t_of_js
                    (Ojs.call
                       (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
                       "fromFloat32Array" [|(Float32Array.t_0_to_js x10144)|])
              let (fromFloat64Array : Float64Array.t_0 -> t) =
                fun (x10145 : Float64Array.t_0) ->
                  t_of_js
                    (Ojs.call
                       (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
                       "fromFloat64Array" [|(Float64Array.t_0_to_js x10145)|])
              let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
                fun ?other:(x10146 : DOMMatrixInit.t option) ->
                  fun () ->
                    t_of_js
                      (let x10149 =
                         Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly" in
                       Ojs.call (Ojs.get_prop_ascii x10149 "fromMatrix")
                         "apply"
                         [|x10149;((let x10147 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x10146 with
                                     | Some x10148 ->
                                         ignore
                                           (Ojs.call x10147 "push"
                                              [|(DOMMatrixInit.t_to_js x10148)|])
                                     | None -> ());
                                    x10147))|])
            end
module CustomEventInit =
  struct
    type 'T t = [ `CustomEventInit of 'T  | `EventInit ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x10152 : Ojs.t) -> t_of_js __T_of_js x10152
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x10150 : __T t) -> t_to_js __T_to_js x10150
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10156 : Ojs.t) -> t_of_js any_of_js x10156
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10154 : any t) -> t_to_js any_to_js x10154
    type 'T tags = [ `CustomEventInit of 'T  | `EventInit ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x10160 : Ojs.t) -> intf_of_js __tags_of_js x10160
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x10158 : __tags intf) -> intf_to_js __tags_to_js x10158
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x10162 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x10162)
             "detail")
    let (set_detail : ('tags, 'T) this -> 'T -> unit) =
      fun (x10165 : ('tags, 'T) this) ->
        fun (x10166 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x10165) "detail"
            (Obj.magic x10166)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface16:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> CustomEvent.t_0
                         val set_prototype : t -> CustomEvent.t_0 -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:'T CustomEventInit.t ->
                                 unit -> 'T CustomEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10170 : Ojs.t) -> x10170
    and t_to_js : t -> Ojs.t = fun (x10169 : Ojs.t) -> x10169
    let (get_prototype : t -> CustomEvent.t_0) =
      fun (x10171 : t) ->
        CustomEvent.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x10171) "prototype")
    let (set_prototype : t -> CustomEvent.t_0 -> unit) =
      fun (x10172 : t) ->
        fun (x10173 : CustomEvent.t_0) ->
          Ojs.set_prop_ascii (t_to_js x10172) "prototype"
            (CustomEvent.t_0_to_js x10173)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:'T CustomEventInit.t -> unit -> 'T CustomEvent.t)
      =
      fun (x10179 : t) ->
        fun ~type_:(x10174 : string) ->
          fun ?eventInitDict:(x10175 : 'T CustomEventInit.t option) ->
            fun () ->
              CustomEvent.t_of_js Obj.magic
                (Ojs.new_obj_arr (t_to_js x10179)
                   (let x10176 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x10176 "push" [|(Ojs.string_to_js x10174)|]);
                    (match x10175 with
                     | Some x10177 ->
                         ignore
                           (Ojs.call x10176 "push"
                              [|(CustomEventInit.t_to_js Obj.magic x10177)|])
                     | None -> ());
                    x10176))
  end
 and
  CustomEvent:sig
                type 'T t = [ `CustomEvent of 'T  | `Event ] intf
                type 'T t_1 = 'T t
                type t_0 = any t
                [@@@js.stop ]
                type 'T tags = [ `CustomEvent of 'T  | `Event ]
                type 'T tags_1 = 'T tags
                type tags_0 = any tags
                [@@@js.start ]
                [@@@js.implem
                  type 'T tags = [ `CustomEvent of 'T  | `Event ]
                  type 'T tags_1 = 'T tags
                  type tags_0 = any tags]
                type ('tags, 'T) this =
                  'tags intf constraint 'tags = [> `CustomEvent of 'T ]
                val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_detail : ('tags, 'T) this -> 'T
                val initCustomEvent :
                  ('tags, 'T) this ->
                    type_:string ->
                      ?bubbles:bool ->
                        ?cancelable:bool -> ?detail:'T -> unit -> unit
                val cast_from : ('tags, 'T) this -> 'T t
                val prototype : unit -> t_0
                val create :
                  type_:string ->
                    ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t
              end =
  struct
    type 'T t = [ `CustomEvent of 'T  | `Event ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x10183 : Ojs.t) -> t_of_js __T_of_js x10183
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x10181 : __T t) -> t_to_js __T_to_js x10181
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10187 : Ojs.t) -> t_of_js any_of_js x10187
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10185 : any t) -> t_to_js any_to_js x10185
    type 'T tags = [ `CustomEvent of 'T  | `Event ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x10191 : Ojs.t) -> intf_of_js __tags_of_js x10191
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x10189 : __tags intf) -> intf_to_js __tags_to_js x10189
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x10193 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x10193)
             "detail")
    let (initCustomEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:'T -> unit -> unit)
      =
      fun (x10204 : ('tags, 'T) this) ->
        fun ~type_:(x10196 : string) ->
          fun ?bubbles:(x10197 : bool option) ->
            fun ?cancelable:(x10198 : bool option) ->
              fun ?detail:(x10199 : 'T option) ->
                fun () ->
                  ignore
                    (let x10207 = this_to_js Obj.magic Obj.magic x10204 in
                     Ojs.call (Ojs.get_prop_ascii x10207 "initCustomEvent")
                       "apply"
                       [|x10207;((let x10200 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10200 "push"
                                       [|(Ojs.string_to_js x10196)|]);
                                  (match x10197 with
                                   | Some x10203 ->
                                       ignore
                                         (Ojs.call x10200 "push"
                                            [|(Ojs.bool_to_js x10203)|])
                                   | None -> ());
                                  (match x10198 with
                                   | Some x10202 ->
                                       ignore
                                         (Ojs.call x10200 "push"
                                            [|(Ojs.bool_to_js x10202)|])
                                   | None -> ());
                                  (match x10199 with
                                   | Some x10201 ->
                                       ignore
                                         (Ojs.call x10200 "push"
                                            [|(Obj.magic x10201)|])
                                   | None -> ());
                                  x10200))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CustomEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t) =
      fun ~type_:(x10208 : string) ->
        fun ?eventInitDict:(x10209 : 'T CustomEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CustomEvent")
                 (let x10210 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x10210 "push" [|(Ojs.string_to_js x10208)|]);
                  (match x10209 with
                   | Some x10211 ->
                       ignore
                         (Ojs.call x10210 "push"
                            [|(CustomEventInit.t_to_js Obj.magic x10211)|])
                   | None -> ());
                  x10210))
  end
module WorkerOptions =
  struct
    type t = [ `WorkerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10215 : Ojs.t) -> t_of_js x10215
    and t_0_to_js : t_0 -> Ojs.t = fun (x10214 : t) -> t_to_js x10214
    type tags = [ `WorkerOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10218 : Ojs.t) -> intf_of_js __tags_of_js x10218
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10216 : __tags intf) -> intf_to_js __tags_to_js x10216
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x10220 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10220) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x10222 : 'tags this) ->
        fun (x10223 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10222) "credentials"
            (RequestCredentials.t_to_js x10223)
    let (get_name : 'tags this -> string) =
      fun (x10225 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10225) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x10227 : 'tags this) ->
        fun (x10228 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10227) "name"
            (Ojs.string_to_js x10228)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x10230 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10230) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x10232 : 'tags this) ->
        fun (x10233 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10232) "type"
            (WorkerType.t_to_js x10233)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface130:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> Worker.t
                          val set_prototype : t -> Worker.t -> unit
                          val create :
                            t ->
                              scriptURL:URL.t or_string ->
                                ?options:WorkerOptions.t -> unit -> Worker.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10236 : Ojs.t) -> x10236
    and t_to_js : t -> Ojs.t = fun (x10235 : Ojs.t) -> x10235
    let (get_prototype : t -> Worker.t) =
      fun (x10237 : t) ->
        Worker.t_of_js (Ojs.get_prop_ascii (t_to_js x10237) "prototype")
    let (set_prototype : t -> Worker.t -> unit) =
      fun (x10238 : t) ->
        fun (x10239 : Worker.t) ->
          Ojs.set_prop_ascii (t_to_js x10238) "prototype"
            (Worker.t_to_js x10239)
    let (create :
      t ->
        scriptURL:URL.t or_string ->
          ?options:WorkerOptions.t -> unit -> Worker.t)
      =
      fun (x10245 : t) ->
        fun ~scriptURL:(x10240 : URL.t or_string) ->
          fun ?options:(x10241 : WorkerOptions.t option) ->
            fun () ->
              Worker.t_of_js
                (Ojs.new_obj_arr (t_to_js x10245)
                   (let x10242 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x10242 "push"
                         [|(or_string_to_js URL.t_to_js x10240)|]);
                    (match x10241 with
                     | Some x10243 ->
                         ignore
                           (Ojs.call x10242 "push"
                              [|(WorkerOptions.t_to_js x10243)|])
                     | None -> ());
                    x10242))
  end
 and
  Worker:sig
           type t = [ `AbstractWorker  | `EventTarget  | `Worker ] intf
           type t_0 = t
           [@@@js.stop ]
           type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
           type tags_0 = tags
           [@@@js.start ]
           [@@@js.implem
             type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
             type tags_0 = tags]
           type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
           val t_to_js : t -> Ojs.t
           val t_of_js : Ojs.t -> t
           val t_0_to_js : t_0 -> Ojs.t
           val t_0_of_js : Ojs.t -> t_0
           val get_onmessage :
             'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null
           val set_onmessage :
             'tags this ->
               (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit
           val get_onmessageerror :
             'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null
           val set_onmessageerror :
             'tags this ->
               (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit
           val postMessage :
             'tags this ->
               message:any -> transfer:Transferable.t list -> unit
           val postMessage' :
             'tags this ->
               message:any ->
                 ?options:StructuredSerializeOptions.t -> unit -> unit
           val terminate : 'tags this -> unit
           val addEventListener :
             'tags this ->
               type_:'K ->
                 listener:(this:t -> ev:any -> any) ->
                   ?options:AddEventListenerOptions.t or_boolean ->
                     unit -> unit
           val addEventListener' :
             'tags this ->
               type_:string ->
                 listener:EventListenerOrEventListenerObject.t ->
                   ?options:AddEventListenerOptions.t or_boolean ->
                     unit -> unit
           val removeEventListener :
             'tags this ->
               type_:'K ->
                 listener:(this:t -> ev:any -> any) ->
                   ?options:EventListenerOptions.t or_boolean -> unit -> unit
           val removeEventListener' :
             'tags this ->
               type_:string ->
                 listener:EventListenerOrEventListenerObject.t ->
                   ?options:EventListenerOptions.t or_boolean -> unit -> unit
           val cast_from : 'tags this -> t
           val prototype : unit -> t
           val create :
             scriptURL:URL.t or_string ->
               ?options:WorkerOptions.t -> unit -> t
         end =
  struct
    type t = [ `AbstractWorker  | `EventTarget  | `Worker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10247 : Ojs.t) -> t_of_js x10247
    and t_0_to_js : t_0 -> Ojs.t = fun (x10246 : t) -> t_to_js x10246
    type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10250 : Ojs.t) -> intf_of_js __tags_of_js x10250
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10248 : __tags intf) -> intf_to_js __tags_to_js x10248
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x10252 : 'tags this) ->
        or_null_of_js
          (fun (x10254 : Ojs.t) ->
             fun ~this:(x10255 : t) ->
               fun ~ev:(x10256 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x10254
                      [|(t_to_js x10255);(MessageEvent.t_0_to_js x10256)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10252) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x10257 : 'tags this) ->
        fun (x10258 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10257) "onmessage"
            (or_null_to_js
               (fun (x10259 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10260 : Ojs.t) ->
                       fun (x10261 : Ojs.t) ->
                         any_to_js
                           (x10259 ~this:(t_of_js x10260)
                              ~ev:(MessageEvent.t_0_of_js x10261)))) x10258)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x10263 : 'tags this) ->
        or_null_of_js
          (fun (x10265 : Ojs.t) ->
             fun ~this:(x10266 : t) ->
               fun ~ev:(x10267 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x10265
                      [|(t_to_js x10266);(MessageEvent.t_0_to_js x10267)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10263) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x10268 : 'tags this) ->
        fun (x10269 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10268) "onmessageerror"
            (or_null_to_js
               (fun (x10270 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10271 : Ojs.t) ->
                       fun (x10272 : Ojs.t) ->
                         any_to_js
                           (x10270 ~this:(t_of_js x10271)
                              ~ev:(MessageEvent.t_0_of_js x10272)))) x10269)
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x10277 : 'tags this) ->
        fun ~message:(x10274 : any) ->
          fun ~transfer:(x10275 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10277) "postMessage"
                 [|(any_to_js x10274);(Ojs.list_to_js Transferable.t_to_js
                                         x10275)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x10283 : 'tags this) ->
        fun ~message:(x10279 : any) ->
          fun ?options:(x10280 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x10285 = this_to_js Obj.magic x10283 in
                 Ojs.call (Ojs.get_prop_ascii x10285 "postMessage") "apply"
                   [|x10285;((let x10281 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x10281 "push"
                                   [|(any_to_js x10279)|]);
                              (match x10280 with
                               | Some x10282 ->
                                   ignore
                                     (Ojs.call x10281 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x10282)|])
                               | None -> ());
                              x10281))|])
    let (terminate : 'tags this -> unit) =
      fun (x10286 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x10286) "terminate" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10296 : 'tags this) ->
        fun ~type_:(x10288 : 'K) ->
          fun ~listener:(x10289 : this:t -> ev:any -> any) ->
            fun
              ?options:(x10290 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10298 = this_to_js Obj.magic x10296 in
                   Ojs.call (Ojs.get_prop_ascii x10298 "addEventListener")
                     "apply"
                     [|x10298;((let x10291 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10291 "push"
                                     [|(Obj.magic x10288)|]);
                                ignore
                                  (Ojs.call x10291 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10294 : Ojs.t) ->
                                             fun (x10295 : Ojs.t) ->
                                               any_to_js
                                                 (x10289
                                                    ~this:(t_of_js x10294)
                                                    ~ev:(any_of_js x10295))))|]);
                                (match x10290 with
                                 | Some x10292 ->
                                     ignore
                                       (Ojs.call x10291 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10292)|])
                                 | None -> ());
                                x10291))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10305 : 'tags this) ->
        fun ~type_:(x10299 : string) ->
          fun ~listener:(x10300 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x10301 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10307 = this_to_js Obj.magic x10305 in
                   Ojs.call (Ojs.get_prop_ascii x10307 "addEventListener")
                     "apply"
                     [|x10307;((let x10302 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10302 "push"
                                     [|(Ojs.string_to_js x10299)|]);
                                ignore
                                  (Ojs.call x10302 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10300)|]);
                                (match x10301 with
                                 | Some x10303 ->
                                     ignore
                                       (Ojs.call x10302 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10303)|])
                                 | None -> ());
                                x10302))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10316 : 'tags this) ->
        fun ~type_:(x10308 : 'K) ->
          fun ~listener:(x10309 : this:t -> ev:any -> any) ->
            fun ?options:(x10310 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10318 = this_to_js Obj.magic x10316 in
                   Ojs.call (Ojs.get_prop_ascii x10318 "removeEventListener")
                     "apply"
                     [|x10318;((let x10311 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10311 "push"
                                     [|(Obj.magic x10308)|]);
                                ignore
                                  (Ojs.call x10311 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10314 : Ojs.t) ->
                                             fun (x10315 : Ojs.t) ->
                                               any_to_js
                                                 (x10309
                                                    ~this:(t_of_js x10314)
                                                    ~ev:(any_of_js x10315))))|]);
                                (match x10310 with
                                 | Some x10312 ->
                                     ignore
                                       (Ojs.call x10311 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10312)|])
                                 | None -> ());
                                x10311))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10325 : 'tags this) ->
        fun ~type_:(x10319 : string) ->
          fun ~listener:(x10320 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x10321 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10327 = this_to_js Obj.magic x10325 in
                   Ojs.call (Ojs.get_prop_ascii x10327 "removeEventListener")
                     "apply"
                     [|x10327;((let x10322 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10322 "push"
                                     [|(Ojs.string_to_js x10319)|]);
                                ignore
                                  (Ojs.call x10322 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10320)|]);
                                (match x10321 with
                                 | Some x10323 ->
                                     ignore
                                       (Ojs.call x10322 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10323)|])
                                 | None -> ());
                                x10322))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Worker")
             "prototype")
    let (create :
      scriptURL:URL.t or_string -> ?options:WorkerOptions.t -> unit -> t) =
      fun ~scriptURL:(x10328 : URL.t or_string) ->
        fun ?options:(x10329 : WorkerOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Worker")
                 (let x10330 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x10330 "push"
                       [|(or_string_to_js URL.t_to_js x10328)|]);
                  (match x10329 with
                   | Some x10331 ->
                       ignore
                         (Ojs.call x10330 "push"
                            [|(WorkerOptions.t_to_js x10331)|])
                   | None -> ());
                  x10330))
  end
module rec
  AnonymousInterface13:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> CountQueuingStrategy.t
                         val set_prototype :
                           t -> CountQueuingStrategy.t -> unit
                         val create :
                           t ->
                             init:QueuingStrategyInit.t ->
                               CountQueuingStrategy.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10334 : Ojs.t) -> x10334
    and t_to_js : t -> Ojs.t = fun (x10333 : Ojs.t) -> x10333
    let (get_prototype : t -> CountQueuingStrategy.t) =
      fun (x10335 : t) ->
        CountQueuingStrategy.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10335) "prototype")
    let (set_prototype : t -> CountQueuingStrategy.t -> unit) =
      fun (x10336 : t) ->
        fun (x10337 : CountQueuingStrategy.t) ->
          Ojs.set_prop_ascii (t_to_js x10336) "prototype"
            (CountQueuingStrategy.t_to_js x10337)
    let (create : t -> init:QueuingStrategyInit.t -> CountQueuingStrategy.t)
      =
      fun (x10339 : t) ->
        fun ~init:(x10338 : QueuingStrategyInit.t) ->
          CountQueuingStrategy.t_of_js
            (Ojs.new_obj (t_to_js x10339)
               [|(QueuingStrategyInit.t_to_js x10338)|])
  end
 and
  CountQueuingStrategy:sig
                         type t =
                           [ `CountQueuingStrategy 
                           | `QueuingStrategy of any ] intf
                         type t_0 = t
                         [@@@js.stop ]
                         type tags =
                           [ `CountQueuingStrategy 
                           | `QueuingStrategy of any ]
                         type tags_0 = tags
                         [@@@js.start ]
                         [@@@js.implem
                           type tags =
                             [ `CountQueuingStrategy 
                             | `QueuingStrategy of any ]
                           type tags_0 = tags]
                         type 'tags this =
                           'tags intf constraint 'tags =
                                       [> `CountQueuingStrategy ]
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val t_0_to_js : t_0 -> Ojs.t
                         val t_0_of_js : Ojs.t -> t_0
                         val get_highWaterMark : 'tags this -> float
                         val get_size : 'tags this -> QueuingStrategySize.t_0
                         val cast_from : 'tags this -> t
                         val prototype : unit -> t
                         val create : QueuingStrategyInit.t -> t
                       end =
  struct
    type t = [ `CountQueuingStrategy  | `QueuingStrategy of any ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10341 : Ojs.t) -> t_of_js x10341
    and t_0_to_js : t_0 -> Ojs.t = fun (x10340 : t) -> t_to_js x10340
    type tags = [ `CountQueuingStrategy  | `QueuingStrategy of any ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `CountQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10344 : Ojs.t) -> intf_of_js __tags_of_js x10344
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10342 : __tags intf) -> intf_to_js __tags_to_js x10342
    let (get_highWaterMark : 'tags this -> float) =
      fun (x10346 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10346) "highWaterMark")
    let (get_size : 'tags this -> QueuingStrategySize.t_0) =
      fun (x10348 : 'tags this) ->
        QueuingStrategySize.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10348) "size")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             "prototype")
    let (create : QueuingStrategyInit.t -> t) =
      fun (x10350 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x10350)|])
  end
module BinaryType =
  struct
    type t = [ `L_s37_arraybuffer  | `L_s44_blob ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10352 : Ojs.t) ->
        let x10353 = x10352 in
        match Ojs.string_of_js x10353 with
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x10351 : [ `L_s37_arraybuffer  | `L_s44_blob ]) ->
        match x10351 with
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10355 : Ojs.t) -> t_of_js x10355
    and t_0_to_js : t_0 -> Ojs.t = fun (x10354 : t) -> t_to_js x10354
  end
module rec
  AnonymousInterface128:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebSocket.t
                          val set_prototype : t -> WebSocket.t -> unit
                          val create :
                            t ->
                              url:URL.t or_string ->
                                ?protocols:string list or_string ->
                                  unit -> WebSocket.t
                          val get_CLOSED : t -> float
                          val get_CLOSING : t -> float
                          val get_CONNECTING : t -> float
                          val get_OPEN : t -> float
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10357 : Ojs.t) -> x10357
    and t_to_js : t -> Ojs.t = fun (x10356 : Ojs.t) -> x10356
    let (get_prototype : t -> WebSocket.t) =
      fun (x10358 : t) ->
        WebSocket.t_of_js (Ojs.get_prop_ascii (t_to_js x10358) "prototype")
    let (set_prototype : t -> WebSocket.t -> unit) =
      fun (x10359 : t) ->
        fun (x10360 : WebSocket.t) ->
          Ojs.set_prop_ascii (t_to_js x10359) "prototype"
            (WebSocket.t_to_js x10360)
    let (create :
      t ->
        url:URL.t or_string ->
          ?protocols:string list or_string -> unit -> WebSocket.t)
      =
      fun (x10368 : t) ->
        fun ~url:(x10361 : URL.t or_string) ->
          fun ?protocols:(x10362 : string list or_string option) ->
            fun () ->
              WebSocket.t_of_js
                (Ojs.new_obj_arr (t_to_js x10368)
                   (let x10363 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x10363 "push"
                         [|(or_string_to_js URL.t_to_js x10361)|]);
                    (match x10362 with
                     | Some x10364 ->
                         ignore
                           (Ojs.call x10363 "push"
                              [|(or_string_to_js
                                   (fun (x10365 : string list) ->
                                      Ojs.list_to_js Ojs.string_to_js x10365)
                                   x10364)|])
                     | None -> ());
                    x10363))
    let (get_CLOSED : t -> float) =
      fun (x10369 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x10369) "CLOSED")
    let (get_CLOSING : t -> float) =
      fun (x10370 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x10370) "CLOSING")
    let (get_CONNECTING : t -> float) =
      fun (x10371 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x10371) "CONNECTING")
    let (get_OPEN : t -> float) =
      fun (x10372 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x10372) "OPEN")
  end
 and
  WebSocket:sig
              type t = [ `EventTarget  | `WebSocket ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `EventTarget  | `WebSocket ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem
                type tags = [ `EventTarget  | `WebSocket ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_binaryType : 'tags this -> BinaryType.t
              val set_binaryType : 'tags this -> BinaryType.t -> unit
              val get_bufferedAmount : 'tags this -> float
              val get_extensions : 'tags this -> string
              val get_onclose :
                'tags this -> (this:t -> ev:CloseEvent.t -> any) or_null
              val set_onclose :
                'tags this ->
                  (this:t -> ev:CloseEvent.t -> any) or_null -> unit
              val get_onerror :
                'tags this -> (this:t -> ev:Event.t -> any) or_null
              val set_onerror :
                'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
              val get_onmessage :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null
              val set_onmessage :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit
              val get_onopen :
                'tags this -> (this:t -> ev:Event.t -> any) or_null
              val set_onopen :
                'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
              val get_protocol : 'tags this -> string
              val get_readyState : 'tags this -> float
              val get_url : 'tags this -> string
              val close :
                'tags this -> ?code:float -> ?reason:string -> unit -> unit
              val send :
                'tags this ->
                  data:(ArrayBufferLike.t_0, ArrayBufferView.t_0, Blob.t)
                    union3 or_string -> unit
              val get_CLOSED : 'tags this -> float
              val get_CLOSING : 'tags this -> float
              val get_CONNECTING : 'tags this -> float
              val get_OPEN : 'tags this -> float
              val addEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit
              val addEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit
              val removeEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit
              val removeEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create :
                url:URL.t or_string ->
                  ?protocols:string list or_string -> unit -> t
              val closed : unit -> float
              val closing : unit -> float
              val connecting : unit -> float
              val open_ : unit -> float
            end =
  struct
    type t = [ `EventTarget  | `WebSocket ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10374 : Ojs.t) -> t_of_js x10374
    and t_0_to_js : t_0 -> Ojs.t = fun (x10373 : t) -> t_to_js x10373
    type tags = [ `EventTarget  | `WebSocket ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10377 : Ojs.t) -> intf_of_js __tags_of_js x10377
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10375 : __tags intf) -> intf_to_js __tags_to_js x10375
    let (get_binaryType : 'tags this -> BinaryType.t) =
      fun (x10379 : 'tags this) ->
        BinaryType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10379) "binaryType")
    let (set_binaryType : 'tags this -> BinaryType.t -> unit) =
      fun (x10381 : 'tags this) ->
        fun (x10382 : BinaryType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10381) "binaryType"
            (BinaryType.t_to_js x10382)
    let (get_bufferedAmount : 'tags this -> float) =
      fun (x10384 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10384) "bufferedAmount")
    let (get_extensions : 'tags this -> string) =
      fun (x10386 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10386) "extensions")
    let (get_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) or_null) =
      fun (x10388 : 'tags this) ->
        or_null_of_js
          (fun (x10390 : Ojs.t) ->
             fun ~this:(x10391 : t) ->
               fun ~ev:(x10392 : CloseEvent.t) ->
                 any_of_js
                   (Ojs.apply x10390
                      [|(t_to_js x10391);(CloseEvent.t_to_js x10392)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10388) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) or_null -> unit) =
      fun (x10393 : 'tags this) ->
        fun (x10394 : (this:t -> ev:CloseEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10393) "onclose"
            (or_null_to_js
               (fun (x10395 : this:t -> ev:CloseEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10396 : Ojs.t) ->
                       fun (x10397 : Ojs.t) ->
                         any_to_js
                           (x10395 ~this:(t_of_js x10396)
                              ~ev:(CloseEvent.t_of_js x10397)))) x10394)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x10399 : 'tags this) ->
        or_null_of_js
          (fun (x10401 : Ojs.t) ->
             fun ~this:(x10402 : t) ->
               fun ~ev:(x10403 : Event.t) ->
                 any_of_js
                   (Ojs.apply x10401
                      [|(t_to_js x10402);(Event.t_to_js x10403)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10399) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x10404 : 'tags this) ->
        fun (x10405 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10404) "onerror"
            (or_null_to_js
               (fun (x10406 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10407 : Ojs.t) ->
                       fun (x10408 : Ojs.t) ->
                         any_to_js
                           (x10406 ~this:(t_of_js x10407)
                              ~ev:(Event.t_of_js x10408)))) x10405)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x10410 : 'tags this) ->
        or_null_of_js
          (fun (x10412 : Ojs.t) ->
             fun ~this:(x10413 : t) ->
               fun ~ev:(x10414 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x10412
                      [|(t_to_js x10413);(MessageEvent.t_0_to_js x10414)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10410) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x10415 : 'tags this) ->
        fun (x10416 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10415) "onmessage"
            (or_null_to_js
               (fun (x10417 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10418 : Ojs.t) ->
                       fun (x10419 : Ojs.t) ->
                         any_to_js
                           (x10417 ~this:(t_of_js x10418)
                              ~ev:(MessageEvent.t_0_of_js x10419)))) x10416)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x10421 : 'tags this) ->
        or_null_of_js
          (fun (x10423 : Ojs.t) ->
             fun ~this:(x10424 : t) ->
               fun ~ev:(x10425 : Event.t) ->
                 any_of_js
                   (Ojs.apply x10423
                      [|(t_to_js x10424);(Event.t_to_js x10425)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10421) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x10426 : 'tags this) ->
        fun (x10427 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10426) "onopen"
            (or_null_to_js
               (fun (x10428 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10429 : Ojs.t) ->
                       fun (x10430 : Ojs.t) ->
                         any_to_js
                           (x10428 ~this:(t_of_js x10429)
                              ~ev:(Event.t_of_js x10430)))) x10427)
    let (get_protocol : 'tags this -> string) =
      fun (x10432 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10432) "protocol")
    let (get_readyState : 'tags this -> float) =
      fun (x10434 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10434) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x10436 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10436) "url")
    let (close : 'tags this -> ?code:float -> ?reason:string -> unit -> unit)
      =
      fun (x10443 : 'tags this) ->
        fun ?code:(x10438 : float option) ->
          fun ?reason:(x10439 : string option) ->
            fun () ->
              ignore
                (let x10445 = this_to_js Obj.magic x10443 in
                 Ojs.call (Ojs.get_prop_ascii x10445 "close") "apply"
                   [|x10445;((let x10440 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x10438 with
                               | Some x10442 ->
                                   ignore
                                     (Ojs.call x10440 "push"
                                        [|(Ojs.float_to_js x10442)|])
                               | None -> ());
                              (match x10439 with
                               | Some x10441 ->
                                   ignore
                                     (Ojs.call x10440 "push"
                                        [|(Ojs.string_to_js x10441)|])
                               | None -> ());
                              x10440))|])
    let (send :
      'tags this ->
        data:(ArrayBufferLike.t_0, ArrayBufferView.t_0, Blob.t) union3
          or_string -> unit)
      =
      fun (x10451 : 'tags this) ->
        fun
          ~data:(x10446 :
                  (ArrayBufferLike.t_0, ArrayBufferView.t_0, Blob.t) union3
                    or_string)
          ->
          ignore
            (Ojs.call (this_to_js Obj.magic x10451) "send"
               [|(or_string_to_js
                    (fun
                       (x10447 :
                         (ArrayBufferLike.t_0, ArrayBufferView.t_0, Blob.t)
                           union3)
                       ->
                       union3_to_js ArrayBufferLike.t_0_to_js
                         ArrayBufferView.t_0_to_js Blob.t_to_js x10447)
                    x10446)|])
    let (get_CLOSED : 'tags this -> float) =
      fun (x10453 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10453) "CLOSED")
    let (get_CLOSING : 'tags this -> float) =
      fun (x10455 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10455) "CLOSING")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x10457 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10457) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x10459 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10459) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10469 : 'tags this) ->
        fun ~type_:(x10461 : 'K) ->
          fun ~listener:(x10462 : this:t -> ev:any -> any) ->
            fun
              ?options:(x10463 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10471 = this_to_js Obj.magic x10469 in
                   Ojs.call (Ojs.get_prop_ascii x10471 "addEventListener")
                     "apply"
                     [|x10471;((let x10464 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10464 "push"
                                     [|(Obj.magic x10461)|]);
                                ignore
                                  (Ojs.call x10464 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10467 : Ojs.t) ->
                                             fun (x10468 : Ojs.t) ->
                                               any_to_js
                                                 (x10462
                                                    ~this:(t_of_js x10467)
                                                    ~ev:(any_of_js x10468))))|]);
                                (match x10463 with
                                 | Some x10465 ->
                                     ignore
                                       (Ojs.call x10464 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10465)|])
                                 | None -> ());
                                x10464))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10478 : 'tags this) ->
        fun ~type_:(x10472 : string) ->
          fun ~listener:(x10473 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x10474 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10480 = this_to_js Obj.magic x10478 in
                   Ojs.call (Ojs.get_prop_ascii x10480 "addEventListener")
                     "apply"
                     [|x10480;((let x10475 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10475 "push"
                                     [|(Ojs.string_to_js x10472)|]);
                                ignore
                                  (Ojs.call x10475 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10473)|]);
                                (match x10474 with
                                 | Some x10476 ->
                                     ignore
                                       (Ojs.call x10475 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10476)|])
                                 | None -> ());
                                x10475))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10489 : 'tags this) ->
        fun ~type_:(x10481 : 'K) ->
          fun ~listener:(x10482 : this:t -> ev:any -> any) ->
            fun ?options:(x10483 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10491 = this_to_js Obj.magic x10489 in
                   Ojs.call (Ojs.get_prop_ascii x10491 "removeEventListener")
                     "apply"
                     [|x10491;((let x10484 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10484 "push"
                                     [|(Obj.magic x10481)|]);
                                ignore
                                  (Ojs.call x10484 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10487 : Ojs.t) ->
                                             fun (x10488 : Ojs.t) ->
                                               any_to_js
                                                 (x10482
                                                    ~this:(t_of_js x10487)
                                                    ~ev:(any_of_js x10488))))|]);
                                (match x10483 with
                                 | Some x10485 ->
                                     ignore
                                       (Ojs.call x10484 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10485)|])
                                 | None -> ());
                                x10484))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10498 : 'tags this) ->
        fun ~type_:(x10492 : string) ->
          fun ~listener:(x10493 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x10494 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10500 = this_to_js Obj.magic x10498 in
                   Ojs.call (Ojs.get_prop_ascii x10500 "removeEventListener")
                     "apply"
                     [|x10500;((let x10495 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10495 "push"
                                     [|(Ojs.string_to_js x10492)|]);
                                ignore
                                  (Ojs.call x10495 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10493)|]);
                                (match x10494 with
                                 | Some x10496 ->
                                     ignore
                                       (Ojs.call x10495 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10496)|])
                                 | None -> ());
                                x10495))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "prototype")
    let (create :
      url:URL.t or_string -> ?protocols:string list or_string -> unit -> t) =
      fun ~url:(x10501 : URL.t or_string) ->
        fun ?protocols:(x10502 : string list or_string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WebSocket")
                 (let x10503 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x10503 "push"
                       [|(or_string_to_js URL.t_to_js x10501)|]);
                  (match x10502 with
                   | Some x10504 ->
                       ignore
                         (Ojs.call x10503 "push"
                            [|(or_string_to_js
                                 (fun (x10505 : string list) ->
                                    Ojs.list_to_js Ojs.string_to_js x10505)
                                 x10504)|])
                   | None -> ());
                  x10503))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSED")
    let (closing : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSING")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "OPEN")
  end
module rec
  AnonymousInterface126:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLUniformLocation.t
                          val set_prototype :
                            t -> WebGLUniformLocation.t -> unit
                          val create : t -> WebGLUniformLocation.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10509 : Ojs.t) -> x10509
    and t_to_js : t -> Ojs.t = fun (x10508 : Ojs.t) -> x10508
    let (get_prototype : t -> WebGLUniformLocation.t) =
      fun (x10510 : t) ->
        WebGLUniformLocation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10510) "prototype")
    let (set_prototype : t -> WebGLUniformLocation.t -> unit) =
      fun (x10511 : t) ->
        fun (x10512 : WebGLUniformLocation.t) ->
          Ojs.set_prop_ascii (t_to_js x10511) "prototype"
            (WebGLUniformLocation.t_to_js x10512)
    let (create : t -> WebGLUniformLocation.t) =
      fun (x10513 : t) ->
        WebGLUniformLocation.t_of_js (Ojs.new_obj (t_to_js x10513) [||])
  end
 and
  WebGLUniformLocation:sig
                         type t = [ `WebGLUniformLocation ] intf
                         type t_0 = t
                         [@@@js.stop ]
                         type tags = [ `WebGLUniformLocation ]
                         type tags_0 = tags
                         [@@@js.start ]
                         [@@@js.implem
                           type tags = [ `WebGLUniformLocation ]
                           type tags_0 = tags]
                         type 'tags this =
                           'tags intf constraint 'tags =
                                       [> `WebGLUniformLocation ]
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val t_0_to_js : t_0 -> Ojs.t
                         val t_0_of_js : Ojs.t -> t_0
                         val cast_from : 'tags this -> t
                         val prototype : unit -> t
                         val create : unit -> t
                       end =
  struct
    type t = [ `WebGLUniformLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10515 : Ojs.t) -> t_of_js x10515
    and t_0_to_js : t_0 -> Ojs.t = fun (x10514 : t) -> t_to_js x10514
    type tags = [ `WebGLUniformLocation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLUniformLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10518 : Ojs.t) -> intf_of_js __tags_of_js x10518
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10516 : __tags intf) -> intf_to_js __tags_to_js x10516
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             [||])
  end
module TexImageSource =
  struct
    type t = (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x10524 : Ojs.t) ->
        union3_of_js ImageBitmap.t_of_js ImageData.t_of_js
          OffscreenCanvas.t_of_js x10524
    and t_to_js : t -> Ojs.t =
      fun (x10520 : (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3)
        ->
        union3_to_js ImageBitmap.t_to_js ImageData.t_to_js
          OffscreenCanvas.t_to_js x10520
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10529 : Ojs.t) -> t_of_js x10529
    and t_0_to_js : t_0 -> Ojs.t = fun (x10528 : t) -> t_to_js x10528
  end
module GLint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10531 : Ojs.t) -> Ojs.float_of_js x10531
    and t_to_js : t -> Ojs.t = fun (x10530 : float) -> Ojs.float_to_js x10530
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10533 : Ojs.t) -> t_of_js x10533
    and t_0_to_js : t_0 -> Ojs.t = fun (x10532 : t) -> t_to_js x10532
  end
module Int32List =
  struct
    type t = (Int32Array.t_0, GLint.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x10537 : Ojs.t) ->
        or_array_of_js Int32Array.t_0_of_js GLint.t_of_js x10537
    and t_to_js : t -> Ojs.t =
      fun (x10534 : (Int32Array.t_0, GLint.t) or_array) ->
        or_array_to_js Int32Array.t_0_to_js GLint.t_to_js x10534
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10541 : Ojs.t) -> t_of_js x10541
    and t_0_to_js : t_0 -> Ojs.t = fun (x10540 : t) -> t_to_js x10540
  end
module GLsizeiptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10543 : Ojs.t) -> Ojs.float_of_js x10543
    and t_to_js : t -> Ojs.t = fun (x10542 : float) -> Ojs.float_to_js x10542
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10545 : Ojs.t) -> t_of_js x10545
    and t_0_to_js : t_0 -> Ojs.t = fun (x10544 : t) -> t_to_js x10544
  end
module GLboolean =
  struct
    type t = bool
    let rec t_of_js : Ojs.t -> t =
      fun (x10547 : Ojs.t) -> Ojs.bool_of_js x10547
    and t_to_js : t -> Ojs.t = fun (x10546 : bool) -> Ojs.bool_to_js x10546
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10549 : Ojs.t) -> t_of_js x10549
    and t_0_to_js : t_0 -> Ojs.t = fun (x10548 : t) -> t_to_js x10548
  end
module GLfloat =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10551 : Ojs.t) -> Ojs.float_of_js x10551
    and t_to_js : t -> Ojs.t = fun (x10550 : float) -> Ojs.float_to_js x10550
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10553 : Ojs.t) -> t_of_js x10553
    and t_0_to_js : t_0 -> Ojs.t = fun (x10552 : t) -> t_to_js x10552
  end
module Float32List =
  struct
    type t = (Float32Array.t_0, GLfloat.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x10557 : Ojs.t) ->
        or_array_of_js Float32Array.t_0_of_js GLfloat.t_of_js x10557
    and t_to_js : t -> Ojs.t =
      fun (x10554 : (Float32Array.t_0, GLfloat.t) or_array) ->
        or_array_to_js Float32Array.t_0_to_js GLfloat.t_to_js x10554
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10561 : Ojs.t) -> t_of_js x10561
    and t_0_to_js : t_0 -> Ojs.t = fun (x10560 : t) -> t_to_js x10560
  end
module GLsizei =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10563 : Ojs.t) -> Ojs.float_of_js x10563
    and t_to_js : t -> Ojs.t = fun (x10562 : float) -> Ojs.float_to_js x10562
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10565 : Ojs.t) -> t_of_js x10565
    and t_0_to_js : t_0 -> Ojs.t = fun (x10564 : t) -> t_to_js x10564
  end
module GLintptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10567 : Ojs.t) -> Ojs.float_of_js x10567
    and t_to_js : t -> Ojs.t = fun (x10566 : float) -> Ojs.float_to_js x10566
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10569 : Ojs.t) -> t_of_js x10569
    and t_0_to_js : t_0 -> Ojs.t = fun (x10568 : t) -> t_to_js x10568
  end
module WebGLRenderingContextOverloads =
  struct
    type t = [ `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10571 : Ojs.t) -> t_of_js x10571
    and t_0_to_js : t_0 -> Ojs.t = fun (x10570 : t) -> t_to_js x10570
    type tags = [ `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10574 : Ojs.t) -> intf_of_js __tags_of_js x10574
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10572 : __tags intf) -> intf_to_js __tags_to_js x10572
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x10579 : 'tags this) ->
        fun ~target:(x10576 : GLenum.t) ->
          fun ~size:(x10577 : GLsizeiptr.t) ->
            fun ~usage:(x10578 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10579) "bufferData"
                   [|(GLenum.t_to_js x10576);(GLsizeiptr.t_to_js x10577);(
                     GLenum.t_to_js x10578)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          data:BufferSource.t or_null -> usage:GLenum.t -> unit)
      =
      fun (x10585 : 'tags this) ->
        fun ~target:(x10581 : GLenum.t) ->
          fun ~data:(x10582 : BufferSource.t or_null) ->
            fun ~usage:(x10584 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10585) "bufferData"
                   [|(GLenum.t_to_js x10581);(or_null_to_js
                                                BufferSource.t_to_js x10582);(
                     GLenum.t_to_js x10584)|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t -> offset:GLintptr.t -> data:BufferSource.t -> unit)
      =
      fun (x10590 : 'tags this) ->
        fun ~target:(x10587 : GLenum.t) ->
          fun ~offset:(x10588 : GLintptr.t) ->
            fun ~data:(x10589 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10590) "bufferSubData"
                   [|(GLenum.t_to_js x10587);(GLintptr.t_to_js x10588);(
                     BufferSource.t_to_js x10589)|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x10599 : 'tags this) ->
        fun ~target:(x10592 : GLenum.t) ->
          fun ~level:(x10593 : GLint.t) ->
            fun ~internalformat:(x10594 : GLenum.t) ->
              fun ~width:(x10595 : GLsizei.t) ->
                fun ~height:(x10596 : GLsizei.t) ->
                  fun ~border:(x10597 : GLint.t) ->
                    fun ~data:(x10598 : ArrayBufferView.t_0) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x10599)
                           "compressedTexImage2D"
                           [|(GLenum.t_to_js x10592);(GLint.t_to_js x10593);(
                             GLenum.t_to_js x10594);(GLsizei.t_to_js x10595);(
                             GLsizei.t_to_js x10596);(GLint.t_to_js x10597);(
                             ArrayBufferView.t_0_to_js x10598)|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x10609 : 'tags this) ->
        fun ~target:(x10601 : GLenum.t) ->
          fun ~level:(x10602 : GLint.t) ->
            fun ~xoffset:(x10603 : GLint.t) ->
              fun ~yoffset:(x10604 : GLint.t) ->
                fun ~width:(x10605 : GLsizei.t) ->
                  fun ~height:(x10606 : GLsizei.t) ->
                    fun ~format:(x10607 : GLenum.t) ->
                      fun ~data:(x10608 : ArrayBufferView.t_0) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x10609)
                             "compressedTexSubImage2D"
                             [|(GLenum.t_to_js x10601);(GLint.t_to_js x10602);(
                               GLint.t_to_js x10603);(GLint.t_to_js x10604);(
                               GLsizei.t_to_js x10605);(GLsizei.t_to_js
                                                          x10606);(GLenum.t_to_js
                                                                    x10607);(
                               ArrayBufferView.t_0_to_js x10608)|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x10619 : 'tags this) ->
        fun ~x:(x10611 : GLint.t) ->
          fun ~y:(x10612 : GLint.t) ->
            fun ~width:(x10613 : GLsizei.t) ->
              fun ~height:(x10614 : GLsizei.t) ->
                fun ~format:(x10615 : GLenum.t) ->
                  fun ~type_:(x10616 : GLenum.t) ->
                    fun ~pixels:(x10617 : ArrayBufferView.t_0 or_null) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x10619) "readPixels"
                           [|(GLint.t_to_js x10611);(GLint.t_to_js x10612);(
                             GLsizei.t_to_js x10613);(GLsizei.t_to_js x10614);(
                             GLenum.t_to_js x10615);(GLenum.t_to_js x10616);(
                             or_null_to_js ArrayBufferView.t_0_to_js x10617)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x10631 : 'tags this) ->
        fun ~target:(x10621 : GLenum.t) ->
          fun ~level:(x10622 : GLint.t) ->
            fun ~internalformat:(x10623 : GLint.t) ->
              fun ~width:(x10624 : GLsizei.t) ->
                fun ~height:(x10625 : GLsizei.t) ->
                  fun ~border:(x10626 : GLint.t) ->
                    fun ~format:(x10627 : GLenum.t) ->
                      fun ~type_:(x10628 : GLenum.t) ->
                        fun ~pixels:(x10629 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x10631)
                               "texImage2D"
                               [|(GLenum.t_to_js x10621);(GLint.t_to_js
                                                            x10622);(
                                 GLint.t_to_js x10623);(GLsizei.t_to_js
                                                          x10624);(GLsizei.t_to_js
                                                                    x10625);(
                                 GLint.t_to_js x10626);(GLenum.t_to_js x10627);(
                                 GLenum.t_to_js x10628);(or_null_to_js
                                                           ArrayBufferView.t_0_to_js
                                                           x10629)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x10639 : 'tags this) ->
        fun ~target:(x10633 : GLenum.t) ->
          fun ~level:(x10634 : GLint.t) ->
            fun ~internalformat:(x10635 : GLint.t) ->
              fun ~format:(x10636 : GLenum.t) ->
                fun ~type_:(x10637 : GLenum.t) ->
                  fun ~source:(x10638 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x10639) "texImage2D"
                         [|(GLenum.t_to_js x10633);(GLint.t_to_js x10634);(
                           GLint.t_to_js x10635);(GLenum.t_to_js x10636);(
                           GLenum.t_to_js x10637);(TexImageSource.t_to_js
                                                     x10638)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x10651 : 'tags this) ->
        fun ~target:(x10641 : GLenum.t) ->
          fun ~level:(x10642 : GLint.t) ->
            fun ~xoffset:(x10643 : GLint.t) ->
              fun ~yoffset:(x10644 : GLint.t) ->
                fun ~width:(x10645 : GLsizei.t) ->
                  fun ~height:(x10646 : GLsizei.t) ->
                    fun ~format:(x10647 : GLenum.t) ->
                      fun ~type_:(x10648 : GLenum.t) ->
                        fun ~pixels:(x10649 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x10651)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x10641);(GLint.t_to_js
                                                            x10642);(
                                 GLint.t_to_js x10643);(GLint.t_to_js x10644);(
                                 GLsizei.t_to_js x10645);(GLsizei.t_to_js
                                                            x10646);(
                                 GLenum.t_to_js x10647);(GLenum.t_to_js
                                                           x10648);(or_null_to_js
                                                                    ArrayBufferView.t_0_to_js
                                                                    x10649)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x10660 : 'tags this) ->
        fun ~target:(x10653 : GLenum.t) ->
          fun ~level:(x10654 : GLint.t) ->
            fun ~xoffset:(x10655 : GLint.t) ->
              fun ~yoffset:(x10656 : GLint.t) ->
                fun ~format:(x10657 : GLenum.t) ->
                  fun ~type_:(x10658 : GLenum.t) ->
                    fun ~source:(x10659 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x10660)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x10653);(GLint.t_to_js x10654);(
                             GLint.t_to_js x10655);(GLint.t_to_js x10656);(
                             GLenum.t_to_js x10657);(GLenum.t_to_js x10658);(
                             TexImageSource.t_to_js x10659)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x10665 : 'tags this) ->
        fun ~location:(x10662 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10664 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10665) "uniform1fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10662);(
                   Float32List.t_to_js x10664)|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x10670 : 'tags this) ->
        fun ~location:(x10667 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10669 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10670) "uniform1iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10667);(
                   Int32List.t_to_js x10669)|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x10675 : 'tags this) ->
        fun ~location:(x10672 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10674 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10675) "uniform2fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10672);(
                   Float32List.t_to_js x10674)|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x10680 : 'tags this) ->
        fun ~location:(x10677 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10679 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10680) "uniform2iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10677);(
                   Int32List.t_to_js x10679)|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x10685 : 'tags this) ->
        fun ~location:(x10682 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10684 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10685) "uniform3fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10682);(
                   Float32List.t_to_js x10684)|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x10690 : 'tags this) ->
        fun ~location:(x10687 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10689 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10690) "uniform3iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10687);(
                   Int32List.t_to_js x10689)|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x10695 : 'tags this) ->
        fun ~location:(x10692 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10694 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10695) "uniform4fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10692);(
                   Float32List.t_to_js x10694)|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x10700 : 'tags this) ->
        fun ~location:(x10697 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10699 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10700) "uniform4iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10697);(
                   Int32List.t_to_js x10699)|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x10706 : 'tags this) ->
        fun ~location:(x10702 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10704 : GLboolean.t) ->
            fun ~value:(x10705 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10706) "uniformMatrix2fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10702);(
                     GLboolean.t_to_js x10704);(Float32List.t_to_js x10705)|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x10712 : 'tags this) ->
        fun ~location:(x10708 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10710 : GLboolean.t) ->
            fun ~value:(x10711 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10712) "uniformMatrix3fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10708);(
                     GLboolean.t_to_js x10710);(Float32List.t_to_js x10711)|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x10718 : 'tags this) ->
        fun ~location:(x10714 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10716 : GLboolean.t) ->
            fun ~value:(x10717 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10718) "uniformMatrix4fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10714);(
                     GLboolean.t_to_js x10716);(Float32List.t_to_js x10717)|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10724 : 'tags this) ->
        fun ~location:(x10720 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10722 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10724) "uniform1fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10720);(
                   Iterable.t_1_to_js GLfloat.t_to_js x10722)|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x10730 : 'tags this) ->
        fun ~location:(x10726 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10728 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10730) "uniform1iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10726);(
                   Iterable.t_1_to_js GLint.t_to_js x10728)|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10736 : 'tags this) ->
        fun ~location:(x10732 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10734 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10736) "uniform2fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10732);(
                   Iterable.t_1_to_js GLfloat.t_to_js x10734)|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x10742 : 'tags this) ->
        fun ~location:(x10738 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10740 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10742) "uniform2iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10738);(
                   Iterable.t_1_to_js GLint.t_to_js x10740)|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10748 : 'tags this) ->
        fun ~location:(x10744 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10746 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10748) "uniform3fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10744);(
                   Iterable.t_1_to_js GLfloat.t_to_js x10746)|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x10754 : 'tags this) ->
        fun ~location:(x10750 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10752 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10754) "uniform3iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10750);(
                   Iterable.t_1_to_js GLint.t_to_js x10752)|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10760 : 'tags this) ->
        fun ~location:(x10756 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10758 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10760) "uniform4fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10756);(
                   Iterable.t_1_to_js GLfloat.t_to_js x10758)|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x10766 : 'tags this) ->
        fun ~location:(x10762 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10764 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10766) "uniform4iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10762);(
                   Iterable.t_1_to_js GLint.t_to_js x10764)|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10773 : 'tags this) ->
        fun ~location:(x10768 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10770 : GLboolean.t) ->
            fun ~value:(x10771 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10773) "uniformMatrix2fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10768);(
                     GLboolean.t_to_js x10770);(Iterable.t_1_to_js
                                                  GLfloat.t_to_js x10771)|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10780 : 'tags this) ->
        fun ~location:(x10775 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10777 : GLboolean.t) ->
            fun ~value:(x10778 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10780) "uniformMatrix3fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10775);(
                     GLboolean.t_to_js x10777);(Iterable.t_1_to_js
                                                  GLfloat.t_to_js x10778)|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10787 : 'tags this) ->
        fun ~location:(x10782 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10784 : GLboolean.t) ->
            fun ~value:(x10785 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10787) "uniformMatrix4fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10782);(
                     GLboolean.t_to_js x10784);(Iterable.t_1_to_js
                                                  GLfloat.t_to_js x10785)|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface122:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype :
                            t -> WebGLShaderPrecisionFormat.t
                          val set_prototype :
                            t -> WebGLShaderPrecisionFormat.t -> unit
                          val create : t -> WebGLShaderPrecisionFormat.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10790 : Ojs.t) -> x10790
    and t_to_js : t -> Ojs.t = fun (x10789 : Ojs.t) -> x10789
    let (get_prototype : t -> WebGLShaderPrecisionFormat.t) =
      fun (x10791 : t) ->
        WebGLShaderPrecisionFormat.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10791) "prototype")
    let (set_prototype : t -> WebGLShaderPrecisionFormat.t -> unit) =
      fun (x10792 : t) ->
        fun (x10793 : WebGLShaderPrecisionFormat.t) ->
          Ojs.set_prop_ascii (t_to_js x10792) "prototype"
            (WebGLShaderPrecisionFormat.t_to_js x10793)
    let (create : t -> WebGLShaderPrecisionFormat.t) =
      fun (x10794 : t) ->
        WebGLShaderPrecisionFormat.t_of_js
          (Ojs.new_obj (t_to_js x10794) [||])
  end
 and
  WebGLShaderPrecisionFormat:sig
                               type t = [ `WebGLShaderPrecisionFormat ] intf
                               type t_0 = t
                               [@@@js.stop ]
                               type tags = [ `WebGLShaderPrecisionFormat ]
                               type tags_0 = tags
                               [@@@js.start ]
                               [@@@js.implem
                                 type tags = [ `WebGLShaderPrecisionFormat ]
                                 type tags_0 = tags]
                               type 'tags this =
                                 'tags intf constraint 'tags =
                                             [> `WebGLShaderPrecisionFormat ]
                               val t_to_js : t -> Ojs.t
                               val t_of_js : Ojs.t -> t
                               val t_0_to_js : t_0 -> Ojs.t
                               val t_0_of_js : Ojs.t -> t_0
                               val get_precision : 'tags this -> GLint.t
                               val get_rangeMax : 'tags this -> GLint.t
                               val get_rangeMin : 'tags this -> GLint.t
                               val cast_from : 'tags this -> t
                               val prototype : unit -> t
                               val create : unit -> t
                             end =
  struct
    type t = [ `WebGLShaderPrecisionFormat ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10796 : Ojs.t) -> t_of_js x10796
    and t_0_to_js : t_0 -> Ojs.t = fun (x10795 : t) -> t_to_js x10795
    type tags = [ `WebGLShaderPrecisionFormat ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLShaderPrecisionFormat ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10799 : Ojs.t) -> intf_of_js __tags_of_js x10799
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10797 : __tags intf) -> intf_to_js __tags_to_js x10797
    let (get_precision : 'tags this -> GLint.t) =
      fun (x10801 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10801) "precision")
    let (get_rangeMax : 'tags this -> GLint.t) =
      fun (x10803 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10803) "rangeMax")
    let (get_rangeMin : 'tags this -> GLint.t) =
      fun (x10805 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10805) "rangeMin")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             [||])
  end
module rec
  AnonymousInterface118:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLRenderbuffer.t
                          val set_prototype :
                            t -> WebGLRenderbuffer.t -> unit
                          val create : t -> WebGLRenderbuffer.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10808 : Ojs.t) -> x10808
    and t_to_js : t -> Ojs.t = fun (x10807 : Ojs.t) -> x10807
    let (get_prototype : t -> WebGLRenderbuffer.t) =
      fun (x10809 : t) ->
        WebGLRenderbuffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10809) "prototype")
    let (set_prototype : t -> WebGLRenderbuffer.t -> unit) =
      fun (x10810 : t) ->
        fun (x10811 : WebGLRenderbuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x10810) "prototype"
            (WebGLRenderbuffer.t_to_js x10811)
    let (create : t -> WebGLRenderbuffer.t) =
      fun (x10812 : t) ->
        WebGLRenderbuffer.t_of_js (Ojs.new_obj (t_to_js x10812) [||])
  end
 and
  WebGLRenderbuffer:sig
                      type t = [ `WebGLRenderbuffer ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `WebGLRenderbuffer ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `WebGLRenderbuffer ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create : unit -> t
                    end =
  struct
    type t = [ `WebGLRenderbuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10814 : Ojs.t) -> t_of_js x10814
    and t_0_to_js : t_0 -> Ojs.t = fun (x10813 : t) -> t_to_js x10813
    type tags = [ `WebGLRenderbuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10817 : Ojs.t) -> intf_of_js __tags_of_js x10817
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10815 : __tags intf) -> intf_to_js __tags_to_js x10815
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer")
             [||])
  end
module rec
  AnonymousInterface115:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLFramebuffer.t
                          val set_prototype : t -> WebGLFramebuffer.t -> unit
                          val create : t -> WebGLFramebuffer.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10820 : Ojs.t) -> x10820
    and t_to_js : t -> Ojs.t = fun (x10819 : Ojs.t) -> x10819
    let (get_prototype : t -> WebGLFramebuffer.t) =
      fun (x10821 : t) ->
        WebGLFramebuffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10821) "prototype")
    let (set_prototype : t -> WebGLFramebuffer.t -> unit) =
      fun (x10822 : t) ->
        fun (x10823 : WebGLFramebuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x10822) "prototype"
            (WebGLFramebuffer.t_to_js x10823)
    let (create : t -> WebGLFramebuffer.t) =
      fun (x10824 : t) ->
        WebGLFramebuffer.t_of_js (Ojs.new_obj (t_to_js x10824) [||])
  end
 and
  WebGLFramebuffer:sig
                     type t = [ `WebGLFramebuffer ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `WebGLFramebuffer ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `WebGLFramebuffer ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `WebGLFramebuffer ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
  struct
    type t = [ `WebGLFramebuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10826 : Ojs.t) -> t_of_js x10826
    and t_0_to_js : t_0 -> Ojs.t = fun (x10825 : t) -> t_to_js x10825
    type tags = [ `WebGLFramebuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLFramebuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10829 : Ojs.t) -> intf_of_js __tags_of_js x10829
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10827 : __tags intf) -> intf_to_js __tags_to_js x10827
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer")
             [||])
  end
module WebGLPowerPreference =
  struct
    type t =
      [ `L_s57_default  | `L_s85_high_performance  | `L_s107_low_power ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10832 : Ojs.t) ->
        let x10833 = x10832 in
        match Ojs.string_of_js x10833 with
        | "default" -> `L_s57_default
        | "high-performance" -> `L_s85_high_performance
        | "low-power" -> `L_s107_low_power
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x10831 :
          [ `L_s57_default  | `L_s85_high_performance  | `L_s107_low_power ])
        ->
        match x10831 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s85_high_performance -> Ojs.string_to_js "high-performance"
        | `L_s107_low_power -> Ojs.string_to_js "low-power"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10835 : Ojs.t) -> t_of_js x10835
    and t_0_to_js : t_0 -> Ojs.t = fun (x10834 : t) -> t_to_js x10834
  end
module WebGLContextAttributes =
  struct
    type t = [ `WebGLContextAttributes ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10837 : Ojs.t) -> t_of_js x10837
    and t_0_to_js : t_0 -> Ojs.t = fun (x10836 : t) -> t_to_js x10836
    type tags = [ `WebGLContextAttributes ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextAttributes ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10840 : Ojs.t) -> intf_of_js __tags_of_js x10840
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10838 : __tags intf) -> intf_to_js __tags_to_js x10838
    let (get_alpha : 'tags this -> bool) =
      fun (x10842 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10842) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x10844 : 'tags this) ->
        fun (x10845 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10844) "alpha"
            (Ojs.bool_to_js x10845)
    let (get_antialias : 'tags this -> bool) =
      fun (x10847 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10847) "antialias")
    let (set_antialias : 'tags this -> bool -> unit) =
      fun (x10849 : 'tags this) ->
        fun (x10850 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10849) "antialias"
            (Ojs.bool_to_js x10850)
    let (get_depth : 'tags this -> bool) =
      fun (x10852 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10852) "depth")
    let (set_depth : 'tags this -> bool -> unit) =
      fun (x10854 : 'tags this) ->
        fun (x10855 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10854) "depth"
            (Ojs.bool_to_js x10855)
    let (get_desynchronized : 'tags this -> bool) =
      fun (x10857 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10857) "desynchronized")
    let (set_desynchronized : 'tags this -> bool -> unit) =
      fun (x10859 : 'tags this) ->
        fun (x10860 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10859) "desynchronized"
            (Ojs.bool_to_js x10860)
    let (get_failIfMajorPerformanceCaveat : 'tags this -> bool) =
      fun (x10862 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10862)
             "failIfMajorPerformanceCaveat")
    let (set_failIfMajorPerformanceCaveat : 'tags this -> bool -> unit) =
      fun (x10864 : 'tags this) ->
        fun (x10865 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10864)
            "failIfMajorPerformanceCaveat" (Ojs.bool_to_js x10865)
    let (get_powerPreference : 'tags this -> WebGLPowerPreference.t) =
      fun (x10867 : 'tags this) ->
        WebGLPowerPreference.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10867) "powerPreference")
    let (set_powerPreference : 'tags this -> WebGLPowerPreference.t -> unit)
      =
      fun (x10869 : 'tags this) ->
        fun (x10870 : WebGLPowerPreference.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10869) "powerPreference"
            (WebGLPowerPreference.t_to_js x10870)
    let (get_premultipliedAlpha : 'tags this -> bool) =
      fun (x10872 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10872)
             "premultipliedAlpha")
    let (set_premultipliedAlpha : 'tags this -> bool -> unit) =
      fun (x10874 : 'tags this) ->
        fun (x10875 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10874)
            "premultipliedAlpha" (Ojs.bool_to_js x10875)
    let (get_preserveDrawingBuffer : 'tags this -> bool) =
      fun (x10877 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10877)
             "preserveDrawingBuffer")
    let (set_preserveDrawingBuffer : 'tags this -> bool -> unit) =
      fun (x10879 : 'tags this) ->
        fun (x10880 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10879)
            "preserveDrawingBuffer" (Ojs.bool_to_js x10880)
    let (get_stencil : 'tags this -> bool) =
      fun (x10882 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10882) "stencil")
    let (set_stencil : 'tags this -> bool -> unit) =
      fun (x10884 : 'tags this) ->
        fun (x10885 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10884) "stencil"
            (Ojs.bool_to_js x10885)
    let cast_from = Obj.magic
  end
module WEBGL_lose_context =
  struct
    type t = [ `WEBGL_lose_context ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10888 : Ojs.t) -> t_of_js x10888
    and t_0_to_js : t_0 -> Ojs.t = fun (x10887 : t) -> t_to_js x10887
    type tags = [ `WEBGL_lose_context ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_lose_context ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10891 : Ojs.t) -> intf_of_js __tags_of_js x10891
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10889 : __tags intf) -> intf_to_js __tags_to_js x10889
    let (loseContext : 'tags this -> unit) =
      fun (x10893 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x10893) "loseContext" [||])
    let (restoreContext : 'tags this -> unit) =
      fun (x10895 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x10895) "restoreContext" [||])
    let cast_from = Obj.magic
  end
module WEBGL_draw_buffers =
  struct
    type t = [ `WEBGL_draw_buffers ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10898 : Ojs.t) -> t_of_js x10898
    and t_0_to_js : t_0 -> Ojs.t = fun (x10897 : t) -> t_to_js x10897
    type tags = [ `WEBGL_draw_buffers ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_draw_buffers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10901 : Ojs.t) -> intf_of_js __tags_of_js x10901
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10899 : __tags intf) -> intf_to_js __tags_to_js x10899
    let (drawBuffersWEBGL : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x10905 : 'tags this) ->
        fun ~buffers:(x10903 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x10905) "drawBuffersWEBGL"
               [|(Ojs.list_to_js GLenum.t_to_js x10903)|])
    let (get_COLOR_ATTACHMENT0_WEBGL : 'tags this -> GLenum.t) =
      fun (x10907 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10907)
             "COLOR_ATTACHMENT0_WEBGL")
    let (get_COLOR_ATTACHMENT10_WEBGL : 'tags this -> GLenum.t) =
      fun (x10909 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10909)
             "COLOR_ATTACHMENT10_WEBGL")
    let (get_COLOR_ATTACHMENT11_WEBGL : 'tags this -> GLenum.t) =
      fun (x10911 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10911)
             "COLOR_ATTACHMENT11_WEBGL")
    let (get_COLOR_ATTACHMENT12_WEBGL : 'tags this -> GLenum.t) =
      fun (x10913 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10913)
             "COLOR_ATTACHMENT12_WEBGL")
    let (get_COLOR_ATTACHMENT13_WEBGL : 'tags this -> GLenum.t) =
      fun (x10915 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10915)
             "COLOR_ATTACHMENT13_WEBGL")
    let (get_COLOR_ATTACHMENT14_WEBGL : 'tags this -> GLenum.t) =
      fun (x10917 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10917)
             "COLOR_ATTACHMENT14_WEBGL")
    let (get_COLOR_ATTACHMENT15_WEBGL : 'tags this -> GLenum.t) =
      fun (x10919 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10919)
             "COLOR_ATTACHMENT15_WEBGL")
    let (get_COLOR_ATTACHMENT1_WEBGL : 'tags this -> GLenum.t) =
      fun (x10921 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10921)
             "COLOR_ATTACHMENT1_WEBGL")
    let (get_COLOR_ATTACHMENT2_WEBGL : 'tags this -> GLenum.t) =
      fun (x10923 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10923)
             "COLOR_ATTACHMENT2_WEBGL")
    let (get_COLOR_ATTACHMENT3_WEBGL : 'tags this -> GLenum.t) =
      fun (x10925 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10925)
             "COLOR_ATTACHMENT3_WEBGL")
    let (get_COLOR_ATTACHMENT4_WEBGL : 'tags this -> GLenum.t) =
      fun (x10927 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10927)
             "COLOR_ATTACHMENT4_WEBGL")
    let (get_COLOR_ATTACHMENT5_WEBGL : 'tags this -> GLenum.t) =
      fun (x10929 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10929)
             "COLOR_ATTACHMENT5_WEBGL")
    let (get_COLOR_ATTACHMENT6_WEBGL : 'tags this -> GLenum.t) =
      fun (x10931 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10931)
             "COLOR_ATTACHMENT6_WEBGL")
    let (get_COLOR_ATTACHMENT7_WEBGL : 'tags this -> GLenum.t) =
      fun (x10933 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10933)
             "COLOR_ATTACHMENT7_WEBGL")
    let (get_COLOR_ATTACHMENT8_WEBGL : 'tags this -> GLenum.t) =
      fun (x10935 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10935)
             "COLOR_ATTACHMENT8_WEBGL")
    let (get_COLOR_ATTACHMENT9_WEBGL : 'tags this -> GLenum.t) =
      fun (x10937 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10937)
             "COLOR_ATTACHMENT9_WEBGL")
    let (get_DRAW_BUFFER0_WEBGL : 'tags this -> GLenum.t) =
      fun (x10939 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10939)
             "DRAW_BUFFER0_WEBGL")
    let (get_DRAW_BUFFER10_WEBGL : 'tags this -> GLenum.t) =
      fun (x10941 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10941)
             "DRAW_BUFFER10_WEBGL")
    let (get_DRAW_BUFFER11_WEBGL : 'tags this -> GLenum.t) =
      fun (x10943 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10943)
             "DRAW_BUFFER11_WEBGL")
    let (get_DRAW_BUFFER12_WEBGL : 'tags this -> GLenum.t) =
      fun (x10945 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10945)
             "DRAW_BUFFER12_WEBGL")
    let (get_DRAW_BUFFER13_WEBGL : 'tags this -> GLenum.t) =
      fun (x10947 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10947)
             "DRAW_BUFFER13_WEBGL")
    let (get_DRAW_BUFFER14_WEBGL : 'tags this -> GLenum.t) =
      fun (x10949 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10949)
             "DRAW_BUFFER14_WEBGL")
    let (get_DRAW_BUFFER15_WEBGL : 'tags this -> GLenum.t) =
      fun (x10951 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10951)
             "DRAW_BUFFER15_WEBGL")
    let (get_DRAW_BUFFER1_WEBGL : 'tags this -> GLenum.t) =
      fun (x10953 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10953)
             "DRAW_BUFFER1_WEBGL")
    let (get_DRAW_BUFFER2_WEBGL : 'tags this -> GLenum.t) =
      fun (x10955 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10955)
             "DRAW_BUFFER2_WEBGL")
    let (get_DRAW_BUFFER3_WEBGL : 'tags this -> GLenum.t) =
      fun (x10957 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10957)
             "DRAW_BUFFER3_WEBGL")
    let (get_DRAW_BUFFER4_WEBGL : 'tags this -> GLenum.t) =
      fun (x10959 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10959)
             "DRAW_BUFFER4_WEBGL")
    let (get_DRAW_BUFFER5_WEBGL : 'tags this -> GLenum.t) =
      fun (x10961 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10961)
             "DRAW_BUFFER5_WEBGL")
    let (get_DRAW_BUFFER6_WEBGL : 'tags this -> GLenum.t) =
      fun (x10963 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10963)
             "DRAW_BUFFER6_WEBGL")
    let (get_DRAW_BUFFER7_WEBGL : 'tags this -> GLenum.t) =
      fun (x10965 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10965)
             "DRAW_BUFFER7_WEBGL")
    let (get_DRAW_BUFFER8_WEBGL : 'tags this -> GLenum.t) =
      fun (x10967 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10967)
             "DRAW_BUFFER8_WEBGL")
    let (get_DRAW_BUFFER9_WEBGL : 'tags this -> GLenum.t) =
      fun (x10969 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10969)
             "DRAW_BUFFER9_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS_WEBGL : 'tags this -> GLenum.t) =
      fun (x10971 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10971)
             "MAX_COLOR_ATTACHMENTS_WEBGL")
    let (get_MAX_DRAW_BUFFERS_WEBGL : 'tags this -> GLenum.t) =
      fun (x10973 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10973)
             "MAX_DRAW_BUFFERS_WEBGL")
    let (drawBuffersWEBGL' :
      'tags this -> buffers:GLenum.t Iterable.t_1 -> unit) =
      fun (x10977 : 'tags this) ->
        fun ~buffers:(x10975 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x10977) "drawBuffersWEBGL"
               [|(Iterable.t_1_to_js GLenum.t_to_js x10975)|])
    let cast_from = Obj.magic
  end
module WEBGL_depth_texture =
  struct
    type t = [ `WEBGL_depth_texture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10980 : Ojs.t) -> t_of_js x10980
    and t_0_to_js : t_0 -> Ojs.t = fun (x10979 : t) -> t_to_js x10979
    type tags = [ `WEBGL_depth_texture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_depth_texture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10983 : Ojs.t) -> intf_of_js __tags_of_js x10983
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10981 : __tags intf) -> intf_to_js __tags_to_js x10981
    let (get_UNSIGNED_INT_24_8_WEBGL : 'tags this -> GLenum.t) =
      fun (x10985 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10985)
             "UNSIGNED_INT_24_8_WEBGL")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface121:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLShader.t
                          val set_prototype : t -> WebGLShader.t -> unit
                          val create : t -> WebGLShader.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10988 : Ojs.t) -> x10988
    and t_to_js : t -> Ojs.t = fun (x10987 : Ojs.t) -> x10987
    let (get_prototype : t -> WebGLShader.t) =
      fun (x10989 : t) ->
        WebGLShader.t_of_js (Ojs.get_prop_ascii (t_to_js x10989) "prototype")
    let (set_prototype : t -> WebGLShader.t -> unit) =
      fun (x10990 : t) ->
        fun (x10991 : WebGLShader.t) ->
          Ojs.set_prop_ascii (t_to_js x10990) "prototype"
            (WebGLShader.t_to_js x10991)
    let (create : t -> WebGLShader.t) =
      fun (x10992 : t) ->
        WebGLShader.t_of_js (Ojs.new_obj (t_to_js x10992) [||])
  end
 and
  WebGLShader:sig
                type t = [ `WebGLShader ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `WebGLShader ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `WebGLShader ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `WebGLShader ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `WebGLShader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10994 : Ojs.t) -> t_of_js x10994
    and t_0_to_js : t_0 -> Ojs.t = fun (x10993 : t) -> t_to_js x10993
    type tags = [ `WebGLShader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLShader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10997 : Ojs.t) -> intf_of_js __tags_of_js x10997
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10995 : __tags intf) -> intf_to_js __tags_to_js x10995
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLShader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLShader") [||])
  end
module WEBGL_debug_shaders =
  struct
    type t = [ `WEBGL_debug_shaders ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11000 : Ojs.t) -> t_of_js x11000
    and t_0_to_js : t_0 -> Ojs.t = fun (x10999 : t) -> t_to_js x10999
    type tags = [ `WEBGL_debug_shaders ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_shaders ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11003 : Ojs.t) -> intf_of_js __tags_of_js x11003
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11001 : __tags intf) -> intf_to_js __tags_to_js x11001
    let (getTranslatedShaderSource :
      'tags this -> shader:WebGLShader.t -> string) =
      fun (x11006 : 'tags this) ->
        fun ~shader:(x11005 : WebGLShader.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11006)
               "getTranslatedShaderSource" [|(WebGLShader.t_to_js x11005)|])
    let cast_from = Obj.magic
  end
module WEBGL_debug_renderer_info =
  struct
    type t = [ `WEBGL_debug_renderer_info ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11009 : Ojs.t) -> t_of_js x11009
    and t_0_to_js : t_0 -> Ojs.t = fun (x11008 : t) -> t_to_js x11008
    type tags = [ `WEBGL_debug_renderer_info ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_debug_renderer_info ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11012 : Ojs.t) -> intf_of_js __tags_of_js x11012
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11010 : __tags intf) -> intf_to_js __tags_to_js x11010
    let (get_UNMASKED_RENDERER_WEBGL : 'tags this -> GLenum.t) =
      fun (x11014 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11014)
             "UNMASKED_RENDERER_WEBGL")
    let (get_UNMASKED_VENDOR_WEBGL : 'tags this -> GLenum.t) =
      fun (x11016 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11016)
             "UNMASKED_VENDOR_WEBGL")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc_srgb =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc_srgb ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11019 : Ojs.t) -> t_of_js x11019
    and t_0_to_js : t_0 -> Ojs.t = fun (x11018 : t) -> t_to_js x11018
    type tags = [ `WEBGL_compressed_texture_s3tc_srgb ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc_srgb ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11022 : Ojs.t) -> intf_of_js __tags_of_js x11022
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11020 : __tags intf) -> intf_to_js __tags_to_js x11020
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x11024 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11024)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x11026 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11026)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x11028 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11028)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_SRGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x11030 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11030)
             "COMPRESSED_SRGB_S3TC_DXT1_EXT")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11033 : Ojs.t) -> t_of_js x11033
    and t_0_to_js : t_0 -> Ojs.t = fun (x11032 : t) -> t_to_js x11032
    type tags = [ `WEBGL_compressed_texture_s3tc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11036 : Ojs.t) -> intf_of_js __tags_of_js x11036
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11034 : __tags intf) -> intf_to_js __tags_to_js x11034
    let (get_COMPRESSED_RGBA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x11038 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11038)
             "COMPRESSED_RGBA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x11040 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11040)
             "COMPRESSED_RGBA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x11042 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11042)
             "COMPRESSED_RGBA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_RGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x11044 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11044)
             "COMPRESSED_RGB_S3TC_DXT1_EXT")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_pvrtc =
  struct
    type t = [ `WEBGL_compressed_texture_pvrtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11047 : Ojs.t) -> t_of_js x11047
    and t_0_to_js : t_0 -> Ojs.t = fun (x11046 : t) -> t_to_js x11046
    type tags = [ `WEBGL_compressed_texture_pvrtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_pvrtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11050 : Ojs.t) -> intf_of_js __tags_of_js x11050
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11048 : __tags intf) -> intf_to_js __tags_to_js x11048
    let (get_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x11052 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11052)
             "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x11054 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11054)
             "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x11056 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11056)
             "COMPRESSED_RGB_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x11058 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11058)
             "COMPRESSED_RGB_PVRTC_4BPPV1_IMG")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc1 =
  struct
    type t = [ `WEBGL_compressed_texture_etc1 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11061 : Ojs.t) -> t_of_js x11061
    and t_0_to_js : t_0 -> Ojs.t = fun (x11060 : t) -> t_to_js x11060
    type tags = [ `WEBGL_compressed_texture_etc1 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc1 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11064 : Ojs.t) -> intf_of_js __tags_of_js x11064
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11062 : __tags intf) -> intf_to_js __tags_to_js x11062
    let (get_COMPRESSED_RGB_ETC1_WEBGL : 'tags this -> GLenum.t) =
      fun (x11066 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11066)
             "COMPRESSED_RGB_ETC1_WEBGL")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc =
  struct
    type t = [ `WEBGL_compressed_texture_etc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11069 : Ojs.t) -> t_of_js x11069
    and t_0_to_js : t_0 -> Ojs.t = fun (x11068 : t) -> t_to_js x11068
    type tags = [ `WEBGL_compressed_texture_etc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11072 : Ojs.t) -> intf_of_js __tags_of_js x11072
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11070 : __tags intf) -> intf_to_js __tags_to_js x11070
    let (get_COMPRESSED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x11074 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11074)
             "COMPRESSED_R11_EAC")
    let (get_COMPRESSED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x11076 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11076)
             "COMPRESSED_RG11_EAC")
    let (get_COMPRESSED_RGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x11078 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11078)
             "COMPRESSED_RGB8_ETC2")
    let (get_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x11080 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11080)
             "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (get_COMPRESSED_RGBA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x11082 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11082)
             "COMPRESSED_RGBA8_ETC2_EAC")
    let (get_COMPRESSED_SIGNED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x11084 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11084)
             "COMPRESSED_SIGNED_R11_EAC")
    let (get_COMPRESSED_SIGNED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x11086 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11086)
             "COMPRESSED_SIGNED_RG11_EAC")
    let (get_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x11088 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11088)
             "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")
    let (get_COMPRESSED_SRGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x11090 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11090)
             "COMPRESSED_SRGB8_ETC2")
    let (get_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x11092 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11092)
             "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_astc =
  struct
    type t = [ `WEBGL_compressed_texture_astc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11095 : Ojs.t) -> t_of_js x11095
    and t_0_to_js : t_0 -> Ojs.t = fun (x11094 : t) -> t_to_js x11094
    type tags = [ `WEBGL_compressed_texture_astc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_astc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11098 : Ojs.t) -> intf_of_js __tags_of_js x11098
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11096 : __tags intf) -> intf_to_js __tags_to_js x11096
    let (getSupportedProfiles : 'tags this -> string list) =
      fun (x11100 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x11100) "getSupportedProfiles" [||])
    let (get_COMPRESSED_RGBA_ASTC_10x10_KHR : 'tags this -> GLenum.t) =
      fun (x11103 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11103)
             "COMPRESSED_RGBA_ASTC_10x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x5_KHR : 'tags this -> GLenum.t) =
      fun (x11105 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11105)
             "COMPRESSED_RGBA_ASTC_10x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x6_KHR : 'tags this -> GLenum.t) =
      fun (x11107 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11107)
             "COMPRESSED_RGBA_ASTC_10x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x8_KHR : 'tags this -> GLenum.t) =
      fun (x11109 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11109)
             "COMPRESSED_RGBA_ASTC_10x8_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x10_KHR : 'tags this -> GLenum.t) =
      fun (x11111 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11111)
             "COMPRESSED_RGBA_ASTC_12x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x12_KHR : 'tags this -> GLenum.t) =
      fun (x11113 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11113)
             "COMPRESSED_RGBA_ASTC_12x12_KHR")
    let (get_COMPRESSED_RGBA_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x11115 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11115)
             "COMPRESSED_RGBA_ASTC_4x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x11117 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11117)
             "COMPRESSED_RGBA_ASTC_5x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x11119 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11119)
             "COMPRESSED_RGBA_ASTC_5x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x11121 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11121)
             "COMPRESSED_RGBA_ASTC_6x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x11123 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11123)
             "COMPRESSED_RGBA_ASTC_6x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x11125 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11125)
             "COMPRESSED_RGBA_ASTC_8x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x11127 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11127)
             "COMPRESSED_RGBA_ASTC_8x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x11129 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11129)
             "COMPRESSED_RGBA_ASTC_8x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x11131 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11131)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : 'tags this -> GLenum.t)
      =
      fun (x11133 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11133)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : 'tags this -> GLenum.t)
      =
      fun (x11135 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11135)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : 'tags this -> GLenum.t)
      =
      fun (x11137 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11137)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x11139 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11139)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : 'tags this -> GLenum.t)
      =
      fun (x11141 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11141)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x11143 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11143)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x11145 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11145)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x11147 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11147)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x11149 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11149)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x11151 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11151)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x11153 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11153)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x11155 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11155)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x11157 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11157)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR")
    let cast_from = Obj.magic
  end
module WEBGL_color_buffer_float =
  struct
    type t = [ `WEBGL_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11160 : Ojs.t) -> t_of_js x11160
    and t_0_to_js : t_0 -> Ojs.t = fun (x11159 : t) -> t_to_js x11159
    type tags = [ `WEBGL_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11163 : Ojs.t) -> intf_of_js __tags_of_js x11163
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11161 : __tags intf) -> intf_to_js __tags_to_js x11161
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x11165 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11165)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGBA32F_EXT : 'tags this -> GLenum.t) =
      fun (x11167 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11167) "RGBA32F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x11169 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11169)
             "UNSIGNED_NORMALIZED_EXT")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface124:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLTexture.t
                          val set_prototype : t -> WebGLTexture.t -> unit
                          val create : t -> WebGLTexture.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x11172 : Ojs.t) -> x11172
    and t_to_js : t -> Ojs.t = fun (x11171 : Ojs.t) -> x11171
    let (get_prototype : t -> WebGLTexture.t) =
      fun (x11173 : t) ->
        WebGLTexture.t_of_js
          (Ojs.get_prop_ascii (t_to_js x11173) "prototype")
    let (set_prototype : t -> WebGLTexture.t -> unit) =
      fun (x11174 : t) ->
        fun (x11175 : WebGLTexture.t) ->
          Ojs.set_prop_ascii (t_to_js x11174) "prototype"
            (WebGLTexture.t_to_js x11175)
    let (create : t -> WebGLTexture.t) =
      fun (x11176 : t) ->
        WebGLTexture.t_of_js (Ojs.new_obj (t_to_js x11176) [||])
  end
 and
  WebGLTexture:sig
                 type t = [ `WebGLTexture ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `WebGLTexture ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `WebGLTexture ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `WebGLTexture ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `WebGLTexture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11178 : Ojs.t) -> t_of_js x11178
    and t_0_to_js : t_0 -> Ojs.t = fun (x11177 : t) -> t_to_js x11177
    type tags = [ `WebGLTexture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLTexture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11181 : Ojs.t) -> intf_of_js __tags_of_js x11181
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11179 : __tags intf) -> intf_to_js __tags_to_js x11179
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLTexture")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLTexture") [||])
  end
module OVR_multiview2 =
  struct
    type t = [ `OVR_multiview2 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11184 : Ojs.t) -> t_of_js x11184
    and t_0_to_js : t_0 -> Ojs.t = fun (x11183 : t) -> t_to_js x11183
    type tags = [ `OVR_multiview2 ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OVR_multiview2 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11187 : Ojs.t) -> intf_of_js __tags_of_js x11187
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11185 : __tags intf) -> intf_to_js __tags_to_js x11185
    let (framebufferTextureMultiviewOVR :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t or_null ->
              level:GLint.t ->
                baseViewIndex:GLint.t -> numViews:GLsizei.t -> unit)
      =
      fun (x11196 : 'tags this) ->
        fun ~target:(x11189 : GLenum.t) ->
          fun ~attachment:(x11190 : GLenum.t) ->
            fun ~texture:(x11191 : WebGLTexture.t or_null) ->
              fun ~level:(x11193 : GLint.t) ->
                fun ~baseViewIndex:(x11194 : GLint.t) ->
                  fun ~numViews:(x11195 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x11196)
                         "framebufferTextureMultiviewOVR"
                         [|(GLenum.t_to_js x11189);(GLenum.t_to_js x11190);(
                           or_null_to_js WebGLTexture.t_to_js x11191);(
                           GLint.t_to_js x11193);(GLint.t_to_js x11194);(
                           GLsizei.t_to_js x11195)|])
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :
      'tags this -> GLenum.t) =
      fun (x11198 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11198)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :
      'tags this -> GLenum.t) =
      fun (x11200 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11200)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR")
    let (get_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :
      'tags this -> GLenum.t) =
      fun (x11202 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11202)
             "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR")
    let (get_MAX_VIEWS_OVR : 'tags this -> GLenum.t) =
      fun (x11204 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11204) "MAX_VIEWS_OVR")
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObjectOES =
  struct
    type t = [ `WebGLVertexArrayObjectOES ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11207 : Ojs.t) -> t_of_js x11207
    and t_0_to_js : t_0 -> Ojs.t = fun (x11206 : t) -> t_to_js x11206
    type tags = [ `WebGLVertexArrayObjectOES ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObjectOES ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11210 : Ojs.t) -> intf_of_js __tags_of_js x11210
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11208 : __tags intf) -> intf_to_js __tags_to_js x11208
    let cast_from = Obj.magic
  end
module OES_vertex_array_object =
  struct
    type t = [ `OES_vertex_array_object ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11213 : Ojs.t) -> t_of_js x11213
    and t_0_to_js : t_0 -> Ojs.t = fun (x11212 : t) -> t_to_js x11212
    type tags = [ `OES_vertex_array_object ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_vertex_array_object ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11216 : Ojs.t) -> intf_of_js __tags_of_js x11216
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11214 : __tags intf) -> intf_to_js __tags_to_js x11214
    let (bindVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t or_null -> unit)
      =
      fun (x11220 : 'tags this) ->
        fun ~arrayObject:(x11218 : WebGLVertexArrayObjectOES.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11220) "bindVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x11218)|])
    let (createVertexArrayOES :
      'tags this -> WebGLVertexArrayObjectOES.t or_null) =
      fun (x11222 : 'tags this) ->
        or_null_of_js WebGLVertexArrayObjectOES.t_of_js
          (Ojs.call (this_to_js Obj.magic x11222) "createVertexArrayOES" [||])
    let (deleteVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t or_null -> unit)
      =
      fun (x11227 : 'tags this) ->
        fun ~arrayObject:(x11225 : WebGLVertexArrayObjectOES.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11227) "deleteVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x11225)|])
    let (isVertexArrayOES :
      'tags this ->
        arrayObject:WebGLVertexArrayObjectOES.t or_null -> GLboolean.t)
      =
      fun (x11231 : 'tags this) ->
        fun ~arrayObject:(x11229 : WebGLVertexArrayObjectOES.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11231) "isVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x11229)|])
    let (get_VERTEX_ARRAY_BINDING_OES : 'tags this -> GLenum.t) =
      fun (x11233 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11233)
             "VERTEX_ARRAY_BINDING_OES")
    let cast_from = Obj.magic
  end
module OES_texture_half_float_linear =
  struct
    type t = [ `OES_texture_half_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11236 : Ojs.t) -> t_of_js x11236
    and t_0_to_js : t_0 -> Ojs.t = fun (x11235 : t) -> t_to_js x11235
    type tags = [ `OES_texture_half_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11239 : Ojs.t) -> intf_of_js __tags_of_js x11239
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11237 : __tags intf) -> intf_to_js __tags_to_js x11237
    let cast_from = Obj.magic
  end
module OES_texture_half_float =
  struct
    type t = [ `OES_texture_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11242 : Ojs.t) -> t_of_js x11242
    and t_0_to_js : t_0 -> Ojs.t = fun (x11241 : t) -> t_to_js x11241
    type tags = [ `OES_texture_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11245 : Ojs.t) -> intf_of_js __tags_of_js x11245
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11243 : __tags intf) -> intf_to_js __tags_to_js x11243
    let (get_HALF_FLOAT_OES : 'tags this -> GLenum.t) =
      fun (x11247 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11247) "HALF_FLOAT_OES")
    let cast_from = Obj.magic
  end
module OES_texture_float_linear =
  struct
    type t = [ `OES_texture_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11250 : Ojs.t) -> t_of_js x11250
    and t_0_to_js : t_0 -> Ojs.t = fun (x11249 : t) -> t_to_js x11249
    type tags = [ `OES_texture_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11253 : Ojs.t) -> intf_of_js __tags_of_js x11253
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11251 : __tags intf) -> intf_to_js __tags_to_js x11251
    let cast_from = Obj.magic
  end
module OES_texture_float =
  struct
    type t = [ `OES_texture_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11256 : Ojs.t) -> t_of_js x11256
    and t_0_to_js : t_0 -> Ojs.t = fun (x11255 : t) -> t_to_js x11255
    type tags = [ `OES_texture_float ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11259 : Ojs.t) -> intf_of_js __tags_of_js x11259
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11257 : __tags intf) -> intf_to_js __tags_to_js x11257
    let cast_from = Obj.magic
  end
module OES_standard_derivatives =
  struct
    type t = [ `OES_standard_derivatives ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11262 : Ojs.t) -> t_of_js x11262
    and t_0_to_js : t_0 -> Ojs.t = fun (x11261 : t) -> t_to_js x11261
    type tags = [ `OES_standard_derivatives ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_standard_derivatives ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11265 : Ojs.t) -> intf_of_js __tags_of_js x11265
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11263 : __tags intf) -> intf_to_js __tags_to_js x11263
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT_OES : 'tags this -> GLenum.t) =
      fun (x11267 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11267)
             "FRAGMENT_SHADER_DERIVATIVE_HINT_OES")
    let cast_from = Obj.magic
  end
module OES_element_index_uint =
  struct
    type t = [ `OES_element_index_uint ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11270 : Ojs.t) -> t_of_js x11270
    and t_0_to_js : t_0 -> Ojs.t = fun (x11269 : t) -> t_to_js x11269
    type tags = [ `OES_element_index_uint ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_element_index_uint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11273 : Ojs.t) -> intf_of_js __tags_of_js x11273
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11271 : __tags intf) -> intf_to_js __tags_to_js x11271
    let cast_from = Obj.magic
  end
module KHR_parallel_shader_compile =
  struct
    type t = [ `KHR_parallel_shader_compile ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11276 : Ojs.t) -> t_of_js x11276
    and t_0_to_js : t_0 -> Ojs.t = fun (x11275 : t) -> t_to_js x11275
    type tags = [ `KHR_parallel_shader_compile ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `KHR_parallel_shader_compile ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11279 : Ojs.t) -> intf_of_js __tags_of_js x11279
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11277 : __tags intf) -> intf_to_js __tags_to_js x11277
    let (get_COMPLETION_STATUS_KHR : 'tags this -> GLenum.t) =
      fun (x11281 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11281)
             "COMPLETION_STATUS_KHR")
    let cast_from = Obj.magic
  end
module GLclampf =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x11284 : Ojs.t) -> Ojs.float_of_js x11284
    and t_to_js : t -> Ojs.t = fun (x11283 : float) -> Ojs.float_to_js x11283
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11286 : Ojs.t) -> t_of_js x11286
    and t_0_to_js : t_0 -> Ojs.t = fun (x11285 : t) -> t_to_js x11285
  end
module EXT_texture_filter_anisotropic =
  struct
    type t = [ `EXT_texture_filter_anisotropic ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11288 : Ojs.t) -> t_of_js x11288
    and t_0_to_js : t_0 -> Ojs.t = fun (x11287 : t) -> t_to_js x11287
    type tags = [ `EXT_texture_filter_anisotropic ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_filter_anisotropic ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11291 : Ojs.t) -> intf_of_js __tags_of_js x11291
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11289 : __tags intf) -> intf_to_js __tags_to_js x11289
    let (get_MAX_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x11293 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11293)
             "MAX_TEXTURE_MAX_ANISOTROPY_EXT")
    let (get_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x11295 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11295)
             "TEXTURE_MAX_ANISOTROPY_EXT")
    let cast_from = Obj.magic
  end
module EXT_shader_texture_lod =
  struct
    type t = [ `EXT_shader_texture_lod ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11298 : Ojs.t) -> t_of_js x11298
    and t_0_to_js : t_0 -> Ojs.t = fun (x11297 : t) -> t_to_js x11297
    type tags = [ `EXT_shader_texture_lod ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_shader_texture_lod ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11301 : Ojs.t) -> intf_of_js __tags_of_js x11301
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11299 : __tags intf) -> intf_to_js __tags_to_js x11299
    let cast_from = Obj.magic
  end
module EXT_sRGB =
  struct
    type t = [ `EXT_sRGB ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11304 : Ojs.t) -> t_of_js x11304
    and t_0_to_js : t_0 -> Ojs.t = fun (x11303 : t) -> t_to_js x11303
    type tags = [ `EXT_sRGB ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_sRGB ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11307 : Ojs.t) -> intf_of_js __tags_of_js x11307
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11305 : __tags intf) -> intf_to_js __tags_to_js x11305
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT :
      'tags this -> GLenum.t) =
      fun (x11309 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11309)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT")
    let (get_SRGB8_ALPHA8_EXT : 'tags this -> GLenum.t) =
      fun (x11311 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11311)
             "SRGB8_ALPHA8_EXT")
    let (get_SRGB_ALPHA_EXT : 'tags this -> GLenum.t) =
      fun (x11313 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11313) "SRGB_ALPHA_EXT")
    let (get_SRGB_EXT : 'tags this -> GLenum.t) =
      fun (x11315 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11315) "SRGB_EXT")
    let cast_from = Obj.magic
  end
module EXT_frag_depth =
  struct
    type t = [ `EXT_frag_depth ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11318 : Ojs.t) -> t_of_js x11318
    and t_0_to_js : t_0 -> Ojs.t = fun (x11317 : t) -> t_to_js x11317
    type tags = [ `EXT_frag_depth ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_frag_depth ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11321 : Ojs.t) -> intf_of_js __tags_of_js x11321
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11319 : __tags intf) -> intf_to_js __tags_to_js x11319
    let cast_from = Obj.magic
  end
module EXT_float_blend =
  struct
    type t = [ `EXT_float_blend ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11324 : Ojs.t) -> t_of_js x11324
    and t_0_to_js : t_0 -> Ojs.t = fun (x11323 : t) -> t_to_js x11323
    type tags = [ `EXT_float_blend ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_float_blend ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11327 : Ojs.t) -> intf_of_js __tags_of_js x11327
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11325 : __tags intf) -> intf_to_js __tags_to_js x11325
    let cast_from = Obj.magic
  end
module EXT_color_buffer_half_float =
  struct
    type t = [ `EXT_color_buffer_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11330 : Ojs.t) -> t_of_js x11330
    and t_0_to_js : t_0 -> Ojs.t = fun (x11329 : t) -> t_to_js x11329
    type tags = [ `EXT_color_buffer_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11333 : Ojs.t) -> intf_of_js __tags_of_js x11333
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11331 : __tags intf) -> intf_to_js __tags_to_js x11331
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x11335 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11335)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGB16F_EXT : 'tags this -> GLenum.t) =
      fun (x11337 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11337) "RGB16F_EXT")
    let (get_RGBA16F_EXT : 'tags this -> GLenum.t) =
      fun (x11339 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11339) "RGBA16F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x11341 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11341)
             "UNSIGNED_NORMALIZED_EXT")
    let cast_from = Obj.magic
  end
module EXT_color_buffer_float =
  struct
    type t = [ `EXT_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11344 : Ojs.t) -> t_of_js x11344
    and t_0_to_js : t_0 -> Ojs.t = fun (x11343 : t) -> t_to_js x11343
    type tags = [ `EXT_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11347 : Ojs.t) -> intf_of_js __tags_of_js x11347
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11345 : __tags intf) -> intf_to_js __tags_to_js x11345
    let cast_from = Obj.magic
  end
module EXT_blend_minmax =
  struct
    type t = [ `EXT_blend_minmax ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11350 : Ojs.t) -> t_of_js x11350
    and t_0_to_js : t_0 -> Ojs.t = fun (x11349 : t) -> t_to_js x11349
    type tags = [ `EXT_blend_minmax ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_blend_minmax ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11353 : Ojs.t) -> intf_of_js __tags_of_js x11353
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11351 : __tags intf) -> intf_to_js __tags_to_js x11351
    let (get_MAX_EXT : 'tags this -> GLenum.t) =
      fun (x11355 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11355) "MAX_EXT")
    let (get_MIN_EXT : 'tags this -> GLenum.t) =
      fun (x11357 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11357) "MIN_EXT")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface116:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLProgram.t
                          val set_prototype : t -> WebGLProgram.t -> unit
                          val create : t -> WebGLProgram.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x11360 : Ojs.t) -> x11360
    and t_to_js : t -> Ojs.t = fun (x11359 : Ojs.t) -> x11359
    let (get_prototype : t -> WebGLProgram.t) =
      fun (x11361 : t) ->
        WebGLProgram.t_of_js
          (Ojs.get_prop_ascii (t_to_js x11361) "prototype")
    let (set_prototype : t -> WebGLProgram.t -> unit) =
      fun (x11362 : t) ->
        fun (x11363 : WebGLProgram.t) ->
          Ojs.set_prop_ascii (t_to_js x11362) "prototype"
            (WebGLProgram.t_to_js x11363)
    let (create : t -> WebGLProgram.t) =
      fun (x11364 : t) ->
        WebGLProgram.t_of_js (Ojs.new_obj (t_to_js x11364) [||])
  end
 and
  WebGLProgram:sig
                 type t = [ `WebGLProgram ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `WebGLProgram ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `WebGLProgram ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `WebGLProgram ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `WebGLProgram ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11366 : Ojs.t) -> t_of_js x11366
    and t_0_to_js : t_0 -> Ojs.t = fun (x11365 : t) -> t_to_js x11365
    type tags = [ `WebGLProgram ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLProgram ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11369 : Ojs.t) -> intf_of_js __tags_of_js x11369
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11367 : __tags intf) -> intf_to_js __tags_to_js x11367
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLProgram")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLProgram") [||])
  end
module rec
  AnonymousInterface113:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLBuffer.t
                          val set_prototype : t -> WebGLBuffer.t -> unit
                          val create : t -> WebGLBuffer.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x11372 : Ojs.t) -> x11372
    and t_to_js : t -> Ojs.t = fun (x11371 : Ojs.t) -> x11371
    let (get_prototype : t -> WebGLBuffer.t) =
      fun (x11373 : t) ->
        WebGLBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x11373) "prototype")
    let (set_prototype : t -> WebGLBuffer.t -> unit) =
      fun (x11374 : t) ->
        fun (x11375 : WebGLBuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x11374) "prototype"
            (WebGLBuffer.t_to_js x11375)
    let (create : t -> WebGLBuffer.t) =
      fun (x11376 : t) ->
        WebGLBuffer.t_of_js (Ojs.new_obj (t_to_js x11376) [||])
  end
 and
  WebGLBuffer:sig
                type t = [ `WebGLBuffer ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `WebGLBuffer ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `WebGLBuffer ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `WebGLBuffer ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `WebGLBuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11378 : Ojs.t) -> t_of_js x11378
    and t_0_to_js : t_0 -> Ojs.t = fun (x11377 : t) -> t_to_js x11377
    type tags = [ `WebGLBuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLBuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11381 : Ojs.t) -> intf_of_js __tags_of_js x11381
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11379 : __tags intf) -> intf_to_js __tags_to_js x11379
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLBuffer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLBuffer") [||])
  end
module rec
  AnonymousInterface112:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLActiveInfo.t
                          val set_prototype : t -> WebGLActiveInfo.t -> unit
                          val create : t -> WebGLActiveInfo.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x11384 : Ojs.t) -> x11384
    and t_to_js : t -> Ojs.t = fun (x11383 : Ojs.t) -> x11383
    let (get_prototype : t -> WebGLActiveInfo.t) =
      fun (x11385 : t) ->
        WebGLActiveInfo.t_of_js
          (Ojs.get_prop_ascii (t_to_js x11385) "prototype")
    let (set_prototype : t -> WebGLActiveInfo.t -> unit) =
      fun (x11386 : t) ->
        fun (x11387 : WebGLActiveInfo.t) ->
          Ojs.set_prop_ascii (t_to_js x11386) "prototype"
            (WebGLActiveInfo.t_to_js x11387)
    let (create : t -> WebGLActiveInfo.t) =
      fun (x11388 : t) ->
        WebGLActiveInfo.t_of_js (Ojs.new_obj (t_to_js x11388) [||])
  end
 and
  WebGLActiveInfo:sig
                    type t = [ `WebGLActiveInfo ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `WebGLActiveInfo ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `WebGLActiveInfo ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `WebGLActiveInfo ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_name : 'tags this -> string
                    val get_size : 'tags this -> GLint.t
                    val get_type : 'tags this -> GLenum.t
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create : unit -> t
                  end =
  struct
    type t = [ `WebGLActiveInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11390 : Ojs.t) -> t_of_js x11390
    and t_0_to_js : t_0 -> Ojs.t = fun (x11389 : t) -> t_to_js x11389
    type tags = [ `WebGLActiveInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLActiveInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11393 : Ojs.t) -> intf_of_js __tags_of_js x11393
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11391 : __tags intf) -> intf_to_js __tags_to_js x11391
    let (get_name : 'tags this -> string) =
      fun (x11395 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11395) "name")
    let (get_size : 'tags this -> GLint.t) =
      fun (x11397 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11397) "size")
    let (get_type : 'tags this -> GLenum.t) =
      fun (x11399 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11399) "type")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") [||])
  end
module GLbitfield =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x11402 : Ojs.t) -> Ojs.float_of_js x11402
    and t_to_js : t -> Ojs.t = fun (x11401 : float) -> Ojs.float_to_js x11401
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11404 : Ojs.t) -> t_of_js x11404
    and t_0_to_js : t_0 -> Ojs.t = fun (x11403 : t) -> t_to_js x11403
  end
module GLuint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x11406 : Ojs.t) -> Ojs.float_of_js x11406
    and t_to_js : t -> Ojs.t = fun (x11405 : float) -> Ojs.float_to_js x11405
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11408 : Ojs.t) -> t_of_js x11408
    and t_0_to_js : t_0 -> Ojs.t = fun (x11407 : t) -> t_to_js x11407
  end
module ANGLE_instanced_arrays =
  struct
    type t = [ `ANGLE_instanced_arrays ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11410 : Ojs.t) -> t_of_js x11410
    and t_0_to_js : t_0 -> Ojs.t = fun (x11409 : t) -> t_to_js x11409
    type tags = [ `ANGLE_instanced_arrays ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ANGLE_instanced_arrays ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11413 : Ojs.t) -> intf_of_js __tags_of_js x11413
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11411 : __tags intf) -> intf_to_js __tags_to_js x11411
    let (drawArraysInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> primcount:GLsizei.t -> unit)
      =
      fun (x11419 : 'tags this) ->
        fun ~mode:(x11415 : GLenum.t) ->
          fun ~first:(x11416 : GLint.t) ->
            fun ~count:(x11417 : GLsizei.t) ->
              fun ~primcount:(x11418 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11419)
                     "drawArraysInstancedANGLE"
                     [|(GLenum.t_to_js x11415);(GLint.t_to_js x11416);(
                       GLsizei.t_to_js x11417);(GLsizei.t_to_js x11418)|])
    let (drawElementsInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> primcount:GLsizei.t -> unit)
      =
      fun (x11426 : 'tags this) ->
        fun ~mode:(x11421 : GLenum.t) ->
          fun ~count:(x11422 : GLsizei.t) ->
            fun ~type_:(x11423 : GLenum.t) ->
              fun ~offset:(x11424 : GLintptr.t) ->
                fun ~primcount:(x11425 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x11426)
                       "drawElementsInstancedANGLE"
                       [|(GLenum.t_to_js x11421);(GLsizei.t_to_js x11422);(
                         GLenum.t_to_js x11423);(GLintptr.t_to_js x11424);(
                         GLsizei.t_to_js x11425)|])
    let (vertexAttribDivisorANGLE :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x11430 : 'tags this) ->
        fun ~index:(x11428 : GLuint.t) ->
          fun ~divisor:(x11429 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11430)
                 "vertexAttribDivisorANGLE"
                 [|(GLuint.t_to_js x11428);(GLuint.t_to_js x11429)|])
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE : 'tags this -> GLenum.t) =
      fun (x11432 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11432)
             "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE")
    let cast_from = Obj.magic
  end
module WebGLRenderingContextBase =
  struct
    type t = [ `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11435 : Ojs.t) -> t_of_js x11435
    and t_0_to_js : t_0 -> Ojs.t = fun (x11434 : t) -> t_to_js x11434
    type tags = [ `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11438 : Ojs.t) -> intf_of_js __tags_of_js x11438
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11436 : __tags intf) -> intf_to_js __tags_to_js x11436
    let (get_drawingBufferHeight : 'tags this -> GLsizei.t) =
      fun (x11440 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11440)
             "drawingBufferHeight")
    let (get_drawingBufferWidth : 'tags this -> GLsizei.t) =
      fun (x11442 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11442)
             "drawingBufferWidth")
    let (activeTexture : 'tags this -> texture:GLenum.t -> unit) =
      fun (x11445 : 'tags this) ->
        fun ~texture:(x11444 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11445) "activeTexture"
               [|(GLenum.t_to_js x11444)|])
    let (attachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x11449 : 'tags this) ->
        fun ~program:(x11447 : WebGLProgram.t) ->
          fun ~shader:(x11448 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11449) "attachShader"
                 [|(WebGLProgram.t_to_js x11447);(WebGLShader.t_to_js x11448)|])
    let (bindAttribLocation :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> name:string -> unit)
      =
      fun (x11454 : 'tags this) ->
        fun ~program:(x11451 : WebGLProgram.t) ->
          fun ~index:(x11452 : GLuint.t) ->
            fun ~name:(x11453 : string) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11454) "bindAttribLocation"
                   [|(WebGLProgram.t_to_js x11451);(GLuint.t_to_js x11452);(
                     Ojs.string_to_js x11453)|])
    let (bindBuffer :
      'tags this -> target:GLenum.t -> buffer:WebGLBuffer.t or_null -> unit)
      =
      fun (x11459 : 'tags this) ->
        fun ~target:(x11456 : GLenum.t) ->
          fun ~buffer:(x11457 : WebGLBuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11459) "bindBuffer"
                 [|(GLenum.t_to_js x11456);(or_null_to_js WebGLBuffer.t_to_js
                                              x11457)|])
    let (bindFramebuffer :
      'tags this ->
        target:GLenum.t -> framebuffer:WebGLFramebuffer.t or_null -> unit)
      =
      fun (x11464 : 'tags this) ->
        fun ~target:(x11461 : GLenum.t) ->
          fun ~framebuffer:(x11462 : WebGLFramebuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11464) "bindFramebuffer"
                 [|(GLenum.t_to_js x11461);(or_null_to_js
                                              WebGLFramebuffer.t_to_js x11462)|])
    let (bindRenderbuffer :
      'tags this ->
        target:GLenum.t -> renderbuffer:WebGLRenderbuffer.t or_null -> unit)
      =
      fun (x11469 : 'tags this) ->
        fun ~target:(x11466 : GLenum.t) ->
          fun ~renderbuffer:(x11467 : WebGLRenderbuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11469) "bindRenderbuffer"
                 [|(GLenum.t_to_js x11466);(or_null_to_js
                                              WebGLRenderbuffer.t_to_js
                                              x11467)|])
    let (bindTexture :
      'tags this -> target:GLenum.t -> texture:WebGLTexture.t or_null -> unit)
      =
      fun (x11474 : 'tags this) ->
        fun ~target:(x11471 : GLenum.t) ->
          fun ~texture:(x11472 : WebGLTexture.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11474) "bindTexture"
                 [|(GLenum.t_to_js x11471);(or_null_to_js
                                              WebGLTexture.t_to_js x11472)|])
    let (blendColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x11480 : 'tags this) ->
        fun ~red:(x11476 : GLclampf.t) ->
          fun ~green:(x11477 : GLclampf.t) ->
            fun ~blue:(x11478 : GLclampf.t) ->
              fun ~alpha:(x11479 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11480) "blendColor"
                     [|(GLclampf.t_to_js x11476);(GLclampf.t_to_js x11477);(
                       GLclampf.t_to_js x11478);(GLclampf.t_to_js x11479)|])
    let (blendEquation : 'tags this -> mode:GLenum.t -> unit) =
      fun (x11483 : 'tags this) ->
        fun ~mode:(x11482 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11483) "blendEquation"
               [|(GLenum.t_to_js x11482)|])
    let (blendEquationSeparate :
      'tags this -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit) =
      fun (x11487 : 'tags this) ->
        fun ~modeRGB:(x11485 : GLenum.t) ->
          fun ~modeAlpha:(x11486 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11487) "blendEquationSeparate"
                 [|(GLenum.t_to_js x11485);(GLenum.t_to_js x11486)|])
    let (blendFunc :
      'tags this -> sfactor:GLenum.t -> dfactor:GLenum.t -> unit) =
      fun (x11491 : 'tags this) ->
        fun ~sfactor:(x11489 : GLenum.t) ->
          fun ~dfactor:(x11490 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11491) "blendFunc"
                 [|(GLenum.t_to_js x11489);(GLenum.t_to_js x11490)|])
    let (blendFuncSeparate :
      'tags this ->
        srcRGB:GLenum.t ->
          dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit)
      =
      fun (x11497 : 'tags this) ->
        fun ~srcRGB:(x11493 : GLenum.t) ->
          fun ~dstRGB:(x11494 : GLenum.t) ->
            fun ~srcAlpha:(x11495 : GLenum.t) ->
              fun ~dstAlpha:(x11496 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11497) "blendFuncSeparate"
                     [|(GLenum.t_to_js x11493);(GLenum.t_to_js x11494);(
                       GLenum.t_to_js x11495);(GLenum.t_to_js x11496)|])
    let (checkFramebufferStatus : 'tags this -> target:GLenum.t -> GLenum.t)
      =
      fun (x11500 : 'tags this) ->
        fun ~target:(x11499 : GLenum.t) ->
          GLenum.t_of_js
            (Ojs.call (this_to_js Obj.magic x11500) "checkFramebufferStatus"
               [|(GLenum.t_to_js x11499)|])
    let (clear : 'tags this -> mask:GLbitfield.t -> unit) =
      fun (x11503 : 'tags this) ->
        fun ~mask:(x11502 : GLbitfield.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11503) "clear"
               [|(GLbitfield.t_to_js x11502)|])
    let (clearColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x11509 : 'tags this) ->
        fun ~red:(x11505 : GLclampf.t) ->
          fun ~green:(x11506 : GLclampf.t) ->
            fun ~blue:(x11507 : GLclampf.t) ->
              fun ~alpha:(x11508 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11509) "clearColor"
                     [|(GLclampf.t_to_js x11505);(GLclampf.t_to_js x11506);(
                       GLclampf.t_to_js x11507);(GLclampf.t_to_js x11508)|])
    let (clearDepth : 'tags this -> depth:GLclampf.t -> unit) =
      fun (x11512 : 'tags this) ->
        fun ~depth:(x11511 : GLclampf.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11512) "clearDepth"
               [|(GLclampf.t_to_js x11511)|])
    let (clearStencil : 'tags this -> s:GLint.t -> unit) =
      fun (x11515 : 'tags this) ->
        fun ~s:(x11514 : GLint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11515) "clearStencil"
               [|(GLint.t_to_js x11514)|])
    let (colorMask :
      'tags this ->
        red:GLboolean.t ->
          green:GLboolean.t -> blue:GLboolean.t -> alpha:GLboolean.t -> unit)
      =
      fun (x11521 : 'tags this) ->
        fun ~red:(x11517 : GLboolean.t) ->
          fun ~green:(x11518 : GLboolean.t) ->
            fun ~blue:(x11519 : GLboolean.t) ->
              fun ~alpha:(x11520 : GLboolean.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11521) "colorMask"
                     [|(GLboolean.t_to_js x11517);(GLboolean.t_to_js x11518);(
                       GLboolean.t_to_js x11519);(GLboolean.t_to_js x11520)|])
    let (compileShader : 'tags this -> shader:WebGLShader.t -> unit) =
      fun (x11524 : 'tags this) ->
        fun ~shader:(x11523 : WebGLShader.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11524) "compileShader"
               [|(WebGLShader.t_to_js x11523)|])
    let (copyTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              x:GLint.t ->
                y:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t -> border:GLint.t -> unit)
      =
      fun (x11534 : 'tags this) ->
        fun ~target:(x11526 : GLenum.t) ->
          fun ~level:(x11527 : GLint.t) ->
            fun ~internalformat:(x11528 : GLenum.t) ->
              fun ~x:(x11529 : GLint.t) ->
                fun ~y:(x11530 : GLint.t) ->
                  fun ~width:(x11531 : GLsizei.t) ->
                    fun ~height:(x11532 : GLsizei.t) ->
                      fun ~border:(x11533 : GLint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x11534)
                             "copyTexImage2D"
                             [|(GLenum.t_to_js x11526);(GLint.t_to_js x11527);(
                               GLenum.t_to_js x11528);(GLint.t_to_js x11529);(
                               GLint.t_to_js x11530);(GLsizei.t_to_js x11531);(
                               GLsizei.t_to_js x11532);(GLint.t_to_js x11533)|])
    let (copyTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                x:GLint.t ->
                  y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x11544 : 'tags this) ->
        fun ~target:(x11536 : GLenum.t) ->
          fun ~level:(x11537 : GLint.t) ->
            fun ~xoffset:(x11538 : GLint.t) ->
              fun ~yoffset:(x11539 : GLint.t) ->
                fun ~x:(x11540 : GLint.t) ->
                  fun ~y:(x11541 : GLint.t) ->
                    fun ~width:(x11542 : GLsizei.t) ->
                      fun ~height:(x11543 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x11544)
                             "copyTexSubImage2D"
                             [|(GLenum.t_to_js x11536);(GLint.t_to_js x11537);(
                               GLint.t_to_js x11538);(GLint.t_to_js x11539);(
                               GLint.t_to_js x11540);(GLint.t_to_js x11541);(
                               GLsizei.t_to_js x11542);(GLsizei.t_to_js
                                                          x11543)|])
    let (createBuffer : 'tags this -> WebGLBuffer.t or_null) =
      fun (x11546 : 'tags this) ->
        or_null_of_js WebGLBuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x11546) "createBuffer" [||])
    let (createFramebuffer : 'tags this -> WebGLFramebuffer.t or_null) =
      fun (x11549 : 'tags this) ->
        or_null_of_js WebGLFramebuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x11549) "createFramebuffer" [||])
    let (createProgram : 'tags this -> WebGLProgram.t or_null) =
      fun (x11552 : 'tags this) ->
        or_null_of_js WebGLProgram.t_of_js
          (Ojs.call (this_to_js Obj.magic x11552) "createProgram" [||])
    let (createRenderbuffer : 'tags this -> WebGLRenderbuffer.t or_null) =
      fun (x11555 : 'tags this) ->
        or_null_of_js WebGLRenderbuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x11555) "createRenderbuffer" [||])
    let (createShader :
      'tags this -> type_:GLenum.t -> WebGLShader.t or_null) =
      fun (x11559 : 'tags this) ->
        fun ~type_:(x11558 : GLenum.t) ->
          or_null_of_js WebGLShader.t_of_js
            (Ojs.call (this_to_js Obj.magic x11559) "createShader"
               [|(GLenum.t_to_js x11558)|])
    let (createTexture : 'tags this -> WebGLTexture.t or_null) =
      fun (x11562 : 'tags this) ->
        or_null_of_js WebGLTexture.t_of_js
          (Ojs.call (this_to_js Obj.magic x11562) "createTexture" [||])
    let (cullFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x11566 : 'tags this) ->
        fun ~mode:(x11565 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11566) "cullFace"
               [|(GLenum.t_to_js x11565)|])
    let (deleteBuffer : 'tags this -> buffer:WebGLBuffer.t or_null -> unit) =
      fun (x11570 : 'tags this) ->
        fun ~buffer:(x11568 : WebGLBuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11570) "deleteBuffer"
               [|(or_null_to_js WebGLBuffer.t_to_js x11568)|])
    let (deleteFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t or_null -> unit) =
      fun (x11574 : 'tags this) ->
        fun ~framebuffer:(x11572 : WebGLFramebuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11574) "deleteFramebuffer"
               [|(or_null_to_js WebGLFramebuffer.t_to_js x11572)|])
    let (deleteProgram :
      'tags this -> program:WebGLProgram.t or_null -> unit) =
      fun (x11578 : 'tags this) ->
        fun ~program:(x11576 : WebGLProgram.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11578) "deleteProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x11576)|])
    let (deleteRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t or_null -> unit) =
      fun (x11582 : 'tags this) ->
        fun ~renderbuffer:(x11580 : WebGLRenderbuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11582) "deleteRenderbuffer"
               [|(or_null_to_js WebGLRenderbuffer.t_to_js x11580)|])
    let (deleteShader : 'tags this -> shader:WebGLShader.t or_null -> unit) =
      fun (x11586 : 'tags this) ->
        fun ~shader:(x11584 : WebGLShader.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11586) "deleteShader"
               [|(or_null_to_js WebGLShader.t_to_js x11584)|])
    let (deleteTexture :
      'tags this -> texture:WebGLTexture.t or_null -> unit) =
      fun (x11590 : 'tags this) ->
        fun ~texture:(x11588 : WebGLTexture.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11590) "deleteTexture"
               [|(or_null_to_js WebGLTexture.t_to_js x11588)|])
    let (depthFunc : 'tags this -> func:GLenum.t -> unit) =
      fun (x11593 : 'tags this) ->
        fun ~func:(x11592 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11593) "depthFunc"
               [|(GLenum.t_to_js x11592)|])
    let (depthMask : 'tags this -> flag:GLboolean.t -> unit) =
      fun (x11596 : 'tags this) ->
        fun ~flag:(x11595 : GLboolean.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11596) "depthMask"
               [|(GLboolean.t_to_js x11595)|])
    let (depthRange :
      'tags this -> zNear:GLclampf.t -> zFar:GLclampf.t -> unit) =
      fun (x11600 : 'tags this) ->
        fun ~zNear:(x11598 : GLclampf.t) ->
          fun ~zFar:(x11599 : GLclampf.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11600) "depthRange"
                 [|(GLclampf.t_to_js x11598);(GLclampf.t_to_js x11599)|])
    let (detachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x11604 : 'tags this) ->
        fun ~program:(x11602 : WebGLProgram.t) ->
          fun ~shader:(x11603 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11604) "detachShader"
                 [|(WebGLProgram.t_to_js x11602);(WebGLShader.t_to_js x11603)|])
    let (disable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x11607 : 'tags this) ->
        fun ~cap:(x11606 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11607) "disable"
               [|(GLenum.t_to_js x11606)|])
    let (disableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x11610 : 'tags this) ->
        fun ~index:(x11609 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11610)
               "disableVertexAttribArray" [|(GLuint.t_to_js x11609)|])
    let (drawArrays :
      'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> unit)
      =
      fun (x11615 : 'tags this) ->
        fun ~mode:(x11612 : GLenum.t) ->
          fun ~first:(x11613 : GLint.t) ->
            fun ~count:(x11614 : GLsizei.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11615) "drawArrays"
                   [|(GLenum.t_to_js x11612);(GLint.t_to_js x11613);(
                     GLsizei.t_to_js x11614)|])
    let (drawElements :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x11621 : 'tags this) ->
        fun ~mode:(x11617 : GLenum.t) ->
          fun ~count:(x11618 : GLsizei.t) ->
            fun ~type_:(x11619 : GLenum.t) ->
              fun ~offset:(x11620 : GLintptr.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11621) "drawElements"
                     [|(GLenum.t_to_js x11617);(GLsizei.t_to_js x11618);(
                       GLenum.t_to_js x11619);(GLintptr.t_to_js x11620)|])
    let (enable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x11624 : 'tags this) ->
        fun ~cap:(x11623 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11624) "enable"
               [|(GLenum.t_to_js x11623)|])
    let (enableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x11627 : 'tags this) ->
        fun ~index:(x11626 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11627) "enableVertexAttribArray"
               [|(GLuint.t_to_js x11626)|])
    let (finish : 'tags this -> unit) =
      fun (x11629 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11629) "finish" [||])
    let (flush : 'tags this -> unit) =
      fun (x11631 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11631) "flush" [||])
    let (framebufferRenderbuffer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            renderbuffertarget:GLenum.t ->
              renderbuffer:WebGLRenderbuffer.t or_null -> unit)
      =
      fun (x11638 : 'tags this) ->
        fun ~target:(x11633 : GLenum.t) ->
          fun ~attachment:(x11634 : GLenum.t) ->
            fun ~renderbuffertarget:(x11635 : GLenum.t) ->
              fun ~renderbuffer:(x11636 : WebGLRenderbuffer.t or_null) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11638)
                     "framebufferRenderbuffer"
                     [|(GLenum.t_to_js x11633);(GLenum.t_to_js x11634);(
                       GLenum.t_to_js x11635);(or_null_to_js
                                                 WebGLRenderbuffer.t_to_js
                                                 x11636)|])
    let (framebufferTexture2D :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            textarget:GLenum.t ->
              texture:WebGLTexture.t or_null -> level:GLint.t -> unit)
      =
      fun (x11646 : 'tags this) ->
        fun ~target:(x11640 : GLenum.t) ->
          fun ~attachment:(x11641 : GLenum.t) ->
            fun ~textarget:(x11642 : GLenum.t) ->
              fun ~texture:(x11643 : WebGLTexture.t or_null) ->
                fun ~level:(x11645 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x11646)
                       "framebufferTexture2D"
                       [|(GLenum.t_to_js x11640);(GLenum.t_to_js x11641);(
                         GLenum.t_to_js x11642);(or_null_to_js
                                                   WebGLTexture.t_to_js
                                                   x11643);(GLint.t_to_js
                                                              x11645)|])
    let (frontFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x11649 : 'tags this) ->
        fun ~mode:(x11648 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11649) "frontFace"
               [|(GLenum.t_to_js x11648)|])
    let (generateMipmap : 'tags this -> target:GLenum.t -> unit) =
      fun (x11652 : 'tags this) ->
        fun ~target:(x11651 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11652) "generateMipmap"
               [|(GLenum.t_to_js x11651)|])
    let (getActiveAttrib :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x11656 : 'tags this) ->
        fun ~program:(x11654 : WebGLProgram.t) ->
          fun ~index:(x11655 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x11656) "getActiveAttrib"
                 [|(WebGLProgram.t_to_js x11654);(GLuint.t_to_js x11655)|])
    let (getActiveUniform :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x11661 : 'tags this) ->
        fun ~program:(x11659 : WebGLProgram.t) ->
          fun ~index:(x11660 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x11661) "getActiveUniform"
                 [|(WebGLProgram.t_to_js x11659);(GLuint.t_to_js x11660)|])
    let (getAttachedShaders :
      'tags this -> program:WebGLProgram.t -> WebGLShader.t list or_null) =
      fun (x11665 : 'tags this) ->
        fun ~program:(x11664 : WebGLProgram.t) ->
          or_null_of_js
            (fun (x11667 : Ojs.t) ->
               Ojs.list_of_js WebGLShader.t_of_js x11667)
            (Ojs.call (this_to_js Obj.magic x11665) "getAttachedShaders"
               [|(WebGLProgram.t_to_js x11664)|])
    let (getAttribLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x11671 : 'tags this) ->
        fun ~program:(x11669 : WebGLProgram.t) ->
          fun ~name:(x11670 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x11671) "getAttribLocation"
                 [|(WebGLProgram.t_to_js x11669);(Ojs.string_to_js x11670)|])
    let (getBufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x11675 : 'tags this) ->
        fun ~target:(x11673 : GLenum.t) ->
          fun ~pname:(x11674 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11675) "getBufferParameter"
                 [|(GLenum.t_to_js x11673);(GLenum.t_to_js x11674)|])
    let (getContextAttributes :
      'tags this -> WebGLContextAttributes.t or_null) =
      fun (x11677 : 'tags this) ->
        or_null_of_js WebGLContextAttributes.t_of_js
          (Ojs.call (this_to_js Obj.magic x11677) "getContextAttributes" [||])
    let (getError : 'tags this -> GLenum.t) =
      fun (x11680 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.call (this_to_js Obj.magic x11680) "getError" [||])
    let (getExtension :
      'tags this ->
        extensionName:[ `L_s2_EXT_blend_minmax ] ->
          EXT_blend_minmax.t or_null)
      =
      fun (x11683 : 'tags this) ->
        fun ~extensionName:(x11682 : [ `L_s2_EXT_blend_minmax ]) ->
          or_null_of_js EXT_blend_minmax.t_of_js
            (Ojs.call (this_to_js Obj.magic x11683) "getExtension"
               [|((match x11682 with
                   | `L_s2_EXT_blend_minmax ->
                       Ojs.string_to_js "EXT_blend_minmax"))|])
    let (getExtension' :
      'tags this ->
        extensionName:[ `L_s3_EXT_color_buffer_float ] ->
          EXT_color_buffer_float.t or_null)
      =
      fun (x11687 : 'tags this) ->
        fun ~extensionName:(x11686 : [ `L_s3_EXT_color_buffer_float ]) ->
          or_null_of_js EXT_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x11687) "getExtension"
               [|((match x11686 with
                   | `L_s3_EXT_color_buffer_float ->
                       Ojs.string_to_js "EXT_color_buffer_float"))|])
    let (getExtension'' :
      'tags this ->
        extensionName:[ `L_s4_EXT_color_buffer_half_float ] ->
          EXT_color_buffer_half_float.t or_null)
      =
      fun (x11691 : 'tags this) ->
        fun ~extensionName:(x11690 : [ `L_s4_EXT_color_buffer_half_float ])
          ->
          or_null_of_js EXT_color_buffer_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x11691) "getExtension"
               [|((match x11690 with
                   | `L_s4_EXT_color_buffer_half_float ->
                       Ojs.string_to_js "EXT_color_buffer_half_float"))|])
    let (getExtension''' :
      'tags this ->
        extensionName:[ `L_s5_EXT_float_blend ] -> EXT_float_blend.t or_null)
      =
      fun (x11695 : 'tags this) ->
        fun ~extensionName:(x11694 : [ `L_s5_EXT_float_blend ]) ->
          or_null_of_js EXT_float_blend.t_of_js
            (Ojs.call (this_to_js Obj.magic x11695) "getExtension"
               [|((match x11694 with
                   | `L_s5_EXT_float_blend ->
                       Ojs.string_to_js "EXT_float_blend"))|])
    let (getExtension'''' :
      'tags this ->
        extensionName:[ `L_s9_EXT_texture_filter_anisotropic ] ->
          EXT_texture_filter_anisotropic.t or_null)
      =
      fun (x11699 : 'tags this) ->
        fun
          ~extensionName:(x11698 : [ `L_s9_EXT_texture_filter_anisotropic ])
          ->
          or_null_of_js EXT_texture_filter_anisotropic.t_of_js
            (Ojs.call (this_to_js Obj.magic x11699) "getExtension"
               [|((match x11698 with
                   | `L_s9_EXT_texture_filter_anisotropic ->
                       Ojs.string_to_js "EXT_texture_filter_anisotropic"))|])
    let (getExtension''''' :
      'tags this ->
        extensionName:[ `L_s6_EXT_frag_depth ] -> EXT_frag_depth.t or_null)
      =
      fun (x11703 : 'tags this) ->
        fun ~extensionName:(x11702 : [ `L_s6_EXT_frag_depth ]) ->
          or_null_of_js EXT_frag_depth.t_of_js
            (Ojs.call (this_to_js Obj.magic x11703) "getExtension"
               [|((match x11702 with
                   | `L_s6_EXT_frag_depth ->
                       Ojs.string_to_js "EXT_frag_depth"))|])
    let (getExtension'''''' :
      'tags this ->
        extensionName:[ `L_s8_EXT_shader_texture_lod ] ->
          EXT_shader_texture_lod.t or_null)
      =
      fun (x11707 : 'tags this) ->
        fun ~extensionName:(x11706 : [ `L_s8_EXT_shader_texture_lod ]) ->
          or_null_of_js EXT_shader_texture_lod.t_of_js
            (Ojs.call (this_to_js Obj.magic x11707) "getExtension"
               [|((match x11706 with
                   | `L_s8_EXT_shader_texture_lod ->
                       Ojs.string_to_js "EXT_shader_texture_lod"))|])
    let (getExtension''''''' :
      'tags this -> extensionName:[ `L_s7_EXT_sRGB ] -> EXT_sRGB.t or_null) =
      fun (x11711 : 'tags this) ->
        fun ~extensionName:(x11710 : [ `L_s7_EXT_sRGB ]) ->
          or_null_of_js EXT_sRGB.t_of_js
            (Ojs.call (this_to_js Obj.magic x11711) "getExtension"
               [|((match x11710 with
                   | `L_s7_EXT_sRGB -> Ojs.string_to_js "EXT_sRGB"))|])
    let (getExtension'''''''' :
      'tags this ->
        extensionName:[ `L_s10_KHR_parallel_shader_compile ] ->
          KHR_parallel_shader_compile.t or_null)
      =
      fun (x11715 : 'tags this) ->
        fun ~extensionName:(x11714 : [ `L_s10_KHR_parallel_shader_compile ])
          ->
          or_null_of_js KHR_parallel_shader_compile.t_of_js
            (Ojs.call (this_to_js Obj.magic x11715) "getExtension"
               [|((match x11714 with
                   | `L_s10_KHR_parallel_shader_compile ->
                       Ojs.string_to_js "KHR_parallel_shader_compile"))|])
    let (getExtension''''''''' :
      'tags this ->
        extensionName:[ `L_s17_OES_vertex_array_object ] ->
          OES_vertex_array_object.t or_null)
      =
      fun (x11719 : 'tags this) ->
        fun ~extensionName:(x11718 : [ `L_s17_OES_vertex_array_object ]) ->
          or_null_of_js OES_vertex_array_object.t_of_js
            (Ojs.call (this_to_js Obj.magic x11719) "getExtension"
               [|((match x11718 with
                   | `L_s17_OES_vertex_array_object ->
                       Ojs.string_to_js "OES_vertex_array_object"))|])
    let (getExtension'''''''''' :
      'tags this ->
        extensionName:[ `L_s18_OVR_multiview2 ] -> OVR_multiview2.t or_null)
      =
      fun (x11723 : 'tags this) ->
        fun ~extensionName:(x11722 : [ `L_s18_OVR_multiview2 ]) ->
          or_null_of_js OVR_multiview2.t_of_js
            (Ojs.call (this_to_js Obj.magic x11723) "getExtension"
               [|((match x11722 with
                   | `L_s18_OVR_multiview2 ->
                       Ojs.string_to_js "OVR_multiview2"))|])
    let (getExtension''''''''''' :
      'tags this ->
        extensionName:[ `L_s19_WEBGL_color_buffer_float ] ->
          WEBGL_color_buffer_float.t or_null)
      =
      fun (x11727 : 'tags this) ->
        fun ~extensionName:(x11726 : [ `L_s19_WEBGL_color_buffer_float ]) ->
          or_null_of_js WEBGL_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x11727) "getExtension"
               [|((match x11726 with
                   | `L_s19_WEBGL_color_buffer_float ->
                       Ojs.string_to_js "WEBGL_color_buffer_float"))|])
    let (getExtension'''''''''''' :
      'tags this ->
        extensionName:[ `L_s20_WEBGL_compressed_texture_astc ] ->
          WEBGL_compressed_texture_astc.t or_null)
      =
      fun (x11731 : 'tags this) ->
        fun
          ~extensionName:(x11730 : [ `L_s20_WEBGL_compressed_texture_astc ])
          ->
          or_null_of_js WEBGL_compressed_texture_astc.t_of_js
            (Ojs.call (this_to_js Obj.magic x11731) "getExtension"
               [|((match x11730 with
                   | `L_s20_WEBGL_compressed_texture_astc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_astc"))|])
    let (getExtension''''''''''''' :
      'tags this ->
        extensionName:[ `L_s21_WEBGL_compressed_texture_etc ] ->
          WEBGL_compressed_texture_etc.t or_null)
      =
      fun (x11735 : 'tags this) ->
        fun ~extensionName:(x11734 : [ `L_s21_WEBGL_compressed_texture_etc ])
          ->
          or_null_of_js WEBGL_compressed_texture_etc.t_of_js
            (Ojs.call (this_to_js Obj.magic x11735) "getExtension"
               [|((match x11734 with
                   | `L_s21_WEBGL_compressed_texture_etc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc"))|])
    let (getExtension'''''''''''''' :
      'tags this ->
        extensionName:[ `L_s22_WEBGL_compressed_texture_etc1 ] ->
          WEBGL_compressed_texture_etc1.t or_null)
      =
      fun (x11739 : 'tags this) ->
        fun
          ~extensionName:(x11738 : [ `L_s22_WEBGL_compressed_texture_etc1 ])
          ->
          or_null_of_js WEBGL_compressed_texture_etc1.t_of_js
            (Ojs.call (this_to_js Obj.magic x11739) "getExtension"
               [|((match x11738 with
                   | `L_s22_WEBGL_compressed_texture_etc1 ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc1"))|])
    let (getExtension''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s23_WEBGL_compressed_texture_pvrtc ] ->
          WEBGL_compressed_texture_pvrtc.t or_null)
      =
      fun (x11743 : 'tags this) ->
        fun
          ~extensionName:(x11742 : [ `L_s23_WEBGL_compressed_texture_pvrtc ])
          ->
          or_null_of_js WEBGL_compressed_texture_pvrtc.t_of_js
            (Ojs.call (this_to_js Obj.magic x11743) "getExtension"
               [|((match x11742 with
                   | `L_s23_WEBGL_compressed_texture_pvrtc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_pvrtc"))|])
    let (getExtension'''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s25_WEBGL_compressed_texture_s3tc_srgb ] ->
          WEBGL_compressed_texture_s3tc_srgb.t or_null)
      =
      fun (x11747 : 'tags this) ->
        fun
          ~extensionName:(x11746 :
                           [ `L_s25_WEBGL_compressed_texture_s3tc_srgb ])
          ->
          or_null_of_js WEBGL_compressed_texture_s3tc_srgb.t_of_js
            (Ojs.call (this_to_js Obj.magic x11747) "getExtension"
               [|((match x11746 with
                   | `L_s25_WEBGL_compressed_texture_s3tc_srgb ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc_srgb"))|])
    let (getExtension''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s27_WEBGL_debug_shaders ] ->
          WEBGL_debug_shaders.t or_null)
      =
      fun (x11751 : 'tags this) ->
        fun ~extensionName:(x11750 : [ `L_s27_WEBGL_debug_shaders ]) ->
          or_null_of_js WEBGL_debug_shaders.t_of_js
            (Ojs.call (this_to_js Obj.magic x11751) "getExtension"
               [|((match x11750 with
                   | `L_s27_WEBGL_debug_shaders ->
                       Ojs.string_to_js "WEBGL_debug_shaders"))|])
    let (getExtension'''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s29_WEBGL_draw_buffers ] ->
          WEBGL_draw_buffers.t or_null)
      =
      fun (x11755 : 'tags this) ->
        fun ~extensionName:(x11754 : [ `L_s29_WEBGL_draw_buffers ]) ->
          or_null_of_js WEBGL_draw_buffers.t_of_js
            (Ojs.call (this_to_js Obj.magic x11755) "getExtension"
               [|((match x11754 with
                   | `L_s29_WEBGL_draw_buffers ->
                       Ojs.string_to_js "WEBGL_draw_buffers"))|])
    let (getExtension''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s30_WEBGL_lose_context ] ->
          WEBGL_lose_context.t or_null)
      =
      fun (x11759 : 'tags this) ->
        fun ~extensionName:(x11758 : [ `L_s30_WEBGL_lose_context ]) ->
          or_null_of_js WEBGL_lose_context.t_of_js
            (Ojs.call (this_to_js Obj.magic x11759) "getExtension"
               [|((match x11758 with
                   | `L_s30_WEBGL_lose_context ->
                       Ojs.string_to_js "WEBGL_lose_context"))|])
    let (getExtension'''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s28_WEBGL_depth_texture ] ->
          WEBGL_depth_texture.t or_null)
      =
      fun (x11763 : 'tags this) ->
        fun ~extensionName:(x11762 : [ `L_s28_WEBGL_depth_texture ]) ->
          or_null_of_js WEBGL_depth_texture.t_of_js
            (Ojs.call (this_to_js Obj.magic x11763) "getExtension"
               [|((match x11762 with
                   | `L_s28_WEBGL_depth_texture ->
                       Ojs.string_to_js "WEBGL_depth_texture"))|])
    let (getExtension''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s26_WEBGL_debug_renderer_info ] ->
          WEBGL_debug_renderer_info.t or_null)
      =
      fun (x11767 : 'tags this) ->
        fun ~extensionName:(x11766 : [ `L_s26_WEBGL_debug_renderer_info ]) ->
          or_null_of_js WEBGL_debug_renderer_info.t_of_js
            (Ojs.call (this_to_js Obj.magic x11767) "getExtension"
               [|((match x11766 with
                   | `L_s26_WEBGL_debug_renderer_info ->
                       Ojs.string_to_js "WEBGL_debug_renderer_info"))|])
    let (getExtension'''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s24_WEBGL_compressed_texture_s3tc ] ->
          WEBGL_compressed_texture_s3tc.t or_null)
      =
      fun (x11771 : 'tags this) ->
        fun
          ~extensionName:(x11770 : [ `L_s24_WEBGL_compressed_texture_s3tc ])
          ->
          or_null_of_js WEBGL_compressed_texture_s3tc.t_of_js
            (Ojs.call (this_to_js Obj.magic x11771) "getExtension"
               [|((match x11770 with
                   | `L_s24_WEBGL_compressed_texture_s3tc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc"))|])
    let (getExtension''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s16_OES_texture_half_float_linear ] ->
          OES_texture_half_float_linear.t or_null)
      =
      fun (x11775 : 'tags this) ->
        fun
          ~extensionName:(x11774 : [ `L_s16_OES_texture_half_float_linear ])
          ->
          or_null_of_js OES_texture_half_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x11775) "getExtension"
               [|((match x11774 with
                   | `L_s16_OES_texture_half_float_linear ->
                       Ojs.string_to_js "OES_texture_half_float_linear"))|])
    let (getExtension'''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s15_OES_texture_half_float ] ->
          OES_texture_half_float.t or_null)
      =
      fun (x11779 : 'tags this) ->
        fun ~extensionName:(x11778 : [ `L_s15_OES_texture_half_float ]) ->
          or_null_of_js OES_texture_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x11779) "getExtension"
               [|((match x11778 with
                   | `L_s15_OES_texture_half_float ->
                       Ojs.string_to_js "OES_texture_half_float"))|])
    let (getExtension''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s14_OES_texture_float_linear ] ->
          OES_texture_float_linear.t or_null)
      =
      fun (x11783 : 'tags this) ->
        fun ~extensionName:(x11782 : [ `L_s14_OES_texture_float_linear ]) ->
          or_null_of_js OES_texture_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x11783) "getExtension"
               [|((match x11782 with
                   | `L_s14_OES_texture_float_linear ->
                       Ojs.string_to_js "OES_texture_float_linear"))|])
    let (getExtension'''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s13_OES_texture_float ] ->
          OES_texture_float.t or_null)
      =
      fun (x11787 : 'tags this) ->
        fun ~extensionName:(x11786 : [ `L_s13_OES_texture_float ]) ->
          or_null_of_js OES_texture_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x11787) "getExtension"
               [|((match x11786 with
                   | `L_s13_OES_texture_float ->
                       Ojs.string_to_js "OES_texture_float"))|])
    let (getExtension''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s12_OES_standard_derivatives ] ->
          OES_standard_derivatives.t or_null)
      =
      fun (x11791 : 'tags this) ->
        fun ~extensionName:(x11790 : [ `L_s12_OES_standard_derivatives ]) ->
          or_null_of_js OES_standard_derivatives.t_of_js
            (Ojs.call (this_to_js Obj.magic x11791) "getExtension"
               [|((match x11790 with
                   | `L_s12_OES_standard_derivatives ->
                       Ojs.string_to_js "OES_standard_derivatives"))|])
    let (getExtension'''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s11_OES_element_index_uint ] ->
          OES_element_index_uint.t or_null)
      =
      fun (x11795 : 'tags this) ->
        fun ~extensionName:(x11794 : [ `L_s11_OES_element_index_uint ]) ->
          or_null_of_js OES_element_index_uint.t_of_js
            (Ojs.call (this_to_js Obj.magic x11795) "getExtension"
               [|((match x11794 with
                   | `L_s11_OES_element_index_uint ->
                       Ojs.string_to_js "OES_element_index_uint"))|])
    let (getExtension''''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s1_ANGLE_instanced_arrays ] ->
          ANGLE_instanced_arrays.t or_null)
      =
      fun (x11799 : 'tags this) ->
        fun ~extensionName:(x11798 : [ `L_s1_ANGLE_instanced_arrays ]) ->
          or_null_of_js ANGLE_instanced_arrays.t_of_js
            (Ojs.call (this_to_js Obj.magic x11799) "getExtension"
               [|((match x11798 with
                   | `L_s1_ANGLE_instanced_arrays ->
                       Ojs.string_to_js "ANGLE_instanced_arrays"))|])
    let (getExtension'''''''''''''''''''''''''''''' :
      'tags this -> name:string -> any) =
      fun (x11803 : 'tags this) ->
        fun ~name:(x11802 : string) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x11803) "getExtension"
               [|(Ojs.string_to_js x11802)|])
    let (getFramebufferAttachmentParameter :
      'tags this ->
        target:GLenum.t -> attachment:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x11808 : 'tags this) ->
        fun ~target:(x11805 : GLenum.t) ->
          fun ~attachment:(x11806 : GLenum.t) ->
            fun ~pname:(x11807 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x11808)
                   "getFramebufferAttachmentParameter"
                   [|(GLenum.t_to_js x11805);(GLenum.t_to_js x11806);(
                     GLenum.t_to_js x11807)|])
    let (getParameter : 'tags this -> pname:GLenum.t -> any) =
      fun (x11811 : 'tags this) ->
        fun ~pname:(x11810 : GLenum.t) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x11811) "getParameter"
               [|(GLenum.t_to_js x11810)|])
    let (getProgramInfoLog :
      'tags this -> program:WebGLProgram.t -> string or_null) =
      fun (x11814 : 'tags this) ->
        fun ~program:(x11813 : WebGLProgram.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11814) "getProgramInfoLog"
               [|(WebGLProgram.t_to_js x11813)|])
    let (getProgramParameter :
      'tags this -> program:WebGLProgram.t -> pname:GLenum.t -> any) =
      fun (x11819 : 'tags this) ->
        fun ~program:(x11817 : WebGLProgram.t) ->
          fun ~pname:(x11818 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11819) "getProgramParameter"
                 [|(WebGLProgram.t_to_js x11817);(GLenum.t_to_js x11818)|])
    let (getRenderbufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x11823 : 'tags this) ->
        fun ~target:(x11821 : GLenum.t) ->
          fun ~pname:(x11822 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11823)
                 "getRenderbufferParameter"
                 [|(GLenum.t_to_js x11821);(GLenum.t_to_js x11822)|])
    let (getShaderInfoLog :
      'tags this -> shader:WebGLShader.t -> string or_null) =
      fun (x11826 : 'tags this) ->
        fun ~shader:(x11825 : WebGLShader.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11826) "getShaderInfoLog"
               [|(WebGLShader.t_to_js x11825)|])
    let (getShaderParameter :
      'tags this -> shader:WebGLShader.t -> pname:GLenum.t -> any) =
      fun (x11831 : 'tags this) ->
        fun ~shader:(x11829 : WebGLShader.t) ->
          fun ~pname:(x11830 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11831) "getShaderParameter"
                 [|(WebGLShader.t_to_js x11829);(GLenum.t_to_js x11830)|])
    let (getShaderPrecisionFormat :
      'tags this ->
        shadertype:GLenum.t ->
          precisiontype:GLenum.t -> WebGLShaderPrecisionFormat.t or_null)
      =
      fun (x11835 : 'tags this) ->
        fun ~shadertype:(x11833 : GLenum.t) ->
          fun ~precisiontype:(x11834 : GLenum.t) ->
            or_null_of_js WebGLShaderPrecisionFormat.t_of_js
              (Ojs.call (this_to_js Obj.magic x11835)
                 "getShaderPrecisionFormat"
                 [|(GLenum.t_to_js x11833);(GLenum.t_to_js x11834)|])
    let (getShaderSource :
      'tags this -> shader:WebGLShader.t -> string or_null) =
      fun (x11839 : 'tags this) ->
        fun ~shader:(x11838 : WebGLShader.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11839) "getShaderSource"
               [|(WebGLShader.t_to_js x11838)|])
    let (getSupportedExtensions : 'tags this -> string list or_null) =
      fun (x11842 : 'tags this) ->
        or_null_of_js
          (fun (x11844 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x11844)
          (Ojs.call (this_to_js Obj.magic x11842) "getSupportedExtensions"
             [||])
    let (getTexParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x11848 : 'tags this) ->
        fun ~target:(x11846 : GLenum.t) ->
          fun ~pname:(x11847 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11848) "getTexParameter"
                 [|(GLenum.t_to_js x11846);(GLenum.t_to_js x11847)|])
    let (getUniform :
      'tags this ->
        program:WebGLProgram.t -> location:WebGLUniformLocation.t -> any)
      =
      fun (x11852 : 'tags this) ->
        fun ~program:(x11850 : WebGLProgram.t) ->
          fun ~location:(x11851 : WebGLUniformLocation.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11852) "getUniform"
                 [|(WebGLProgram.t_to_js x11850);(WebGLUniformLocation.t_to_js
                                                    x11851)|])
    let (getUniformLocation :
      'tags this ->
        program:WebGLProgram.t ->
          name:string -> WebGLUniformLocation.t or_null)
      =
      fun (x11856 : 'tags this) ->
        fun ~program:(x11854 : WebGLProgram.t) ->
          fun ~name:(x11855 : string) ->
            or_null_of_js WebGLUniformLocation.t_of_js
              (Ojs.call (this_to_js Obj.magic x11856) "getUniformLocation"
                 [|(WebGLProgram.t_to_js x11854);(Ojs.string_to_js x11855)|])
    let (getVertexAttrib :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> any) =
      fun (x11861 : 'tags this) ->
        fun ~index:(x11859 : GLuint.t) ->
          fun ~pname:(x11860 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11861) "getVertexAttrib"
                 [|(GLuint.t_to_js x11859);(GLenum.t_to_js x11860)|])
    let (getVertexAttribOffset :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> GLintptr.t) =
      fun (x11865 : 'tags this) ->
        fun ~index:(x11863 : GLuint.t) ->
          fun ~pname:(x11864 : GLenum.t) ->
            GLintptr.t_of_js
              (Ojs.call (this_to_js Obj.magic x11865) "getVertexAttribOffset"
                 [|(GLuint.t_to_js x11863);(GLenum.t_to_js x11864)|])
    let (hint : 'tags this -> target:GLenum.t -> mode:GLenum.t -> unit) =
      fun (x11869 : 'tags this) ->
        fun ~target:(x11867 : GLenum.t) ->
          fun ~mode:(x11868 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11869) "hint"
                 [|(GLenum.t_to_js x11867);(GLenum.t_to_js x11868)|])
    let (isBuffer :
      'tags this -> buffer:WebGLBuffer.t or_null -> GLboolean.t) =
      fun (x11873 : 'tags this) ->
        fun ~buffer:(x11871 : WebGLBuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11873) "isBuffer"
               [|(or_null_to_js WebGLBuffer.t_to_js x11871)|])
    let (isContextLost : 'tags this -> bool) =
      fun (x11875 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x11875) "isContextLost" [||])
    let (isEnabled : 'tags this -> cap:GLenum.t -> GLboolean.t) =
      fun (x11878 : 'tags this) ->
        fun ~cap:(x11877 : GLenum.t) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11878) "isEnabled"
               [|(GLenum.t_to_js x11877)|])
    let (isFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t or_null -> GLboolean.t) =
      fun (x11882 : 'tags this) ->
        fun ~framebuffer:(x11880 : WebGLFramebuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11882) "isFramebuffer"
               [|(or_null_to_js WebGLFramebuffer.t_to_js x11880)|])
    let (isProgram :
      'tags this -> program:WebGLProgram.t or_null -> GLboolean.t) =
      fun (x11886 : 'tags this) ->
        fun ~program:(x11884 : WebGLProgram.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11886) "isProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x11884)|])
    let (isRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t or_null -> GLboolean.t)
      =
      fun (x11890 : 'tags this) ->
        fun ~renderbuffer:(x11888 : WebGLRenderbuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11890) "isRenderbuffer"
               [|(or_null_to_js WebGLRenderbuffer.t_to_js x11888)|])
    let (isShader :
      'tags this -> shader:WebGLShader.t or_null -> GLboolean.t) =
      fun (x11894 : 'tags this) ->
        fun ~shader:(x11892 : WebGLShader.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11894) "isShader"
               [|(or_null_to_js WebGLShader.t_to_js x11892)|])
    let (isTexture :
      'tags this -> texture:WebGLTexture.t or_null -> GLboolean.t) =
      fun (x11898 : 'tags this) ->
        fun ~texture:(x11896 : WebGLTexture.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11898) "isTexture"
               [|(or_null_to_js WebGLTexture.t_to_js x11896)|])
    let (lineWidth : 'tags this -> width:GLfloat.t -> unit) =
      fun (x11901 : 'tags this) ->
        fun ~width:(x11900 : GLfloat.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11901) "lineWidth"
               [|(GLfloat.t_to_js x11900)|])
    let (linkProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x11904 : 'tags this) ->
        fun ~program:(x11903 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11904) "linkProgram"
               [|(WebGLProgram.t_to_js x11903)|])
    let (pixelStorei :
      'tags this ->
        pname:GLenum.t -> param:(GLboolean.t, GLint.t) union2 -> unit)
      =
      fun (x11910 : 'tags this) ->
        fun ~pname:(x11906 : GLenum.t) ->
          fun ~param:(x11907 : (GLboolean.t, GLint.t) union2) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11910) "pixelStorei"
                 [|(GLenum.t_to_js x11906);(union2_to_js GLboolean.t_to_js
                                              GLint.t_to_js x11907)|])
    let (polygonOffset :
      'tags this -> factor:GLfloat.t -> units:GLfloat.t -> unit) =
      fun (x11914 : 'tags this) ->
        fun ~factor:(x11912 : GLfloat.t) ->
          fun ~units:(x11913 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11914) "polygonOffset"
                 [|(GLfloat.t_to_js x11912);(GLfloat.t_to_js x11913)|])
    let (renderbufferStorage :
      'tags this ->
        target:GLenum.t ->
          internalformat:GLenum.t ->
            width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x11920 : 'tags this) ->
        fun ~target:(x11916 : GLenum.t) ->
          fun ~internalformat:(x11917 : GLenum.t) ->
            fun ~width:(x11918 : GLsizei.t) ->
              fun ~height:(x11919 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11920)
                     "renderbufferStorage"
                     [|(GLenum.t_to_js x11916);(GLenum.t_to_js x11917);(
                       GLsizei.t_to_js x11918);(GLsizei.t_to_js x11919)|])
    let (sampleCoverage :
      'tags this -> value:GLclampf.t -> invert:GLboolean.t -> unit) =
      fun (x11924 : 'tags this) ->
        fun ~value:(x11922 : GLclampf.t) ->
          fun ~invert:(x11923 : GLboolean.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11924) "sampleCoverage"
                 [|(GLclampf.t_to_js x11922);(GLboolean.t_to_js x11923)|])
    let (scissor :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x11930 : 'tags this) ->
        fun ~x:(x11926 : GLint.t) ->
          fun ~y:(x11927 : GLint.t) ->
            fun ~width:(x11928 : GLsizei.t) ->
              fun ~height:(x11929 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11930) "scissor"
                     [|(GLint.t_to_js x11926);(GLint.t_to_js x11927);(
                       GLsizei.t_to_js x11928);(GLsizei.t_to_js x11929)|])
    let (shaderSource :
      'tags this -> shader:WebGLShader.t -> source:string -> unit) =
      fun (x11934 : 'tags this) ->
        fun ~shader:(x11932 : WebGLShader.t) ->
          fun ~source:(x11933 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11934) "shaderSource"
                 [|(WebGLShader.t_to_js x11932);(Ojs.string_to_js x11933)|])
    let (stencilFunc :
      'tags this -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit) =
      fun (x11939 : 'tags this) ->
        fun ~func:(x11936 : GLenum.t) ->
          fun ~ref:(x11937 : GLint.t) ->
            fun ~mask:(x11938 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11939) "stencilFunc"
                   [|(GLenum.t_to_js x11936);(GLint.t_to_js x11937);(
                     GLuint.t_to_js x11938)|])
    let (stencilFuncSeparate :
      'tags this ->
        face:GLenum.t ->
          func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit)
      =
      fun (x11945 : 'tags this) ->
        fun ~face:(x11941 : GLenum.t) ->
          fun ~func:(x11942 : GLenum.t) ->
            fun ~ref:(x11943 : GLint.t) ->
              fun ~mask:(x11944 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11945)
                     "stencilFuncSeparate"
                     [|(GLenum.t_to_js x11941);(GLenum.t_to_js x11942);(
                       GLint.t_to_js x11943);(GLuint.t_to_js x11944)|])
    let (stencilMask : 'tags this -> mask:GLuint.t -> unit) =
      fun (x11948 : 'tags this) ->
        fun ~mask:(x11947 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11948) "stencilMask"
               [|(GLuint.t_to_js x11947)|])
    let (stencilMaskSeparate :
      'tags this -> face:GLenum.t -> mask:GLuint.t -> unit) =
      fun (x11952 : 'tags this) ->
        fun ~face:(x11950 : GLenum.t) ->
          fun ~mask:(x11951 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11952) "stencilMaskSeparate"
                 [|(GLenum.t_to_js x11950);(GLuint.t_to_js x11951)|])
    let (stencilOp :
      'tags this -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x11957 : 'tags this) ->
        fun ~fail:(x11954 : GLenum.t) ->
          fun ~zfail:(x11955 : GLenum.t) ->
            fun ~zpass:(x11956 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11957) "stencilOp"
                   [|(GLenum.t_to_js x11954);(GLenum.t_to_js x11955);(
                     GLenum.t_to_js x11956)|])
    let (stencilOpSeparate :
      'tags this ->
        face:GLenum.t ->
          fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x11963 : 'tags this) ->
        fun ~face:(x11959 : GLenum.t) ->
          fun ~fail:(x11960 : GLenum.t) ->
            fun ~zfail:(x11961 : GLenum.t) ->
              fun ~zpass:(x11962 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11963) "stencilOpSeparate"
                     [|(GLenum.t_to_js x11959);(GLenum.t_to_js x11960);(
                       GLenum.t_to_js x11961);(GLenum.t_to_js x11962)|])
    let (texParameterf :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x11968 : 'tags this) ->
        fun ~target:(x11965 : GLenum.t) ->
          fun ~pname:(x11966 : GLenum.t) ->
            fun ~param:(x11967 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11968) "texParameterf"
                   [|(GLenum.t_to_js x11965);(GLenum.t_to_js x11966);(
                     GLfloat.t_to_js x11967)|])
    let (texParameteri :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x11973 : 'tags this) ->
        fun ~target:(x11970 : GLenum.t) ->
          fun ~pname:(x11971 : GLenum.t) ->
            fun ~param:(x11972 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11973) "texParameteri"
                   [|(GLenum.t_to_js x11970);(GLenum.t_to_js x11971);(
                     GLint.t_to_js x11972)|])
    let (uniform1f :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> x:GLfloat.t -> unit)
      =
      fun (x11978 : 'tags this) ->
        fun ~location:(x11975 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x11977 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11978) "uniform1f"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x11975);(
                   GLfloat.t_to_js x11977)|])
    let (uniform1i :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> x:GLint.t -> unit)
      =
      fun (x11983 : 'tags this) ->
        fun ~location:(x11980 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x11982 : GLint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11983) "uniform1i"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x11980);(
                   GLint.t_to_js x11982)|])
    let (uniform2f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> unit)
      =
      fun (x11989 : 'tags this) ->
        fun ~location:(x11985 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x11987 : GLfloat.t) ->
            fun ~y:(x11988 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11989) "uniform2f"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x11985);(
                     GLfloat.t_to_js x11987);(GLfloat.t_to_js x11988)|])
    let (uniform2i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> unit)
      =
      fun (x11995 : 'tags this) ->
        fun ~location:(x11991 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x11993 : GLint.t) ->
            fun ~y:(x11994 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11995) "uniform2i"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x11991);(
                     GLint.t_to_js x11993);(GLint.t_to_js x11994)|])
    let (uniform3f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x12002 : 'tags this) ->
        fun ~location:(x11997 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x11999 : GLfloat.t) ->
            fun ~y:(x12000 : GLfloat.t) ->
              fun ~z:(x12001 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x12002) "uniform3f"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x11997);(
                       GLfloat.t_to_js x11999);(GLfloat.t_to_js x12000);(
                       GLfloat.t_to_js x12001)|])
    let (uniform3i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> unit)
      =
      fun (x12009 : 'tags this) ->
        fun ~location:(x12004 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12006 : GLint.t) ->
            fun ~y:(x12007 : GLint.t) ->
              fun ~z:(x12008 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x12009) "uniform3i"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x12004);(
                       GLint.t_to_js x12006);(GLint.t_to_js x12007);(
                       GLint.t_to_js x12008)|])
    let (uniform4f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x12017 : 'tags this) ->
        fun ~location:(x12011 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12013 : GLfloat.t) ->
            fun ~y:(x12014 : GLfloat.t) ->
              fun ~z:(x12015 : GLfloat.t) ->
                fun ~w:(x12016 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x12017) "uniform4f"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x12011);(
                         GLfloat.t_to_js x12013);(GLfloat.t_to_js x12014);(
                         GLfloat.t_to_js x12015);(GLfloat.t_to_js x12016)|])
    let (uniform4i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x12025 : 'tags this) ->
        fun ~location:(x12019 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12021 : GLint.t) ->
            fun ~y:(x12022 : GLint.t) ->
              fun ~z:(x12023 : GLint.t) ->
                fun ~w:(x12024 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x12025) "uniform4i"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x12019);(
                         GLint.t_to_js x12021);(GLint.t_to_js x12022);(
                         GLint.t_to_js x12023);(GLint.t_to_js x12024)|])
    let (useProgram : 'tags this -> program:WebGLProgram.t or_null -> unit) =
      fun (x12029 : 'tags this) ->
        fun ~program:(x12027 : WebGLProgram.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12029) "useProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x12027)|])
    let (validateProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x12032 : 'tags this) ->
        fun ~program:(x12031 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12032) "validateProgram"
               [|(WebGLProgram.t_to_js x12031)|])
    let (vertexAttrib1f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> unit) =
      fun (x12036 : 'tags this) ->
        fun ~index:(x12034 : GLuint.t) ->
          fun ~x:(x12035 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12036) "vertexAttrib1f"
                 [|(GLuint.t_to_js x12034);(GLfloat.t_to_js x12035)|])
    let (vertexAttrib1fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x12040 : 'tags this) ->
        fun ~index:(x12038 : GLuint.t) ->
          fun ~values:(x12039 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12040) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x12038);(Float32List.t_to_js x12039)|])
    let (vertexAttrib2f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> unit) =
      fun (x12045 : 'tags this) ->
        fun ~index:(x12042 : GLuint.t) ->
          fun ~x:(x12043 : GLfloat.t) ->
            fun ~y:(x12044 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x12045) "vertexAttrib2f"
                   [|(GLuint.t_to_js x12042);(GLfloat.t_to_js x12043);(
                     GLfloat.t_to_js x12044)|])
    let (vertexAttrib2fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x12049 : 'tags this) ->
        fun ~index:(x12047 : GLuint.t) ->
          fun ~values:(x12048 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12049) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x12047);(Float32List.t_to_js x12048)|])
    let (vertexAttrib3f :
      'tags this ->
        index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x12055 : 'tags this) ->
        fun ~index:(x12051 : GLuint.t) ->
          fun ~x:(x12052 : GLfloat.t) ->
            fun ~y:(x12053 : GLfloat.t) ->
              fun ~z:(x12054 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x12055) "vertexAttrib3f"
                     [|(GLuint.t_to_js x12051);(GLfloat.t_to_js x12052);(
                       GLfloat.t_to_js x12053);(GLfloat.t_to_js x12054)|])
    let (vertexAttrib3fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x12059 : 'tags this) ->
        fun ~index:(x12057 : GLuint.t) ->
          fun ~values:(x12058 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12059) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x12057);(Float32List.t_to_js x12058)|])
    let (vertexAttrib4f :
      'tags this ->
        index:GLuint.t ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x12066 : 'tags this) ->
        fun ~index:(x12061 : GLuint.t) ->
          fun ~x:(x12062 : GLfloat.t) ->
            fun ~y:(x12063 : GLfloat.t) ->
              fun ~z:(x12064 : GLfloat.t) ->
                fun ~w:(x12065 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x12066) "vertexAttrib4f"
                       [|(GLuint.t_to_js x12061);(GLfloat.t_to_js x12062);(
                         GLfloat.t_to_js x12063);(GLfloat.t_to_js x12064);(
                         GLfloat.t_to_js x12065)|])
    let (vertexAttrib4fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x12070 : 'tags this) ->
        fun ~index:(x12068 : GLuint.t) ->
          fun ~values:(x12069 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12070) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x12068);(Float32List.t_to_js x12069)|])
    let (vertexAttribPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t ->
              normalized:GLboolean.t ->
                stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x12078 : 'tags this) ->
        fun ~index:(x12072 : GLuint.t) ->
          fun ~size:(x12073 : GLint.t) ->
            fun ~type_:(x12074 : GLenum.t) ->
              fun ~normalized:(x12075 : GLboolean.t) ->
                fun ~stride:(x12076 : GLsizei.t) ->
                  fun ~offset:(x12077 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x12078)
                         "vertexAttribPointer"
                         [|(GLuint.t_to_js x12072);(GLint.t_to_js x12073);(
                           GLenum.t_to_js x12074);(GLboolean.t_to_js x12075);(
                           GLsizei.t_to_js x12076);(GLintptr.t_to_js x12077)|])
    let (viewport :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x12084 : 'tags this) ->
        fun ~x:(x12080 : GLint.t) ->
          fun ~y:(x12081 : GLint.t) ->
            fun ~width:(x12082 : GLsizei.t) ->
              fun ~height:(x12083 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x12084) "viewport"
                     [|(GLint.t_to_js x12080);(GLint.t_to_js x12081);(
                       GLsizei.t_to_js x12082);(GLsizei.t_to_js x12083)|])
    let (get_ACTIVE_ATTRIBUTES : 'tags this -> GLenum.t) =
      fun (x12086 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12086)
             "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : 'tags this -> GLenum.t) =
      fun (x12088 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12088) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x12090 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12090) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : 'tags this -> GLenum.t) =
      fun (x12092 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12092)
             "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : 'tags this -> GLenum.t) =
      fun (x12094 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12094)
             "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : 'tags this -> GLenum.t) =
      fun (x12096 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12096) "ALPHA")
    let (get_ALPHA_BITS : 'tags this -> GLenum.t) =
      fun (x12098 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12098) "ALPHA_BITS")
    let (get_ALWAYS : 'tags this -> GLenum.t) =
      fun (x12100 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12100) "ALWAYS")
    let (get_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x12102 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12102) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x12104 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12104)
             "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : 'tags this -> GLenum.t) =
      fun (x12106 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12106)
             "ATTACHED_SHADERS")
    let (get_BACK : 'tags this -> GLenum.t) =
      fun (x12108 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12108) "BACK")
    let (get_BLEND : 'tags this -> GLenum.t) =
      fun (x12110 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12110) "BLEND")
    let (get_BLEND_COLOR : 'tags this -> GLenum.t) =
      fun (x12112 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12112) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x12114 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12114) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : 'tags this -> GLenum.t) =
      fun (x12116 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12116) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : 'tags this -> GLenum.t) =
      fun (x12118 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12118) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : 'tags this -> GLenum.t) =
      fun (x12120 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12120)
             "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : 'tags this -> GLenum.t) =
      fun (x12122 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12122)
             "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x12124 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12124) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : 'tags this -> GLenum.t) =
      fun (x12126 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12126) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : 'tags this -> GLenum.t) =
      fun (x12128 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12128) "BLUE_BITS")
    let (get_BOOL : 'tags this -> GLenum.t) =
      fun (x12130 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12130) "BOOL")
    let (get_BOOL_VEC2 : 'tags this -> GLenum.t) =
      fun (x12132 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12132) "BOOL_VEC2")
    let (get_BOOL_VEC3 : 'tags this -> GLenum.t) =
      fun (x12134 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12134) "BOOL_VEC3")
    let (get_BOOL_VEC4 : 'tags this -> GLenum.t) =
      fun (x12136 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12136) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : 'tags this -> GLenum.t) =
      fun (x12138 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12138)
             "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x12140 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12140) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : 'tags this -> GLenum.t) =
      fun (x12142 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12142) "BUFFER_USAGE")
    let (get_BYTE : 'tags this -> GLenum.t) =
      fun (x12144 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12144) "BYTE")
    let (get_CCW : 'tags this -> GLenum.t) =
      fun (x12146 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12146) "CCW")
    let (get_CLAMP_TO_EDGE : 'tags this -> GLenum.t) =
      fun (x12148 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12148) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : 'tags this -> GLenum.t) =
      fun (x12150 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12150)
             "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x12152 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12152)
             "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x12154 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12154)
             "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x12156 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12156) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : 'tags this -> GLenum.t) =
      fun (x12158 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12158) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : 'tags this -> GLenum.t) =
      fun (x12160 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12160)
             "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x12162 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12162) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x12164 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12164) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : 'tags this -> GLenum.t) =
      fun (x12166 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12166)
             "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : 'tags this -> GLenum.t) =
      fun (x12168 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12168) "CULL_FACE")
    let (get_CULL_FACE_MODE : 'tags this -> GLenum.t) =
      fun (x12170 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12170) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : 'tags this -> GLenum.t) =
      fun (x12172 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12172) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : 'tags this -> GLenum.t) =
      fun (x12174 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12174)
             "CURRENT_VERTEX_ATTRIB")
    let (get_CW : 'tags this -> GLenum.t) =
      fun (x12176 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12176) "CW")
    let (get_DECR : 'tags this -> GLenum.t) =
      fun (x12178 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12178) "DECR")
    let (get_DECR_WRAP : 'tags this -> GLenum.t) =
      fun (x12180 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12180) "DECR_WRAP")
    let (get_DELETE_STATUS : 'tags this -> GLenum.t) =
      fun (x12182 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12182) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x12184 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12184)
             "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : 'tags this -> GLenum.t) =
      fun (x12186 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12186) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x12188 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12188)
             "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x12190 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12190)
             "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : 'tags this -> GLenum.t) =
      fun (x12192 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12192) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : 'tags this -> GLenum.t) =
      fun (x12194 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12194)
             "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : 'tags this -> GLenum.t) =
      fun (x12196 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12196) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : 'tags this -> GLenum.t) =
      fun (x12198 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12198) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : 'tags this -> GLenum.t) =
      fun (x12200 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12200) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x12202 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12202)
             "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : 'tags this -> GLenum.t) =
      fun (x12204 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12204) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x12206 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12206) "DEPTH_WRITEMASK")
    let (get_DITHER : 'tags this -> GLenum.t) =
      fun (x12208 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12208) "DITHER")
    let (get_DONT_CARE : 'tags this -> GLenum.t) =
      fun (x12210 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12210) "DONT_CARE")
    let (get_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x12212 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12212) "DST_ALPHA")
    let (get_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x12214 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12214) "DST_COLOR")
    let (get_DYNAMIC_DRAW : 'tags this -> GLenum.t) =
      fun (x12216 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12216) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x12218 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12218)
             "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x12220 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12220)
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : 'tags this -> GLenum.t) =
      fun (x12222 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12222) "EQUAL")
    let (get_FASTEST : 'tags this -> GLenum.t) =
      fun (x12224 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12224) "FASTEST")
    let (get_FLOAT : 'tags this -> GLenum.t) =
      fun (x12226 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12226) "FLOAT")
    let (get_FLOAT_MAT2 : 'tags this -> GLenum.t) =
      fun (x12228 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12228) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : 'tags this -> GLenum.t) =
      fun (x12230 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12230) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : 'tags this -> GLenum.t) =
      fun (x12232 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12232) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : 'tags this -> GLenum.t) =
      fun (x12234 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12234) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : 'tags this -> GLenum.t) =
      fun (x12236 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12236) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : 'tags this -> GLenum.t) =
      fun (x12238 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12238) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : 'tags this -> GLenum.t) =
      fun (x12240 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12240) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x12242 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12242) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : 'tags this -> GLenum.t) =
      fun (x12244 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12244)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x12246 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12246)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :
      'tags this -> GLenum.t) =
      fun (x12248 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12248)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : 'tags this -> GLenum.t) =
      fun (x12250 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12250)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x12252 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12252)
             "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : 'tags this -> GLenum.t) =
      fun (x12254 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12254)
             "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x12256 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12256)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : 'tags this -> GLenum.t) =
      fun (x12258 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12258)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
      'tags this -> GLenum.t) =
      fun (x12260 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12260)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : 'tags this -> GLenum.t) =
      fun (x12262 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12262)
             "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : 'tags this -> GLenum.t) =
      fun (x12264 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12264) "FRONT")
    let (get_FRONT_AND_BACK : 'tags this -> GLenum.t) =
      fun (x12266 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12266) "FRONT_AND_BACK")
    let (get_FRONT_FACE : 'tags this -> GLenum.t) =
      fun (x12268 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12268) "FRONT_FACE")
    let (get_FUNC_ADD : 'tags this -> GLenum.t) =
      fun (x12270 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12270) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x12272 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12272)
             "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x12274 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12274) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : 'tags this -> GLenum.t) =
      fun (x12276 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12276)
             "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : 'tags this -> GLenum.t) =
      fun (x12278 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12278) "GEQUAL")
    let (get_GREATER : 'tags this -> GLenum.t) =
      fun (x12280 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12280) "GREATER")
    let (get_GREEN_BITS : 'tags this -> GLenum.t) =
      fun (x12282 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12282) "GREEN_BITS")
    let (get_HIGH_FLOAT : 'tags this -> GLenum.t) =
      fun (x12284 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12284) "HIGH_FLOAT")
    let (get_HIGH_INT : 'tags this -> GLenum.t) =
      fun (x12286 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12286) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : 'tags this -> GLenum.t) =
      fun (x12288 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12288)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : 'tags this -> GLenum.t) =
      fun (x12290 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12290)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : 'tags this -> GLenum.t) =
      fun (x12292 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12292) "INCR")
    let (get_INCR_WRAP : 'tags this -> GLenum.t) =
      fun (x12294 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12294) "INCR_WRAP")
    let (get_INT : 'tags this -> GLenum.t) =
      fun (x12296 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12296) "INT")
    let (get_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x12298 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12298) "INT_VEC2")
    let (get_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x12300 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12300) "INT_VEC3")
    let (get_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x12302 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12302) "INT_VEC4")
    let (get_INVALID_ENUM : 'tags this -> GLenum.t) =
      fun (x12304 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12304) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : 'tags this -> GLenum.t) =
      fun (x12306 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12306)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : 'tags this -> GLenum.t) =
      fun (x12308 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12308)
             "INVALID_OPERATION")
    let (get_INVALID_VALUE : 'tags this -> GLenum.t) =
      fun (x12310 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12310) "INVALID_VALUE")
    let (get_INVERT : 'tags this -> GLenum.t) =
      fun (x12312 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12312) "INVERT")
    let (get_KEEP : 'tags this -> GLenum.t) =
      fun (x12314 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12314) "KEEP")
    let (get_LEQUAL : 'tags this -> GLenum.t) =
      fun (x12316 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12316) "LEQUAL")
    let (get_LESS : 'tags this -> GLenum.t) =
      fun (x12318 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12318) "LESS")
    let (get_LINEAR : 'tags this -> GLenum.t) =
      fun (x12320 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12320) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x12322 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12322)
             "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x12324 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12324)
             "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : 'tags this -> GLenum.t) =
      fun (x12326 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12326) "LINES")
    let (get_LINE_LOOP : 'tags this -> GLenum.t) =
      fun (x12328 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12328) "LINE_LOOP")
    let (get_LINE_STRIP : 'tags this -> GLenum.t) =
      fun (x12330 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12330) "LINE_STRIP")
    let (get_LINE_WIDTH : 'tags this -> GLenum.t) =
      fun (x12332 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12332) "LINE_WIDTH")
    let (get_LINK_STATUS : 'tags this -> GLenum.t) =
      fun (x12334 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12334) "LINK_STATUS")
    let (get_LOW_FLOAT : 'tags this -> GLenum.t) =
      fun (x12336 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12336) "LOW_FLOAT")
    let (get_LOW_INT : 'tags this -> GLenum.t) =
      fun (x12338 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12338) "LOW_INT")
    let (get_LUMINANCE : 'tags this -> GLenum.t) =
      fun (x12340 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12340) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : 'tags this -> GLenum.t) =
      fun (x12342 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12342) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x12344 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12344)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x12346 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12346)
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x12348 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12348)
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x12350 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12350)
             "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x12352 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12352)
             "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x12354 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12354)
             "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : 'tags this -> GLenum.t) =
      fun (x12356 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12356)
             "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x12358 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12358)
             "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x12360 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12360)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x12362 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12362)
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : 'tags this -> GLenum.t) =
      fun (x12364 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12364)
             "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : 'tags this -> GLenum.t) =
      fun (x12366 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12366) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : 'tags this -> GLenum.t) =
      fun (x12368 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12368) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : 'tags this -> GLenum.t) =
      fun (x12370 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12370) "MIRRORED_REPEAT")
    let (get_NEAREST : 'tags this -> GLenum.t) =
      fun (x12372 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12372) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x12374 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12374)
             "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x12376 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12376)
             "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : 'tags this -> GLenum.t) =
      fun (x12378 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12378) "NEVER")
    let (get_NICEST : 'tags this -> GLenum.t) =
      fun (x12380 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12380) "NICEST")
    let (get_NONE : 'tags this -> GLenum.t) =
      fun (x12382 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12382) "NONE")
    let (get_NOTEQUAL : 'tags this -> GLenum.t) =
      fun (x12384 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12384) "NOTEQUAL")
    let (get_NO_ERROR : 'tags this -> GLenum.t) =
      fun (x12386 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12386) "NO_ERROR")
    let (get_ONE : 'tags this -> GLenum.t) =
      fun (x12388 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12388) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x12390 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12390)
             "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x12392 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12392)
             "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x12394 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12394)
             "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x12396 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12396)
             "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x12398 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12398)
             "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x12400 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12400)
             "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : 'tags this -> GLenum.t) =
      fun (x12402 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12402) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x12404 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12404) "PACK_ALIGNMENT")
    let (get_POINTS : 'tags this -> GLenum.t) =
      fun (x12406 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12406) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : 'tags this -> GLenum.t) =
      fun (x12408 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12408)
             "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : 'tags this -> GLenum.t) =
      fun (x12410 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12410)
             "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : 'tags this -> GLenum.t) =
      fun (x12412 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12412)
             "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : 'tags this -> GLenum.t) =
      fun (x12414 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12414) "RED_BITS")
    let (get_RENDERBUFFER : 'tags this -> GLenum.t) =
      fun (x12416 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12416) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x12418 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12418)
             "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x12420 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12420)
             "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x12422 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12422)
             "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x12424 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12424)
             "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x12426 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12426)
             "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : 'tags this -> GLenum.t) =
      fun (x12428 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12428)
             "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : 'tags this -> GLenum.t) =
      fun (x12430 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12430)
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x12432 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12432)
             "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x12434 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12434)
             "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : 'tags this -> GLenum.t) =
      fun (x12436 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12436)
             "RENDERBUFFER_WIDTH")
    let (get_RENDERER : 'tags this -> GLenum.t) =
      fun (x12438 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12438) "RENDERER")
    let (get_REPEAT : 'tags this -> GLenum.t) =
      fun (x12440 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12440) "REPEAT")
    let (get_REPLACE : 'tags this -> GLenum.t) =
      fun (x12442 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12442) "REPLACE")
    let (get_RGB : 'tags this -> GLenum.t) =
      fun (x12444 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12444) "RGB")
    let (get_RGB565 : 'tags this -> GLenum.t) =
      fun (x12446 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12446) "RGB565")
    let (get_RGB5_A1 : 'tags this -> GLenum.t) =
      fun (x12448 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12448) "RGB5_A1")
    let (get_RGBA : 'tags this -> GLenum.t) =
      fun (x12450 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12450) "RGBA")
    let (get_RGBA4 : 'tags this -> GLenum.t) =
      fun (x12452 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12452) "RGBA4")
    let (get_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x12454 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12454) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x12456 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12456) "SAMPLER_CUBE")
    let (get_SAMPLES : 'tags this -> GLenum.t) =
      fun (x12458 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12458) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : 'tags this -> GLenum.t) =
      fun (x12460 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12460)
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : 'tags this -> GLenum.t) =
      fun (x12462 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12462) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : 'tags this -> GLenum.t) =
      fun (x12464 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12464) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : 'tags this -> GLenum.t) =
      fun (x12466 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12466)
             "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : 'tags this -> GLenum.t) =
      fun (x12468 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12468)
             "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : 'tags this -> GLenum.t) =
      fun (x12470 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12470) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : 'tags this -> GLenum.t) =
      fun (x12472 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12472) "SCISSOR_TEST")
    let (get_SHADER_TYPE : 'tags this -> GLenum.t) =
      fun (x12474 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12474) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : 'tags this -> GLenum.t) =
      fun (x12476 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12476)
             "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : 'tags this -> GLenum.t) =
      fun (x12478 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12478) "SHORT")
    let (get_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x12480 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12480) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : 'tags this -> GLenum.t) =
      fun (x12482 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12482)
             "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x12484 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12484) "SRC_COLOR")
    let (get_STATIC_DRAW : 'tags this -> GLenum.t) =
      fun (x12486 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12486) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x12488 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12488)
             "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : 'tags this -> GLenum.t) =
      fun (x12490 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12490)
             "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : 'tags this -> GLenum.t) =
      fun (x12492 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12492)
             "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x12494 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12494)
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x12496 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12496)
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : 'tags this -> GLenum.t) =
      fun (x12498 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12498)
             "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x12500 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12500)
             "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x12502 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12502)
             "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : 'tags this -> GLenum.t) =
      fun (x12504 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12504) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x12506 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12506)
             "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x12508 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12508)
             "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : 'tags this -> GLenum.t) =
      fun (x12510 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12510) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : 'tags this -> GLenum.t) =
      fun (x12512 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12512) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : 'tags this -> GLenum.t) =
      fun (x12514 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12514) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x12516 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12516)
             "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x12518 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12518)
             "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : 'tags this -> GLenum.t) =
      fun (x12520 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12520) "STENCIL_REF")
    let (get_STENCIL_TEST : 'tags this -> GLenum.t) =
      fun (x12522 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12522) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x12524 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12524)
             "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x12526 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12526)
             "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : 'tags this -> GLenum.t) =
      fun (x12528 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12528) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : 'tags this -> GLenum.t) =
      fun (x12530 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12530) "SUBPIXEL_BITS")
    let (get_TEXTURE : 'tags this -> GLenum.t) =
      fun (x12532 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12532) "TEXTURE")
    let (get_TEXTURE0 : 'tags this -> GLenum.t) =
      fun (x12534 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12534) "TEXTURE0")
    let (get_TEXTURE1 : 'tags this -> GLenum.t) =
      fun (x12536 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12536) "TEXTURE1")
    let (get_TEXTURE10 : 'tags this -> GLenum.t) =
      fun (x12538 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12538) "TEXTURE10")
    let (get_TEXTURE11 : 'tags this -> GLenum.t) =
      fun (x12540 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12540) "TEXTURE11")
    let (get_TEXTURE12 : 'tags this -> GLenum.t) =
      fun (x12542 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12542) "TEXTURE12")
    let (get_TEXTURE13 : 'tags this -> GLenum.t) =
      fun (x12544 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12544) "TEXTURE13")
    let (get_TEXTURE14 : 'tags this -> GLenum.t) =
      fun (x12546 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12546) "TEXTURE14")
    let (get_TEXTURE15 : 'tags this -> GLenum.t) =
      fun (x12548 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12548) "TEXTURE15")
    let (get_TEXTURE16 : 'tags this -> GLenum.t) =
      fun (x12550 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12550) "TEXTURE16")
    let (get_TEXTURE17 : 'tags this -> GLenum.t) =
      fun (x12552 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12552) "TEXTURE17")
    let (get_TEXTURE18 : 'tags this -> GLenum.t) =
      fun (x12554 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12554) "TEXTURE18")
    let (get_TEXTURE19 : 'tags this -> GLenum.t) =
      fun (x12556 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12556) "TEXTURE19")
    let (get_TEXTURE2 : 'tags this -> GLenum.t) =
      fun (x12558 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12558) "TEXTURE2")
    let (get_TEXTURE20 : 'tags this -> GLenum.t) =
      fun (x12560 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12560) "TEXTURE20")
    let (get_TEXTURE21 : 'tags this -> GLenum.t) =
      fun (x12562 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12562) "TEXTURE21")
    let (get_TEXTURE22 : 'tags this -> GLenum.t) =
      fun (x12564 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12564) "TEXTURE22")
    let (get_TEXTURE23 : 'tags this -> GLenum.t) =
      fun (x12566 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12566) "TEXTURE23")
    let (get_TEXTURE24 : 'tags this -> GLenum.t) =
      fun (x12568 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12568) "TEXTURE24")
    let (get_TEXTURE25 : 'tags this -> GLenum.t) =
      fun (x12570 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12570) "TEXTURE25")
    let (get_TEXTURE26 : 'tags this -> GLenum.t) =
      fun (x12572 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12572) "TEXTURE26")
    let (get_TEXTURE27 : 'tags this -> GLenum.t) =
      fun (x12574 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12574) "TEXTURE27")
    let (get_TEXTURE28 : 'tags this -> GLenum.t) =
      fun (x12576 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12576) "TEXTURE28")
    let (get_TEXTURE29 : 'tags this -> GLenum.t) =
      fun (x12578 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12578) "TEXTURE29")
    let (get_TEXTURE3 : 'tags this -> GLenum.t) =
      fun (x12580 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12580) "TEXTURE3")
    let (get_TEXTURE30 : 'tags this -> GLenum.t) =
      fun (x12582 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12582) "TEXTURE30")
    let (get_TEXTURE31 : 'tags this -> GLenum.t) =
      fun (x12584 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12584) "TEXTURE31")
    let (get_TEXTURE4 : 'tags this -> GLenum.t) =
      fun (x12586 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12586) "TEXTURE4")
    let (get_TEXTURE5 : 'tags this -> GLenum.t) =
      fun (x12588 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12588) "TEXTURE5")
    let (get_TEXTURE6 : 'tags this -> GLenum.t) =
      fun (x12590 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12590) "TEXTURE6")
    let (get_TEXTURE7 : 'tags this -> GLenum.t) =
      fun (x12592 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12592) "TEXTURE7")
    let (get_TEXTURE8 : 'tags this -> GLenum.t) =
      fun (x12594 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12594) "TEXTURE8")
    let (get_TEXTURE9 : 'tags this -> GLenum.t) =
      fun (x12596 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12596) "TEXTURE9")
    let (get_TEXTURE_2D : 'tags this -> GLenum.t) =
      fun (x12598 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12598) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : 'tags this -> GLenum.t) =
      fun (x12600 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12600)
             "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x12602 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12602)
             "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x12604 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12604)
             "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : 'tags this -> GLenum.t) =
      fun (x12606 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12606)
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : 'tags this -> GLenum.t) =
      fun (x12608 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12608)
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : 'tags this -> GLenum.t) =
      fun (x12610 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12610)
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : 'tags this -> GLenum.t) =
      fun (x12612 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12612)
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : 'tags this -> GLenum.t) =
      fun (x12614 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12614)
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : 'tags this -> GLenum.t) =
      fun (x12616 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12616)
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : 'tags this -> GLenum.t) =
      fun (x12618 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12618)
             "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : 'tags this -> GLenum.t) =
      fun (x12620 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12620)
             "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : 'tags this -> GLenum.t) =
      fun (x12622 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12622) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : 'tags this -> GLenum.t) =
      fun (x12624 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12624) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : 'tags this -> GLenum.t) =
      fun (x12626 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12626) "TRIANGLES")
    let (get_TRIANGLE_FAN : 'tags this -> GLenum.t) =
      fun (x12628 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12628) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : 'tags this -> GLenum.t) =
      fun (x12630 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12630) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x12632 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12632)
             "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : 'tags this -> GLenum.t) =
      fun (x12634 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12634)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : 'tags this -> GLenum.t) =
      fun (x12636 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12636)
             "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : 'tags this -> GLenum.t) =
      fun (x12638 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12638)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : 'tags this -> GLenum.t) =
      fun (x12640 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12640) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : 'tags this -> GLenum.t) =
      fun (x12642 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12642) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : 'tags this -> GLenum.t) =
      fun (x12644 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12644) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : 'tags this -> GLenum.t) =
      fun (x12646 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12646)
             "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : 'tags this -> GLenum.t) =
      fun (x12648 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12648)
             "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : 'tags this -> GLenum.t) =
      fun (x12650 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12650)
             "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : 'tags this -> GLenum.t) =
      fun (x12652 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12652) "VALIDATE_STATUS")
    let (get_VENDOR : 'tags this -> GLenum.t) =
      fun (x12654 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12654) "VENDOR")
    let (get_VERSION : 'tags this -> GLenum.t) =
      fun (x12656 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12656) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x12658 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12658)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : 'tags this -> GLenum.t) =
      fun (x12660 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12660)
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x12662 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12662)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : 'tags this -> GLenum.t) =
      fun (x12664 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12664)
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : 'tags this -> GLenum.t) =
      fun (x12666 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12666)
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x12668 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12668)
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : 'tags this -> GLenum.t) =
      fun (x12670 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12670)
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : 'tags this -> GLenum.t) =
      fun (x12672 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12672) "VERTEX_SHADER")
    let (get_VIEWPORT : 'tags this -> GLenum.t) =
      fun (x12674 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12674) "VIEWPORT")
    let (get_ZERO : 'tags this -> GLenum.t) =
      fun (x12676 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12676) "ZERO")
    let (vertexAttrib1fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x12681 : 'tags this) ->
        fun ~index:(x12678 : GLuint.t) ->
          fun ~values:(x12679 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12681) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x12678);(Iterable.t_1_to_js
                                              GLfloat.t_to_js x12679)|])
    let (vertexAttrib2fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x12686 : 'tags this) ->
        fun ~index:(x12683 : GLuint.t) ->
          fun ~values:(x12684 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12686) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x12683);(Iterable.t_1_to_js
                                              GLfloat.t_to_js x12684)|])
    let (vertexAttrib3fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x12691 : 'tags this) ->
        fun ~index:(x12688 : GLuint.t) ->
          fun ~values:(x12689 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12691) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x12688);(Iterable.t_1_to_js
                                              GLfloat.t_to_js x12689)|])
    let (vertexAttrib4fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x12696 : 'tags this) ->
        fun ~index:(x12693 : GLuint.t) ->
          fun ~values:(x12694 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12696) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x12693);(Iterable.t_1_to_js
                                              GLfloat.t_to_js x12694)|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface119:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLRenderingContext.t
                          val set_prototype :
                            t -> WebGLRenderingContext.t -> unit
                          val create : t -> WebGLRenderingContext.t
                          val get_ACTIVE_ATTRIBUTES : t -> GLenum.t
                          val get_ACTIVE_TEXTURE : t -> GLenum.t
                          val get_ACTIVE_UNIFORMS : t -> GLenum.t
                          val get_ALIASED_LINE_WIDTH_RANGE : t -> GLenum.t
                          val get_ALIASED_POINT_SIZE_RANGE : t -> GLenum.t
                          val get_ALPHA : t -> GLenum.t
                          val get_ALPHA_BITS : t -> GLenum.t
                          val get_ALWAYS : t -> GLenum.t
                          val get_ARRAY_BUFFER : t -> GLenum.t
                          val get_ARRAY_BUFFER_BINDING : t -> GLenum.t
                          val get_ATTACHED_SHADERS : t -> GLenum.t
                          val get_BACK : t -> GLenum.t
                          val get_BLEND : t -> GLenum.t
                          val get_BLEND_COLOR : t -> GLenum.t
                          val get_BLEND_DST_ALPHA : t -> GLenum.t
                          val get_BLEND_DST_RGB : t -> GLenum.t
                          val get_BLEND_EQUATION : t -> GLenum.t
                          val get_BLEND_EQUATION_ALPHA : t -> GLenum.t
                          val get_BLEND_EQUATION_RGB : t -> GLenum.t
                          val get_BLEND_SRC_ALPHA : t -> GLenum.t
                          val get_BLEND_SRC_RGB : t -> GLenum.t
                          val get_BLUE_BITS : t -> GLenum.t
                          val get_BOOL : t -> GLenum.t
                          val get_BOOL_VEC2 : t -> GLenum.t
                          val get_BOOL_VEC3 : t -> GLenum.t
                          val get_BOOL_VEC4 : t -> GLenum.t
                          val get_BROWSER_DEFAULT_WEBGL : t -> GLenum.t
                          val get_BUFFER_SIZE : t -> GLenum.t
                          val get_BUFFER_USAGE : t -> GLenum.t
                          val get_BYTE : t -> GLenum.t
                          val get_CCW : t -> GLenum.t
                          val get_CLAMP_TO_EDGE : t -> GLenum.t
                          val get_COLOR_ATTACHMENT0 : t -> GLenum.t
                          val get_COLOR_BUFFER_BIT : t -> GLenum.t
                          val get_COLOR_CLEAR_VALUE : t -> GLenum.t
                          val get_COLOR_WRITEMASK : t -> GLenum.t
                          val get_COMPILE_STATUS : t -> GLenum.t
                          val get_COMPRESSED_TEXTURE_FORMATS : t -> GLenum.t
                          val get_CONSTANT_ALPHA : t -> GLenum.t
                          val get_CONSTANT_COLOR : t -> GLenum.t
                          val get_CONTEXT_LOST_WEBGL : t -> GLenum.t
                          val get_CULL_FACE : t -> GLenum.t
                          val get_CULL_FACE_MODE : t -> GLenum.t
                          val get_CURRENT_PROGRAM : t -> GLenum.t
                          val get_CURRENT_VERTEX_ATTRIB : t -> GLenum.t
                          val get_CW : t -> GLenum.t
                          val get_DECR : t -> GLenum.t
                          val get_DECR_WRAP : t -> GLenum.t
                          val get_DELETE_STATUS : t -> GLenum.t
                          val get_DEPTH_ATTACHMENT : t -> GLenum.t
                          val get_DEPTH_BITS : t -> GLenum.t
                          val get_DEPTH_BUFFER_BIT : t -> GLenum.t
                          val get_DEPTH_CLEAR_VALUE : t -> GLenum.t
                          val get_DEPTH_COMPONENT : t -> GLenum.t
                          val get_DEPTH_COMPONENT16 : t -> GLenum.t
                          val get_DEPTH_FUNC : t -> GLenum.t
                          val get_DEPTH_RANGE : t -> GLenum.t
                          val get_DEPTH_STENCIL : t -> GLenum.t
                          val get_DEPTH_STENCIL_ATTACHMENT : t -> GLenum.t
                          val get_DEPTH_TEST : t -> GLenum.t
                          val get_DEPTH_WRITEMASK : t -> GLenum.t
                          val get_DITHER : t -> GLenum.t
                          val get_DONT_CARE : t -> GLenum.t
                          val get_DST_ALPHA : t -> GLenum.t
                          val get_DST_COLOR : t -> GLenum.t
                          val get_DYNAMIC_DRAW : t -> GLenum.t
                          val get_ELEMENT_ARRAY_BUFFER : t -> GLenum.t
                          val get_ELEMENT_ARRAY_BUFFER_BINDING :
                            t -> GLenum.t
                          val get_EQUAL : t -> GLenum.t
                          val get_FASTEST : t -> GLenum.t
                          val get_FLOAT : t -> GLenum.t
                          val get_FLOAT_MAT2 : t -> GLenum.t
                          val get_FLOAT_MAT3 : t -> GLenum.t
                          val get_FLOAT_MAT4 : t -> GLenum.t
                          val get_FLOAT_VEC2 : t -> GLenum.t
                          val get_FLOAT_VEC3 : t -> GLenum.t
                          val get_FLOAT_VEC4 : t -> GLenum.t
                          val get_FRAGMENT_SHADER : t -> GLenum.t
                          val get_FRAMEBUFFER : t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :
                            t -> GLenum.t
                          val
                            get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
                            : t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_BINDING : t -> GLenum.t
                          val get_FRAMEBUFFER_COMPLETE : t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_UNSUPPORTED : t -> GLenum.t
                          val get_FRONT : t -> GLenum.t
                          val get_FRONT_AND_BACK : t -> GLenum.t
                          val get_FRONT_FACE : t -> GLenum.t
                          val get_FUNC_ADD : t -> GLenum.t
                          val get_FUNC_REVERSE_SUBTRACT : t -> GLenum.t
                          val get_FUNC_SUBTRACT : t -> GLenum.t
                          val get_GENERATE_MIPMAP_HINT : t -> GLenum.t
                          val get_GEQUAL : t -> GLenum.t
                          val get_GREATER : t -> GLenum.t
                          val get_GREEN_BITS : t -> GLenum.t
                          val get_HIGH_FLOAT : t -> GLenum.t
                          val get_HIGH_INT : t -> GLenum.t
                          val get_IMPLEMENTATION_COLOR_READ_FORMAT :
                            t -> GLenum.t
                          val get_IMPLEMENTATION_COLOR_READ_TYPE :
                            t -> GLenum.t
                          val get_INCR : t -> GLenum.t
                          val get_INCR_WRAP : t -> GLenum.t
                          val get_INT : t -> GLenum.t
                          val get_INT_VEC2 : t -> GLenum.t
                          val get_INT_VEC3 : t -> GLenum.t
                          val get_INT_VEC4 : t -> GLenum.t
                          val get_INVALID_ENUM : t -> GLenum.t
                          val get_INVALID_FRAMEBUFFER_OPERATION :
                            t -> GLenum.t
                          val get_INVALID_OPERATION : t -> GLenum.t
                          val get_INVALID_VALUE : t -> GLenum.t
                          val get_INVERT : t -> GLenum.t
                          val get_KEEP : t -> GLenum.t
                          val get_LEQUAL : t -> GLenum.t
                          val get_LESS : t -> GLenum.t
                          val get_LINEAR : t -> GLenum.t
                          val get_LINEAR_MIPMAP_LINEAR : t -> GLenum.t
                          val get_LINEAR_MIPMAP_NEAREST : t -> GLenum.t
                          val get_LINES : t -> GLenum.t
                          val get_LINE_LOOP : t -> GLenum.t
                          val get_LINE_STRIP : t -> GLenum.t
                          val get_LINE_WIDTH : t -> GLenum.t
                          val get_LINK_STATUS : t -> GLenum.t
                          val get_LOW_FLOAT : t -> GLenum.t
                          val get_LOW_INT : t -> GLenum.t
                          val get_LUMINANCE : t -> GLenum.t
                          val get_LUMINANCE_ALPHA : t -> GLenum.t
                          val get_MAX_COMBINED_TEXTURE_IMAGE_UNITS :
                            t -> GLenum.t
                          val get_MAX_CUBE_MAP_TEXTURE_SIZE : t -> GLenum.t
                          val get_MAX_FRAGMENT_UNIFORM_VECTORS :
                            t -> GLenum.t
                          val get_MAX_RENDERBUFFER_SIZE : t -> GLenum.t
                          val get_MAX_TEXTURE_IMAGE_UNITS : t -> GLenum.t
                          val get_MAX_TEXTURE_SIZE : t -> GLenum.t
                          val get_MAX_VARYING_VECTORS : t -> GLenum.t
                          val get_MAX_VERTEX_ATTRIBS : t -> GLenum.t
                          val get_MAX_VERTEX_TEXTURE_IMAGE_UNITS :
                            t -> GLenum.t
                          val get_MAX_VERTEX_UNIFORM_VECTORS : t -> GLenum.t
                          val get_MAX_VIEWPORT_DIMS : t -> GLenum.t
                          val get_MEDIUM_FLOAT : t -> GLenum.t
                          val get_MEDIUM_INT : t -> GLenum.t
                          val get_MIRRORED_REPEAT : t -> GLenum.t
                          val get_NEAREST : t -> GLenum.t
                          val get_NEAREST_MIPMAP_LINEAR : t -> GLenum.t
                          val get_NEAREST_MIPMAP_NEAREST : t -> GLenum.t
                          val get_NEVER : t -> GLenum.t
                          val get_NICEST : t -> GLenum.t
                          val get_NONE : t -> GLenum.t
                          val get_NOTEQUAL : t -> GLenum.t
                          val get_NO_ERROR : t -> GLenum.t
                          val get_ONE : t -> GLenum.t
                          val get_ONE_MINUS_CONSTANT_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_CONSTANT_COLOR : t -> GLenum.t
                          val get_ONE_MINUS_DST_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_DST_COLOR : t -> GLenum.t
                          val get_ONE_MINUS_SRC_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_SRC_COLOR : t -> GLenum.t
                          val get_OUT_OF_MEMORY : t -> GLenum.t
                          val get_PACK_ALIGNMENT : t -> GLenum.t
                          val get_POINTS : t -> GLenum.t
                          val get_POLYGON_OFFSET_FACTOR : t -> GLenum.t
                          val get_POLYGON_OFFSET_FILL : t -> GLenum.t
                          val get_POLYGON_OFFSET_UNITS : t -> GLenum.t
                          val get_RED_BITS : t -> GLenum.t
                          val get_RENDERBUFFER : t -> GLenum.t
                          val get_RENDERBUFFER_ALPHA_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_BINDING : t -> GLenum.t
                          val get_RENDERBUFFER_BLUE_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_DEPTH_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_GREEN_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_HEIGHT : t -> GLenum.t
                          val get_RENDERBUFFER_INTERNAL_FORMAT :
                            t -> GLenum.t
                          val get_RENDERBUFFER_RED_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_STENCIL_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_WIDTH : t -> GLenum.t
                          val get_RENDERER : t -> GLenum.t
                          val get_REPEAT : t -> GLenum.t
                          val get_REPLACE : t -> GLenum.t
                          val get_RGB : t -> GLenum.t
                          val get_RGB565 : t -> GLenum.t
                          val get_RGB5_A1 : t -> GLenum.t
                          val get_RGBA : t -> GLenum.t
                          val get_RGBA4 : t -> GLenum.t
                          val get_SAMPLER_2D : t -> GLenum.t
                          val get_SAMPLER_CUBE : t -> GLenum.t
                          val get_SAMPLES : t -> GLenum.t
                          val get_SAMPLE_ALPHA_TO_COVERAGE : t -> GLenum.t
                          val get_SAMPLE_BUFFERS : t -> GLenum.t
                          val get_SAMPLE_COVERAGE : t -> GLenum.t
                          val get_SAMPLE_COVERAGE_INVERT : t -> GLenum.t
                          val get_SAMPLE_COVERAGE_VALUE : t -> GLenum.t
                          val get_SCISSOR_BOX : t -> GLenum.t
                          val get_SCISSOR_TEST : t -> GLenum.t
                          val get_SHADER_TYPE : t -> GLenum.t
                          val get_SHADING_LANGUAGE_VERSION : t -> GLenum.t
                          val get_SHORT : t -> GLenum.t
                          val get_SRC_ALPHA : t -> GLenum.t
                          val get_SRC_ALPHA_SATURATE : t -> GLenum.t
                          val get_SRC_COLOR : t -> GLenum.t
                          val get_STATIC_DRAW : t -> GLenum.t
                          val get_STENCIL_ATTACHMENT : t -> GLenum.t
                          val get_STENCIL_BACK_FAIL : t -> GLenum.t
                          val get_STENCIL_BACK_FUNC : t -> GLenum.t
                          val get_STENCIL_BACK_PASS_DEPTH_FAIL :
                            t -> GLenum.t
                          val get_STENCIL_BACK_PASS_DEPTH_PASS :
                            t -> GLenum.t
                          val get_STENCIL_BACK_REF : t -> GLenum.t
                          val get_STENCIL_BACK_VALUE_MASK : t -> GLenum.t
                          val get_STENCIL_BACK_WRITEMASK : t -> GLenum.t
                          val get_STENCIL_BITS : t -> GLenum.t
                          val get_STENCIL_BUFFER_BIT : t -> GLenum.t
                          val get_STENCIL_CLEAR_VALUE : t -> GLenum.t
                          val get_STENCIL_FAIL : t -> GLenum.t
                          val get_STENCIL_FUNC : t -> GLenum.t
                          val get_STENCIL_INDEX8 : t -> GLenum.t
                          val get_STENCIL_PASS_DEPTH_FAIL : t -> GLenum.t
                          val get_STENCIL_PASS_DEPTH_PASS : t -> GLenum.t
                          val get_STENCIL_REF : t -> GLenum.t
                          val get_STENCIL_TEST : t -> GLenum.t
                          val get_STENCIL_VALUE_MASK : t -> GLenum.t
                          val get_STENCIL_WRITEMASK : t -> GLenum.t
                          val get_STREAM_DRAW : t -> GLenum.t
                          val get_SUBPIXEL_BITS : t -> GLenum.t
                          val get_TEXTURE : t -> GLenum.t
                          val get_TEXTURE0 : t -> GLenum.t
                          val get_TEXTURE1 : t -> GLenum.t
                          val get_TEXTURE10 : t -> GLenum.t
                          val get_TEXTURE11 : t -> GLenum.t
                          val get_TEXTURE12 : t -> GLenum.t
                          val get_TEXTURE13 : t -> GLenum.t
                          val get_TEXTURE14 : t -> GLenum.t
                          val get_TEXTURE15 : t -> GLenum.t
                          val get_TEXTURE16 : t -> GLenum.t
                          val get_TEXTURE17 : t -> GLenum.t
                          val get_TEXTURE18 : t -> GLenum.t
                          val get_TEXTURE19 : t -> GLenum.t
                          val get_TEXTURE2 : t -> GLenum.t
                          val get_TEXTURE20 : t -> GLenum.t
                          val get_TEXTURE21 : t -> GLenum.t
                          val get_TEXTURE22 : t -> GLenum.t
                          val get_TEXTURE23 : t -> GLenum.t
                          val get_TEXTURE24 : t -> GLenum.t
                          val get_TEXTURE25 : t -> GLenum.t
                          val get_TEXTURE26 : t -> GLenum.t
                          val get_TEXTURE27 : t -> GLenum.t
                          val get_TEXTURE28 : t -> GLenum.t
                          val get_TEXTURE29 : t -> GLenum.t
                          val get_TEXTURE3 : t -> GLenum.t
                          val get_TEXTURE30 : t -> GLenum.t
                          val get_TEXTURE31 : t -> GLenum.t
                          val get_TEXTURE4 : t -> GLenum.t
                          val get_TEXTURE5 : t -> GLenum.t
                          val get_TEXTURE6 : t -> GLenum.t
                          val get_TEXTURE7 : t -> GLenum.t
                          val get_TEXTURE8 : t -> GLenum.t
                          val get_TEXTURE9 : t -> GLenum.t
                          val get_TEXTURE_2D : t -> GLenum.t
                          val get_TEXTURE_BINDING_2D : t -> GLenum.t
                          val get_TEXTURE_BINDING_CUBE_MAP : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_X : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_Y : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_Z : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_X : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_Y : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_Z : t -> GLenum.t
                          val get_TEXTURE_MAG_FILTER : t -> GLenum.t
                          val get_TEXTURE_MIN_FILTER : t -> GLenum.t
                          val get_TEXTURE_WRAP_S : t -> GLenum.t
                          val get_TEXTURE_WRAP_T : t -> GLenum.t
                          val get_TRIANGLES : t -> GLenum.t
                          val get_TRIANGLE_FAN : t -> GLenum.t
                          val get_TRIANGLE_STRIP : t -> GLenum.t
                          val get_UNPACK_ALIGNMENT : t -> GLenum.t
                          val get_UNPACK_COLORSPACE_CONVERSION_WEBGL :
                            t -> GLenum.t
                          val get_UNPACK_FLIP_Y_WEBGL : t -> GLenum.t
                          val get_UNPACK_PREMULTIPLY_ALPHA_WEBGL :
                            t -> GLenum.t
                          val get_UNSIGNED_BYTE : t -> GLenum.t
                          val get_UNSIGNED_INT : t -> GLenum.t
                          val get_UNSIGNED_SHORT : t -> GLenum.t
                          val get_UNSIGNED_SHORT_4_4_4_4 : t -> GLenum.t
                          val get_UNSIGNED_SHORT_5_5_5_1 : t -> GLenum.t
                          val get_UNSIGNED_SHORT_5_6_5 : t -> GLenum.t
                          val get_VALIDATE_STATUS : t -> GLenum.t
                          val get_VENDOR : t -> GLenum.t
                          val get_VERSION : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :
                            t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_ENABLED : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_NORMALIZED :
                            t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_POINTER : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_SIZE : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_STRIDE : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_TYPE : t -> GLenum.t
                          val get_VERTEX_SHADER : t -> GLenum.t
                          val get_VIEWPORT : t -> GLenum.t
                          val get_ZERO : t -> GLenum.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x12699 : Ojs.t) -> x12699
    and t_to_js : t -> Ojs.t = fun (x12698 : Ojs.t) -> x12698
    let (get_prototype : t -> WebGLRenderingContext.t) =
      fun (x12700 : t) ->
        WebGLRenderingContext.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12700) "prototype")
    let (set_prototype : t -> WebGLRenderingContext.t -> unit) =
      fun (x12701 : t) ->
        fun (x12702 : WebGLRenderingContext.t) ->
          Ojs.set_prop_ascii (t_to_js x12701) "prototype"
            (WebGLRenderingContext.t_to_js x12702)
    let (create : t -> WebGLRenderingContext.t) =
      fun (x12703 : t) ->
        WebGLRenderingContext.t_of_js (Ojs.new_obj (t_to_js x12703) [||])
    let (get_ACTIVE_ATTRIBUTES : t -> GLenum.t) =
      fun (x12704 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12704) "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : t -> GLenum.t) =
      fun (x12705 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12705) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : t -> GLenum.t) =
      fun (x12706 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12706) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : t -> GLenum.t) =
      fun (x12707 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12707) "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : t -> GLenum.t) =
      fun (x12708 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12708) "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : t -> GLenum.t) =
      fun (x12709 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12709) "ALPHA")
    let (get_ALPHA_BITS : t -> GLenum.t) =
      fun (x12710 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12710) "ALPHA_BITS")
    let (get_ALWAYS : t -> GLenum.t) =
      fun (x12711 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12711) "ALWAYS")
    let (get_ARRAY_BUFFER : t -> GLenum.t) =
      fun (x12712 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12712) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x12713 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12713) "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : t -> GLenum.t) =
      fun (x12714 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12714) "ATTACHED_SHADERS")
    let (get_BACK : t -> GLenum.t) =
      fun (x12715 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12715) "BACK")
    let (get_BLEND : t -> GLenum.t) =
      fun (x12716 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12716) "BLEND")
    let (get_BLEND_COLOR : t -> GLenum.t) =
      fun (x12717 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12717) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : t -> GLenum.t) =
      fun (x12718 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12718) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : t -> GLenum.t) =
      fun (x12719 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12719) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : t -> GLenum.t) =
      fun (x12720 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12720) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : t -> GLenum.t) =
      fun (x12721 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12721) "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : t -> GLenum.t) =
      fun (x12722 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12722) "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : t -> GLenum.t) =
      fun (x12723 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12723) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : t -> GLenum.t) =
      fun (x12724 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12724) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : t -> GLenum.t) =
      fun (x12725 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12725) "BLUE_BITS")
    let (get_BOOL : t -> GLenum.t) =
      fun (x12726 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12726) "BOOL")
    let (get_BOOL_VEC2 : t -> GLenum.t) =
      fun (x12727 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12727) "BOOL_VEC2")
    let (get_BOOL_VEC3 : t -> GLenum.t) =
      fun (x12728 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12728) "BOOL_VEC3")
    let (get_BOOL_VEC4 : t -> GLenum.t) =
      fun (x12729 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12729) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : t -> GLenum.t) =
      fun (x12730 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12730) "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : t -> GLenum.t) =
      fun (x12731 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12731) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : t -> GLenum.t) =
      fun (x12732 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12732) "BUFFER_USAGE")
    let (get_BYTE : t -> GLenum.t) =
      fun (x12733 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12733) "BYTE")
    let (get_CCW : t -> GLenum.t) =
      fun (x12734 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12734) "CCW")
    let (get_CLAMP_TO_EDGE : t -> GLenum.t) =
      fun (x12735 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12735) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : t -> GLenum.t) =
      fun (x12736 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12736) "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : t -> GLenum.t) =
      fun (x12737 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12737) "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : t -> GLenum.t) =
      fun (x12738 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12738) "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : t -> GLenum.t) =
      fun (x12739 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12739) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : t -> GLenum.t) =
      fun (x12740 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12740) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : t -> GLenum.t) =
      fun (x12741 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12741) "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : t -> GLenum.t) =
      fun (x12742 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12742) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : t -> GLenum.t) =
      fun (x12743 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12743) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : t -> GLenum.t) =
      fun (x12744 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12744) "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : t -> GLenum.t) =
      fun (x12745 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12745) "CULL_FACE")
    let (get_CULL_FACE_MODE : t -> GLenum.t) =
      fun (x12746 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12746) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : t -> GLenum.t) =
      fun (x12747 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12747) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : t -> GLenum.t) =
      fun (x12748 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12748) "CURRENT_VERTEX_ATTRIB")
    let (get_CW : t -> GLenum.t) =
      fun (x12749 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12749) "CW")
    let (get_DECR : t -> GLenum.t) =
      fun (x12750 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12750) "DECR")
    let (get_DECR_WRAP : t -> GLenum.t) =
      fun (x12751 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12751) "DECR_WRAP")
    let (get_DELETE_STATUS : t -> GLenum.t) =
      fun (x12752 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12752) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : t -> GLenum.t) =
      fun (x12753 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12753) "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : t -> GLenum.t) =
      fun (x12754 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12754) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : t -> GLenum.t) =
      fun (x12755 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12755) "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : t -> GLenum.t) =
      fun (x12756 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12756) "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : t -> GLenum.t) =
      fun (x12757 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12757) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : t -> GLenum.t) =
      fun (x12758 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12758) "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : t -> GLenum.t) =
      fun (x12759 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12759) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : t -> GLenum.t) =
      fun (x12760 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12760) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : t -> GLenum.t) =
      fun (x12761 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12761) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : t -> GLenum.t) =
      fun (x12762 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12762) "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : t -> GLenum.t) =
      fun (x12763 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12763) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : t -> GLenum.t) =
      fun (x12764 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12764) "DEPTH_WRITEMASK")
    let (get_DITHER : t -> GLenum.t) =
      fun (x12765 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12765) "DITHER")
    let (get_DONT_CARE : t -> GLenum.t) =
      fun (x12766 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12766) "DONT_CARE")
    let (get_DST_ALPHA : t -> GLenum.t) =
      fun (x12767 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12767) "DST_ALPHA")
    let (get_DST_COLOR : t -> GLenum.t) =
      fun (x12768 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12768) "DST_COLOR")
    let (get_DYNAMIC_DRAW : t -> GLenum.t) =
      fun (x12769 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12769) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : t -> GLenum.t) =
      fun (x12770 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12770) "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x12771 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12771) "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : t -> GLenum.t) =
      fun (x12772 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12772) "EQUAL")
    let (get_FASTEST : t -> GLenum.t) =
      fun (x12773 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12773) "FASTEST")
    let (get_FLOAT : t -> GLenum.t) =
      fun (x12774 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12774) "FLOAT")
    let (get_FLOAT_MAT2 : t -> GLenum.t) =
      fun (x12775 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12775) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : t -> GLenum.t) =
      fun (x12776 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12776) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : t -> GLenum.t) =
      fun (x12777 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12777) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : t -> GLenum.t) =
      fun (x12778 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12778) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : t -> GLenum.t) =
      fun (x12779 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12779) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : t -> GLenum.t) =
      fun (x12780 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12780) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : t -> GLenum.t) =
      fun (x12781 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12781) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : t -> GLenum.t) =
      fun (x12782 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12782) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : t -> GLenum.t) =
      fun (x12783 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12783)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : t -> GLenum.t) =
      fun (x12784 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12784)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : t -> GLenum.t) =
      fun (x12785 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12785)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : t -> GLenum.t) =
      fun (x12786 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12786)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : t -> GLenum.t) =
      fun (x12787 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12787) "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : t -> GLenum.t) =
      fun (x12788 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12788) "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : t -> GLenum.t) =
      fun (x12789 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12789)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : t -> GLenum.t) =
      fun (x12790 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12790)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : t -> GLenum.t) =
      fun (x12791 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12791)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : t -> GLenum.t) =
      fun (x12792 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12792) "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : t -> GLenum.t) =
      fun (x12793 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12793) "FRONT")
    let (get_FRONT_AND_BACK : t -> GLenum.t) =
      fun (x12794 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12794) "FRONT_AND_BACK")
    let (get_FRONT_FACE : t -> GLenum.t) =
      fun (x12795 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12795) "FRONT_FACE")
    let (get_FUNC_ADD : t -> GLenum.t) =
      fun (x12796 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12796) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : t -> GLenum.t) =
      fun (x12797 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12797) "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : t -> GLenum.t) =
      fun (x12798 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12798) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : t -> GLenum.t) =
      fun (x12799 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12799) "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : t -> GLenum.t) =
      fun (x12800 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12800) "GEQUAL")
    let (get_GREATER : t -> GLenum.t) =
      fun (x12801 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12801) "GREATER")
    let (get_GREEN_BITS : t -> GLenum.t) =
      fun (x12802 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12802) "GREEN_BITS")
    let (get_HIGH_FLOAT : t -> GLenum.t) =
      fun (x12803 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12803) "HIGH_FLOAT")
    let (get_HIGH_INT : t -> GLenum.t) =
      fun (x12804 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12804) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : t -> GLenum.t) =
      fun (x12805 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12805)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : t -> GLenum.t) =
      fun (x12806 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12806)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : t -> GLenum.t) =
      fun (x12807 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12807) "INCR")
    let (get_INCR_WRAP : t -> GLenum.t) =
      fun (x12808 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12808) "INCR_WRAP")
    let (get_INT : t -> GLenum.t) =
      fun (x12809 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12809) "INT")
    let (get_INT_VEC2 : t -> GLenum.t) =
      fun (x12810 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12810) "INT_VEC2")
    let (get_INT_VEC3 : t -> GLenum.t) =
      fun (x12811 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12811) "INT_VEC3")
    let (get_INT_VEC4 : t -> GLenum.t) =
      fun (x12812 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12812) "INT_VEC4")
    let (get_INVALID_ENUM : t -> GLenum.t) =
      fun (x12813 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12813) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : t -> GLenum.t) =
      fun (x12814 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12814)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : t -> GLenum.t) =
      fun (x12815 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12815) "INVALID_OPERATION")
    let (get_INVALID_VALUE : t -> GLenum.t) =
      fun (x12816 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12816) "INVALID_VALUE")
    let (get_INVERT : t -> GLenum.t) =
      fun (x12817 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12817) "INVERT")
    let (get_KEEP : t -> GLenum.t) =
      fun (x12818 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12818) "KEEP")
    let (get_LEQUAL : t -> GLenum.t) =
      fun (x12819 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12819) "LEQUAL")
    let (get_LESS : t -> GLenum.t) =
      fun (x12820 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12820) "LESS")
    let (get_LINEAR : t -> GLenum.t) =
      fun (x12821 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12821) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : t -> GLenum.t) =
      fun (x12822 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12822) "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : t -> GLenum.t) =
      fun (x12823 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12823) "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : t -> GLenum.t) =
      fun (x12824 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12824) "LINES")
    let (get_LINE_LOOP : t -> GLenum.t) =
      fun (x12825 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12825) "LINE_LOOP")
    let (get_LINE_STRIP : t -> GLenum.t) =
      fun (x12826 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12826) "LINE_STRIP")
    let (get_LINE_WIDTH : t -> GLenum.t) =
      fun (x12827 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12827) "LINE_WIDTH")
    let (get_LINK_STATUS : t -> GLenum.t) =
      fun (x12828 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12828) "LINK_STATUS")
    let (get_LOW_FLOAT : t -> GLenum.t) =
      fun (x12829 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12829) "LOW_FLOAT")
    let (get_LOW_INT : t -> GLenum.t) =
      fun (x12830 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12830) "LOW_INT")
    let (get_LUMINANCE : t -> GLenum.t) =
      fun (x12831 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12831) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : t -> GLenum.t) =
      fun (x12832 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12832) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x12833 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12833)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : t -> GLenum.t) =
      fun (x12834 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12834) "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : t -> GLenum.t) =
      fun (x12835 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12835) "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : t -> GLenum.t) =
      fun (x12836 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12836) "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x12837 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12837) "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : t -> GLenum.t) =
      fun (x12838 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12838) "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : t -> GLenum.t) =
      fun (x12839 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12839) "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : t -> GLenum.t) =
      fun (x12840 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12840) "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x12841 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12841)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : t -> GLenum.t) =
      fun (x12842 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12842) "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : t -> GLenum.t) =
      fun (x12843 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12843) "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : t -> GLenum.t) =
      fun (x12844 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12844) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : t -> GLenum.t) =
      fun (x12845 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12845) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : t -> GLenum.t) =
      fun (x12846 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12846) "MIRRORED_REPEAT")
    let (get_NEAREST : t -> GLenum.t) =
      fun (x12847 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12847) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : t -> GLenum.t) =
      fun (x12848 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12848) "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : t -> GLenum.t) =
      fun (x12849 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12849) "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : t -> GLenum.t) =
      fun (x12850 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12850) "NEVER")
    let (get_NICEST : t -> GLenum.t) =
      fun (x12851 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12851) "NICEST")
    let (get_NONE : t -> GLenum.t) =
      fun (x12852 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12852) "NONE")
    let (get_NOTEQUAL : t -> GLenum.t) =
      fun (x12853 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12853) "NOTEQUAL")
    let (get_NO_ERROR : t -> GLenum.t) =
      fun (x12854 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12854) "NO_ERROR")
    let (get_ONE : t -> GLenum.t) =
      fun (x12855 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12855) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : t -> GLenum.t) =
      fun (x12856 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12856) "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : t -> GLenum.t) =
      fun (x12857 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12857) "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : t -> GLenum.t) =
      fun (x12858 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12858) "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : t -> GLenum.t) =
      fun (x12859 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12859) "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : t -> GLenum.t) =
      fun (x12860 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12860) "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : t -> GLenum.t) =
      fun (x12861 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12861) "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : t -> GLenum.t) =
      fun (x12862 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12862) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : t -> GLenum.t) =
      fun (x12863 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12863) "PACK_ALIGNMENT")
    let (get_POINTS : t -> GLenum.t) =
      fun (x12864 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12864) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : t -> GLenum.t) =
      fun (x12865 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12865) "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : t -> GLenum.t) =
      fun (x12866 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12866) "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : t -> GLenum.t) =
      fun (x12867 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12867) "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : t -> GLenum.t) =
      fun (x12868 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12868) "RED_BITS")
    let (get_RENDERBUFFER : t -> GLenum.t) =
      fun (x12869 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12869) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : t -> GLenum.t) =
      fun (x12870 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12870) "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : t -> GLenum.t) =
      fun (x12871 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12871) "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : t -> GLenum.t) =
      fun (x12872 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12872) "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : t -> GLenum.t) =
      fun (x12873 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12873) "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : t -> GLenum.t) =
      fun (x12874 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12874) "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : t -> GLenum.t) =
      fun (x12875 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12875) "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : t -> GLenum.t) =
      fun (x12876 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12876) "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : t -> GLenum.t) =
      fun (x12877 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12877) "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : t -> GLenum.t) =
      fun (x12878 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12878) "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : t -> GLenum.t) =
      fun (x12879 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12879) "RENDERBUFFER_WIDTH")
    let (get_RENDERER : t -> GLenum.t) =
      fun (x12880 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12880) "RENDERER")
    let (get_REPEAT : t -> GLenum.t) =
      fun (x12881 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12881) "REPEAT")
    let (get_REPLACE : t -> GLenum.t) =
      fun (x12882 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12882) "REPLACE")
    let (get_RGB : t -> GLenum.t) =
      fun (x12883 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12883) "RGB")
    let (get_RGB565 : t -> GLenum.t) =
      fun (x12884 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12884) "RGB565")
    let (get_RGB5_A1 : t -> GLenum.t) =
      fun (x12885 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12885) "RGB5_A1")
    let (get_RGBA : t -> GLenum.t) =
      fun (x12886 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12886) "RGBA")
    let (get_RGBA4 : t -> GLenum.t) =
      fun (x12887 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12887) "RGBA4")
    let (get_SAMPLER_2D : t -> GLenum.t) =
      fun (x12888 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12888) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : t -> GLenum.t) =
      fun (x12889 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12889) "SAMPLER_CUBE")
    let (get_SAMPLES : t -> GLenum.t) =
      fun (x12890 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12890) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : t -> GLenum.t) =
      fun (x12891 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12891) "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : t -> GLenum.t) =
      fun (x12892 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12892) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : t -> GLenum.t) =
      fun (x12893 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12893) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : t -> GLenum.t) =
      fun (x12894 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12894) "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : t -> GLenum.t) =
      fun (x12895 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12895) "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : t -> GLenum.t) =
      fun (x12896 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12896) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : t -> GLenum.t) =
      fun (x12897 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12897) "SCISSOR_TEST")
    let (get_SHADER_TYPE : t -> GLenum.t) =
      fun (x12898 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12898) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : t -> GLenum.t) =
      fun (x12899 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12899) "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : t -> GLenum.t) =
      fun (x12900 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12900) "SHORT")
    let (get_SRC_ALPHA : t -> GLenum.t) =
      fun (x12901 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12901) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : t -> GLenum.t) =
      fun (x12902 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12902) "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : t -> GLenum.t) =
      fun (x12903 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12903) "SRC_COLOR")
    let (get_STATIC_DRAW : t -> GLenum.t) =
      fun (x12904 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12904) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : t -> GLenum.t) =
      fun (x12905 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12905) "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : t -> GLenum.t) =
      fun (x12906 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12906) "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : t -> GLenum.t) =
      fun (x12907 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12907) "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : t -> GLenum.t) =
      fun (x12908 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12908) "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : t -> GLenum.t) =
      fun (x12909 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12909) "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : t -> GLenum.t) =
      fun (x12910 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12910) "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : t -> GLenum.t) =
      fun (x12911 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12911) "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : t -> GLenum.t) =
      fun (x12912 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12912) "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : t -> GLenum.t) =
      fun (x12913 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12913) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : t -> GLenum.t) =
      fun (x12914 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12914) "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : t -> GLenum.t) =
      fun (x12915 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12915) "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : t -> GLenum.t) =
      fun (x12916 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12916) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : t -> GLenum.t) =
      fun (x12917 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12917) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : t -> GLenum.t) =
      fun (x12918 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12918) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : t -> GLenum.t) =
      fun (x12919 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12919) "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : t -> GLenum.t) =
      fun (x12920 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12920) "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : t -> GLenum.t) =
      fun (x12921 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12921) "STENCIL_REF")
    let (get_STENCIL_TEST : t -> GLenum.t) =
      fun (x12922 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12922) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : t -> GLenum.t) =
      fun (x12923 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12923) "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : t -> GLenum.t) =
      fun (x12924 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12924) "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : t -> GLenum.t) =
      fun (x12925 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12925) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : t -> GLenum.t) =
      fun (x12926 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12926) "SUBPIXEL_BITS")
    let (get_TEXTURE : t -> GLenum.t) =
      fun (x12927 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12927) "TEXTURE")
    let (get_TEXTURE0 : t -> GLenum.t) =
      fun (x12928 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12928) "TEXTURE0")
    let (get_TEXTURE1 : t -> GLenum.t) =
      fun (x12929 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12929) "TEXTURE1")
    let (get_TEXTURE10 : t -> GLenum.t) =
      fun (x12930 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12930) "TEXTURE10")
    let (get_TEXTURE11 : t -> GLenum.t) =
      fun (x12931 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12931) "TEXTURE11")
    let (get_TEXTURE12 : t -> GLenum.t) =
      fun (x12932 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12932) "TEXTURE12")
    let (get_TEXTURE13 : t -> GLenum.t) =
      fun (x12933 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12933) "TEXTURE13")
    let (get_TEXTURE14 : t -> GLenum.t) =
      fun (x12934 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12934) "TEXTURE14")
    let (get_TEXTURE15 : t -> GLenum.t) =
      fun (x12935 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12935) "TEXTURE15")
    let (get_TEXTURE16 : t -> GLenum.t) =
      fun (x12936 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12936) "TEXTURE16")
    let (get_TEXTURE17 : t -> GLenum.t) =
      fun (x12937 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12937) "TEXTURE17")
    let (get_TEXTURE18 : t -> GLenum.t) =
      fun (x12938 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12938) "TEXTURE18")
    let (get_TEXTURE19 : t -> GLenum.t) =
      fun (x12939 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12939) "TEXTURE19")
    let (get_TEXTURE2 : t -> GLenum.t) =
      fun (x12940 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12940) "TEXTURE2")
    let (get_TEXTURE20 : t -> GLenum.t) =
      fun (x12941 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12941) "TEXTURE20")
    let (get_TEXTURE21 : t -> GLenum.t) =
      fun (x12942 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12942) "TEXTURE21")
    let (get_TEXTURE22 : t -> GLenum.t) =
      fun (x12943 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12943) "TEXTURE22")
    let (get_TEXTURE23 : t -> GLenum.t) =
      fun (x12944 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12944) "TEXTURE23")
    let (get_TEXTURE24 : t -> GLenum.t) =
      fun (x12945 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12945) "TEXTURE24")
    let (get_TEXTURE25 : t -> GLenum.t) =
      fun (x12946 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12946) "TEXTURE25")
    let (get_TEXTURE26 : t -> GLenum.t) =
      fun (x12947 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12947) "TEXTURE26")
    let (get_TEXTURE27 : t -> GLenum.t) =
      fun (x12948 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12948) "TEXTURE27")
    let (get_TEXTURE28 : t -> GLenum.t) =
      fun (x12949 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12949) "TEXTURE28")
    let (get_TEXTURE29 : t -> GLenum.t) =
      fun (x12950 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12950) "TEXTURE29")
    let (get_TEXTURE3 : t -> GLenum.t) =
      fun (x12951 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12951) "TEXTURE3")
    let (get_TEXTURE30 : t -> GLenum.t) =
      fun (x12952 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12952) "TEXTURE30")
    let (get_TEXTURE31 : t -> GLenum.t) =
      fun (x12953 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12953) "TEXTURE31")
    let (get_TEXTURE4 : t -> GLenum.t) =
      fun (x12954 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12954) "TEXTURE4")
    let (get_TEXTURE5 : t -> GLenum.t) =
      fun (x12955 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12955) "TEXTURE5")
    let (get_TEXTURE6 : t -> GLenum.t) =
      fun (x12956 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12956) "TEXTURE6")
    let (get_TEXTURE7 : t -> GLenum.t) =
      fun (x12957 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12957) "TEXTURE7")
    let (get_TEXTURE8 : t -> GLenum.t) =
      fun (x12958 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12958) "TEXTURE8")
    let (get_TEXTURE9 : t -> GLenum.t) =
      fun (x12959 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12959) "TEXTURE9")
    let (get_TEXTURE_2D : t -> GLenum.t) =
      fun (x12960 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12960) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : t -> GLenum.t) =
      fun (x12961 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12961) "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : t -> GLenum.t) =
      fun (x12962 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12962) "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : t -> GLenum.t) =
      fun (x12963 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12963) "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : t -> GLenum.t) =
      fun (x12964 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12964) "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : t -> GLenum.t) =
      fun (x12965 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12965) "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : t -> GLenum.t) =
      fun (x12966 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12966) "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : t -> GLenum.t) =
      fun (x12967 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12967) "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : t -> GLenum.t) =
      fun (x12968 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12968) "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : t -> GLenum.t) =
      fun (x12969 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12969) "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : t -> GLenum.t) =
      fun (x12970 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12970) "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : t -> GLenum.t) =
      fun (x12971 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12971) "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : t -> GLenum.t) =
      fun (x12972 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12972) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : t -> GLenum.t) =
      fun (x12973 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12973) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : t -> GLenum.t) =
      fun (x12974 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12974) "TRIANGLES")
    let (get_TRIANGLE_FAN : t -> GLenum.t) =
      fun (x12975 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12975) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : t -> GLenum.t) =
      fun (x12976 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12976) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : t -> GLenum.t) =
      fun (x12977 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12977) "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : t -> GLenum.t) =
      fun (x12978 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12978)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : t -> GLenum.t) =
      fun (x12979 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12979) "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : t -> GLenum.t) =
      fun (x12980 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12980)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : t -> GLenum.t) =
      fun (x12981 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12981) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : t -> GLenum.t) =
      fun (x12982 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12982) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : t -> GLenum.t) =
      fun (x12983 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12983) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : t -> GLenum.t) =
      fun (x12984 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12984) "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : t -> GLenum.t) =
      fun (x12985 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12985) "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : t -> GLenum.t) =
      fun (x12986 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12986) "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : t -> GLenum.t) =
      fun (x12987 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12987) "VALIDATE_STATUS")
    let (get_VENDOR : t -> GLenum.t) =
      fun (x12988 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12988) "VENDOR")
    let (get_VERSION : t -> GLenum.t) =
      fun (x12989 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12989) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x12990 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12990)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : t -> GLenum.t) =
      fun (x12991 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12991) "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : t -> GLenum.t) =
      fun (x12992 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12992)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : t -> GLenum.t) =
      fun (x12993 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12993) "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : t -> GLenum.t) =
      fun (x12994 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12994) "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : t -> GLenum.t) =
      fun (x12995 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12995) "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : t -> GLenum.t) =
      fun (x12996 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12996) "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : t -> GLenum.t) =
      fun (x12997 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12997) "VERTEX_SHADER")
    let (get_VIEWPORT : t -> GLenum.t) =
      fun (x12998 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12998) "VIEWPORT")
    let (get_ZERO : t -> GLenum.t) =
      fun (x12999 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12999) "ZERO")
  end
 and
  WebGLRenderingContext:sig
                          type t =
                            [ `WebGLRenderingContext 
                            | `WebGLRenderingContextBase 
                            | `WebGLRenderingContextOverloads ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags =
                            [ `WebGLRenderingContext 
                            | `WebGLRenderingContextBase 
                            | `WebGLRenderingContextOverloads ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags =
                              [ `WebGLRenderingContext 
                              | `WebGLRenderingContextBase 
                              | `WebGLRenderingContextOverloads ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags =
                                        [> `WebGLRenderingContext ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create : unit -> t
                          val active_attributes : unit -> GLenum.t
                          val active_texture : unit -> GLenum.t
                          val active_uniforms : unit -> GLenum.t
                          val aliased_line_width_range : unit -> GLenum.t
                          val aliased_point_size_range : unit -> GLenum.t
                          val alpha : unit -> GLenum.t
                          val alpha_bits : unit -> GLenum.t
                          val always : unit -> GLenum.t
                          val array_buffer : unit -> GLenum.t
                          val array_buffer_binding : unit -> GLenum.t
                          val attached_shaders : unit -> GLenum.t
                          val back : unit -> GLenum.t
                          val blend : unit -> GLenum.t
                          val blend_color : unit -> GLenum.t
                          val blend_dst_alpha : unit -> GLenum.t
                          val blend_dst_rgb : unit -> GLenum.t
                          val blend_equation : unit -> GLenum.t
                          val blend_equation_alpha : unit -> GLenum.t
                          val blend_equation_rgb : unit -> GLenum.t
                          val blend_src_alpha : unit -> GLenum.t
                          val blend_src_rgb : unit -> GLenum.t
                          val blue_bits : unit -> GLenum.t
                          val bool : unit -> GLenum.t
                          val bool_vec2 : unit -> GLenum.t
                          val bool_vec3 : unit -> GLenum.t
                          val bool_vec4 : unit -> GLenum.t
                          val browser_default_webgl : unit -> GLenum.t
                          val buffer_size : unit -> GLenum.t
                          val buffer_usage : unit -> GLenum.t
                          val byte : unit -> GLenum.t
                          val ccw : unit -> GLenum.t
                          val clamp_to_edge : unit -> GLenum.t
                          val color_attachment0 : unit -> GLenum.t
                          val color_buffer_bit : unit -> GLenum.t
                          val color_clear_value : unit -> GLenum.t
                          val color_writemask : unit -> GLenum.t
                          val compile_status : unit -> GLenum.t
                          val compressed_texture_formats : unit -> GLenum.t
                          val constant_alpha : unit -> GLenum.t
                          val constant_color : unit -> GLenum.t
                          val context_lost_webgl : unit -> GLenum.t
                          val cull_face : unit -> GLenum.t
                          val cull_face_mode : unit -> GLenum.t
                          val current_program : unit -> GLenum.t
                          val current_vertex_attrib : unit -> GLenum.t
                          val cw : unit -> GLenum.t
                          val decr : unit -> GLenum.t
                          val decr_wrap : unit -> GLenum.t
                          val delete_status : unit -> GLenum.t
                          val depth_attachment : unit -> GLenum.t
                          val depth_bits : unit -> GLenum.t
                          val depth_buffer_bit : unit -> GLenum.t
                          val depth_clear_value : unit -> GLenum.t
                          val depth_component : unit -> GLenum.t
                          val depth_component16 : unit -> GLenum.t
                          val depth_func : unit -> GLenum.t
                          val depth_range : unit -> GLenum.t
                          val depth_stencil : unit -> GLenum.t
                          val depth_stencil_attachment : unit -> GLenum.t
                          val depth_test : unit -> GLenum.t
                          val depth_writemask : unit -> GLenum.t
                          val dither : unit -> GLenum.t
                          val dont_care : unit -> GLenum.t
                          val dst_alpha : unit -> GLenum.t
                          val dst_color : unit -> GLenum.t
                          val dynamic_draw : unit -> GLenum.t
                          val element_array_buffer : unit -> GLenum.t
                          val element_array_buffer_binding : unit -> GLenum.t
                          val equal : unit -> GLenum.t
                          val fastest : unit -> GLenum.t
                          val float : unit -> GLenum.t
                          val float_mat2 : unit -> GLenum.t
                          val float_mat3 : unit -> GLenum.t
                          val float_mat4 : unit -> GLenum.t
                          val float_vec2 : unit -> GLenum.t
                          val float_vec3 : unit -> GLenum.t
                          val float_vec4 : unit -> GLenum.t
                          val fragment_shader : unit -> GLenum.t
                          val framebuffer : unit -> GLenum.t
                          val framebuffer_attachment_object_name :
                            unit -> GLenum.t
                          val framebuffer_attachment_object_type :
                            unit -> GLenum.t
                          val framebuffer_attachment_texture_cube_map_face :
                            unit -> GLenum.t
                          val framebuffer_attachment_texture_level :
                            unit -> GLenum.t
                          val framebuffer_binding : unit -> GLenum.t
                          val framebuffer_complete : unit -> GLenum.t
                          val framebuffer_incomplete_attachment :
                            unit -> GLenum.t
                          val framebuffer_incomplete_dimensions :
                            unit -> GLenum.t
                          val framebuffer_incomplete_missing_attachment :
                            unit -> GLenum.t
                          val framebuffer_unsupported : unit -> GLenum.t
                          val front : unit -> GLenum.t
                          val front_and_back : unit -> GLenum.t
                          val front_face : unit -> GLenum.t
                          val func_add : unit -> GLenum.t
                          val func_reverse_subtract : unit -> GLenum.t
                          val func_subtract : unit -> GLenum.t
                          val generate_mipmap_hint : unit -> GLenum.t
                          val gequal : unit -> GLenum.t
                          val greater : unit -> GLenum.t
                          val green_bits : unit -> GLenum.t
                          val high_float : unit -> GLenum.t
                          val high_int : unit -> GLenum.t
                          val implementation_color_read_format :
                            unit -> GLenum.t
                          val implementation_color_read_type :
                            unit -> GLenum.t
                          val incr : unit -> GLenum.t
                          val incr_wrap : unit -> GLenum.t
                          val int : unit -> GLenum.t
                          val int_vec2 : unit -> GLenum.t
                          val int_vec3 : unit -> GLenum.t
                          val int_vec4 : unit -> GLenum.t
                          val invalid_enum : unit -> GLenum.t
                          val invalid_framebuffer_operation :
                            unit -> GLenum.t
                          val invalid_operation : unit -> GLenum.t
                          val invalid_value : unit -> GLenum.t
                          val invert : unit -> GLenum.t
                          val keep : unit -> GLenum.t
                          val lequal : unit -> GLenum.t
                          val less : unit -> GLenum.t
                          val linear : unit -> GLenum.t
                          val linear_mipmap_linear : unit -> GLenum.t
                          val linear_mipmap_nearest : unit -> GLenum.t
                          val lines : unit -> GLenum.t
                          val line_loop : unit -> GLenum.t
                          val line_strip : unit -> GLenum.t
                          val line_width : unit -> GLenum.t
                          val link_status : unit -> GLenum.t
                          val low_float : unit -> GLenum.t
                          val low_int : unit -> GLenum.t
                          val luminance : unit -> GLenum.t
                          val luminance_alpha : unit -> GLenum.t
                          val max_combined_texture_image_units :
                            unit -> GLenum.t
                          val max_cube_map_texture_size : unit -> GLenum.t
                          val max_fragment_uniform_vectors : unit -> GLenum.t
                          val max_renderbuffer_size : unit -> GLenum.t
                          val max_texture_image_units : unit -> GLenum.t
                          val max_texture_size : unit -> GLenum.t
                          val max_varying_vectors : unit -> GLenum.t
                          val max_vertex_attribs : unit -> GLenum.t
                          val max_vertex_texture_image_units :
                            unit -> GLenum.t
                          val max_vertex_uniform_vectors : unit -> GLenum.t
                          val max_viewport_dims : unit -> GLenum.t
                          val medium_float : unit -> GLenum.t
                          val medium_int : unit -> GLenum.t
                          val mirrored_repeat : unit -> GLenum.t
                          val nearest : unit -> GLenum.t
                          val nearest_mipmap_linear : unit -> GLenum.t
                          val nearest_mipmap_nearest : unit -> GLenum.t
                          val never : unit -> GLenum.t
                          val nicest : unit -> GLenum.t
                          val none : unit -> GLenum.t
                          val notequal : unit -> GLenum.t
                          val no_error : unit -> GLenum.t
                          val one : unit -> GLenum.t
                          val one_minus_constant_alpha : unit -> GLenum.t
                          val one_minus_constant_color : unit -> GLenum.t
                          val one_minus_dst_alpha : unit -> GLenum.t
                          val one_minus_dst_color : unit -> GLenum.t
                          val one_minus_src_alpha : unit -> GLenum.t
                          val one_minus_src_color : unit -> GLenum.t
                          val out_of_memory : unit -> GLenum.t
                          val pack_alignment : unit -> GLenum.t
                          val points : unit -> GLenum.t
                          val polygon_offset_factor : unit -> GLenum.t
                          val polygon_offset_fill : unit -> GLenum.t
                          val polygon_offset_units : unit -> GLenum.t
                          val red_bits : unit -> GLenum.t
                          val renderbuffer : unit -> GLenum.t
                          val renderbuffer_alpha_size : unit -> GLenum.t
                          val renderbuffer_binding : unit -> GLenum.t
                          val renderbuffer_blue_size : unit -> GLenum.t
                          val renderbuffer_depth_size : unit -> GLenum.t
                          val renderbuffer_green_size : unit -> GLenum.t
                          val renderbuffer_height : unit -> GLenum.t
                          val renderbuffer_internal_format : unit -> GLenum.t
                          val renderbuffer_red_size : unit -> GLenum.t
                          val renderbuffer_stencil_size : unit -> GLenum.t
                          val renderbuffer_width : unit -> GLenum.t
                          val renderer : unit -> GLenum.t
                          val repeat : unit -> GLenum.t
                          val replace : unit -> GLenum.t
                          val rgb : unit -> GLenum.t
                          val rgb565 : unit -> GLenum.t
                          val rgb5_a1 : unit -> GLenum.t
                          val rgba : unit -> GLenum.t
                          val rgba4 : unit -> GLenum.t
                          val sampler_2d : unit -> GLenum.t
                          val sampler_cube : unit -> GLenum.t
                          val samples : unit -> GLenum.t
                          val sample_alpha_to_coverage : unit -> GLenum.t
                          val sample_buffers : unit -> GLenum.t
                          val sample_coverage : unit -> GLenum.t
                          val sample_coverage_invert : unit -> GLenum.t
                          val sample_coverage_value : unit -> GLenum.t
                          val scissor_box : unit -> GLenum.t
                          val scissor_test : unit -> GLenum.t
                          val shader_type : unit -> GLenum.t
                          val shading_language_version : unit -> GLenum.t
                          val short : unit -> GLenum.t
                          val src_alpha : unit -> GLenum.t
                          val src_alpha_saturate : unit -> GLenum.t
                          val src_color : unit -> GLenum.t
                          val static_draw : unit -> GLenum.t
                          val stencil_attachment : unit -> GLenum.t
                          val stencil_back_fail : unit -> GLenum.t
                          val stencil_back_func : unit -> GLenum.t
                          val stencil_back_pass_depth_fail : unit -> GLenum.t
                          val stencil_back_pass_depth_pass : unit -> GLenum.t
                          val stencil_back_ref : unit -> GLenum.t
                          val stencil_back_value_mask : unit -> GLenum.t
                          val stencil_back_writemask : unit -> GLenum.t
                          val stencil_bits : unit -> GLenum.t
                          val stencil_buffer_bit : unit -> GLenum.t
                          val stencil_clear_value : unit -> GLenum.t
                          val stencil_fail : unit -> GLenum.t
                          val stencil_func : unit -> GLenum.t
                          val stencil_index8 : unit -> GLenum.t
                          val stencil_pass_depth_fail : unit -> GLenum.t
                          val stencil_pass_depth_pass : unit -> GLenum.t
                          val stencil_ref : unit -> GLenum.t
                          val stencil_test : unit -> GLenum.t
                          val stencil_value_mask : unit -> GLenum.t
                          val stencil_writemask : unit -> GLenum.t
                          val stream_draw : unit -> GLenum.t
                          val subpixel_bits : unit -> GLenum.t
                          val texture : unit -> GLenum.t
                          val texture0 : unit -> GLenum.t
                          val texture1 : unit -> GLenum.t
                          val texture10 : unit -> GLenum.t
                          val texture11 : unit -> GLenum.t
                          val texture12 : unit -> GLenum.t
                          val texture13 : unit -> GLenum.t
                          val texture14 : unit -> GLenum.t
                          val texture15 : unit -> GLenum.t
                          val texture16 : unit -> GLenum.t
                          val texture17 : unit -> GLenum.t
                          val texture18 : unit -> GLenum.t
                          val texture19 : unit -> GLenum.t
                          val texture2 : unit -> GLenum.t
                          val texture20 : unit -> GLenum.t
                          val texture21 : unit -> GLenum.t
                          val texture22 : unit -> GLenum.t
                          val texture23 : unit -> GLenum.t
                          val texture24 : unit -> GLenum.t
                          val texture25 : unit -> GLenum.t
                          val texture26 : unit -> GLenum.t
                          val texture27 : unit -> GLenum.t
                          val texture28 : unit -> GLenum.t
                          val texture29 : unit -> GLenum.t
                          val texture3 : unit -> GLenum.t
                          val texture30 : unit -> GLenum.t
                          val texture31 : unit -> GLenum.t
                          val texture4 : unit -> GLenum.t
                          val texture5 : unit -> GLenum.t
                          val texture6 : unit -> GLenum.t
                          val texture7 : unit -> GLenum.t
                          val texture8 : unit -> GLenum.t
                          val texture9 : unit -> GLenum.t
                          val texture_2d : unit -> GLenum.t
                          val texture_binding_2d : unit -> GLenum.t
                          val texture_binding_cube_map : unit -> GLenum.t
                          val texture_cube_map : unit -> GLenum.t
                          val texture_cube_map_negative_x : unit -> GLenum.t
                          val texture_cube_map_negative_y : unit -> GLenum.t
                          val texture_cube_map_negative_z : unit -> GLenum.t
                          val texture_cube_map_positive_x : unit -> GLenum.t
                          val texture_cube_map_positive_y : unit -> GLenum.t
                          val texture_cube_map_positive_z : unit -> GLenum.t
                          val texture_mag_filter : unit -> GLenum.t
                          val texture_min_filter : unit -> GLenum.t
                          val texture_wrap_s : unit -> GLenum.t
                          val texture_wrap_t : unit -> GLenum.t
                          val triangles : unit -> GLenum.t
                          val triangle_fan : unit -> GLenum.t
                          val triangle_strip : unit -> GLenum.t
                          val unpack_alignment : unit -> GLenum.t
                          val unpack_colorspace_conversion_webgl :
                            unit -> GLenum.t
                          val unpack_flip_y_webgl : unit -> GLenum.t
                          val unpack_premultiply_alpha_webgl :
                            unit -> GLenum.t
                          val unsigned_byte : unit -> GLenum.t
                          val unsigned_int : unit -> GLenum.t
                          val unsigned_short : unit -> GLenum.t
                          val unsigned_short_4_4_4_4 : unit -> GLenum.t
                          val unsigned_short_5_5_5_1 : unit -> GLenum.t
                          val unsigned_short_5_6_5 : unit -> GLenum.t
                          val validate_status : unit -> GLenum.t
                          val vendor : unit -> GLenum.t
                          val version : unit -> GLenum.t
                          val vertex_attrib_array_buffer_binding :
                            unit -> GLenum.t
                          val vertex_attrib_array_enabled : unit -> GLenum.t
                          val vertex_attrib_array_normalized :
                            unit -> GLenum.t
                          val vertex_attrib_array_pointer : unit -> GLenum.t
                          val vertex_attrib_array_size : unit -> GLenum.t
                          val vertex_attrib_array_stride : unit -> GLenum.t
                          val vertex_attrib_array_type : unit -> GLenum.t
                          val vertex_shader : unit -> GLenum.t
                          val viewport : unit -> GLenum.t
                          val zero : unit -> GLenum.t
                        end =
  struct
    type t =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13001 : Ojs.t) -> t_of_js x13001
    and t_0_to_js : t_0 -> Ojs.t = fun (x13000 : t) -> t_to_js x13000
    type tags =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13004 : Ojs.t) -> intf_of_js __tags_of_js x13004
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13002 : __tags intf) -> intf_to_js __tags_to_js x13002
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") 
             [||])
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ZERO")
  end
module WebGLContextEventInit =
  struct
    type t = [ `EventInit  | `WebGLContextEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13007 : Ojs.t) -> t_of_js x13007
    and t_0_to_js : t_0 -> Ojs.t = fun (x13006 : t) -> t_to_js x13006
    type tags = [ `EventInit  | `WebGLContextEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13010 : Ojs.t) -> intf_of_js __tags_of_js x13010
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13008 : __tags intf) -> intf_to_js __tags_to_js x13008
    let (get_statusMessage : 'tags this -> string) =
      fun (x13012 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13012) "statusMessage")
    let (set_statusMessage : 'tags this -> string -> unit) =
      fun (x13014 : 'tags this) ->
        fun (x13015 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13014) "statusMessage"
            (Ojs.string_to_js x13015)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface114:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLContextEvent.t
                          val set_prototype :
                            t -> WebGLContextEvent.t -> unit
                          val create :
                            t ->
                              type_:string ->
                                ?eventInit:WebGLContextEventInit.t ->
                                  unit -> WebGLContextEvent.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13018 : Ojs.t) -> x13018
    and t_to_js : t -> Ojs.t = fun (x13017 : Ojs.t) -> x13017
    let (get_prototype : t -> WebGLContextEvent.t) =
      fun (x13019 : t) ->
        WebGLContextEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13019) "prototype")
    let (set_prototype : t -> WebGLContextEvent.t -> unit) =
      fun (x13020 : t) ->
        fun (x13021 : WebGLContextEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x13020) "prototype"
            (WebGLContextEvent.t_to_js x13021)
    let (create :
      t ->
        type_:string ->
          ?eventInit:WebGLContextEventInit.t -> unit -> WebGLContextEvent.t)
      =
      fun (x13026 : t) ->
        fun ~type_:(x13022 : string) ->
          fun ?eventInit:(x13023 : WebGLContextEventInit.t option) ->
            fun () ->
              WebGLContextEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x13026)
                   (let x13024 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x13024 "push" [|(Ojs.string_to_js x13022)|]);
                    (match x13023 with
                     | Some x13025 ->
                         ignore
                           (Ojs.call x13024 "push"
                              [|(WebGLContextEventInit.t_to_js x13025)|])
                     | None -> ());
                    x13024))
  end
 and
  WebGLContextEvent:sig
                      type t = [ `Event  | `WebGLContextEvent ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `Event  | `WebGLContextEvent ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `Event  | `WebGLContextEvent ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `WebGLContextEvent ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_statusMessage : 'tags this -> string
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create :
                        type_:string ->
                          ?eventInit:WebGLContextEventInit.t -> unit -> t
                    end =
  struct
    type t = [ `Event  | `WebGLContextEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13028 : Ojs.t) -> t_of_js x13028
    and t_0_to_js : t_0 -> Ojs.t = fun (x13027 : t) -> t_to_js x13027
    type tags = [ `Event  | `WebGLContextEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13031 : Ojs.t) -> intf_of_js __tags_of_js x13031
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13029 : __tags intf) -> intf_to_js __tags_to_js x13029
    let (get_statusMessage : 'tags this -> string) =
      fun (x13033 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13033) "statusMessage")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent") "prototype")
    let (create :
      type_:string -> ?eventInit:WebGLContextEventInit.t -> unit -> t) =
      fun ~type_:(x13035 : string) ->
        fun ?eventInit:(x13036 : WebGLContextEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent")
                 (let x13037 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13037 "push" [|(Ojs.string_to_js x13035)|]);
                  (match x13036 with
                   | Some x13038 ->
                       ignore
                         (Ojs.call x13037 "push"
                            [|(WebGLContextEventInit.t_to_js x13038)|])
                   | None -> ());
                  x13037))
  end
module WebGL2RenderingContextOverloads =
  struct
    type t = [ `WebGL2RenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13040 : Ojs.t) -> t_of_js x13040
    and t_0_to_js : t_0 -> Ojs.t = fun (x13039 : t) -> t_to_js x13039
    type tags = [ `WebGL2RenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13043 : Ojs.t) -> intf_of_js __tags_of_js x13043
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13041 : __tags intf) -> intf_to_js __tags_to_js x13041
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x13048 : 'tags this) ->
        fun ~target:(x13045 : GLenum.t) ->
          fun ~size:(x13046 : GLsizeiptr.t) ->
            fun ~usage:(x13047 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13048) "bufferData"
                   [|(GLenum.t_to_js x13045);(GLsizeiptr.t_to_js x13046);(
                     GLenum.t_to_js x13047)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          srcData:BufferSource.t or_null -> usage:GLenum.t -> unit)
      =
      fun (x13054 : 'tags this) ->
        fun ~target:(x13050 : GLenum.t) ->
          fun ~srcData:(x13051 : BufferSource.t or_null) ->
            fun ~usage:(x13053 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13054) "bufferData"
                   [|(GLenum.t_to_js x13050);(or_null_to_js
                                                BufferSource.t_to_js x13051);(
                     GLenum.t_to_js x13053)|])
    let (bufferData'' :
      'tags this ->
        target:GLenum.t ->
          srcData:ArrayBufferView.t_0 ->
            usage:GLenum.t ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x13063 : 'tags this) ->
        fun ~target:(x13056 : GLenum.t) ->
          fun ~srcData:(x13057 : ArrayBufferView.t_0) ->
            fun ~usage:(x13058 : GLenum.t) ->
              fun ~srcOffset:(x13059 : GLuint.t) ->
                fun ?length:(x13060 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13065 = this_to_js Obj.magic x13063 in
                       Ojs.call (Ojs.get_prop_ascii x13065 "bufferData")
                         "apply"
                         [|x13065;((let x13061 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13061 "push"
                                         [|(GLenum.t_to_js x13056)|]);
                                    ignore
                                      (Ojs.call x13061 "push"
                                         [|(ArrayBufferView.t_0_to_js x13057)|]);
                                    ignore
                                      (Ojs.call x13061 "push"
                                         [|(GLenum.t_to_js x13058)|]);
                                    ignore
                                      (Ojs.call x13061 "push"
                                         [|(GLuint.t_to_js x13059)|]);
                                    (match x13060 with
                                     | Some x13062 ->
                                         ignore
                                           (Ojs.call x13061 "push"
                                              [|(GLuint.t_to_js x13062)|])
                                     | None -> ());
                                    x13061))|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t -> srcData:BufferSource.t -> unit)
      =
      fun (x13069 : 'tags this) ->
        fun ~target:(x13066 : GLenum.t) ->
          fun ~dstByteOffset:(x13067 : GLintptr.t) ->
            fun ~srcData:(x13068 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13069) "bufferSubData"
                   [|(GLenum.t_to_js x13066);(GLintptr.t_to_js x13067);(
                     BufferSource.t_to_js x13068)|])
    let (bufferSubData' :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t ->
            srcData:ArrayBufferView.t_0 ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x13078 : 'tags this) ->
        fun ~target:(x13071 : GLenum.t) ->
          fun ~dstByteOffset:(x13072 : GLintptr.t) ->
            fun ~srcData:(x13073 : ArrayBufferView.t_0) ->
              fun ~srcOffset:(x13074 : GLuint.t) ->
                fun ?length:(x13075 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13080 = this_to_js Obj.magic x13078 in
                       Ojs.call (Ojs.get_prop_ascii x13080 "bufferSubData")
                         "apply"
                         [|x13080;((let x13076 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13076 "push"
                                         [|(GLenum.t_to_js x13071)|]);
                                    ignore
                                      (Ojs.call x13076 "push"
                                         [|(GLintptr.t_to_js x13072)|]);
                                    ignore
                                      (Ojs.call x13076 "push"
                                         [|(ArrayBufferView.t_0_to_js x13073)|]);
                                    ignore
                                      (Ojs.call x13076 "push"
                                         [|(GLuint.t_to_js x13074)|]);
                                    (match x13075 with
                                     | Some x13077 ->
                                         ignore
                                           (Ojs.call x13076 "push"
                                              [|(GLuint.t_to_js x13077)|])
                                     | None -> ());
                                    x13076))|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x13089 : 'tags this) ->
        fun ~target:(x13081 : GLenum.t) ->
          fun ~level:(x13082 : GLint.t) ->
            fun ~internalformat:(x13083 : GLenum.t) ->
              fun ~width:(x13084 : GLsizei.t) ->
                fun ~height:(x13085 : GLsizei.t) ->
                  fun ~border:(x13086 : GLint.t) ->
                    fun ~imageSize:(x13087 : GLsizei.t) ->
                      fun ~offset:(x13088 : GLintptr.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x13089)
                             "compressedTexImage2D"
                             [|(GLenum.t_to_js x13081);(GLint.t_to_js x13082);(
                               GLenum.t_to_js x13083);(GLsizei.t_to_js x13084);(
                               GLsizei.t_to_js x13085);(GLint.t_to_js x13086);(
                               GLsizei.t_to_js x13087);(GLintptr.t_to_js
                                                          x13088)|])
    let (compressedTexImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    srcData:ArrayBufferView.t_0 ->
                      ?srcOffset:GLuint.t ->
                        ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x13103 : 'tags this) ->
        fun ~target:(x13091 : GLenum.t) ->
          fun ~level:(x13092 : GLint.t) ->
            fun ~internalformat:(x13093 : GLenum.t) ->
              fun ~width:(x13094 : GLsizei.t) ->
                fun ~height:(x13095 : GLsizei.t) ->
                  fun ~border:(x13096 : GLint.t) ->
                    fun ~srcData:(x13097 : ArrayBufferView.t_0) ->
                      fun ?srcOffset:(x13098 : GLuint.t option) ->
                        fun ?srcLengthOverride:(x13099 : GLuint.t option) ->
                          fun () ->
                            ignore
                              (let x13105 = this_to_js Obj.magic x13103 in
                               Ojs.call
                                 (Ojs.get_prop_ascii x13105
                                    "compressedTexImage2D") "apply"
                                 [|x13105;((let x13100 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x13100 "push"
                                                 [|(GLenum.t_to_js x13091)|]);
                                            ignore
                                              (Ojs.call x13100 "push"
                                                 [|(GLint.t_to_js x13092)|]);
                                            ignore
                                              (Ojs.call x13100 "push"
                                                 [|(GLenum.t_to_js x13093)|]);
                                            ignore
                                              (Ojs.call x13100 "push"
                                                 [|(GLsizei.t_to_js x13094)|]);
                                            ignore
                                              (Ojs.call x13100 "push"
                                                 [|(GLsizei.t_to_js x13095)|]);
                                            ignore
                                              (Ojs.call x13100 "push"
                                                 [|(GLint.t_to_js x13096)|]);
                                            ignore
                                              (Ojs.call x13100 "push"
                                                 [|(ArrayBufferView.t_0_to_js
                                                      x13097)|]);
                                            (match x13098 with
                                             | Some x13102 ->
                                                 ignore
                                                   (Ojs.call x13100 "push"
                                                      [|(GLuint.t_to_js
                                                           x13102)|])
                                             | None -> ());
                                            (match x13099 with
                                             | Some x13101 ->
                                                 ignore
                                                   (Ojs.call x13100 "push"
                                                      [|(GLuint.t_to_js
                                                           x13101)|])
                                             | None -> ());
                                            x13100))|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x13115 : 'tags this) ->
        fun ~target:(x13106 : GLenum.t) ->
          fun ~level:(x13107 : GLint.t) ->
            fun ~xoffset:(x13108 : GLint.t) ->
              fun ~yoffset:(x13109 : GLint.t) ->
                fun ~width:(x13110 : GLsizei.t) ->
                  fun ~height:(x13111 : GLsizei.t) ->
                    fun ~format:(x13112 : GLenum.t) ->
                      fun ~imageSize:(x13113 : GLsizei.t) ->
                        fun ~offset:(x13114 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13115)
                               "compressedTexSubImage2D"
                               [|(GLenum.t_to_js x13106);(GLint.t_to_js
                                                            x13107);(
                                 GLint.t_to_js x13108);(GLint.t_to_js x13109);(
                                 GLsizei.t_to_js x13110);(GLsizei.t_to_js
                                                            x13111);(
                                 GLenum.t_to_js x13112);(GLsizei.t_to_js
                                                           x13113);(GLintptr.t_to_js
                                                                    x13114)|])
    let (compressedTexSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x13130 : 'tags this) ->
        fun ~target:(x13117 : GLenum.t) ->
          fun ~level:(x13118 : GLint.t) ->
            fun ~xoffset:(x13119 : GLint.t) ->
              fun ~yoffset:(x13120 : GLint.t) ->
                fun ~width:(x13121 : GLsizei.t) ->
                  fun ~height:(x13122 : GLsizei.t) ->
                    fun ~format:(x13123 : GLenum.t) ->
                      fun ~srcData:(x13124 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x13125 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x13126 : GLuint.t option)
                            ->
                            fun () ->
                              ignore
                                (let x13132 = this_to_js Obj.magic x13130 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x13132
                                      "compressedTexSubImage2D") "apply"
                                   [|x13132;((let x13127 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x13127 "push"
                                                   [|(GLenum.t_to_js x13117)|]);
                                              ignore
                                                (Ojs.call x13127 "push"
                                                   [|(GLint.t_to_js x13118)|]);
                                              ignore
                                                (Ojs.call x13127 "push"
                                                   [|(GLint.t_to_js x13119)|]);
                                              ignore
                                                (Ojs.call x13127 "push"
                                                   [|(GLint.t_to_js x13120)|]);
                                              ignore
                                                (Ojs.call x13127 "push"
                                                   [|(GLsizei.t_to_js x13121)|]);
                                              ignore
                                                (Ojs.call x13127 "push"
                                                   [|(GLsizei.t_to_js x13122)|]);
                                              ignore
                                                (Ojs.call x13127 "push"
                                                   [|(GLenum.t_to_js x13123)|]);
                                              ignore
                                                (Ojs.call x13127 "push"
                                                   [|(ArrayBufferView.t_0_to_js
                                                        x13124)|]);
                                              (match x13125 with
                                               | Some x13129 ->
                                                   ignore
                                                     (Ojs.call x13127 "push"
                                                        [|(GLuint.t_to_js
                                                             x13129)|])
                                               | None -> ());
                                              (match x13126 with
                                               | Some x13128 ->
                                                   ignore
                                                     (Ojs.call x13127 "push"
                                                        [|(GLuint.t_to_js
                                                             x13128)|])
                                               | None -> ());
                                              x13127))|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x13141 : 'tags this) ->
        fun ~x:(x13133 : GLint.t) ->
          fun ~y:(x13134 : GLint.t) ->
            fun ~width:(x13135 : GLsizei.t) ->
              fun ~height:(x13136 : GLsizei.t) ->
                fun ~format:(x13137 : GLenum.t) ->
                  fun ~type_:(x13138 : GLenum.t) ->
                    fun ~dstData:(x13139 : ArrayBufferView.t_0 or_null) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x13141) "readPixels"
                           [|(GLint.t_to_js x13133);(GLint.t_to_js x13134);(
                             GLsizei.t_to_js x13135);(GLsizei.t_to_js x13136);(
                             GLenum.t_to_js x13137);(GLenum.t_to_js x13138);(
                             or_null_to_js ArrayBufferView.t_0_to_js x13139)|])
    let (readPixels' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x13150 : 'tags this) ->
        fun ~x:(x13143 : GLint.t) ->
          fun ~y:(x13144 : GLint.t) ->
            fun ~width:(x13145 : GLsizei.t) ->
              fun ~height:(x13146 : GLsizei.t) ->
                fun ~format:(x13147 : GLenum.t) ->
                  fun ~type_:(x13148 : GLenum.t) ->
                    fun ~offset:(x13149 : GLintptr.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x13150) "readPixels"
                           [|(GLint.t_to_js x13143);(GLint.t_to_js x13144);(
                             GLsizei.t_to_js x13145);(GLsizei.t_to_js x13146);(
                             GLenum.t_to_js x13147);(GLenum.t_to_js x13148);(
                             GLintptr.t_to_js x13149)|])
    let (readPixels'' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 -> dstOffset:GLuint.t -> unit)
      =
      fun (x13160 : 'tags this) ->
        fun ~x:(x13152 : GLint.t) ->
          fun ~y:(x13153 : GLint.t) ->
            fun ~width:(x13154 : GLsizei.t) ->
              fun ~height:(x13155 : GLsizei.t) ->
                fun ~format:(x13156 : GLenum.t) ->
                  fun ~type_:(x13157 : GLenum.t) ->
                    fun ~dstData:(x13158 : ArrayBufferView.t_0) ->
                      fun ~dstOffset:(x13159 : GLuint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x13160)
                             "readPixels"
                             [|(GLint.t_to_js x13152);(GLint.t_to_js x13153);(
                               GLsizei.t_to_js x13154);(GLsizei.t_to_js
                                                          x13155);(GLenum.t_to_js
                                                                    x13156);(
                               GLenum.t_to_js x13157);(ArrayBufferView.t_0_to_js
                                                         x13158);(GLuint.t_to_js
                                                                    x13159)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x13172 : 'tags this) ->
        fun ~target:(x13162 : GLenum.t) ->
          fun ~level:(x13163 : GLint.t) ->
            fun ~internalformat:(x13164 : GLint.t) ->
              fun ~width:(x13165 : GLsizei.t) ->
                fun ~height:(x13166 : GLsizei.t) ->
                  fun ~border:(x13167 : GLint.t) ->
                    fun ~format:(x13168 : GLenum.t) ->
                      fun ~type_:(x13169 : GLenum.t) ->
                        fun ~pixels:(x13170 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13172)
                               "texImage2D"
                               [|(GLenum.t_to_js x13162);(GLint.t_to_js
                                                            x13163);(
                                 GLint.t_to_js x13164);(GLsizei.t_to_js
                                                          x13165);(GLsizei.t_to_js
                                                                    x13166);(
                                 GLint.t_to_js x13167);(GLenum.t_to_js x13168);(
                                 GLenum.t_to_js x13169);(or_null_to_js
                                                           ArrayBufferView.t_0_to_js
                                                           x13170)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x13180 : 'tags this) ->
        fun ~target:(x13174 : GLenum.t) ->
          fun ~level:(x13175 : GLint.t) ->
            fun ~internalformat:(x13176 : GLint.t) ->
              fun ~format:(x13177 : GLenum.t) ->
                fun ~type_:(x13178 : GLenum.t) ->
                  fun ~source:(x13179 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13180) "texImage2D"
                         [|(GLenum.t_to_js x13174);(GLint.t_to_js x13175);(
                           GLint.t_to_js x13176);(GLenum.t_to_js x13177);(
                           GLenum.t_to_js x13178);(TexImageSource.t_to_js
                                                     x13179)|])
    let (texImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x13191 : 'tags this) ->
        fun ~target:(x13182 : GLenum.t) ->
          fun ~level:(x13183 : GLint.t) ->
            fun ~internalformat:(x13184 : GLint.t) ->
              fun ~width:(x13185 : GLsizei.t) ->
                fun ~height:(x13186 : GLsizei.t) ->
                  fun ~border:(x13187 : GLint.t) ->
                    fun ~format:(x13188 : GLenum.t) ->
                      fun ~type_:(x13189 : GLenum.t) ->
                        fun ~pboOffset:(x13190 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13191)
                               "texImage2D"
                               [|(GLenum.t_to_js x13182);(GLint.t_to_js
                                                            x13183);(
                                 GLint.t_to_js x13184);(GLsizei.t_to_js
                                                          x13185);(GLsizei.t_to_js
                                                                    x13186);(
                                 GLint.t_to_js x13187);(GLenum.t_to_js x13188);(
                                 GLenum.t_to_js x13189);(GLintptr.t_to_js
                                                           x13190)|])
    let (texImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x13202 : 'tags this) ->
        fun ~target:(x13193 : GLenum.t) ->
          fun ~level:(x13194 : GLint.t) ->
            fun ~internalformat:(x13195 : GLint.t) ->
              fun ~width:(x13196 : GLsizei.t) ->
                fun ~height:(x13197 : GLsizei.t) ->
                  fun ~border:(x13198 : GLint.t) ->
                    fun ~format:(x13199 : GLenum.t) ->
                      fun ~type_:(x13200 : GLenum.t) ->
                        fun ~source:(x13201 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13202)
                               "texImage2D"
                               [|(GLenum.t_to_js x13193);(GLint.t_to_js
                                                            x13194);(
                                 GLint.t_to_js x13195);(GLsizei.t_to_js
                                                          x13196);(GLsizei.t_to_js
                                                                    x13197);(
                                 GLint.t_to_js x13198);(GLenum.t_to_js x13199);(
                                 GLenum.t_to_js x13200);(TexImageSource.t_to_js
                                                           x13201)|])
    let (texImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x13214 : 'tags this) ->
        fun ~target:(x13204 : GLenum.t) ->
          fun ~level:(x13205 : GLint.t) ->
            fun ~internalformat:(x13206 : GLint.t) ->
              fun ~width:(x13207 : GLsizei.t) ->
                fun ~height:(x13208 : GLsizei.t) ->
                  fun ~border:(x13209 : GLint.t) ->
                    fun ~format:(x13210 : GLenum.t) ->
                      fun ~type_:(x13211 : GLenum.t) ->
                        fun ~srcData:(x13212 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x13213 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x13214)
                                 "texImage2D"
                                 [|(GLenum.t_to_js x13204);(GLint.t_to_js
                                                              x13205);(
                                   GLint.t_to_js x13206);(GLsizei.t_to_js
                                                            x13207);(
                                   GLsizei.t_to_js x13208);(GLint.t_to_js
                                                              x13209);(
                                   GLenum.t_to_js x13210);(GLenum.t_to_js
                                                             x13211);(
                                   ArrayBufferView.t_0_to_js x13212);(
                                   GLuint.t_to_js x13213)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x13226 : 'tags this) ->
        fun ~target:(x13216 : GLenum.t) ->
          fun ~level:(x13217 : GLint.t) ->
            fun ~xoffset:(x13218 : GLint.t) ->
              fun ~yoffset:(x13219 : GLint.t) ->
                fun ~width:(x13220 : GLsizei.t) ->
                  fun ~height:(x13221 : GLsizei.t) ->
                    fun ~format:(x13222 : GLenum.t) ->
                      fun ~type_:(x13223 : GLenum.t) ->
                        fun ~pixels:(x13224 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13226)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x13216);(GLint.t_to_js
                                                            x13217);(
                                 GLint.t_to_js x13218);(GLint.t_to_js x13219);(
                                 GLsizei.t_to_js x13220);(GLsizei.t_to_js
                                                            x13221);(
                                 GLenum.t_to_js x13222);(GLenum.t_to_js
                                                           x13223);(or_null_to_js
                                                                    ArrayBufferView.t_0_to_js
                                                                    x13224)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x13235 : 'tags this) ->
        fun ~target:(x13228 : GLenum.t) ->
          fun ~level:(x13229 : GLint.t) ->
            fun ~xoffset:(x13230 : GLint.t) ->
              fun ~yoffset:(x13231 : GLint.t) ->
                fun ~format:(x13232 : GLenum.t) ->
                  fun ~type_:(x13233 : GLenum.t) ->
                    fun ~source:(x13234 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x13235)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x13228);(GLint.t_to_js x13229);(
                             GLint.t_to_js x13230);(GLint.t_to_js x13231);(
                             GLenum.t_to_js x13232);(GLenum.t_to_js x13233);(
                             TexImageSource.t_to_js x13234)|])
    let (texSubImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x13246 : 'tags this) ->
        fun ~target:(x13237 : GLenum.t) ->
          fun ~level:(x13238 : GLint.t) ->
            fun ~xoffset:(x13239 : GLint.t) ->
              fun ~yoffset:(x13240 : GLint.t) ->
                fun ~width:(x13241 : GLsizei.t) ->
                  fun ~height:(x13242 : GLsizei.t) ->
                    fun ~format:(x13243 : GLenum.t) ->
                      fun ~type_:(x13244 : GLenum.t) ->
                        fun ~pboOffset:(x13245 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13246)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x13237);(GLint.t_to_js
                                                            x13238);(
                                 GLint.t_to_js x13239);(GLint.t_to_js x13240);(
                                 GLsizei.t_to_js x13241);(GLsizei.t_to_js
                                                            x13242);(
                                 GLenum.t_to_js x13243);(GLenum.t_to_js
                                                           x13244);(GLintptr.t_to_js
                                                                    x13245)|])
    let (texSubImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x13257 : 'tags this) ->
        fun ~target:(x13248 : GLenum.t) ->
          fun ~level:(x13249 : GLint.t) ->
            fun ~xoffset:(x13250 : GLint.t) ->
              fun ~yoffset:(x13251 : GLint.t) ->
                fun ~width:(x13252 : GLsizei.t) ->
                  fun ~height:(x13253 : GLsizei.t) ->
                    fun ~format:(x13254 : GLenum.t) ->
                      fun ~type_:(x13255 : GLenum.t) ->
                        fun ~source:(x13256 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13257)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x13248);(GLint.t_to_js
                                                            x13249);(
                                 GLint.t_to_js x13250);(GLint.t_to_js x13251);(
                                 GLsizei.t_to_js x13252);(GLsizei.t_to_js
                                                            x13253);(
                                 GLenum.t_to_js x13254);(GLenum.t_to_js
                                                           x13255);(TexImageSource.t_to_js
                                                                    x13256)|])
    let (texSubImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x13269 : 'tags this) ->
        fun ~target:(x13259 : GLenum.t) ->
          fun ~level:(x13260 : GLint.t) ->
            fun ~xoffset:(x13261 : GLint.t) ->
              fun ~yoffset:(x13262 : GLint.t) ->
                fun ~width:(x13263 : GLsizei.t) ->
                  fun ~height:(x13264 : GLsizei.t) ->
                    fun ~format:(x13265 : GLenum.t) ->
                      fun ~type_:(x13266 : GLenum.t) ->
                        fun ~srcData:(x13267 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x13268 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x13269)
                                 "texSubImage2D"
                                 [|(GLenum.t_to_js x13259);(GLint.t_to_js
                                                              x13260);(
                                   GLint.t_to_js x13261);(GLint.t_to_js
                                                            x13262);(
                                   GLsizei.t_to_js x13263);(GLsizei.t_to_js
                                                              x13264);(
                                   GLenum.t_to_js x13265);(GLenum.t_to_js
                                                             x13266);(
                                   ArrayBufferView.t_0_to_js x13267);(
                                   GLuint.t_to_js x13268)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13279 : 'tags this) ->
        fun ~location:(x13271 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13272 : Float32List.t) ->
            fun ?srcOffset:(x13273 : GLuint.t option) ->
              fun ?srcLength:(x13274 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13281 = this_to_js Obj.magic x13279 in
                     Ojs.call (Ojs.get_prop_ascii x13281 "uniform1fv")
                       "apply"
                       [|x13281;((let x13275 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13275 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13271)|]);
                                  ignore
                                    (Ojs.call x13275 "push"
                                       [|(Float32List.t_to_js x13272)|]);
                                  (match x13273 with
                                   | Some x13277 ->
                                       ignore
                                         (Ojs.call x13275 "push"
                                            [|(GLuint.t_to_js x13277)|])
                                   | None -> ());
                                  (match x13274 with
                                   | Some x13276 ->
                                       ignore
                                         (Ojs.call x13275 "push"
                                            [|(GLuint.t_to_js x13276)|])
                                   | None -> ());
                                  x13275))|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13290 : 'tags this) ->
        fun ~location:(x13282 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13283 : Int32List.t) ->
            fun ?srcOffset:(x13284 : GLuint.t option) ->
              fun ?srcLength:(x13285 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13292 = this_to_js Obj.magic x13290 in
                     Ojs.call (Ojs.get_prop_ascii x13292 "uniform1iv")
                       "apply"
                       [|x13292;((let x13286 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13286 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13282)|]);
                                  ignore
                                    (Ojs.call x13286 "push"
                                       [|(Int32List.t_to_js x13283)|]);
                                  (match x13284 with
                                   | Some x13288 ->
                                       ignore
                                         (Ojs.call x13286 "push"
                                            [|(GLuint.t_to_js x13288)|])
                                   | None -> ());
                                  (match x13285 with
                                   | Some x13287 ->
                                       ignore
                                         (Ojs.call x13286 "push"
                                            [|(GLuint.t_to_js x13287)|])
                                   | None -> ());
                                  x13286))|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13301 : 'tags this) ->
        fun ~location:(x13293 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13294 : Float32List.t) ->
            fun ?srcOffset:(x13295 : GLuint.t option) ->
              fun ?srcLength:(x13296 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13303 = this_to_js Obj.magic x13301 in
                     Ojs.call (Ojs.get_prop_ascii x13303 "uniform2fv")
                       "apply"
                       [|x13303;((let x13297 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13297 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13293)|]);
                                  ignore
                                    (Ojs.call x13297 "push"
                                       [|(Float32List.t_to_js x13294)|]);
                                  (match x13295 with
                                   | Some x13299 ->
                                       ignore
                                         (Ojs.call x13297 "push"
                                            [|(GLuint.t_to_js x13299)|])
                                   | None -> ());
                                  (match x13296 with
                                   | Some x13298 ->
                                       ignore
                                         (Ojs.call x13297 "push"
                                            [|(GLuint.t_to_js x13298)|])
                                   | None -> ());
                                  x13297))|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13312 : 'tags this) ->
        fun ~location:(x13304 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13305 : Int32List.t) ->
            fun ?srcOffset:(x13306 : GLuint.t option) ->
              fun ?srcLength:(x13307 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13314 = this_to_js Obj.magic x13312 in
                     Ojs.call (Ojs.get_prop_ascii x13314 "uniform2iv")
                       "apply"
                       [|x13314;((let x13308 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13308 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13304)|]);
                                  ignore
                                    (Ojs.call x13308 "push"
                                       [|(Int32List.t_to_js x13305)|]);
                                  (match x13306 with
                                   | Some x13310 ->
                                       ignore
                                         (Ojs.call x13308 "push"
                                            [|(GLuint.t_to_js x13310)|])
                                   | None -> ());
                                  (match x13307 with
                                   | Some x13309 ->
                                       ignore
                                         (Ojs.call x13308 "push"
                                            [|(GLuint.t_to_js x13309)|])
                                   | None -> ());
                                  x13308))|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13323 : 'tags this) ->
        fun ~location:(x13315 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13316 : Float32List.t) ->
            fun ?srcOffset:(x13317 : GLuint.t option) ->
              fun ?srcLength:(x13318 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13325 = this_to_js Obj.magic x13323 in
                     Ojs.call (Ojs.get_prop_ascii x13325 "uniform3fv")
                       "apply"
                       [|x13325;((let x13319 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13319 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13315)|]);
                                  ignore
                                    (Ojs.call x13319 "push"
                                       [|(Float32List.t_to_js x13316)|]);
                                  (match x13317 with
                                   | Some x13321 ->
                                       ignore
                                         (Ojs.call x13319 "push"
                                            [|(GLuint.t_to_js x13321)|])
                                   | None -> ());
                                  (match x13318 with
                                   | Some x13320 ->
                                       ignore
                                         (Ojs.call x13319 "push"
                                            [|(GLuint.t_to_js x13320)|])
                                   | None -> ());
                                  x13319))|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13334 : 'tags this) ->
        fun ~location:(x13326 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13327 : Int32List.t) ->
            fun ?srcOffset:(x13328 : GLuint.t option) ->
              fun ?srcLength:(x13329 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13336 = this_to_js Obj.magic x13334 in
                     Ojs.call (Ojs.get_prop_ascii x13336 "uniform3iv")
                       "apply"
                       [|x13336;((let x13330 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13330 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13326)|]);
                                  ignore
                                    (Ojs.call x13330 "push"
                                       [|(Int32List.t_to_js x13327)|]);
                                  (match x13328 with
                                   | Some x13332 ->
                                       ignore
                                         (Ojs.call x13330 "push"
                                            [|(GLuint.t_to_js x13332)|])
                                   | None -> ());
                                  (match x13329 with
                                   | Some x13331 ->
                                       ignore
                                         (Ojs.call x13330 "push"
                                            [|(GLuint.t_to_js x13331)|])
                                   | None -> ());
                                  x13330))|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13345 : 'tags this) ->
        fun ~location:(x13337 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13338 : Float32List.t) ->
            fun ?srcOffset:(x13339 : GLuint.t option) ->
              fun ?srcLength:(x13340 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13347 = this_to_js Obj.magic x13345 in
                     Ojs.call (Ojs.get_prop_ascii x13347 "uniform4fv")
                       "apply"
                       [|x13347;((let x13341 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13341 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13337)|]);
                                  ignore
                                    (Ojs.call x13341 "push"
                                       [|(Float32List.t_to_js x13338)|]);
                                  (match x13339 with
                                   | Some x13343 ->
                                       ignore
                                         (Ojs.call x13341 "push"
                                            [|(GLuint.t_to_js x13343)|])
                                   | None -> ());
                                  (match x13340 with
                                   | Some x13342 ->
                                       ignore
                                         (Ojs.call x13341 "push"
                                            [|(GLuint.t_to_js x13342)|])
                                   | None -> ());
                                  x13341))|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13356 : 'tags this) ->
        fun ~location:(x13348 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13349 : Int32List.t) ->
            fun ?srcOffset:(x13350 : GLuint.t option) ->
              fun ?srcLength:(x13351 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13358 = this_to_js Obj.magic x13356 in
                     Ojs.call (Ojs.get_prop_ascii x13358 "uniform4iv")
                       "apply"
                       [|x13358;((let x13352 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13352 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13348)|]);
                                  ignore
                                    (Ojs.call x13352 "push"
                                       [|(Int32List.t_to_js x13349)|]);
                                  (match x13350 with
                                   | Some x13354 ->
                                       ignore
                                         (Ojs.call x13352 "push"
                                            [|(GLuint.t_to_js x13354)|])
                                   | None -> ());
                                  (match x13351 with
                                   | Some x13353 ->
                                       ignore
                                         (Ojs.call x13352 "push"
                                            [|(GLuint.t_to_js x13353)|])
                                   | None -> ());
                                  x13352))|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13368 : 'tags this) ->
        fun ~location:(x13359 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13360 : GLboolean.t) ->
            fun ~data:(x13361 : Float32List.t) ->
              fun ?srcOffset:(x13362 : GLuint.t option) ->
                fun ?srcLength:(x13363 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13370 = this_to_js Obj.magic x13368 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13370 "uniformMatrix2fv")
                         "apply"
                         [|x13370;((let x13364 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13364 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13359)|]);
                                    ignore
                                      (Ojs.call x13364 "push"
                                         [|(GLboolean.t_to_js x13360)|]);
                                    ignore
                                      (Ojs.call x13364 "push"
                                         [|(Float32List.t_to_js x13361)|]);
                                    (match x13362 with
                                     | Some x13366 ->
                                         ignore
                                           (Ojs.call x13364 "push"
                                              [|(GLuint.t_to_js x13366)|])
                                     | None -> ());
                                    (match x13363 with
                                     | Some x13365 ->
                                         ignore
                                           (Ojs.call x13364 "push"
                                              [|(GLuint.t_to_js x13365)|])
                                     | None -> ());
                                    x13364))|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13380 : 'tags this) ->
        fun ~location:(x13371 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13372 : GLboolean.t) ->
            fun ~data:(x13373 : Float32List.t) ->
              fun ?srcOffset:(x13374 : GLuint.t option) ->
                fun ?srcLength:(x13375 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13382 = this_to_js Obj.magic x13380 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13382 "uniformMatrix3fv")
                         "apply"
                         [|x13382;((let x13376 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13376 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13371)|]);
                                    ignore
                                      (Ojs.call x13376 "push"
                                         [|(GLboolean.t_to_js x13372)|]);
                                    ignore
                                      (Ojs.call x13376 "push"
                                         [|(Float32List.t_to_js x13373)|]);
                                    (match x13374 with
                                     | Some x13378 ->
                                         ignore
                                           (Ojs.call x13376 "push"
                                              [|(GLuint.t_to_js x13378)|])
                                     | None -> ());
                                    (match x13375 with
                                     | Some x13377 ->
                                         ignore
                                           (Ojs.call x13376 "push"
                                              [|(GLuint.t_to_js x13377)|])
                                     | None -> ());
                                    x13376))|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13392 : 'tags this) ->
        fun ~location:(x13383 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13384 : GLboolean.t) ->
            fun ~data:(x13385 : Float32List.t) ->
              fun ?srcOffset:(x13386 : GLuint.t option) ->
                fun ?srcLength:(x13387 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13394 = this_to_js Obj.magic x13392 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13394 "uniformMatrix4fv")
                         "apply"
                         [|x13394;((let x13388 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13388 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13383)|]);
                                    ignore
                                      (Ojs.call x13388 "push"
                                         [|(GLboolean.t_to_js x13384)|]);
                                    ignore
                                      (Ojs.call x13388 "push"
                                         [|(Float32List.t_to_js x13385)|]);
                                    (match x13386 with
                                     | Some x13390 ->
                                         ignore
                                           (Ojs.call x13388 "push"
                                              [|(GLuint.t_to_js x13390)|])
                                     | None -> ());
                                    (match x13387 with
                                     | Some x13389 ->
                                         ignore
                                           (Ojs.call x13388 "push"
                                              [|(GLuint.t_to_js x13389)|])
                                     | None -> ());
                                    x13388))|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13404 : 'tags this) ->
        fun ~location:(x13395 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13396 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x13397 : GLuint.t option) ->
              fun ?srcLength:(x13398 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13406 = this_to_js Obj.magic x13404 in
                     Ojs.call (Ojs.get_prop_ascii x13406 "uniform1fv")
                       "apply"
                       [|x13406;((let x13399 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13399 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13395)|]);
                                  ignore
                                    (Ojs.call x13399 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x13396)|]);
                                  (match x13397 with
                                   | Some x13401 ->
                                       ignore
                                         (Ojs.call x13399 "push"
                                            [|(GLuint.t_to_js x13401)|])
                                   | None -> ());
                                  (match x13398 with
                                   | Some x13400 ->
                                       ignore
                                         (Ojs.call x13399 "push"
                                            [|(GLuint.t_to_js x13400)|])
                                   | None -> ());
                                  x13399))|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13416 : 'tags this) ->
        fun ~location:(x13407 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13408 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x13409 : GLuint.t option) ->
              fun ?srcLength:(x13410 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13418 = this_to_js Obj.magic x13416 in
                     Ojs.call (Ojs.get_prop_ascii x13418 "uniform1iv")
                       "apply"
                       [|x13418;((let x13411 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13411 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13407)|]);
                                  ignore
                                    (Ojs.call x13411 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x13408)|]);
                                  (match x13409 with
                                   | Some x13413 ->
                                       ignore
                                         (Ojs.call x13411 "push"
                                            [|(GLuint.t_to_js x13413)|])
                                   | None -> ());
                                  (match x13410 with
                                   | Some x13412 ->
                                       ignore
                                         (Ojs.call x13411 "push"
                                            [|(GLuint.t_to_js x13412)|])
                                   | None -> ());
                                  x13411))|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13428 : 'tags this) ->
        fun ~location:(x13419 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13420 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x13421 : GLuint.t option) ->
              fun ?srcLength:(x13422 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13430 = this_to_js Obj.magic x13428 in
                     Ojs.call (Ojs.get_prop_ascii x13430 "uniform2fv")
                       "apply"
                       [|x13430;((let x13423 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13423 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13419)|]);
                                  ignore
                                    (Ojs.call x13423 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x13420)|]);
                                  (match x13421 with
                                   | Some x13425 ->
                                       ignore
                                         (Ojs.call x13423 "push"
                                            [|(GLuint.t_to_js x13425)|])
                                   | None -> ());
                                  (match x13422 with
                                   | Some x13424 ->
                                       ignore
                                         (Ojs.call x13423 "push"
                                            [|(GLuint.t_to_js x13424)|])
                                   | None -> ());
                                  x13423))|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13440 : 'tags this) ->
        fun ~location:(x13431 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13432 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x13433 : GLuint.t option) ->
              fun ?srcLength:(x13434 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13442 = this_to_js Obj.magic x13440 in
                     Ojs.call (Ojs.get_prop_ascii x13442 "uniform2iv")
                       "apply"
                       [|x13442;((let x13435 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13435 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13431)|]);
                                  ignore
                                    (Ojs.call x13435 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x13432)|]);
                                  (match x13433 with
                                   | Some x13437 ->
                                       ignore
                                         (Ojs.call x13435 "push"
                                            [|(GLuint.t_to_js x13437)|])
                                   | None -> ());
                                  (match x13434 with
                                   | Some x13436 ->
                                       ignore
                                         (Ojs.call x13435 "push"
                                            [|(GLuint.t_to_js x13436)|])
                                   | None -> ());
                                  x13435))|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13452 : 'tags this) ->
        fun ~location:(x13443 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13444 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x13445 : GLuint.t option) ->
              fun ?srcLength:(x13446 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13454 = this_to_js Obj.magic x13452 in
                     Ojs.call (Ojs.get_prop_ascii x13454 "uniform3fv")
                       "apply"
                       [|x13454;((let x13447 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13447 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13443)|]);
                                  ignore
                                    (Ojs.call x13447 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x13444)|]);
                                  (match x13445 with
                                   | Some x13449 ->
                                       ignore
                                         (Ojs.call x13447 "push"
                                            [|(GLuint.t_to_js x13449)|])
                                   | None -> ());
                                  (match x13446 with
                                   | Some x13448 ->
                                       ignore
                                         (Ojs.call x13447 "push"
                                            [|(GLuint.t_to_js x13448)|])
                                   | None -> ());
                                  x13447))|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13464 : 'tags this) ->
        fun ~location:(x13455 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13456 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x13457 : GLuint.t option) ->
              fun ?srcLength:(x13458 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13466 = this_to_js Obj.magic x13464 in
                     Ojs.call (Ojs.get_prop_ascii x13466 "uniform3iv")
                       "apply"
                       [|x13466;((let x13459 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13459 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13455)|]);
                                  ignore
                                    (Ojs.call x13459 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x13456)|]);
                                  (match x13457 with
                                   | Some x13461 ->
                                       ignore
                                         (Ojs.call x13459 "push"
                                            [|(GLuint.t_to_js x13461)|])
                                   | None -> ());
                                  (match x13458 with
                                   | Some x13460 ->
                                       ignore
                                         (Ojs.call x13459 "push"
                                            [|(GLuint.t_to_js x13460)|])
                                   | None -> ());
                                  x13459))|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13476 : 'tags this) ->
        fun ~location:(x13467 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13468 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x13469 : GLuint.t option) ->
              fun ?srcLength:(x13470 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13478 = this_to_js Obj.magic x13476 in
                     Ojs.call (Ojs.get_prop_ascii x13478 "uniform4fv")
                       "apply"
                       [|x13478;((let x13471 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13471 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13467)|]);
                                  ignore
                                    (Ojs.call x13471 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x13468)|]);
                                  (match x13469 with
                                   | Some x13473 ->
                                       ignore
                                         (Ojs.call x13471 "push"
                                            [|(GLuint.t_to_js x13473)|])
                                   | None -> ());
                                  (match x13470 with
                                   | Some x13472 ->
                                       ignore
                                         (Ojs.call x13471 "push"
                                            [|(GLuint.t_to_js x13472)|])
                                   | None -> ());
                                  x13471))|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13488 : 'tags this) ->
        fun ~location:(x13479 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13480 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x13481 : GLuint.t option) ->
              fun ?srcLength:(x13482 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13490 = this_to_js Obj.magic x13488 in
                     Ojs.call (Ojs.get_prop_ascii x13490 "uniform4iv")
                       "apply"
                       [|x13490;((let x13483 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13483 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13479)|]);
                                  ignore
                                    (Ojs.call x13483 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x13480)|]);
                                  (match x13481 with
                                   | Some x13485 ->
                                       ignore
                                         (Ojs.call x13483 "push"
                                            [|(GLuint.t_to_js x13485)|])
                                   | None -> ());
                                  (match x13482 with
                                   | Some x13484 ->
                                       ignore
                                         (Ojs.call x13483 "push"
                                            [|(GLuint.t_to_js x13484)|])
                                   | None -> ());
                                  x13483))|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13501 : 'tags this) ->
        fun ~location:(x13491 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13492 : GLboolean.t) ->
            fun ~data:(x13493 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x13494 : GLuint.t option) ->
                fun ?srcLength:(x13495 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13503 = this_to_js Obj.magic x13501 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13503 "uniformMatrix2fv")
                         "apply"
                         [|x13503;((let x13496 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13496 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13491)|]);
                                    ignore
                                      (Ojs.call x13496 "push"
                                         [|(GLboolean.t_to_js x13492)|]);
                                    ignore
                                      (Ojs.call x13496 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x13493)|]);
                                    (match x13494 with
                                     | Some x13498 ->
                                         ignore
                                           (Ojs.call x13496 "push"
                                              [|(GLuint.t_to_js x13498)|])
                                     | None -> ());
                                    (match x13495 with
                                     | Some x13497 ->
                                         ignore
                                           (Ojs.call x13496 "push"
                                              [|(GLuint.t_to_js x13497)|])
                                     | None -> ());
                                    x13496))|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13514 : 'tags this) ->
        fun ~location:(x13504 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13505 : GLboolean.t) ->
            fun ~data:(x13506 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x13507 : GLuint.t option) ->
                fun ?srcLength:(x13508 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13516 = this_to_js Obj.magic x13514 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13516 "uniformMatrix3fv")
                         "apply"
                         [|x13516;((let x13509 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13509 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13504)|]);
                                    ignore
                                      (Ojs.call x13509 "push"
                                         [|(GLboolean.t_to_js x13505)|]);
                                    ignore
                                      (Ojs.call x13509 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x13506)|]);
                                    (match x13507 with
                                     | Some x13511 ->
                                         ignore
                                           (Ojs.call x13509 "push"
                                              [|(GLuint.t_to_js x13511)|])
                                     | None -> ());
                                    (match x13508 with
                                     | Some x13510 ->
                                         ignore
                                           (Ojs.call x13509 "push"
                                              [|(GLuint.t_to_js x13510)|])
                                     | None -> ());
                                    x13509))|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13527 : 'tags this) ->
        fun ~location:(x13517 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13518 : GLboolean.t) ->
            fun ~data:(x13519 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x13520 : GLuint.t option) ->
                fun ?srcLength:(x13521 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13529 = this_to_js Obj.magic x13527 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13529 "uniformMatrix4fv")
                         "apply"
                         [|x13529;((let x13522 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13522 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13517)|]);
                                    ignore
                                      (Ojs.call x13522 "push"
                                         [|(GLboolean.t_to_js x13518)|]);
                                    ignore
                                      (Ojs.call x13522 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x13519)|]);
                                    (match x13520 with
                                     | Some x13524 ->
                                         ignore
                                           (Ojs.call x13522 "push"
                                              [|(GLuint.t_to_js x13524)|])
                                     | None -> ());
                                    (match x13521 with
                                     | Some x13523 ->
                                         ignore
                                           (Ojs.call x13522 "push"
                                              [|(GLuint.t_to_js x13523)|])
                                     | None -> ());
                                    x13522))|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface127:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLVertexArrayObject.t
                          val set_prototype :
                            t -> WebGLVertexArrayObject.t -> unit
                          val create : t -> WebGLVertexArrayObject.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13531 : Ojs.t) -> x13531
    and t_to_js : t -> Ojs.t = fun (x13530 : Ojs.t) -> x13530
    let (get_prototype : t -> WebGLVertexArrayObject.t) =
      fun (x13532 : t) ->
        WebGLVertexArrayObject.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13532) "prototype")
    let (set_prototype : t -> WebGLVertexArrayObject.t -> unit) =
      fun (x13533 : t) ->
        fun (x13534 : WebGLVertexArrayObject.t) ->
          Ojs.set_prop_ascii (t_to_js x13533) "prototype"
            (WebGLVertexArrayObject.t_to_js x13534)
    let (create : t -> WebGLVertexArrayObject.t) =
      fun (x13535 : t) ->
        WebGLVertexArrayObject.t_of_js (Ojs.new_obj (t_to_js x13535) [||])
  end
 and
  WebGLVertexArrayObject:sig
                           type t = [ `WebGLVertexArrayObject ] intf
                           type t_0 = t
                           [@@@js.stop ]
                           type tags = [ `WebGLVertexArrayObject ]
                           type tags_0 = tags
                           [@@@js.start ]
                           [@@@js.implem
                             type tags = [ `WebGLVertexArrayObject ]
                             type tags_0 = tags]
                           type 'tags this =
                             'tags intf constraint 'tags =
                                         [> `WebGLVertexArrayObject ]
                           val t_to_js : t -> Ojs.t
                           val t_of_js : Ojs.t -> t
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val cast_from : 'tags this -> t
                           val prototype : unit -> t
                           val create : unit -> t
                         end =
  struct
    type t = [ `WebGLVertexArrayObject ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13537 : Ojs.t) -> t_of_js x13537
    and t_0_to_js : t_0 -> Ojs.t = fun (x13536 : t) -> t_to_js x13536
    type tags = [ `WebGLVertexArrayObject ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObject ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13540 : Ojs.t) -> intf_of_js __tags_of_js x13540
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13538 : __tags intf) -> intf_to_js __tags_to_js x13538
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject") 
             [||])
  end
module rec
  AnonymousInterface125:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLTransformFeedback.t
                          val set_prototype :
                            t -> WebGLTransformFeedback.t -> unit
                          val create : t -> WebGLTransformFeedback.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13543 : Ojs.t) -> x13543
    and t_to_js : t -> Ojs.t = fun (x13542 : Ojs.t) -> x13542
    let (get_prototype : t -> WebGLTransformFeedback.t) =
      fun (x13544 : t) ->
        WebGLTransformFeedback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13544) "prototype")
    let (set_prototype : t -> WebGLTransformFeedback.t -> unit) =
      fun (x13545 : t) ->
        fun (x13546 : WebGLTransformFeedback.t) ->
          Ojs.set_prop_ascii (t_to_js x13545) "prototype"
            (WebGLTransformFeedback.t_to_js x13546)
    let (create : t -> WebGLTransformFeedback.t) =
      fun (x13547 : t) ->
        WebGLTransformFeedback.t_of_js (Ojs.new_obj (t_to_js x13547) [||])
  end
 and
  WebGLTransformFeedback:sig
                           type t = [ `WebGLTransformFeedback ] intf
                           type t_0 = t
                           [@@@js.stop ]
                           type tags = [ `WebGLTransformFeedback ]
                           type tags_0 = tags
                           [@@@js.start ]
                           [@@@js.implem
                             type tags = [ `WebGLTransformFeedback ]
                             type tags_0 = tags]
                           type 'tags this =
                             'tags intf constraint 'tags =
                                         [> `WebGLTransformFeedback ]
                           val t_to_js : t -> Ojs.t
                           val t_of_js : Ojs.t -> t
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val cast_from : 'tags this -> t
                           val prototype : unit -> t
                           val create : unit -> t
                         end =
  struct
    type t = [ `WebGLTransformFeedback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13549 : Ojs.t) -> t_of_js x13549
    and t_0_to_js : t_0 -> Ojs.t = fun (x13548 : t) -> t_to_js x13548
    type tags = [ `WebGLTransformFeedback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLTransformFeedback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13552 : Ojs.t) -> intf_of_js __tags_of_js x13552
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13550 : __tags intf) -> intf_to_js __tags_to_js x13550
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback") 
             [||])
  end
module rec
  AnonymousInterface123:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLSync.t
                          val set_prototype : t -> WebGLSync.t -> unit
                          val create : t -> WebGLSync.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13555 : Ojs.t) -> x13555
    and t_to_js : t -> Ojs.t = fun (x13554 : Ojs.t) -> x13554
    let (get_prototype : t -> WebGLSync.t) =
      fun (x13556 : t) ->
        WebGLSync.t_of_js (Ojs.get_prop_ascii (t_to_js x13556) "prototype")
    let (set_prototype : t -> WebGLSync.t -> unit) =
      fun (x13557 : t) ->
        fun (x13558 : WebGLSync.t) ->
          Ojs.set_prop_ascii (t_to_js x13557) "prototype"
            (WebGLSync.t_to_js x13558)
    let (create : t -> WebGLSync.t) =
      fun (x13559 : t) ->
        WebGLSync.t_of_js (Ojs.new_obj (t_to_js x13559) [||])
  end
 and
  WebGLSync:sig
              type t = [ `WebGLSync ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `WebGLSync ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `WebGLSync ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : unit -> t
            end =
  struct
    type t = [ `WebGLSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13561 : Ojs.t) -> t_of_js x13561
    and t_0_to_js : t_0 -> Ojs.t = fun (x13560 : t) -> t_to_js x13560
    type tags = [ `WebGLSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13564 : Ojs.t) -> intf_of_js __tags_of_js x13564
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13562 : __tags intf) -> intf_to_js __tags_to_js x13562
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSync")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSync") [||])
  end
module rec
  AnonymousInterface120:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLSampler.t
                          val set_prototype : t -> WebGLSampler.t -> unit
                          val create : t -> WebGLSampler.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13567 : Ojs.t) -> x13567
    and t_to_js : t -> Ojs.t = fun (x13566 : Ojs.t) -> x13566
    let (get_prototype : t -> WebGLSampler.t) =
      fun (x13568 : t) ->
        WebGLSampler.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13568) "prototype")
    let (set_prototype : t -> WebGLSampler.t -> unit) =
      fun (x13569 : t) ->
        fun (x13570 : WebGLSampler.t) ->
          Ojs.set_prop_ascii (t_to_js x13569) "prototype"
            (WebGLSampler.t_to_js x13570)
    let (create : t -> WebGLSampler.t) =
      fun (x13571 : t) ->
        WebGLSampler.t_of_js (Ojs.new_obj (t_to_js x13571) [||])
  end
 and
  WebGLSampler:sig
                 type t = [ `WebGLSampler ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `WebGLSampler ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `WebGLSampler ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `WebGLSampler ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `WebGLSampler ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13573 : Ojs.t) -> t_of_js x13573
    and t_0_to_js : t_0 -> Ojs.t = fun (x13572 : t) -> t_to_js x13572
    type tags = [ `WebGLSampler ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSampler ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13576 : Ojs.t) -> intf_of_js __tags_of_js x13576
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13574 : __tags intf) -> intf_to_js __tags_to_js x13574
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSampler")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSampler") [||])
  end
module rec
  AnonymousInterface117:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLQuery.t
                          val set_prototype : t -> WebGLQuery.t -> unit
                          val create : t -> WebGLQuery.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13579 : Ojs.t) -> x13579
    and t_to_js : t -> Ojs.t = fun (x13578 : Ojs.t) -> x13578
    let (get_prototype : t -> WebGLQuery.t) =
      fun (x13580 : t) ->
        WebGLQuery.t_of_js (Ojs.get_prop_ascii (t_to_js x13580) "prototype")
    let (set_prototype : t -> WebGLQuery.t -> unit) =
      fun (x13581 : t) ->
        fun (x13582 : WebGLQuery.t) ->
          Ojs.set_prop_ascii (t_to_js x13581) "prototype"
            (WebGLQuery.t_to_js x13582)
    let (create : t -> WebGLQuery.t) =
      fun (x13583 : t) ->
        WebGLQuery.t_of_js (Ojs.new_obj (t_to_js x13583) [||])
  end
 and
  WebGLQuery:sig
               type t = [ `WebGLQuery ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `WebGLQuery ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem type tags = [ `WebGLQuery ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `WebGLQuery ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create : unit -> t
             end =
  struct
    type t = [ `WebGLQuery ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13585 : Ojs.t) -> t_of_js x13585
    and t_0_to_js : t_0 -> Ojs.t = fun (x13584 : t) -> t_to_js x13584
    type tags = [ `WebGLQuery ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLQuery ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13588 : Ojs.t) -> intf_of_js __tags_of_js x13588
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13586 : __tags intf) -> intf_to_js __tags_to_js x13586
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLQuery")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLQuery") [||])
  end
module Uint32List =
  struct
    type t = (Uint32Array.t_0, GLuint.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x13593 : Ojs.t) ->
        or_array_of_js Uint32Array.t_0_of_js GLuint.t_of_js x13593
    and t_to_js : t -> Ojs.t =
      fun (x13590 : (Uint32Array.t_0, GLuint.t) or_array) ->
        or_array_to_js Uint32Array.t_0_to_js GLuint.t_to_js x13590
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13597 : Ojs.t) -> t_of_js x13597
    and t_0_to_js : t_0 -> Ojs.t = fun (x13596 : t) -> t_to_js x13596
  end
module GLuint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x13599 : Ojs.t) -> Ojs.float_of_js x13599
    and t_to_js : t -> Ojs.t = fun (x13598 : float) -> Ojs.float_to_js x13598
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13601 : Ojs.t) -> t_of_js x13601
    and t_0_to_js : t_0 -> Ojs.t = fun (x13600 : t) -> t_to_js x13600
  end
module GLint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x13603 : Ojs.t) -> Ojs.float_of_js x13603
    and t_to_js : t -> Ojs.t = fun (x13602 : float) -> Ojs.float_to_js x13602
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13605 : Ojs.t) -> t_of_js x13605
    and t_0_to_js : t_0 -> Ojs.t = fun (x13604 : t) -> t_to_js x13604
  end
module WebGL2RenderingContextBase =
  struct
    type t = [ `WebGL2RenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13607 : Ojs.t) -> t_of_js x13607
    and t_0_to_js : t_0 -> Ojs.t = fun (x13606 : t) -> t_to_js x13606
    type tags = [ `WebGL2RenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13610 : Ojs.t) -> intf_of_js __tags_of_js x13610
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13608 : __tags intf) -> intf_to_js __tags_to_js x13608
    let (beginQuery :
      'tags this -> target:GLenum.t -> query:WebGLQuery.t -> unit) =
      fun (x13614 : 'tags this) ->
        fun ~target:(x13612 : GLenum.t) ->
          fun ~query:(x13613 : WebGLQuery.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13614) "beginQuery"
                 [|(GLenum.t_to_js x13612);(WebGLQuery.t_to_js x13613)|])
    let (beginTransformFeedback :
      'tags this -> primitiveMode:GLenum.t -> unit) =
      fun (x13617 : 'tags this) ->
        fun ~primitiveMode:(x13616 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13617) "beginTransformFeedback"
               [|(GLenum.t_to_js x13616)|])
    let (bindBufferBase :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t -> buffer:WebGLBuffer.t or_null -> unit)
      =
      fun (x13623 : 'tags this) ->
        fun ~target:(x13619 : GLenum.t) ->
          fun ~index:(x13620 : GLuint.t) ->
            fun ~buffer:(x13621 : WebGLBuffer.t or_null) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13623) "bindBufferBase"
                   [|(GLenum.t_to_js x13619);(GLuint.t_to_js x13620);(
                     or_null_to_js WebGLBuffer.t_to_js x13621)|])
    let (bindBufferRange :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t ->
            buffer:WebGLBuffer.t or_null ->
              offset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x13631 : 'tags this) ->
        fun ~target:(x13625 : GLenum.t) ->
          fun ~index:(x13626 : GLuint.t) ->
            fun ~buffer:(x13627 : WebGLBuffer.t or_null) ->
              fun ~offset:(x13629 : GLintptr.t) ->
                fun ~size:(x13630 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13631) "bindBufferRange"
                       [|(GLenum.t_to_js x13625);(GLuint.t_to_js x13626);(
                         or_null_to_js WebGLBuffer.t_to_js x13627);(GLintptr.t_to_js
                                                                    x13629);(
                         GLsizeiptr.t_to_js x13630)|])
    let (bindSampler :
      'tags this -> unit:GLuint.t -> sampler:WebGLSampler.t or_null -> unit)
      =
      fun (x13636 : 'tags this) ->
        fun ~unit:(x13633 : GLuint.t) ->
          fun ~sampler:(x13634 : WebGLSampler.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13636) "bindSampler"
                 [|(GLuint.t_to_js x13633);(or_null_to_js
                                              WebGLSampler.t_to_js x13634)|])
    let (bindTransformFeedback :
      'tags this ->
        target:GLenum.t -> tf:WebGLTransformFeedback.t or_null -> unit)
      =
      fun (x13641 : 'tags this) ->
        fun ~target:(x13638 : GLenum.t) ->
          fun ~tf:(x13639 : WebGLTransformFeedback.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13641) "bindTransformFeedback"
                 [|(GLenum.t_to_js x13638);(or_null_to_js
                                              WebGLTransformFeedback.t_to_js
                                              x13639)|])
    let (bindVertexArray :
      'tags this -> array:WebGLVertexArrayObject.t or_null -> unit) =
      fun (x13645 : 'tags this) ->
        fun ~array:(x13643 : WebGLVertexArrayObject.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13645) "bindVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x13643)|])
    let (blitFramebuffer :
      'tags this ->
        srcX0:GLint.t ->
          srcY0:GLint.t ->
            srcX1:GLint.t ->
              srcY1:GLint.t ->
                dstX0:GLint.t ->
                  dstY0:GLint.t ->
                    dstX1:GLint.t ->
                      dstY1:GLint.t ->
                        mask:GLbitfield.t -> filter:GLenum.t -> unit)
      =
      fun (x13657 : 'tags this) ->
        fun ~srcX0:(x13647 : GLint.t) ->
          fun ~srcY0:(x13648 : GLint.t) ->
            fun ~srcX1:(x13649 : GLint.t) ->
              fun ~srcY1:(x13650 : GLint.t) ->
                fun ~dstX0:(x13651 : GLint.t) ->
                  fun ~dstY0:(x13652 : GLint.t) ->
                    fun ~dstX1:(x13653 : GLint.t) ->
                      fun ~dstY1:(x13654 : GLint.t) ->
                        fun ~mask:(x13655 : GLbitfield.t) ->
                          fun ~filter:(x13656 : GLenum.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x13657)
                                 "blitFramebuffer"
                                 [|(GLint.t_to_js x13647);(GLint.t_to_js
                                                             x13648);(
                                   GLint.t_to_js x13649);(GLint.t_to_js
                                                            x13650);(
                                   GLint.t_to_js x13651);(GLint.t_to_js
                                                            x13652);(
                                   GLint.t_to_js x13653);(GLint.t_to_js
                                                            x13654);(
                                   GLbitfield.t_to_js x13655);(GLenum.t_to_js
                                                                 x13656)|])
    let (clearBufferfi :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t -> depth:GLfloat.t -> stencil:GLint.t -> unit)
      =
      fun (x13663 : 'tags this) ->
        fun ~buffer:(x13659 : GLenum.t) ->
          fun ~drawbuffer:(x13660 : GLint.t) ->
            fun ~depth:(x13661 : GLfloat.t) ->
              fun ~stencil:(x13662 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13663) "clearBufferfi"
                     [|(GLenum.t_to_js x13659);(GLint.t_to_js x13660);(
                       GLfloat.t_to_js x13661);(GLint.t_to_js x13662)|])
    let (clearBufferfv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Float32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x13671 : 'tags this) ->
        fun ~buffer:(x13665 : GLenum.t) ->
          fun ~drawbuffer:(x13666 : GLint.t) ->
            fun ~values:(x13667 : Float32List.t) ->
              fun ?srcOffset:(x13668 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13673 = this_to_js Obj.magic x13671 in
                     Ojs.call (Ojs.get_prop_ascii x13673 "clearBufferfv")
                       "apply"
                       [|x13673;((let x13669 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13669 "push"
                                       [|(GLenum.t_to_js x13665)|]);
                                  ignore
                                    (Ojs.call x13669 "push"
                                       [|(GLint.t_to_js x13666)|]);
                                  ignore
                                    (Ojs.call x13669 "push"
                                       [|(Float32List.t_to_js x13667)|]);
                                  (match x13668 with
                                   | Some x13670 ->
                                       ignore
                                         (Ojs.call x13669 "push"
                                            [|(GLuint.t_to_js x13670)|])
                                   | None -> ());
                                  x13669))|])
    let (clearBufferiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Int32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x13680 : 'tags this) ->
        fun ~buffer:(x13674 : GLenum.t) ->
          fun ~drawbuffer:(x13675 : GLint.t) ->
            fun ~values:(x13676 : Int32List.t) ->
              fun ?srcOffset:(x13677 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13682 = this_to_js Obj.magic x13680 in
                     Ojs.call (Ojs.get_prop_ascii x13682 "clearBufferiv")
                       "apply"
                       [|x13682;((let x13678 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13678 "push"
                                       [|(GLenum.t_to_js x13674)|]);
                                  ignore
                                    (Ojs.call x13678 "push"
                                       [|(GLint.t_to_js x13675)|]);
                                  ignore
                                    (Ojs.call x13678 "push"
                                       [|(Int32List.t_to_js x13676)|]);
                                  (match x13677 with
                                   | Some x13679 ->
                                       ignore
                                         (Ojs.call x13678 "push"
                                            [|(GLuint.t_to_js x13679)|])
                                   | None -> ());
                                  x13678))|])
    let (clearBufferuiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Uint32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x13689 : 'tags this) ->
        fun ~buffer:(x13683 : GLenum.t) ->
          fun ~drawbuffer:(x13684 : GLint.t) ->
            fun ~values:(x13685 : Uint32List.t) ->
              fun ?srcOffset:(x13686 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13691 = this_to_js Obj.magic x13689 in
                     Ojs.call (Ojs.get_prop_ascii x13691 "clearBufferuiv")
                       "apply"
                       [|x13691;((let x13687 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13687 "push"
                                       [|(GLenum.t_to_js x13683)|]);
                                  ignore
                                    (Ojs.call x13687 "push"
                                       [|(GLint.t_to_js x13684)|]);
                                  ignore
                                    (Ojs.call x13687 "push"
                                       [|(Uint32List.t_to_js x13685)|]);
                                  (match x13686 with
                                   | Some x13688 ->
                                       ignore
                                         (Ojs.call x13687 "push"
                                            [|(GLuint.t_to_js x13688)|])
                                   | None -> ());
                                  x13687))|])
    let (clientWaitSync :
      'tags this ->
        sync:WebGLSync.t ->
          flags:GLbitfield.t -> timeout:GLuint64.t -> GLenum.t)
      =
      fun (x13695 : 'tags this) ->
        fun ~sync:(x13692 : WebGLSync.t) ->
          fun ~flags:(x13693 : GLbitfield.t) ->
            fun ~timeout:(x13694 : GLuint64.t) ->
              GLenum.t_of_js
                (Ojs.call (this_to_js Obj.magic x13695) "clientWaitSync"
                   [|(WebGLSync.t_to_js x13692);(GLbitfield.t_to_js x13693);(
                     GLuint64.t_to_js x13694)|])
    let (compressedTexImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x13706 : 'tags this) ->
        fun ~target:(x13697 : GLenum.t) ->
          fun ~level:(x13698 : GLint.t) ->
            fun ~internalformat:(x13699 : GLenum.t) ->
              fun ~width:(x13700 : GLsizei.t) ->
                fun ~height:(x13701 : GLsizei.t) ->
                  fun ~depth:(x13702 : GLsizei.t) ->
                    fun ~border:(x13703 : GLint.t) ->
                      fun ~imageSize:(x13704 : GLsizei.t) ->
                        fun ~offset:(x13705 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13706)
                               "compressedTexImage3D"
                               [|(GLenum.t_to_js x13697);(GLint.t_to_js
                                                            x13698);(
                                 GLenum.t_to_js x13699);(GLsizei.t_to_js
                                                           x13700);(GLsizei.t_to_js
                                                                    x13701);(
                                 GLsizei.t_to_js x13702);(GLint.t_to_js
                                                            x13703);(
                                 GLsizei.t_to_js x13704);(GLintptr.t_to_js
                                                            x13705)|])
    let (compressedTexImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x13721 : 'tags this) ->
        fun ~target:(x13708 : GLenum.t) ->
          fun ~level:(x13709 : GLint.t) ->
            fun ~internalformat:(x13710 : GLenum.t) ->
              fun ~width:(x13711 : GLsizei.t) ->
                fun ~height:(x13712 : GLsizei.t) ->
                  fun ~depth:(x13713 : GLsizei.t) ->
                    fun ~border:(x13714 : GLint.t) ->
                      fun ~srcData:(x13715 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x13716 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x13717 : GLuint.t option)
                            ->
                            fun () ->
                              ignore
                                (let x13723 = this_to_js Obj.magic x13721 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x13723
                                      "compressedTexImage3D") "apply"
                                   [|x13723;((let x13718 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x13718 "push"
                                                   [|(GLenum.t_to_js x13708)|]);
                                              ignore
                                                (Ojs.call x13718 "push"
                                                   [|(GLint.t_to_js x13709)|]);
                                              ignore
                                                (Ojs.call x13718 "push"
                                                   [|(GLenum.t_to_js x13710)|]);
                                              ignore
                                                (Ojs.call x13718 "push"
                                                   [|(GLsizei.t_to_js x13711)|]);
                                              ignore
                                                (Ojs.call x13718 "push"
                                                   [|(GLsizei.t_to_js x13712)|]);
                                              ignore
                                                (Ojs.call x13718 "push"
                                                   [|(GLsizei.t_to_js x13713)|]);
                                              ignore
                                                (Ojs.call x13718 "push"
                                                   [|(GLint.t_to_js x13714)|]);
                                              ignore
                                                (Ojs.call x13718 "push"
                                                   [|(ArrayBufferView.t_0_to_js
                                                        x13715)|]);
                                              (match x13716 with
                                               | Some x13720 ->
                                                   ignore
                                                     (Ojs.call x13718 "push"
                                                        [|(GLuint.t_to_js
                                                             x13720)|])
                                               | None -> ());
                                              (match x13717 with
                                               | Some x13719 ->
                                                   ignore
                                                     (Ojs.call x13718 "push"
                                                        [|(GLuint.t_to_js
                                                             x13719)|])
                                               | None -> ());
                                              x13718))|])
    let (compressedTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x13735 : 'tags this) ->
        fun ~target:(x13724 : GLenum.t) ->
          fun ~level:(x13725 : GLint.t) ->
            fun ~xoffset:(x13726 : GLint.t) ->
              fun ~yoffset:(x13727 : GLint.t) ->
                fun ~zoffset:(x13728 : GLint.t) ->
                  fun ~width:(x13729 : GLsizei.t) ->
                    fun ~height:(x13730 : GLsizei.t) ->
                      fun ~depth:(x13731 : GLsizei.t) ->
                        fun ~format:(x13732 : GLenum.t) ->
                          fun ~imageSize:(x13733 : GLsizei.t) ->
                            fun ~offset:(x13734 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x13735)
                                   "compressedTexSubImage3D"
                                   [|(GLenum.t_to_js x13724);(GLint.t_to_js
                                                                x13725);(
                                     GLint.t_to_js x13726);(GLint.t_to_js
                                                              x13727);(
                                     GLint.t_to_js x13728);(GLsizei.t_to_js
                                                              x13729);(
                                     GLsizei.t_to_js x13730);(GLsizei.t_to_js
                                                                x13731);(
                                     GLenum.t_to_js x13732);(GLsizei.t_to_js
                                                               x13733);(
                                     GLintptr.t_to_js x13734)|])
    let (compressedTexSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            ?srcOffset:GLuint.t ->
                              ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x13752 : 'tags this) ->
        fun ~target:(x13737 : GLenum.t) ->
          fun ~level:(x13738 : GLint.t) ->
            fun ~xoffset:(x13739 : GLint.t) ->
              fun ~yoffset:(x13740 : GLint.t) ->
                fun ~zoffset:(x13741 : GLint.t) ->
                  fun ~width:(x13742 : GLsizei.t) ->
                    fun ~height:(x13743 : GLsizei.t) ->
                      fun ~depth:(x13744 : GLsizei.t) ->
                        fun ~format:(x13745 : GLenum.t) ->
                          fun ~srcData:(x13746 : ArrayBufferView.t_0) ->
                            fun ?srcOffset:(x13747 : GLuint.t option) ->
                              fun
                                ?srcLengthOverride:(x13748 : GLuint.t option)
                                ->
                                fun () ->
                                  ignore
                                    (let x13754 = this_to_js Obj.magic x13752 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x13754
                                          "compressedTexSubImage3D") "apply"
                                       [|x13754;((let x13749 =
                                                    Ojs.new_obj
                                                      (Ojs.get_prop_ascii
                                                         Ojs.global "Array")
                                                      [||] in
                                                  ignore
                                                    (Ojs.call x13749 "push"
                                                       [|(GLenum.t_to_js
                                                            x13737)|]);
                                                  ignore
                                                    (Ojs.call x13749 "push"
                                                       [|(GLint.t_to_js
                                                            x13738)|]);
                                                  ignore
                                                    (Ojs.call x13749 "push"
                                                       [|(GLint.t_to_js
                                                            x13739)|]);
                                                  ignore
                                                    (Ojs.call x13749 "push"
                                                       [|(GLint.t_to_js
                                                            x13740)|]);
                                                  ignore
                                                    (Ojs.call x13749 "push"
                                                       [|(GLint.t_to_js
                                                            x13741)|]);
                                                  ignore
                                                    (Ojs.call x13749 "push"
                                                       [|(GLsizei.t_to_js
                                                            x13742)|]);
                                                  ignore
                                                    (Ojs.call x13749 "push"
                                                       [|(GLsizei.t_to_js
                                                            x13743)|]);
                                                  ignore
                                                    (Ojs.call x13749 "push"
                                                       [|(GLsizei.t_to_js
                                                            x13744)|]);
                                                  ignore
                                                    (Ojs.call x13749 "push"
                                                       [|(GLenum.t_to_js
                                                            x13745)|]);
                                                  ignore
                                                    (Ojs.call x13749 "push"
                                                       [|(ArrayBufferView.t_0_to_js
                                                            x13746)|]);
                                                  (match x13747 with
                                                   | Some x13751 ->
                                                       ignore
                                                         (Ojs.call x13749
                                                            "push"
                                                            [|(GLuint.t_to_js
                                                                 x13751)|])
                                                   | None -> ());
                                                  (match x13748 with
                                                   | Some x13750 ->
                                                       ignore
                                                         (Ojs.call x13749
                                                            "push"
                                                            [|(GLuint.t_to_js
                                                                 x13750)|])
                                                   | None -> ());
                                                  x13749))|])
    let (copyBufferSubData :
      'tags this ->
        readTarget:GLenum.t ->
          writeTarget:GLenum.t ->
            readOffset:GLintptr.t ->
              writeOffset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x13760 : 'tags this) ->
        fun ~readTarget:(x13755 : GLenum.t) ->
          fun ~writeTarget:(x13756 : GLenum.t) ->
            fun ~readOffset:(x13757 : GLintptr.t) ->
              fun ~writeOffset:(x13758 : GLintptr.t) ->
                fun ~size:(x13759 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13760)
                       "copyBufferSubData"
                       [|(GLenum.t_to_js x13755);(GLenum.t_to_js x13756);(
                         GLintptr.t_to_js x13757);(GLintptr.t_to_js x13758);(
                         GLsizeiptr.t_to_js x13759)|])
    let (copyTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  x:GLint.t ->
                    y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x13771 : 'tags this) ->
        fun ~target:(x13762 : GLenum.t) ->
          fun ~level:(x13763 : GLint.t) ->
            fun ~xoffset:(x13764 : GLint.t) ->
              fun ~yoffset:(x13765 : GLint.t) ->
                fun ~zoffset:(x13766 : GLint.t) ->
                  fun ~x:(x13767 : GLint.t) ->
                    fun ~y:(x13768 : GLint.t) ->
                      fun ~width:(x13769 : GLsizei.t) ->
                        fun ~height:(x13770 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13771)
                               "copyTexSubImage3D"
                               [|(GLenum.t_to_js x13762);(GLint.t_to_js
                                                            x13763);(
                                 GLint.t_to_js x13764);(GLint.t_to_js x13765);(
                                 GLint.t_to_js x13766);(GLint.t_to_js x13767);(
                                 GLint.t_to_js x13768);(GLsizei.t_to_js
                                                          x13769);(GLsizei.t_to_js
                                                                    x13770)|])
    let (createQuery : 'tags this -> WebGLQuery.t or_null) =
      fun (x13773 : 'tags this) ->
        or_null_of_js WebGLQuery.t_of_js
          (Ojs.call (this_to_js Obj.magic x13773) "createQuery" [||])
    let (createSampler : 'tags this -> WebGLSampler.t or_null) =
      fun (x13776 : 'tags this) ->
        or_null_of_js WebGLSampler.t_of_js
          (Ojs.call (this_to_js Obj.magic x13776) "createSampler" [||])
    let (createTransformFeedback :
      'tags this -> WebGLTransformFeedback.t or_null) =
      fun (x13779 : 'tags this) ->
        or_null_of_js WebGLTransformFeedback.t_of_js
          (Ojs.call (this_to_js Obj.magic x13779) "createTransformFeedback"
             [||])
    let (createVertexArray : 'tags this -> WebGLVertexArrayObject.t or_null)
      =
      fun (x13782 : 'tags this) ->
        or_null_of_js WebGLVertexArrayObject.t_of_js
          (Ojs.call (this_to_js Obj.magic x13782) "createVertexArray" [||])
    let (deleteQuery : 'tags this -> query:WebGLQuery.t or_null -> unit) =
      fun (x13787 : 'tags this) ->
        fun ~query:(x13785 : WebGLQuery.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13787) "deleteQuery"
               [|(or_null_to_js WebGLQuery.t_to_js x13785)|])
    let (deleteSampler :
      'tags this -> sampler:WebGLSampler.t or_null -> unit) =
      fun (x13791 : 'tags this) ->
        fun ~sampler:(x13789 : WebGLSampler.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13791) "deleteSampler"
               [|(or_null_to_js WebGLSampler.t_to_js x13789)|])
    let (deleteSync : 'tags this -> sync:WebGLSync.t or_null -> unit) =
      fun (x13795 : 'tags this) ->
        fun ~sync:(x13793 : WebGLSync.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13795) "deleteSync"
               [|(or_null_to_js WebGLSync.t_to_js x13793)|])
    let (deleteTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t or_null -> unit) =
      fun (x13799 : 'tags this) ->
        fun ~tf:(x13797 : WebGLTransformFeedback.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13799) "deleteTransformFeedback"
               [|(or_null_to_js WebGLTransformFeedback.t_to_js x13797)|])
    let (deleteVertexArray :
      'tags this -> vertexArray:WebGLVertexArrayObject.t or_null -> unit) =
      fun (x13803 : 'tags this) ->
        fun ~vertexArray:(x13801 : WebGLVertexArrayObject.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13803) "deleteVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x13801)|])
    let (drawArraysInstanced :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x13809 : 'tags this) ->
        fun ~mode:(x13805 : GLenum.t) ->
          fun ~first:(x13806 : GLint.t) ->
            fun ~count:(x13807 : GLsizei.t) ->
              fun ~instanceCount:(x13808 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13809)
                     "drawArraysInstanced"
                     [|(GLenum.t_to_js x13805);(GLint.t_to_js x13806);(
                       GLsizei.t_to_js x13807);(GLsizei.t_to_js x13808)|])
    let (drawBuffers : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x13813 : 'tags this) ->
        fun ~buffers:(x13811 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13813) "drawBuffers"
               [|(Ojs.list_to_js GLenum.t_to_js x13811)|])
    let (drawElementsInstanced :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x13820 : 'tags this) ->
        fun ~mode:(x13815 : GLenum.t) ->
          fun ~count:(x13816 : GLsizei.t) ->
            fun ~type_:(x13817 : GLenum.t) ->
              fun ~offset:(x13818 : GLintptr.t) ->
                fun ~instanceCount:(x13819 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13820)
                       "drawElementsInstanced"
                       [|(GLenum.t_to_js x13815);(GLsizei.t_to_js x13816);(
                         GLenum.t_to_js x13817);(GLintptr.t_to_js x13818);(
                         GLsizei.t_to_js x13819)|])
    let (drawRangeElements :
      'tags this ->
        mode:GLenum.t ->
          start:GLuint.t ->
            end_:GLuint.t ->
              count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x13828 : 'tags this) ->
        fun ~mode:(x13822 : GLenum.t) ->
          fun ~start:(x13823 : GLuint.t) ->
            fun ~end_:(x13824 : GLuint.t) ->
              fun ~count:(x13825 : GLsizei.t) ->
                fun ~type_:(x13826 : GLenum.t) ->
                  fun ~offset:(x13827 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13828)
                         "drawRangeElements"
                         [|(GLenum.t_to_js x13822);(GLuint.t_to_js x13823);(
                           GLuint.t_to_js x13824);(GLsizei.t_to_js x13825);(
                           GLenum.t_to_js x13826);(GLintptr.t_to_js x13827)|])
    let (endQuery : 'tags this -> target:GLenum.t -> unit) =
      fun (x13831 : 'tags this) ->
        fun ~target:(x13830 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13831) "endQuery"
               [|(GLenum.t_to_js x13830)|])
    let (endTransformFeedback : 'tags this -> unit) =
      fun (x13833 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x13833) "endTransformFeedback" [||])
    let (fenceSync :
      'tags this ->
        condition:GLenum.t -> flags:GLbitfield.t -> WebGLSync.t or_null)
      =
      fun (x13837 : 'tags this) ->
        fun ~condition:(x13835 : GLenum.t) ->
          fun ~flags:(x13836 : GLbitfield.t) ->
            or_null_of_js WebGLSync.t_of_js
              (Ojs.call (this_to_js Obj.magic x13837) "fenceSync"
                 [|(GLenum.t_to_js x13835);(GLbitfield.t_to_js x13836)|])
    let (framebufferTextureLayer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t or_null ->
              level:GLint.t -> layer:GLint.t -> unit)
      =
      fun (x13846 : 'tags this) ->
        fun ~target:(x13840 : GLenum.t) ->
          fun ~attachment:(x13841 : GLenum.t) ->
            fun ~texture:(x13842 : WebGLTexture.t or_null) ->
              fun ~level:(x13844 : GLint.t) ->
                fun ~layer:(x13845 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13846)
                       "framebufferTextureLayer"
                       [|(GLenum.t_to_js x13840);(GLenum.t_to_js x13841);(
                         or_null_to_js WebGLTexture.t_to_js x13842);(
                         GLint.t_to_js x13844);(GLint.t_to_js x13845)|])
    let (getActiveUniformBlockName :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> string or_null)
      =
      fun (x13850 : 'tags this) ->
        fun ~program:(x13848 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x13849 : GLuint.t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x13850)
                 "getActiveUniformBlockName"
                 [|(WebGLProgram.t_to_js x13848);(GLuint.t_to_js x13849)|])
    let (getActiveUniformBlockParameter :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> pname:GLenum.t -> any)
      =
      fun (x13856 : 'tags this) ->
        fun ~program:(x13853 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x13854 : GLuint.t) ->
            fun ~pname:(x13855 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x13856)
                   "getActiveUniformBlockParameter"
                   [|(WebGLProgram.t_to_js x13853);(GLuint.t_to_js x13854);(
                     GLenum.t_to_js x13855)|])
    let (getActiveUniforms :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t list -> pname:GLenum.t -> any)
      =
      fun (x13862 : 'tags this) ->
        fun ~program:(x13858 : WebGLProgram.t) ->
          fun ~uniformIndices:(x13859 : GLuint.t list) ->
            fun ~pname:(x13861 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x13862) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x13858);(Ojs.list_to_js
                                                      GLuint.t_to_js x13859);(
                     GLenum.t_to_js x13861)|])
    let (getBufferSubData :
      'tags this ->
        target:GLenum.t ->
          srcByteOffset:GLintptr.t ->
            dstBuffer:ArrayBufferView.t_0 ->
              ?dstOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x13872 : 'tags this) ->
        fun ~target:(x13864 : GLenum.t) ->
          fun ~srcByteOffset:(x13865 : GLintptr.t) ->
            fun ~dstBuffer:(x13866 : ArrayBufferView.t_0) ->
              fun ?dstOffset:(x13867 : GLuint.t option) ->
                fun ?length:(x13868 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13874 = this_to_js Obj.magic x13872 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13874 "getBufferSubData")
                         "apply"
                         [|x13874;((let x13869 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13869 "push"
                                         [|(GLenum.t_to_js x13864)|]);
                                    ignore
                                      (Ojs.call x13869 "push"
                                         [|(GLintptr.t_to_js x13865)|]);
                                    ignore
                                      (Ojs.call x13869 "push"
                                         [|(ArrayBufferView.t_0_to_js x13866)|]);
                                    (match x13867 with
                                     | Some x13871 ->
                                         ignore
                                           (Ojs.call x13869 "push"
                                              [|(GLuint.t_to_js x13871)|])
                                     | None -> ());
                                    (match x13868 with
                                     | Some x13870 ->
                                         ignore
                                           (Ojs.call x13869 "push"
                                              [|(GLuint.t_to_js x13870)|])
                                     | None -> ());
                                    x13869))|])
    let (getFragDataLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x13877 : 'tags this) ->
        fun ~program:(x13875 : WebGLProgram.t) ->
          fun ~name:(x13876 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x13877) "getFragDataLocation"
                 [|(WebGLProgram.t_to_js x13875);(Ojs.string_to_js x13876)|])
    let (getIndexedParameter :
      'tags this -> target:GLenum.t -> index:GLuint.t -> any) =
      fun (x13881 : 'tags this) ->
        fun ~target:(x13879 : GLenum.t) ->
          fun ~index:(x13880 : GLuint.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x13881) "getIndexedParameter"
                 [|(GLenum.t_to_js x13879);(GLuint.t_to_js x13880)|])
    let (getInternalformatParameter :
      'tags this ->
        target:GLenum.t -> internalformat:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x13886 : 'tags this) ->
        fun ~target:(x13883 : GLenum.t) ->
          fun ~internalformat:(x13884 : GLenum.t) ->
            fun ~pname:(x13885 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x13886)
                   "getInternalformatParameter"
                   [|(GLenum.t_to_js x13883);(GLenum.t_to_js x13884);(
                     GLenum.t_to_js x13885)|])
    let (getQuery :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> WebGLQuery.t or_null)
      =
      fun (x13890 : 'tags this) ->
        fun ~target:(x13888 : GLenum.t) ->
          fun ~pname:(x13889 : GLenum.t) ->
            or_null_of_js WebGLQuery.t_of_js
              (Ojs.call (this_to_js Obj.magic x13890) "getQuery"
                 [|(GLenum.t_to_js x13888);(GLenum.t_to_js x13889)|])
    let (getQueryParameter :
      'tags this -> query:WebGLQuery.t -> pname:GLenum.t -> any) =
      fun (x13895 : 'tags this) ->
        fun ~query:(x13893 : WebGLQuery.t) ->
          fun ~pname:(x13894 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x13895) "getQueryParameter"
                 [|(WebGLQuery.t_to_js x13893);(GLenum.t_to_js x13894)|])
    let (getSamplerParameter :
      'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> any) =
      fun (x13899 : 'tags this) ->
        fun ~sampler:(x13897 : WebGLSampler.t) ->
          fun ~pname:(x13898 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x13899) "getSamplerParameter"
                 [|(WebGLSampler.t_to_js x13897);(GLenum.t_to_js x13898)|])
    let (getSyncParameter :
      'tags this -> sync:WebGLSync.t -> pname:GLenum.t -> any) =
      fun (x13903 : 'tags this) ->
        fun ~sync:(x13901 : WebGLSync.t) ->
          fun ~pname:(x13902 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x13903) "getSyncParameter"
                 [|(WebGLSync.t_to_js x13901);(GLenum.t_to_js x13902)|])
    let (getTransformFeedbackVarying :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x13907 : 'tags this) ->
        fun ~program:(x13905 : WebGLProgram.t) ->
          fun ~index:(x13906 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x13907)
                 "getTransformFeedbackVarying"
                 [|(WebGLProgram.t_to_js x13905);(GLuint.t_to_js x13906)|])
    let (getUniformBlockIndex :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockName:string -> GLuint.t)
      =
      fun (x13912 : 'tags this) ->
        fun ~program:(x13910 : WebGLProgram.t) ->
          fun ~uniformBlockName:(x13911 : string) ->
            GLuint.t_of_js
              (Ojs.call (this_to_js Obj.magic x13912) "getUniformBlockIndex"
                 [|(WebGLProgram.t_to_js x13910);(Ojs.string_to_js x13911)|])
    let (getUniformIndices :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string list -> GLuint.t list or_null)
      =
      fun (x13917 : 'tags this) ->
        fun ~program:(x13914 : WebGLProgram.t) ->
          fun ~uniformNames:(x13915 : string list) ->
            or_null_of_js
              (fun (x13919 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x13919)
              (Ojs.call (this_to_js Obj.magic x13917) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x13914);(Ojs.list_to_js
                                                    Ojs.string_to_js x13915)|])
    let (invalidateFramebuffer :
      'tags this -> target:GLenum.t -> attachments:GLenum.t list -> unit) =
      fun (x13924 : 'tags this) ->
        fun ~target:(x13921 : GLenum.t) ->
          fun ~attachments:(x13922 : GLenum.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13924) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x13921);(Ojs.list_to_js GLenum.t_to_js
                                              x13922)|])
    let (invalidateSubFramebuffer :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t list ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x13933 : 'tags this) ->
        fun ~target:(x13926 : GLenum.t) ->
          fun ~attachments:(x13927 : GLenum.t list) ->
            fun ~x:(x13929 : GLint.t) ->
              fun ~y:(x13930 : GLint.t) ->
                fun ~width:(x13931 : GLsizei.t) ->
                  fun ~height:(x13932 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13933)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x13926);(Ojs.list_to_js
                                                      GLenum.t_to_js x13927);(
                           GLint.t_to_js x13929);(GLint.t_to_js x13930);(
                           GLsizei.t_to_js x13931);(GLsizei.t_to_js x13932)|])
    let (isQuery : 'tags this -> query:WebGLQuery.t or_null -> GLboolean.t) =
      fun (x13937 : 'tags this) ->
        fun ~query:(x13935 : WebGLQuery.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x13937) "isQuery"
               [|(or_null_to_js WebGLQuery.t_to_js x13935)|])
    let (isSampler :
      'tags this -> sampler:WebGLSampler.t or_null -> GLboolean.t) =
      fun (x13941 : 'tags this) ->
        fun ~sampler:(x13939 : WebGLSampler.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x13941) "isSampler"
               [|(or_null_to_js WebGLSampler.t_to_js x13939)|])
    let (isSync : 'tags this -> sync:WebGLSync.t or_null -> GLboolean.t) =
      fun (x13945 : 'tags this) ->
        fun ~sync:(x13943 : WebGLSync.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x13945) "isSync"
               [|(or_null_to_js WebGLSync.t_to_js x13943)|])
    let (isTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t or_null -> GLboolean.t) =
      fun (x13949 : 'tags this) ->
        fun ~tf:(x13947 : WebGLTransformFeedback.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x13949) "isTransformFeedback"
               [|(or_null_to_js WebGLTransformFeedback.t_to_js x13947)|])
    let (isVertexArray :
      'tags this ->
        vertexArray:WebGLVertexArrayObject.t or_null -> GLboolean.t)
      =
      fun (x13953 : 'tags this) ->
        fun ~vertexArray:(x13951 : WebGLVertexArrayObject.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x13953) "isVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x13951)|])
    let (pauseTransformFeedback : 'tags this -> unit) =
      fun (x13955 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x13955) "pauseTransformFeedback"
             [||])
    let (readBuffer : 'tags this -> src:GLenum.t -> unit) =
      fun (x13958 : 'tags this) ->
        fun ~src:(x13957 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13958) "readBuffer"
               [|(GLenum.t_to_js x13957)|])
    let (renderbufferStorageMultisample :
      'tags this ->
        target:GLenum.t ->
          samples:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x13965 : 'tags this) ->
        fun ~target:(x13960 : GLenum.t) ->
          fun ~samples:(x13961 : GLsizei.t) ->
            fun ~internalformat:(x13962 : GLenum.t) ->
              fun ~width:(x13963 : GLsizei.t) ->
                fun ~height:(x13964 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13965)
                       "renderbufferStorageMultisample"
                       [|(GLenum.t_to_js x13960);(GLsizei.t_to_js x13961);(
                         GLenum.t_to_js x13962);(GLsizei.t_to_js x13963);(
                         GLsizei.t_to_js x13964)|])
    let (resumeTransformFeedback : 'tags this -> unit) =
      fun (x13967 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x13967) "resumeTransformFeedback"
             [||])
    let (samplerParameterf :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x13972 : 'tags this) ->
        fun ~sampler:(x13969 : WebGLSampler.t) ->
          fun ~pname:(x13970 : GLenum.t) ->
            fun ~param:(x13971 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13972) "samplerParameterf"
                   [|(WebGLSampler.t_to_js x13969);(GLenum.t_to_js x13970);(
                     GLfloat.t_to_js x13971)|])
    let (samplerParameteri :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x13977 : 'tags this) ->
        fun ~sampler:(x13974 : WebGLSampler.t) ->
          fun ~pname:(x13975 : GLenum.t) ->
            fun ~param:(x13976 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13977) "samplerParameteri"
                   [|(WebGLSampler.t_to_js x13974);(GLenum.t_to_js x13975);(
                     GLint.t_to_js x13976)|])
    let (texImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x13989 : 'tags this) ->
        fun ~target:(x13979 : GLenum.t) ->
          fun ~level:(x13980 : GLint.t) ->
            fun ~internalformat:(x13981 : GLint.t) ->
              fun ~width:(x13982 : GLsizei.t) ->
                fun ~height:(x13983 : GLsizei.t) ->
                  fun ~depth:(x13984 : GLsizei.t) ->
                    fun ~border:(x13985 : GLint.t) ->
                      fun ~format:(x13986 : GLenum.t) ->
                        fun ~type_:(x13987 : GLenum.t) ->
                          fun ~pboOffset:(x13988 : GLintptr.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x13989)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x13979);(GLint.t_to_js
                                                              x13980);(
                                   GLint.t_to_js x13981);(GLsizei.t_to_js
                                                            x13982);(
                                   GLsizei.t_to_js x13983);(GLsizei.t_to_js
                                                              x13984);(
                                   GLint.t_to_js x13985);(GLenum.t_to_js
                                                            x13986);(
                                   GLenum.t_to_js x13987);(GLintptr.t_to_js
                                                             x13988)|])
    let (texImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x14001 : 'tags this) ->
        fun ~target:(x13991 : GLenum.t) ->
          fun ~level:(x13992 : GLint.t) ->
            fun ~internalformat:(x13993 : GLint.t) ->
              fun ~width:(x13994 : GLsizei.t) ->
                fun ~height:(x13995 : GLsizei.t) ->
                  fun ~depth:(x13996 : GLsizei.t) ->
                    fun ~border:(x13997 : GLint.t) ->
                      fun ~format:(x13998 : GLenum.t) ->
                        fun ~type_:(x13999 : GLenum.t) ->
                          fun ~source:(x14000 : TexImageSource.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x14001)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x13991);(GLint.t_to_js
                                                              x13992);(
                                   GLint.t_to_js x13993);(GLsizei.t_to_js
                                                            x13994);(
                                   GLsizei.t_to_js x13995);(GLsizei.t_to_js
                                                              x13996);(
                                   GLint.t_to_js x13997);(GLenum.t_to_js
                                                            x13998);(
                                   GLenum.t_to_js x13999);(TexImageSource.t_to_js
                                                             x14000)|])
    let (texImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x14014 : 'tags this) ->
        fun ~target:(x14003 : GLenum.t) ->
          fun ~level:(x14004 : GLint.t) ->
            fun ~internalformat:(x14005 : GLint.t) ->
              fun ~width:(x14006 : GLsizei.t) ->
                fun ~height:(x14007 : GLsizei.t) ->
                  fun ~depth:(x14008 : GLsizei.t) ->
                    fun ~border:(x14009 : GLint.t) ->
                      fun ~format:(x14010 : GLenum.t) ->
                        fun ~type_:(x14011 : GLenum.t) ->
                          fun ~srcData:(x14012 : ArrayBufferView.t_0 or_null)
                            ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x14014)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x14003);(GLint.t_to_js
                                                              x14004);(
                                   GLint.t_to_js x14005);(GLsizei.t_to_js
                                                            x14006);(
                                   GLsizei.t_to_js x14007);(GLsizei.t_to_js
                                                              x14008);(
                                   GLint.t_to_js x14009);(GLenum.t_to_js
                                                            x14010);(
                                   GLenum.t_to_js x14011);(or_null_to_js
                                                             ArrayBufferView.t_0_to_js
                                                             x14012)|])
    let (texImage3D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            srcOffset:GLuint.t -> unit)
      =
      fun (x14027 : 'tags this) ->
        fun ~target:(x14016 : GLenum.t) ->
          fun ~level:(x14017 : GLint.t) ->
            fun ~internalformat:(x14018 : GLint.t) ->
              fun ~width:(x14019 : GLsizei.t) ->
                fun ~height:(x14020 : GLsizei.t) ->
                  fun ~depth:(x14021 : GLsizei.t) ->
                    fun ~border:(x14022 : GLint.t) ->
                      fun ~format:(x14023 : GLenum.t) ->
                        fun ~type_:(x14024 : GLenum.t) ->
                          fun ~srcData:(x14025 : ArrayBufferView.t_0) ->
                            fun ~srcOffset:(x14026 : GLuint.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x14027)
                                   "texImage3D"
                                   [|(GLenum.t_to_js x14016);(GLint.t_to_js
                                                                x14017);(
                                     GLint.t_to_js x14018);(GLsizei.t_to_js
                                                              x14019);(
                                     GLsizei.t_to_js x14020);(GLsizei.t_to_js
                                                                x14021);(
                                     GLint.t_to_js x14022);(GLenum.t_to_js
                                                              x14023);(
                                     GLenum.t_to_js x14024);(ArrayBufferView.t_0_to_js
                                                               x14025);(
                                     GLuint.t_to_js x14026)|])
    let (texStorage2D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x14034 : 'tags this) ->
        fun ~target:(x14029 : GLenum.t) ->
          fun ~levels:(x14030 : GLsizei.t) ->
            fun ~internalformat:(x14031 : GLenum.t) ->
              fun ~width:(x14032 : GLsizei.t) ->
                fun ~height:(x14033 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x14034) "texStorage2D"
                       [|(GLenum.t_to_js x14029);(GLsizei.t_to_js x14030);(
                         GLenum.t_to_js x14031);(GLsizei.t_to_js x14032);(
                         GLsizei.t_to_js x14033)|])
    let (texStorage3D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> unit)
      =
      fun (x14042 : 'tags this) ->
        fun ~target:(x14036 : GLenum.t) ->
          fun ~levels:(x14037 : GLsizei.t) ->
            fun ~internalformat:(x14038 : GLenum.t) ->
              fun ~width:(x14039 : GLsizei.t) ->
                fun ~height:(x14040 : GLsizei.t) ->
                  fun ~depth:(x14041 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x14042) "texStorage3D"
                         [|(GLenum.t_to_js x14036);(GLsizei.t_to_js x14037);(
                           GLenum.t_to_js x14038);(GLsizei.t_to_js x14039);(
                           GLsizei.t_to_js x14040);(GLsizei.t_to_js x14041)|])
    let (texSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x14055 : 'tags this) ->
        fun ~target:(x14044 : GLenum.t) ->
          fun ~level:(x14045 : GLint.t) ->
            fun ~xoffset:(x14046 : GLint.t) ->
              fun ~yoffset:(x14047 : GLint.t) ->
                fun ~zoffset:(x14048 : GLint.t) ->
                  fun ~width:(x14049 : GLsizei.t) ->
                    fun ~height:(x14050 : GLsizei.t) ->
                      fun ~depth:(x14051 : GLsizei.t) ->
                        fun ~format:(x14052 : GLenum.t) ->
                          fun ~type_:(x14053 : GLenum.t) ->
                            fun ~pboOffset:(x14054 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x14055)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x14044);(GLint.t_to_js
                                                                x14045);(
                                     GLint.t_to_js x14046);(GLint.t_to_js
                                                              x14047);(
                                     GLint.t_to_js x14048);(GLsizei.t_to_js
                                                              x14049);(
                                     GLsizei.t_to_js x14050);(GLsizei.t_to_js
                                                                x14051);(
                                     GLenum.t_to_js x14052);(GLenum.t_to_js
                                                               x14053);(
                                     GLintptr.t_to_js x14054)|])
    let (texSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x14068 : 'tags this) ->
        fun ~target:(x14057 : GLenum.t) ->
          fun ~level:(x14058 : GLint.t) ->
            fun ~xoffset:(x14059 : GLint.t) ->
              fun ~yoffset:(x14060 : GLint.t) ->
                fun ~zoffset:(x14061 : GLint.t) ->
                  fun ~width:(x14062 : GLsizei.t) ->
                    fun ~height:(x14063 : GLsizei.t) ->
                      fun ~depth:(x14064 : GLsizei.t) ->
                        fun ~format:(x14065 : GLenum.t) ->
                          fun ~type_:(x14066 : GLenum.t) ->
                            fun ~source:(x14067 : TexImageSource.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x14068)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x14057);(GLint.t_to_js
                                                                x14058);(
                                     GLint.t_to_js x14059);(GLint.t_to_js
                                                              x14060);(
                                     GLint.t_to_js x14061);(GLsizei.t_to_js
                                                              x14062);(
                                     GLsizei.t_to_js x14063);(GLsizei.t_to_js
                                                                x14064);(
                                     GLenum.t_to_js x14065);(GLenum.t_to_js
                                                               x14066);(
                                     TexImageSource.t_to_js x14067)|])
    let (texSubImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t ->
                            srcData:ArrayBufferView.t_0 or_null ->
                              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x14085 : 'tags this) ->
        fun ~target:(x14070 : GLenum.t) ->
          fun ~level:(x14071 : GLint.t) ->
            fun ~xoffset:(x14072 : GLint.t) ->
              fun ~yoffset:(x14073 : GLint.t) ->
                fun ~zoffset:(x14074 : GLint.t) ->
                  fun ~width:(x14075 : GLsizei.t) ->
                    fun ~height:(x14076 : GLsizei.t) ->
                      fun ~depth:(x14077 : GLsizei.t) ->
                        fun ~format:(x14078 : GLenum.t) ->
                          fun ~type_:(x14079 : GLenum.t) ->
                            fun
                              ~srcData:(x14080 : ArrayBufferView.t_0 or_null)
                              ->
                              fun ?srcOffset:(x14081 : GLuint.t option) ->
                                fun () ->
                                  ignore
                                    (let x14087 = this_to_js Obj.magic x14085 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x14087
                                          "texSubImage3D") "apply"
                                       [|x14087;((let x14082 =
                                                    Ojs.new_obj
                                                      (Ojs.get_prop_ascii
                                                         Ojs.global "Array")
                                                      [||] in
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(GLenum.t_to_js
                                                            x14070)|]);
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(GLint.t_to_js
                                                            x14071)|]);
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(GLint.t_to_js
                                                            x14072)|]);
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(GLint.t_to_js
                                                            x14073)|]);
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(GLint.t_to_js
                                                            x14074)|]);
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(GLsizei.t_to_js
                                                            x14075)|]);
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(GLsizei.t_to_js
                                                            x14076)|]);
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(GLsizei.t_to_js
                                                            x14077)|]);
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(GLenum.t_to_js
                                                            x14078)|]);
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(GLenum.t_to_js
                                                            x14079)|]);
                                                  ignore
                                                    (Ojs.call x14082 "push"
                                                       [|(or_null_to_js
                                                            ArrayBufferView.t_0_to_js
                                                            x14080)|]);
                                                  (match x14081 with
                                                   | Some x14083 ->
                                                       ignore
                                                         (Ojs.call x14082
                                                            "push"
                                                            [|(GLuint.t_to_js
                                                                 x14083)|])
                                                   | None -> ());
                                                  x14082))|])
    let (transformFeedbackVaryings :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string list -> bufferMode:GLenum.t -> unit)
      =
      fun (x14092 : 'tags this) ->
        fun ~program:(x14088 : WebGLProgram.t) ->
          fun ~varyings:(x14089 : string list) ->
            fun ~bufferMode:(x14091 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14092)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x14088);(Ojs.list_to_js
                                                      Ojs.string_to_js x14089);(
                     GLenum.t_to_js x14091)|])
    let (uniform1ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v0:GLuint.t -> unit)
      =
      fun (x14097 : 'tags this) ->
        fun ~location:(x14094 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x14096 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14097) "uniform1ui"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x14094);(
                   GLuint.t_to_js x14096)|])
    let (uniform1uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14107 : 'tags this) ->
        fun ~location:(x14099 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14100 : Uint32List.t) ->
            fun ?srcOffset:(x14101 : GLuint.t option) ->
              fun ?srcLength:(x14102 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14109 = this_to_js Obj.magic x14107 in
                     Ojs.call (Ojs.get_prop_ascii x14109 "uniform1uiv")
                       "apply"
                       [|x14109;((let x14103 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14103 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14099)|]);
                                  ignore
                                    (Ojs.call x14103 "push"
                                       [|(Uint32List.t_to_js x14100)|]);
                                  (match x14101 with
                                   | Some x14105 ->
                                       ignore
                                         (Ojs.call x14103 "push"
                                            [|(GLuint.t_to_js x14105)|])
                                   | None -> ());
                                  (match x14102 with
                                   | Some x14104 ->
                                       ignore
                                         (Ojs.call x14103 "push"
                                            [|(GLuint.t_to_js x14104)|])
                                   | None -> ());
                                  x14103))|])
    let (uniform2ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> unit)
      =
      fun (x14114 : 'tags this) ->
        fun ~location:(x14110 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x14112 : GLuint.t) ->
            fun ~v1:(x14113 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14114) "uniform2ui"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x14110);(
                     GLuint.t_to_js x14112);(GLuint.t_to_js x14113)|])
    let (uniform2uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14124 : 'tags this) ->
        fun ~location:(x14116 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14117 : Uint32List.t) ->
            fun ?srcOffset:(x14118 : GLuint.t option) ->
              fun ?srcLength:(x14119 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14126 = this_to_js Obj.magic x14124 in
                     Ojs.call (Ojs.get_prop_ascii x14126 "uniform2uiv")
                       "apply"
                       [|x14126;((let x14120 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14120 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14116)|]);
                                  ignore
                                    (Ojs.call x14120 "push"
                                       [|(Uint32List.t_to_js x14117)|]);
                                  (match x14118 with
                                   | Some x14122 ->
                                       ignore
                                         (Ojs.call x14120 "push"
                                            [|(GLuint.t_to_js x14122)|])
                                   | None -> ());
                                  (match x14119 with
                                   | Some x14121 ->
                                       ignore
                                         (Ojs.call x14120 "push"
                                            [|(GLuint.t_to_js x14121)|])
                                   | None -> ());
                                  x14120))|])
    let (uniform3ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> unit)
      =
      fun (x14132 : 'tags this) ->
        fun ~location:(x14127 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x14129 : GLuint.t) ->
            fun ~v1:(x14130 : GLuint.t) ->
              fun ~v2:(x14131 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x14132) "uniform3ui"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x14127);(
                       GLuint.t_to_js x14129);(GLuint.t_to_js x14130);(
                       GLuint.t_to_js x14131)|])
    let (uniform3uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14142 : 'tags this) ->
        fun ~location:(x14134 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14135 : Uint32List.t) ->
            fun ?srcOffset:(x14136 : GLuint.t option) ->
              fun ?srcLength:(x14137 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14144 = this_to_js Obj.magic x14142 in
                     Ojs.call (Ojs.get_prop_ascii x14144 "uniform3uiv")
                       "apply"
                       [|x14144;((let x14138 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14138 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14134)|]);
                                  ignore
                                    (Ojs.call x14138 "push"
                                       [|(Uint32List.t_to_js x14135)|]);
                                  (match x14136 with
                                   | Some x14140 ->
                                       ignore
                                         (Ojs.call x14138 "push"
                                            [|(GLuint.t_to_js x14140)|])
                                   | None -> ());
                                  (match x14137 with
                                   | Some x14139 ->
                                       ignore
                                         (Ojs.call x14138 "push"
                                            [|(GLuint.t_to_js x14139)|])
                                   | None -> ());
                                  x14138))|])
    let (uniform4ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> v3:GLuint.t -> unit)
      =
      fun (x14151 : 'tags this) ->
        fun ~location:(x14145 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x14147 : GLuint.t) ->
            fun ~v1:(x14148 : GLuint.t) ->
              fun ~v2:(x14149 : GLuint.t) ->
                fun ~v3:(x14150 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x14151) "uniform4ui"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x14145);(
                         GLuint.t_to_js x14147);(GLuint.t_to_js x14148);(
                         GLuint.t_to_js x14149);(GLuint.t_to_js x14150)|])
    let (uniform4uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14161 : 'tags this) ->
        fun ~location:(x14153 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14154 : Uint32List.t) ->
            fun ?srcOffset:(x14155 : GLuint.t option) ->
              fun ?srcLength:(x14156 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14163 = this_to_js Obj.magic x14161 in
                     Ojs.call (Ojs.get_prop_ascii x14163 "uniform4uiv")
                       "apply"
                       [|x14163;((let x14157 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14157 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14153)|]);
                                  ignore
                                    (Ojs.call x14157 "push"
                                       [|(Uint32List.t_to_js x14154)|]);
                                  (match x14155 with
                                   | Some x14159 ->
                                       ignore
                                         (Ojs.call x14157 "push"
                                            [|(GLuint.t_to_js x14159)|])
                                   | None -> ());
                                  (match x14156 with
                                   | Some x14158 ->
                                       ignore
                                         (Ojs.call x14157 "push"
                                            [|(GLuint.t_to_js x14158)|])
                                   | None -> ());
                                  x14157))|])
    let (uniformBlockBinding :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> uniformBlockBinding:GLuint.t -> unit)
      =
      fun (x14167 : 'tags this) ->
        fun ~program:(x14164 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x14165 : GLuint.t) ->
            fun ~uniformBlockBinding:(x14166 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14167) "uniformBlockBinding"
                   [|(WebGLProgram.t_to_js x14164);(GLuint.t_to_js x14165);(
                     GLuint.t_to_js x14166)|])
    let (uniformMatrix2x3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14178 : 'tags this) ->
        fun ~location:(x14169 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14170 : GLboolean.t) ->
            fun ~data:(x14171 : Float32List.t) ->
              fun ?srcOffset:(x14172 : GLuint.t option) ->
                fun ?srcLength:(x14173 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14180 = this_to_js Obj.magic x14178 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14180 "uniformMatrix2x3fv")
                         "apply"
                         [|x14180;((let x14174 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14174 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14169)|]);
                                    ignore
                                      (Ojs.call x14174 "push"
                                         [|(GLboolean.t_to_js x14170)|]);
                                    ignore
                                      (Ojs.call x14174 "push"
                                         [|(Float32List.t_to_js x14171)|]);
                                    (match x14172 with
                                     | Some x14176 ->
                                         ignore
                                           (Ojs.call x14174 "push"
                                              [|(GLuint.t_to_js x14176)|])
                                     | None -> ());
                                    (match x14173 with
                                     | Some x14175 ->
                                         ignore
                                           (Ojs.call x14174 "push"
                                              [|(GLuint.t_to_js x14175)|])
                                     | None -> ());
                                    x14174))|])
    let (uniformMatrix2x4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14190 : 'tags this) ->
        fun ~location:(x14181 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14182 : GLboolean.t) ->
            fun ~data:(x14183 : Float32List.t) ->
              fun ?srcOffset:(x14184 : GLuint.t option) ->
                fun ?srcLength:(x14185 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14192 = this_to_js Obj.magic x14190 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14192 "uniformMatrix2x4fv")
                         "apply"
                         [|x14192;((let x14186 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14186 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14181)|]);
                                    ignore
                                      (Ojs.call x14186 "push"
                                         [|(GLboolean.t_to_js x14182)|]);
                                    ignore
                                      (Ojs.call x14186 "push"
                                         [|(Float32List.t_to_js x14183)|]);
                                    (match x14184 with
                                     | Some x14188 ->
                                         ignore
                                           (Ojs.call x14186 "push"
                                              [|(GLuint.t_to_js x14188)|])
                                     | None -> ());
                                    (match x14185 with
                                     | Some x14187 ->
                                         ignore
                                           (Ojs.call x14186 "push"
                                              [|(GLuint.t_to_js x14187)|])
                                     | None -> ());
                                    x14186))|])
    let (uniformMatrix3x2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14202 : 'tags this) ->
        fun ~location:(x14193 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14194 : GLboolean.t) ->
            fun ~data:(x14195 : Float32List.t) ->
              fun ?srcOffset:(x14196 : GLuint.t option) ->
                fun ?srcLength:(x14197 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14204 = this_to_js Obj.magic x14202 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14204 "uniformMatrix3x2fv")
                         "apply"
                         [|x14204;((let x14198 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14198 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14193)|]);
                                    ignore
                                      (Ojs.call x14198 "push"
                                         [|(GLboolean.t_to_js x14194)|]);
                                    ignore
                                      (Ojs.call x14198 "push"
                                         [|(Float32List.t_to_js x14195)|]);
                                    (match x14196 with
                                     | Some x14200 ->
                                         ignore
                                           (Ojs.call x14198 "push"
                                              [|(GLuint.t_to_js x14200)|])
                                     | None -> ());
                                    (match x14197 with
                                     | Some x14199 ->
                                         ignore
                                           (Ojs.call x14198 "push"
                                              [|(GLuint.t_to_js x14199)|])
                                     | None -> ());
                                    x14198))|])
    let (uniformMatrix3x4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14214 : 'tags this) ->
        fun ~location:(x14205 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14206 : GLboolean.t) ->
            fun ~data:(x14207 : Float32List.t) ->
              fun ?srcOffset:(x14208 : GLuint.t option) ->
                fun ?srcLength:(x14209 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14216 = this_to_js Obj.magic x14214 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14216 "uniformMatrix3x4fv")
                         "apply"
                         [|x14216;((let x14210 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14210 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14205)|]);
                                    ignore
                                      (Ojs.call x14210 "push"
                                         [|(GLboolean.t_to_js x14206)|]);
                                    ignore
                                      (Ojs.call x14210 "push"
                                         [|(Float32List.t_to_js x14207)|]);
                                    (match x14208 with
                                     | Some x14212 ->
                                         ignore
                                           (Ojs.call x14210 "push"
                                              [|(GLuint.t_to_js x14212)|])
                                     | None -> ());
                                    (match x14209 with
                                     | Some x14211 ->
                                         ignore
                                           (Ojs.call x14210 "push"
                                              [|(GLuint.t_to_js x14211)|])
                                     | None -> ());
                                    x14210))|])
    let (uniformMatrix4x2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14226 : 'tags this) ->
        fun ~location:(x14217 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14218 : GLboolean.t) ->
            fun ~data:(x14219 : Float32List.t) ->
              fun ?srcOffset:(x14220 : GLuint.t option) ->
                fun ?srcLength:(x14221 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14228 = this_to_js Obj.magic x14226 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14228 "uniformMatrix4x2fv")
                         "apply"
                         [|x14228;((let x14222 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14222 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14217)|]);
                                    ignore
                                      (Ojs.call x14222 "push"
                                         [|(GLboolean.t_to_js x14218)|]);
                                    ignore
                                      (Ojs.call x14222 "push"
                                         [|(Float32List.t_to_js x14219)|]);
                                    (match x14220 with
                                     | Some x14224 ->
                                         ignore
                                           (Ojs.call x14222 "push"
                                              [|(GLuint.t_to_js x14224)|])
                                     | None -> ());
                                    (match x14221 with
                                     | Some x14223 ->
                                         ignore
                                           (Ojs.call x14222 "push"
                                              [|(GLuint.t_to_js x14223)|])
                                     | None -> ());
                                    x14222))|])
    let (uniformMatrix4x3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14238 : 'tags this) ->
        fun ~location:(x14229 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14230 : GLboolean.t) ->
            fun ~data:(x14231 : Float32List.t) ->
              fun ?srcOffset:(x14232 : GLuint.t option) ->
                fun ?srcLength:(x14233 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14240 = this_to_js Obj.magic x14238 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14240 "uniformMatrix4x3fv")
                         "apply"
                         [|x14240;((let x14234 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14234 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14229)|]);
                                    ignore
                                      (Ojs.call x14234 "push"
                                         [|(GLboolean.t_to_js x14230)|]);
                                    ignore
                                      (Ojs.call x14234 "push"
                                         [|(Float32List.t_to_js x14231)|]);
                                    (match x14232 with
                                     | Some x14236 ->
                                         ignore
                                           (Ojs.call x14234 "push"
                                              [|(GLuint.t_to_js x14236)|])
                                     | None -> ());
                                    (match x14233 with
                                     | Some x14235 ->
                                         ignore
                                           (Ojs.call x14234 "push"
                                              [|(GLuint.t_to_js x14235)|])
                                     | None -> ());
                                    x14234))|])
    let (vertexAttribDivisor :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x14243 : 'tags this) ->
        fun ~index:(x14241 : GLuint.t) ->
          fun ~divisor:(x14242 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14243) "vertexAttribDivisor"
                 [|(GLuint.t_to_js x14241);(GLuint.t_to_js x14242)|])
    let (vertexAttribI4i :
      'tags this ->
        index:GLuint.t ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x14250 : 'tags this) ->
        fun ~index:(x14245 : GLuint.t) ->
          fun ~x:(x14246 : GLint.t) ->
            fun ~y:(x14247 : GLint.t) ->
              fun ~z:(x14248 : GLint.t) ->
                fun ~w:(x14249 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x14250) "vertexAttribI4i"
                       [|(GLuint.t_to_js x14245);(GLint.t_to_js x14246);(
                         GLint.t_to_js x14247);(GLint.t_to_js x14248);(
                         GLint.t_to_js x14249)|])
    let (vertexAttribI4iv :
      'tags this -> index:GLuint.t -> values:Int32List.t -> unit) =
      fun (x14254 : 'tags this) ->
        fun ~index:(x14252 : GLuint.t) ->
          fun ~values:(x14253 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14254) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x14252);(Int32List.t_to_js x14253)|])
    let (vertexAttribI4ui :
      'tags this ->
        index:GLuint.t ->
          x:GLuint.t -> y:GLuint.t -> z:GLuint.t -> w:GLuint.t -> unit)
      =
      fun (x14261 : 'tags this) ->
        fun ~index:(x14256 : GLuint.t) ->
          fun ~x:(x14257 : GLuint.t) ->
            fun ~y:(x14258 : GLuint.t) ->
              fun ~z:(x14259 : GLuint.t) ->
                fun ~w:(x14260 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x14261)
                       "vertexAttribI4ui"
                       [|(GLuint.t_to_js x14256);(GLuint.t_to_js x14257);(
                         GLuint.t_to_js x14258);(GLuint.t_to_js x14259);(
                         GLuint.t_to_js x14260)|])
    let (vertexAttribI4uiv :
      'tags this -> index:GLuint.t -> values:Uint32List.t -> unit) =
      fun (x14265 : 'tags this) ->
        fun ~index:(x14263 : GLuint.t) ->
          fun ~values:(x14264 : Uint32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14265) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x14263);(Uint32List.t_to_js x14264)|])
    let (vertexAttribIPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x14272 : 'tags this) ->
        fun ~index:(x14267 : GLuint.t) ->
          fun ~size:(x14268 : GLint.t) ->
            fun ~type_:(x14269 : GLenum.t) ->
              fun ~stride:(x14270 : GLsizei.t) ->
                fun ~offset:(x14271 : GLintptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x14272)
                       "vertexAttribIPointer"
                       [|(GLuint.t_to_js x14267);(GLint.t_to_js x14268);(
                         GLenum.t_to_js x14269);(GLsizei.t_to_js x14270);(
                         GLintptr.t_to_js x14271)|])
    let (waitSync :
      'tags this ->
        sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLint64.t -> unit)
      =
      fun (x14277 : 'tags this) ->
        fun ~sync:(x14274 : WebGLSync.t) ->
          fun ~flags:(x14275 : GLbitfield.t) ->
            fun ~timeout:(x14276 : GLint64.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14277) "waitSync"
                   [|(WebGLSync.t_to_js x14274);(GLbitfield.t_to_js x14275);(
                     GLint64.t_to_js x14276)|])
    let (get_ACTIVE_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x14279 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14279)
             "ACTIVE_UNIFORM_BLOCKS")
    let (get_ALREADY_SIGNALED : 'tags this -> GLenum.t) =
      fun (x14281 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14281)
             "ALREADY_SIGNALED")
    let (get_ANY_SAMPLES_PASSED : 'tags this -> GLenum.t) =
      fun (x14283 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14283)
             "ANY_SAMPLES_PASSED")
    let (get_ANY_SAMPLES_PASSED_CONSERVATIVE : 'tags this -> GLenum.t) =
      fun (x14285 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14285)
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (get_COLOR : 'tags this -> GLenum.t) =
      fun (x14287 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14287) "COLOR")
    let (get_COLOR_ATTACHMENT1 : 'tags this -> GLenum.t) =
      fun (x14289 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14289)
             "COLOR_ATTACHMENT1")
    let (get_COLOR_ATTACHMENT10 : 'tags this -> GLenum.t) =
      fun (x14291 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14291)
             "COLOR_ATTACHMENT10")
    let (get_COLOR_ATTACHMENT11 : 'tags this -> GLenum.t) =
      fun (x14293 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14293)
             "COLOR_ATTACHMENT11")
    let (get_COLOR_ATTACHMENT12 : 'tags this -> GLenum.t) =
      fun (x14295 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14295)
             "COLOR_ATTACHMENT12")
    let (get_COLOR_ATTACHMENT13 : 'tags this -> GLenum.t) =
      fun (x14297 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14297)
             "COLOR_ATTACHMENT13")
    let (get_COLOR_ATTACHMENT14 : 'tags this -> GLenum.t) =
      fun (x14299 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14299)
             "COLOR_ATTACHMENT14")
    let (get_COLOR_ATTACHMENT15 : 'tags this -> GLenum.t) =
      fun (x14301 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14301)
             "COLOR_ATTACHMENT15")
    let (get_COLOR_ATTACHMENT2 : 'tags this -> GLenum.t) =
      fun (x14303 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14303)
             "COLOR_ATTACHMENT2")
    let (get_COLOR_ATTACHMENT3 : 'tags this -> GLenum.t) =
      fun (x14305 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14305)
             "COLOR_ATTACHMENT3")
    let (get_COLOR_ATTACHMENT4 : 'tags this -> GLenum.t) =
      fun (x14307 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14307)
             "COLOR_ATTACHMENT4")
    let (get_COLOR_ATTACHMENT5 : 'tags this -> GLenum.t) =
      fun (x14309 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14309)
             "COLOR_ATTACHMENT5")
    let (get_COLOR_ATTACHMENT6 : 'tags this -> GLenum.t) =
      fun (x14311 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14311)
             "COLOR_ATTACHMENT6")
    let (get_COLOR_ATTACHMENT7 : 'tags this -> GLenum.t) =
      fun (x14313 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14313)
             "COLOR_ATTACHMENT7")
    let (get_COLOR_ATTACHMENT8 : 'tags this -> GLenum.t) =
      fun (x14315 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14315)
             "COLOR_ATTACHMENT8")
    let (get_COLOR_ATTACHMENT9 : 'tags this -> GLenum.t) =
      fun (x14317 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14317)
             "COLOR_ATTACHMENT9")
    let (get_COMPARE_REF_TO_TEXTURE : 'tags this -> GLenum.t) =
      fun (x14319 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14319)
             "COMPARE_REF_TO_TEXTURE")
    let (get_CONDITION_SATISFIED : 'tags this -> GLenum.t) =
      fun (x14321 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14321)
             "CONDITION_SATISFIED")
    let (get_COPY_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x14323 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14323)
             "COPY_READ_BUFFER")
    let (get_COPY_READ_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14325 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14325)
             "COPY_READ_BUFFER_BINDING")
    let (get_COPY_WRITE_BUFFER : 'tags this -> GLenum.t) =
      fun (x14327 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14327)
             "COPY_WRITE_BUFFER")
    let (get_COPY_WRITE_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14329 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14329)
             "COPY_WRITE_BUFFER_BINDING")
    let (get_CURRENT_QUERY : 'tags this -> GLenum.t) =
      fun (x14331 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14331) "CURRENT_QUERY")
    let (get_DEPTH : 'tags this -> GLenum.t) =
      fun (x14333 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14333) "DEPTH")
    let (get_DEPTH24_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x14335 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14335)
             "DEPTH24_STENCIL8")
    let (get_DEPTH32F_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x14337 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14337)
             "DEPTH32F_STENCIL8")
    let (get_DEPTH_COMPONENT24 : 'tags this -> GLenum.t) =
      fun (x14339 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14339)
             "DEPTH_COMPONENT24")
    let (get_DEPTH_COMPONENT32F : 'tags this -> GLenum.t) =
      fun (x14341 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14341)
             "DEPTH_COMPONENT32F")
    let (get_DRAW_BUFFER0 : 'tags this -> GLenum.t) =
      fun (x14343 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14343) "DRAW_BUFFER0")
    let (get_DRAW_BUFFER1 : 'tags this -> GLenum.t) =
      fun (x14345 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14345) "DRAW_BUFFER1")
    let (get_DRAW_BUFFER10 : 'tags this -> GLenum.t) =
      fun (x14347 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14347) "DRAW_BUFFER10")
    let (get_DRAW_BUFFER11 : 'tags this -> GLenum.t) =
      fun (x14349 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14349) "DRAW_BUFFER11")
    let (get_DRAW_BUFFER12 : 'tags this -> GLenum.t) =
      fun (x14351 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14351) "DRAW_BUFFER12")
    let (get_DRAW_BUFFER13 : 'tags this -> GLenum.t) =
      fun (x14353 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14353) "DRAW_BUFFER13")
    let (get_DRAW_BUFFER14 : 'tags this -> GLenum.t) =
      fun (x14355 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14355) "DRAW_BUFFER14")
    let (get_DRAW_BUFFER15 : 'tags this -> GLenum.t) =
      fun (x14357 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14357) "DRAW_BUFFER15")
    let (get_DRAW_BUFFER2 : 'tags this -> GLenum.t) =
      fun (x14359 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14359) "DRAW_BUFFER2")
    let (get_DRAW_BUFFER3 : 'tags this -> GLenum.t) =
      fun (x14361 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14361) "DRAW_BUFFER3")
    let (get_DRAW_BUFFER4 : 'tags this -> GLenum.t) =
      fun (x14363 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14363) "DRAW_BUFFER4")
    let (get_DRAW_BUFFER5 : 'tags this -> GLenum.t) =
      fun (x14365 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14365) "DRAW_BUFFER5")
    let (get_DRAW_BUFFER6 : 'tags this -> GLenum.t) =
      fun (x14367 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14367) "DRAW_BUFFER6")
    let (get_DRAW_BUFFER7 : 'tags this -> GLenum.t) =
      fun (x14369 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14369) "DRAW_BUFFER7")
    let (get_DRAW_BUFFER8 : 'tags this -> GLenum.t) =
      fun (x14371 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14371) "DRAW_BUFFER8")
    let (get_DRAW_BUFFER9 : 'tags this -> GLenum.t) =
      fun (x14373 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14373) "DRAW_BUFFER9")
    let (get_DRAW_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x14375 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14375)
             "DRAW_FRAMEBUFFER")
    let (get_DRAW_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14377 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14377)
             "DRAW_FRAMEBUFFER_BINDING")
    let (get_DYNAMIC_COPY : 'tags this -> GLenum.t) =
      fun (x14379 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14379) "DYNAMIC_COPY")
    let (get_DYNAMIC_READ : 'tags this -> GLenum.t) =
      fun (x14381 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14381) "DYNAMIC_READ")
    let (get_FLOAT_32_UNSIGNED_INT_24_8_REV : 'tags this -> GLenum.t) =
      fun (x14383 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14383)
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (get_FLOAT_MAT2x3 : 'tags this -> GLenum.t) =
      fun (x14385 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14385) "FLOAT_MAT2x3")
    let (get_FLOAT_MAT2x4 : 'tags this -> GLenum.t) =
      fun (x14387 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14387) "FLOAT_MAT2x4")
    let (get_FLOAT_MAT3x2 : 'tags this -> GLenum.t) =
      fun (x14389 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14389) "FLOAT_MAT3x2")
    let (get_FLOAT_MAT3x4 : 'tags this -> GLenum.t) =
      fun (x14391 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14391) "FLOAT_MAT3x4")
    let (get_FLOAT_MAT4x2 : 'tags this -> GLenum.t) =
      fun (x14393 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14393) "FLOAT_MAT4x2")
    let (get_FLOAT_MAT4x3 : 'tags this -> GLenum.t) =
      fun (x14395 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14395) "FLOAT_MAT4x3")
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT : 'tags this -> GLenum.t) =
      fun (x14397 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14397)
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x14399 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14399)
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x14401 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14401)
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : 'tags this -> GLenum.t)
      =
      fun (x14403 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14403)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : 'tags this -> GLenum.t)
      =
      fun (x14405 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14405)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x14407 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14407)
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x14409 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14409)
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x14411 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14411)
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x14413 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14413)
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : 'tags this -> GLenum.t) =
      fun (x14415 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14415)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (get_FRAMEBUFFER_DEFAULT : 'tags this -> GLenum.t) =
      fun (x14417 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14417)
             "FRAMEBUFFER_DEFAULT")
    let (get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : 'tags this -> GLenum.t) =
      fun (x14419 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14419)
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (get_HALF_FLOAT : 'tags this -> GLenum.t) =
      fun (x14421 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14421) "HALF_FLOAT")
    let (get_INTERLEAVED_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x14423 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14423)
             "INTERLEAVED_ATTRIBS")
    let (get_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x14425 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14425)
             "INT_2_10_10_10_REV")
    let (get_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x14427 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14427) "INT_SAMPLER_2D")
    let (get_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x14429 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14429)
             "INT_SAMPLER_2D_ARRAY")
    let (get_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x14431 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14431) "INT_SAMPLER_3D")
    let (get_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x14433 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14433)
             "INT_SAMPLER_CUBE")
    let (get_INVALID_INDEX : 'tags this -> GLenum.t) =
      fun (x14435 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14435) "INVALID_INDEX")
    let (get_MAX : 'tags this -> GLenum.t) =
      fun (x14437 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14437) "MAX")
    let (get_MAX_3D_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x14439 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14439)
             "MAX_3D_TEXTURE_SIZE")
    let (get_MAX_ARRAY_TEXTURE_LAYERS : 'tags this -> GLenum.t) =
      fun (x14441 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14441)
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL : 'tags this -> GLenum.t) =
      fun (x14443 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14443)
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS : 'tags this -> GLenum.t) =
      fun (x14445 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14445)
             "MAX_COLOR_ATTACHMENTS")
    let (get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x14447 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14447)
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_COMBINED_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x14449 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14449)
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t)
      =
      fun (x14451 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14451)
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (get_MAX_DRAW_BUFFERS : 'tags this -> GLenum.t) =
      fun (x14453 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14453)
             "MAX_DRAW_BUFFERS")
    let (get_MAX_ELEMENTS_INDICES : 'tags this -> GLenum.t) =
      fun (x14455 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14455)
             "MAX_ELEMENTS_INDICES")
    let (get_MAX_ELEMENTS_VERTICES : 'tags this -> GLenum.t) =
      fun (x14457 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14457)
             "MAX_ELEMENTS_VERTICES")
    let (get_MAX_ELEMENT_INDEX : 'tags this -> GLenum.t) =
      fun (x14459 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14459)
             "MAX_ELEMENT_INDEX")
    let (get_MAX_FRAGMENT_INPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x14461 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14461)
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (get_MAX_FRAGMENT_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x14463 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14463)
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (get_MAX_FRAGMENT_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x14465 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14465)
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x14467 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14467)
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (get_MAX_SAMPLES : 'tags this -> GLenum.t) =
      fun (x14469 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14469) "MAX_SAMPLES")
    let (get_MAX_SERVER_WAIT_TIMEOUT : 'tags this -> GLenum.t) =
      fun (x14471 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14471)
             "MAX_SERVER_WAIT_TIMEOUT")
    let (get_MAX_TEXTURE_LOD_BIAS : 'tags this -> GLenum.t) =
      fun (x14473 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14473)
             "MAX_TEXTURE_LOD_BIAS")
    let (get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x14475 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14475)
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :
      'tags this -> GLenum.t) =
      fun (x14477 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14477)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x14479 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14479)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (get_MAX_UNIFORM_BLOCK_SIZE : 'tags this -> GLenum.t) =
      fun (x14481 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14481)
             "MAX_UNIFORM_BLOCK_SIZE")
    let (get_MAX_UNIFORM_BUFFER_BINDINGS : 'tags this -> GLenum.t) =
      fun (x14483 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14483)
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (get_MAX_VARYING_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x14485 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14485)
             "MAX_VARYING_COMPONENTS")
    let (get_MAX_VERTEX_OUTPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x14487 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14487)
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (get_MAX_VERTEX_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x14489 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14489)
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (get_MAX_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x14491 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14491)
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (get_MIN : 'tags this -> GLenum.t) =
      fun (x14493 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14493) "MIN")
    let (get_MIN_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x14495 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14495)
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (get_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x14497 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14497) "OBJECT_TYPE")
    let (get_PACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x14499 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14499) "PACK_ROW_LENGTH")
    let (get_PACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x14501 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14501)
             "PACK_SKIP_PIXELS")
    let (get_PACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x14503 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14503) "PACK_SKIP_ROWS")
    let (get_PIXEL_PACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x14505 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14505)
             "PIXEL_PACK_BUFFER")
    let (get_PIXEL_PACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14507 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14507)
             "PIXEL_PACK_BUFFER_BINDING")
    let (get_PIXEL_UNPACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x14509 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14509)
             "PIXEL_UNPACK_BUFFER")
    let (get_PIXEL_UNPACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14511 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14511)
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (get_QUERY_RESULT : 'tags this -> GLenum.t) =
      fun (x14513 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14513) "QUERY_RESULT")
    let (get_QUERY_RESULT_AVAILABLE : 'tags this -> GLenum.t) =
      fun (x14515 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14515)
             "QUERY_RESULT_AVAILABLE")
    let (get_R11F_G11F_B10F : 'tags this -> GLenum.t) =
      fun (x14517 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14517) "R11F_G11F_B10F")
    let (get_R16F : 'tags this -> GLenum.t) =
      fun (x14519 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14519) "R16F")
    let (get_R16I : 'tags this -> GLenum.t) =
      fun (x14521 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14521) "R16I")
    let (get_R16UI : 'tags this -> GLenum.t) =
      fun (x14523 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14523) "R16UI")
    let (get_R32F : 'tags this -> GLenum.t) =
      fun (x14525 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14525) "R32F")
    let (get_R32I : 'tags this -> GLenum.t) =
      fun (x14527 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14527) "R32I")
    let (get_R32UI : 'tags this -> GLenum.t) =
      fun (x14529 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14529) "R32UI")
    let (get_R8 : 'tags this -> GLenum.t) =
      fun (x14531 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14531) "R8")
    let (get_R8I : 'tags this -> GLenum.t) =
      fun (x14533 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14533) "R8I")
    let (get_R8UI : 'tags this -> GLenum.t) =
      fun (x14535 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14535) "R8UI")
    let (get_R8_SNORM : 'tags this -> GLenum.t) =
      fun (x14537 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14537) "R8_SNORM")
    let (get_RASTERIZER_DISCARD : 'tags this -> GLenum.t) =
      fun (x14539 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14539)
             "RASTERIZER_DISCARD")
    let (get_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x14541 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14541) "READ_BUFFER")
    let (get_READ_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x14543 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14543)
             "READ_FRAMEBUFFER")
    let (get_READ_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14545 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14545)
             "READ_FRAMEBUFFER_BINDING")
    let (get_RED : 'tags this -> GLenum.t) =
      fun (x14547 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14547) "RED")
    let (get_RED_INTEGER : 'tags this -> GLenum.t) =
      fun (x14549 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14549) "RED_INTEGER")
    let (get_RENDERBUFFER_SAMPLES : 'tags this -> GLenum.t) =
      fun (x14551 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14551)
             "RENDERBUFFER_SAMPLES")
    let (get_RG : 'tags this -> GLenum.t) =
      fun (x14553 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14553) "RG")
    let (get_RG16F : 'tags this -> GLenum.t) =
      fun (x14555 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14555) "RG16F")
    let (get_RG16I : 'tags this -> GLenum.t) =
      fun (x14557 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14557) "RG16I")
    let (get_RG16UI : 'tags this -> GLenum.t) =
      fun (x14559 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14559) "RG16UI")
    let (get_RG32F : 'tags this -> GLenum.t) =
      fun (x14561 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14561) "RG32F")
    let (get_RG32I : 'tags this -> GLenum.t) =
      fun (x14563 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14563) "RG32I")
    let (get_RG32UI : 'tags this -> GLenum.t) =
      fun (x14565 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14565) "RG32UI")
    let (get_RG8 : 'tags this -> GLenum.t) =
      fun (x14567 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14567) "RG8")
    let (get_RG8I : 'tags this -> GLenum.t) =
      fun (x14569 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14569) "RG8I")
    let (get_RG8UI : 'tags this -> GLenum.t) =
      fun (x14571 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14571) "RG8UI")
    let (get_RG8_SNORM : 'tags this -> GLenum.t) =
      fun (x14573 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14573) "RG8_SNORM")
    let (get_RGB10_A2 : 'tags this -> GLenum.t) =
      fun (x14575 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14575) "RGB10_A2")
    let (get_RGB10_A2UI : 'tags this -> GLenum.t) =
      fun (x14577 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14577) "RGB10_A2UI")
    let (get_RGB16F : 'tags this -> GLenum.t) =
      fun (x14579 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14579) "RGB16F")
    let (get_RGB16I : 'tags this -> GLenum.t) =
      fun (x14581 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14581) "RGB16I")
    let (get_RGB16UI : 'tags this -> GLenum.t) =
      fun (x14583 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14583) "RGB16UI")
    let (get_RGB32F : 'tags this -> GLenum.t) =
      fun (x14585 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14585) "RGB32F")
    let (get_RGB32I : 'tags this -> GLenum.t) =
      fun (x14587 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14587) "RGB32I")
    let (get_RGB32UI : 'tags this -> GLenum.t) =
      fun (x14589 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14589) "RGB32UI")
    let (get_RGB8 : 'tags this -> GLenum.t) =
      fun (x14591 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14591) "RGB8")
    let (get_RGB8I : 'tags this -> GLenum.t) =
      fun (x14593 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14593) "RGB8I")
    let (get_RGB8UI : 'tags this -> GLenum.t) =
      fun (x14595 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14595) "RGB8UI")
    let (get_RGB8_SNORM : 'tags this -> GLenum.t) =
      fun (x14597 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14597) "RGB8_SNORM")
    let (get_RGB9_E5 : 'tags this -> GLenum.t) =
      fun (x14599 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14599) "RGB9_E5")
    let (get_RGBA16F : 'tags this -> GLenum.t) =
      fun (x14601 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14601) "RGBA16F")
    let (get_RGBA16I : 'tags this -> GLenum.t) =
      fun (x14603 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14603) "RGBA16I")
    let (get_RGBA16UI : 'tags this -> GLenum.t) =
      fun (x14605 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14605) "RGBA16UI")
    let (get_RGBA32F : 'tags this -> GLenum.t) =
      fun (x14607 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14607) "RGBA32F")
    let (get_RGBA32I : 'tags this -> GLenum.t) =
      fun (x14609 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14609) "RGBA32I")
    let (get_RGBA32UI : 'tags this -> GLenum.t) =
      fun (x14611 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14611) "RGBA32UI")
    let (get_RGBA8 : 'tags this -> GLenum.t) =
      fun (x14613 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14613) "RGBA8")
    let (get_RGBA8I : 'tags this -> GLenum.t) =
      fun (x14615 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14615) "RGBA8I")
    let (get_RGBA8UI : 'tags this -> GLenum.t) =
      fun (x14617 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14617) "RGBA8UI")
    let (get_RGBA8_SNORM : 'tags this -> GLenum.t) =
      fun (x14619 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14619) "RGBA8_SNORM")
    let (get_RGBA_INTEGER : 'tags this -> GLenum.t) =
      fun (x14621 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14621) "RGBA_INTEGER")
    let (get_RGB_INTEGER : 'tags this -> GLenum.t) =
      fun (x14623 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14623) "RGB_INTEGER")
    let (get_RG_INTEGER : 'tags this -> GLenum.t) =
      fun (x14625 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14625) "RG_INTEGER")
    let (get_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x14627 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14627)
             "SAMPLER_2D_ARRAY")
    let (get_SAMPLER_2D_ARRAY_SHADOW : 'tags this -> GLenum.t) =
      fun (x14629 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14629)
             "SAMPLER_2D_ARRAY_SHADOW")
    let (get_SAMPLER_2D_SHADOW : 'tags this -> GLenum.t) =
      fun (x14631 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14631)
             "SAMPLER_2D_SHADOW")
    let (get_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x14633 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14633) "SAMPLER_3D")
    let (get_SAMPLER_BINDING : 'tags this -> GLenum.t) =
      fun (x14635 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14635) "SAMPLER_BINDING")
    let (get_SAMPLER_CUBE_SHADOW : 'tags this -> GLenum.t) =
      fun (x14637 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14637)
             "SAMPLER_CUBE_SHADOW")
    let (get_SEPARATE_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x14639 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14639)
             "SEPARATE_ATTRIBS")
    let (get_SIGNALED : 'tags this -> GLenum.t) =
      fun (x14641 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14641) "SIGNALED")
    let (get_SIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x14643 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14643)
             "SIGNED_NORMALIZED")
    let (get_SRGB : 'tags this -> GLenum.t) =
      fun (x14645 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14645) "SRGB")
    let (get_SRGB8 : 'tags this -> GLenum.t) =
      fun (x14647 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14647) "SRGB8")
    let (get_SRGB8_ALPHA8 : 'tags this -> GLenum.t) =
      fun (x14649 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14649) "SRGB8_ALPHA8")
    let (get_STATIC_COPY : 'tags this -> GLenum.t) =
      fun (x14651 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14651) "STATIC_COPY")
    let (get_STATIC_READ : 'tags this -> GLenum.t) =
      fun (x14653 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14653) "STATIC_READ")
    let (get_STENCIL : 'tags this -> GLenum.t) =
      fun (x14655 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14655) "STENCIL")
    let (get_STREAM_COPY : 'tags this -> GLenum.t) =
      fun (x14657 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14657) "STREAM_COPY")
    let (get_STREAM_READ : 'tags this -> GLenum.t) =
      fun (x14659 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14659) "STREAM_READ")
    let (get_SYNC_CONDITION : 'tags this -> GLenum.t) =
      fun (x14661 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14661) "SYNC_CONDITION")
    let (get_SYNC_FENCE : 'tags this -> GLenum.t) =
      fun (x14663 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14663) "SYNC_FENCE")
    let (get_SYNC_FLAGS : 'tags this -> GLenum.t) =
      fun (x14665 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14665) "SYNC_FLAGS")
    let (get_SYNC_FLUSH_COMMANDS_BIT : 'tags this -> GLenum.t) =
      fun (x14667 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14667)
             "SYNC_FLUSH_COMMANDS_BIT")
    let (get_SYNC_GPU_COMMANDS_COMPLETE : 'tags this -> GLenum.t) =
      fun (x14669 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14669)
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (get_SYNC_STATUS : 'tags this -> GLenum.t) =
      fun (x14671 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14671) "SYNC_STATUS")
    let (get_TEXTURE_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x14673 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14673)
             "TEXTURE_2D_ARRAY")
    let (get_TEXTURE_3D : 'tags this -> GLenum.t) =
      fun (x14675 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14675) "TEXTURE_3D")
    let (get_TEXTURE_BASE_LEVEL : 'tags this -> GLenum.t) =
      fun (x14677 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14677)
             "TEXTURE_BASE_LEVEL")
    let (get_TEXTURE_BINDING_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x14679 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14679)
             "TEXTURE_BINDING_2D_ARRAY")
    let (get_TEXTURE_BINDING_3D : 'tags this -> GLenum.t) =
      fun (x14681 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14681)
             "TEXTURE_BINDING_3D")
    let (get_TEXTURE_COMPARE_FUNC : 'tags this -> GLenum.t) =
      fun (x14683 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14683)
             "TEXTURE_COMPARE_FUNC")
    let (get_TEXTURE_COMPARE_MODE : 'tags this -> GLenum.t) =
      fun (x14685 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14685)
             "TEXTURE_COMPARE_MODE")
    let (get_TEXTURE_IMMUTABLE_FORMAT : 'tags this -> GLenum.t) =
      fun (x14687 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14687)
             "TEXTURE_IMMUTABLE_FORMAT")
    let (get_TEXTURE_IMMUTABLE_LEVELS : 'tags this -> GLenum.t) =
      fun (x14689 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14689)
             "TEXTURE_IMMUTABLE_LEVELS")
    let (get_TEXTURE_MAX_LEVEL : 'tags this -> GLenum.t) =
      fun (x14691 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14691)
             "TEXTURE_MAX_LEVEL")
    let (get_TEXTURE_MAX_LOD : 'tags this -> GLenum.t) =
      fun (x14693 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14693) "TEXTURE_MAX_LOD")
    let (get_TEXTURE_MIN_LOD : 'tags this -> GLenum.t) =
      fun (x14695 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14695) "TEXTURE_MIN_LOD")
    let (get_TEXTURE_WRAP_R : 'tags this -> GLenum.t) =
      fun (x14697 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14697) "TEXTURE_WRAP_R")
    let (get_TIMEOUT_EXPIRED : 'tags this -> GLenum.t) =
      fun (x14699 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14699) "TIMEOUT_EXPIRED")
    let (get_TIMEOUT_IGNORED : 'tags this -> GLint64.t) =
      fun (x14701 : 'tags this) ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14701) "TIMEOUT_IGNORED")
    let (get_TRANSFORM_FEEDBACK : 'tags this -> GLenum.t) =
      fun (x14703 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14703)
             "TRANSFORM_FEEDBACK")
    let (get_TRANSFORM_FEEDBACK_ACTIVE : 'tags this -> GLenum.t) =
      fun (x14705 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14705)
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (get_TRANSFORM_FEEDBACK_BINDING : 'tags this -> GLenum.t) =
      fun (x14707 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14707)
             "TRANSFORM_FEEDBACK_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x14709 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14709)
             "TRANSFORM_FEEDBACK_BUFFER")
    let (get_TRANSFORM_FEEDBACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14711 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14711)
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER_MODE : 'tags this -> GLenum.t) =
      fun (x14713 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14713)
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x14715 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14715)
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x14717 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14717)
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (get_TRANSFORM_FEEDBACK_PAUSED : 'tags this -> GLenum.t) =
      fun (x14719 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14719)
             "TRANSFORM_FEEDBACK_PAUSED")
    let (get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : 'tags this -> GLenum.t)
      =
      fun (x14721 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14721)
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (get_TRANSFORM_FEEDBACK_VARYINGS : 'tags this -> GLenum.t) =
      fun (x14723 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14723)
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (get_UNIFORM_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x14725 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14725)
             "UNIFORM_ARRAY_STRIDE")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x14727 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14727)
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : 'tags this -> GLenum.t) =
      fun (x14729 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14729)
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (get_UNIFORM_BLOCK_BINDING : 'tags this -> GLenum.t) =
      fun (x14731 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14731)
             "UNIFORM_BLOCK_BINDING")
    let (get_UNIFORM_BLOCK_DATA_SIZE : 'tags this -> GLenum.t) =
      fun (x14733 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14733)
             "UNIFORM_BLOCK_DATA_SIZE")
    let (get_UNIFORM_BLOCK_INDEX : 'tags this -> GLenum.t) =
      fun (x14735 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14735)
             "UNIFORM_BLOCK_INDEX")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :
      'tags this -> GLenum.t) =
      fun (x14737 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14737)
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :
      'tags this -> GLenum.t) =
      fun (x14739 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14739)
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (get_UNIFORM_BUFFER : 'tags this -> GLenum.t) =
      fun (x14741 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14741) "UNIFORM_BUFFER")
    let (get_UNIFORM_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14743 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14743)
             "UNIFORM_BUFFER_BINDING")
    let (get_UNIFORM_BUFFER_OFFSET_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x14745 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14745)
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (get_UNIFORM_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x14747 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14747)
             "UNIFORM_BUFFER_SIZE")
    let (get_UNIFORM_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x14749 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14749)
             "UNIFORM_BUFFER_START")
    let (get_UNIFORM_IS_ROW_MAJOR : 'tags this -> GLenum.t) =
      fun (x14751 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14751)
             "UNIFORM_IS_ROW_MAJOR")
    let (get_UNIFORM_MATRIX_STRIDE : 'tags this -> GLenum.t) =
      fun (x14753 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14753)
             "UNIFORM_MATRIX_STRIDE")
    let (get_UNIFORM_OFFSET : 'tags this -> GLenum.t) =
      fun (x14755 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14755) "UNIFORM_OFFSET")
    let (get_UNIFORM_SIZE : 'tags this -> GLenum.t) =
      fun (x14757 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14757) "UNIFORM_SIZE")
    let (get_UNIFORM_TYPE : 'tags this -> GLenum.t) =
      fun (x14759 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14759) "UNIFORM_TYPE")
    let (get_UNPACK_IMAGE_HEIGHT : 'tags this -> GLenum.t) =
      fun (x14761 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14761)
             "UNPACK_IMAGE_HEIGHT")
    let (get_UNPACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x14763 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14763)
             "UNPACK_ROW_LENGTH")
    let (get_UNPACK_SKIP_IMAGES : 'tags this -> GLenum.t) =
      fun (x14765 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14765)
             "UNPACK_SKIP_IMAGES")
    let (get_UNPACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x14767 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14767)
             "UNPACK_SKIP_PIXELS")
    let (get_UNPACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x14769 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14769)
             "UNPACK_SKIP_ROWS")
    let (get_UNSIGNALED : 'tags this -> GLenum.t) =
      fun (x14771 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14771) "UNSIGNALED")
    let (get_UNSIGNED_INT_10F_11F_11F_REV : 'tags this -> GLenum.t) =
      fun (x14773 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14773)
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (get_UNSIGNED_INT_24_8 : 'tags this -> GLenum.t) =
      fun (x14775 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14775)
             "UNSIGNED_INT_24_8")
    let (get_UNSIGNED_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x14777 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14777)
             "UNSIGNED_INT_2_10_10_10_REV")
    let (get_UNSIGNED_INT_5_9_9_9_REV : 'tags this -> GLenum.t) =
      fun (x14779 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14779)
             "UNSIGNED_INT_5_9_9_9_REV")
    let (get_UNSIGNED_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x14781 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14781)
             "UNSIGNED_INT_SAMPLER_2D")
    let (get_UNSIGNED_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x14783 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14783)
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (get_UNSIGNED_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x14785 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14785)
             "UNSIGNED_INT_SAMPLER_3D")
    let (get_UNSIGNED_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x14787 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14787)
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (get_UNSIGNED_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x14789 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14789)
             "UNSIGNED_INT_VEC2")
    let (get_UNSIGNED_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x14791 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14791)
             "UNSIGNED_INT_VEC3")
    let (get_UNSIGNED_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x14793 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14793)
             "UNSIGNED_INT_VEC4")
    let (get_UNSIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x14795 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14795)
             "UNSIGNED_NORMALIZED")
    let (get_VERTEX_ARRAY_BINDING : 'tags this -> GLenum.t) =
      fun (x14797 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14797)
             "VERTEX_ARRAY_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR : 'tags this -> GLenum.t) =
      fun (x14799 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14799)
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (get_VERTEX_ATTRIB_ARRAY_INTEGER : 'tags this -> GLenum.t) =
      fun (x14801 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14801)
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (get_WAIT_FAILED : 'tags this -> GLenum.t) =
      fun (x14803 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14803) "WAIT_FAILED")
    let (clearBufferfv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x14812 : 'tags this) ->
        fun ~buffer:(x14805 : GLenum.t) ->
          fun ~drawbuffer:(x14806 : GLint.t) ->
            fun ~values:(x14807 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14808 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14814 = this_to_js Obj.magic x14812 in
                     Ojs.call (Ojs.get_prop_ascii x14814 "clearBufferfv")
                       "apply"
                       [|x14814;((let x14809 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14809 "push"
                                       [|(GLenum.t_to_js x14805)|]);
                                  ignore
                                    (Ojs.call x14809 "push"
                                       [|(GLint.t_to_js x14806)|]);
                                  ignore
                                    (Ojs.call x14809 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x14807)|]);
                                  (match x14808 with
                                   | Some x14810 ->
                                       ignore
                                         (Ojs.call x14809 "push"
                                            [|(GLuint.t_to_js x14810)|])
                                   | None -> ());
                                  x14809))|])
    let (clearBufferiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x14822 : 'tags this) ->
        fun ~buffer:(x14815 : GLenum.t) ->
          fun ~drawbuffer:(x14816 : GLint.t) ->
            fun ~values:(x14817 : GLint.t Iterable.t_1) ->
              fun ?srcOffset:(x14818 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14824 = this_to_js Obj.magic x14822 in
                     Ojs.call (Ojs.get_prop_ascii x14824 "clearBufferiv")
                       "apply"
                       [|x14824;((let x14819 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14819 "push"
                                       [|(GLenum.t_to_js x14815)|]);
                                  ignore
                                    (Ojs.call x14819 "push"
                                       [|(GLint.t_to_js x14816)|]);
                                  ignore
                                    (Ojs.call x14819 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x14817)|]);
                                  (match x14818 with
                                   | Some x14820 ->
                                       ignore
                                         (Ojs.call x14819 "push"
                                            [|(GLuint.t_to_js x14820)|])
                                   | None -> ());
                                  x14819))|])
    let (clearBufferuiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLuint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x14832 : 'tags this) ->
        fun ~buffer:(x14825 : GLenum.t) ->
          fun ~drawbuffer:(x14826 : GLint.t) ->
            fun ~values:(x14827 : GLuint.t Iterable.t_1) ->
              fun ?srcOffset:(x14828 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14834 = this_to_js Obj.magic x14832 in
                     Ojs.call (Ojs.get_prop_ascii x14834 "clearBufferuiv")
                       "apply"
                       [|x14834;((let x14829 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14829 "push"
                                       [|(GLenum.t_to_js x14825)|]);
                                  ignore
                                    (Ojs.call x14829 "push"
                                       [|(GLint.t_to_js x14826)|]);
                                  ignore
                                    (Ojs.call x14829 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x14827)|]);
                                  (match x14828 with
                                   | Some x14830 ->
                                       ignore
                                         (Ojs.call x14829 "push"
                                            [|(GLuint.t_to_js x14830)|])
                                   | None -> ());
                                  x14829))|])
    let (drawBuffers' : 'tags this -> buffers:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x14837 : 'tags this) ->
        fun ~buffers:(x14835 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14837) "drawBuffers"
               [|(Iterable.t_1_to_js GLenum.t_to_js x14835)|])
    let (getActiveUniforms' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t Iterable.t_1 -> pname:GLenum.t -> any)
      =
      fun (x14843 : 'tags this) ->
        fun ~program:(x14839 : WebGLProgram.t) ->
          fun ~uniformIndices:(x14840 : GLuint.t Iterable.t_1) ->
            fun ~pname:(x14842 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x14843) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x14839);(Iterable.t_1_to_js
                                                      GLuint.t_to_js x14840);(
                     GLenum.t_to_js x14842)|])
    let (getUniformIndices' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string Iterable.t_1 -> GLuint.t Iterable.t_1 or_null)
      =
      fun (x14848 : 'tags this) ->
        fun ~program:(x14845 : WebGLProgram.t) ->
          fun ~uniformNames:(x14846 : string Iterable.t_1) ->
            or_null_of_js
              (fun (x14850 : Ojs.t) ->
                 Iterable.t_1_of_js GLuint.t_of_js x14850)
              (Ojs.call (this_to_js Obj.magic x14848) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x14845);(Iterable.t_1_to_js
                                                    Ojs.string_to_js x14846)|])
    let (invalidateFramebuffer' :
      'tags this ->
        target:GLenum.t -> attachments:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x14855 : 'tags this) ->
        fun ~target:(x14852 : GLenum.t) ->
          fun ~attachments:(x14853 : GLenum.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14855) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x14852);(Iterable.t_1_to_js GLenum.t_to_js
                                              x14853)|])
    let (invalidateSubFramebuffer' :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t Iterable.t_1 ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x14864 : 'tags this) ->
        fun ~target:(x14857 : GLenum.t) ->
          fun ~attachments:(x14858 : GLenum.t Iterable.t_1) ->
            fun ~x:(x14860 : GLint.t) ->
              fun ~y:(x14861 : GLint.t) ->
                fun ~width:(x14862 : GLsizei.t) ->
                  fun ~height:(x14863 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x14864)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x14857);(Iterable.t_1_to_js
                                                      GLenum.t_to_js x14858);(
                           GLint.t_to_js x14860);(GLint.t_to_js x14861);(
                           GLsizei.t_to_js x14862);(GLsizei.t_to_js x14863)|])
    let (transformFeedbackVaryings' :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string Iterable.t_1 -> bufferMode:GLenum.t -> unit)
      =
      fun (x14870 : 'tags this) ->
        fun ~program:(x14866 : WebGLProgram.t) ->
          fun ~varyings:(x14867 : string Iterable.t_1) ->
            fun ~bufferMode:(x14869 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14870)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x14866);(Iterable.t_1_to_js
                                                      Ojs.string_to_js x14867);(
                     GLenum.t_to_js x14869)|])
    let (uniform1uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14881 : 'tags this) ->
        fun ~location:(x14872 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14873 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x14874 : GLuint.t option) ->
              fun ?srcLength:(x14875 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14883 = this_to_js Obj.magic x14881 in
                     Ojs.call (Ojs.get_prop_ascii x14883 "uniform1uiv")
                       "apply"
                       [|x14883;((let x14876 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14876 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14872)|]);
                                  ignore
                                    (Ojs.call x14876 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x14873)|]);
                                  (match x14874 with
                                   | Some x14878 ->
                                       ignore
                                         (Ojs.call x14876 "push"
                                            [|(GLuint.t_to_js x14878)|])
                                   | None -> ());
                                  (match x14875 with
                                   | Some x14877 ->
                                       ignore
                                         (Ojs.call x14876 "push"
                                            [|(GLuint.t_to_js x14877)|])
                                   | None -> ());
                                  x14876))|])
    let (uniform2uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14893 : 'tags this) ->
        fun ~location:(x14884 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14885 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x14886 : GLuint.t option) ->
              fun ?srcLength:(x14887 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14895 = this_to_js Obj.magic x14893 in
                     Ojs.call (Ojs.get_prop_ascii x14895 "uniform2uiv")
                       "apply"
                       [|x14895;((let x14888 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14888 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14884)|]);
                                  ignore
                                    (Ojs.call x14888 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x14885)|]);
                                  (match x14886 with
                                   | Some x14890 ->
                                       ignore
                                         (Ojs.call x14888 "push"
                                            [|(GLuint.t_to_js x14890)|])
                                   | None -> ());
                                  (match x14887 with
                                   | Some x14889 ->
                                       ignore
                                         (Ojs.call x14888 "push"
                                            [|(GLuint.t_to_js x14889)|])
                                   | None -> ());
                                  x14888))|])
    let (uniform3uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14905 : 'tags this) ->
        fun ~location:(x14896 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14897 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x14898 : GLuint.t option) ->
              fun ?srcLength:(x14899 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14907 = this_to_js Obj.magic x14905 in
                     Ojs.call (Ojs.get_prop_ascii x14907 "uniform3uiv")
                       "apply"
                       [|x14907;((let x14900 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14900 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14896)|]);
                                  ignore
                                    (Ojs.call x14900 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x14897)|]);
                                  (match x14898 with
                                   | Some x14902 ->
                                       ignore
                                         (Ojs.call x14900 "push"
                                            [|(GLuint.t_to_js x14902)|])
                                   | None -> ());
                                  (match x14899 with
                                   | Some x14901 ->
                                       ignore
                                         (Ojs.call x14900 "push"
                                            [|(GLuint.t_to_js x14901)|])
                                   | None -> ());
                                  x14900))|])
    let (uniform4uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14917 : 'tags this) ->
        fun ~location:(x14908 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14909 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x14910 : GLuint.t option) ->
              fun ?srcLength:(x14911 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14919 = this_to_js Obj.magic x14917 in
                     Ojs.call (Ojs.get_prop_ascii x14919 "uniform4uiv")
                       "apply"
                       [|x14919;((let x14912 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14912 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14908)|]);
                                  ignore
                                    (Ojs.call x14912 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x14909)|]);
                                  (match x14910 with
                                   | Some x14914 ->
                                       ignore
                                         (Ojs.call x14912 "push"
                                            [|(GLuint.t_to_js x14914)|])
                                   | None -> ());
                                  (match x14911 with
                                   | Some x14913 ->
                                       ignore
                                         (Ojs.call x14912 "push"
                                            [|(GLuint.t_to_js x14913)|])
                                   | None -> ());
                                  x14912))|])
    let (uniformMatrix2x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14930 : 'tags this) ->
        fun ~location:(x14920 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14921 : GLboolean.t) ->
            fun ~data:(x14922 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14923 : GLuint.t option) ->
                fun ?srcLength:(x14924 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14932 = this_to_js Obj.magic x14930 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14932 "uniformMatrix2x3fv")
                         "apply"
                         [|x14932;((let x14925 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14925 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14920)|]);
                                    ignore
                                      (Ojs.call x14925 "push"
                                         [|(GLboolean.t_to_js x14921)|]);
                                    ignore
                                      (Ojs.call x14925 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14922)|]);
                                    (match x14923 with
                                     | Some x14927 ->
                                         ignore
                                           (Ojs.call x14925 "push"
                                              [|(GLuint.t_to_js x14927)|])
                                     | None -> ());
                                    (match x14924 with
                                     | Some x14926 ->
                                         ignore
                                           (Ojs.call x14925 "push"
                                              [|(GLuint.t_to_js x14926)|])
                                     | None -> ());
                                    x14925))|])
    let (uniformMatrix2x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14943 : 'tags this) ->
        fun ~location:(x14933 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14934 : GLboolean.t) ->
            fun ~data:(x14935 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14936 : GLuint.t option) ->
                fun ?srcLength:(x14937 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14945 = this_to_js Obj.magic x14943 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14945 "uniformMatrix2x4fv")
                         "apply"
                         [|x14945;((let x14938 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14938 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14933)|]);
                                    ignore
                                      (Ojs.call x14938 "push"
                                         [|(GLboolean.t_to_js x14934)|]);
                                    ignore
                                      (Ojs.call x14938 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14935)|]);
                                    (match x14936 with
                                     | Some x14940 ->
                                         ignore
                                           (Ojs.call x14938 "push"
                                              [|(GLuint.t_to_js x14940)|])
                                     | None -> ());
                                    (match x14937 with
                                     | Some x14939 ->
                                         ignore
                                           (Ojs.call x14938 "push"
                                              [|(GLuint.t_to_js x14939)|])
                                     | None -> ());
                                    x14938))|])
    let (uniformMatrix3x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14956 : 'tags this) ->
        fun ~location:(x14946 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14947 : GLboolean.t) ->
            fun ~data:(x14948 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14949 : GLuint.t option) ->
                fun ?srcLength:(x14950 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14958 = this_to_js Obj.magic x14956 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14958 "uniformMatrix3x2fv")
                         "apply"
                         [|x14958;((let x14951 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14951 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14946)|]);
                                    ignore
                                      (Ojs.call x14951 "push"
                                         [|(GLboolean.t_to_js x14947)|]);
                                    ignore
                                      (Ojs.call x14951 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14948)|]);
                                    (match x14949 with
                                     | Some x14953 ->
                                         ignore
                                           (Ojs.call x14951 "push"
                                              [|(GLuint.t_to_js x14953)|])
                                     | None -> ());
                                    (match x14950 with
                                     | Some x14952 ->
                                         ignore
                                           (Ojs.call x14951 "push"
                                              [|(GLuint.t_to_js x14952)|])
                                     | None -> ());
                                    x14951))|])
    let (uniformMatrix3x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14969 : 'tags this) ->
        fun ~location:(x14959 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14960 : GLboolean.t) ->
            fun ~data:(x14961 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14962 : GLuint.t option) ->
                fun ?srcLength:(x14963 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14971 = this_to_js Obj.magic x14969 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14971 "uniformMatrix3x4fv")
                         "apply"
                         [|x14971;((let x14964 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14964 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14959)|]);
                                    ignore
                                      (Ojs.call x14964 "push"
                                         [|(GLboolean.t_to_js x14960)|]);
                                    ignore
                                      (Ojs.call x14964 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14961)|]);
                                    (match x14962 with
                                     | Some x14966 ->
                                         ignore
                                           (Ojs.call x14964 "push"
                                              [|(GLuint.t_to_js x14966)|])
                                     | None -> ());
                                    (match x14963 with
                                     | Some x14965 ->
                                         ignore
                                           (Ojs.call x14964 "push"
                                              [|(GLuint.t_to_js x14965)|])
                                     | None -> ());
                                    x14964))|])
    let (uniformMatrix4x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14982 : 'tags this) ->
        fun ~location:(x14972 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14973 : GLboolean.t) ->
            fun ~data:(x14974 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14975 : GLuint.t option) ->
                fun ?srcLength:(x14976 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14984 = this_to_js Obj.magic x14982 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14984 "uniformMatrix4x2fv")
                         "apply"
                         [|x14984;((let x14977 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14977 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14972)|]);
                                    ignore
                                      (Ojs.call x14977 "push"
                                         [|(GLboolean.t_to_js x14973)|]);
                                    ignore
                                      (Ojs.call x14977 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14974)|]);
                                    (match x14975 with
                                     | Some x14979 ->
                                         ignore
                                           (Ojs.call x14977 "push"
                                              [|(GLuint.t_to_js x14979)|])
                                     | None -> ());
                                    (match x14976 with
                                     | Some x14978 ->
                                         ignore
                                           (Ojs.call x14977 "push"
                                              [|(GLuint.t_to_js x14978)|])
                                     | None -> ());
                                    x14977))|])
    let (uniformMatrix4x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14995 : 'tags this) ->
        fun ~location:(x14985 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14986 : GLboolean.t) ->
            fun ~data:(x14987 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14988 : GLuint.t option) ->
                fun ?srcLength:(x14989 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14997 = this_to_js Obj.magic x14995 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14997 "uniformMatrix4x3fv")
                         "apply"
                         [|x14997;((let x14990 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14990 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14985)|]);
                                    ignore
                                      (Ojs.call x14990 "push"
                                         [|(GLboolean.t_to_js x14986)|]);
                                    ignore
                                      (Ojs.call x14990 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14987)|]);
                                    (match x14988 with
                                     | Some x14992 ->
                                         ignore
                                           (Ojs.call x14990 "push"
                                              [|(GLuint.t_to_js x14992)|])
                                     | None -> ());
                                    (match x14989 with
                                     | Some x14991 ->
                                         ignore
                                           (Ojs.call x14990 "push"
                                              [|(GLuint.t_to_js x14991)|])
                                     | None -> ());
                                    x14990))|])
    let (vertexAttribI4iv' :
      'tags this -> index:GLuint.t -> values:GLint.t Iterable.t_1 -> unit) =
      fun (x15001 : 'tags this) ->
        fun ~index:(x14998 : GLuint.t) ->
          fun ~values:(x14999 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x15001) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x14998);(Iterable.t_1_to_js GLint.t_to_js
                                              x14999)|])
    let (vertexAttribI4uiv' :
      'tags this -> index:GLuint.t -> values:GLuint.t Iterable.t_1 -> unit) =
      fun (x15006 : 'tags this) ->
        fun ~index:(x15003 : GLuint.t) ->
          fun ~values:(x15004 : GLuint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x15006) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x15003);(Iterable.t_1_to_js GLuint.t_to_js
                                              x15004)|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface111:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGL2RenderingContext.t
                          val set_prototype :
                            t -> WebGL2RenderingContext.t -> unit
                          val create : t -> WebGL2RenderingContext.t
                          val get_ACTIVE_UNIFORM_BLOCKS : t -> GLenum.t
                          val get_ALREADY_SIGNALED : t -> GLenum.t
                          val get_ANY_SAMPLES_PASSED : t -> GLenum.t
                          val get_ANY_SAMPLES_PASSED_CONSERVATIVE :
                            t -> GLenum.t
                          val get_COLOR : t -> GLenum.t
                          val get_COLOR_ATTACHMENT1 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT10 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT11 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT12 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT13 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT14 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT15 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT2 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT3 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT4 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT5 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT6 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT7 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT8 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT9 : t -> GLenum.t
                          val get_COMPARE_REF_TO_TEXTURE : t -> GLenum.t
                          val get_CONDITION_SATISFIED : t -> GLenum.t
                          val get_COPY_READ_BUFFER : t -> GLenum.t
                          val get_COPY_READ_BUFFER_BINDING : t -> GLenum.t
                          val get_COPY_WRITE_BUFFER : t -> GLenum.t
                          val get_COPY_WRITE_BUFFER_BINDING : t -> GLenum.t
                          val get_CURRENT_QUERY : t -> GLenum.t
                          val get_DEPTH : t -> GLenum.t
                          val get_DEPTH24_STENCIL8 : t -> GLenum.t
                          val get_DEPTH32F_STENCIL8 : t -> GLenum.t
                          val get_DEPTH_COMPONENT24 : t -> GLenum.t
                          val get_DEPTH_COMPONENT32F : t -> GLenum.t
                          val get_DRAW_BUFFER0 : t -> GLenum.t
                          val get_DRAW_BUFFER1 : t -> GLenum.t
                          val get_DRAW_BUFFER10 : t -> GLenum.t
                          val get_DRAW_BUFFER11 : t -> GLenum.t
                          val get_DRAW_BUFFER12 : t -> GLenum.t
                          val get_DRAW_BUFFER13 : t -> GLenum.t
                          val get_DRAW_BUFFER14 : t -> GLenum.t
                          val get_DRAW_BUFFER15 : t -> GLenum.t
                          val get_DRAW_BUFFER2 : t -> GLenum.t
                          val get_DRAW_BUFFER3 : t -> GLenum.t
                          val get_DRAW_BUFFER4 : t -> GLenum.t
                          val get_DRAW_BUFFER5 : t -> GLenum.t
                          val get_DRAW_BUFFER6 : t -> GLenum.t
                          val get_DRAW_BUFFER7 : t -> GLenum.t
                          val get_DRAW_BUFFER8 : t -> GLenum.t
                          val get_DRAW_BUFFER9 : t -> GLenum.t
                          val get_DRAW_FRAMEBUFFER : t -> GLenum.t
                          val get_DRAW_FRAMEBUFFER_BINDING : t -> GLenum.t
                          val get_DYNAMIC_COPY : t -> GLenum.t
                          val get_DYNAMIC_READ : t -> GLenum.t
                          val get_FLOAT_32_UNSIGNED_INT_24_8_REV :
                            t -> GLenum.t
                          val get_FLOAT_MAT2x3 : t -> GLenum.t
                          val get_FLOAT_MAT2x4 : t -> GLenum.t
                          val get_FLOAT_MAT3x2 : t -> GLenum.t
                          val get_FLOAT_MAT3x4 : t -> GLenum.t
                          val get_FLOAT_MAT4x2 : t -> GLenum.t
                          val get_FLOAT_MAT4x3 : t -> GLenum.t
                          val get_FRAGMENT_SHADER_DERIVATIVE_HINT :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_RED_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_DEFAULT : t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :
                            t -> GLenum.t
                          val get_HALF_FLOAT : t -> GLenum.t
                          val get_INTERLEAVED_ATTRIBS : t -> GLenum.t
                          val get_INT_2_10_10_10_REV : t -> GLenum.t
                          val get_INT_SAMPLER_2D : t -> GLenum.t
                          val get_INT_SAMPLER_2D_ARRAY : t -> GLenum.t
                          val get_INT_SAMPLER_3D : t -> GLenum.t
                          val get_INT_SAMPLER_CUBE : t -> GLenum.t
                          val get_INVALID_INDEX : t -> GLenum.t
                          val get_MAX : t -> GLenum.t
                          val get_MAX_3D_TEXTURE_SIZE : t -> GLenum.t
                          val get_MAX_ARRAY_TEXTURE_LAYERS : t -> GLenum.t
                          val get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL :
                            t -> GLenum.t
                          val get_MAX_COLOR_ATTACHMENTS : t -> GLenum.t
                          val get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :
                            t -> GLenum.t
                          val get_MAX_COMBINED_UNIFORM_BLOCKS : t -> GLenum.t
                          val get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :
                            t -> GLenum.t
                          val get_MAX_DRAW_BUFFERS : t -> GLenum.t
                          val get_MAX_ELEMENTS_INDICES : t -> GLenum.t
                          val get_MAX_ELEMENTS_VERTICES : t -> GLenum.t
                          val get_MAX_ELEMENT_INDEX : t -> GLenum.t
                          val get_MAX_FRAGMENT_INPUT_COMPONENTS :
                            t -> GLenum.t
                          val get_MAX_FRAGMENT_UNIFORM_BLOCKS : t -> GLenum.t
                          val get_MAX_FRAGMENT_UNIFORM_COMPONENTS :
                            t -> GLenum.t
                          val get_MAX_PROGRAM_TEXEL_OFFSET : t -> GLenum.t
                          val get_MAX_SAMPLES : t -> GLenum.t
                          val get_MAX_SERVER_WAIT_TIMEOUT : t -> GLenum.t
                          val get_MAX_TEXTURE_LOD_BIAS : t -> GLenum.t
                          val
                            get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
                            : t -> GLenum.t
                          val get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :
                            t -> GLenum.t
                          val get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
                            : t -> GLenum.t
                          val get_MAX_UNIFORM_BLOCK_SIZE : t -> GLenum.t
                          val get_MAX_UNIFORM_BUFFER_BINDINGS : t -> GLenum.t
                          val get_MAX_VARYING_COMPONENTS : t -> GLenum.t
                          val get_MAX_VERTEX_OUTPUT_COMPONENTS :
                            t -> GLenum.t
                          val get_MAX_VERTEX_UNIFORM_BLOCKS : t -> GLenum.t
                          val get_MAX_VERTEX_UNIFORM_COMPONENTS :
                            t -> GLenum.t
                          val get_MIN : t -> GLenum.t
                          val get_MIN_PROGRAM_TEXEL_OFFSET : t -> GLenum.t
                          val get_OBJECT_TYPE : t -> GLenum.t
                          val get_PACK_ROW_LENGTH : t -> GLenum.t
                          val get_PACK_SKIP_PIXELS : t -> GLenum.t
                          val get_PACK_SKIP_ROWS : t -> GLenum.t
                          val get_PIXEL_PACK_BUFFER : t -> GLenum.t
                          val get_PIXEL_PACK_BUFFER_BINDING : t -> GLenum.t
                          val get_PIXEL_UNPACK_BUFFER : t -> GLenum.t
                          val get_PIXEL_UNPACK_BUFFER_BINDING : t -> GLenum.t
                          val get_QUERY_RESULT : t -> GLenum.t
                          val get_QUERY_RESULT_AVAILABLE : t -> GLenum.t
                          val get_R11F_G11F_B10F : t -> GLenum.t
                          val get_R16F : t -> GLenum.t
                          val get_R16I : t -> GLenum.t
                          val get_R16UI : t -> GLenum.t
                          val get_R32F : t -> GLenum.t
                          val get_R32I : t -> GLenum.t
                          val get_R32UI : t -> GLenum.t
                          val get_R8 : t -> GLenum.t
                          val get_R8I : t -> GLenum.t
                          val get_R8UI : t -> GLenum.t
                          val get_R8_SNORM : t -> GLenum.t
                          val get_RASTERIZER_DISCARD : t -> GLenum.t
                          val get_READ_BUFFER : t -> GLenum.t
                          val get_READ_FRAMEBUFFER : t -> GLenum.t
                          val get_READ_FRAMEBUFFER_BINDING : t -> GLenum.t
                          val get_RED : t -> GLenum.t
                          val get_RED_INTEGER : t -> GLenum.t
                          val get_RENDERBUFFER_SAMPLES : t -> GLenum.t
                          val get_RG : t -> GLenum.t
                          val get_RG16F : t -> GLenum.t
                          val get_RG16I : t -> GLenum.t
                          val get_RG16UI : t -> GLenum.t
                          val get_RG32F : t -> GLenum.t
                          val get_RG32I : t -> GLenum.t
                          val get_RG32UI : t -> GLenum.t
                          val get_RG8 : t -> GLenum.t
                          val get_RG8I : t -> GLenum.t
                          val get_RG8UI : t -> GLenum.t
                          val get_RG8_SNORM : t -> GLenum.t
                          val get_RGB10_A2 : t -> GLenum.t
                          val get_RGB10_A2UI : t -> GLenum.t
                          val get_RGB16F : t -> GLenum.t
                          val get_RGB16I : t -> GLenum.t
                          val get_RGB16UI : t -> GLenum.t
                          val get_RGB32F : t -> GLenum.t
                          val get_RGB32I : t -> GLenum.t
                          val get_RGB32UI : t -> GLenum.t
                          val get_RGB8 : t -> GLenum.t
                          val get_RGB8I : t -> GLenum.t
                          val get_RGB8UI : t -> GLenum.t
                          val get_RGB8_SNORM : t -> GLenum.t
                          val get_RGB9_E5 : t -> GLenum.t
                          val get_RGBA16F : t -> GLenum.t
                          val get_RGBA16I : t -> GLenum.t
                          val get_RGBA16UI : t -> GLenum.t
                          val get_RGBA32F : t -> GLenum.t
                          val get_RGBA32I : t -> GLenum.t
                          val get_RGBA32UI : t -> GLenum.t
                          val get_RGBA8 : t -> GLenum.t
                          val get_RGBA8I : t -> GLenum.t
                          val get_RGBA8UI : t -> GLenum.t
                          val get_RGBA8_SNORM : t -> GLenum.t
                          val get_RGBA_INTEGER : t -> GLenum.t
                          val get_RGB_INTEGER : t -> GLenum.t
                          val get_RG_INTEGER : t -> GLenum.t
                          val get_SAMPLER_2D_ARRAY : t -> GLenum.t
                          val get_SAMPLER_2D_ARRAY_SHADOW : t -> GLenum.t
                          val get_SAMPLER_2D_SHADOW : t -> GLenum.t
                          val get_SAMPLER_3D : t -> GLenum.t
                          val get_SAMPLER_BINDING : t -> GLenum.t
                          val get_SAMPLER_CUBE_SHADOW : t -> GLenum.t
                          val get_SEPARATE_ATTRIBS : t -> GLenum.t
                          val get_SIGNALED : t -> GLenum.t
                          val get_SIGNED_NORMALIZED : t -> GLenum.t
                          val get_SRGB : t -> GLenum.t
                          val get_SRGB8 : t -> GLenum.t
                          val get_SRGB8_ALPHA8 : t -> GLenum.t
                          val get_STATIC_COPY : t -> GLenum.t
                          val get_STATIC_READ : t -> GLenum.t
                          val get_STENCIL : t -> GLenum.t
                          val get_STREAM_COPY : t -> GLenum.t
                          val get_STREAM_READ : t -> GLenum.t
                          val get_SYNC_CONDITION : t -> GLenum.t
                          val get_SYNC_FENCE : t -> GLenum.t
                          val get_SYNC_FLAGS : t -> GLenum.t
                          val get_SYNC_FLUSH_COMMANDS_BIT : t -> GLenum.t
                          val get_SYNC_GPU_COMMANDS_COMPLETE : t -> GLenum.t
                          val get_SYNC_STATUS : t -> GLenum.t
                          val get_TEXTURE_2D_ARRAY : t -> GLenum.t
                          val get_TEXTURE_3D : t -> GLenum.t
                          val get_TEXTURE_BASE_LEVEL : t -> GLenum.t
                          val get_TEXTURE_BINDING_2D_ARRAY : t -> GLenum.t
                          val get_TEXTURE_BINDING_3D : t -> GLenum.t
                          val get_TEXTURE_COMPARE_FUNC : t -> GLenum.t
                          val get_TEXTURE_COMPARE_MODE : t -> GLenum.t
                          val get_TEXTURE_IMMUTABLE_FORMAT : t -> GLenum.t
                          val get_TEXTURE_IMMUTABLE_LEVELS : t -> GLenum.t
                          val get_TEXTURE_MAX_LEVEL : t -> GLenum.t
                          val get_TEXTURE_MAX_LOD : t -> GLenum.t
                          val get_TEXTURE_MIN_LOD : t -> GLenum.t
                          val get_TEXTURE_WRAP_R : t -> GLenum.t
                          val get_TIMEOUT_EXPIRED : t -> GLenum.t
                          val get_TIMEOUT_IGNORED : t -> GLint64.t
                          val get_TRANSFORM_FEEDBACK : t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_ACTIVE : t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BINDING : t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BUFFER : t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BUFFER_BINDING :
                            t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BUFFER_MODE :
                            t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BUFFER_SIZE :
                            t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BUFFER_START :
                            t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_PAUSED : t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN :
                            t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_VARYINGS : t -> GLenum.t
                          val get_UNIFORM_ARRAY_STRIDE : t -> GLenum.t
                          val get_UNIFORM_BLOCK_ACTIVE_UNIFORMS :
                            t -> GLenum.t
                          val get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :
                            t -> GLenum.t
                          val get_UNIFORM_BLOCK_BINDING : t -> GLenum.t
                          val get_UNIFORM_BLOCK_DATA_SIZE : t -> GLenum.t
                          val get_UNIFORM_BLOCK_INDEX : t -> GLenum.t
                          val get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
                            : t -> GLenum.t
                          val get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :
                            t -> GLenum.t
                          val get_UNIFORM_BUFFER : t -> GLenum.t
                          val get_UNIFORM_BUFFER_BINDING : t -> GLenum.t
                          val get_UNIFORM_BUFFER_OFFSET_ALIGNMENT :
                            t -> GLenum.t
                          val get_UNIFORM_BUFFER_SIZE : t -> GLenum.t
                          val get_UNIFORM_BUFFER_START : t -> GLenum.t
                          val get_UNIFORM_IS_ROW_MAJOR : t -> GLenum.t
                          val get_UNIFORM_MATRIX_STRIDE : t -> GLenum.t
                          val get_UNIFORM_OFFSET : t -> GLenum.t
                          val get_UNIFORM_SIZE : t -> GLenum.t
                          val get_UNIFORM_TYPE : t -> GLenum.t
                          val get_UNPACK_IMAGE_HEIGHT : t -> GLenum.t
                          val get_UNPACK_ROW_LENGTH : t -> GLenum.t
                          val get_UNPACK_SKIP_IMAGES : t -> GLenum.t
                          val get_UNPACK_SKIP_PIXELS : t -> GLenum.t
                          val get_UNPACK_SKIP_ROWS : t -> GLenum.t
                          val get_UNSIGNALED : t -> GLenum.t
                          val get_UNSIGNED_INT_10F_11F_11F_REV :
                            t -> GLenum.t
                          val get_UNSIGNED_INT_24_8 : t -> GLenum.t
                          val get_UNSIGNED_INT_2_10_10_10_REV : t -> GLenum.t
                          val get_UNSIGNED_INT_5_9_9_9_REV : t -> GLenum.t
                          val get_UNSIGNED_INT_SAMPLER_2D : t -> GLenum.t
                          val get_UNSIGNED_INT_SAMPLER_2D_ARRAY :
                            t -> GLenum.t
                          val get_UNSIGNED_INT_SAMPLER_3D : t -> GLenum.t
                          val get_UNSIGNED_INT_SAMPLER_CUBE : t -> GLenum.t
                          val get_UNSIGNED_INT_VEC2 : t -> GLenum.t
                          val get_UNSIGNED_INT_VEC3 : t -> GLenum.t
                          val get_UNSIGNED_INT_VEC4 : t -> GLenum.t
                          val get_UNSIGNED_NORMALIZED : t -> GLenum.t
                          val get_VERTEX_ARRAY_BINDING : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_DIVISOR : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_INTEGER : t -> GLenum.t
                          val get_WAIT_FAILED : t -> GLenum.t
                          val get_ACTIVE_ATTRIBUTES : t -> GLenum.t
                          val get_ACTIVE_TEXTURE : t -> GLenum.t
                          val get_ACTIVE_UNIFORMS : t -> GLenum.t
                          val get_ALIASED_LINE_WIDTH_RANGE : t -> GLenum.t
                          val get_ALIASED_POINT_SIZE_RANGE : t -> GLenum.t
                          val get_ALPHA : t -> GLenum.t
                          val get_ALPHA_BITS : t -> GLenum.t
                          val get_ALWAYS : t -> GLenum.t
                          val get_ARRAY_BUFFER : t -> GLenum.t
                          val get_ARRAY_BUFFER_BINDING : t -> GLenum.t
                          val get_ATTACHED_SHADERS : t -> GLenum.t
                          val get_BACK : t -> GLenum.t
                          val get_BLEND : t -> GLenum.t
                          val get_BLEND_COLOR : t -> GLenum.t
                          val get_BLEND_DST_ALPHA : t -> GLenum.t
                          val get_BLEND_DST_RGB : t -> GLenum.t
                          val get_BLEND_EQUATION : t -> GLenum.t
                          val get_BLEND_EQUATION_ALPHA : t -> GLenum.t
                          val get_BLEND_EQUATION_RGB : t -> GLenum.t
                          val get_BLEND_SRC_ALPHA : t -> GLenum.t
                          val get_BLEND_SRC_RGB : t -> GLenum.t
                          val get_BLUE_BITS : t -> GLenum.t
                          val get_BOOL : t -> GLenum.t
                          val get_BOOL_VEC2 : t -> GLenum.t
                          val get_BOOL_VEC3 : t -> GLenum.t
                          val get_BOOL_VEC4 : t -> GLenum.t
                          val get_BROWSER_DEFAULT_WEBGL : t -> GLenum.t
                          val get_BUFFER_SIZE : t -> GLenum.t
                          val get_BUFFER_USAGE : t -> GLenum.t
                          val get_BYTE : t -> GLenum.t
                          val get_CCW : t -> GLenum.t
                          val get_CLAMP_TO_EDGE : t -> GLenum.t
                          val get_COLOR_ATTACHMENT0 : t -> GLenum.t
                          val get_COLOR_BUFFER_BIT : t -> GLenum.t
                          val get_COLOR_CLEAR_VALUE : t -> GLenum.t
                          val get_COLOR_WRITEMASK : t -> GLenum.t
                          val get_COMPILE_STATUS : t -> GLenum.t
                          val get_COMPRESSED_TEXTURE_FORMATS : t -> GLenum.t
                          val get_CONSTANT_ALPHA : t -> GLenum.t
                          val get_CONSTANT_COLOR : t -> GLenum.t
                          val get_CONTEXT_LOST_WEBGL : t -> GLenum.t
                          val get_CULL_FACE : t -> GLenum.t
                          val get_CULL_FACE_MODE : t -> GLenum.t
                          val get_CURRENT_PROGRAM : t -> GLenum.t
                          val get_CURRENT_VERTEX_ATTRIB : t -> GLenum.t
                          val get_CW : t -> GLenum.t
                          val get_DECR : t -> GLenum.t
                          val get_DECR_WRAP : t -> GLenum.t
                          val get_DELETE_STATUS : t -> GLenum.t
                          val get_DEPTH_ATTACHMENT : t -> GLenum.t
                          val get_DEPTH_BITS : t -> GLenum.t
                          val get_DEPTH_BUFFER_BIT : t -> GLenum.t
                          val get_DEPTH_CLEAR_VALUE : t -> GLenum.t
                          val get_DEPTH_COMPONENT : t -> GLenum.t
                          val get_DEPTH_COMPONENT16 : t -> GLenum.t
                          val get_DEPTH_FUNC : t -> GLenum.t
                          val get_DEPTH_RANGE : t -> GLenum.t
                          val get_DEPTH_STENCIL : t -> GLenum.t
                          val get_DEPTH_STENCIL_ATTACHMENT : t -> GLenum.t
                          val get_DEPTH_TEST : t -> GLenum.t
                          val get_DEPTH_WRITEMASK : t -> GLenum.t
                          val get_DITHER : t -> GLenum.t
                          val get_DONT_CARE : t -> GLenum.t
                          val get_DST_ALPHA : t -> GLenum.t
                          val get_DST_COLOR : t -> GLenum.t
                          val get_DYNAMIC_DRAW : t -> GLenum.t
                          val get_ELEMENT_ARRAY_BUFFER : t -> GLenum.t
                          val get_ELEMENT_ARRAY_BUFFER_BINDING :
                            t -> GLenum.t
                          val get_EQUAL : t -> GLenum.t
                          val get_FASTEST : t -> GLenum.t
                          val get_FLOAT : t -> GLenum.t
                          val get_FLOAT_MAT2 : t -> GLenum.t
                          val get_FLOAT_MAT3 : t -> GLenum.t
                          val get_FLOAT_MAT4 : t -> GLenum.t
                          val get_FLOAT_VEC2 : t -> GLenum.t
                          val get_FLOAT_VEC3 : t -> GLenum.t
                          val get_FLOAT_VEC4 : t -> GLenum.t
                          val get_FRAGMENT_SHADER : t -> GLenum.t
                          val get_FRAMEBUFFER : t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :
                            t -> GLenum.t
                          val
                            get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
                            : t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_BINDING : t -> GLenum.t
                          val get_FRAMEBUFFER_COMPLETE : t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_UNSUPPORTED : t -> GLenum.t
                          val get_FRONT : t -> GLenum.t
                          val get_FRONT_AND_BACK : t -> GLenum.t
                          val get_FRONT_FACE : t -> GLenum.t
                          val get_FUNC_ADD : t -> GLenum.t
                          val get_FUNC_REVERSE_SUBTRACT : t -> GLenum.t
                          val get_FUNC_SUBTRACT : t -> GLenum.t
                          val get_GENERATE_MIPMAP_HINT : t -> GLenum.t
                          val get_GEQUAL : t -> GLenum.t
                          val get_GREATER : t -> GLenum.t
                          val get_GREEN_BITS : t -> GLenum.t
                          val get_HIGH_FLOAT : t -> GLenum.t
                          val get_HIGH_INT : t -> GLenum.t
                          val get_IMPLEMENTATION_COLOR_READ_FORMAT :
                            t -> GLenum.t
                          val get_IMPLEMENTATION_COLOR_READ_TYPE :
                            t -> GLenum.t
                          val get_INCR : t -> GLenum.t
                          val get_INCR_WRAP : t -> GLenum.t
                          val get_INT : t -> GLenum.t
                          val get_INT_VEC2 : t -> GLenum.t
                          val get_INT_VEC3 : t -> GLenum.t
                          val get_INT_VEC4 : t -> GLenum.t
                          val get_INVALID_ENUM : t -> GLenum.t
                          val get_INVALID_FRAMEBUFFER_OPERATION :
                            t -> GLenum.t
                          val get_INVALID_OPERATION : t -> GLenum.t
                          val get_INVALID_VALUE : t -> GLenum.t
                          val get_INVERT : t -> GLenum.t
                          val get_KEEP : t -> GLenum.t
                          val get_LEQUAL : t -> GLenum.t
                          val get_LESS : t -> GLenum.t
                          val get_LINEAR : t -> GLenum.t
                          val get_LINEAR_MIPMAP_LINEAR : t -> GLenum.t
                          val get_LINEAR_MIPMAP_NEAREST : t -> GLenum.t
                          val get_LINES : t -> GLenum.t
                          val get_LINE_LOOP : t -> GLenum.t
                          val get_LINE_STRIP : t -> GLenum.t
                          val get_LINE_WIDTH : t -> GLenum.t
                          val get_LINK_STATUS : t -> GLenum.t
                          val get_LOW_FLOAT : t -> GLenum.t
                          val get_LOW_INT : t -> GLenum.t
                          val get_LUMINANCE : t -> GLenum.t
                          val get_LUMINANCE_ALPHA : t -> GLenum.t
                          val get_MAX_COMBINED_TEXTURE_IMAGE_UNITS :
                            t -> GLenum.t
                          val get_MAX_CUBE_MAP_TEXTURE_SIZE : t -> GLenum.t
                          val get_MAX_FRAGMENT_UNIFORM_VECTORS :
                            t -> GLenum.t
                          val get_MAX_RENDERBUFFER_SIZE : t -> GLenum.t
                          val get_MAX_TEXTURE_IMAGE_UNITS : t -> GLenum.t
                          val get_MAX_TEXTURE_SIZE : t -> GLenum.t
                          val get_MAX_VARYING_VECTORS : t -> GLenum.t
                          val get_MAX_VERTEX_ATTRIBS : t -> GLenum.t
                          val get_MAX_VERTEX_TEXTURE_IMAGE_UNITS :
                            t -> GLenum.t
                          val get_MAX_VERTEX_UNIFORM_VECTORS : t -> GLenum.t
                          val get_MAX_VIEWPORT_DIMS : t -> GLenum.t
                          val get_MEDIUM_FLOAT : t -> GLenum.t
                          val get_MEDIUM_INT : t -> GLenum.t
                          val get_MIRRORED_REPEAT : t -> GLenum.t
                          val get_NEAREST : t -> GLenum.t
                          val get_NEAREST_MIPMAP_LINEAR : t -> GLenum.t
                          val get_NEAREST_MIPMAP_NEAREST : t -> GLenum.t
                          val get_NEVER : t -> GLenum.t
                          val get_NICEST : t -> GLenum.t
                          val get_NONE : t -> GLenum.t
                          val get_NOTEQUAL : t -> GLenum.t
                          val get_NO_ERROR : t -> GLenum.t
                          val get_ONE : t -> GLenum.t
                          val get_ONE_MINUS_CONSTANT_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_CONSTANT_COLOR : t -> GLenum.t
                          val get_ONE_MINUS_DST_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_DST_COLOR : t -> GLenum.t
                          val get_ONE_MINUS_SRC_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_SRC_COLOR : t -> GLenum.t
                          val get_OUT_OF_MEMORY : t -> GLenum.t
                          val get_PACK_ALIGNMENT : t -> GLenum.t
                          val get_POINTS : t -> GLenum.t
                          val get_POLYGON_OFFSET_FACTOR : t -> GLenum.t
                          val get_POLYGON_OFFSET_FILL : t -> GLenum.t
                          val get_POLYGON_OFFSET_UNITS : t -> GLenum.t
                          val get_RED_BITS : t -> GLenum.t
                          val get_RENDERBUFFER : t -> GLenum.t
                          val get_RENDERBUFFER_ALPHA_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_BINDING : t -> GLenum.t
                          val get_RENDERBUFFER_BLUE_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_DEPTH_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_GREEN_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_HEIGHT : t -> GLenum.t
                          val get_RENDERBUFFER_INTERNAL_FORMAT :
                            t -> GLenum.t
                          val get_RENDERBUFFER_RED_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_STENCIL_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_WIDTH : t -> GLenum.t
                          val get_RENDERER : t -> GLenum.t
                          val get_REPEAT : t -> GLenum.t
                          val get_REPLACE : t -> GLenum.t
                          val get_RGB : t -> GLenum.t
                          val get_RGB565 : t -> GLenum.t
                          val get_RGB5_A1 : t -> GLenum.t
                          val get_RGBA : t -> GLenum.t
                          val get_RGBA4 : t -> GLenum.t
                          val get_SAMPLER_2D : t -> GLenum.t
                          val get_SAMPLER_CUBE : t -> GLenum.t
                          val get_SAMPLES : t -> GLenum.t
                          val get_SAMPLE_ALPHA_TO_COVERAGE : t -> GLenum.t
                          val get_SAMPLE_BUFFERS : t -> GLenum.t
                          val get_SAMPLE_COVERAGE : t -> GLenum.t
                          val get_SAMPLE_COVERAGE_INVERT : t -> GLenum.t
                          val get_SAMPLE_COVERAGE_VALUE : t -> GLenum.t
                          val get_SCISSOR_BOX : t -> GLenum.t
                          val get_SCISSOR_TEST : t -> GLenum.t
                          val get_SHADER_TYPE : t -> GLenum.t
                          val get_SHADING_LANGUAGE_VERSION : t -> GLenum.t
                          val get_SHORT : t -> GLenum.t
                          val get_SRC_ALPHA : t -> GLenum.t
                          val get_SRC_ALPHA_SATURATE : t -> GLenum.t
                          val get_SRC_COLOR : t -> GLenum.t
                          val get_STATIC_DRAW : t -> GLenum.t
                          val get_STENCIL_ATTACHMENT : t -> GLenum.t
                          val get_STENCIL_BACK_FAIL : t -> GLenum.t
                          val get_STENCIL_BACK_FUNC : t -> GLenum.t
                          val get_STENCIL_BACK_PASS_DEPTH_FAIL :
                            t -> GLenum.t
                          val get_STENCIL_BACK_PASS_DEPTH_PASS :
                            t -> GLenum.t
                          val get_STENCIL_BACK_REF : t -> GLenum.t
                          val get_STENCIL_BACK_VALUE_MASK : t -> GLenum.t
                          val get_STENCIL_BACK_WRITEMASK : t -> GLenum.t
                          val get_STENCIL_BITS : t -> GLenum.t
                          val get_STENCIL_BUFFER_BIT : t -> GLenum.t
                          val get_STENCIL_CLEAR_VALUE : t -> GLenum.t
                          val get_STENCIL_FAIL : t -> GLenum.t
                          val get_STENCIL_FUNC : t -> GLenum.t
                          val get_STENCIL_INDEX8 : t -> GLenum.t
                          val get_STENCIL_PASS_DEPTH_FAIL : t -> GLenum.t
                          val get_STENCIL_PASS_DEPTH_PASS : t -> GLenum.t
                          val get_STENCIL_REF : t -> GLenum.t
                          val get_STENCIL_TEST : t -> GLenum.t
                          val get_STENCIL_VALUE_MASK : t -> GLenum.t
                          val get_STENCIL_WRITEMASK : t -> GLenum.t
                          val get_STREAM_DRAW : t -> GLenum.t
                          val get_SUBPIXEL_BITS : t -> GLenum.t
                          val get_TEXTURE : t -> GLenum.t
                          val get_TEXTURE0 : t -> GLenum.t
                          val get_TEXTURE1 : t -> GLenum.t
                          val get_TEXTURE10 : t -> GLenum.t
                          val get_TEXTURE11 : t -> GLenum.t
                          val get_TEXTURE12 : t -> GLenum.t
                          val get_TEXTURE13 : t -> GLenum.t
                          val get_TEXTURE14 : t -> GLenum.t
                          val get_TEXTURE15 : t -> GLenum.t
                          val get_TEXTURE16 : t -> GLenum.t
                          val get_TEXTURE17 : t -> GLenum.t
                          val get_TEXTURE18 : t -> GLenum.t
                          val get_TEXTURE19 : t -> GLenum.t
                          val get_TEXTURE2 : t -> GLenum.t
                          val get_TEXTURE20 : t -> GLenum.t
                          val get_TEXTURE21 : t -> GLenum.t
                          val get_TEXTURE22 : t -> GLenum.t
                          val get_TEXTURE23 : t -> GLenum.t
                          val get_TEXTURE24 : t -> GLenum.t
                          val get_TEXTURE25 : t -> GLenum.t
                          val get_TEXTURE26 : t -> GLenum.t
                          val get_TEXTURE27 : t -> GLenum.t
                          val get_TEXTURE28 : t -> GLenum.t
                          val get_TEXTURE29 : t -> GLenum.t
                          val get_TEXTURE3 : t -> GLenum.t
                          val get_TEXTURE30 : t -> GLenum.t
                          val get_TEXTURE31 : t -> GLenum.t
                          val get_TEXTURE4 : t -> GLenum.t
                          val get_TEXTURE5 : t -> GLenum.t
                          val get_TEXTURE6 : t -> GLenum.t
                          val get_TEXTURE7 : t -> GLenum.t
                          val get_TEXTURE8 : t -> GLenum.t
                          val get_TEXTURE9 : t -> GLenum.t
                          val get_TEXTURE_2D : t -> GLenum.t
                          val get_TEXTURE_BINDING_2D : t -> GLenum.t
                          val get_TEXTURE_BINDING_CUBE_MAP : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_X : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_Y : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_Z : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_X : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_Y : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_Z : t -> GLenum.t
                          val get_TEXTURE_MAG_FILTER : t -> GLenum.t
                          val get_TEXTURE_MIN_FILTER : t -> GLenum.t
                          val get_TEXTURE_WRAP_S : t -> GLenum.t
                          val get_TEXTURE_WRAP_T : t -> GLenum.t
                          val get_TRIANGLES : t -> GLenum.t
                          val get_TRIANGLE_FAN : t -> GLenum.t
                          val get_TRIANGLE_STRIP : t -> GLenum.t
                          val get_UNPACK_ALIGNMENT : t -> GLenum.t
                          val get_UNPACK_COLORSPACE_CONVERSION_WEBGL :
                            t -> GLenum.t
                          val get_UNPACK_FLIP_Y_WEBGL : t -> GLenum.t
                          val get_UNPACK_PREMULTIPLY_ALPHA_WEBGL :
                            t -> GLenum.t
                          val get_UNSIGNED_BYTE : t -> GLenum.t
                          val get_UNSIGNED_INT : t -> GLenum.t
                          val get_UNSIGNED_SHORT : t -> GLenum.t
                          val get_UNSIGNED_SHORT_4_4_4_4 : t -> GLenum.t
                          val get_UNSIGNED_SHORT_5_5_5_1 : t -> GLenum.t
                          val get_UNSIGNED_SHORT_5_6_5 : t -> GLenum.t
                          val get_VALIDATE_STATUS : t -> GLenum.t
                          val get_VENDOR : t -> GLenum.t
                          val get_VERSION : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :
                            t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_ENABLED : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_NORMALIZED :
                            t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_POINTER : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_SIZE : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_STRIDE : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_TYPE : t -> GLenum.t
                          val get_VERTEX_SHADER : t -> GLenum.t
                          val get_VIEWPORT : t -> GLenum.t
                          val get_ZERO : t -> GLenum.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15009 : Ojs.t) -> x15009
    and t_to_js : t -> Ojs.t = fun (x15008 : Ojs.t) -> x15008
    let (get_prototype : t -> WebGL2RenderingContext.t) =
      fun (x15010 : t) ->
        WebGL2RenderingContext.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15010) "prototype")
    let (set_prototype : t -> WebGL2RenderingContext.t -> unit) =
      fun (x15011 : t) ->
        fun (x15012 : WebGL2RenderingContext.t) ->
          Ojs.set_prop_ascii (t_to_js x15011) "prototype"
            (WebGL2RenderingContext.t_to_js x15012)
    let (create : t -> WebGL2RenderingContext.t) =
      fun (x15013 : t) ->
        WebGL2RenderingContext.t_of_js (Ojs.new_obj (t_to_js x15013) [||])
    let (get_ACTIVE_UNIFORM_BLOCKS : t -> GLenum.t) =
      fun (x15014 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15014) "ACTIVE_UNIFORM_BLOCKS")
    let (get_ALREADY_SIGNALED : t -> GLenum.t) =
      fun (x15015 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15015) "ALREADY_SIGNALED")
    let (get_ANY_SAMPLES_PASSED : t -> GLenum.t) =
      fun (x15016 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15016) "ANY_SAMPLES_PASSED")
    let (get_ANY_SAMPLES_PASSED_CONSERVATIVE : t -> GLenum.t) =
      fun (x15017 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15017)
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (get_COLOR : t -> GLenum.t) =
      fun (x15018 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15018) "COLOR")
    let (get_COLOR_ATTACHMENT1 : t -> GLenum.t) =
      fun (x15019 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15019) "COLOR_ATTACHMENT1")
    let (get_COLOR_ATTACHMENT10 : t -> GLenum.t) =
      fun (x15020 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15020) "COLOR_ATTACHMENT10")
    let (get_COLOR_ATTACHMENT11 : t -> GLenum.t) =
      fun (x15021 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15021) "COLOR_ATTACHMENT11")
    let (get_COLOR_ATTACHMENT12 : t -> GLenum.t) =
      fun (x15022 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15022) "COLOR_ATTACHMENT12")
    let (get_COLOR_ATTACHMENT13 : t -> GLenum.t) =
      fun (x15023 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15023) "COLOR_ATTACHMENT13")
    let (get_COLOR_ATTACHMENT14 : t -> GLenum.t) =
      fun (x15024 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15024) "COLOR_ATTACHMENT14")
    let (get_COLOR_ATTACHMENT15 : t -> GLenum.t) =
      fun (x15025 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15025) "COLOR_ATTACHMENT15")
    let (get_COLOR_ATTACHMENT2 : t -> GLenum.t) =
      fun (x15026 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15026) "COLOR_ATTACHMENT2")
    let (get_COLOR_ATTACHMENT3 : t -> GLenum.t) =
      fun (x15027 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15027) "COLOR_ATTACHMENT3")
    let (get_COLOR_ATTACHMENT4 : t -> GLenum.t) =
      fun (x15028 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15028) "COLOR_ATTACHMENT4")
    let (get_COLOR_ATTACHMENT5 : t -> GLenum.t) =
      fun (x15029 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15029) "COLOR_ATTACHMENT5")
    let (get_COLOR_ATTACHMENT6 : t -> GLenum.t) =
      fun (x15030 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15030) "COLOR_ATTACHMENT6")
    let (get_COLOR_ATTACHMENT7 : t -> GLenum.t) =
      fun (x15031 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15031) "COLOR_ATTACHMENT7")
    let (get_COLOR_ATTACHMENT8 : t -> GLenum.t) =
      fun (x15032 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15032) "COLOR_ATTACHMENT8")
    let (get_COLOR_ATTACHMENT9 : t -> GLenum.t) =
      fun (x15033 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15033) "COLOR_ATTACHMENT9")
    let (get_COMPARE_REF_TO_TEXTURE : t -> GLenum.t) =
      fun (x15034 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15034) "COMPARE_REF_TO_TEXTURE")
    let (get_CONDITION_SATISFIED : t -> GLenum.t) =
      fun (x15035 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15035) "CONDITION_SATISFIED")
    let (get_COPY_READ_BUFFER : t -> GLenum.t) =
      fun (x15036 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15036) "COPY_READ_BUFFER")
    let (get_COPY_READ_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15037 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15037) "COPY_READ_BUFFER_BINDING")
    let (get_COPY_WRITE_BUFFER : t -> GLenum.t) =
      fun (x15038 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15038) "COPY_WRITE_BUFFER")
    let (get_COPY_WRITE_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15039 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15039) "COPY_WRITE_BUFFER_BINDING")
    let (get_CURRENT_QUERY : t -> GLenum.t) =
      fun (x15040 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15040) "CURRENT_QUERY")
    let (get_DEPTH : t -> GLenum.t) =
      fun (x15041 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15041) "DEPTH")
    let (get_DEPTH24_STENCIL8 : t -> GLenum.t) =
      fun (x15042 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15042) "DEPTH24_STENCIL8")
    let (get_DEPTH32F_STENCIL8 : t -> GLenum.t) =
      fun (x15043 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15043) "DEPTH32F_STENCIL8")
    let (get_DEPTH_COMPONENT24 : t -> GLenum.t) =
      fun (x15044 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15044) "DEPTH_COMPONENT24")
    let (get_DEPTH_COMPONENT32F : t -> GLenum.t) =
      fun (x15045 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15045) "DEPTH_COMPONENT32F")
    let (get_DRAW_BUFFER0 : t -> GLenum.t) =
      fun (x15046 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15046) "DRAW_BUFFER0")
    let (get_DRAW_BUFFER1 : t -> GLenum.t) =
      fun (x15047 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15047) "DRAW_BUFFER1")
    let (get_DRAW_BUFFER10 : t -> GLenum.t) =
      fun (x15048 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15048) "DRAW_BUFFER10")
    let (get_DRAW_BUFFER11 : t -> GLenum.t) =
      fun (x15049 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15049) "DRAW_BUFFER11")
    let (get_DRAW_BUFFER12 : t -> GLenum.t) =
      fun (x15050 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15050) "DRAW_BUFFER12")
    let (get_DRAW_BUFFER13 : t -> GLenum.t) =
      fun (x15051 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15051) "DRAW_BUFFER13")
    let (get_DRAW_BUFFER14 : t -> GLenum.t) =
      fun (x15052 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15052) "DRAW_BUFFER14")
    let (get_DRAW_BUFFER15 : t -> GLenum.t) =
      fun (x15053 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15053) "DRAW_BUFFER15")
    let (get_DRAW_BUFFER2 : t -> GLenum.t) =
      fun (x15054 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15054) "DRAW_BUFFER2")
    let (get_DRAW_BUFFER3 : t -> GLenum.t) =
      fun (x15055 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15055) "DRAW_BUFFER3")
    let (get_DRAW_BUFFER4 : t -> GLenum.t) =
      fun (x15056 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15056) "DRAW_BUFFER4")
    let (get_DRAW_BUFFER5 : t -> GLenum.t) =
      fun (x15057 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15057) "DRAW_BUFFER5")
    let (get_DRAW_BUFFER6 : t -> GLenum.t) =
      fun (x15058 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15058) "DRAW_BUFFER6")
    let (get_DRAW_BUFFER7 : t -> GLenum.t) =
      fun (x15059 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15059) "DRAW_BUFFER7")
    let (get_DRAW_BUFFER8 : t -> GLenum.t) =
      fun (x15060 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15060) "DRAW_BUFFER8")
    let (get_DRAW_BUFFER9 : t -> GLenum.t) =
      fun (x15061 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15061) "DRAW_BUFFER9")
    let (get_DRAW_FRAMEBUFFER : t -> GLenum.t) =
      fun (x15062 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15062) "DRAW_FRAMEBUFFER")
    let (get_DRAW_FRAMEBUFFER_BINDING : t -> GLenum.t) =
      fun (x15063 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15063) "DRAW_FRAMEBUFFER_BINDING")
    let (get_DYNAMIC_COPY : t -> GLenum.t) =
      fun (x15064 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15064) "DYNAMIC_COPY")
    let (get_DYNAMIC_READ : t -> GLenum.t) =
      fun (x15065 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15065) "DYNAMIC_READ")
    let (get_FLOAT_32_UNSIGNED_INT_24_8_REV : t -> GLenum.t) =
      fun (x15066 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15066)
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (get_FLOAT_MAT2x3 : t -> GLenum.t) =
      fun (x15067 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15067) "FLOAT_MAT2x3")
    let (get_FLOAT_MAT2x4 : t -> GLenum.t) =
      fun (x15068 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15068) "FLOAT_MAT2x4")
    let (get_FLOAT_MAT3x2 : t -> GLenum.t) =
      fun (x15069 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15069) "FLOAT_MAT3x2")
    let (get_FLOAT_MAT3x4 : t -> GLenum.t) =
      fun (x15070 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15070) "FLOAT_MAT3x4")
    let (get_FLOAT_MAT4x2 : t -> GLenum.t) =
      fun (x15071 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15071) "FLOAT_MAT4x2")
    let (get_FLOAT_MAT4x3 : t -> GLenum.t) =
      fun (x15072 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15072) "FLOAT_MAT4x3")
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT : t -> GLenum.t) =
      fun (x15073 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15073)
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : t -> GLenum.t) =
      fun (x15074 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15074)
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : t -> GLenum.t) =
      fun (x15075 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15075)
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : t -> GLenum.t) =
      fun (x15076 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15076)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : t -> GLenum.t) =
      fun (x15077 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15077)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : t -> GLenum.t) =
      fun (x15078 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15078)
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : t -> GLenum.t) =
      fun (x15079 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15079)
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_RED_SIZE : t -> GLenum.t) =
      fun (x15080 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15080)
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : t -> GLenum.t) =
      fun (x15081 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15081)
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : t -> GLenum.t) =
      fun (x15082 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15082)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (get_FRAMEBUFFER_DEFAULT : t -> GLenum.t) =
      fun (x15083 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15083) "FRAMEBUFFER_DEFAULT")
    let (get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : t -> GLenum.t) =
      fun (x15084 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15084)
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (get_HALF_FLOAT : t -> GLenum.t) =
      fun (x15085 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15085) "HALF_FLOAT")
    let (get_INTERLEAVED_ATTRIBS : t -> GLenum.t) =
      fun (x15086 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15086) "INTERLEAVED_ATTRIBS")
    let (get_INT_2_10_10_10_REV : t -> GLenum.t) =
      fun (x15087 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15087) "INT_2_10_10_10_REV")
    let (get_INT_SAMPLER_2D : t -> GLenum.t) =
      fun (x15088 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15088) "INT_SAMPLER_2D")
    let (get_INT_SAMPLER_2D_ARRAY : t -> GLenum.t) =
      fun (x15089 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15089) "INT_SAMPLER_2D_ARRAY")
    let (get_INT_SAMPLER_3D : t -> GLenum.t) =
      fun (x15090 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15090) "INT_SAMPLER_3D")
    let (get_INT_SAMPLER_CUBE : t -> GLenum.t) =
      fun (x15091 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15091) "INT_SAMPLER_CUBE")
    let (get_INVALID_INDEX : t -> GLenum.t) =
      fun (x15092 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15092) "INVALID_INDEX")
    let (get_MAX : t -> GLenum.t) =
      fun (x15093 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15093) "MAX")
    let (get_MAX_3D_TEXTURE_SIZE : t -> GLenum.t) =
      fun (x15094 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15094) "MAX_3D_TEXTURE_SIZE")
    let (get_MAX_ARRAY_TEXTURE_LAYERS : t -> GLenum.t) =
      fun (x15095 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15095) "MAX_ARRAY_TEXTURE_LAYERS")
    let (get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL : t -> GLenum.t) =
      fun (x15096 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15096)
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS : t -> GLenum.t) =
      fun (x15097 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15097) "MAX_COLOR_ATTACHMENTS")
    let (get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS : t -> GLenum.t) =
      fun (x15098 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15098)
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_COMBINED_UNIFORM_BLOCKS : t -> GLenum.t) =
      fun (x15099 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15099) "MAX_COMBINED_UNIFORM_BLOCKS")
    let (get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : t -> GLenum.t) =
      fun (x15100 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15100)
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (get_MAX_DRAW_BUFFERS : t -> GLenum.t) =
      fun (x15101 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15101) "MAX_DRAW_BUFFERS")
    let (get_MAX_ELEMENTS_INDICES : t -> GLenum.t) =
      fun (x15102 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15102) "MAX_ELEMENTS_INDICES")
    let (get_MAX_ELEMENTS_VERTICES : t -> GLenum.t) =
      fun (x15103 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15103) "MAX_ELEMENTS_VERTICES")
    let (get_MAX_ELEMENT_INDEX : t -> GLenum.t) =
      fun (x15104 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15104) "MAX_ELEMENT_INDEX")
    let (get_MAX_FRAGMENT_INPUT_COMPONENTS : t -> GLenum.t) =
      fun (x15105 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15105)
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (get_MAX_FRAGMENT_UNIFORM_BLOCKS : t -> GLenum.t) =
      fun (x15106 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15106) "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (get_MAX_FRAGMENT_UNIFORM_COMPONENTS : t -> GLenum.t) =
      fun (x15107 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15107)
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_PROGRAM_TEXEL_OFFSET : t -> GLenum.t) =
      fun (x15108 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15108) "MAX_PROGRAM_TEXEL_OFFSET")
    let (get_MAX_SAMPLES : t -> GLenum.t) =
      fun (x15109 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15109) "MAX_SAMPLES")
    let (get_MAX_SERVER_WAIT_TIMEOUT : t -> GLenum.t) =
      fun (x15110 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15110) "MAX_SERVER_WAIT_TIMEOUT")
    let (get_MAX_TEXTURE_LOD_BIAS : t -> GLenum.t) =
      fun (x15111 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15111) "MAX_TEXTURE_LOD_BIAS")
    let (get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS : t -> GLenum.t) =
      fun (x15112 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15112)
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS : t -> GLenum.t) =
      fun (x15113 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15113)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : t -> GLenum.t) =
      fun (x15114 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15114)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (get_MAX_UNIFORM_BLOCK_SIZE : t -> GLenum.t) =
      fun (x15115 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15115) "MAX_UNIFORM_BLOCK_SIZE")
    let (get_MAX_UNIFORM_BUFFER_BINDINGS : t -> GLenum.t) =
      fun (x15116 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15116) "MAX_UNIFORM_BUFFER_BINDINGS")
    let (get_MAX_VARYING_COMPONENTS : t -> GLenum.t) =
      fun (x15117 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15117) "MAX_VARYING_COMPONENTS")
    let (get_MAX_VERTEX_OUTPUT_COMPONENTS : t -> GLenum.t) =
      fun (x15118 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15118) "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (get_MAX_VERTEX_UNIFORM_BLOCKS : t -> GLenum.t) =
      fun (x15119 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15119) "MAX_VERTEX_UNIFORM_BLOCKS")
    let (get_MAX_VERTEX_UNIFORM_COMPONENTS : t -> GLenum.t) =
      fun (x15120 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15120)
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (get_MIN : t -> GLenum.t) =
      fun (x15121 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15121) "MIN")
    let (get_MIN_PROGRAM_TEXEL_OFFSET : t -> GLenum.t) =
      fun (x15122 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15122) "MIN_PROGRAM_TEXEL_OFFSET")
    let (get_OBJECT_TYPE : t -> GLenum.t) =
      fun (x15123 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15123) "OBJECT_TYPE")
    let (get_PACK_ROW_LENGTH : t -> GLenum.t) =
      fun (x15124 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15124) "PACK_ROW_LENGTH")
    let (get_PACK_SKIP_PIXELS : t -> GLenum.t) =
      fun (x15125 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15125) "PACK_SKIP_PIXELS")
    let (get_PACK_SKIP_ROWS : t -> GLenum.t) =
      fun (x15126 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15126) "PACK_SKIP_ROWS")
    let (get_PIXEL_PACK_BUFFER : t -> GLenum.t) =
      fun (x15127 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15127) "PIXEL_PACK_BUFFER")
    let (get_PIXEL_PACK_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15128 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15128) "PIXEL_PACK_BUFFER_BINDING")
    let (get_PIXEL_UNPACK_BUFFER : t -> GLenum.t) =
      fun (x15129 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15129) "PIXEL_UNPACK_BUFFER")
    let (get_PIXEL_UNPACK_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15130 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15130) "PIXEL_UNPACK_BUFFER_BINDING")
    let (get_QUERY_RESULT : t -> GLenum.t) =
      fun (x15131 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15131) "QUERY_RESULT")
    let (get_QUERY_RESULT_AVAILABLE : t -> GLenum.t) =
      fun (x15132 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15132) "QUERY_RESULT_AVAILABLE")
    let (get_R11F_G11F_B10F : t -> GLenum.t) =
      fun (x15133 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15133) "R11F_G11F_B10F")
    let (get_R16F : t -> GLenum.t) =
      fun (x15134 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15134) "R16F")
    let (get_R16I : t -> GLenum.t) =
      fun (x15135 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15135) "R16I")
    let (get_R16UI : t -> GLenum.t) =
      fun (x15136 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15136) "R16UI")
    let (get_R32F : t -> GLenum.t) =
      fun (x15137 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15137) "R32F")
    let (get_R32I : t -> GLenum.t) =
      fun (x15138 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15138) "R32I")
    let (get_R32UI : t -> GLenum.t) =
      fun (x15139 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15139) "R32UI")
    let (get_R8 : t -> GLenum.t) =
      fun (x15140 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15140) "R8")
    let (get_R8I : t -> GLenum.t) =
      fun (x15141 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15141) "R8I")
    let (get_R8UI : t -> GLenum.t) =
      fun (x15142 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15142) "R8UI")
    let (get_R8_SNORM : t -> GLenum.t) =
      fun (x15143 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15143) "R8_SNORM")
    let (get_RASTERIZER_DISCARD : t -> GLenum.t) =
      fun (x15144 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15144) "RASTERIZER_DISCARD")
    let (get_READ_BUFFER : t -> GLenum.t) =
      fun (x15145 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15145) "READ_BUFFER")
    let (get_READ_FRAMEBUFFER : t -> GLenum.t) =
      fun (x15146 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15146) "READ_FRAMEBUFFER")
    let (get_READ_FRAMEBUFFER_BINDING : t -> GLenum.t) =
      fun (x15147 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15147) "READ_FRAMEBUFFER_BINDING")
    let (get_RED : t -> GLenum.t) =
      fun (x15148 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15148) "RED")
    let (get_RED_INTEGER : t -> GLenum.t) =
      fun (x15149 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15149) "RED_INTEGER")
    let (get_RENDERBUFFER_SAMPLES : t -> GLenum.t) =
      fun (x15150 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15150) "RENDERBUFFER_SAMPLES")
    let (get_RG : t -> GLenum.t) =
      fun (x15151 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15151) "RG")
    let (get_RG16F : t -> GLenum.t) =
      fun (x15152 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15152) "RG16F")
    let (get_RG16I : t -> GLenum.t) =
      fun (x15153 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15153) "RG16I")
    let (get_RG16UI : t -> GLenum.t) =
      fun (x15154 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15154) "RG16UI")
    let (get_RG32F : t -> GLenum.t) =
      fun (x15155 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15155) "RG32F")
    let (get_RG32I : t -> GLenum.t) =
      fun (x15156 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15156) "RG32I")
    let (get_RG32UI : t -> GLenum.t) =
      fun (x15157 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15157) "RG32UI")
    let (get_RG8 : t -> GLenum.t) =
      fun (x15158 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15158) "RG8")
    let (get_RG8I : t -> GLenum.t) =
      fun (x15159 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15159) "RG8I")
    let (get_RG8UI : t -> GLenum.t) =
      fun (x15160 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15160) "RG8UI")
    let (get_RG8_SNORM : t -> GLenum.t) =
      fun (x15161 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15161) "RG8_SNORM")
    let (get_RGB10_A2 : t -> GLenum.t) =
      fun (x15162 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15162) "RGB10_A2")
    let (get_RGB10_A2UI : t -> GLenum.t) =
      fun (x15163 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15163) "RGB10_A2UI")
    let (get_RGB16F : t -> GLenum.t) =
      fun (x15164 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15164) "RGB16F")
    let (get_RGB16I : t -> GLenum.t) =
      fun (x15165 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15165) "RGB16I")
    let (get_RGB16UI : t -> GLenum.t) =
      fun (x15166 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15166) "RGB16UI")
    let (get_RGB32F : t -> GLenum.t) =
      fun (x15167 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15167) "RGB32F")
    let (get_RGB32I : t -> GLenum.t) =
      fun (x15168 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15168) "RGB32I")
    let (get_RGB32UI : t -> GLenum.t) =
      fun (x15169 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15169) "RGB32UI")
    let (get_RGB8 : t -> GLenum.t) =
      fun (x15170 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15170) "RGB8")
    let (get_RGB8I : t -> GLenum.t) =
      fun (x15171 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15171) "RGB8I")
    let (get_RGB8UI : t -> GLenum.t) =
      fun (x15172 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15172) "RGB8UI")
    let (get_RGB8_SNORM : t -> GLenum.t) =
      fun (x15173 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15173) "RGB8_SNORM")
    let (get_RGB9_E5 : t -> GLenum.t) =
      fun (x15174 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15174) "RGB9_E5")
    let (get_RGBA16F : t -> GLenum.t) =
      fun (x15175 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15175) "RGBA16F")
    let (get_RGBA16I : t -> GLenum.t) =
      fun (x15176 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15176) "RGBA16I")
    let (get_RGBA16UI : t -> GLenum.t) =
      fun (x15177 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15177) "RGBA16UI")
    let (get_RGBA32F : t -> GLenum.t) =
      fun (x15178 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15178) "RGBA32F")
    let (get_RGBA32I : t -> GLenum.t) =
      fun (x15179 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15179) "RGBA32I")
    let (get_RGBA32UI : t -> GLenum.t) =
      fun (x15180 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15180) "RGBA32UI")
    let (get_RGBA8 : t -> GLenum.t) =
      fun (x15181 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15181) "RGBA8")
    let (get_RGBA8I : t -> GLenum.t) =
      fun (x15182 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15182) "RGBA8I")
    let (get_RGBA8UI : t -> GLenum.t) =
      fun (x15183 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15183) "RGBA8UI")
    let (get_RGBA8_SNORM : t -> GLenum.t) =
      fun (x15184 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15184) "RGBA8_SNORM")
    let (get_RGBA_INTEGER : t -> GLenum.t) =
      fun (x15185 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15185) "RGBA_INTEGER")
    let (get_RGB_INTEGER : t -> GLenum.t) =
      fun (x15186 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15186) "RGB_INTEGER")
    let (get_RG_INTEGER : t -> GLenum.t) =
      fun (x15187 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15187) "RG_INTEGER")
    let (get_SAMPLER_2D_ARRAY : t -> GLenum.t) =
      fun (x15188 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15188) "SAMPLER_2D_ARRAY")
    let (get_SAMPLER_2D_ARRAY_SHADOW : t -> GLenum.t) =
      fun (x15189 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15189) "SAMPLER_2D_ARRAY_SHADOW")
    let (get_SAMPLER_2D_SHADOW : t -> GLenum.t) =
      fun (x15190 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15190) "SAMPLER_2D_SHADOW")
    let (get_SAMPLER_3D : t -> GLenum.t) =
      fun (x15191 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15191) "SAMPLER_3D")
    let (get_SAMPLER_BINDING : t -> GLenum.t) =
      fun (x15192 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15192) "SAMPLER_BINDING")
    let (get_SAMPLER_CUBE_SHADOW : t -> GLenum.t) =
      fun (x15193 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15193) "SAMPLER_CUBE_SHADOW")
    let (get_SEPARATE_ATTRIBS : t -> GLenum.t) =
      fun (x15194 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15194) "SEPARATE_ATTRIBS")
    let (get_SIGNALED : t -> GLenum.t) =
      fun (x15195 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15195) "SIGNALED")
    let (get_SIGNED_NORMALIZED : t -> GLenum.t) =
      fun (x15196 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15196) "SIGNED_NORMALIZED")
    let (get_SRGB : t -> GLenum.t) =
      fun (x15197 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15197) "SRGB")
    let (get_SRGB8 : t -> GLenum.t) =
      fun (x15198 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15198) "SRGB8")
    let (get_SRGB8_ALPHA8 : t -> GLenum.t) =
      fun (x15199 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15199) "SRGB8_ALPHA8")
    let (get_STATIC_COPY : t -> GLenum.t) =
      fun (x15200 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15200) "STATIC_COPY")
    let (get_STATIC_READ : t -> GLenum.t) =
      fun (x15201 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15201) "STATIC_READ")
    let (get_STENCIL : t -> GLenum.t) =
      fun (x15202 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15202) "STENCIL")
    let (get_STREAM_COPY : t -> GLenum.t) =
      fun (x15203 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15203) "STREAM_COPY")
    let (get_STREAM_READ : t -> GLenum.t) =
      fun (x15204 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15204) "STREAM_READ")
    let (get_SYNC_CONDITION : t -> GLenum.t) =
      fun (x15205 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15205) "SYNC_CONDITION")
    let (get_SYNC_FENCE : t -> GLenum.t) =
      fun (x15206 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15206) "SYNC_FENCE")
    let (get_SYNC_FLAGS : t -> GLenum.t) =
      fun (x15207 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15207) "SYNC_FLAGS")
    let (get_SYNC_FLUSH_COMMANDS_BIT : t -> GLenum.t) =
      fun (x15208 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15208) "SYNC_FLUSH_COMMANDS_BIT")
    let (get_SYNC_GPU_COMMANDS_COMPLETE : t -> GLenum.t) =
      fun (x15209 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15209) "SYNC_GPU_COMMANDS_COMPLETE")
    let (get_SYNC_STATUS : t -> GLenum.t) =
      fun (x15210 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15210) "SYNC_STATUS")
    let (get_TEXTURE_2D_ARRAY : t -> GLenum.t) =
      fun (x15211 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15211) "TEXTURE_2D_ARRAY")
    let (get_TEXTURE_3D : t -> GLenum.t) =
      fun (x15212 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15212) "TEXTURE_3D")
    let (get_TEXTURE_BASE_LEVEL : t -> GLenum.t) =
      fun (x15213 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15213) "TEXTURE_BASE_LEVEL")
    let (get_TEXTURE_BINDING_2D_ARRAY : t -> GLenum.t) =
      fun (x15214 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15214) "TEXTURE_BINDING_2D_ARRAY")
    let (get_TEXTURE_BINDING_3D : t -> GLenum.t) =
      fun (x15215 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15215) "TEXTURE_BINDING_3D")
    let (get_TEXTURE_COMPARE_FUNC : t -> GLenum.t) =
      fun (x15216 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15216) "TEXTURE_COMPARE_FUNC")
    let (get_TEXTURE_COMPARE_MODE : t -> GLenum.t) =
      fun (x15217 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15217) "TEXTURE_COMPARE_MODE")
    let (get_TEXTURE_IMMUTABLE_FORMAT : t -> GLenum.t) =
      fun (x15218 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15218) "TEXTURE_IMMUTABLE_FORMAT")
    let (get_TEXTURE_IMMUTABLE_LEVELS : t -> GLenum.t) =
      fun (x15219 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15219) "TEXTURE_IMMUTABLE_LEVELS")
    let (get_TEXTURE_MAX_LEVEL : t -> GLenum.t) =
      fun (x15220 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15220) "TEXTURE_MAX_LEVEL")
    let (get_TEXTURE_MAX_LOD : t -> GLenum.t) =
      fun (x15221 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15221) "TEXTURE_MAX_LOD")
    let (get_TEXTURE_MIN_LOD : t -> GLenum.t) =
      fun (x15222 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15222) "TEXTURE_MIN_LOD")
    let (get_TEXTURE_WRAP_R : t -> GLenum.t) =
      fun (x15223 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15223) "TEXTURE_WRAP_R")
    let (get_TIMEOUT_EXPIRED : t -> GLenum.t) =
      fun (x15224 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15224) "TIMEOUT_EXPIRED")
    let (get_TIMEOUT_IGNORED : t -> GLint64.t) =
      fun (x15225 : t) ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15225) "TIMEOUT_IGNORED")
    let (get_TRANSFORM_FEEDBACK : t -> GLenum.t) =
      fun (x15226 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15226) "TRANSFORM_FEEDBACK")
    let (get_TRANSFORM_FEEDBACK_ACTIVE : t -> GLenum.t) =
      fun (x15227 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15227) "TRANSFORM_FEEDBACK_ACTIVE")
    let (get_TRANSFORM_FEEDBACK_BINDING : t -> GLenum.t) =
      fun (x15228 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15228) "TRANSFORM_FEEDBACK_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER : t -> GLenum.t) =
      fun (x15229 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15229) "TRANSFORM_FEEDBACK_BUFFER")
    let (get_TRANSFORM_FEEDBACK_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15230 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15230)
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER_MODE : t -> GLenum.t) =
      fun (x15231 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15231)
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_SIZE : t -> GLenum.t) =
      fun (x15232 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15232)
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_START : t -> GLenum.t) =
      fun (x15233 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15233)
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (get_TRANSFORM_FEEDBACK_PAUSED : t -> GLenum.t) =
      fun (x15234 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15234) "TRANSFORM_FEEDBACK_PAUSED")
    let (get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : t -> GLenum.t) =
      fun (x15235 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15235)
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (get_TRANSFORM_FEEDBACK_VARYINGS : t -> GLenum.t) =
      fun (x15236 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15236) "TRANSFORM_FEEDBACK_VARYINGS")
    let (get_UNIFORM_ARRAY_STRIDE : t -> GLenum.t) =
      fun (x15237 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15237) "UNIFORM_ARRAY_STRIDE")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORMS : t -> GLenum.t) =
      fun (x15238 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15238)
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : t -> GLenum.t) =
      fun (x15239 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15239)
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (get_UNIFORM_BLOCK_BINDING : t -> GLenum.t) =
      fun (x15240 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15240) "UNIFORM_BLOCK_BINDING")
    let (get_UNIFORM_BLOCK_DATA_SIZE : t -> GLenum.t) =
      fun (x15241 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15241) "UNIFORM_BLOCK_DATA_SIZE")
    let (get_UNIFORM_BLOCK_INDEX : t -> GLenum.t) =
      fun (x15242 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15242) "UNIFORM_BLOCK_INDEX")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER : t -> GLenum.t) =
      fun (x15243 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15243)
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER : t -> GLenum.t) =
      fun (x15244 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15244)
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (get_UNIFORM_BUFFER : t -> GLenum.t) =
      fun (x15245 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15245) "UNIFORM_BUFFER")
    let (get_UNIFORM_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15246 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15246) "UNIFORM_BUFFER_BINDING")
    let (get_UNIFORM_BUFFER_OFFSET_ALIGNMENT : t -> GLenum.t) =
      fun (x15247 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15247)
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (get_UNIFORM_BUFFER_SIZE : t -> GLenum.t) =
      fun (x15248 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15248) "UNIFORM_BUFFER_SIZE")
    let (get_UNIFORM_BUFFER_START : t -> GLenum.t) =
      fun (x15249 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15249) "UNIFORM_BUFFER_START")
    let (get_UNIFORM_IS_ROW_MAJOR : t -> GLenum.t) =
      fun (x15250 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15250) "UNIFORM_IS_ROW_MAJOR")
    let (get_UNIFORM_MATRIX_STRIDE : t -> GLenum.t) =
      fun (x15251 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15251) "UNIFORM_MATRIX_STRIDE")
    let (get_UNIFORM_OFFSET : t -> GLenum.t) =
      fun (x15252 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15252) "UNIFORM_OFFSET")
    let (get_UNIFORM_SIZE : t -> GLenum.t) =
      fun (x15253 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15253) "UNIFORM_SIZE")
    let (get_UNIFORM_TYPE : t -> GLenum.t) =
      fun (x15254 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15254) "UNIFORM_TYPE")
    let (get_UNPACK_IMAGE_HEIGHT : t -> GLenum.t) =
      fun (x15255 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15255) "UNPACK_IMAGE_HEIGHT")
    let (get_UNPACK_ROW_LENGTH : t -> GLenum.t) =
      fun (x15256 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15256) "UNPACK_ROW_LENGTH")
    let (get_UNPACK_SKIP_IMAGES : t -> GLenum.t) =
      fun (x15257 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15257) "UNPACK_SKIP_IMAGES")
    let (get_UNPACK_SKIP_PIXELS : t -> GLenum.t) =
      fun (x15258 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15258) "UNPACK_SKIP_PIXELS")
    let (get_UNPACK_SKIP_ROWS : t -> GLenum.t) =
      fun (x15259 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15259) "UNPACK_SKIP_ROWS")
    let (get_UNSIGNALED : t -> GLenum.t) =
      fun (x15260 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15260) "UNSIGNALED")
    let (get_UNSIGNED_INT_10F_11F_11F_REV : t -> GLenum.t) =
      fun (x15261 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15261) "UNSIGNED_INT_10F_11F_11F_REV")
    let (get_UNSIGNED_INT_24_8 : t -> GLenum.t) =
      fun (x15262 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15262) "UNSIGNED_INT_24_8")
    let (get_UNSIGNED_INT_2_10_10_10_REV : t -> GLenum.t) =
      fun (x15263 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15263) "UNSIGNED_INT_2_10_10_10_REV")
    let (get_UNSIGNED_INT_5_9_9_9_REV : t -> GLenum.t) =
      fun (x15264 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15264) "UNSIGNED_INT_5_9_9_9_REV")
    let (get_UNSIGNED_INT_SAMPLER_2D : t -> GLenum.t) =
      fun (x15265 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15265) "UNSIGNED_INT_SAMPLER_2D")
    let (get_UNSIGNED_INT_SAMPLER_2D_ARRAY : t -> GLenum.t) =
      fun (x15266 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15266)
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (get_UNSIGNED_INT_SAMPLER_3D : t -> GLenum.t) =
      fun (x15267 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15267) "UNSIGNED_INT_SAMPLER_3D")
    let (get_UNSIGNED_INT_SAMPLER_CUBE : t -> GLenum.t) =
      fun (x15268 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15268) "UNSIGNED_INT_SAMPLER_CUBE")
    let (get_UNSIGNED_INT_VEC2 : t -> GLenum.t) =
      fun (x15269 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15269) "UNSIGNED_INT_VEC2")
    let (get_UNSIGNED_INT_VEC3 : t -> GLenum.t) =
      fun (x15270 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15270) "UNSIGNED_INT_VEC3")
    let (get_UNSIGNED_INT_VEC4 : t -> GLenum.t) =
      fun (x15271 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15271) "UNSIGNED_INT_VEC4")
    let (get_UNSIGNED_NORMALIZED : t -> GLenum.t) =
      fun (x15272 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15272) "UNSIGNED_NORMALIZED")
    let (get_VERTEX_ARRAY_BINDING : t -> GLenum.t) =
      fun (x15273 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15273) "VERTEX_ARRAY_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR : t -> GLenum.t) =
      fun (x15274 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15274) "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (get_VERTEX_ATTRIB_ARRAY_INTEGER : t -> GLenum.t) =
      fun (x15275 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15275) "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (get_WAIT_FAILED : t -> GLenum.t) =
      fun (x15276 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15276) "WAIT_FAILED")
    let (get_ACTIVE_ATTRIBUTES : t -> GLenum.t) =
      fun (x15277 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15277) "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : t -> GLenum.t) =
      fun (x15278 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15278) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : t -> GLenum.t) =
      fun (x15279 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15279) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : t -> GLenum.t) =
      fun (x15280 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15280) "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : t -> GLenum.t) =
      fun (x15281 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15281) "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : t -> GLenum.t) =
      fun (x15282 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15282) "ALPHA")
    let (get_ALPHA_BITS : t -> GLenum.t) =
      fun (x15283 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15283) "ALPHA_BITS")
    let (get_ALWAYS : t -> GLenum.t) =
      fun (x15284 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15284) "ALWAYS")
    let (get_ARRAY_BUFFER : t -> GLenum.t) =
      fun (x15285 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15285) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15286 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15286) "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : t -> GLenum.t) =
      fun (x15287 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15287) "ATTACHED_SHADERS")
    let (get_BACK : t -> GLenum.t) =
      fun (x15288 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15288) "BACK")
    let (get_BLEND : t -> GLenum.t) =
      fun (x15289 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15289) "BLEND")
    let (get_BLEND_COLOR : t -> GLenum.t) =
      fun (x15290 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15290) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : t -> GLenum.t) =
      fun (x15291 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15291) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : t -> GLenum.t) =
      fun (x15292 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15292) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : t -> GLenum.t) =
      fun (x15293 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15293) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : t -> GLenum.t) =
      fun (x15294 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15294) "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : t -> GLenum.t) =
      fun (x15295 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15295) "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : t -> GLenum.t) =
      fun (x15296 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15296) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : t -> GLenum.t) =
      fun (x15297 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15297) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : t -> GLenum.t) =
      fun (x15298 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15298) "BLUE_BITS")
    let (get_BOOL : t -> GLenum.t) =
      fun (x15299 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15299) "BOOL")
    let (get_BOOL_VEC2 : t -> GLenum.t) =
      fun (x15300 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15300) "BOOL_VEC2")
    let (get_BOOL_VEC3 : t -> GLenum.t) =
      fun (x15301 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15301) "BOOL_VEC3")
    let (get_BOOL_VEC4 : t -> GLenum.t) =
      fun (x15302 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15302) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : t -> GLenum.t) =
      fun (x15303 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15303) "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : t -> GLenum.t) =
      fun (x15304 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15304) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : t -> GLenum.t) =
      fun (x15305 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15305) "BUFFER_USAGE")
    let (get_BYTE : t -> GLenum.t) =
      fun (x15306 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15306) "BYTE")
    let (get_CCW : t -> GLenum.t) =
      fun (x15307 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15307) "CCW")
    let (get_CLAMP_TO_EDGE : t -> GLenum.t) =
      fun (x15308 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15308) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : t -> GLenum.t) =
      fun (x15309 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15309) "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : t -> GLenum.t) =
      fun (x15310 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15310) "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : t -> GLenum.t) =
      fun (x15311 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15311) "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : t -> GLenum.t) =
      fun (x15312 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15312) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : t -> GLenum.t) =
      fun (x15313 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15313) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : t -> GLenum.t) =
      fun (x15314 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15314) "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : t -> GLenum.t) =
      fun (x15315 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15315) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : t -> GLenum.t) =
      fun (x15316 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15316) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : t -> GLenum.t) =
      fun (x15317 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15317) "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : t -> GLenum.t) =
      fun (x15318 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15318) "CULL_FACE")
    let (get_CULL_FACE_MODE : t -> GLenum.t) =
      fun (x15319 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15319) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : t -> GLenum.t) =
      fun (x15320 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15320) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : t -> GLenum.t) =
      fun (x15321 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15321) "CURRENT_VERTEX_ATTRIB")
    let (get_CW : t -> GLenum.t) =
      fun (x15322 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15322) "CW")
    let (get_DECR : t -> GLenum.t) =
      fun (x15323 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15323) "DECR")
    let (get_DECR_WRAP : t -> GLenum.t) =
      fun (x15324 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15324) "DECR_WRAP")
    let (get_DELETE_STATUS : t -> GLenum.t) =
      fun (x15325 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15325) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : t -> GLenum.t) =
      fun (x15326 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15326) "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : t -> GLenum.t) =
      fun (x15327 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15327) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : t -> GLenum.t) =
      fun (x15328 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15328) "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : t -> GLenum.t) =
      fun (x15329 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15329) "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : t -> GLenum.t) =
      fun (x15330 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15330) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : t -> GLenum.t) =
      fun (x15331 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15331) "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : t -> GLenum.t) =
      fun (x15332 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15332) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : t -> GLenum.t) =
      fun (x15333 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15333) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : t -> GLenum.t) =
      fun (x15334 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15334) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : t -> GLenum.t) =
      fun (x15335 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15335) "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : t -> GLenum.t) =
      fun (x15336 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15336) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : t -> GLenum.t) =
      fun (x15337 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15337) "DEPTH_WRITEMASK")
    let (get_DITHER : t -> GLenum.t) =
      fun (x15338 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15338) "DITHER")
    let (get_DONT_CARE : t -> GLenum.t) =
      fun (x15339 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15339) "DONT_CARE")
    let (get_DST_ALPHA : t -> GLenum.t) =
      fun (x15340 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15340) "DST_ALPHA")
    let (get_DST_COLOR : t -> GLenum.t) =
      fun (x15341 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15341) "DST_COLOR")
    let (get_DYNAMIC_DRAW : t -> GLenum.t) =
      fun (x15342 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15342) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : t -> GLenum.t) =
      fun (x15343 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15343) "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15344 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15344) "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : t -> GLenum.t) =
      fun (x15345 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15345) "EQUAL")
    let (get_FASTEST : t -> GLenum.t) =
      fun (x15346 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15346) "FASTEST")
    let (get_FLOAT : t -> GLenum.t) =
      fun (x15347 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15347) "FLOAT")
    let (get_FLOAT_MAT2 : t -> GLenum.t) =
      fun (x15348 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15348) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : t -> GLenum.t) =
      fun (x15349 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15349) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : t -> GLenum.t) =
      fun (x15350 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15350) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : t -> GLenum.t) =
      fun (x15351 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15351) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : t -> GLenum.t) =
      fun (x15352 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15352) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : t -> GLenum.t) =
      fun (x15353 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15353) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : t -> GLenum.t) =
      fun (x15354 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15354) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : t -> GLenum.t) =
      fun (x15355 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15355) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : t -> GLenum.t) =
      fun (x15356 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15356)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : t -> GLenum.t) =
      fun (x15357 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15357)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : t -> GLenum.t) =
      fun (x15358 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15358)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : t -> GLenum.t) =
      fun (x15359 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15359)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : t -> GLenum.t) =
      fun (x15360 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15360) "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : t -> GLenum.t) =
      fun (x15361 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15361) "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : t -> GLenum.t) =
      fun (x15362 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15362)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : t -> GLenum.t) =
      fun (x15363 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15363)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : t -> GLenum.t) =
      fun (x15364 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15364)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : t -> GLenum.t) =
      fun (x15365 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15365) "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : t -> GLenum.t) =
      fun (x15366 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15366) "FRONT")
    let (get_FRONT_AND_BACK : t -> GLenum.t) =
      fun (x15367 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15367) "FRONT_AND_BACK")
    let (get_FRONT_FACE : t -> GLenum.t) =
      fun (x15368 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15368) "FRONT_FACE")
    let (get_FUNC_ADD : t -> GLenum.t) =
      fun (x15369 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15369) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : t -> GLenum.t) =
      fun (x15370 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15370) "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : t -> GLenum.t) =
      fun (x15371 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15371) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : t -> GLenum.t) =
      fun (x15372 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15372) "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : t -> GLenum.t) =
      fun (x15373 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15373) "GEQUAL")
    let (get_GREATER : t -> GLenum.t) =
      fun (x15374 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15374) "GREATER")
    let (get_GREEN_BITS : t -> GLenum.t) =
      fun (x15375 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15375) "GREEN_BITS")
    let (get_HIGH_FLOAT : t -> GLenum.t) =
      fun (x15376 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15376) "HIGH_FLOAT")
    let (get_HIGH_INT : t -> GLenum.t) =
      fun (x15377 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15377) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : t -> GLenum.t) =
      fun (x15378 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15378)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : t -> GLenum.t) =
      fun (x15379 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15379)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : t -> GLenum.t) =
      fun (x15380 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15380) "INCR")
    let (get_INCR_WRAP : t -> GLenum.t) =
      fun (x15381 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15381) "INCR_WRAP")
    let (get_INT : t -> GLenum.t) =
      fun (x15382 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15382) "INT")
    let (get_INT_VEC2 : t -> GLenum.t) =
      fun (x15383 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15383) "INT_VEC2")
    let (get_INT_VEC3 : t -> GLenum.t) =
      fun (x15384 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15384) "INT_VEC3")
    let (get_INT_VEC4 : t -> GLenum.t) =
      fun (x15385 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15385) "INT_VEC4")
    let (get_INVALID_ENUM : t -> GLenum.t) =
      fun (x15386 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15386) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : t -> GLenum.t) =
      fun (x15387 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15387)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : t -> GLenum.t) =
      fun (x15388 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15388) "INVALID_OPERATION")
    let (get_INVALID_VALUE : t -> GLenum.t) =
      fun (x15389 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15389) "INVALID_VALUE")
    let (get_INVERT : t -> GLenum.t) =
      fun (x15390 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15390) "INVERT")
    let (get_KEEP : t -> GLenum.t) =
      fun (x15391 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15391) "KEEP")
    let (get_LEQUAL : t -> GLenum.t) =
      fun (x15392 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15392) "LEQUAL")
    let (get_LESS : t -> GLenum.t) =
      fun (x15393 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15393) "LESS")
    let (get_LINEAR : t -> GLenum.t) =
      fun (x15394 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15394) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : t -> GLenum.t) =
      fun (x15395 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15395) "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : t -> GLenum.t) =
      fun (x15396 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15396) "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : t -> GLenum.t) =
      fun (x15397 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15397) "LINES")
    let (get_LINE_LOOP : t -> GLenum.t) =
      fun (x15398 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15398) "LINE_LOOP")
    let (get_LINE_STRIP : t -> GLenum.t) =
      fun (x15399 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15399) "LINE_STRIP")
    let (get_LINE_WIDTH : t -> GLenum.t) =
      fun (x15400 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15400) "LINE_WIDTH")
    let (get_LINK_STATUS : t -> GLenum.t) =
      fun (x15401 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15401) "LINK_STATUS")
    let (get_LOW_FLOAT : t -> GLenum.t) =
      fun (x15402 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15402) "LOW_FLOAT")
    let (get_LOW_INT : t -> GLenum.t) =
      fun (x15403 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15403) "LOW_INT")
    let (get_LUMINANCE : t -> GLenum.t) =
      fun (x15404 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15404) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : t -> GLenum.t) =
      fun (x15405 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15405) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x15406 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15406)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : t -> GLenum.t) =
      fun (x15407 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15407) "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : t -> GLenum.t) =
      fun (x15408 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15408) "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : t -> GLenum.t) =
      fun (x15409 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15409) "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x15410 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15410) "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : t -> GLenum.t) =
      fun (x15411 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15411) "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : t -> GLenum.t) =
      fun (x15412 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15412) "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : t -> GLenum.t) =
      fun (x15413 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15413) "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x15414 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15414)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : t -> GLenum.t) =
      fun (x15415 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15415) "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : t -> GLenum.t) =
      fun (x15416 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15416) "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : t -> GLenum.t) =
      fun (x15417 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15417) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : t -> GLenum.t) =
      fun (x15418 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15418) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : t -> GLenum.t) =
      fun (x15419 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15419) "MIRRORED_REPEAT")
    let (get_NEAREST : t -> GLenum.t) =
      fun (x15420 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15420) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : t -> GLenum.t) =
      fun (x15421 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15421) "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : t -> GLenum.t) =
      fun (x15422 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15422) "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : t -> GLenum.t) =
      fun (x15423 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15423) "NEVER")
    let (get_NICEST : t -> GLenum.t) =
      fun (x15424 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15424) "NICEST")
    let (get_NONE : t -> GLenum.t) =
      fun (x15425 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15425) "NONE")
    let (get_NOTEQUAL : t -> GLenum.t) =
      fun (x15426 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15426) "NOTEQUAL")
    let (get_NO_ERROR : t -> GLenum.t) =
      fun (x15427 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15427) "NO_ERROR")
    let (get_ONE : t -> GLenum.t) =
      fun (x15428 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15428) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : t -> GLenum.t) =
      fun (x15429 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15429) "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : t -> GLenum.t) =
      fun (x15430 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15430) "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : t -> GLenum.t) =
      fun (x15431 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15431) "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : t -> GLenum.t) =
      fun (x15432 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15432) "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : t -> GLenum.t) =
      fun (x15433 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15433) "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : t -> GLenum.t) =
      fun (x15434 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15434) "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : t -> GLenum.t) =
      fun (x15435 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15435) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : t -> GLenum.t) =
      fun (x15436 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15436) "PACK_ALIGNMENT")
    let (get_POINTS : t -> GLenum.t) =
      fun (x15437 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15437) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : t -> GLenum.t) =
      fun (x15438 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15438) "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : t -> GLenum.t) =
      fun (x15439 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15439) "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : t -> GLenum.t) =
      fun (x15440 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15440) "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : t -> GLenum.t) =
      fun (x15441 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15441) "RED_BITS")
    let (get_RENDERBUFFER : t -> GLenum.t) =
      fun (x15442 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15442) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : t -> GLenum.t) =
      fun (x15443 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15443) "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : t -> GLenum.t) =
      fun (x15444 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15444) "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : t -> GLenum.t) =
      fun (x15445 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15445) "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : t -> GLenum.t) =
      fun (x15446 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15446) "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : t -> GLenum.t) =
      fun (x15447 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15447) "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : t -> GLenum.t) =
      fun (x15448 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15448) "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : t -> GLenum.t) =
      fun (x15449 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15449) "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : t -> GLenum.t) =
      fun (x15450 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15450) "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : t -> GLenum.t) =
      fun (x15451 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15451) "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : t -> GLenum.t) =
      fun (x15452 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15452) "RENDERBUFFER_WIDTH")
    let (get_RENDERER : t -> GLenum.t) =
      fun (x15453 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15453) "RENDERER")
    let (get_REPEAT : t -> GLenum.t) =
      fun (x15454 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15454) "REPEAT")
    let (get_REPLACE : t -> GLenum.t) =
      fun (x15455 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15455) "REPLACE")
    let (get_RGB : t -> GLenum.t) =
      fun (x15456 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15456) "RGB")
    let (get_RGB565 : t -> GLenum.t) =
      fun (x15457 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15457) "RGB565")
    let (get_RGB5_A1 : t -> GLenum.t) =
      fun (x15458 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15458) "RGB5_A1")
    let (get_RGBA : t -> GLenum.t) =
      fun (x15459 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15459) "RGBA")
    let (get_RGBA4 : t -> GLenum.t) =
      fun (x15460 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15460) "RGBA4")
    let (get_SAMPLER_2D : t -> GLenum.t) =
      fun (x15461 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15461) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : t -> GLenum.t) =
      fun (x15462 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15462) "SAMPLER_CUBE")
    let (get_SAMPLES : t -> GLenum.t) =
      fun (x15463 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15463) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : t -> GLenum.t) =
      fun (x15464 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15464) "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : t -> GLenum.t) =
      fun (x15465 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15465) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : t -> GLenum.t) =
      fun (x15466 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15466) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : t -> GLenum.t) =
      fun (x15467 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15467) "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : t -> GLenum.t) =
      fun (x15468 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15468) "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : t -> GLenum.t) =
      fun (x15469 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15469) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : t -> GLenum.t) =
      fun (x15470 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15470) "SCISSOR_TEST")
    let (get_SHADER_TYPE : t -> GLenum.t) =
      fun (x15471 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15471) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : t -> GLenum.t) =
      fun (x15472 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15472) "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : t -> GLenum.t) =
      fun (x15473 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15473) "SHORT")
    let (get_SRC_ALPHA : t -> GLenum.t) =
      fun (x15474 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15474) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : t -> GLenum.t) =
      fun (x15475 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15475) "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : t -> GLenum.t) =
      fun (x15476 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15476) "SRC_COLOR")
    let (get_STATIC_DRAW : t -> GLenum.t) =
      fun (x15477 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15477) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : t -> GLenum.t) =
      fun (x15478 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15478) "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : t -> GLenum.t) =
      fun (x15479 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15479) "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : t -> GLenum.t) =
      fun (x15480 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15480) "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : t -> GLenum.t) =
      fun (x15481 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15481) "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : t -> GLenum.t) =
      fun (x15482 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15482) "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : t -> GLenum.t) =
      fun (x15483 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15483) "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : t -> GLenum.t) =
      fun (x15484 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15484) "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : t -> GLenum.t) =
      fun (x15485 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15485) "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : t -> GLenum.t) =
      fun (x15486 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15486) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : t -> GLenum.t) =
      fun (x15487 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15487) "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : t -> GLenum.t) =
      fun (x15488 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15488) "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : t -> GLenum.t) =
      fun (x15489 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15489) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : t -> GLenum.t) =
      fun (x15490 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15490) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : t -> GLenum.t) =
      fun (x15491 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15491) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : t -> GLenum.t) =
      fun (x15492 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15492) "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : t -> GLenum.t) =
      fun (x15493 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15493) "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : t -> GLenum.t) =
      fun (x15494 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15494) "STENCIL_REF")
    let (get_STENCIL_TEST : t -> GLenum.t) =
      fun (x15495 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15495) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : t -> GLenum.t) =
      fun (x15496 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15496) "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : t -> GLenum.t) =
      fun (x15497 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15497) "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : t -> GLenum.t) =
      fun (x15498 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15498) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : t -> GLenum.t) =
      fun (x15499 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15499) "SUBPIXEL_BITS")
    let (get_TEXTURE : t -> GLenum.t) =
      fun (x15500 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15500) "TEXTURE")
    let (get_TEXTURE0 : t -> GLenum.t) =
      fun (x15501 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15501) "TEXTURE0")
    let (get_TEXTURE1 : t -> GLenum.t) =
      fun (x15502 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15502) "TEXTURE1")
    let (get_TEXTURE10 : t -> GLenum.t) =
      fun (x15503 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15503) "TEXTURE10")
    let (get_TEXTURE11 : t -> GLenum.t) =
      fun (x15504 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15504) "TEXTURE11")
    let (get_TEXTURE12 : t -> GLenum.t) =
      fun (x15505 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15505) "TEXTURE12")
    let (get_TEXTURE13 : t -> GLenum.t) =
      fun (x15506 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15506) "TEXTURE13")
    let (get_TEXTURE14 : t -> GLenum.t) =
      fun (x15507 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15507) "TEXTURE14")
    let (get_TEXTURE15 : t -> GLenum.t) =
      fun (x15508 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15508) "TEXTURE15")
    let (get_TEXTURE16 : t -> GLenum.t) =
      fun (x15509 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15509) "TEXTURE16")
    let (get_TEXTURE17 : t -> GLenum.t) =
      fun (x15510 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15510) "TEXTURE17")
    let (get_TEXTURE18 : t -> GLenum.t) =
      fun (x15511 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15511) "TEXTURE18")
    let (get_TEXTURE19 : t -> GLenum.t) =
      fun (x15512 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15512) "TEXTURE19")
    let (get_TEXTURE2 : t -> GLenum.t) =
      fun (x15513 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15513) "TEXTURE2")
    let (get_TEXTURE20 : t -> GLenum.t) =
      fun (x15514 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15514) "TEXTURE20")
    let (get_TEXTURE21 : t -> GLenum.t) =
      fun (x15515 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15515) "TEXTURE21")
    let (get_TEXTURE22 : t -> GLenum.t) =
      fun (x15516 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15516) "TEXTURE22")
    let (get_TEXTURE23 : t -> GLenum.t) =
      fun (x15517 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15517) "TEXTURE23")
    let (get_TEXTURE24 : t -> GLenum.t) =
      fun (x15518 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15518) "TEXTURE24")
    let (get_TEXTURE25 : t -> GLenum.t) =
      fun (x15519 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15519) "TEXTURE25")
    let (get_TEXTURE26 : t -> GLenum.t) =
      fun (x15520 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15520) "TEXTURE26")
    let (get_TEXTURE27 : t -> GLenum.t) =
      fun (x15521 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15521) "TEXTURE27")
    let (get_TEXTURE28 : t -> GLenum.t) =
      fun (x15522 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15522) "TEXTURE28")
    let (get_TEXTURE29 : t -> GLenum.t) =
      fun (x15523 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15523) "TEXTURE29")
    let (get_TEXTURE3 : t -> GLenum.t) =
      fun (x15524 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15524) "TEXTURE3")
    let (get_TEXTURE30 : t -> GLenum.t) =
      fun (x15525 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15525) "TEXTURE30")
    let (get_TEXTURE31 : t -> GLenum.t) =
      fun (x15526 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15526) "TEXTURE31")
    let (get_TEXTURE4 : t -> GLenum.t) =
      fun (x15527 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15527) "TEXTURE4")
    let (get_TEXTURE5 : t -> GLenum.t) =
      fun (x15528 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15528) "TEXTURE5")
    let (get_TEXTURE6 : t -> GLenum.t) =
      fun (x15529 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15529) "TEXTURE6")
    let (get_TEXTURE7 : t -> GLenum.t) =
      fun (x15530 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15530) "TEXTURE7")
    let (get_TEXTURE8 : t -> GLenum.t) =
      fun (x15531 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15531) "TEXTURE8")
    let (get_TEXTURE9 : t -> GLenum.t) =
      fun (x15532 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15532) "TEXTURE9")
    let (get_TEXTURE_2D : t -> GLenum.t) =
      fun (x15533 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15533) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : t -> GLenum.t) =
      fun (x15534 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15534) "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : t -> GLenum.t) =
      fun (x15535 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15535) "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : t -> GLenum.t) =
      fun (x15536 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15536) "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : t -> GLenum.t) =
      fun (x15537 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15537) "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : t -> GLenum.t) =
      fun (x15538 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15538) "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : t -> GLenum.t) =
      fun (x15539 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15539) "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : t -> GLenum.t) =
      fun (x15540 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15540) "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : t -> GLenum.t) =
      fun (x15541 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15541) "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : t -> GLenum.t) =
      fun (x15542 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15542) "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : t -> GLenum.t) =
      fun (x15543 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15543) "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : t -> GLenum.t) =
      fun (x15544 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15544) "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : t -> GLenum.t) =
      fun (x15545 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15545) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : t -> GLenum.t) =
      fun (x15546 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15546) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : t -> GLenum.t) =
      fun (x15547 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15547) "TRIANGLES")
    let (get_TRIANGLE_FAN : t -> GLenum.t) =
      fun (x15548 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15548) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : t -> GLenum.t) =
      fun (x15549 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15549) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : t -> GLenum.t) =
      fun (x15550 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15550) "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : t -> GLenum.t) =
      fun (x15551 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15551)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : t -> GLenum.t) =
      fun (x15552 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15552) "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : t -> GLenum.t) =
      fun (x15553 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15553)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : t -> GLenum.t) =
      fun (x15554 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15554) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : t -> GLenum.t) =
      fun (x15555 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15555) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : t -> GLenum.t) =
      fun (x15556 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15556) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : t -> GLenum.t) =
      fun (x15557 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15557) "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : t -> GLenum.t) =
      fun (x15558 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15558) "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : t -> GLenum.t) =
      fun (x15559 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15559) "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : t -> GLenum.t) =
      fun (x15560 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15560) "VALIDATE_STATUS")
    let (get_VENDOR : t -> GLenum.t) =
      fun (x15561 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15561) "VENDOR")
    let (get_VERSION : t -> GLenum.t) =
      fun (x15562 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15562) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15563 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15563)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : t -> GLenum.t) =
      fun (x15564 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15564) "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : t -> GLenum.t) =
      fun (x15565 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15565)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : t -> GLenum.t) =
      fun (x15566 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15566) "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : t -> GLenum.t) =
      fun (x15567 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15567) "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : t -> GLenum.t) =
      fun (x15568 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15568) "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : t -> GLenum.t) =
      fun (x15569 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15569) "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : t -> GLenum.t) =
      fun (x15570 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15570) "VERTEX_SHADER")
    let (get_VIEWPORT : t -> GLenum.t) =
      fun (x15571 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15571) "VIEWPORT")
    let (get_ZERO : t -> GLenum.t) =
      fun (x15572 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15572) "ZERO")
  end
 and
  WebGL2RenderingContext:sig
                           type t =
                             [ `WebGL2RenderingContext 
                             | `WebGL2RenderingContextBase 
                             | `WebGL2RenderingContextOverloads 
                             | `WebGLRenderingContextBase ] intf
                           type t_0 = t
                           [@@@js.stop ]
                           type tags =
                             [ `WebGL2RenderingContext 
                             | `WebGL2RenderingContextBase 
                             | `WebGL2RenderingContextOverloads 
                             | `WebGLRenderingContextBase ]
                           type tags_0 = tags
                           [@@@js.start ]
                           [@@@js.implem
                             type tags =
                               [ `WebGL2RenderingContext 
                               | `WebGL2RenderingContextBase 
                               | `WebGL2RenderingContextOverloads 
                               | `WebGLRenderingContextBase ]
                             type tags_0 = tags]
                           type 'tags this =
                             'tags intf constraint 'tags =
                                         [> `WebGL2RenderingContext ]
                           val t_to_js : t -> Ojs.t
                           val t_of_js : Ojs.t -> t
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val cast_from : 'tags this -> t
                           val prototype : unit -> t
                           val create : unit -> t
                           val active_uniform_blocks : unit -> GLenum.t
                           val already_signaled : unit -> GLenum.t
                           val any_samples_passed : unit -> GLenum.t
                           val any_samples_passed_conservative :
                             unit -> GLenum.t
                           val color : unit -> GLenum.t
                           val color_attachment1 : unit -> GLenum.t
                           val color_attachment10 : unit -> GLenum.t
                           val color_attachment11 : unit -> GLenum.t
                           val color_attachment12 : unit -> GLenum.t
                           val color_attachment13 : unit -> GLenum.t
                           val color_attachment14 : unit -> GLenum.t
                           val color_attachment15 : unit -> GLenum.t
                           val color_attachment2 : unit -> GLenum.t
                           val color_attachment3 : unit -> GLenum.t
                           val color_attachment4 : unit -> GLenum.t
                           val color_attachment5 : unit -> GLenum.t
                           val color_attachment6 : unit -> GLenum.t
                           val color_attachment7 : unit -> GLenum.t
                           val color_attachment8 : unit -> GLenum.t
                           val color_attachment9 : unit -> GLenum.t
                           val compare_ref_to_texture : unit -> GLenum.t
                           val condition_satisfied : unit -> GLenum.t
                           val copy_read_buffer : unit -> GLenum.t
                           val copy_read_buffer_binding : unit -> GLenum.t
                           val copy_write_buffer : unit -> GLenum.t
                           val copy_write_buffer_binding : unit -> GLenum.t
                           val current_query : unit -> GLenum.t
                           val depth : unit -> GLenum.t
                           val depth24_stencil8 : unit -> GLenum.t
                           val depth32f_stencil8 : unit -> GLenum.t
                           val depth_component24 : unit -> GLenum.t
                           val depth_component32f : unit -> GLenum.t
                           val draw_buffer0 : unit -> GLenum.t
                           val draw_buffer1 : unit -> GLenum.t
                           val draw_buffer10 : unit -> GLenum.t
                           val draw_buffer11 : unit -> GLenum.t
                           val draw_buffer12 : unit -> GLenum.t
                           val draw_buffer13 : unit -> GLenum.t
                           val draw_buffer14 : unit -> GLenum.t
                           val draw_buffer15 : unit -> GLenum.t
                           val draw_buffer2 : unit -> GLenum.t
                           val draw_buffer3 : unit -> GLenum.t
                           val draw_buffer4 : unit -> GLenum.t
                           val draw_buffer5 : unit -> GLenum.t
                           val draw_buffer6 : unit -> GLenum.t
                           val draw_buffer7 : unit -> GLenum.t
                           val draw_buffer8 : unit -> GLenum.t
                           val draw_buffer9 : unit -> GLenum.t
                           val draw_framebuffer : unit -> GLenum.t
                           val draw_framebuffer_binding : unit -> GLenum.t
                           val dynamic_copy : unit -> GLenum.t
                           val dynamic_read : unit -> GLenum.t
                           val float_32_unsigned_int_24_8_rev :
                             unit -> GLenum.t
                           val fLOAT_MAT2x3 : unit -> GLenum.t
                           val fLOAT_MAT2x4 : unit -> GLenum.t
                           val fLOAT_MAT3x2 : unit -> GLenum.t
                           val fLOAT_MAT3x4 : unit -> GLenum.t
                           val fLOAT_MAT4x2 : unit -> GLenum.t
                           val fLOAT_MAT4x3 : unit -> GLenum.t
                           val fragment_shader_derivative_hint :
                             unit -> GLenum.t
                           val framebuffer_attachment_alpha_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_blue_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_color_encoding :
                             unit -> GLenum.t
                           val framebuffer_attachment_component_type :
                             unit -> GLenum.t
                           val framebuffer_attachment_depth_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_green_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_red_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_stencil_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_texture_layer :
                             unit -> GLenum.t
                           val framebuffer_default : unit -> GLenum.t
                           val framebuffer_incomplete_multisample :
                             unit -> GLenum.t
                           val half_float : unit -> GLenum.t
                           val interleaved_attribs : unit -> GLenum.t
                           val int_2_10_10_10_rev : unit -> GLenum.t
                           val int_sampler_2d : unit -> GLenum.t
                           val int_sampler_2d_array : unit -> GLenum.t
                           val int_sampler_3d : unit -> GLenum.t
                           val int_sampler_cube : unit -> GLenum.t
                           val invalid_index : unit -> GLenum.t
                           val max : unit -> GLenum.t
                           val max_3d_texture_size : unit -> GLenum.t
                           val max_array_texture_layers : unit -> GLenum.t
                           val max_client_wait_timeout_webgl :
                             unit -> GLenum.t
                           val max_color_attachments : unit -> GLenum.t
                           val max_combined_fragment_uniform_components :
                             unit -> GLenum.t
                           val max_combined_uniform_blocks : unit -> GLenum.t
                           val max_combined_vertex_uniform_components :
                             unit -> GLenum.t
                           val max_draw_buffers : unit -> GLenum.t
                           val max_elements_indices : unit -> GLenum.t
                           val max_elements_vertices : unit -> GLenum.t
                           val max_element_index : unit -> GLenum.t
                           val max_fragment_input_components :
                             unit -> GLenum.t
                           val max_fragment_uniform_blocks : unit -> GLenum.t
                           val max_fragment_uniform_components :
                             unit -> GLenum.t
                           val max_program_texel_offset : unit -> GLenum.t
                           val max_samples : unit -> GLenum.t
                           val max_server_wait_timeout : unit -> GLenum.t
                           val max_texture_lod_bias : unit -> GLenum.t
                           val max_transform_feedback_interleaved_components
                             : unit -> GLenum.t
                           val max_transform_feedback_separate_attribs :
                             unit -> GLenum.t
                           val max_transform_feedback_separate_components :
                             unit -> GLenum.t
                           val max_uniform_block_size : unit -> GLenum.t
                           val max_uniform_buffer_bindings : unit -> GLenum.t
                           val max_varying_components : unit -> GLenum.t
                           val max_vertex_output_components :
                             unit -> GLenum.t
                           val max_vertex_uniform_blocks : unit -> GLenum.t
                           val max_vertex_uniform_components :
                             unit -> GLenum.t
                           val min : unit -> GLenum.t
                           val min_program_texel_offset : unit -> GLenum.t
                           val object_type : unit -> GLenum.t
                           val pack_row_length : unit -> GLenum.t
                           val pack_skip_pixels : unit -> GLenum.t
                           val pack_skip_rows : unit -> GLenum.t
                           val pixel_pack_buffer : unit -> GLenum.t
                           val pixel_pack_buffer_binding : unit -> GLenum.t
                           val pixel_unpack_buffer : unit -> GLenum.t
                           val pixel_unpack_buffer_binding : unit -> GLenum.t
                           val query_result : unit -> GLenum.t
                           val query_result_available : unit -> GLenum.t
                           val r11f_g11f_b10f : unit -> GLenum.t
                           val r16f : unit -> GLenum.t
                           val r16i : unit -> GLenum.t
                           val r16ui : unit -> GLenum.t
                           val r32f : unit -> GLenum.t
                           val r32i : unit -> GLenum.t
                           val r32ui : unit -> GLenum.t
                           val r8 : unit -> GLenum.t
                           val r8i : unit -> GLenum.t
                           val r8ui : unit -> GLenum.t
                           val r8_snorm : unit -> GLenum.t
                           val rasterizer_discard : unit -> GLenum.t
                           val read_buffer : unit -> GLenum.t
                           val read_framebuffer : unit -> GLenum.t
                           val read_framebuffer_binding : unit -> GLenum.t
                           val red : unit -> GLenum.t
                           val red_integer : unit -> GLenum.t
                           val renderbuffer_samples : unit -> GLenum.t
                           val rg : unit -> GLenum.t
                           val rg16f : unit -> GLenum.t
                           val rg16i : unit -> GLenum.t
                           val rg16ui : unit -> GLenum.t
                           val rg32f : unit -> GLenum.t
                           val rg32i : unit -> GLenum.t
                           val rg32ui : unit -> GLenum.t
                           val rg8 : unit -> GLenum.t
                           val rg8i : unit -> GLenum.t
                           val rg8ui : unit -> GLenum.t
                           val rg8_snorm : unit -> GLenum.t
                           val rgb10_a2 : unit -> GLenum.t
                           val rgb10_a2ui : unit -> GLenum.t
                           val rgb16f : unit -> GLenum.t
                           val rgb16i : unit -> GLenum.t
                           val rgb16ui : unit -> GLenum.t
                           val rgb32f : unit -> GLenum.t
                           val rgb32i : unit -> GLenum.t
                           val rgb32ui : unit -> GLenum.t
                           val rgb8 : unit -> GLenum.t
                           val rgb8i : unit -> GLenum.t
                           val rgb8ui : unit -> GLenum.t
                           val rgb8_snorm : unit -> GLenum.t
                           val rgb9_e5 : unit -> GLenum.t
                           val rgba16f : unit -> GLenum.t
                           val rgba16i : unit -> GLenum.t
                           val rgba16ui : unit -> GLenum.t
                           val rgba32f : unit -> GLenum.t
                           val rgba32i : unit -> GLenum.t
                           val rgba32ui : unit -> GLenum.t
                           val rgba8 : unit -> GLenum.t
                           val rgba8i : unit -> GLenum.t
                           val rgba8ui : unit -> GLenum.t
                           val rgba8_snorm : unit -> GLenum.t
                           val rgba_integer : unit -> GLenum.t
                           val rgb_integer : unit -> GLenum.t
                           val rg_integer : unit -> GLenum.t
                           val sampler_2d_array : unit -> GLenum.t
                           val sampler_2d_array_shadow : unit -> GLenum.t
                           val sampler_2d_shadow : unit -> GLenum.t
                           val sampler_3d : unit -> GLenum.t
                           val sampler_binding : unit -> GLenum.t
                           val sampler_cube_shadow : unit -> GLenum.t
                           val separate_attribs : unit -> GLenum.t
                           val signaled : unit -> GLenum.t
                           val signed_normalized : unit -> GLenum.t
                           val srgb : unit -> GLenum.t
                           val srgb8 : unit -> GLenum.t
                           val srgb8_alpha8 : unit -> GLenum.t
                           val static_copy : unit -> GLenum.t
                           val static_read : unit -> GLenum.t
                           val stencil : unit -> GLenum.t
                           val stream_copy : unit -> GLenum.t
                           val stream_read : unit -> GLenum.t
                           val sync_condition : unit -> GLenum.t
                           val sync_fence : unit -> GLenum.t
                           val sync_flags : unit -> GLenum.t
                           val sync_flush_commands_bit : unit -> GLenum.t
                           val sync_gpu_commands_complete : unit -> GLenum.t
                           val sync_status : unit -> GLenum.t
                           val texture_2d_array : unit -> GLenum.t
                           val texture_3d : unit -> GLenum.t
                           val texture_base_level : unit -> GLenum.t
                           val texture_binding_2d_array : unit -> GLenum.t
                           val texture_binding_3d : unit -> GLenum.t
                           val texture_compare_func : unit -> GLenum.t
                           val texture_compare_mode : unit -> GLenum.t
                           val texture_immutable_format : unit -> GLenum.t
                           val texture_immutable_levels : unit -> GLenum.t
                           val texture_max_level : unit -> GLenum.t
                           val texture_max_lod : unit -> GLenum.t
                           val texture_min_lod : unit -> GLenum.t
                           val texture_wrap_r : unit -> GLenum.t
                           val timeout_expired : unit -> GLenum.t
                           val timeout_ignored : unit -> GLint64.t
                           val transform_feedback : unit -> GLenum.t
                           val transform_feedback_active : unit -> GLenum.t
                           val transform_feedback_binding : unit -> GLenum.t
                           val transform_feedback_buffer : unit -> GLenum.t
                           val transform_feedback_buffer_binding :
                             unit -> GLenum.t
                           val transform_feedback_buffer_mode :
                             unit -> GLenum.t
                           val transform_feedback_buffer_size :
                             unit -> GLenum.t
                           val transform_feedback_buffer_start :
                             unit -> GLenum.t
                           val transform_feedback_paused : unit -> GLenum.t
                           val transform_feedback_primitives_written :
                             unit -> GLenum.t
                           val transform_feedback_varyings : unit -> GLenum.t
                           val uniform_array_stride : unit -> GLenum.t
                           val uniform_block_active_uniforms :
                             unit -> GLenum.t
                           val uniform_block_active_uniform_indices :
                             unit -> GLenum.t
                           val uniform_block_binding : unit -> GLenum.t
                           val uniform_block_data_size : unit -> GLenum.t
                           val uniform_block_index : unit -> GLenum.t
                           val uniform_block_referenced_by_fragment_shader :
                             unit -> GLenum.t
                           val uniform_block_referenced_by_vertex_shader :
                             unit -> GLenum.t
                           val uniform_buffer : unit -> GLenum.t
                           val uniform_buffer_binding : unit -> GLenum.t
                           val uniform_buffer_offset_alignment :
                             unit -> GLenum.t
                           val uniform_buffer_size : unit -> GLenum.t
                           val uniform_buffer_start : unit -> GLenum.t
                           val uniform_is_row_major : unit -> GLenum.t
                           val uniform_matrix_stride : unit -> GLenum.t
                           val uniform_offset : unit -> GLenum.t
                           val uniform_size : unit -> GLenum.t
                           val uniform_type : unit -> GLenum.t
                           val unpack_image_height : unit -> GLenum.t
                           val unpack_row_length : unit -> GLenum.t
                           val unpack_skip_images : unit -> GLenum.t
                           val unpack_skip_pixels : unit -> GLenum.t
                           val unpack_skip_rows : unit -> GLenum.t
                           val unsignaled : unit -> GLenum.t
                           val unsigned_int_10f_11f_11f_rev :
                             unit -> GLenum.t
                           val unsigned_int_24_8 : unit -> GLenum.t
                           val unsigned_int_2_10_10_10_rev : unit -> GLenum.t
                           val unsigned_int_5_9_9_9_rev : unit -> GLenum.t
                           val unsigned_int_sampler_2d : unit -> GLenum.t
                           val unsigned_int_sampler_2d_array :
                             unit -> GLenum.t
                           val unsigned_int_sampler_3d : unit -> GLenum.t
                           val unsigned_int_sampler_cube : unit -> GLenum.t
                           val unsigned_int_vec2 : unit -> GLenum.t
                           val unsigned_int_vec3 : unit -> GLenum.t
                           val unsigned_int_vec4 : unit -> GLenum.t
                           val unsigned_normalized : unit -> GLenum.t
                           val vertex_array_binding : unit -> GLenum.t
                           val vertex_attrib_array_divisor : unit -> GLenum.t
                           val vertex_attrib_array_integer : unit -> GLenum.t
                           val wait_failed : unit -> GLenum.t
                           val active_attributes : unit -> GLenum.t
                           val active_texture : unit -> GLenum.t
                           val active_uniforms : unit -> GLenum.t
                           val aliased_line_width_range : unit -> GLenum.t
                           val aliased_point_size_range : unit -> GLenum.t
                           val alpha : unit -> GLenum.t
                           val alpha_bits : unit -> GLenum.t
                           val always : unit -> GLenum.t
                           val array_buffer : unit -> GLenum.t
                           val array_buffer_binding : unit -> GLenum.t
                           val attached_shaders : unit -> GLenum.t
                           val back : unit -> GLenum.t
                           val blend : unit -> GLenum.t
                           val blend_color : unit -> GLenum.t
                           val blend_dst_alpha : unit -> GLenum.t
                           val blend_dst_rgb : unit -> GLenum.t
                           val blend_equation : unit -> GLenum.t
                           val blend_equation_alpha : unit -> GLenum.t
                           val blend_equation_rgb : unit -> GLenum.t
                           val blend_src_alpha : unit -> GLenum.t
                           val blend_src_rgb : unit -> GLenum.t
                           val blue_bits : unit -> GLenum.t
                           val bool : unit -> GLenum.t
                           val bool_vec2 : unit -> GLenum.t
                           val bool_vec3 : unit -> GLenum.t
                           val bool_vec4 : unit -> GLenum.t
                           val browser_default_webgl : unit -> GLenum.t
                           val buffer_size : unit -> GLenum.t
                           val buffer_usage : unit -> GLenum.t
                           val byte : unit -> GLenum.t
                           val ccw : unit -> GLenum.t
                           val clamp_to_edge : unit -> GLenum.t
                           val color_attachment0 : unit -> GLenum.t
                           val color_buffer_bit : unit -> GLenum.t
                           val color_clear_value : unit -> GLenum.t
                           val color_writemask : unit -> GLenum.t
                           val compile_status : unit -> GLenum.t
                           val compressed_texture_formats : unit -> GLenum.t
                           val constant_alpha : unit -> GLenum.t
                           val constant_color : unit -> GLenum.t
                           val context_lost_webgl : unit -> GLenum.t
                           val cull_face : unit -> GLenum.t
                           val cull_face_mode : unit -> GLenum.t
                           val current_program : unit -> GLenum.t
                           val current_vertex_attrib : unit -> GLenum.t
                           val cw : unit -> GLenum.t
                           val decr : unit -> GLenum.t
                           val decr_wrap : unit -> GLenum.t
                           val delete_status : unit -> GLenum.t
                           val depth_attachment : unit -> GLenum.t
                           val depth_bits : unit -> GLenum.t
                           val depth_buffer_bit : unit -> GLenum.t
                           val depth_clear_value : unit -> GLenum.t
                           val depth_component : unit -> GLenum.t
                           val depth_component16 : unit -> GLenum.t
                           val depth_func : unit -> GLenum.t
                           val depth_range : unit -> GLenum.t
                           val depth_stencil : unit -> GLenum.t
                           val depth_stencil_attachment : unit -> GLenum.t
                           val depth_test : unit -> GLenum.t
                           val depth_writemask : unit -> GLenum.t
                           val dither : unit -> GLenum.t
                           val dont_care : unit -> GLenum.t
                           val dst_alpha : unit -> GLenum.t
                           val dst_color : unit -> GLenum.t
                           val dynamic_draw : unit -> GLenum.t
                           val element_array_buffer : unit -> GLenum.t
                           val element_array_buffer_binding :
                             unit -> GLenum.t
                           val equal : unit -> GLenum.t
                           val fastest : unit -> GLenum.t
                           val float : unit -> GLenum.t
                           val float_mat2 : unit -> GLenum.t
                           val float_mat3 : unit -> GLenum.t
                           val float_mat4 : unit -> GLenum.t
                           val float_vec2 : unit -> GLenum.t
                           val float_vec3 : unit -> GLenum.t
                           val float_vec4 : unit -> GLenum.t
                           val fragment_shader : unit -> GLenum.t
                           val framebuffer : unit -> GLenum.t
                           val framebuffer_attachment_object_name :
                             unit -> GLenum.t
                           val framebuffer_attachment_object_type :
                             unit -> GLenum.t
                           val framebuffer_attachment_texture_cube_map_face :
                             unit -> GLenum.t
                           val framebuffer_attachment_texture_level :
                             unit -> GLenum.t
                           val framebuffer_binding : unit -> GLenum.t
                           val framebuffer_complete : unit -> GLenum.t
                           val framebuffer_incomplete_attachment :
                             unit -> GLenum.t
                           val framebuffer_incomplete_dimensions :
                             unit -> GLenum.t
                           val framebuffer_incomplete_missing_attachment :
                             unit -> GLenum.t
                           val framebuffer_unsupported : unit -> GLenum.t
                           val front : unit -> GLenum.t
                           val front_and_back : unit -> GLenum.t
                           val front_face : unit -> GLenum.t
                           val func_add : unit -> GLenum.t
                           val func_reverse_subtract : unit -> GLenum.t
                           val func_subtract : unit -> GLenum.t
                           val generate_mipmap_hint : unit -> GLenum.t
                           val gequal : unit -> GLenum.t
                           val greater : unit -> GLenum.t
                           val green_bits : unit -> GLenum.t
                           val high_float : unit -> GLenum.t
                           val high_int : unit -> GLenum.t
                           val implementation_color_read_format :
                             unit -> GLenum.t
                           val implementation_color_read_type :
                             unit -> GLenum.t
                           val incr : unit -> GLenum.t
                           val incr_wrap : unit -> GLenum.t
                           val int : unit -> GLenum.t
                           val int_vec2 : unit -> GLenum.t
                           val int_vec3 : unit -> GLenum.t
                           val int_vec4 : unit -> GLenum.t
                           val invalid_enum : unit -> GLenum.t
                           val invalid_framebuffer_operation :
                             unit -> GLenum.t
                           val invalid_operation : unit -> GLenum.t
                           val invalid_value : unit -> GLenum.t
                           val invert : unit -> GLenum.t
                           val keep : unit -> GLenum.t
                           val lequal : unit -> GLenum.t
                           val less : unit -> GLenum.t
                           val linear : unit -> GLenum.t
                           val linear_mipmap_linear : unit -> GLenum.t
                           val linear_mipmap_nearest : unit -> GLenum.t
                           val lines : unit -> GLenum.t
                           val line_loop : unit -> GLenum.t
                           val line_strip : unit -> GLenum.t
                           val line_width : unit -> GLenum.t
                           val link_status : unit -> GLenum.t
                           val low_float : unit -> GLenum.t
                           val low_int : unit -> GLenum.t
                           val luminance : unit -> GLenum.t
                           val luminance_alpha : unit -> GLenum.t
                           val max_combined_texture_image_units :
                             unit -> GLenum.t
                           val max_cube_map_texture_size : unit -> GLenum.t
                           val max_fragment_uniform_vectors :
                             unit -> GLenum.t
                           val max_renderbuffer_size : unit -> GLenum.t
                           val max_texture_image_units : unit -> GLenum.t
                           val max_texture_size : unit -> GLenum.t
                           val max_varying_vectors : unit -> GLenum.t
                           val max_vertex_attribs : unit -> GLenum.t
                           val max_vertex_texture_image_units :
                             unit -> GLenum.t
                           val max_vertex_uniform_vectors : unit -> GLenum.t
                           val max_viewport_dims : unit -> GLenum.t
                           val medium_float : unit -> GLenum.t
                           val medium_int : unit -> GLenum.t
                           val mirrored_repeat : unit -> GLenum.t
                           val nearest : unit -> GLenum.t
                           val nearest_mipmap_linear : unit -> GLenum.t
                           val nearest_mipmap_nearest : unit -> GLenum.t
                           val never : unit -> GLenum.t
                           val nicest : unit -> GLenum.t
                           val none : unit -> GLenum.t
                           val notequal : unit -> GLenum.t
                           val no_error : unit -> GLenum.t
                           val one : unit -> GLenum.t
                           val one_minus_constant_alpha : unit -> GLenum.t
                           val one_minus_constant_color : unit -> GLenum.t
                           val one_minus_dst_alpha : unit -> GLenum.t
                           val one_minus_dst_color : unit -> GLenum.t
                           val one_minus_src_alpha : unit -> GLenum.t
                           val one_minus_src_color : unit -> GLenum.t
                           val out_of_memory : unit -> GLenum.t
                           val pack_alignment : unit -> GLenum.t
                           val points : unit -> GLenum.t
                           val polygon_offset_factor : unit -> GLenum.t
                           val polygon_offset_fill : unit -> GLenum.t
                           val polygon_offset_units : unit -> GLenum.t
                           val red_bits : unit -> GLenum.t
                           val renderbuffer : unit -> GLenum.t
                           val renderbuffer_alpha_size : unit -> GLenum.t
                           val renderbuffer_binding : unit -> GLenum.t
                           val renderbuffer_blue_size : unit -> GLenum.t
                           val renderbuffer_depth_size : unit -> GLenum.t
                           val renderbuffer_green_size : unit -> GLenum.t
                           val renderbuffer_height : unit -> GLenum.t
                           val renderbuffer_internal_format :
                             unit -> GLenum.t
                           val renderbuffer_red_size : unit -> GLenum.t
                           val renderbuffer_stencil_size : unit -> GLenum.t
                           val renderbuffer_width : unit -> GLenum.t
                           val renderer : unit -> GLenum.t
                           val repeat : unit -> GLenum.t
                           val replace : unit -> GLenum.t
                           val rgb : unit -> GLenum.t
                           val rgb565 : unit -> GLenum.t
                           val rgb5_a1 : unit -> GLenum.t
                           val rgba : unit -> GLenum.t
                           val rgba4 : unit -> GLenum.t
                           val sampler_2d : unit -> GLenum.t
                           val sampler_cube : unit -> GLenum.t
                           val samples : unit -> GLenum.t
                           val sample_alpha_to_coverage : unit -> GLenum.t
                           val sample_buffers : unit -> GLenum.t
                           val sample_coverage : unit -> GLenum.t
                           val sample_coverage_invert : unit -> GLenum.t
                           val sample_coverage_value : unit -> GLenum.t
                           val scissor_box : unit -> GLenum.t
                           val scissor_test : unit -> GLenum.t
                           val shader_type : unit -> GLenum.t
                           val shading_language_version : unit -> GLenum.t
                           val short : unit -> GLenum.t
                           val src_alpha : unit -> GLenum.t
                           val src_alpha_saturate : unit -> GLenum.t
                           val src_color : unit -> GLenum.t
                           val static_draw : unit -> GLenum.t
                           val stencil_attachment : unit -> GLenum.t
                           val stencil_back_fail : unit -> GLenum.t
                           val stencil_back_func : unit -> GLenum.t
                           val stencil_back_pass_depth_fail :
                             unit -> GLenum.t
                           val stencil_back_pass_depth_pass :
                             unit -> GLenum.t
                           val stencil_back_ref : unit -> GLenum.t
                           val stencil_back_value_mask : unit -> GLenum.t
                           val stencil_back_writemask : unit -> GLenum.t
                           val stencil_bits : unit -> GLenum.t
                           val stencil_buffer_bit : unit -> GLenum.t
                           val stencil_clear_value : unit -> GLenum.t
                           val stencil_fail : unit -> GLenum.t
                           val stencil_func : unit -> GLenum.t
                           val stencil_index8 : unit -> GLenum.t
                           val stencil_pass_depth_fail : unit -> GLenum.t
                           val stencil_pass_depth_pass : unit -> GLenum.t
                           val stencil_ref : unit -> GLenum.t
                           val stencil_test : unit -> GLenum.t
                           val stencil_value_mask : unit -> GLenum.t
                           val stencil_writemask : unit -> GLenum.t
                           val stream_draw : unit -> GLenum.t
                           val subpixel_bits : unit -> GLenum.t
                           val texture : unit -> GLenum.t
                           val texture0 : unit -> GLenum.t
                           val texture1 : unit -> GLenum.t
                           val texture10 : unit -> GLenum.t
                           val texture11 : unit -> GLenum.t
                           val texture12 : unit -> GLenum.t
                           val texture13 : unit -> GLenum.t
                           val texture14 : unit -> GLenum.t
                           val texture15 : unit -> GLenum.t
                           val texture16 : unit -> GLenum.t
                           val texture17 : unit -> GLenum.t
                           val texture18 : unit -> GLenum.t
                           val texture19 : unit -> GLenum.t
                           val texture2 : unit -> GLenum.t
                           val texture20 : unit -> GLenum.t
                           val texture21 : unit -> GLenum.t
                           val texture22 : unit -> GLenum.t
                           val texture23 : unit -> GLenum.t
                           val texture24 : unit -> GLenum.t
                           val texture25 : unit -> GLenum.t
                           val texture26 : unit -> GLenum.t
                           val texture27 : unit -> GLenum.t
                           val texture28 : unit -> GLenum.t
                           val texture29 : unit -> GLenum.t
                           val texture3 : unit -> GLenum.t
                           val texture30 : unit -> GLenum.t
                           val texture31 : unit -> GLenum.t
                           val texture4 : unit -> GLenum.t
                           val texture5 : unit -> GLenum.t
                           val texture6 : unit -> GLenum.t
                           val texture7 : unit -> GLenum.t
                           val texture8 : unit -> GLenum.t
                           val texture9 : unit -> GLenum.t
                           val texture_2d : unit -> GLenum.t
                           val texture_binding_2d : unit -> GLenum.t
                           val texture_binding_cube_map : unit -> GLenum.t
                           val texture_cube_map : unit -> GLenum.t
                           val texture_cube_map_negative_x : unit -> GLenum.t
                           val texture_cube_map_negative_y : unit -> GLenum.t
                           val texture_cube_map_negative_z : unit -> GLenum.t
                           val texture_cube_map_positive_x : unit -> GLenum.t
                           val texture_cube_map_positive_y : unit -> GLenum.t
                           val texture_cube_map_positive_z : unit -> GLenum.t
                           val texture_mag_filter : unit -> GLenum.t
                           val texture_min_filter : unit -> GLenum.t
                           val texture_wrap_s : unit -> GLenum.t
                           val texture_wrap_t : unit -> GLenum.t
                           val triangles : unit -> GLenum.t
                           val triangle_fan : unit -> GLenum.t
                           val triangle_strip : unit -> GLenum.t
                           val unpack_alignment : unit -> GLenum.t
                           val unpack_colorspace_conversion_webgl :
                             unit -> GLenum.t
                           val unpack_flip_y_webgl : unit -> GLenum.t
                           val unpack_premultiply_alpha_webgl :
                             unit -> GLenum.t
                           val unsigned_byte : unit -> GLenum.t
                           val unsigned_int : unit -> GLenum.t
                           val unsigned_short : unit -> GLenum.t
                           val unsigned_short_4_4_4_4 : unit -> GLenum.t
                           val unsigned_short_5_5_5_1 : unit -> GLenum.t
                           val unsigned_short_5_6_5 : unit -> GLenum.t
                           val validate_status : unit -> GLenum.t
                           val vendor : unit -> GLenum.t
                           val version : unit -> GLenum.t
                           val vertex_attrib_array_buffer_binding :
                             unit -> GLenum.t
                           val vertex_attrib_array_enabled : unit -> GLenum.t
                           val vertex_attrib_array_normalized :
                             unit -> GLenum.t
                           val vertex_attrib_array_pointer : unit -> GLenum.t
                           val vertex_attrib_array_size : unit -> GLenum.t
                           val vertex_attrib_array_stride : unit -> GLenum.t
                           val vertex_attrib_array_type : unit -> GLenum.t
                           val vertex_shader : unit -> GLenum.t
                           val viewport : unit -> GLenum.t
                           val zero : unit -> GLenum.t
                         end =
  struct
    type t =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15574 : Ojs.t) -> t_of_js x15574
    and t_0_to_js : t_0 -> Ojs.t = fun (x15573 : t) -> t_to_js x15573
    type tags =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15577 : Ojs.t) -> intf_of_js __tags_of_js x15577
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15575 : __tags intf) -> intf_to_js __tags_to_js x15575
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") 
             [||])
    let (active_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORM_BLOCKS")
    let (already_signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALREADY_SIGNALED")
    let (any_samples_passed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED")
    let (any_samples_passed_conservative : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "COLOR")
    let (color_attachment1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT1")
    let (color_attachment10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT10")
    let (color_attachment11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT11")
    let (color_attachment12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT12")
    let (color_attachment13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT13")
    let (color_attachment14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT14")
    let (color_attachment15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT15")
    let (color_attachment2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT2")
    let (color_attachment3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT3")
    let (color_attachment4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT4")
    let (color_attachment5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT5")
    let (color_attachment6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT6")
    let (color_attachment7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT7")
    let (color_attachment8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT8")
    let (color_attachment9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT9")
    let (compare_ref_to_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPARE_REF_TO_TEXTURE")
    let (condition_satisfied : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONDITION_SATISFIED")
    let (copy_read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER")
    let (copy_read_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER_BINDING")
    let (copy_write_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER")
    let (copy_write_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER_BINDING")
    let (current_query : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_QUERY")
    let (depth : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DEPTH")
    let (depth24_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH24_STENCIL8")
    let (depth32f_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH32F_STENCIL8")
    let (depth_component24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT24")
    let (depth_component32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT32F")
    let (draw_buffer0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER0")
    let (draw_buffer1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER1")
    let (draw_buffer10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER10")
    let (draw_buffer11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER11")
    let (draw_buffer12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER12")
    let (draw_buffer13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER13")
    let (draw_buffer14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER14")
    let (draw_buffer15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER15")
    let (draw_buffer2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER2")
    let (draw_buffer3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER3")
    let (draw_buffer4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER4")
    let (draw_buffer5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER5")
    let (draw_buffer6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER6")
    let (draw_buffer7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER7")
    let (draw_buffer8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER8")
    let (draw_buffer9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER9")
    let (draw_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER")
    let (draw_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER_BINDING")
    let (dynamic_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_COPY")
    let (dynamic_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_READ")
    let (float_32_unsigned_int_24_8_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (fLOAT_MAT2x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x3")
    let (fLOAT_MAT2x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x4")
    let (fLOAT_MAT3x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x2")
    let (fLOAT_MAT3x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x4")
    let (fLOAT_MAT4x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x2")
    let (fLOAT_MAT4x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x3")
    let (fragment_shader_derivative_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (framebuffer_attachment_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (framebuffer_attachment_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (framebuffer_attachment_color_encoding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (framebuffer_attachment_component_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (framebuffer_attachment_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (framebuffer_attachment_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (framebuffer_attachment_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (framebuffer_attachment_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (framebuffer_attachment_texture_layer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (framebuffer_default : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_DEFAULT")
    let (framebuffer_incomplete_multisample : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (half_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HALF_FLOAT")
    let (interleaved_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INTERLEAVED_ATTRIBS")
    let (int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_2_10_10_10_REV")
    let (int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D")
    let (int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D_ARRAY")
    let (int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_3D")
    let (int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_CUBE")
    let (invalid_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_INDEX")
    let (max : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MAX")
    let (max_3d_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_3D_TEXTURE_SIZE")
    let (max_array_texture_layers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (max_client_wait_timeout_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (max_color_attachments : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COLOR_ATTACHMENTS")
    let (max_combined_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_combined_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (max_combined_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (max_draw_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_DRAW_BUFFERS")
    let (max_elements_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_INDICES")
    let (max_elements_vertices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_VERTICES")
    let (max_element_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENT_INDEX")
    let (max_fragment_input_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (max_fragment_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (max_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (max_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SAMPLES")
    let (max_server_wait_timeout : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SERVER_WAIT_TIMEOUT")
    let (max_texture_lod_bias : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_LOD_BIAS")
    let (max_transform_feedback_interleaved_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (max_transform_feedback_separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (max_transform_feedback_separate_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (max_uniform_block_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BLOCK_SIZE")
    let (max_uniform_buffer_bindings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (max_varying_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_COMPONENTS")
    let (max_vertex_output_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (max_vertex_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (max_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (min : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MIN")
    let (min_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OBJECT_TYPE")
    let (pack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ROW_LENGTH")
    let (pack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_PIXELS")
    let (pack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_ROWS")
    let (pixel_pack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER")
    let (pixel_pack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER_BINDING")
    let (pixel_unpack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER")
    let (pixel_unpack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (query_result : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT")
    let (query_result_available : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT_AVAILABLE")
    let (r11f_g11f_b10f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R11F_G11F_B10F")
    let (r16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16F")
    let (r16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16I")
    let (r16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16UI")
    let (r32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32F")
    let (r32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32I")
    let (r32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32UI")
    let (r8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8")
    let (r8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8I")
    let (r8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8UI")
    let (r8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R8_SNORM")
    let (rasterizer_discard : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RASTERIZER_DISCARD")
    let (read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_BUFFER")
    let (read_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER")
    let (read_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER_BINDING")
    let (red : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RED")
    let (red_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_INTEGER")
    let (renderbuffer_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_SAMPLES")
    let (rg : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG")
    let (rg16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16F")
    let (rg16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16I")
    let (rg16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG16UI")
    let (rg32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32F")
    let (rg32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32I")
    let (rg32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG32UI")
    let (rg8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8")
    let (rg8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8I")
    let (rg8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8UI")
    let (rg8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG8_SNORM")
    let (rgb10_a2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2")
    let (rgb10_a2ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2UI")
    let (rgb16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16F")
    let (rgb16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16I")
    let (rgb16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16UI")
    let (rgb32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32F")
    let (rgb32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32I")
    let (rgb32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32UI")
    let (rgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8")
    let (rgb8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8I")
    let (rgb8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8UI")
    let (rgb8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8_SNORM")
    let (rgb9_e5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB9_E5")
    let (rgba16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16F")
    let (rgba16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16I")
    let (rgba16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16UI")
    let (rgba32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32F")
    let (rgba32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32I")
    let (rgba32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32UI")
    let (rgba8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA8")
    let (rgba8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8I")
    let (rgba8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8UI")
    let (rgba8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8_SNORM")
    let (rgba_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA_INTEGER")
    let (rgb_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB_INTEGER")
    let (rg_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG_INTEGER")
    let (sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY")
    let (sampler_2d_array_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY_SHADOW")
    let (sampler_2d_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_SHADOW")
    let (sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_3D")
    let (sampler_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_BINDING")
    let (sampler_cube_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE_SHADOW")
    let (separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SEPARATE_ATTRIBS")
    let (signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNALED")
    let (signed_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNED_NORMALIZED")
    let (srgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB")
    let (srgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB8")
    let (srgb8_alpha8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRGB8_ALPHA8")
    let (static_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_COPY")
    let (static_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_READ")
    let (stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL")
    let (stream_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_COPY")
    let (stream_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_READ")
    let (sync_condition : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_CONDITION")
    let (sync_fence : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FENCE")
    let (sync_flags : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLAGS")
    let (sync_flush_commands_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLUSH_COMMANDS_BIT")
    let (sync_gpu_commands_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (sync_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_STATUS")
    let (texture_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D_ARRAY")
    let (texture_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_3D")
    let (texture_base_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BASE_LEVEL")
    let (texture_binding_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D_ARRAY")
    let (texture_binding_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_3D")
    let (texture_compare_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_FUNC")
    let (texture_compare_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_MODE")
    let (texture_immutable_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_FORMAT")
    let (texture_immutable_levels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_LEVELS")
    let (texture_max_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LEVEL")
    let (texture_max_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LOD")
    let (texture_min_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_LOD")
    let (texture_wrap_r : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_R")
    let (timeout_expired : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_EXPIRED")
    let (timeout_ignored : unit -> GLint64.t) =
      fun () ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_IGNORED")
    let (transform_feedback : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK")
    let (transform_feedback_active : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (transform_feedback_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BINDING")
    let (transform_feedback_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER")
    let (transform_feedback_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (transform_feedback_buffer_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (transform_feedback_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (transform_feedback_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (transform_feedback_paused : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PAUSED")
    let (transform_feedback_primitives_written : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (transform_feedback_varyings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (uniform_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_ARRAY_STRIDE")
    let (uniform_block_active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (uniform_block_active_uniform_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (uniform_block_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_BINDING")
    let (uniform_block_data_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_DATA_SIZE")
    let (uniform_block_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_INDEX")
    let (uniform_block_referenced_by_fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (uniform_block_referenced_by_vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (uniform_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER")
    let (uniform_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_BINDING")
    let (uniform_buffer_offset_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (uniform_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_SIZE")
    let (uniform_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_START")
    let (uniform_is_row_major : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_IS_ROW_MAJOR")
    let (uniform_matrix_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_MATRIX_STRIDE")
    let (uniform_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_OFFSET")
    let (uniform_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_SIZE")
    let (uniform_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_TYPE")
    let (unpack_image_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_IMAGE_HEIGHT")
    let (unpack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ROW_LENGTH")
    let (unpack_skip_images : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_IMAGES")
    let (unpack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_PIXELS")
    let (unpack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_ROWS")
    let (unsignaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNALED")
    let (unsigned_int_10f_11f_11f_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (unsigned_int_24_8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_24_8")
    let (unsigned_int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_2_10_10_10_REV")
    let (unsigned_int_5_9_9_9_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_5_9_9_9_REV")
    let (unsigned_int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D")
    let (unsigned_int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (unsigned_int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_3D")
    let (unsigned_int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (unsigned_int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC2")
    let (unsigned_int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC3")
    let (unsigned_int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC4")
    let (unsigned_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_NORMALIZED")
    let (vertex_array_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ARRAY_BINDING")
    let (vertex_attrib_array_divisor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (vertex_attrib_array_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (wait_failed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "WAIT_FAILED")
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ZERO")
  end
module rec
  AnonymousInterface108:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype :
                            t -> TransformStreamDefaultController.t_0
                          val set_prototype :
                            t -> TransformStreamDefaultController.t_0 -> unit
                          val create :
                            t -> TransformStreamDefaultController.t_0
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15580 : Ojs.t) -> x15580
    and t_to_js : t -> Ojs.t = fun (x15579 : Ojs.t) -> x15579
    let (get_prototype : t -> TransformStreamDefaultController.t_0) =
      fun (x15581 : t) ->
        TransformStreamDefaultController.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x15581) "prototype")
    let (set_prototype : t -> TransformStreamDefaultController.t_0 -> unit) =
      fun (x15582 : t) ->
        fun (x15583 : TransformStreamDefaultController.t_0) ->
          Ojs.set_prop_ascii (t_to_js x15582) "prototype"
            (TransformStreamDefaultController.t_0_to_js x15583)
    let (create : t -> TransformStreamDefaultController.t_0) =
      fun (x15584 : t) ->
        TransformStreamDefaultController.t_0_of_js
          (Ojs.new_obj (t_to_js x15584) [||])
  end
 and
  TransformStreamDefaultController:sig
                                     type 'O t =
                                       [
                                         `TransformStreamDefaultController of
                                           'O ]
                                         intf
                                     type 'O t_1 = 'O t
                                     type t_0 = any t
                                     [@@@js.stop ]
                                     type 'O tags =
                                       [
                                         `TransformStreamDefaultController of
                                           'O ]
                                     type 'O tags_1 = 'O tags
                                     type tags_0 = any tags
                                     [@@@js.start ]
                                     [@@@js.implem
                                       type 'O tags =
                                         [
                                           `TransformStreamDefaultController
                                             of 'O ]
                                       type 'O tags_1 = 'O tags
                                       type tags_0 = any tags]
                                     type ('tags, 'O) this =
                                       'tags intf constraint 'tags =
                                                   [>
                                                     `TransformStreamDefaultController
                                                       of 'O ]
                                     val t_to_js :
                                       ('O -> Ojs.t) -> 'O t -> Ojs.t
                                     val t_of_js :
                                       (Ojs.t -> 'O) -> Ojs.t -> 'O t
                                     val t_1_to_js :
                                       ('O -> Ojs.t) -> 'O t_1 -> Ojs.t
                                     val t_1_of_js :
                                       (Ojs.t -> 'O) -> Ojs.t -> 'O t_1
                                     val t_0_to_js : t_0 -> Ojs.t
                                     val t_0_of_js : Ojs.t -> t_0
                                     val get_desiredSize :
                                       ('tags, 'O) this -> float or_null
                                     val enqueue :
                                       ('tags, 'O) this ->
                                         ?chunk:'O -> unit -> unit
                                     val error :
                                       ('tags, 'O) this ->
                                         ?reason:any -> unit -> unit
                                     val terminate : ('tags, 'O) this -> unit
                                     val cast_from : ('tags, 'O) this -> 'O t
                                     val prototype : unit -> t_0
                                     val create : unit -> t_0
                                   end =
  struct
    type 'O t = [ `TransformStreamDefaultController of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x15587 : Ojs.t) -> t_of_js __O_of_js x15587
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x15585 : __O t) -> t_to_js __O_to_js x15585
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15591 : Ojs.t) -> t_of_js any_of_js x15591
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15589 : any t) -> t_to_js any_to_js x15589
    type 'O tags = [ `TransformStreamDefaultController of 'O ]
    type 'O tags_1 = 'O tags
    type tags_0 = any tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformStreamDefaultController of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15595 : Ojs.t) -> intf_of_js __tags_of_js x15595
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15593 : __tags intf) -> intf_to_js __tags_to_js x15593
    let (get_desiredSize : ('tags, 'O) this -> float or_null) =
      fun (x15597 : ('tags, 'O) this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x15597)
             "desiredSize")
    let (enqueue : ('tags, 'O) this -> ?chunk:'O -> unit -> unit) =
      fun (x15604 : ('tags, 'O) this) ->
        fun ?chunk:(x15601 : 'O option) ->
          fun () ->
            ignore
              (let x15607 = this_to_js Obj.magic Obj.magic x15604 in
               Ojs.call (Ojs.get_prop_ascii x15607 "enqueue") "apply"
                 [|x15607;((let x15602 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15601 with
                             | Some x15603 ->
                                 ignore
                                   (Ojs.call x15602 "push"
                                      [|(Obj.magic x15603)|])
                             | None -> ());
                            x15602))|])
    let (error : ('tags, 'O) this -> ?reason:any -> unit -> unit) =
      fun (x15611 : ('tags, 'O) this) ->
        fun ?reason:(x15608 : any option) ->
          fun () ->
            ignore
              (let x15614 = this_to_js Obj.magic Obj.magic x15611 in
               Ojs.call (Ojs.get_prop_ascii x15614 "error") "apply"
                 [|x15614;((let x15609 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15608 with
                             | Some x15610 ->
                                 ignore
                                   (Ojs.call x15609 "push"
                                      [|(any_to_js x15610)|])
                             | None -> ());
                            x15609))|])
    let (terminate : ('tags, 'O) this -> unit) =
      fun (x15615 : ('tags, 'O) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x15615) "terminate" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") [||])
  end
module TransformerTransformCallback =
  struct
    type ('I, 'O) t = [ `TransformerTransformCallback of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15621 : Ojs.t) -> t_of_js __I_of_js __O_of_js x15621
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15618 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x15618
    type ('I, 'O) tags = [ `TransformerTransformCallback of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformerTransformCallback of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x15626 : Ojs.t) -> intf_of_js __tags_of_js x15626
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x15624 : __tags intf) -> intf_to_js __tags_to_js x15624
    let (apply :
      ('tags, 'I, 'O) this ->
        chunk:'I ->
          controller:'O TransformStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x15631 : ('tags, 'I, 'O) this) ->
        fun ~chunk:(x15628 : 'I) ->
          fun ~controller:(x15629 : 'O TransformStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x15636 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x15636)
              (Ojs.apply (this_to_js Obj.magic Obj.magic Obj.magic x15631)
                 [|(Obj.magic x15628);(TransformStreamDefaultController.t_to_js
                                         Obj.magic x15629)|])
    let cast_from = Obj.magic
  end
module TransformerStartCallback =
  struct
    type 'O t = [ `TransformerStartCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x15640 : Ojs.t) -> t_of_js __O_of_js x15640
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x15638 : __O t) -> t_to_js __O_to_js x15638
    type 'O tags = [ `TransformerStartCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerStartCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15644 : Ojs.t) -> intf_of_js __tags_of_js x15644
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15642 : __tags intf) -> intf_to_js __tags_to_js x15642
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t -> any)
      =
      fun (x15648 : ('tags, 'O) this) ->
        fun ~controller:(x15646 : 'O TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x15648)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x15646)|])
    let cast_from = Obj.magic
  end
module TransformerFlushCallback =
  struct
    type 'O t = [ `TransformerFlushCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x15653 : Ojs.t) -> t_of_js __O_of_js x15653
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x15651 : __O t) -> t_to_js __O_to_js x15651
    type 'O tags = [ `TransformerFlushCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerFlushCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15657 : Ojs.t) -> intf_of_js __tags_of_js x15657
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15655 : __tags intf) -> intf_to_js __tags_to_js x15655
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x15661 : ('tags, 'O) this) ->
        fun ~controller:(x15659 : 'O TransformStreamDefaultController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x15665 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x15665)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x15661)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x15659)|])
    let cast_from = Obj.magic
  end
module Transformer =
  struct
    type ('I, 'O) t = [ `Transformer of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15670 : Ojs.t) -> t_of_js __I_of_js __O_of_js x15670
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15667 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x15667
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 = fun (type
      __I) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (x15676 : Ojs.t) -> t_of_js __I_of_js any_of_js x15676
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t = fun (type __I) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (x15673 : (__I, any) t) -> t_to_js __I_to_js any_to_js x15673
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15682 : Ojs.t) -> t_of_js any_of_js any_of_js x15682
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15679 : (any, any) t) -> t_to_js any_to_js any_to_js x15679
    type ('I, 'O) tags = [ `Transformer of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `Transformer of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x15687 : Ojs.t) -> intf_of_js __tags_of_js x15687
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x15685 : __tags intf) -> intf_to_js __tags_to_js x15685
    let (get_flush : ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t) =
      fun (x15689 : ('tags, 'I, 'O) this) ->
        TransformerFlushCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15689) "flush")
    let (set_flush :
      ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t -> unit) =
      fun (x15694 : ('tags, 'I, 'O) this) ->
        fun (x15695 : 'O TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x15694) "flush"
            (TransformerFlushCallback.t_to_js Obj.magic x15695)
    let (get_readableType : ('tags, 'I, 'O) this -> never or_undefined) =
      fun (x15700 : ('tags, 'I, 'O) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15700) "readableType")
    let (set_readableType :
      ('tags, 'I, 'O) this -> never or_undefined -> unit) =
      fun (x15705 : ('tags, 'I, 'O) this) ->
        fun (x15706 : never or_undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x15705) "readableType"
            (or_undefined_to_js never_to_js x15706)
    let (get_start : ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t) =
      fun (x15711 : ('tags, 'I, 'O) this) ->
        TransformerStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15711) "start")
    let (set_start :
      ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t -> unit) =
      fun (x15716 : ('tags, 'I, 'O) this) ->
        fun (x15717 : 'O TransformerStartCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x15716) "start"
            (TransformerStartCallback.t_to_js Obj.magic x15717)
    let (get_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t) =
      fun (x15722 : ('tags, 'I, 'O) this) ->
        TransformerTransformCallback.t_of_js Obj.magic Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15722) "transform")
    let (set_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t -> unit)
      =
      fun (x15728 : ('tags, 'I, 'O) this) ->
        fun (x15729 : ('I, 'O) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x15728) "transform"
            (TransformerTransformCallback.t_to_js Obj.magic Obj.magic x15729)
    let (get_writableType : ('tags, 'I, 'O) this -> never or_undefined) =
      fun (x15735 : ('tags, 'I, 'O) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15735) "writableType")
    let (set_writableType :
      ('tags, 'I, 'O) this -> never or_undefined -> unit) =
      fun (x15740 : ('tags, 'I, 'O) this) ->
        fun (x15741 : never or_undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x15740) "writableType"
            (or_undefined_to_js never_to_js x15741)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface107:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TransformStream.t_0
                          val set_prototype :
                            t -> TransformStream.t_0 -> unit
                          val create :
                            t ->
                              ?transformer:('I, 'O) Transformer.t ->
                                ?writableStrategy:'I QueuingStrategy.t ->
                                  ?readableStrategy:'O QueuingStrategy.t ->
                                    unit -> ('I, 'O) TransformStream.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15747 : Ojs.t) -> x15747
    and t_to_js : t -> Ojs.t = fun (x15746 : Ojs.t) -> x15746
    let (get_prototype : t -> TransformStream.t_0) =
      fun (x15748 : t) ->
        TransformStream.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x15748) "prototype")
    let (set_prototype : t -> TransformStream.t_0 -> unit) =
      fun (x15749 : t) ->
        fun (x15750 : TransformStream.t_0) ->
          Ojs.set_prop_ascii (t_to_js x15749) "prototype"
            (TransformStream.t_0_to_js x15750)
    let (create :
      t ->
        ?transformer:('I, 'O) Transformer.t ->
          ?writableStrategy:'I QueuingStrategy.t ->
            ?readableStrategy:'O QueuingStrategy.t ->
              unit -> ('I, 'O) TransformStream.t)
      =
      fun (x15762 : t) ->
        fun ?transformer:(x15751 : ('I, 'O) Transformer.t option) ->
          fun ?writableStrategy:(x15752 : 'I QueuingStrategy.t option) ->
            fun ?readableStrategy:(x15753 : 'O QueuingStrategy.t option) ->
              fun () ->
                TransformStream.t_of_js Obj.magic Obj.magic
                  (Ojs.new_obj_arr (t_to_js x15762)
                     (let x15754 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15751 with
                       | Some x15759 ->
                           ignore
                             (Ojs.call x15754 "push"
                                [|(Transformer.t_to_js Obj.magic Obj.magic
                                     x15759)|])
                       | None -> ());
                      (match x15752 with
                       | Some x15757 ->
                           ignore
                             (Ojs.call x15754 "push"
                                [|(QueuingStrategy.t_to_js Obj.magic x15757)|])
                       | None -> ());
                      (match x15753 with
                       | Some x15755 ->
                           ignore
                             (Ojs.call x15754 "push"
                                [|(QueuingStrategy.t_to_js Obj.magic x15755)|])
                       | None -> ());
                      x15754))
  end
 and
  TransformStream:sig
                    type ('I, 'O) t = [ `TransformStream of ('I * 'O) ] intf
                    type ('I, 'O) t_2 = ('I, 'O) t
                    type 'I t_1 = ('I, any) t
                    type t_0 = (any, any) t
                    [@@@js.stop ]
                    type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
                    type ('I, 'O) tags_2 = ('I, 'O) tags
                    type 'I tags_1 = ('I, any) tags
                    type tags_0 = (any, any) tags
                    [@@@js.start ]
                    [@@@js.implem
                      type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
                      type ('I, 'O) tags_2 = ('I, 'O) tags
                      type 'I tags_1 = ('I, any) tags
                      type tags_0 = (any, any) tags]
                    type ('tags, 'I, 'O) this =
                      'tags intf constraint 'tags =
                                  [> `TransformStream of ('I * 'O) ]
                    val t_to_js :
                      ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t
                    val t_of_js :
                      (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t
                    val t_2_to_js :
                      ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t
                    val t_2_of_js :
                      (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2
                    val t_1_to_js : ('I -> Ojs.t) -> 'I t_1 -> Ojs.t
                    val t_1_of_js : (Ojs.t -> 'I) -> Ojs.t -> 'I t_1
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_readable :
                      ('tags, 'I, 'O) this -> 'O ReadableStream.t
                    val get_writable :
                      ('tags, 'I, 'O) this -> 'I WritableStream.t
                    val cast_from : ('tags, 'I, 'O) this -> ('I, 'O) t
                    val prototype : unit -> t_0
                    val create :
                      ?transformer:('I, 'O) Transformer.t ->
                        ?writableStrategy:'I QueuingStrategy.t ->
                          ?readableStrategy:'O QueuingStrategy.t ->
                            unit -> ('I, 'O) t
                  end =
  struct
    type ('I, 'O) t = [ `TransformStream of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15768 : Ojs.t) -> t_of_js __I_of_js __O_of_js x15768
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15765 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x15765
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 = fun (type
      __I) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (x15774 : Ojs.t) -> t_of_js __I_of_js any_of_js x15774
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t = fun (type __I) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (x15771 : (__I, any) t) -> t_to_js __I_to_js any_to_js x15771
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15780 : Ojs.t) -> t_of_js any_of_js any_of_js x15780
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15777 : (any, any) t) -> t_to_js any_to_js any_to_js x15777
    type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `TransformStream of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x15785 : Ojs.t) -> intf_of_js __tags_of_js x15785
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x15783 : __tags intf) -> intf_to_js __tags_to_js x15783
    let (get_readable : ('tags, 'I, 'O) this -> 'O ReadableStream.t) =
      fun (x15787 : ('tags, 'I, 'O) this) ->
        ReadableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15787) "readable")
    let (get_writable : ('tags, 'I, 'O) this -> 'I WritableStream.t) =
      fun (x15792 : ('tags, 'I, 'O) this) ->
        WritableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15792) "writable")
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TransformStream") "prototype")
    let (create :
      ?transformer:('I, 'O) Transformer.t ->
        ?writableStrategy:'I QueuingStrategy.t ->
          ?readableStrategy:'O QueuingStrategy.t -> unit -> ('I, 'O) t)
      =
      fun ?transformer:(x15797 : ('I, 'O) Transformer.t option) ->
        fun ?writableStrategy:(x15798 : 'I QueuingStrategy.t option) ->
          fun ?readableStrategy:(x15799 : 'O QueuingStrategy.t option) ->
            fun () ->
              t_of_js Obj.magic Obj.magic
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "TransformStream")
                   (let x15800 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x15797 with
                     | Some x15805 ->
                         ignore
                           (Ojs.call x15800 "push"
                              [|(Transformer.t_to_js Obj.magic Obj.magic
                                   x15805)|])
                     | None -> ());
                    (match x15798 with
                     | Some x15803 ->
                         ignore
                           (Ojs.call x15800 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x15803)|])
                     | None -> ());
                    (match x15799 with
                     | Some x15801 ->
                         ignore
                           (Ojs.call x15800 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x15801)|])
                     | None -> ());
                    x15800))
  end
module rec
  AnonymousInterface106:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TextMetrics.t
                          val set_prototype : t -> TextMetrics.t -> unit
                          val create : t -> TextMetrics.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15811 : Ojs.t) -> x15811
    and t_to_js : t -> Ojs.t = fun (x15810 : Ojs.t) -> x15810
    let (get_prototype : t -> TextMetrics.t) =
      fun (x15812 : t) ->
        TextMetrics.t_of_js (Ojs.get_prop_ascii (t_to_js x15812) "prototype")
    let (set_prototype : t -> TextMetrics.t -> unit) =
      fun (x15813 : t) ->
        fun (x15814 : TextMetrics.t) ->
          Ojs.set_prop_ascii (t_to_js x15813) "prototype"
            (TextMetrics.t_to_js x15814)
    let (create : t -> TextMetrics.t) =
      fun (x15815 : t) ->
        TextMetrics.t_of_js (Ojs.new_obj (t_to_js x15815) [||])
  end
 and
  TextMetrics:sig
                type t = [ `TextMetrics ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `TextMetrics ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `TextMetrics ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `TextMetrics ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_actualBoundingBoxAscent : 'tags this -> float
                val get_actualBoundingBoxDescent : 'tags this -> float
                val get_actualBoundingBoxLeft : 'tags this -> float
                val get_actualBoundingBoxRight : 'tags this -> float
                val get_fontBoundingBoxAscent : 'tags this -> float
                val get_fontBoundingBoxDescent : 'tags this -> float
                val get_width : 'tags this -> float
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `TextMetrics ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15817 : Ojs.t) -> t_of_js x15817
    and t_0_to_js : t_0 -> Ojs.t = fun (x15816 : t) -> t_to_js x15816
    type tags = [ `TextMetrics ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextMetrics ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15820 : Ojs.t) -> intf_of_js __tags_of_js x15820
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15818 : __tags intf) -> intf_to_js __tags_to_js x15818
    let (get_actualBoundingBoxAscent : 'tags this -> float) =
      fun (x15822 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15822)
             "actualBoundingBoxAscent")
    let (get_actualBoundingBoxDescent : 'tags this -> float) =
      fun (x15824 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15824)
             "actualBoundingBoxDescent")
    let (get_actualBoundingBoxLeft : 'tags this -> float) =
      fun (x15826 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15826)
             "actualBoundingBoxLeft")
    let (get_actualBoundingBoxRight : 'tags this -> float) =
      fun (x15828 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15828)
             "actualBoundingBoxRight")
    let (get_fontBoundingBoxAscent : 'tags this -> float) =
      fun (x15830 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15830)
             "fontBoundingBoxAscent")
    let (get_fontBoundingBoxDescent : 'tags this -> float) =
      fun (x15832 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15832)
             "fontBoundingBoxDescent")
    let (get_width : 'tags this -> float) =
      fun (x15834 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15834) "width")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextMetrics")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextMetrics") [||])
  end
module TextEncoderCommon =
  struct
    type t = [ `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15837 : Ojs.t) -> t_of_js x15837
    and t_0_to_js : t_0 -> Ojs.t = fun (x15836 : t) -> t_to_js x15836
    type tags = [ `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15840 : Ojs.t) -> intf_of_js __tags_of_js x15840
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15838 : __tags intf) -> intf_to_js __tags_to_js x15838
    let (get_encoding : 'tags this -> string) =
      fun (x15842 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15842) "encoding")
    let cast_from = Obj.magic
  end
module GenericTransformStream =
  struct
    type t = [ `GenericTransformStream ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15845 : Ojs.t) -> t_of_js x15845
    and t_0_to_js : t_0 -> Ojs.t = fun (x15844 : t) -> t_to_js x15844
    type tags = [ `GenericTransformStream ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GenericTransformStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15848 : Ojs.t) -> intf_of_js __tags_of_js x15848
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15846 : __tags intf) -> intf_to_js __tags_to_js x15846
    let (get_readable : 'tags this -> ReadableStream.t_0) =
      fun (x15850 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15850) "readable")
    let (get_writable : 'tags this -> WritableStream.t_0) =
      fun (x15852 : 'tags this) ->
        WritableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15852) "writable")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface105:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TextEncoderStream.t
                          val set_prototype :
                            t -> TextEncoderStream.t -> unit
                          val create : t -> TextEncoderStream.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15855 : Ojs.t) -> x15855
    and t_to_js : t -> Ojs.t = fun (x15854 : Ojs.t) -> x15854
    let (get_prototype : t -> TextEncoderStream.t) =
      fun (x15856 : t) ->
        TextEncoderStream.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15856) "prototype")
    let (set_prototype : t -> TextEncoderStream.t -> unit) =
      fun (x15857 : t) ->
        fun (x15858 : TextEncoderStream.t) ->
          Ojs.set_prop_ascii (t_to_js x15857) "prototype"
            (TextEncoderStream.t_to_js x15858)
    let (create : t -> TextEncoderStream.t) =
      fun (x15859 : t) ->
        TextEncoderStream.t_of_js (Ojs.new_obj (t_to_js x15859) [||])
  end
 and
  TextEncoderStream:sig
                      type t =
                        [ `GenericTransformStream  | `TextEncoderCommon 
                        | `TextEncoderStream ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags =
                        [ `GenericTransformStream  | `TextEncoderCommon 
                        | `TextEncoderStream ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags =
                          [ `GenericTransformStream  | `TextEncoderCommon 
                          | `TextEncoderStream ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `TextEncoderStream ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_readable :
                        'tags this -> Uint8Array.t_0 ReadableStream.t
                      val get_writable :
                        'tags this -> string WritableStream.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create : unit -> t
                    end =
  struct
    type t =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15861 : Ojs.t) -> t_of_js x15861
    and t_0_to_js : t_0 -> Ojs.t = fun (x15860 : t) -> t_to_js x15860
    type tags =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15864 : Ojs.t) -> intf_of_js __tags_of_js x15864
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15862 : __tags intf) -> intf_to_js __tags_to_js x15862
    let (get_readable : 'tags this -> Uint8Array.t_0 ReadableStream.t) =
      fun (x15866 : 'tags this) ->
        ReadableStream.t_of_js Uint8Array.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15866) "readable")
    let (get_writable : 'tags this -> string WritableStream.t) =
      fun (x15869 : 'tags this) ->
        WritableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15869) "writable")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextEncoderStream") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoderStream")
             [||])
  end
module TextEncoderEncodeIntoResult =
  struct
    type t = [ `TextEncoderEncodeIntoResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15873 : Ojs.t) -> t_of_js x15873
    and t_0_to_js : t_0 -> Ojs.t = fun (x15872 : t) -> t_to_js x15872
    type tags = [ `TextEncoderEncodeIntoResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `TextEncoderEncodeIntoResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15876 : Ojs.t) -> intf_of_js __tags_of_js x15876
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15874 : __tags intf) -> intf_to_js __tags_to_js x15874
    let (get_read : 'tags this -> float) =
      fun (x15878 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15878) "read")
    let (set_read : 'tags this -> float -> unit) =
      fun (x15880 : 'tags this) ->
        fun (x15881 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15880) "read"
            (Ojs.float_to_js x15881)
    let (get_written : 'tags this -> float) =
      fun (x15883 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15883) "written")
    let (set_written : 'tags this -> float -> unit) =
      fun (x15885 : 'tags this) ->
        fun (x15886 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15885) "written"
            (Ojs.float_to_js x15886)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface104:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TextEncoder.t
                          val set_prototype : t -> TextEncoder.t -> unit
                          val create : t -> TextEncoder.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15889 : Ojs.t) -> x15889
    and t_to_js : t -> Ojs.t = fun (x15888 : Ojs.t) -> x15888
    let (get_prototype : t -> TextEncoder.t) =
      fun (x15890 : t) ->
        TextEncoder.t_of_js (Ojs.get_prop_ascii (t_to_js x15890) "prototype")
    let (set_prototype : t -> TextEncoder.t -> unit) =
      fun (x15891 : t) ->
        fun (x15892 : TextEncoder.t) ->
          Ojs.set_prop_ascii (t_to_js x15891) "prototype"
            (TextEncoder.t_to_js x15892)
    let (create : t -> TextEncoder.t) =
      fun (x15893 : t) ->
        TextEncoder.t_of_js (Ojs.new_obj (t_to_js x15893) [||])
  end
 and
  TextEncoder:sig
                type t = [ `TextEncoder  | `TextEncoderCommon ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `TextEncoder  | `TextEncoderCommon ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `TextEncoder  | `TextEncoderCommon ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `TextEncoder ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val encode :
                  'tags this -> ?input:string -> unit -> Uint8Array.t_0
                val encodeInto :
                  'tags this ->
                    source:string ->
                      destination:Uint8Array.t_0 ->
                        TextEncoderEncodeIntoResult.t
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `TextEncoder  | `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15895 : Ojs.t) -> t_of_js x15895
    and t_0_to_js : t_0 -> Ojs.t = fun (x15894 : t) -> t_to_js x15894
    type tags = [ `TextEncoder  | `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15898 : Ojs.t) -> intf_of_js __tags_of_js x15898
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15896 : __tags intf) -> intf_to_js __tags_to_js x15896
    let (encode : 'tags this -> ?input:string -> unit -> Uint8Array.t_0) =
      fun (x15903 : 'tags this) ->
        fun ?input:(x15900 : string option) ->
          fun () ->
            Uint8Array.t_0_of_js
              (let x15905 = this_to_js Obj.magic x15903 in
               Ojs.call (Ojs.get_prop_ascii x15905 "encode") "apply"
                 [|x15905;((let x15901 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15900 with
                             | Some x15902 ->
                                 ignore
                                   (Ojs.call x15901 "push"
                                      [|(Ojs.string_to_js x15902)|])
                             | None -> ());
                            x15901))|])
    let (encodeInto :
      'tags this ->
        source:string ->
          destination:Uint8Array.t_0 -> TextEncoderEncodeIntoResult.t)
      =
      fun (x15908 : 'tags this) ->
        fun ~source:(x15906 : string) ->
          fun ~destination:(x15907 : Uint8Array.t_0) ->
            TextEncoderEncodeIntoResult.t_of_js
              (Ojs.call (this_to_js Obj.magic x15908) "encodeInto"
                 [|(Ojs.string_to_js x15906);(Uint8Array.t_0_to_js x15907)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextEncoder")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoder") [||])
  end
module TextDecoderOptions =
  struct
    type t = [ `TextDecoderOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15911 : Ojs.t) -> t_of_js x15911
    and t_0_to_js : t_0 -> Ojs.t = fun (x15910 : t) -> t_to_js x15910
    type tags = [ `TextDecoderOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15914 : Ojs.t) -> intf_of_js __tags_of_js x15914
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15912 : __tags intf) -> intf_to_js __tags_to_js x15912
    let (get_fatal : 'tags this -> bool) =
      fun (x15916 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15916) "fatal")
    let (set_fatal : 'tags this -> bool -> unit) =
      fun (x15918 : 'tags this) ->
        fun (x15919 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15918) "fatal"
            (Ojs.bool_to_js x15919)
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x15921 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15921) "ignoreBOM")
    let (set_ignoreBOM : 'tags this -> bool -> unit) =
      fun (x15923 : 'tags this) ->
        fun (x15924 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15923) "ignoreBOM"
            (Ojs.bool_to_js x15924)
    let cast_from = Obj.magic
  end
module TextDecoderCommon =
  struct
    type t = [ `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15927 : Ojs.t) -> t_of_js x15927
    and t_0_to_js : t_0 -> Ojs.t = fun (x15926 : t) -> t_to_js x15926
    type tags = [ `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15930 : Ojs.t) -> intf_of_js __tags_of_js x15930
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15928 : __tags intf) -> intf_to_js __tags_to_js x15928
    let (get_encoding : 'tags this -> string) =
      fun (x15932 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15932) "encoding")
    let (get_fatal : 'tags this -> bool) =
      fun (x15934 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15934) "fatal")
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x15936 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15936) "ignoreBOM")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface103:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TextDecoderStream.t
                          val set_prototype :
                            t -> TextDecoderStream.t -> unit
                          val create :
                            t ->
                              ?label:string ->
                                ?options:TextDecoderOptions.t ->
                                  unit -> TextDecoderStream.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15939 : Ojs.t) -> x15939
    and t_to_js : t -> Ojs.t = fun (x15938 : Ojs.t) -> x15938
    let (get_prototype : t -> TextDecoderStream.t) =
      fun (x15940 : t) ->
        TextDecoderStream.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15940) "prototype")
    let (set_prototype : t -> TextDecoderStream.t -> unit) =
      fun (x15941 : t) ->
        fun (x15942 : TextDecoderStream.t) ->
          Ojs.set_prop_ascii (t_to_js x15941) "prototype"
            (TextDecoderStream.t_to_js x15942)
    let (create :
      t ->
        ?label:string ->
          ?options:TextDecoderOptions.t -> unit -> TextDecoderStream.t)
      =
      fun (x15948 : t) ->
        fun ?label:(x15943 : string option) ->
          fun ?options:(x15944 : TextDecoderOptions.t option) ->
            fun () ->
              TextDecoderStream.t_of_js
                (Ojs.new_obj_arr (t_to_js x15948)
                   (let x15945 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x15943 with
                     | Some x15947 ->
                         ignore
                           (Ojs.call x15945 "push"
                              [|(Ojs.string_to_js x15947)|])
                     | None -> ());
                    (match x15944 with
                     | Some x15946 ->
                         ignore
                           (Ojs.call x15945 "push"
                              [|(TextDecoderOptions.t_to_js x15946)|])
                     | None -> ());
                    x15945))
  end
 and
  TextDecoderStream:sig
                      type t =
                        [ `GenericTransformStream  | `TextDecoderCommon 
                        | `TextDecoderStream ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags =
                        [ `GenericTransformStream  | `TextDecoderCommon 
                        | `TextDecoderStream ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags =
                          [ `GenericTransformStream  | `TextDecoderCommon 
                          | `TextDecoderStream ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `TextDecoderStream ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_readable :
                        'tags this -> string ReadableStream.t
                      val get_writable :
                        'tags this -> BufferSource.t WritableStream.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create :
                        ?label:string ->
                          ?options:TextDecoderOptions.t -> unit -> t
                    end =
  struct
    type t =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15950 : Ojs.t) -> t_of_js x15950
    and t_0_to_js : t_0 -> Ojs.t = fun (x15949 : t) -> t_to_js x15949
    type tags =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15953 : Ojs.t) -> intf_of_js __tags_of_js x15953
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15951 : __tags intf) -> intf_to_js __tags_to_js x15951
    let (get_readable : 'tags this -> string ReadableStream.t) =
      fun (x15955 : 'tags this) ->
        ReadableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15955) "readable")
    let (get_writable : 'tags this -> BufferSource.t WritableStream.t) =
      fun (x15958 : 'tags this) ->
        WritableStream.t_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15958) "writable")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextDecoderStream") "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x15961 : string option) ->
        fun ?options:(x15962 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "TextDecoderStream")
                 (let x15963 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x15961 with
                   | Some x15965 ->
                       ignore
                         (Ojs.call x15963 "push"
                            [|(Ojs.string_to_js x15965)|])
                   | None -> ());
                  (match x15962 with
                   | Some x15964 ->
                       ignore
                         (Ojs.call x15963 "push"
                            [|(TextDecoderOptions.t_to_js x15964)|])
                   | None -> ());
                  x15963))
  end
module TextDecodeOptions =
  struct
    type t = [ `TextDecodeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15967 : Ojs.t) -> t_of_js x15967
    and t_0_to_js : t_0 -> Ojs.t = fun (x15966 : t) -> t_to_js x15966
    type tags = [ `TextDecodeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecodeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15970 : Ojs.t) -> intf_of_js __tags_of_js x15970
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15968 : __tags intf) -> intf_to_js __tags_to_js x15968
    let (get_stream : 'tags this -> bool) =
      fun (x15972 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15972) "stream")
    let (set_stream : 'tags this -> bool -> unit) =
      fun (x15974 : 'tags this) ->
        fun (x15975 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15974) "stream"
            (Ojs.bool_to_js x15975)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface102:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TextDecoder.t
                          val set_prototype : t -> TextDecoder.t -> unit
                          val create :
                            t ->
                              ?label:string ->
                                ?options:TextDecoderOptions.t ->
                                  unit -> TextDecoder.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15978 : Ojs.t) -> x15978
    and t_to_js : t -> Ojs.t = fun (x15977 : Ojs.t) -> x15977
    let (get_prototype : t -> TextDecoder.t) =
      fun (x15979 : t) ->
        TextDecoder.t_of_js (Ojs.get_prop_ascii (t_to_js x15979) "prototype")
    let (set_prototype : t -> TextDecoder.t -> unit) =
      fun (x15980 : t) ->
        fun (x15981 : TextDecoder.t) ->
          Ojs.set_prop_ascii (t_to_js x15980) "prototype"
            (TextDecoder.t_to_js x15981)
    let (create :
      t ->
        ?label:string ->
          ?options:TextDecoderOptions.t -> unit -> TextDecoder.t)
      =
      fun (x15987 : t) ->
        fun ?label:(x15982 : string option) ->
          fun ?options:(x15983 : TextDecoderOptions.t option) ->
            fun () ->
              TextDecoder.t_of_js
                (Ojs.new_obj_arr (t_to_js x15987)
                   (let x15984 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x15982 with
                     | Some x15986 ->
                         ignore
                           (Ojs.call x15984 "push"
                              [|(Ojs.string_to_js x15986)|])
                     | None -> ());
                    (match x15983 with
                     | Some x15985 ->
                         ignore
                           (Ojs.call x15984 "push"
                              [|(TextDecoderOptions.t_to_js x15985)|])
                     | None -> ());
                    x15984))
  end
 and
  TextDecoder:sig
                type t = [ `TextDecoder  | `TextDecoderCommon ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `TextDecoder  | `TextDecoderCommon ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `TextDecoder  | `TextDecoderCommon ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `TextDecoder ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val decode :
                  'tags this ->
                    ?input:BufferSource.t ->
                      ?options:TextDecodeOptions.t -> unit -> string
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create :
                  ?label:string -> ?options:TextDecoderOptions.t -> unit -> t
              end =
  struct
    type t = [ `TextDecoder  | `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15989 : Ojs.t) -> t_of_js x15989
    and t_0_to_js : t_0 -> Ojs.t = fun (x15988 : t) -> t_to_js x15988
    type tags = [ `TextDecoder  | `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15992 : Ojs.t) -> intf_of_js __tags_of_js x15992
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15990 : __tags intf) -> intf_to_js __tags_to_js x15990
    let (decode :
      'tags this ->
        ?input:BufferSource.t ->
          ?options:TextDecodeOptions.t -> unit -> string)
      =
      fun (x15999 : 'tags this) ->
        fun ?input:(x15994 : BufferSource.t option) ->
          fun ?options:(x15995 : TextDecodeOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x16001 = this_to_js Obj.magic x15999 in
                 Ojs.call (Ojs.get_prop_ascii x16001 "decode") "apply"
                   [|x16001;((let x15996 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15994 with
                               | Some x15998 ->
                                   ignore
                                     (Ojs.call x15996 "push"
                                        [|(BufferSource.t_to_js x15998)|])
                               | None -> ());
                              (match x15995 with
                               | Some x15997 ->
                                   ignore
                                     (Ojs.call x15996 "push"
                                        [|(TextDecodeOptions.t_to_js x15997)|])
                               | None -> ());
                              x15996))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextDecoder")
             "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x16002 : string option) ->
        fun ?options:(x16003 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TextDecoder")
                 (let x16004 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x16002 with
                   | Some x16006 ->
                       ignore
                         (Ojs.call x16004 "push"
                            [|(Ojs.string_to_js x16006)|])
                   | None -> ());
                  (match x16003 with
                   | Some x16005 ->
                       ignore
                         (Ojs.call x16004 "push"
                            [|(TextDecoderOptions.t_to_js x16005)|])
                   | None -> ());
                  x16004))
  end
module rec
  AnonymousInterface101:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebAssembly.Table.t
                          val set_prototype :
                            t -> WebAssembly.Table.t -> unit
                          val create :
                            t ->
                              descriptor:WebAssembly.TableDescriptor.t ->
                                ?value:any -> unit -> WebAssembly.Table.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x16008 : Ojs.t) -> x16008
    and t_to_js : t -> Ojs.t = fun (x16007 : Ojs.t) -> x16007
    let (get_prototype : t -> WebAssembly.Table.t) =
      fun (x16009 : t) ->
        WebAssembly.Table.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16009) "prototype")
    let (set_prototype : t -> WebAssembly.Table.t -> unit) =
      fun (x16010 : t) ->
        fun (x16011 : WebAssembly.Table.t) ->
          Ojs.set_prop_ascii (t_to_js x16010) "prototype"
            (WebAssembly.Table.t_to_js x16011)
    let (create :
      t ->
        descriptor:WebAssembly.TableDescriptor.t ->
          ?value:any -> unit -> WebAssembly.Table.t)
      =
      fun (x16016 : t) ->
        fun ~descriptor:(x16012 : WebAssembly.TableDescriptor.t) ->
          fun ?value:(x16013 : any option) ->
            fun () ->
              WebAssembly.Table.t_of_js
                (Ojs.new_obj_arr (t_to_js x16016)
                   (let x16014 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x16014 "push"
                         [|(WebAssembly.TableDescriptor.t_to_js x16012)|]);
                    (match x16013 with
                     | Some x16015 ->
                         ignore
                           (Ojs.call x16014 "push" [|(any_to_js x16015)|])
                     | None -> ());
                    x16014))
  end
 and
  AnonymousInterface12:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> WebAssembly.CompileError.t
                         val set_prototype :
                           t -> WebAssembly.CompileError.t -> unit
                         val create :
                           t ->
                             ?message:string ->
                               unit -> WebAssembly.CompileError.t
                         val apply :
                           t ->
                             ?message:string ->
                               unit -> WebAssembly.CompileError.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x16018 : Ojs.t) -> x16018
    and t_to_js : t -> Ojs.t = fun (x16017 : Ojs.t) -> x16017
    let (get_prototype : t -> WebAssembly.CompileError.t) =
      fun (x16019 : t) ->
        WebAssembly.CompileError.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16019) "prototype")
    let (set_prototype : t -> WebAssembly.CompileError.t -> unit) =
      fun (x16020 : t) ->
        fun (x16021 : WebAssembly.CompileError.t) ->
          Ojs.set_prop_ascii (t_to_js x16020) "prototype"
            (WebAssembly.CompileError.t_to_js x16021)
    let (create : t -> ?message:string -> unit -> WebAssembly.CompileError.t)
      =
      fun (x16025 : t) ->
        fun ?message:(x16022 : string option) ->
          fun () ->
            WebAssembly.CompileError.t_of_js
              (Ojs.new_obj_arr (t_to_js x16025)
                 (let x16023 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x16022 with
                   | Some x16024 ->
                       ignore
                         (Ojs.call x16023 "push"
                            [|(Ojs.string_to_js x16024)|])
                   | None -> ());
                  x16023))
    let (apply : t -> ?message:string -> unit -> WebAssembly.CompileError.t)
      =
      fun (x16029 : t) ->
        fun ?message:(x16026 : string option) ->
          fun () ->
            WebAssembly.CompileError.t_of_js
              (Ojs.call (t_to_js x16029) "apply"
                 [|Ojs.null;((let x16027 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x16026 with
                               | Some x16028 ->
                                   ignore
                                     (Ojs.call x16027 "push"
                                        [|(Ojs.string_to_js x16028)|])
                               | None -> ());
                              x16027))|])
  end and
       AnonymousInterface42:sig
                              type t = private Ojs.t
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val get_prototype : t -> WebAssembly.Global.t
                              val set_prototype :
                                t -> WebAssembly.Global.t -> unit
                              val create :
                                t ->
                                  descriptor:WebAssembly.GlobalDescriptor.t
                                    -> ?v:any -> unit -> WebAssembly.Global.t
                            end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x16031 : Ojs.t) -> x16031
         and t_to_js : t -> Ojs.t = fun (x16030 : Ojs.t) -> x16030
         let (get_prototype : t -> WebAssembly.Global.t) =
           fun (x16032 : t) ->
             WebAssembly.Global.t_of_js
               (Ojs.get_prop_ascii (t_to_js x16032) "prototype")
         let (set_prototype : t -> WebAssembly.Global.t -> unit) =
           fun (x16033 : t) ->
             fun (x16034 : WebAssembly.Global.t) ->
               Ojs.set_prop_ascii (t_to_js x16033) "prototype"
                 (WebAssembly.Global.t_to_js x16034)
         let (create :
           t ->
             descriptor:WebAssembly.GlobalDescriptor.t ->
               ?v:any -> unit -> WebAssembly.Global.t)
           =
           fun (x16039 : t) ->
             fun ~descriptor:(x16035 : WebAssembly.GlobalDescriptor.t) ->
               fun ?v:(x16036 : any option) ->
                 fun () ->
                   WebAssembly.Global.t_of_js
                     (Ojs.new_obj_arr (t_to_js x16039)
                        (let x16037 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x16037 "push"
                              [|(WebAssembly.GlobalDescriptor.t_to_js x16035)|]);
                         (match x16036 with
                          | Some x16038 ->
                              ignore
                                (Ojs.call x16037 "push"
                                   [|(any_to_js x16038)|])
                          | None -> ());
                         x16037))
       end and
            AnonymousInterface58:sig
                                   type t = private Ojs.t
                                   val t_to_js : t -> Ojs.t
                                   val t_of_js : Ojs.t -> t
                                   val get_prototype :
                                     t -> WebAssembly.Instance.t
                                   val set_prototype :
                                     t -> WebAssembly.Instance.t -> unit
                                   val create :
                                     t ->
                                       module_:WebAssembly.Module.t ->
                                         ?importObject:WebAssembly.Imports.t
                                           -> unit -> WebAssembly.Instance.t
                                 end =
            struct
              type t = Ojs.t
              let rec t_of_js : Ojs.t -> t = fun (x16041 : Ojs.t) -> x16041
              and t_to_js : t -> Ojs.t = fun (x16040 : Ojs.t) -> x16040
              let (get_prototype : t -> WebAssembly.Instance.t) =
                fun (x16042 : t) ->
                  WebAssembly.Instance.t_of_js
                    (Ojs.get_prop_ascii (t_to_js x16042) "prototype")
              let (set_prototype : t -> WebAssembly.Instance.t -> unit) =
                fun (x16043 : t) ->
                  fun (x16044 : WebAssembly.Instance.t) ->
                    Ojs.set_prop_ascii (t_to_js x16043) "prototype"
                      (WebAssembly.Instance.t_to_js x16044)
              let (create :
                t ->
                  module_:WebAssembly.Module.t ->
                    ?importObject:WebAssembly.Imports.t ->
                      unit -> WebAssembly.Instance.t)
                =
                fun (x16049 : t) ->
                  fun ~module_:(x16045 : WebAssembly.Module.t) ->
                    fun ?importObject:(x16046 : WebAssembly.Imports.t option)
                      ->
                      fun () ->
                        WebAssembly.Instance.t_of_js
                          (Ojs.new_obj_arr (t_to_js x16049)
                             (let x16047 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x16047 "push"
                                   [|(WebAssembly.Module.t_to_js x16045)|]);
                              (match x16046 with
                               | Some x16048 ->
                                   ignore
                                     (Ojs.call x16047 "push"
                                        [|(WebAssembly.Imports.t_to_js x16048)|])
                               | None -> ());
                              x16047))
            end and
                 AnonymousInterface59:sig
                                        type t = private Ojs.t
                                        val t_to_js : t -> Ojs.t
                                        val t_of_js : Ojs.t -> t
                                        val get_prototype :
                                          t -> WebAssembly.LinkError.t
                                        val set_prototype :
                                          t ->
                                            WebAssembly.LinkError.t -> unit
                                        val create :
                                          t ->
                                            ?message:string ->
                                              unit -> WebAssembly.LinkError.t
                                        val apply :
                                          t ->
                                            ?message:string ->
                                              unit -> WebAssembly.LinkError.t
                                      end =
                 struct
                   type t = Ojs.t
                   let rec t_of_js : Ojs.t -> t =
                     fun (x16051 : Ojs.t) -> x16051
                   and t_to_js : t -> Ojs.t = fun (x16050 : Ojs.t) -> x16050
                   let (get_prototype : t -> WebAssembly.LinkError.t) =
                     fun (x16052 : t) ->
                       WebAssembly.LinkError.t_of_js
                         (Ojs.get_prop_ascii (t_to_js x16052) "prototype")
                   let (set_prototype : t -> WebAssembly.LinkError.t -> unit)
                     =
                     fun (x16053 : t) ->
                       fun (x16054 : WebAssembly.LinkError.t) ->
                         Ojs.set_prop_ascii (t_to_js x16053) "prototype"
                           (WebAssembly.LinkError.t_to_js x16054)
                   let (create :
                     t -> ?message:string -> unit -> WebAssembly.LinkError.t)
                     =
                     fun (x16058 : t) ->
                       fun ?message:(x16055 : string option) ->
                         fun () ->
                           WebAssembly.LinkError.t_of_js
                             (Ojs.new_obj_arr (t_to_js x16058)
                                (let x16056 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x16055 with
                                  | Some x16057 ->
                                      ignore
                                        (Ojs.call x16056 "push"
                                           [|(Ojs.string_to_js x16057)|])
                                  | None -> ());
                                 x16056))
                   let (apply :
                     t -> ?message:string -> unit -> WebAssembly.LinkError.t)
                     =
                     fun (x16062 : t) ->
                       fun ?message:(x16059 : string option) ->
                         fun () ->
                           WebAssembly.LinkError.t_of_js
                             (Ojs.call (t_to_js x16062) "apply"
                                [|Ojs.null;((let x16060 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             (match x16059 with
                                              | Some x16061 ->
                                                  ignore
                                                    (Ojs.call x16060 "push"
                                                       [|(Ojs.string_to_js
                                                            x16061)|])
                                              | None -> ());
                                             x16060))|])
                 end and
                      AnonymousInterface61:sig
                                             type t = private Ojs.t
                                             val t_to_js : t -> Ojs.t
                                             val t_of_js : Ojs.t -> t
                                             val get_prototype :
                                               t -> WebAssembly.Memory.t
                                             val set_prototype :
                                               t ->
                                                 WebAssembly.Memory.t -> unit
                                             val create :
                                               t ->
                                                 descriptor:WebAssembly.MemoryDescriptor.t
                                                   -> WebAssembly.Memory.t
                                           end =
                      struct
                        type t = Ojs.t
                        let rec t_of_js : Ojs.t -> t =
                          fun (x16064 : Ojs.t) -> x16064
                        and t_to_js : t -> Ojs.t =
                          fun (x16063 : Ojs.t) -> x16063
                        let (get_prototype : t -> WebAssembly.Memory.t) =
                          fun (x16065 : t) ->
                            WebAssembly.Memory.t_of_js
                              (Ojs.get_prop_ascii (t_to_js x16065)
                                 "prototype")
                        let (set_prototype :
                          t -> WebAssembly.Memory.t -> unit) =
                          fun (x16066 : t) ->
                            fun (x16067 : WebAssembly.Memory.t) ->
                              Ojs.set_prop_ascii (t_to_js x16066) "prototype"
                                (WebAssembly.Memory.t_to_js x16067)
                        let (create :
                          t ->
                            descriptor:WebAssembly.MemoryDescriptor.t ->
                              WebAssembly.Memory.t)
                          =
                          fun (x16069 : t) ->
                            fun
                              ~descriptor:(x16068 :
                                            WebAssembly.MemoryDescriptor.t)
                              ->
                              WebAssembly.Memory.t_of_js
                                (Ojs.new_obj (t_to_js x16069)
                                   [|(WebAssembly.MemoryDescriptor.t_to_js
                                        x16068)|])
                      end and
                           AnonymousInterface65:sig
                                                  type t = private Ojs.t
                                                  val t_to_js : t -> Ojs.t
                                                  val t_of_js : Ojs.t -> t
                                                  val get_prototype :
                                                    t -> WebAssembly.Module.t
                                                  val set_prototype :
                                                    t ->
                                                      WebAssembly.Module.t ->
                                                        unit
                                                  val create :
                                                    t ->
                                                      bytes:BufferSource.t ->
                                                        WebAssembly.Module.t
                                                  val customSections :
                                                    t ->
                                                      moduleObject:WebAssembly.Module.t
                                                        ->
                                                        sectionName:string ->
                                                          ArrayBuffer.t_0
                                                            list
                                                  val exports :
                                                    t ->
                                                      moduleObject:WebAssembly.Module.t
                                                        ->
                                                        WebAssembly.ModuleExportDescriptor.t
                                                          list
                                                  val imports :
                                                    t ->
                                                      moduleObject:WebAssembly.Module.t
                                                        ->
                                                        WebAssembly.ModuleImportDescriptor.t
                                                          list
                                                end =
                           struct
                             type t = Ojs.t
                             let rec t_of_js : Ojs.t -> t =
                               fun (x16071 : Ojs.t) -> x16071
                             and t_to_js : t -> Ojs.t =
                               fun (x16070 : Ojs.t) -> x16070
                             let (get_prototype : t -> WebAssembly.Module.t)
                               =
                               fun (x16072 : t) ->
                                 WebAssembly.Module.t_of_js
                                   (Ojs.get_prop_ascii (t_to_js x16072)
                                      "prototype")
                             let (set_prototype :
                               t -> WebAssembly.Module.t -> unit) =
                               fun (x16073 : t) ->
                                 fun (x16074 : WebAssembly.Module.t) ->
                                   Ojs.set_prop_ascii (t_to_js x16073)
                                     "prototype"
                                     (WebAssembly.Module.t_to_js x16074)
                             let (create :
                               t ->
                                 bytes:BufferSource.t -> WebAssembly.Module.t)
                               =
                               fun (x16076 : t) ->
                                 fun ~bytes:(x16075 : BufferSource.t) ->
                                   WebAssembly.Module.t_of_js
                                     (Ojs.new_obj (t_to_js x16076)
                                        [|(BufferSource.t_to_js x16075)|])
                             let (customSections :
                               t ->
                                 moduleObject:WebAssembly.Module.t ->
                                   sectionName:string -> ArrayBuffer.t_0 list)
                               =
                               fun (x16079 : t) ->
                                 fun
                                   ~moduleObject:(x16077 :
                                                   WebAssembly.Module.t)
                                   ->
                                   fun ~sectionName:(x16078 : string) ->
                                     Ojs.list_of_js ArrayBuffer.t_0_of_js
                                       (Ojs.call (t_to_js x16079)
                                          "customSections"
                                          [|(WebAssembly.Module.t_to_js
                                               x16077);(Ojs.string_to_js
                                                          x16078)|])
                             let (exports :
                               t ->
                                 moduleObject:WebAssembly.Module.t ->
                                   WebAssembly.ModuleExportDescriptor.t list)
                               =
                               fun (x16082 : t) ->
                                 fun
                                   ~moduleObject:(x16081 :
                                                   WebAssembly.Module.t)
                                   ->
                                   Ojs.list_of_js
                                     WebAssembly.ModuleExportDescriptor.t_of_js
                                     (Ojs.call (t_to_js x16082) "exports"
                                        [|(WebAssembly.Module.t_to_js x16081)|])
                             let (imports :
                               t ->
                                 moduleObject:WebAssembly.Module.t ->
                                   WebAssembly.ModuleImportDescriptor.t list)
                               =
                               fun (x16085 : t) ->
                                 fun
                                   ~moduleObject:(x16084 :
                                                   WebAssembly.Module.t)
                                   ->
                                   Ojs.list_of_js
                                     WebAssembly.ModuleImportDescriptor.t_of_js
                                     (Ojs.call (t_to_js x16085) "imports"
                                        [|(WebAssembly.Module.t_to_js x16084)|])
                           end and
                                AnonymousInterface92:sig
                                                       type t = private Ojs.t
                                                       val t_to_js :
                                                         t -> Ojs.t
                                                       val t_of_js :
                                                         Ojs.t -> t
                                                       val get_prototype :
                                                         t ->
                                                           WebAssembly.RuntimeError.t
                                                       val set_prototype :
                                                         t ->
                                                           WebAssembly.RuntimeError.t
                                                             -> unit
                                                       val create :
                                                         t ->
                                                           ?message:string ->
                                                             unit ->
                                                               WebAssembly.RuntimeError.t
                                                       val apply :
                                                         t ->
                                                           ?message:string ->
                                                             unit ->
                                                               WebAssembly.RuntimeError.t
                                                     end =
                                struct
                                  type t = Ojs.t
                                  let rec t_of_js : Ojs.t -> t =
                                    fun (x16088 : Ojs.t) -> x16088
                                  and t_to_js : t -> Ojs.t =
                                    fun (x16087 : Ojs.t) -> x16087
                                  let (get_prototype :
                                    t -> WebAssembly.RuntimeError.t) =
                                    fun (x16089 : t) ->
                                      WebAssembly.RuntimeError.t_of_js
                                        (Ojs.get_prop_ascii (t_to_js x16089)
                                           "prototype")
                                  let (set_prototype :
                                    t -> WebAssembly.RuntimeError.t -> unit)
                                    =
                                    fun (x16090 : t) ->
                                      fun
                                        (x16091 : WebAssembly.RuntimeError.t)
                                        ->
                                        Ojs.set_prop_ascii (t_to_js x16090)
                                          "prototype"
                                          (WebAssembly.RuntimeError.t_to_js
                                             x16091)
                                  let (create :
                                    t ->
                                      ?message:string ->
                                        unit -> WebAssembly.RuntimeError.t)
                                    =
                                    fun (x16095 : t) ->
                                      fun ?message:(x16092 : string option)
                                        ->
                                        fun () ->
                                          WebAssembly.RuntimeError.t_of_js
                                            (Ojs.new_obj_arr (t_to_js x16095)
                                               (let x16093 =
                                                  Ojs.new_obj
                                                    (Ojs.get_prop_ascii
                                                       Ojs.global "Array")
                                                    [||] in
                                                (match x16092 with
                                                 | Some x16094 ->
                                                     ignore
                                                       (Ojs.call x16093
                                                          "push"
                                                          [|(Ojs.string_to_js
                                                               x16094)|])
                                                 | None -> ());
                                                x16093))
                                  let (apply :
                                    t ->
                                      ?message:string ->
                                        unit -> WebAssembly.RuntimeError.t)
                                    =
                                    fun (x16099 : t) ->
                                      fun ?message:(x16096 : string option)
                                        ->
                                        fun () ->
                                          WebAssembly.RuntimeError.t_of_js
                                            (Ojs.call (t_to_js x16099)
                                               "apply"
                                               [|Ojs.null;((let x16097 =
                                                              Ojs.new_obj
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Array")
                                                                [||] in
                                                            (match x16096
                                                             with
                                                             | Some x16098 ->
                                                                 ignore
                                                                   (Ojs.call
                                                                    x16097
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x16098)|])
                                                             | None -> ());
                                                            x16097))|])
                                end and
                                     WebAssembly:sig
                                                   module ImportExportKind :
                                                   sig
                                                     type t =
                                                       [ `L_s79_function 
                                                       | `L_s81_global 
                                                       | `L_s113_memory 
                                                       | `L_s189_table ]
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module
                                                   ModuleImportDescriptor :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_ModuleImportDescriptor
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_ModuleImportDescriptor
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_ModuleImportDescriptor
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_ModuleImportDescriptor
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_kind :
                                                       'tags this ->
                                                         ImportExportKind.t
                                                     val set_kind :
                                                       'tags this ->
                                                         ImportExportKind.t
                                                           -> unit
                                                     val get_module :
                                                       'tags this -> string
                                                     val set_module :
                                                       'tags this ->
                                                         string -> unit
                                                     val get_name :
                                                       'tags this -> string
                                                     val set_name :
                                                       'tags this ->
                                                         string -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module
                                                   ModuleExportDescriptor :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_ModuleExportDescriptor
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_ModuleExportDescriptor
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_ModuleExportDescriptor
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_ModuleExportDescriptor
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_kind :
                                                       'tags this ->
                                                         ImportExportKind.t
                                                     val set_kind :
                                                       'tags this ->
                                                         ImportExportKind.t
                                                           -> unit
                                                     val get_name :
                                                       'tags this -> string
                                                     val set_name :
                                                       'tags this ->
                                                         string -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module Module :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_Module ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_Module ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_Module
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_Module
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       BufferSource.t -> t
                                                     val customSections :
                                                       moduleObject:t ->
                                                         sectionName:string
                                                           ->
                                                           ArrayBuffer.t_0
                                                             list
                                                     val exports :
                                                       t ->
                                                         ModuleExportDescriptor.t
                                                           list
                                                     val imports :
                                                       t ->
                                                         ModuleImportDescriptor.t
                                                           list
                                                   end
                                                   module TableKind :
                                                   sig
                                                     type t =
                                                       [ `L_s36_anyfunc 
                                                       | `L_s69_externref ]
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module TableDescriptor :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_TableDescriptor
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_TableDescriptor
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_TableDescriptor
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_TableDescriptor
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_element :
                                                       'tags this ->
                                                         TableKind.t
                                                     val set_element :
                                                       'tags this ->
                                                         TableKind.t -> unit
                                                     val get_initial :
                                                       'tags this -> float
                                                     val set_initial :
                                                       'tags this ->
                                                         float -> unit
                                                     val get_maximum :
                                                       'tags this -> float
                                                     val set_maximum :
                                                       'tags this ->
                                                         float -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module Table :
                                                   sig
                                                     type t =
                                                       [ `WebAssembly_Table ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [ `WebAssembly_Table ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_Table ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_Table
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_length :
                                                       'tags this -> float
                                                     val get_ :
                                                       'tags this ->
                                                         index:float -> any
                                                     val grow :
                                                       'tags this ->
                                                         delta:float ->
                                                           ?value:any ->
                                                             unit -> float
                                                     val set_ :
                                                       'tags this ->
                                                         index:float ->
                                                           ?value:any ->
                                                             unit -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       descriptor:TableDescriptor.t
                                                         ->
                                                         ?value:any ->
                                                           unit -> t
                                                   end
                                                   module MemoryDescriptor :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_MemoryDescriptor
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_MemoryDescriptor
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_MemoryDescriptor
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_MemoryDescriptor
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_initial :
                                                       'tags this -> float
                                                     val set_initial :
                                                       'tags this ->
                                                         float -> unit
                                                     val get_maximum :
                                                       'tags this -> float
                                                     val set_maximum :
                                                       'tags this ->
                                                         float -> unit
                                                     val get_shared :
                                                       'tags this -> bool
                                                     val set_shared :
                                                       'tags this ->
                                                         bool -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module Memory :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_Memory ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_Memory ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_Memory
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_Memory
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_buffer :
                                                       'tags this ->
                                                         ArrayBuffer.t_0
                                                     val grow :
                                                       'tags this ->
                                                         delta:float -> float
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       MemoryDescriptor.t ->
                                                         t
                                                   end
                                                   module ValueType :
                                                   sig
                                                     type t =
                                                       [ `L_s36_anyfunc 
                                                       | `L_s69_externref 
                                                       | `L_s70_f32 
                                                       | `L_s71_f64 
                                                       | `L_s87_i32 
                                                       | `L_s88_i64 ]
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module GlobalDescriptor :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_GlobalDescriptor
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_GlobalDescriptor
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_GlobalDescriptor
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_GlobalDescriptor
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_mutable :
                                                       'tags this -> bool
                                                     val set_mutable :
                                                       'tags this ->
                                                         bool -> unit
                                                     val get_value :
                                                       'tags this ->
                                                         ValueType.t
                                                     val set_value :
                                                       'tags this ->
                                                         ValueType.t -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module Global :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_Global ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_Global ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_Global
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_Global
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_value :
                                                       'tags this -> any
                                                     val set_value :
                                                       'tags this ->
                                                         any -> unit
                                                     val valueOf :
                                                       'tags this -> any
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       descriptor:GlobalDescriptor.t
                                                         ->
                                                         ?v:any -> unit -> t
                                                   end
                                                   module ExportValue :
                                                   sig
                                                     type t =
                                                       (untyped_function,
                                                         Global.t, Memory.t,
                                                         Table.t) union4
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module ImportValue :
                                                   sig
                                                     type t =
                                                       ExportValue.t
                                                         or_number
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module ModuleImports :
                                                   sig
                                                     type t =
                                                       (string,
                                                         ImportValue.t)
                                                         Record.t_2
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module Imports :
                                                   sig
                                                     type t =
                                                       (string,
                                                         ModuleImports.t)
                                                         Record.t_2
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module Exports :
                                                   sig
                                                     type t =
                                                       (string,
                                                         ExportValue.t)
                                                         Record.t_2
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module Instance :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_Instance
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_Instance
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_Instance
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_Instance
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_exports :
                                                       'tags this ->
                                                         Exports.t
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       module_:Module.t ->
                                                         ?importObject:Imports.t
                                                           -> unit -> t
                                                   end
                                                   module
                                                   WebAssemblyInstantiatedSource
                                                   :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_WebAssemblyInstantiatedSource
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_WebAssemblyInstantiatedSource
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_WebAssemblyInstantiatedSource
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_WebAssemblyInstantiatedSource
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_instance :
                                                       'tags this ->
                                                         Instance.t
                                                     val set_instance :
                                                       'tags this ->
                                                         Instance.t -> unit
                                                     val get_module :
                                                       'tags this -> Module.t
                                                     val set_module :
                                                       'tags this ->
                                                         Module.t -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module RuntimeError :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_RuntimeError
                                                            | Error.tags_0]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_RuntimeError
                                                            | Error.tags_0]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_RuntimeError
                                                              | Error.tags_0]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_RuntimeError
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       ?message:string ->
                                                         unit -> t
                                                     val invoke :
                                                       ?message:string ->
                                                         unit -> t
                                                   end
                                                   module LinkError :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_LinkError
                                                            | Error.tags_0]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_LinkError
                                                            | Error.tags_0]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_LinkError
                                                              | Error.tags_0]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_LinkError
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       ?message:string ->
                                                         unit -> t
                                                     val invoke :
                                                       ?message:string ->
                                                         unit -> t
                                                   end
                                                   module CompileError :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_CompileError
                                                            | Error.tags_0]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_CompileError
                                                            | Error.tags_0]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_CompileError
                                                              | Error.tags_0]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_CompileError
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       ?message:string ->
                                                         unit -> t
                                                     val invoke :
                                                       ?message:string ->
                                                         unit -> t
                                                   end
                                                   val compileError :
                                                     unit ->
                                                       AnonymousInterface12.t
                                                   val global :
                                                     unit ->
                                                       AnonymousInterface42.t
                                                   val instance :
                                                     unit ->
                                                       AnonymousInterface58.t
                                                   val linkError :
                                                     unit ->
                                                       AnonymousInterface59.t
                                                   val memory :
                                                     unit ->
                                                       AnonymousInterface61.t
                                                   val module_ :
                                                     unit ->
                                                       AnonymousInterface65.t
                                                   val runtimeError :
                                                     unit ->
                                                       AnonymousInterface92.t
                                                   val table :
                                                     unit ->
                                                       AnonymousInterface101.t
                                                   val compile :
                                                     BufferSource.t ->
                                                       Module.t Promise.t_1
                                                   val compileStreaming :
                                                     (Response.t,
                                                       Response.t
                                                         PromiseLike.t_1)
                                                       union2 ->
                                                       Module.t Promise.t_1
                                                   val instantiate :
                                                     bytes:BufferSource.t ->
                                                       ?importObject:Imports.t
                                                         ->
                                                         unit ->
                                                           WebAssemblyInstantiatedSource.t
                                                             Promise.t_1
                                                   val instantiate' :
                                                     moduleObject:Module.t ->
                                                       ?importObject:Imports.t
                                                         ->
                                                         unit ->
                                                           Instance.t
                                                             Promise.t_1
                                                   val instantiateStreaming :
                                                     source:(Response.t,
                                                       Response.t
                                                         PromiseLike.t_1)
                                                       union2 ->
                                                       ?importObject:Imports.t
                                                         ->
                                                         unit ->
                                                           WebAssemblyInstantiatedSource.t
                                                             Promise.t_1
                                                   val validate :
                                                     BufferSource.t -> bool
                                                 end =
                                     struct
                                       module ImportExportKind =
                                         struct
                                           type t =
                                             [ `L_s79_function 
                                             | `L_s81_global 
                                             | `L_s113_memory 
                                             | `L_s189_table ]
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16101 : Ojs.t) ->
                                               let x16102 = x16101 in
                                               match Ojs.string_of_js x16102
                                               with
                                               | "function" ->
                                                   `L_s79_function
                                               | "global" -> `L_s81_global
                                               | "memory" -> `L_s113_memory
                                               | "table" -> `L_s189_table
                                               | _ -> assert false
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16100 :
                                                 [ `L_s79_function 
                                                 | `L_s81_global 
                                                 | `L_s113_memory 
                                                 | `L_s189_table ])
                                               ->
                                               match x16100 with
                                               | `L_s79_function ->
                                                   Ojs.string_to_js
                                                     "function"
                                               | `L_s81_global ->
                                                   Ojs.string_to_js "global"
                                               | `L_s113_memory ->
                                                   Ojs.string_to_js "memory"
                                               | `L_s189_table ->
                                                   Ojs.string_to_js "table"
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16104 : Ojs.t) ->
                                               t_of_js x16104
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16103 : t) ->
                                               t_to_js x16103
                                         end
                                       module ModuleImportDescriptor =
                                         struct
                                           type t =
                                             [
                                               `WebAssembly_ModuleImportDescriptor
                                                 ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16106 : Ojs.t) ->
                                               t_of_js x16106
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16105 : t) ->
                                               t_to_js x16105
                                           type tags =
                                             [
                                               `WebAssembly_ModuleImportDescriptor
                                                 ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_ModuleImportDescriptor
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16109 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16109
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16107 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16107
                                           let (get_kind :
                                             'tags this -> ImportExportKind.t)
                                             =
                                             fun (x16111 : 'tags this) ->
                                               ImportExportKind.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16111) "kind")
                                           let (set_kind :
                                             'tags this ->
                                               ImportExportKind.t -> unit)
                                             =
                                             fun (x16113 : 'tags this) ->
                                               fun
                                                 (x16114 :
                                                   ImportExportKind.t)
                                                 ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16113) "kind"
                                                   (ImportExportKind.t_to_js
                                                      x16114)
                                           let (get_module :
                                             'tags this -> string) =
                                             fun (x16116 : 'tags this) ->
                                               Ojs.string_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16116) "module")
                                           let (set_module :
                                             'tags this -> string -> unit) =
                                             fun (x16118 : 'tags this) ->
                                               fun (x16119 : string) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16118) "module"
                                                   (Ojs.string_to_js x16119)
                                           let (get_name :
                                             'tags this -> string) =
                                             fun (x16121 : 'tags this) ->
                                               Ojs.string_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16121) "name")
                                           let (set_name :
                                             'tags this -> string -> unit) =
                                             fun (x16123 : 'tags this) ->
                                               fun (x16124 : string) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16123) "name"
                                                   (Ojs.string_to_js x16124)
                                           let cast_from = Obj.magic
                                         end
                                       module ModuleExportDescriptor =
                                         struct
                                           type t =
                                             [
                                               `WebAssembly_ModuleExportDescriptor
                                                 ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16127 : Ojs.t) ->
                                               t_of_js x16127
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16126 : t) ->
                                               t_to_js x16126
                                           type tags =
                                             [
                                               `WebAssembly_ModuleExportDescriptor
                                                 ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_ModuleExportDescriptor
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16130 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16130
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16128 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16128
                                           let (get_kind :
                                             'tags this -> ImportExportKind.t)
                                             =
                                             fun (x16132 : 'tags this) ->
                                               ImportExportKind.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16132) "kind")
                                           let (set_kind :
                                             'tags this ->
                                               ImportExportKind.t -> unit)
                                             =
                                             fun (x16134 : 'tags this) ->
                                               fun
                                                 (x16135 :
                                                   ImportExportKind.t)
                                                 ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16134) "kind"
                                                   (ImportExportKind.t_to_js
                                                      x16135)
                                           let (get_name :
                                             'tags this -> string) =
                                             fun (x16137 : 'tags this) ->
                                               Ojs.string_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16137) "name")
                                           let (set_name :
                                             'tags this -> string -> unit) =
                                             fun (x16139 : 'tags this) ->
                                               fun (x16140 : string) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16139) "name"
                                                   (Ojs.string_to_js x16140)
                                           let cast_from = Obj.magic
                                         end
                                       module Module =
                                         struct
                                           type t =
                                             [ `WebAssembly_Module ] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16143 : Ojs.t) ->
                                               t_of_js x16143
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16142 : t) ->
                                               t_to_js x16142
                                           type tags =
                                             [ `WebAssembly_Module ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_Module
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16146 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16146
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16144 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16144
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Module") "prototype")
                                           let (create : BufferSource.t -> t)
                                             =
                                             fun (x16148 : BufferSource.t) ->
                                               t_of_js
                                                 (Ojs.new_obj
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Module")
                                                    [|(BufferSource.t_to_js
                                                         x16148)|])
                                           let (customSections :
                                             moduleObject:t ->
                                               sectionName:string ->
                                                 ArrayBuffer.t_0 list)
                                             =
                                             fun ~moduleObject:(x16149 : t)
                                               ->
                                               fun
                                                 ~sectionName:(x16150 :
                                                                string)
                                                 ->
                                                 Ojs.list_of_js
                                                   ArrayBuffer.t_0_of_js
                                                   (Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         (Ojs.get_prop_ascii
                                                            Ojs.global
                                                            "WebAssembly")
                                                         "Module")
                                                      "customSections"
                                                      [|(t_to_js x16149);(
                                                        Ojs.string_to_js
                                                          x16150)|])
                                           let (exports :
                                             t ->
                                               ModuleExportDescriptor.t list)
                                             =
                                             fun (x16152 : t) ->
                                               Ojs.list_of_js
                                                 ModuleExportDescriptor.t_of_js
                                                 (Ojs.call
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Module") "exports"
                                                    [|(t_to_js x16152)|])
                                           let (imports :
                                             t ->
                                               ModuleImportDescriptor.t list)
                                             =
                                             fun (x16154 : t) ->
                                               Ojs.list_of_js
                                                 ModuleImportDescriptor.t_of_js
                                                 (Ojs.call
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Module") "imports"
                                                    [|(t_to_js x16154)|])
                                         end
                                       module TableKind =
                                         struct
                                           type t =
                                             [ `L_s36_anyfunc 
                                             | `L_s69_externref ]
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16157 : Ojs.t) ->
                                               let x16158 = x16157 in
                                               match Ojs.string_of_js x16158
                                               with
                                               | "anyfunc" -> `L_s36_anyfunc
                                               | "externref" ->
                                                   `L_s69_externref
                                               | _ -> assert false
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16156 :
                                                 [ `L_s36_anyfunc 
                                                 | `L_s69_externref ])
                                               ->
                                               match x16156 with
                                               | `L_s36_anyfunc ->
                                                   Ojs.string_to_js "anyfunc"
                                               | `L_s69_externref ->
                                                   Ojs.string_to_js
                                                     "externref"
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16160 : Ojs.t) ->
                                               t_of_js x16160
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16159 : t) ->
                                               t_to_js x16159
                                         end
                                       module TableDescriptor =
                                         struct
                                           type t =
                                             [ `WebAssembly_TableDescriptor ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16162 : Ojs.t) ->
                                               t_of_js x16162
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16161 : t) ->
                                               t_to_js x16161
                                           type tags =
                                             [ `WebAssembly_TableDescriptor ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_TableDescriptor
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16165 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16165
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16163 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16163
                                           let (get_element :
                                             'tags this -> TableKind.t) =
                                             fun (x16167 : 'tags this) ->
                                               TableKind.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16167) "element")
                                           let (set_element :
                                             'tags this ->
                                               TableKind.t -> unit)
                                             =
                                             fun (x16169 : 'tags this) ->
                                               fun (x16170 : TableKind.t) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16169) "element"
                                                   (TableKind.t_to_js x16170)
                                           let (get_initial :
                                             'tags this -> float) =
                                             fun (x16172 : 'tags this) ->
                                               Ojs.float_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16172) "initial")
                                           let (set_initial :
                                             'tags this -> float -> unit) =
                                             fun (x16174 : 'tags this) ->
                                               fun (x16175 : float) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16174) "initial"
                                                   (Ojs.float_to_js x16175)
                                           let (get_maximum :
                                             'tags this -> float) =
                                             fun (x16177 : 'tags this) ->
                                               Ojs.float_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16177) "maximum")
                                           let (set_maximum :
                                             'tags this -> float -> unit) =
                                             fun (x16179 : 'tags this) ->
                                               fun (x16180 : float) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16179) "maximum"
                                                   (Ojs.float_to_js x16180)
                                           let cast_from = Obj.magic
                                         end
                                       module Table =
                                         struct
                                           type t =
                                             [ `WebAssembly_Table ] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16183 : Ojs.t) ->
                                               t_of_js x16183
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16182 : t) ->
                                               t_to_js x16182
                                           type tags = [ `WebAssembly_Table ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_Table ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16186 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16186
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16184 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16184
                                           let (get_length :
                                             'tags this -> float) =
                                             fun (x16188 : 'tags this) ->
                                               Ojs.float_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16188) "length")
                                           let (get_ :
                                             'tags this -> index:float -> any)
                                             =
                                             fun (x16191 : 'tags this) ->
                                               fun ~index:(x16190 : float) ->
                                                 any_of_js
                                                   (Ojs.call
                                                      (this_to_js Obj.magic
                                                         x16191) "get"
                                                      [|(Ojs.float_to_js
                                                           x16190)|])
                                           let (grow :
                                             'tags this ->
                                               delta:float ->
                                                 ?value:any -> unit -> float)
                                             =
                                             fun (x16197 : 'tags this) ->
                                               fun ~delta:(x16193 : float) ->
                                                 fun
                                                   ?value:(x16194 :
                                                            any option)
                                                   ->
                                                   fun () ->
                                                     Ojs.float_of_js
                                                       (let x16199 =
                                                          this_to_js
                                                            Obj.magic x16197 in
                                                        Ojs.call
                                                          (Ojs.get_prop_ascii
                                                             x16199 "grow")
                                                          "apply"
                                                          [|x16199;((
                                                            let x16195 =
                                                              Ojs.new_obj
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Array")
                                                                [||] in
                                                            ignore
                                                              (Ojs.call
                                                                 x16195
                                                                 "push"
                                                                 [|(Ojs.float_to_js
                                                                    x16193)|]);
                                                            (match x16194
                                                             with
                                                             | Some x16196 ->
                                                                 ignore
                                                                   (Ojs.call
                                                                    x16195
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x16196)|])
                                                             | None -> ());
                                                            x16195))|])
                                           let (set_ :
                                             'tags this ->
                                               index:float ->
                                                 ?value:any -> unit -> unit)
                                             =
                                             fun (x16204 : 'tags this) ->
                                               fun ~index:(x16200 : float) ->
                                                 fun
                                                   ?value:(x16201 :
                                                            any option)
                                                   ->
                                                   fun () ->
                                                     ignore
                                                       (let x16206 =
                                                          this_to_js
                                                            Obj.magic x16204 in
                                                        Ojs.call
                                                          (Ojs.get_prop_ascii
                                                             x16206 "set")
                                                          "apply"
                                                          [|x16206;((
                                                            let x16202 =
                                                              Ojs.new_obj
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Array")
                                                                [||] in
                                                            ignore
                                                              (Ojs.call
                                                                 x16202
                                                                 "push"
                                                                 [|(Ojs.float_to_js
                                                                    x16200)|]);
                                                            (match x16201
                                                             with
                                                             | Some x16203 ->
                                                                 ignore
                                                                   (Ojs.call
                                                                    x16202
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x16203)|])
                                                             | None -> ());
                                                            x16202))|])
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Table") "prototype")
                                           let (create :
                                             descriptor:TableDescriptor.t ->
                                               ?value:any -> unit -> t)
                                             =
                                             fun
                                               ~descriptor:(x16207 :
                                                             TableDescriptor.t)
                                               ->
                                               fun
                                                 ?value:(x16208 : any option)
                                                 ->
                                                 fun () ->
                                                   t_of_js
                                                     (Ojs.new_obj_arr
                                                        (Ojs.get_prop_ascii
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "WebAssembly")
                                                           "Table")
                                                        (let x16209 =
                                                           Ojs.new_obj
                                                             (Ojs.get_prop_ascii
                                                                Ojs.global
                                                                "Array") 
                                                             [||] in
                                                         ignore
                                                           (Ojs.call x16209
                                                              "push"
                                                              [|(TableDescriptor.t_to_js
                                                                   x16207)|]);
                                                         (match x16208 with
                                                          | Some x16210 ->
                                                              ignore
                                                                (Ojs.call
                                                                   x16209
                                                                   "push"
                                                                   [|(
                                                                    any_to_js
                                                                    x16210)|])
                                                          | None -> ());
                                                         x16209))
                                         end
                                       module MemoryDescriptor =
                                         struct
                                           type t =
                                             [
                                               `WebAssembly_MemoryDescriptor ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16212 : Ojs.t) ->
                                               t_of_js x16212
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16211 : t) ->
                                               t_to_js x16211
                                           type tags =
                                             [
                                               `WebAssembly_MemoryDescriptor ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_MemoryDescriptor
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16215 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16215
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16213 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16213
                                           let (get_initial :
                                             'tags this -> float) =
                                             fun (x16217 : 'tags this) ->
                                               Ojs.float_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16217) "initial")
                                           let (set_initial :
                                             'tags this -> float -> unit) =
                                             fun (x16219 : 'tags this) ->
                                               fun (x16220 : float) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16219) "initial"
                                                   (Ojs.float_to_js x16220)
                                           let (get_maximum :
                                             'tags this -> float) =
                                             fun (x16222 : 'tags this) ->
                                               Ojs.float_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16222) "maximum")
                                           let (set_maximum :
                                             'tags this -> float -> unit) =
                                             fun (x16224 : 'tags this) ->
                                               fun (x16225 : float) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16224) "maximum"
                                                   (Ojs.float_to_js x16225)
                                           let (get_shared :
                                             'tags this -> bool) =
                                             fun (x16227 : 'tags this) ->
                                               Ojs.bool_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16227) "shared")
                                           let (set_shared :
                                             'tags this -> bool -> unit) =
                                             fun (x16229 : 'tags this) ->
                                               fun (x16230 : bool) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16229) "shared"
                                                   (Ojs.bool_to_js x16230)
                                           let cast_from = Obj.magic
                                         end
                                       module Memory =
                                         struct
                                           type t =
                                             [ `WebAssembly_Memory ] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16233 : Ojs.t) ->
                                               t_of_js x16233
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16232 : t) ->
                                               t_to_js x16232
                                           type tags =
                                             [ `WebAssembly_Memory ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_Memory
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16236 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16236
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16234 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16234
                                           let (get_buffer :
                                             'tags this -> ArrayBuffer.t_0) =
                                             fun (x16238 : 'tags this) ->
                                               ArrayBuffer.t_0_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16238) "buffer")
                                           let (grow :
                                             'tags this ->
                                               delta:float -> float)
                                             =
                                             fun (x16241 : 'tags this) ->
                                               fun ~delta:(x16240 : float) ->
                                                 Ojs.float_of_js
                                                   (Ojs.call
                                                      (this_to_js Obj.magic
                                                         x16241) "grow"
                                                      [|(Ojs.float_to_js
                                                           x16240)|])
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Memory") "prototype")
                                           let (create :
                                             MemoryDescriptor.t -> t) =
                                             fun
                                               (x16243 : MemoryDescriptor.t)
                                               ->
                                               t_of_js
                                                 (Ojs.new_obj
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Memory")
                                                    [|(MemoryDescriptor.t_to_js
                                                         x16243)|])
                                         end
                                       module ValueType =
                                         struct
                                           type t =
                                             [ `L_s36_anyfunc 
                                             | `L_s69_externref 
                                             | `L_s70_f32  | `L_s71_f64 
                                             | `L_s87_i32  | `L_s88_i64 ]
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16245 : Ojs.t) ->
                                               let x16246 = x16245 in
                                               match Ojs.string_of_js x16246
                                               with
                                               | "anyfunc" -> `L_s36_anyfunc
                                               | "externref" ->
                                                   `L_s69_externref
                                               | "f32" -> `L_s70_f32
                                               | "f64" -> `L_s71_f64
                                               | "i32" -> `L_s87_i32
                                               | "i64" -> `L_s88_i64
                                               | _ -> assert false
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16244 :
                                                 [ `L_s36_anyfunc 
                                                 | `L_s69_externref 
                                                 | `L_s70_f32  | `L_s71_f64 
                                                 | `L_s87_i32  | `L_s88_i64 ])
                                               ->
                                               match x16244 with
                                               | `L_s36_anyfunc ->
                                                   Ojs.string_to_js "anyfunc"
                                               | `L_s69_externref ->
                                                   Ojs.string_to_js
                                                     "externref"
                                               | `L_s70_f32 ->
                                                   Ojs.string_to_js "f32"
                                               | `L_s71_f64 ->
                                                   Ojs.string_to_js "f64"
                                               | `L_s87_i32 ->
                                                   Ojs.string_to_js "i32"
                                               | `L_s88_i64 ->
                                                   Ojs.string_to_js "i64"
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16248 : Ojs.t) ->
                                               t_of_js x16248
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16247 : t) ->
                                               t_to_js x16247
                                         end
                                       module GlobalDescriptor =
                                         struct
                                           type t =
                                             [
                                               `WebAssembly_GlobalDescriptor ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16250 : Ojs.t) ->
                                               t_of_js x16250
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16249 : t) ->
                                               t_to_js x16249
                                           type tags =
                                             [
                                               `WebAssembly_GlobalDescriptor ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_GlobalDescriptor
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16253 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16253
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16251 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16251
                                           let (get_mutable :
                                             'tags this -> bool) =
                                             fun (x16255 : 'tags this) ->
                                               Ojs.bool_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16255) "mutable")
                                           let (set_mutable :
                                             'tags this -> bool -> unit) =
                                             fun (x16257 : 'tags this) ->
                                               fun (x16258 : bool) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16257) "mutable"
                                                   (Ojs.bool_to_js x16258)
                                           let (get_value :
                                             'tags this -> ValueType.t) =
                                             fun (x16260 : 'tags this) ->
                                               ValueType.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16260) "value")
                                           let (set_value :
                                             'tags this ->
                                               ValueType.t -> unit)
                                             =
                                             fun (x16262 : 'tags this) ->
                                               fun (x16263 : ValueType.t) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16262) "value"
                                                   (ValueType.t_to_js x16263)
                                           let cast_from = Obj.magic
                                         end
                                       module Global =
                                         struct
                                           type t =
                                             [ `WebAssembly_Global ] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16266 : Ojs.t) ->
                                               t_of_js x16266
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16265 : t) ->
                                               t_to_js x16265
                                           type tags =
                                             [ `WebAssembly_Global ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_Global
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16269 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16269
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16267 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16267
                                           let (get_value :
                                             'tags this -> any) =
                                             fun (x16271 : 'tags this) ->
                                               any_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16271) "value")
                                           let (set_value :
                                             'tags this -> any -> unit) =
                                             fun (x16273 : 'tags this) ->
                                               fun (x16274 : any) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16273) "value"
                                                   (any_to_js x16274)
                                           let (valueOf : 'tags this -> any)
                                             =
                                             fun (x16276 : 'tags this) ->
                                               any_of_js
                                                 (Ojs.call
                                                    (this_to_js Obj.magic
                                                       x16276) "valueOf" 
                                                    [||])
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Global") "prototype")
                                           let (create :
                                             descriptor:GlobalDescriptor.t ->
                                               ?v:any -> unit -> t)
                                             =
                                             fun
                                               ~descriptor:(x16278 :
                                                             GlobalDescriptor.t)
                                               ->
                                               fun ?v:(x16279 : any option)
                                                 ->
                                                 fun () ->
                                                   t_of_js
                                                     (Ojs.new_obj_arr
                                                        (Ojs.get_prop_ascii
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "WebAssembly")
                                                           "Global")
                                                        (let x16280 =
                                                           Ojs.new_obj
                                                             (Ojs.get_prop_ascii
                                                                Ojs.global
                                                                "Array") 
                                                             [||] in
                                                         ignore
                                                           (Ojs.call x16280
                                                              "push"
                                                              [|(GlobalDescriptor.t_to_js
                                                                   x16278)|]);
                                                         (match x16279 with
                                                          | Some x16281 ->
                                                              ignore
                                                                (Ojs.call
                                                                   x16280
                                                                   "push"
                                                                   [|(
                                                                    any_to_js
                                                                    x16281)|])
                                                          | None -> ());
                                                         x16280))
                                         end
                                       module ExportValue =
                                         struct
                                           type t =
                                             (untyped_function, Global.t,
                                               Memory.t, Table.t) union4
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16287 : Ojs.t) ->
                                               union4_of_js
                                                 untyped_function_of_js
                                                 Global.t_of_js
                                                 Memory.t_of_js Table.t_of_js
                                                 x16287
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16282 :
                                                 (untyped_function, Global.t,
                                                   Memory.t, Table.t) union4)
                                               ->
                                               union4_to_js
                                                 untyped_function_to_js
                                                 Global.t_to_js
                                                 Memory.t_to_js Table.t_to_js
                                                 x16282
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16293 : Ojs.t) ->
                                               t_of_js x16293
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16292 : t) ->
                                               t_to_js x16292
                                         end
                                       module ImportValue =
                                         struct
                                           type t = ExportValue.t or_number
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16296 : Ojs.t) ->
                                               or_number_of_js
                                                 ExportValue.t_of_js x16296
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16294 :
                                                 ExportValue.t or_number)
                                               ->
                                               or_number_to_js
                                                 ExportValue.t_to_js x16294
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16299 : Ojs.t) ->
                                               t_of_js x16299
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16298 : t) ->
                                               t_to_js x16298
                                         end
                                       module ModuleImports =
                                         struct
                                           type t =
                                             (string, ImportValue.t)
                                               Record.t_2
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16303 : Ojs.t) ->
                                               Record.t_2_of_js
                                                 Ojs.string_of_js
                                                 ImportValue.t_of_js x16303
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16300 :
                                                 (string, ImportValue.t)
                                                   Record.t_2)
                                               ->
                                               Record.t_2_to_js
                                                 Ojs.string_to_js
                                                 ImportValue.t_to_js x16300
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16307 : Ojs.t) ->
                                               t_of_js x16307
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16306 : t) ->
                                               t_to_js x16306
                                         end
                                       module Imports =
                                         struct
                                           type t =
                                             (string, ModuleImports.t)
                                               Record.t_2
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16311 : Ojs.t) ->
                                               Record.t_2_of_js
                                                 Ojs.string_of_js
                                                 ModuleImports.t_of_js x16311
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16308 :
                                                 (string, ModuleImports.t)
                                                   Record.t_2)
                                               ->
                                               Record.t_2_to_js
                                                 Ojs.string_to_js
                                                 ModuleImports.t_to_js x16308
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16315 : Ojs.t) ->
                                               t_of_js x16315
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16314 : t) ->
                                               t_to_js x16314
                                         end
                                       module Exports =
                                         struct
                                           type t =
                                             (string, ExportValue.t)
                                               Record.t_2
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16319 : Ojs.t) ->
                                               Record.t_2_of_js
                                                 Ojs.string_of_js
                                                 ExportValue.t_of_js x16319
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16316 :
                                                 (string, ExportValue.t)
                                                   Record.t_2)
                                               ->
                                               Record.t_2_to_js
                                                 Ojs.string_to_js
                                                 ExportValue.t_to_js x16316
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16323 : Ojs.t) ->
                                               t_of_js x16323
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16322 : t) ->
                                               t_to_js x16322
                                         end
                                       module Instance =
                                         struct
                                           type t =
                                             [ `WebAssembly_Instance ] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16325 : Ojs.t) ->
                                               t_of_js x16325
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16324 : t) ->
                                               t_to_js x16324
                                           type tags =
                                             [ `WebAssembly_Instance ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_Instance
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16328 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16328
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16326 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16326
                                           let (get_exports :
                                             'tags this -> Exports.t) =
                                             fun (x16330 : 'tags this) ->
                                               Exports.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16330) "exports")
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Instance")
                                                    "prototype")
                                           let (create :
                                             module_:Module.t ->
                                               ?importObject:Imports.t ->
                                                 unit -> t)
                                             =
                                             fun ~module_:(x16332 : Module.t)
                                               ->
                                               fun
                                                 ?importObject:(x16333 :
                                                                 Imports.t
                                                                   option)
                                                 ->
                                                 fun () ->
                                                   t_of_js
                                                     (Ojs.new_obj_arr
                                                        (Ojs.get_prop_ascii
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "WebAssembly")
                                                           "Instance")
                                                        (let x16334 =
                                                           Ojs.new_obj
                                                             (Ojs.get_prop_ascii
                                                                Ojs.global
                                                                "Array") 
                                                             [||] in
                                                         ignore
                                                           (Ojs.call x16334
                                                              "push"
                                                              [|(Module.t_to_js
                                                                   x16332)|]);
                                                         (match x16333 with
                                                          | Some x16335 ->
                                                              ignore
                                                                (Ojs.call
                                                                   x16334
                                                                   "push"
                                                                   [|(
                                                                    Imports.t_to_js
                                                                    x16335)|])
                                                          | None -> ());
                                                         x16334))
                                         end
                                       module WebAssemblyInstantiatedSource =
                                         struct
                                           type t =
                                             [
                                               `WebAssembly_WebAssemblyInstantiatedSource
                                                 ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16337 : Ojs.t) ->
                                               t_of_js x16337
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16336 : t) ->
                                               t_to_js x16336
                                           type tags =
                                             [
                                               `WebAssembly_WebAssemblyInstantiatedSource
                                                 ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_WebAssemblyInstantiatedSource
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16340 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16340
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16338 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16338
                                           let (get_instance :
                                             'tags this -> Instance.t) =
                                             fun (x16342 : 'tags this) ->
                                               Instance.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16342) "instance")
                                           let (set_instance :
                                             'tags this -> Instance.t -> unit)
                                             =
                                             fun (x16344 : 'tags this) ->
                                               fun (x16345 : Instance.t) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16344) "instance"
                                                   (Instance.t_to_js x16345)
                                           let (get_module :
                                             'tags this -> Module.t) =
                                             fun (x16347 : 'tags this) ->
                                               Module.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16347) "module")
                                           let (set_module :
                                             'tags this -> Module.t -> unit)
                                             =
                                             fun (x16349 : 'tags this) ->
                                               fun (x16350 : Module.t) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16349) "module"
                                                   (Module.t_to_js x16350)
                                           let cast_from = Obj.magic
                                         end
                                       module RuntimeError =
                                         struct
                                           type t =
                                             [ `WebAssembly_RuntimeError 
                                             | Error.tags_0] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16353 : Ojs.t) ->
                                               t_of_js x16353
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16352 : t) ->
                                               t_to_js x16352
                                           type tags =
                                             [ `WebAssembly_RuntimeError 
                                             | Error.tags_0]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_RuntimeError
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16356 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16356
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16354 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16354
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "RuntimeError")
                                                    "prototype")
                                           let (create :
                                             ?message:string -> unit -> t) =
                                             fun
                                               ?message:(x16358 :
                                                          string option)
                                               ->
                                               fun () ->
                                                 t_of_js
                                                   (Ojs.new_obj_arr
                                                      (Ojs.get_prop_ascii
                                                         (Ojs.get_prop_ascii
                                                            Ojs.global
                                                            "WebAssembly")
                                                         "RuntimeError")
                                                      (let x16359 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       (match x16358 with
                                                        | Some x16360 ->
                                                            ignore
                                                              (Ojs.call
                                                                 x16359
                                                                 "push"
                                                                 [|(Ojs.string_to_js
                                                                    x16360)|])
                                                        | None -> ());
                                                       x16359))
                                           let (invoke :
                                             ?message:string -> unit -> t) =
                                             fun
                                               ?message:(x16361 :
                                                          string option)
                                               ->
                                               fun () ->
                                                 t_of_js
                                                   (Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         (Ojs.get_prop_ascii
                                                            Ojs.global
                                                            "WebAssembly")
                                                         "RuntimeError")
                                                      "apply"
                                                      [|Ojs.null;((let x16362
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                   (match x16361
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x16363 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x16362
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x16363)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                   x16362))|])
                                         end
                                       module LinkError =
                                         struct
                                           type t =
                                             [ `WebAssembly_LinkError 
                                             | Error.tags_0] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16365 : Ojs.t) ->
                                               t_of_js x16365
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16364 : t) ->
                                               t_to_js x16364
                                           type tags =
                                             [ `WebAssembly_LinkError 
                                             | Error.tags_0]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_LinkError
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16368 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16368
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16366 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16366
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "LinkError")
                                                    "prototype")
                                           let (create :
                                             ?message:string -> unit -> t) =
                                             fun
                                               ?message:(x16370 :
                                                          string option)
                                               ->
                                               fun () ->
                                                 t_of_js
                                                   (Ojs.new_obj_arr
                                                      (Ojs.get_prop_ascii
                                                         (Ojs.get_prop_ascii
                                                            Ojs.global
                                                            "WebAssembly")
                                                         "LinkError")
                                                      (let x16371 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       (match x16370 with
                                                        | Some x16372 ->
                                                            ignore
                                                              (Ojs.call
                                                                 x16371
                                                                 "push"
                                                                 [|(Ojs.string_to_js
                                                                    x16372)|])
                                                        | None -> ());
                                                       x16371))
                                           let (invoke :
                                             ?message:string -> unit -> t) =
                                             fun
                                               ?message:(x16373 :
                                                          string option)
                                               ->
                                               fun () ->
                                                 t_of_js
                                                   (Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         (Ojs.get_prop_ascii
                                                            Ojs.global
                                                            "WebAssembly")
                                                         "LinkError") "apply"
                                                      [|Ojs.null;((let x16374
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                   (match x16373
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x16375 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x16374
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x16375)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                   x16374))|])
                                         end
                                       module CompileError =
                                         struct
                                           type t =
                                             [ `WebAssembly_CompileError 
                                             | Error.tags_0] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16377 : Ojs.t) ->
                                               t_of_js x16377
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16376 : t) ->
                                               t_to_js x16376
                                           type tags =
                                             [ `WebAssembly_CompileError 
                                             | Error.tags_0]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_CompileError
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16380 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16380
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16378 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16378
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "CompileError")
                                                    "prototype")
                                           let (create :
                                             ?message:string -> unit -> t) =
                                             fun
                                               ?message:(x16382 :
                                                          string option)
                                               ->
                                               fun () ->
                                                 t_of_js
                                                   (Ojs.new_obj_arr
                                                      (Ojs.get_prop_ascii
                                                         (Ojs.get_prop_ascii
                                                            Ojs.global
                                                            "WebAssembly")
                                                         "CompileError")
                                                      (let x16383 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       (match x16382 with
                                                        | Some x16384 ->
                                                            ignore
                                                              (Ojs.call
                                                                 x16383
                                                                 "push"
                                                                 [|(Ojs.string_to_js
                                                                    x16384)|])
                                                        | None -> ());
                                                       x16383))
                                           let (invoke :
                                             ?message:string -> unit -> t) =
                                             fun
                                               ?message:(x16385 :
                                                          string option)
                                               ->
                                               fun () ->
                                                 t_of_js
                                                   (Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         (Ojs.get_prop_ascii
                                                            Ojs.global
                                                            "WebAssembly")
                                                         "CompileError")
                                                      "apply"
                                                      [|Ojs.null;((let x16386
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                   (match x16385
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x16387 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x16386
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x16387)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                   x16386))|])
                                         end
                                       let (compileError :
                                         unit -> AnonymousInterface12.t) =
                                         fun () ->
                                           AnonymousInterface12.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "CompileError")
                                       let (global :
                                         unit -> AnonymousInterface42.t) =
                                         fun () ->
                                           AnonymousInterface42.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "Global")
                                       let (instance :
                                         unit -> AnonymousInterface58.t) =
                                         fun () ->
                                           AnonymousInterface58.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "Instance")
                                       let (linkError :
                                         unit -> AnonymousInterface59.t) =
                                         fun () ->
                                           AnonymousInterface59.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "LinkError")
                                       let (memory :
                                         unit -> AnonymousInterface61.t) =
                                         fun () ->
                                           AnonymousInterface61.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "Memory")
                                       let (module_ :
                                         unit -> AnonymousInterface65.t) =
                                         fun () ->
                                           AnonymousInterface65.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "Module")
                                       let (runtimeError :
                                         unit -> AnonymousInterface92.t) =
                                         fun () ->
                                           AnonymousInterface92.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "RuntimeError")
                                       let (table :
                                         unit -> AnonymousInterface101.t) =
                                         fun () ->
                                           AnonymousInterface101.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "Table")
                                       let (compile :
                                         BufferSource.t ->
                                           Module.t Promise.t_1)
                                         =
                                         fun (x16388 : BufferSource.t) ->
                                           Promise.t_1_of_js Module.t_of_js
                                             (Ojs.call
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "compile"
                                                [|(BufferSource.t_to_js
                                                     x16388)|])
                                       let (compileStreaming :
                                         (Response.t,
                                           Response.t PromiseLike.t_1) union2
                                           -> Module.t Promise.t_1)
                                         =
                                         fun
                                           (x16390 :
                                             (Response.t,
                                               Response.t PromiseLike.t_1)
                                               union2)
                                           ->
                                           Promise.t_1_of_js Module.t_of_js
                                             (Ojs.call
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "compileStreaming"
                                                [|(union2_to_js
                                                     Response.t_to_js
                                                     (fun
                                                        (x16392 :
                                                          Response.t
                                                            PromiseLike.t_1)
                                                        ->
                                                        PromiseLike.t_1_to_js
                                                          Response.t_to_js
                                                          x16392) x16390)|])
                                       let (instantiate :
                                         bytes:BufferSource.t ->
                                           ?importObject:Imports.t ->
                                             unit ->
                                               WebAssemblyInstantiatedSource.t
                                                 Promise.t_1)
                                         =
                                         fun ~bytes:(x16395 : BufferSource.t)
                                           ->
                                           fun
                                             ?importObject:(x16396 :
                                                             Imports.t option)
                                             ->
                                             fun () ->
                                               Promise.t_1_of_js
                                                 WebAssemblyInstantiatedSource.t_of_js
                                                 (let x16399 =
                                                    Ojs.get_prop_ascii
                                                      Ojs.global
                                                      "WebAssembly" in
                                                  Ojs.call
                                                    (Ojs.get_prop_ascii
                                                       x16399 "instantiate")
                                                    "apply"
                                                    [|x16399;((let x16397 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x16397
                                                                    "push"
                                                                    [|(
                                                                    BufferSource.t_to_js
                                                                    x16395)|]);
                                                               (match x16396
                                                                with
                                                                | Some x16398
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x16397
                                                                    "push"
                                                                    [|(
                                                                    Imports.t_to_js
                                                                    x16398)|])
                                                                | None -> ());
                                                               x16397))|])
                                       let (instantiate' :
                                         moduleObject:Module.t ->
                                           ?importObject:Imports.t ->
                                             unit -> Instance.t Promise.t_1)
                                         =
                                         fun
                                           ~moduleObject:(x16401 : Module.t)
                                           ->
                                           fun
                                             ?importObject:(x16402 :
                                                             Imports.t option)
                                             ->
                                             fun () ->
                                               Promise.t_1_of_js
                                                 Instance.t_of_js
                                                 (let x16405 =
                                                    Ojs.get_prop_ascii
                                                      Ojs.global
                                                      "WebAssembly" in
                                                  Ojs.call
                                                    (Ojs.get_prop_ascii
                                                       x16405 "instantiate")
                                                    "apply"
                                                    [|x16405;((let x16403 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x16403
                                                                    "push"
                                                                    [|(
                                                                    Module.t_to_js
                                                                    x16401)|]);
                                                               (match x16402
                                                                with
                                                                | Some x16404
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x16403
                                                                    "push"
                                                                    [|(
                                                                    Imports.t_to_js
                                                                    x16404)|])
                                                                | None -> ());
                                                               x16403))|])
                                       let (instantiateStreaming :
                                         source:(Response.t,
                                           Response.t PromiseLike.t_1) union2
                                           ->
                                           ?importObject:Imports.t ->
                                             unit ->
                                               WebAssemblyInstantiatedSource.t
                                                 Promise.t_1)
                                         =
                                         fun
                                           ~source:(x16407 :
                                                     (Response.t,
                                                       Response.t
                                                         PromiseLike.t_1)
                                                       union2)
                                           ->
                                           fun
                                             ?importObject:(x16408 :
                                                             Imports.t option)
                                             ->
                                             fun () ->
                                               Promise.t_1_of_js
                                                 WebAssemblyInstantiatedSource.t_of_js
                                                 (let x16414 =
                                                    Ojs.get_prop_ascii
                                                      Ojs.global
                                                      "WebAssembly" in
                                                  Ojs.call
                                                    (Ojs.get_prop_ascii
                                                       x16414
                                                       "instantiateStreaming")
                                                    "apply"
                                                    [|x16414;((let x16409 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x16409
                                                                    "push"
                                                                    [|(
                                                                    union2_to_js
                                                                    Response.t_to_js
                                                                    (fun
                                                                    (x16412 :
                                                                    Response.t
                                                                    PromiseLike.t_1)
                                                                    ->
                                                                    PromiseLike.t_1_to_js
                                                                    Response.t_to_js
                                                                    x16412)
                                                                    x16407)|]);
                                                               (match x16408
                                                                with
                                                                | Some x16410
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x16409
                                                                    "push"
                                                                    [|(
                                                                    Imports.t_to_js
                                                                    x16410)|])
                                                                | None -> ());
                                                               x16409))|])
                                       let (validate :
                                         BufferSource.t -> bool) =
                                         fun (x16416 : BufferSource.t) ->
                                           Ojs.bool_of_js
                                             (Ojs.call
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "validate"
                                                [|(BufferSource.t_to_js
                                                     x16416)|])
                                     end
module AbortSignalEventMap =
  struct
    type t = [ `AbortSignalEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16418 : Ojs.t) -> t_of_js x16418
    and t_0_to_js : t_0 -> Ojs.t = fun (x16417 : t) -> t_to_js x16417
    type tags = [ `AbortSignalEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignalEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x16421 : Ojs.t) -> intf_of_js __tags_of_js x16421
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x16419 : __tags intf) -> intf_to_js __tags_to_js x16419
    let (get_abort : 'tags this -> Event.t) =
      fun (x16423 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16423) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x16425 : 'tags this) ->
        fun (x16426 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16425) "abort"
            (Event.t_to_js x16426)
    let cast_from = Obj.magic
  end
module rec
  AbortController:sig
                    type t = [ `AbortController ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `AbortController ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `AbortController ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `AbortController ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_signal : 'tags this -> AbortSignal.t
                    val abort : 'tags this -> unit
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create : unit -> t
                  end =
  struct
    type t = [ `AbortController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16429 : Ojs.t) -> t_of_js x16429
    and t_0_to_js : t_0 -> Ojs.t = fun (x16428 : t) -> t_to_js x16428
    type tags = [ `AbortController ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x16432 : Ojs.t) -> intf_of_js __tags_of_js x16432
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x16430 : __tags intf) -> intf_to_js __tags_to_js x16430
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x16434 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16434) "signal")
    let (abort : 'tags this -> unit) =
      fun (x16436 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x16436) "abort" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "AbortController") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortController") [||])
  end
 and
  AnonymousInterface0:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> AbortController.t
                        val set_prototype : t -> AbortController.t -> unit
                        val create : t -> AbortController.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x16439 : Ojs.t) -> x16439
    and t_to_js : t -> Ojs.t = fun (x16438 : Ojs.t) -> x16438
    let (get_prototype : t -> AbortController.t) =
      fun (x16440 : t) ->
        AbortController.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16440) "prototype")
    let (set_prototype : t -> AbortController.t -> unit) =
      fun (x16441 : t) ->
        fun (x16442 : AbortController.t) ->
          Ojs.set_prop_ascii (t_to_js x16441) "prototype"
            (AbortController.t_to_js x16442)
    let (create : t -> AbortController.t) =
      fun (x16443 : t) ->
        AbortController.t_of_js (Ojs.new_obj (t_to_js x16443) [||])
  end
let (abortController : unit -> AnonymousInterface0.t) =
  fun () ->
    AnonymousInterface0.t_of_js
      (Ojs.get_prop_ascii Ojs.global "AbortController")
let (abortSignal : unit -> AnonymousInterface1.t) =
  fun () ->
    AnonymousInterface1.t_of_js (Ojs.get_prop_ascii Ojs.global "AbortSignal")
let (blob : unit -> AnonymousInterface2.t) =
  fun () ->
    AnonymousInterface2.t_of_js (Ojs.get_prop_ascii Ojs.global "Blob")
let (broadcastChannel : unit -> AnonymousInterface3.t) =
  fun () ->
    AnonymousInterface3.t_of_js
      (Ojs.get_prop_ascii Ojs.global "BroadcastChannel")
let (byteLengthQueuingStrategy : unit -> AnonymousInterface4.t) =
  fun () ->
    AnonymousInterface4.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
let (cache : unit -> AnonymousInterface5.t) =
  fun () ->
    AnonymousInterface5.t_of_js (Ojs.get_prop_ascii Ojs.global "Cache")
let (cacheStorage : unit -> AnonymousInterface6.t) =
  fun () ->
    AnonymousInterface6.t_of_js
      (Ojs.get_prop_ascii Ojs.global "CacheStorage")
let (canvasGradient : unit -> AnonymousInterface7.t) =
  fun () ->
    AnonymousInterface7.t_of_js
      (Ojs.get_prop_ascii Ojs.global "CanvasGradient")
let (canvasPattern : unit -> AnonymousInterface8.t) =
  fun () ->
    AnonymousInterface8.t_of_js
      (Ojs.get_prop_ascii Ojs.global "CanvasPattern")
let (client : unit -> AnonymousInterface9.t) =
  fun () ->
    AnonymousInterface9.t_of_js (Ojs.get_prop_ascii Ojs.global "Client")
let (clients : unit -> AnonymousInterface10.t) =
  fun () ->
    AnonymousInterface10.t_of_js (Ojs.get_prop_ascii Ojs.global "Clients")
let (closeEvent : unit -> AnonymousInterface11.t) =
  fun () ->
    AnonymousInterface11.t_of_js (Ojs.get_prop_ascii Ojs.global "CloseEvent")
let (countQueuingStrategy : unit -> AnonymousInterface13.t) =
  fun () ->
    AnonymousInterface13.t_of_js
      (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
let (crypto : unit -> AnonymousInterface14.t) =
  fun () ->
    AnonymousInterface14.t_of_js (Ojs.get_prop_ascii Ojs.global "Crypto")
let (cryptoKey : unit -> AnonymousInterface15.t) =
  fun () ->
    AnonymousInterface15.t_of_js (Ojs.get_prop_ascii Ojs.global "CryptoKey")
let (customEvent : unit -> AnonymousInterface16.t) =
  fun () ->
    AnonymousInterface16.t_of_js
      (Ojs.get_prop_ascii Ojs.global "CustomEvent")
let (dOMException : unit -> AnonymousInterface17.t) =
  fun () ->
    AnonymousInterface17.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DOMException")
let (dOMMatrix : unit -> AnonymousInterface18.t) =
  fun () ->
    AnonymousInterface18.t_of_js (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
let (dOMMatrixReadOnly : unit -> AnonymousInterface19.t) =
  fun () ->
    AnonymousInterface19.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
let (dOMPoint : unit -> AnonymousInterface20.t) =
  fun () ->
    AnonymousInterface20.t_of_js (Ojs.get_prop_ascii Ojs.global "DOMPoint")
let (dOMPointReadOnly : unit -> AnonymousInterface21.t) =
  fun () ->
    AnonymousInterface21.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly")
let (dOMQuad : unit -> AnonymousInterface22.t) =
  fun () ->
    AnonymousInterface22.t_of_js (Ojs.get_prop_ascii Ojs.global "DOMQuad")
let (dOMRect : unit -> AnonymousInterface23.t) =
  fun () ->
    AnonymousInterface23.t_of_js (Ojs.get_prop_ascii Ojs.global "DOMRect")
let (dOMRectReadOnly : unit -> AnonymousInterface24.t) =
  fun () ->
    AnonymousInterface24.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly")
let (dOMStringList : unit -> AnonymousInterface25.t) =
  fun () ->
    AnonymousInterface25.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DOMStringList")
let (dedicatedWorkerGlobalScope : unit -> AnonymousInterface26.t) =
  fun () ->
    AnonymousInterface26.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
let (errorEvent : unit -> AnonymousInterface27.t) =
  fun () ->
    AnonymousInterface27.t_of_js (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
let (event : unit -> AnonymousInterface28.t) =
  fun () ->
    AnonymousInterface28.t_of_js (Ojs.get_prop_ascii Ojs.global "Event")
let (eventSource : unit -> AnonymousInterface29.t) =
  fun () ->
    AnonymousInterface29.t_of_js
      (Ojs.get_prop_ascii Ojs.global "EventSource")
let (eventTarget : unit -> AnonymousInterface30.t) =
  fun () ->
    AnonymousInterface30.t_of_js
      (Ojs.get_prop_ascii Ojs.global "EventTarget")
let (extendableEvent : unit -> AnonymousInterface31.t) =
  fun () ->
    AnonymousInterface31.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ExtendableEvent")
let (extendableMessageEvent : unit -> AnonymousInterface32.t) =
  fun () ->
    AnonymousInterface32.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
let (fetchEvent : unit -> AnonymousInterface33.t) =
  fun () ->
    AnonymousInterface33.t_of_js (Ojs.get_prop_ascii Ojs.global "FetchEvent")
let (file : unit -> AnonymousInterface34.t) =
  fun () ->
    AnonymousInterface34.t_of_js (Ojs.get_prop_ascii Ojs.global "File")
let (fileList : unit -> AnonymousInterface35.t) =
  fun () ->
    AnonymousInterface35.t_of_js (Ojs.get_prop_ascii Ojs.global "FileList")
let (fileReader : unit -> AnonymousInterface36.t) =
  fun () ->
    AnonymousInterface36.t_of_js (Ojs.get_prop_ascii Ojs.global "FileReader")
let (fileReaderSync : unit -> AnonymousInterface37.t) =
  fun () ->
    AnonymousInterface37.t_of_js
      (Ojs.get_prop_ascii Ojs.global "FileReaderSync")
let (fontFace : unit -> AnonymousInterface38.t) =
  fun () ->
    AnonymousInterface38.t_of_js (Ojs.get_prop_ascii Ojs.global "FontFace")
let (fontFaceSet : unit -> AnonymousInterface39.t) =
  fun () ->
    AnonymousInterface39.t_of_js
      (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
let (fontFaceSetLoadEvent : unit -> AnonymousInterface40.t) =
  fun () ->
    AnonymousInterface40.t_of_js
      (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
let (formData : unit -> AnonymousInterface41.t) =
  fun () ->
    AnonymousInterface41.t_of_js (Ojs.get_prop_ascii Ojs.global "FormData")
let (headers : unit -> AnonymousInterface43.t) =
  fun () ->
    AnonymousInterface43.t_of_js (Ojs.get_prop_ascii Ojs.global "Headers")
let (iDBCursor : unit -> AnonymousInterface44.t) =
  fun () ->
    AnonymousInterface44.t_of_js (Ojs.get_prop_ascii Ojs.global "IDBCursor")
let (iDBCursorWithValue : unit -> AnonymousInterface45.t) =
  fun () ->
    AnonymousInterface45.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue")
let (iDBDatabase : unit -> AnonymousInterface46.t) =
  fun () ->
    AnonymousInterface46.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBDatabase")
let (iDBFactory : unit -> AnonymousInterface47.t) =
  fun () ->
    AnonymousInterface47.t_of_js (Ojs.get_prop_ascii Ojs.global "IDBFactory")
let (iDBIndex : unit -> AnonymousInterface48.t) =
  fun () ->
    AnonymousInterface48.t_of_js (Ojs.get_prop_ascii Ojs.global "IDBIndex")
let (iDBKeyRange : unit -> AnonymousInterface49.t) =
  fun () ->
    AnonymousInterface49.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBKeyRange")
let (iDBObjectStore : unit -> AnonymousInterface50.t) =
  fun () ->
    AnonymousInterface50.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
let (iDBOpenDBRequest : unit -> AnonymousInterface51.t) =
  fun () ->
    AnonymousInterface51.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest")
let (iDBRequest : unit -> AnonymousInterface52.t) =
  fun () ->
    AnonymousInterface52.t_of_js (Ojs.get_prop_ascii Ojs.global "IDBRequest")
let (iDBTransaction : unit -> AnonymousInterface53.t) =
  fun () ->
    AnonymousInterface53.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBTransaction")
let (iDBVersionChangeEvent : unit -> AnonymousInterface54.t) =
  fun () ->
    AnonymousInterface54.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
let (imageBitmap : unit -> AnonymousInterface55.t) =
  fun () ->
    AnonymousInterface55.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ImageBitmap")
let (imageBitmapRenderingContext : unit -> AnonymousInterface56.t) =
  fun () ->
    AnonymousInterface56.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
let (imageData : unit -> AnonymousInterface57.t) =
  fun () ->
    AnonymousInterface57.t_of_js (Ojs.get_prop_ascii Ojs.global "ImageData")
let (mediaCapabilities : unit -> AnonymousInterface60.t) =
  fun () ->
    AnonymousInterface60.t_of_js
      (Ojs.get_prop_ascii Ojs.global "MediaCapabilities")
let (messageChannel : unit -> AnonymousInterface62.t) =
  fun () ->
    AnonymousInterface62.t_of_js
      (Ojs.get_prop_ascii Ojs.global "MessageChannel")
let (messageEvent : unit -> AnonymousInterface63.t) =
  fun () ->
    AnonymousInterface63.t_of_js
      (Ojs.get_prop_ascii Ojs.global "MessageEvent")
let (messagePort : unit -> AnonymousInterface64.t) =
  fun () ->
    AnonymousInterface64.t_of_js
      (Ojs.get_prop_ascii Ojs.global "MessagePort")
let (networkInformation : unit -> AnonymousInterface66.t) =
  fun () ->
    AnonymousInterface66.t_of_js
      (Ojs.get_prop_ascii Ojs.global "NetworkInformation")
let (notification : unit -> AnonymousInterface67.t) =
  fun () ->
    AnonymousInterface67.t_of_js
      (Ojs.get_prop_ascii Ojs.global "Notification")
let (notificationEvent : unit -> AnonymousInterface68.t) =
  fun () ->
    AnonymousInterface68.t_of_js
      (Ojs.get_prop_ascii Ojs.global "NotificationEvent")
let (path2D : unit -> AnonymousInterface69.t) =
  fun () ->
    AnonymousInterface69.t_of_js (Ojs.get_prop_ascii Ojs.global "Path2D")
let (performance : unit -> AnonymousInterface70.t) =
  fun () ->
    AnonymousInterface70.t_of_js
      (Ojs.get_prop_ascii Ojs.global "Performance")
let (performanceEntry : unit -> AnonymousInterface71.t) =
  fun () ->
    AnonymousInterface71.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceEntry")
let (performanceMark : unit -> AnonymousInterface72.t) =
  fun () ->
    AnonymousInterface72.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceMark")
let (performanceMeasure : unit -> AnonymousInterface73.t) =
  fun () ->
    AnonymousInterface73.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure")
let (performanceObserver : unit -> AnonymousInterface74.t) =
  fun () ->
    AnonymousInterface74.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
let (performanceObserverEntryList : unit -> AnonymousInterface75.t) =
  fun () ->
    AnonymousInterface75.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
let (performanceResourceTiming : unit -> AnonymousInterface76.t) =
  fun () ->
    AnonymousInterface76.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming")
let (performanceServerTiming : unit -> AnonymousInterface77.t) =
  fun () ->
    AnonymousInterface77.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming")
let (permissionStatus : unit -> AnonymousInterface78.t) =
  fun () ->
    AnonymousInterface78.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PermissionStatus")
let (permissions : unit -> AnonymousInterface79.t) =
  fun () ->
    AnonymousInterface79.t_of_js
      (Ojs.get_prop_ascii Ojs.global "Permissions")
let (progressEvent : unit -> AnonymousInterface80.t) =
  fun () ->
    AnonymousInterface80.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
let (promiseRejectionEvent : unit -> AnonymousInterface81.t) =
  fun () ->
    AnonymousInterface81.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
let (pushEvent : unit -> AnonymousInterface82.t) =
  fun () ->
    AnonymousInterface82.t_of_js (Ojs.get_prop_ascii Ojs.global "PushEvent")
let (pushManager : unit -> AnonymousInterface83.t) =
  fun () ->
    AnonymousInterface83.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PushManager")
let (pushMessageData : unit -> AnonymousInterface84.t) =
  fun () ->
    AnonymousInterface84.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PushMessageData")
let (pushSubscription : unit -> AnonymousInterface85.t) =
  fun () ->
    AnonymousInterface85.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PushSubscription")
let (pushSubscriptionOptions : unit -> AnonymousInterface86.t) =
  fun () ->
    AnonymousInterface86.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions")
let (readableStream : unit -> AnonymousInterface87.t) =
  fun () ->
    AnonymousInterface87.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ReadableStream")
let (readableStreamDefaultController : unit -> AnonymousInterface88.t) =
  fun () ->
    AnonymousInterface88.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
let (readableStreamDefaultReader : unit -> AnonymousInterface89.t) =
  fun () ->
    AnonymousInterface89.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
let (request : unit -> AnonymousInterface90.t) =
  fun () ->
    AnonymousInterface90.t_of_js (Ojs.get_prop_ascii Ojs.global "Request")
let (response : unit -> AnonymousInterface91.t) =
  fun () ->
    AnonymousInterface91.t_of_js (Ojs.get_prop_ascii Ojs.global "Response")
let (securityPolicyViolationEvent : unit -> AnonymousInterface93.t) =
  fun () ->
    AnonymousInterface93.t_of_js
      (Ojs.get_prop_ascii Ojs.global "SecurityPolicyViolationEvent")
let (serviceWorker : unit -> AnonymousInterface94.t) =
  fun () ->
    AnonymousInterface94.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
let (serviceWorkerContainer : unit -> AnonymousInterface95.t) =
  fun () ->
    AnonymousInterface95.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer")
let (serviceWorkerGlobalScope : unit -> AnonymousInterface96.t) =
  fun () ->
    AnonymousInterface96.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope")
let (serviceWorkerRegistration : unit -> AnonymousInterface97.t) =
  fun () ->
    AnonymousInterface97.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration")
let (sharedWorkerGlobalScope : unit -> AnonymousInterface98.t) =
  fun () ->
    AnonymousInterface98.t_of_js
      (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope")
let (storageManager : unit -> AnonymousInterface99.t) =
  fun () ->
    AnonymousInterface99.t_of_js
      (Ojs.get_prop_ascii Ojs.global "StorageManager")
let (subtleCrypto : unit -> AnonymousInterface100.t) =
  fun () ->
    AnonymousInterface100.t_of_js
      (Ojs.get_prop_ascii Ojs.global "SubtleCrypto")
let (textDecoder : unit -> AnonymousInterface102.t) =
  fun () ->
    AnonymousInterface102.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TextDecoder")
let (textDecoderStream : unit -> AnonymousInterface103.t) =
  fun () ->
    AnonymousInterface103.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TextDecoderStream")
let (textEncoder : unit -> AnonymousInterface104.t) =
  fun () ->
    AnonymousInterface104.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TextEncoder")
let (textEncoderStream : unit -> AnonymousInterface105.t) =
  fun () ->
    AnonymousInterface105.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TextEncoderStream")
let (textMetrics : unit -> AnonymousInterface106.t) =
  fun () ->
    AnonymousInterface106.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TextMetrics")
let (transformStream : unit -> AnonymousInterface107.t) =
  fun () ->
    AnonymousInterface107.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TransformStream")
let (transformStreamDefaultController : unit -> AnonymousInterface108.t) =
  fun () ->
    AnonymousInterface108.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TransformStreamDefaultController")
let (url : unit -> AnonymousInterface109.t) =
  fun () ->
    AnonymousInterface109.t_of_js (Ojs.get_prop_ascii Ojs.global "URL")
let (uRLSearchParams : unit -> AnonymousInterface110.t) =
  fun () ->
    AnonymousInterface110.t_of_js
      (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
let (webGL2RenderingContext : unit -> AnonymousInterface111.t) =
  fun () ->
    AnonymousInterface111.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
let (webGLActiveInfo : unit -> AnonymousInterface112.t) =
  fun () ->
    AnonymousInterface112.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo")
let (webGLBuffer : unit -> AnonymousInterface113.t) =
  fun () ->
    AnonymousInterface113.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLBuffer")
let (webGLContextEvent : unit -> AnonymousInterface114.t) =
  fun () ->
    AnonymousInterface114.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent")
let (webGLFramebuffer : unit -> AnonymousInterface115.t) =
  fun () ->
    AnonymousInterface115.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer")
let (webGLProgram : unit -> AnonymousInterface116.t) =
  fun () ->
    AnonymousInterface116.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLProgram")
let (webGLQuery : unit -> AnonymousInterface117.t) =
  fun () ->
    AnonymousInterface117.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLQuery")
let (webGLRenderbuffer : unit -> AnonymousInterface118.t) =
  fun () ->
    AnonymousInterface118.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer")
let (webGLRenderingContext : unit -> AnonymousInterface119.t) =
  fun () ->
    AnonymousInterface119.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
let (webGLSampler : unit -> AnonymousInterface120.t) =
  fun () ->
    AnonymousInterface120.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLSampler")
let (webGLShader : unit -> AnonymousInterface121.t) =
  fun () ->
    AnonymousInterface121.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLShader")
let (webGLShaderPrecisionFormat : unit -> AnonymousInterface122.t) =
  fun () ->
    AnonymousInterface122.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
let (webGLSync : unit -> AnonymousInterface123.t) =
  fun () ->
    AnonymousInterface123.t_of_js (Ojs.get_prop_ascii Ojs.global "WebGLSync")
let (webGLTexture : unit -> AnonymousInterface124.t) =
  fun () ->
    AnonymousInterface124.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLTexture")
let (webGLTransformFeedback : unit -> AnonymousInterface125.t) =
  fun () ->
    AnonymousInterface125.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback")
let (webGLUniformLocation : unit -> AnonymousInterface126.t) =
  fun () ->
    AnonymousInterface126.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
let (webGLVertexArrayObject : unit -> AnonymousInterface127.t) =
  fun () ->
    AnonymousInterface127.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject")
let (webSocket : unit -> AnonymousInterface128.t) =
  fun () ->
    AnonymousInterface128.t_of_js (Ojs.get_prop_ascii Ojs.global "WebSocket")
let (windowClient : unit -> AnonymousInterface129.t) =
  fun () ->
    AnonymousInterface129.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WindowClient")
let (worker : unit -> AnonymousInterface130.t) =
  fun () ->
    AnonymousInterface130.t_of_js (Ojs.get_prop_ascii Ojs.global "Worker")
let (workerGlobalScope : unit -> AnonymousInterface131.t) =
  fun () ->
    AnonymousInterface131.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope")
let (workerLocation : unit -> AnonymousInterface132.t) =
  fun () ->
    AnonymousInterface132.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WorkerLocation")
let (workerNavigator : unit -> AnonymousInterface133.t) =
  fun () ->
    AnonymousInterface133.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WorkerNavigator")
let (writableStream : unit -> AnonymousInterface134.t) =
  fun () ->
    AnonymousInterface134.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WritableStream")
let (writableStreamDefaultController : unit -> AnonymousInterface135.t) =
  fun () ->
    AnonymousInterface135.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
let (writableStreamDefaultWriter : unit -> AnonymousInterface136.t) =
  fun () ->
    AnonymousInterface136.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
let (xMLHttpRequest : unit -> AnonymousInterface137.t) =
  fun () ->
    AnonymousInterface137.t_of_js
      (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
let (xMLHttpRequestEventTarget : unit -> AnonymousInterface138.t) =
  fun () ->
    AnonymousInterface138.t_of_js
      (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget")
let (xMLHttpRequestUpload : unit -> AnonymousInterface139.t) =
  fun () ->
    AnonymousInterface139.t_of_js
      (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload")
let (console : unit -> Console.t) =
  fun () -> Console.t_of_js (Ojs.get_prop_ascii Ojs.global "console")
let (name : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "name")
let (onmessage :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x16444 : Ojs.t) ->
         fun ~this:(x16445 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16446 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x16444
                  [|(DedicatedWorkerGlobalScope.t_to_js x16445);(MessageEvent.t_0_to_js
                                                                   x16446)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessage")
let (onmessageerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x16447 : Ojs.t) ->
         fun ~this:(x16448 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16449 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x16447
                  [|(DedicatedWorkerGlobalScope.t_to_js x16448);(MessageEvent.t_0_to_js
                                                                   x16449)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessageerror")
let (close : unit -> unit) =
  fun () -> ignore (Ojs.call Ojs.global "close" [||])
let (postMessage : message:any -> transfer:Transferable.t list -> unit) =
  fun ~message:(x16450 : any) ->
    fun ~transfer:(x16451 : Transferable.t list) ->
      ignore
        (Ojs.call Ojs.global "postMessage"
           [|(any_to_js x16450);(Ojs.list_to_js Transferable.t_to_js x16451)|])
let (postMessage' :
  message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit) =
  fun ~message:(x16453 : any) ->
    fun ?options:(x16454 : StructuredSerializeOptions.t option) ->
      fun () ->
        ignore
          (let x16457 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16457 "postMessage") "apply"
             [|x16457;((let x16455 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16455 "push" [|(any_to_js x16453)|]);
                        (match x16454 with
                         | Some x16456 ->
                             ignore
                               (Ojs.call x16455 "push"
                                  [|(StructuredSerializeOptions.t_to_js
                                       x16456)|])
                         | None -> ());
                        x16455))|])
let (dispatchEvent : Event.t -> bool) =
  fun (x16458 : Event.t) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "dispatchEvent" [|(Event.t_to_js x16458)|])
let (location : unit -> WorkerLocation.t) =
  fun () -> WorkerLocation.t_of_js (Ojs.get_prop_ascii Ojs.global "location")
let (navigator : unit -> WorkerNavigator.t) =
  fun () ->
    WorkerNavigator.t_of_js (Ojs.get_prop_ascii Ojs.global "navigator")
let (onerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:ErrorEvent.t -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x16459 : Ojs.t) ->
         fun ~this:(x16460 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16461 : ErrorEvent.t) ->
             any_of_js
               (Ojs.apply x16459
                  [|(DedicatedWorkerGlobalScope.t_to_js x16460);(ErrorEvent.t_to_js
                                                                   x16461)|]))
      (Ojs.get_prop_ascii Ojs.global "onerror")
let (onlanguagechange :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x16462 : Ojs.t) ->
         fun ~this:(x16463 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16464 : Event.t) ->
             any_of_js
               (Ojs.apply x16462
                  [|(DedicatedWorkerGlobalScope.t_to_js x16463);(Event.t_to_js
                                                                   x16464)|]))
      (Ojs.get_prop_ascii Ojs.global "onlanguagechange")
let (onoffline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x16465 : Ojs.t) ->
         fun ~this:(x16466 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16467 : Event.t) ->
             any_of_js
               (Ojs.apply x16465
                  [|(DedicatedWorkerGlobalScope.t_to_js x16466);(Event.t_to_js
                                                                   x16467)|]))
      (Ojs.get_prop_ascii Ojs.global "onoffline")
let (ononline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x16468 : Ojs.t) ->
         fun ~this:(x16469 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16470 : Event.t) ->
             any_of_js
               (Ojs.apply x16468
                  [|(DedicatedWorkerGlobalScope.t_to_js x16469);(Event.t_to_js
                                                                   x16470)|]))
      (Ojs.get_prop_ascii Ojs.global "ononline")
let (onrejectionhandled :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x16471 : Ojs.t) ->
         fun ~this:(x16472 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16473 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x16471
                  [|(DedicatedWorkerGlobalScope.t_to_js x16472);(PromiseRejectionEvent.t_to_js
                                                                   x16473)|]))
      (Ojs.get_prop_ascii Ojs.global "onrejectionhandled")
let (onunhandledrejection :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x16474 : Ojs.t) ->
         fun ~this:(x16475 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16476 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x16474
                  [|(DedicatedWorkerGlobalScope.t_to_js x16475);(PromiseRejectionEvent.t_to_js
                                                                   x16476)|]))
      (Ojs.get_prop_ascii Ojs.global "onunhandledrejection")
let (self : unit -> (WorkerGlobalScope.t, any) intersection2) =
  fun () ->
    intersection2_of_js WorkerGlobalScope.t_of_js any_of_js
      (Ojs.get_prop_ascii Ojs.global "self")
let (importScripts : URL.t or_string list -> unit) =
  fun (x16479 : URL.t or_string list) ->
    ignore
      (let x16483 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x16483 "importScripts") "apply"
         [|x16483;((let x16480 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x16481 : URL.t or_string) ->
                         ignore
                           (Ojs.call x16480 "push"
                              [|(or_string_to_js URL.t_to_js x16481)|]))
                      x16479;
                    x16480))|])
let (fonts : unit -> FontFaceSet.t) =
  fun () -> FontFaceSet.t_of_js (Ojs.get_prop_ascii Ojs.global "fonts")
let (caches : unit -> CacheStorage.t) =
  fun () -> CacheStorage.t_of_js (Ojs.get_prop_ascii Ojs.global "caches")
let (crossOriginIsolated : unit -> bool) =
  fun () ->
    Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "crossOriginIsolated")
let (crypto' : unit -> Crypto.t) =
  fun () -> Crypto.t_of_js (Ojs.get_prop_ascii Ojs.global "crypto")
let (indexedDB : unit -> IDBFactory.t) =
  fun () -> IDBFactory.t_of_js (Ojs.get_prop_ascii Ojs.global "indexedDB")
let (isSecureContext : unit -> bool) =
  fun () -> Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "isSecureContext")
let (origin : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "origin")
let (performance' : unit -> Performance.t) =
  fun () -> Performance.t_of_js (Ojs.get_prop_ascii Ojs.global "performance")
let (atob : string -> string) =
  fun (x16484 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "atob" [|(Ojs.string_to_js x16484)|])
let (btoa : string -> string) =
  fun (x16485 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "btoa" [|(Ojs.string_to_js x16485)|])
let (clearInterval : ?handle:float -> unit -> unit) =
  fun ?handle:(x16486 : float option) ->
    fun () ->
      ignore
        (let x16489 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x16489 "clearInterval") "apply"
           [|x16489;((let x16487 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x16486 with
                       | Some x16488 ->
                           ignore
                             (Ojs.call x16487 "push"
                                [|(Ojs.float_to_js x16488)|])
                       | None -> ());
                      x16487))|])
let (clearTimeout : ?handle:float -> unit -> unit) =
  fun ?handle:(x16490 : float option) ->
    fun () ->
      ignore
        (let x16493 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x16493 "clearTimeout") "apply"
           [|x16493;((let x16491 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x16490 with
                       | Some x16492 ->
                           ignore
                             (Ojs.call x16491 "push"
                                [|(Ojs.float_to_js x16492)|])
                       | None -> ());
                      x16491))|])
let (createImageBitmap :
  image:ImageBitmapSource.t ->
    ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x16494 : ImageBitmapSource.t) ->
    fun ?options:(x16495 : ImageBitmapOptions.t option) ->
      fun () ->
        Promise.t_1_of_js ImageBitmap.t_of_js
          (let x16498 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16498 "createImageBitmap") "apply"
             [|x16498;((let x16496 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16496 "push"
                             [|(ImageBitmapSource.t_to_js x16494)|]);
                        (match x16495 with
                         | Some x16497 ->
                             ignore
                               (Ojs.call x16496 "push"
                                  [|(ImageBitmapOptions.t_to_js x16497)|])
                         | None -> ());
                        x16496))|])
let (createImageBitmap' :
  image:ImageBitmapSource.t ->
    sx:float ->
      sy:float ->
        sw:float ->
          sh:float ->
            ?options:ImageBitmapOptions.t ->
              unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x16500 : ImageBitmapSource.t) ->
    fun ~sx:(x16501 : float) ->
      fun ~sy:(x16502 : float) ->
        fun ~sw:(x16503 : float) ->
          fun ~sh:(x16504 : float) ->
            fun ?options:(x16505 : ImageBitmapOptions.t option) ->
              fun () ->
                Promise.t_1_of_js ImageBitmap.t_of_js
                  (let x16508 = Ojs.global in
                   Ojs.call (Ojs.get_prop_ascii x16508 "createImageBitmap")
                     "apply"
                     [|x16508;((let x16506 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16506 "push"
                                     [|(ImageBitmapSource.t_to_js x16500)|]);
                                ignore
                                  (Ojs.call x16506 "push"
                                     [|(Ojs.float_to_js x16501)|]);
                                ignore
                                  (Ojs.call x16506 "push"
                                     [|(Ojs.float_to_js x16502)|]);
                                ignore
                                  (Ojs.call x16506 "push"
                                     [|(Ojs.float_to_js x16503)|]);
                                ignore
                                  (Ojs.call x16506 "push"
                                     [|(Ojs.float_to_js x16504)|]);
                                (match x16505 with
                                 | Some x16507 ->
                                     ignore
                                       (Ojs.call x16506 "push"
                                          [|(ImageBitmapOptions.t_to_js
                                               x16507)|])
                                 | None -> ());
                                x16506))|])
let (fetch :
  input:RequestInfo.t ->
    ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
  =
  fun ~input:(x16510 : RequestInfo.t) ->
    fun ?init:(x16511 : RequestInit.t option) ->
      fun () ->
        Promise.t_1_of_js Response.t_of_js
          (let x16514 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16514 "fetch") "apply"
             [|x16514;((let x16512 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16512 "push"
                             [|(RequestInfo.t_to_js x16510)|]);
                        (match x16511 with
                         | Some x16513 ->
                             ignore
                               (Ojs.call x16512 "push"
                                  [|(RequestInit.t_to_js x16513)|])
                         | None -> ());
                        x16512))|])
let (queueMicrotask : VoidFunction.t -> unit) =
  fun (x16516 : VoidFunction.t) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask" [|(VoidFunction.t_to_js x16516)|])
let (setInterval :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x16517 : TimerHandler.t) ->
    fun ?timeout:(x16518 : float option) ->
      fun ~arguments:(x16519 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x16523 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16523 "setInterval") "apply"
               [|x16523;((let x16520 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16520 "push"
                               [|(TimerHandler.t_to_js x16517)|]);
                          (match x16518 with
                           | Some x16522 ->
                               ignore
                                 (Ojs.call x16520 "push"
                                    [|(Ojs.float_to_js x16522)|])
                           | None -> ());
                          List.iter
                            (fun (x16521 : any) ->
                               ignore
                                 (Ojs.call x16520 "push"
                                    [|(any_to_js x16521)|])) x16519;
                          x16520))|])
let (setTimeout :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x16524 : TimerHandler.t) ->
    fun ?timeout:(x16525 : float option) ->
      fun ~arguments:(x16526 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x16530 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16530 "setTimeout") "apply"
               [|x16530;((let x16527 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16527 "push"
                               [|(TimerHandler.t_to_js x16524)|]);
                          (match x16525 with
                           | Some x16529 ->
                               ignore
                                 (Ojs.call x16527 "push"
                                    [|(Ojs.float_to_js x16529)|])
                           | None -> ());
                          List.iter
                            (fun (x16528 : any) ->
                               ignore
                                 (Ojs.call x16527 "push"
                                    [|(any_to_js x16528)|])) x16526;
                          x16527))|])
let (cancelAnimationFrame : float -> unit) =
  fun (x16531 : float) ->
    ignore
      (Ojs.call Ojs.global "cancelAnimationFrame"
         [|(Ojs.float_to_js x16531)|])
let (requestAnimationFrame : FrameRequestCallback.t -> float) =
  fun (x16532 : FrameRequestCallback.t) ->
    Ojs.float_of_js
      (Ojs.call Ojs.global "requestAnimationFrame"
         [|(FrameRequestCallback.t_to_js x16532)|])
let (addEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x16533 : 'K) ->
    fun
      ~listener:(x16534 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun ?options:(x16535 : AddEventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x16541 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16541 "addEventListener") "apply"
               [|x16541;((let x16536 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16536 "push" [|(Obj.magic x16533)|]);
                          ignore
                            (Ojs.call x16536 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16539 : Ojs.t) ->
                                       fun (x16540 : Ojs.t) ->
                                         any_to_js
                                           (x16534
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16539)
                                              ~ev:(any_of_js x16540))))|]);
                          (match x16535 with
                           | Some x16537 ->
                               ignore
                                 (Ojs.call x16536 "push"
                                    [|(or_boolean_to_js
                                         AddEventListenerOptions.t_to_js
                                         x16537)|])
                           | None -> ());
                          x16536))|])
let (addEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x16542 : string) ->
    fun ~listener:(x16543 : EventListenerOrEventListenerObject.t) ->
      fun ?options:(x16544 : AddEventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x16548 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16548 "addEventListener") "apply"
               [|x16548;((let x16545 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16545 "push"
                               [|(Ojs.string_to_js x16542)|]);
                          ignore
                            (Ojs.call x16545 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16543)|]);
                          (match x16544 with
                           | Some x16546 ->
                               ignore
                                 (Ojs.call x16545 "push"
                                    [|(or_boolean_to_js
                                         AddEventListenerOptions.t_to_js
                                         x16546)|])
                           | None -> ());
                          x16545))|])
let (removeEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:EventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x16549 : 'K) ->
    fun
      ~listener:(x16550 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun ?options:(x16551 : EventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x16557 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16557 "removeEventListener")
               "apply"
               [|x16557;((let x16552 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16552 "push" [|(Obj.magic x16549)|]);
                          ignore
                            (Ojs.call x16552 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16555 : Ojs.t) ->
                                       fun (x16556 : Ojs.t) ->
                                         any_to_js
                                           (x16550
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16555)
                                              ~ev:(any_of_js x16556))))|]);
                          (match x16551 with
                           | Some x16553 ->
                               ignore
                                 (Ojs.call x16552 "push"
                                    [|(or_boolean_to_js
                                         EventListenerOptions.t_to_js x16553)|])
                           | None -> ());
                          x16552))|])
let (removeEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:EventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x16558 : string) ->
    fun ~listener:(x16559 : EventListenerOrEventListenerObject.t) ->
      fun ?options:(x16560 : EventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x16564 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16564 "removeEventListener")
               "apply"
               [|x16564;((let x16561 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16561 "push"
                               [|(Ojs.string_to_js x16558)|]);
                          ignore
                            (Ojs.call x16561 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16559)|]);
                          (match x16560 with
                           | Some x16562 ->
                               ignore
                                 (Ojs.call x16561 "push"
                                    [|(or_boolean_to_js
                                         EventListenerOptions.t_to_js x16562)|])
                           | None -> ());
                          x16561))|])
let (importScripts' : string list -> unit) =
  fun (x16565 : string list) ->
    ignore
      (let x16568 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x16568 "importScripts") "apply"
         [|x16568;((let x16566 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x16567 : string) ->
                         ignore
                           (Ojs.call x16566 "push"
                              [|(Ojs.string_to_js x16567)|])) x16565;
                    x16566))|])

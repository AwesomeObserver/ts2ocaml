[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_min
open Ts2ocaml_es
module DOMHighResTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> Ojs.float_of_js x2
    and t_to_js : t -> Ojs.t = fun (x1 : float) -> Ojs.float_to_js x1
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4 : Ojs.t) -> t_of_js x4
    and t_0_to_js : t_0 -> Ojs.t = fun (x3 : t) -> t_to_js x3
  end
module PerformanceMeasureOptions =
  struct
    type t = [ `PerformanceMeasureOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6 : Ojs.t) -> t_of_js x6
    and t_0_to_js : t_0 -> Ojs.t = fun (x5 : t) -> t_to_js x5
    type tags = [ `PerformanceMeasureOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMeasureOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9 : Ojs.t) -> intf_of_js __tags_of_js x9
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7 : __tags intf) -> intf_to_js __tags_to_js x7
    let (get_detail : 'tags this -> any) =
      fun (x11 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x13 : 'tags this) ->
        fun (x14 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13) "detail"
            (any_to_js x14)
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x16 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16) "duration")
    let (set_duration : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x18 : 'tags this) ->
        fun (x19 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x18) "duration"
            (DOMHighResTimeStamp.t_to_js x19)
    let (get_end :
      'tags this ->
        [ `String of string  | `Other of DOMHighResTimeStamp.t ] Primitive.t)
      =
      fun (x21 : 'tags this) ->
        Primitive.t_of_js
          (fun (x23 : Ojs.t) ->
             let x24 = x23 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x24 "dummy") with
             | "String" -> `String (Ojs.string_of_js x24)
             | "Other" -> `Other (DOMHighResTimeStamp.t_of_js x24)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x21) "end")
    let (set_end :
      'tags this -> [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ] -> unit)
      =
      fun (x25 : 'tags this) ->
        fun (x26 : [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x25) "end"
            (match x26 with
             | `U1 x27 -> Ojs.string_to_js x27
             | `U2 x28 -> DOMHighResTimeStamp.t_to_js x28)
    let (get_start :
      'tags this ->
        [ `String of string  | `Other of DOMHighResTimeStamp.t ] Primitive.t)
      =
      fun (x30 : 'tags this) ->
        Primitive.t_of_js
          (fun (x32 : Ojs.t) ->
             let x33 = x32 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x33 "dummy") with
             | "String" -> `String (Ojs.string_of_js x33)
             | "Other" -> `Other (DOMHighResTimeStamp.t_of_js x33)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x30) "start")
    let (set_start :
      'tags this -> [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ] -> unit)
      =
      fun (x34 : 'tags this) ->
        fun (x35 : [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x34) "start"
            (match x35 with
             | `U1 x36 -> Ojs.string_to_js x36
             | `U2 x37 -> DOMHighResTimeStamp.t_to_js x37)
    let (create :
      detail:any ->
        duration:DOMHighResTimeStamp.t ->
          end_:[ `String of string  | `Other of DOMHighResTimeStamp.t ]
            Primitive.t ->
            start:[ `String of string  | `Other of DOMHighResTimeStamp.t ]
              Primitive.t -> unit -> t)
      =
      fun ~detail:(x39 : any) ->
        fun ~duration:(x40 : DOMHighResTimeStamp.t) ->
          fun
            ~end_:(x41 :
                    [ `String of string  | `Other of DOMHighResTimeStamp.t ]
                      Primitive.t)
            ->
            fun
              ~start:(x42 :
                       [ `String of string 
                       | `Other of DOMHighResTimeStamp.t ] Primitive.t)
              ->
              fun () ->
                let x43 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x43 "detail" (any_to_js x39);
                Ojs.set_prop_ascii x43 "duration"
                  (DOMHighResTimeStamp.t_to_js x40);
                Ojs.set_prop_ascii x43 "end"
                  (Primitive.t_to_js
                     (fun
                        (x47 :
                          [ `String of string 
                          | `Other of DOMHighResTimeStamp.t ])
                        ->
                        match x47 with
                        | `String x48 -> Ojs.string_to_js x48
                        | `Other x49 -> DOMHighResTimeStamp.t_to_js x49) x41);
                Ojs.set_prop_ascii x43 "start"
                  (Primitive.t_to_js
                     (fun
                        (x44 :
                          [ `String of string 
                          | `Other of DOMHighResTimeStamp.t ])
                        ->
                        match x44 with
                        | `String x45 -> Ojs.string_to_js x45
                        | `Other x46 -> DOMHighResTimeStamp.t_to_js x46) x42);
                t_of_js x43
    let cast_from = Obj.magic
  end
module PerformanceEntry =
  struct
    type t = [ `PerformanceEntry ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x51 : Ojs.t) -> t_of_js x51
    and t_0_to_js : t_0 -> Ojs.t = fun (x50 : t) -> t_to_js x50
    type tags = [ `PerformanceEntry ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEntry ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x54 : Ojs.t) -> intf_of_js __tags_of_js x54
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x52 : __tags intf) -> intf_to_js __tags_to_js x52
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x56 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x56) "duration")
    let (get_entryType : 'tags this -> string) =
      fun (x58 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x58) "entryType")
    let (get_name : 'tags this -> string) =
      fun (x60 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x60) "name")
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x62 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x62) "startTime")
    let (toJSON : 'tags this -> any) =
      fun (x64 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x64) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceEntry") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceEntry")
             [||])
  end
module PerformanceMeasure =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMeasure ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x67 : Ojs.t) -> t_of_js x67
    and t_0_to_js : t_0 -> Ojs.t = fun (x66 : t) -> t_to_js x66
    type tags = [ `PerformanceEntry  | `PerformanceMeasure ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasure ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x70 : Ojs.t) -> intf_of_js __tags_of_js x70
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x68 : __tags intf) -> intf_to_js __tags_to_js x68
    let (get_detail : 'tags this -> any) =
      fun (x72 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x72) "detail")
    let (create : detail:any -> unit -> t) =
      fun ~detail:(x74 : any) ->
        fun () ->
          let x75 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x75 "detail" (any_to_js x74); t_of_js x75
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure")
             [||])
  end
module PerformanceMarkOptions =
  struct
    type t = [ `PerformanceMarkOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x77 : Ojs.t) -> t_of_js x77
    and t_0_to_js : t_0 -> Ojs.t = fun (x76 : t) -> t_to_js x76
    type tags = [ `PerformanceMarkOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMarkOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x80 : Ojs.t) -> intf_of_js __tags_of_js x80
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x78 : __tags intf) -> intf_to_js __tags_to_js x78
    let (get_detail : 'tags this -> any) =
      fun (x82 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x82) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x84 : 'tags this) ->
        fun (x85 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x84) "detail"
            (any_to_js x85)
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x87 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x87) "startTime")
    let (set_startTime : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x89 : 'tags this) ->
        fun (x90 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x89) "startTime"
            (DOMHighResTimeStamp.t_to_js x90)
    let (create : detail:any -> startTime:DOMHighResTimeStamp.t -> unit -> t)
      =
      fun ~detail:(x92 : any) ->
        fun ~startTime:(x93 : DOMHighResTimeStamp.t) ->
          fun () ->
            let x94 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x94 "detail" (any_to_js x92);
            Ojs.set_prop_ascii x94 "startTime"
              (DOMHighResTimeStamp.t_to_js x93);
            t_of_js x94
    let cast_from = Obj.magic
  end
module PerformanceMark =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMark ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x96 : Ojs.t) -> t_of_js x96
    and t_0_to_js : t_0 -> Ojs.t = fun (x95 : t) -> t_to_js x95
    type tags = [ `PerformanceEntry  | `PerformanceMark ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMark ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x99 : Ojs.t) -> intf_of_js __tags_of_js x99
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x97 : __tags intf) -> intf_to_js __tags_to_js x97
    let (get_detail : 'tags this -> any) =
      fun (x101 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x101) "detail")
    let (create : detail:any -> unit -> t) =
      fun ~detail:(x103 : any) ->
        fun () ->
          let x104 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x104 "detail" (any_to_js x103); t_of_js x104
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMark") "prototype")
    let (create' :
      markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> t)
      =
      fun ~markName:(x105 : string) ->
        fun ?markOptions:(x106 : PerformanceMarkOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "PerformanceMark")
                 (let x107 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x107 "push" [|(Ojs.string_to_js x105)|]);
                  (match x106 with
                   | Some x108 ->
                       ignore
                         (Ojs.call x107 "push"
                            [|(PerformanceMarkOptions.t_to_js x108)|])
                   | None -> ());
                  x107))
  end
module PerformanceEntryList =
  struct
    type t = PerformanceEntry.t list
    let rec t_of_js : Ojs.t -> t =
      fun (x111 : Ojs.t) -> Ojs.list_of_js PerformanceEntry.t_of_js x111
    and t_to_js : t -> Ojs.t =
      fun (x109 : PerformanceEntry.t list) ->
        Ojs.list_to_js PerformanceEntry.t_to_js x109
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x114 : Ojs.t) -> t_of_js x114
    and t_0_to_js : t_0 -> Ojs.t = fun (x113 : t) -> t_to_js x113
  end
module EventInit =
  struct
    type t = [ `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x116 : Ojs.t) -> t_of_js x116
    and t_0_to_js : t_0 -> Ojs.t = fun (x115 : t) -> t_to_js x115
    type tags = [ `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x119 : Ojs.t) -> intf_of_js __tags_of_js x119
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x117 : __tags intf) -> intf_to_js __tags_to_js x117
    let (get_bubbles : 'tags this -> bool) =
      fun (x121 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x121) "bubbles")
    let (set_bubbles : 'tags this -> bool -> unit) =
      fun (x123 : 'tags this) ->
        fun (x124 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x123) "bubbles"
            (Ojs.bool_to_js x124)
    let (get_cancelable : 'tags this -> bool) =
      fun (x126 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x126) "cancelable")
    let (set_cancelable : 'tags this -> bool -> unit) =
      fun (x128 : 'tags this) ->
        fun (x129 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x128) "cancelable"
            (Ojs.bool_to_js x129)
    let (get_composed : 'tags this -> bool) =
      fun (x131 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x131) "composed")
    let (set_composed : 'tags this -> bool -> unit) =
      fun (x133 : 'tags this) ->
        fun (x134 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x133) "composed"
            (Ojs.bool_to_js x134)
    let (create :
      bubbles:bool -> cancelable:bool -> composed:bool -> unit -> t) =
      fun ~bubbles:(x136 : bool) ->
        fun ~cancelable:(x137 : bool) ->
          fun ~composed:(x138 : bool) ->
            fun () ->
              let x139 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x139 "bubbles" (Ojs.bool_to_js x136);
              Ojs.set_prop_ascii x139 "cancelable" (Ojs.bool_to_js x137);
              Ojs.set_prop_ascii x139 "composed" (Ojs.bool_to_js x138);
              t_of_js x139
    let cast_from = Obj.magic
  end
module EventListenerOptions =
  struct
    type t = [ `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x141 : Ojs.t) -> t_of_js x141
    and t_0_to_js : t_0 -> Ojs.t = fun (x140 : t) -> t_to_js x140
    type tags = [ `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x144 : Ojs.t) -> intf_of_js __tags_of_js x144
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x142 : __tags intf) -> intf_to_js __tags_to_js x142
    let (get_capture : 'tags this -> bool) =
      fun (x146 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x146) "capture")
    let (set_capture : 'tags this -> bool -> unit) =
      fun (x148 : 'tags this) ->
        fun (x149 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x148) "capture"
            (Ojs.bool_to_js x149)
    let (create : capture:bool -> unit -> t) =
      fun ~capture:(x151 : bool) ->
        fun () ->
          let x152 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x152 "capture" (Ojs.bool_to_js x151);
          t_of_js x152
    let cast_from = Obj.magic
  end
module rec
  AbortSignal:sig
                type t = [ `AbortSignal  | `EventTarget ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `AbortSignal  | `EventTarget ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `AbortSignal  | `EventTarget ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `AbortSignal ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_aborted : 'tags this -> bool
                val get_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) option
                val set_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) option -> unit
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:[ `U1 of bool 
                                 | `U2 of AddEventListenerOptions.t ]
                          -> unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:[ `U1 of bool 
                                 | `U2 of AddEventListenerOptions.t ]
                          -> unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:[ `U1 of bool 
                                 | `U2 of EventListenerOptions.t ]
                          -> unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:[ `U1 of bool 
                                 | `U2 of EventListenerOptions.t ]
                          -> unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `AbortSignal  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x154 : Ojs.t) -> t_of_js x154
    and t_0_to_js : t_0 -> Ojs.t = fun (x153 : t) -> t_to_js x153
    type tags = [ `AbortSignal  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignal ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x157 : Ojs.t) -> intf_of_js __tags_of_js x157
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x155 : __tags intf) -> intf_to_js __tags_to_js x155
    let (get_aborted : 'tags this -> bool) =
      fun (x159 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x159) "aborted")
    let (get_onabort : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x161 : 'tags this) ->
        Ojs.option_of_js
          (fun (x163 : Ojs.t) ->
             fun ~this:(x164 : t) ->
               fun ~ev:(x165 : Event.t) ->
                 any_of_js
                   (Ojs.apply x163 [|(t_to_js x164);(Event.t_to_js x165)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x161) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x166 : 'tags this) ->
        fun (x167 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x166) "onabort"
            (Ojs.option_to_js
               (fun (x168 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x169 : Ojs.t) ->
                       fun (x170 : Ojs.t) ->
                         any_to_js
                           (x168 ~this:(t_of_js x169)
                              ~ev:(Event.t_of_js x170)))) x167)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x181 : 'tags this) ->
        fun ~type_:(x172 : 'K) ->
          fun ~listener:(x173 : this:t -> ev:any -> any) ->
            fun
              ?options:(x174 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x183 = this_to_js Obj.magic x181 in
                   Ojs.call (Ojs.get_prop_ascii x183 "addEventListener")
                     "apply"
                     [|x183;((let x175 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x175 "push" [|(Obj.magic x172)|]);
                              ignore
                                (Ojs.call x175 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x179 : Ojs.t) ->
                                           fun (x180 : Ojs.t) ->
                                             any_to_js
                                               (x173 ~this:(t_of_js x179)
                                                  ~ev:(any_of_js x180))))|]);
                              (match x174 with
                               | Some x176 ->
                                   ignore
                                     (Ojs.call x175 "push"
                                        [|((match x176 with
                                            | `U1 x177 -> Ojs.bool_to_js x177
                                            | `U2 x178 ->
                                                AddEventListenerOptions.t_to_js
                                                  x178))|])
                               | None -> ());
                              x175))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x191 : 'tags this) ->
        fun ~type_:(x184 : string) ->
          fun ~listener:(x185 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x186 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x193 = this_to_js Obj.magic x191 in
                   Ojs.call (Ojs.get_prop_ascii x193 "addEventListener")
                     "apply"
                     [|x193;((let x187 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x187 "push"
                                   [|(Ojs.string_to_js x184)|]);
                              ignore
                                (Ojs.call x187 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x185)|]);
                              (match x186 with
                               | Some x188 ->
                                   ignore
                                     (Ojs.call x187 "push"
                                        [|((match x188 with
                                            | `U1 x189 -> Ojs.bool_to_js x189
                                            | `U2 x190 ->
                                                AddEventListenerOptions.t_to_js
                                                  x190))|])
                               | None -> ());
                              x187))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x203 : 'tags this) ->
        fun ~type_:(x194 : 'K) ->
          fun ~listener:(x195 : this:t -> ev:any -> any) ->
            fun
              ?options:(x196 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x205 = this_to_js Obj.magic x203 in
                   Ojs.call (Ojs.get_prop_ascii x205 "removeEventListener")
                     "apply"
                     [|x205;((let x197 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x197 "push" [|(Obj.magic x194)|]);
                              ignore
                                (Ojs.call x197 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x201 : Ojs.t) ->
                                           fun (x202 : Ojs.t) ->
                                             any_to_js
                                               (x195 ~this:(t_of_js x201)
                                                  ~ev:(any_of_js x202))))|]);
                              (match x196 with
                               | Some x198 ->
                                   ignore
                                     (Ojs.call x197 "push"
                                        [|((match x198 with
                                            | `U1 x199 -> Ojs.bool_to_js x199
                                            | `U2 x200 ->
                                                EventListenerOptions.t_to_js
                                                  x200))|])
                               | None -> ());
                              x197))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x213 : 'tags this) ->
        fun ~type_:(x206 : string) ->
          fun ~listener:(x207 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x208 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x215 = this_to_js Obj.magic x213 in
                   Ojs.call (Ojs.get_prop_ascii x215 "removeEventListener")
                     "apply"
                     [|x215;((let x209 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x209 "push"
                                   [|(Ojs.string_to_js x206)|]);
                              ignore
                                (Ojs.call x209 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x207)|]);
                              (match x208 with
                               | Some x210 ->
                                   ignore
                                     (Ojs.call x209 "push"
                                        [|((match x210 with
                                            | `U1 x211 -> Ojs.bool_to_js x211
                                            | `U2 x212 ->
                                                EventListenerOptions.t_to_js
                                                  x212))|])
                               | None -> ());
                              x209))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "AbortSignal")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortSignal") [||])
  end
 and
  AddEventListenerOptions:sig
                            type t =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags =
                                [ `AddEventListenerOptions 
                                | `EventListenerOptions ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `AddEventListenerOptions ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_once : 'tags this -> bool
                            val set_once : 'tags this -> bool -> unit
                            val get_passive : 'tags this -> bool
                            val set_passive : 'tags this -> bool -> unit
                            val get_signal : 'tags this -> AbortSignal.t
                            val set_signal :
                              'tags this -> AbortSignal.t -> unit
                            val create :
                              once:bool ->
                                passive:bool ->
                                  signal:AbortSignal.t -> unit -> t
                            val cast_from : 'tags this -> t
                          end =
  struct
    type t = [ `AddEventListenerOptions  | `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x217 : Ojs.t) -> t_of_js x217
    and t_0_to_js : t_0 -> Ojs.t = fun (x216 : t) -> t_to_js x216
    type tags = [ `AddEventListenerOptions  | `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AddEventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x220 : Ojs.t) -> intf_of_js __tags_of_js x220
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x218 : __tags intf) -> intf_to_js __tags_to_js x218
    let (get_once : 'tags this -> bool) =
      fun (x222 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x222) "once")
    let (set_once : 'tags this -> bool -> unit) =
      fun (x224 : 'tags this) ->
        fun (x225 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x224) "once"
            (Ojs.bool_to_js x225)
    let (get_passive : 'tags this -> bool) =
      fun (x227 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x227) "passive")
    let (set_passive : 'tags this -> bool -> unit) =
      fun (x229 : 'tags this) ->
        fun (x230 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x229) "passive"
            (Ojs.bool_to_js x230)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x232 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x232) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x234 : 'tags this) ->
        fun (x235 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x234) "signal"
            (AbortSignal.t_to_js x235)
    let (create :
      once:bool -> passive:bool -> signal:AbortSignal.t -> unit -> t) =
      fun ~once:(x237 : bool) ->
        fun ~passive:(x238 : bool) ->
          fun ~signal:(x239 : AbortSignal.t) ->
            fun () ->
              let x240 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x240 "once" (Ojs.bool_to_js x237);
              Ojs.set_prop_ascii x240 "passive" (Ojs.bool_to_js x238);
              Ojs.set_prop_ascii x240 "signal" (AbortSignal.t_to_js x239);
              t_of_js x240
    let cast_from = Obj.magic
  end and
       Event:sig
               type t = [ `Event ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `Event ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem type tags = [ `Event ]
                 type tags_0 = tags]
               type 'tags this = 'tags intf constraint 'tags = [> `Event ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_bubbles : 'tags this -> bool
               val get_cancelBubble : 'tags this -> bool
               val set_cancelBubble : 'tags this -> bool -> unit
               val get_cancelable : 'tags this -> bool
               val get_composed : 'tags this -> bool
               val get_currentTarget : 'tags this -> EventTarget.t option
               val get_defaultPrevented : 'tags this -> bool
               val get_eventPhase : 'tags this -> float
               val get_isTrusted : 'tags this -> bool
               val get_returnValue : 'tags this -> bool
               val set_returnValue : 'tags this -> bool -> unit
               val get_srcElement : 'tags this -> EventTarget.t option
               val get_target : 'tags this -> EventTarget.t option
               val get_timeStamp : 'tags this -> DOMHighResTimeStamp.t
               val get_type : 'tags this -> string
               val composedPath : 'tags this -> EventTarget.t list
               val initEvent :
                 'tags this ->
                   type_:string ->
                     ?bubbles:bool -> ?cancelable:bool -> unit -> unit
               val preventDefault : 'tags this -> unit
               val stopImmediatePropagation : 'tags this -> unit
               val stopPropagation : 'tags this -> unit
               val get_AT_TARGET : 'tags this -> float
               val get_BUBBLING_PHASE : 'tags this -> float
               val get_CAPTURING_PHASE : 'tags this -> float
               val get_NONE : 'tags this -> float
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> ?eventInitDict:EventInit.t -> unit -> t
               val at_target : unit -> float
               val bubbling_phase : unit -> float
               val capturing_phase : unit -> float
               val none : unit -> float
             end =
       struct
         type t = [ `Event ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x242 : Ojs.t) -> t_of_js x242
         and t_0_to_js : t_0 -> Ojs.t = fun (x241 : t) -> t_to_js x241
         type tags = [ `Event ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `Event ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x245 : Ojs.t) -> intf_of_js __tags_of_js x245
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x243 : __tags intf) -> intf_to_js __tags_to_js x243
         let (get_bubbles : 'tags this -> bool) =
           fun (x247 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x247) "bubbles")
         let (get_cancelBubble : 'tags this -> bool) =
           fun (x249 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x249) "cancelBubble")
         let (set_cancelBubble : 'tags this -> bool -> unit) =
           fun (x251 : 'tags this) ->
             fun (x252 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x251) "cancelBubble"
                 (Ojs.bool_to_js x252)
         let (get_cancelable : 'tags this -> bool) =
           fun (x254 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x254) "cancelable")
         let (get_composed : 'tags this -> bool) =
           fun (x256 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x256) "composed")
         let (get_currentTarget : 'tags this -> EventTarget.t option) =
           fun (x258 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x258)
                  "currentTarget")
         let (get_defaultPrevented : 'tags this -> bool) =
           fun (x261 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x261)
                  "defaultPrevented")
         let (get_eventPhase : 'tags this -> float) =
           fun (x263 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x263) "eventPhase")
         let (get_isTrusted : 'tags this -> bool) =
           fun (x265 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x265) "isTrusted")
         let (get_returnValue : 'tags this -> bool) =
           fun (x267 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x267) "returnValue")
         let (set_returnValue : 'tags this -> bool -> unit) =
           fun (x269 : 'tags this) ->
             fun (x270 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x269) "returnValue"
                 (Ojs.bool_to_js x270)
         let (get_srcElement : 'tags this -> EventTarget.t option) =
           fun (x272 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x272) "srcElement")
         let (get_target : 'tags this -> EventTarget.t option) =
           fun (x275 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x275) "target")
         let (get_timeStamp : 'tags this -> DOMHighResTimeStamp.t) =
           fun (x278 : 'tags this) ->
             DOMHighResTimeStamp.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x278) "timeStamp")
         let (get_type : 'tags this -> string) =
           fun (x280 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x280) "type")
         let (composedPath : 'tags this -> EventTarget.t list) =
           fun (x282 : 'tags this) ->
             Ojs.list_of_js EventTarget.t_of_js
               (Ojs.call (this_to_js Obj.magic x282) "composedPath" [||])
         let (initEvent :
           'tags this ->
             type_:string ->
               ?bubbles:bool -> ?cancelable:bool -> unit -> unit)
           =
           fun (x291 : 'tags this) ->
             fun ~type_:(x285 : string) ->
               fun ?bubbles:(x286 : bool option) ->
                 fun ?cancelable:(x287 : bool option) ->
                   fun () ->
                     ignore
                       (let x293 = this_to_js Obj.magic x291 in
                        Ojs.call (Ojs.get_prop_ascii x293 "initEvent")
                          "apply"
                          [|x293;((let x288 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x288 "push"
                                        [|(Ojs.string_to_js x285)|]);
                                   (match x286 with
                                    | Some x290 ->
                                        ignore
                                          (Ojs.call x288 "push"
                                             [|(Ojs.bool_to_js x290)|])
                                    | None -> ());
                                   (match x287 with
                                    | Some x289 ->
                                        ignore
                                          (Ojs.call x288 "push"
                                             [|(Ojs.bool_to_js x289)|])
                                    | None -> ());
                                   x288))|])
         let (preventDefault : 'tags this -> unit) =
           fun (x294 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x294) "preventDefault" [||])
         let (stopImmediatePropagation : 'tags this -> unit) =
           fun (x296 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x296)
                  "stopImmediatePropagation" [||])
         let (stopPropagation : 'tags this -> unit) =
           fun (x298 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x298) "stopPropagation" [||])
         let (get_AT_TARGET : 'tags this -> float) =
           fun (x300 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x300) "AT_TARGET")
         let (get_BUBBLING_PHASE : 'tags this -> float) =
           fun (x302 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x302)
                  "BUBBLING_PHASE")
         let (get_CAPTURING_PHASE : 'tags this -> float) =
           fun (x304 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x304)
                  "CAPTURING_PHASE")
         let (get_NONE : 'tags this -> float) =
           fun (x306 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x306) "NONE")
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "prototype")
         let (create :
           type_:string -> ?eventInitDict:EventInit.t -> unit -> t) =
           fun ~type_:(x308 : string) ->
             fun ?eventInitDict:(x309 : EventInit.t option) ->
               fun () ->
                 t_of_js
                   (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Event")
                      (let x310 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       ignore
                         (Ojs.call x310 "push" [|(Ojs.string_to_js x308)|]);
                       (match x309 with
                        | Some x311 ->
                            ignore
                              (Ojs.call x310 "push"
                                 [|(EventInit.t_to_js x311)|])
                        | None -> ());
                       x310))
         let (at_target : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "AT_TARGET")
         let (bubbling_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "BUBBLING_PHASE")
         let (capturing_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "CAPTURING_PHASE")
         let (none : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "NONE")
       end and
            EventListener:sig
                            type t = [ `EventListener ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags = [ `EventListener ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags = [ `EventListener ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `EventListener ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val apply : 'tags this -> evt:Event.t -> unit
                            val cast_from : 'tags this -> t
                          end =
            struct
              type t = [ `EventListener ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x313 : Ojs.t) -> t_of_js x313
              and t_0_to_js : t_0 -> Ojs.t = fun (x312 : t) -> t_to_js x312
              type tags = [ `EventListener ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `EventListener ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x316 : Ojs.t) -> intf_of_js __tags_of_js x316
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x314 : __tags intf) -> intf_to_js __tags_to_js x314
              let (apply : 'tags this -> evt:Event.t -> unit) =
                fun (x319 : 'tags this) ->
                  fun ~evt:(x318 : Event.t) ->
                    ignore
                      (Ojs.apply (this_to_js Obj.magic x319)
                         [|(Event.t_to_js x318)|])
              let cast_from = Obj.magic
            end and
                 EventListenerObject:sig
                                       type t = [ `EventListenerObject ] intf
                                       type t_0 = t
                                       [@@@js.stop ]
                                       type tags = [ `EventListenerObject ]
                                       type tags_0 = tags
                                       [@@@js.start ]
                                       [@@@js.implem
                                         type tags = [ `EventListenerObject ]
                                         type tags_0 = tags]
                                       type 'tags this =
                                         'tags intf constraint 'tags =
                                                     [>
                                                       `EventListenerObject ]
                                       val t_to_js : t -> Ojs.t
                                       val t_of_js : Ojs.t -> t
                                       val t_0_to_js : t_0 -> Ojs.t
                                       val t_0_of_js : Ojs.t -> t_0
                                       val handleEvent :
                                         'tags this ->
                                           object_:Event.t -> unit
                                       val cast_from : 'tags this -> t
                                     end =
                 struct
                   type t = [ `EventListenerObject ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x322 : Ojs.t) -> t_of_js x322
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x321 : t) -> t_to_js x321
                   type tags = [ `EventListenerObject ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `EventListenerObject ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x325 : Ojs.t) -> intf_of_js __tags_of_js x325
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x323 : __tags intf) ->
                         intf_to_js __tags_to_js x323
                   let (handleEvent : 'tags this -> object_:Event.t -> unit)
                     =
                     fun (x328 : 'tags this) ->
                       fun ~object_:(x327 : Event.t) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x328)
                              "handleEvent" [|(Event.t_to_js x327)|])
                   let cast_from = Obj.magic
                 end and
                      EventListenerOrEventListenerObject:sig
                                                           type t =
                                                             (EventListener.t,
                                                               EventListenerObject.t)
                                                               union2
                                                           type t_0 = t
                                                           val t_to_js :
                                                             t -> Ojs.t
                                                           val t_of_js :
                                                             Ojs.t -> t
                                                           val t_0_to_js :
                                                             t_0 -> Ojs.t
                                                           val t_0_of_js :
                                                             Ojs.t -> t_0
                                                         end =
                      struct
                        type t =
                          (EventListener.t, EventListenerObject.t) union2
                        let rec t_of_js : Ojs.t -> t =
                          fun (x333 : Ojs.t) ->
                            union2_of_js EventListener.t_of_js
                              EventListenerObject.t_of_js x333
                        and t_to_js : t -> Ojs.t =
                          fun
                            (x330 :
                              (EventListener.t, EventListenerObject.t) union2)
                            ->
                            union2_to_js EventListener.t_to_js
                              EventListenerObject.t_to_js x330
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x337 : Ojs.t) -> t_of_js x337
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x336 : t) -> t_to_js x336
                      end and
                           EventTarget:sig
                                         type t = [ `EventTarget ] intf
                                         type t_0 = t
                                         [@@@js.stop ]
                                         type tags = [ `EventTarget ]
                                         type tags_0 = tags
                                         [@@@js.start ]
                                         [@@@js.implem
                                           type tags = [ `EventTarget ]
                                           type tags_0 = tags]
                                         type 'tags this =
                                           'tags intf constraint 'tags =
                                                       [> `EventTarget ]
                                         val t_to_js : t -> Ojs.t
                                         val t_of_js : Ojs.t -> t
                                         val t_0_to_js : t_0 -> Ojs.t
                                         val t_0_of_js : Ojs.t -> t_0
                                         val addEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 option ->
                                                 ?options:[
                                                            `U1 of
                                                              AddEventListenerOptions.t
                                                               | `U2 of bool ]
                                                   -> unit -> unit
                                         val dispatchEvent :
                                           'tags this ->
                                             event:Event.t -> bool
                                         val removeEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 option ->
                                                 ?options:[
                                                            `U1 of
                                                              EventListenerOptions.t
                                                               | `U2 of bool ]
                                                   -> unit -> unit
                                         val cast_from : 'tags this -> t
                                         val prototype : unit -> t
                                         val create : unit -> t
                                       end =
                           struct
                             type t = [ `EventTarget ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x339 : Ojs.t) -> t_of_js x339
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x338 : t) -> t_to_js x338
                             type tags = [ `EventTarget ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `EventTarget ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               = fun (type __tags) ->
                               fun (__tags_of_js : Ojs.t -> __tags) ->
                                 fun (x342 : Ojs.t) ->
                                   intf_of_js __tags_of_js x342
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               = fun (type __tags) ->
                               fun (__tags_to_js : __tags -> Ojs.t) ->
                                 fun (x340 : __tags intf) ->
                                   intf_to_js __tags_to_js x340
                             let (addEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     option ->
                                     ?options:[
                                                `U1 of
                                                  AddEventListenerOptions.t 
                                              | `U2 of bool ]
                                       -> unit -> unit)
                               =
                               fun (x352 : 'tags this) ->
                                 fun ~type_:(x344 : string) ->
                                   fun
                                     ~callback:(x345 :
                                                 EventListenerOrEventListenerObject.t
                                                   option)
                                     ->
                                     fun
                                       ?options:(x346 :
                                                  [
                                                    `U1 of
                                                      AddEventListenerOptions.t
                                                       | `U2 of bool ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x354 =
                                              this_to_js Obj.magic x352 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x354
                                                 "addEventListener") "apply"
                                              [|x354;((let x347 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x347
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x344)|]);
                                                       ignore
                                                         (Ojs.call x347
                                                            "push"
                                                            [|(Ojs.option_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x345)|]);
                                                       (match x346 with
                                                        | Some x348 ->
                                                            ignore
                                                              (Ojs.call x347
                                                                 "push"
                                                                 [|((
                                                                   match x348
                                                                   with
                                                                   | 
                                                                   `U1 x349
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x349
                                                                   | 
                                                                   `U2 x350
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x350))|])
                                                        | None -> ());
                                                       x347))|])
                             let (dispatchEvent :
                               'tags this -> event:Event.t -> bool) =
                               fun (x356 : 'tags this) ->
                                 fun ~event:(x355 : Event.t) ->
                                   Ojs.bool_of_js
                                     (Ojs.call (this_to_js Obj.magic x356)
                                        "dispatchEvent"
                                        [|(Event.t_to_js x355)|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     option ->
                                     ?options:[
                                                `U1 of EventListenerOptions.t 
                                              | `U2 of bool ]
                                       -> unit -> unit)
                               =
                               fun (x366 : 'tags this) ->
                                 fun ~type_:(x358 : string) ->
                                   fun
                                     ~callback:(x359 :
                                                 EventListenerOrEventListenerObject.t
                                                   option)
                                     ->
                                     fun
                                       ?options:(x360 :
                                                  [
                                                    `U1 of
                                                      EventListenerOptions.t 
                                                  | `U2 of bool ] option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x368 =
                                              this_to_js Obj.magic x366 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x368
                                                 "removeEventListener")
                                              "apply"
                                              [|x368;((let x361 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x361
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x358)|]);
                                                       ignore
                                                         (Ojs.call x361
                                                            "push"
                                                            [|(Ojs.option_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x359)|]);
                                                       (match x360 with
                                                        | Some x362 ->
                                                            ignore
                                                              (Ojs.call x361
                                                                 "push"
                                                                 [|((
                                                                   match x362
                                                                   with
                                                                   | 
                                                                   `U1 x363
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x363
                                                                   | 
                                                                   `U2 x364
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x364))|])
                                                        | None -> ());
                                                       x361))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") [||])
                           end
module Performance =
  struct
    type t = [ `EventTarget  | `Performance ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x370 : Ojs.t) -> t_of_js x370
    and t_0_to_js : t_0 -> Ojs.t = fun (x369 : t) -> t_to_js x369
    type tags = [ `EventTarget  | `Performance ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Performance ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x373 : Ojs.t) -> intf_of_js __tags_of_js x373
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x371 : __tags intf) -> intf_to_js __tags_to_js x371
    let (get_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x375 : 'tags this) ->
        Ojs.option_of_js
          (fun (x377 : Ojs.t) ->
             fun ~this:(x378 : t) ->
               fun ~ev:(x379 : Event.t) ->
                 any_of_js
                   (Ojs.apply x377 [|(t_to_js x378);(Event.t_to_js x379)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x375)
             "onresourcetimingbufferfull")
    let (set_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x380 : 'tags this) ->
        fun (x381 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x380)
            "onresourcetimingbufferfull"
            (Ojs.option_to_js
               (fun (x382 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x383 : Ojs.t) ->
                       fun (x384 : Ojs.t) ->
                         any_to_js
                           (x382 ~this:(t_of_js x383)
                              ~ev:(Event.t_of_js x384)))) x381)
    let (get_timeOrigin : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x386 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x386) "timeOrigin")
    let (clearMarks : 'tags this -> ?markName:string -> unit -> unit) =
      fun (x391 : 'tags this) ->
        fun ?markName:(x388 : string option) ->
          fun () ->
            ignore
              (let x393 = this_to_js Obj.magic x391 in
               Ojs.call (Ojs.get_prop_ascii x393 "clearMarks") "apply"
                 [|x393;((let x389 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x388 with
                           | Some x390 ->
                               ignore
                                 (Ojs.call x389 "push"
                                    [|(Ojs.string_to_js x390)|])
                           | None -> ());
                          x389))|])
    let (clearMeasures : 'tags this -> ?measureName:string -> unit -> unit) =
      fun (x397 : 'tags this) ->
        fun ?measureName:(x394 : string option) ->
          fun () ->
            ignore
              (let x399 = this_to_js Obj.magic x397 in
               Ojs.call (Ojs.get_prop_ascii x399 "clearMeasures") "apply"
                 [|x399;((let x395 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x394 with
                           | Some x396 ->
                               ignore
                                 (Ojs.call x395 "push"
                                    [|(Ojs.string_to_js x396)|])
                           | None -> ());
                          x395))|])
    let (clearResourceTimings : 'tags this -> unit) =
      fun (x400 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x400) "clearResourceTimings" [||])
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x402 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x402) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x408 : 'tags this) ->
        fun ~name:(x404 : string) ->
          fun ?type_:(x405 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x410 = this_to_js Obj.magic x408 in
                 Ojs.call (Ojs.get_prop_ascii x410 "getEntriesByName")
                   "apply"
                   [|x410;((let x406 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x406 "push"
                                 [|(Ojs.string_to_js x404)|]);
                            (match x405 with
                             | Some x407 ->
                                 ignore
                                   (Ojs.call x406 "push"
                                      [|(Ojs.string_to_js x407)|])
                             | None -> ());
                            x406))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x412 : 'tags this) ->
        fun ~type_:(x411 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x412) "getEntriesByType"
               [|(Ojs.string_to_js x411)|])
    let (mark :
      'tags this ->
        markName:string ->
          ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun (x418 : 'tags this) ->
        fun ~markName:(x414 : string) ->
          fun ?markOptions:(x415 : PerformanceMarkOptions.t option) ->
            fun () ->
              PerformanceMark.t_of_js
                (let x420 = this_to_js Obj.magic x418 in
                 Ojs.call (Ojs.get_prop_ascii x420 "mark") "apply"
                   [|x420;((let x416 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x416 "push"
                                 [|(Ojs.string_to_js x414)|]);
                            (match x415 with
                             | Some x417 ->
                                 ignore
                                   (Ojs.call x416 "push"
                                      [|(PerformanceMarkOptions.t_to_js x417)|])
                             | None -> ());
                            x416))|])
    let (measure :
      'tags this ->
        measureName:string ->
          ?startOrMeasureOptions:[ `U1 of string 
                                 | `U2 of PerformanceMeasureOptions.t ]
            -> ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun (x429 : 'tags this) ->
        fun ~measureName:(x421 : string) ->
          fun
            ?startOrMeasureOptions:(x422 :
                                     [ `U1 of string 
                                     | `U2 of PerformanceMeasureOptions.t ]
                                       option)
            ->
            fun ?endMark:(x423 : string option) ->
              fun () ->
                PerformanceMeasure.t_of_js
                  (let x431 = this_to_js Obj.magic x429 in
                   Ojs.call (Ojs.get_prop_ascii x431 "measure") "apply"
                     [|x431;((let x424 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x424 "push"
                                   [|(Ojs.string_to_js x421)|]);
                              (match x422 with
                               | Some x426 ->
                                   ignore
                                     (Ojs.call x424 "push"
                                        [|((match x426 with
                                            | `U1 x427 ->
                                                Ojs.string_to_js x427
                                            | `U2 x428 ->
                                                PerformanceMeasureOptions.t_to_js
                                                  x428))|])
                               | None -> ());
                              (match x423 with
                               | Some x425 ->
                                   ignore
                                     (Ojs.call x424 "push"
                                        [|(Ojs.string_to_js x425)|])
                               | None -> ());
                              x424))|])
    let (now : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x432 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (this_to_js Obj.magic x432) "now" [||])
    let (setResourceTimingBufferSize : 'tags this -> maxSize:float -> unit) =
      fun (x435 : 'tags this) ->
        fun ~maxSize:(x434 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x435)
               "setResourceTimingBufferSize" [|(Ojs.float_to_js x434)|])
    let (toJSON : 'tags this -> any) =
      fun (x437 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x437) "toJSON" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x448 : 'tags this) ->
        fun ~type_:(x439 : 'K) ->
          fun ~listener:(x440 : this:t -> ev:any -> any) ->
            fun
              ?options:(x441 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x450 = this_to_js Obj.magic x448 in
                   Ojs.call (Ojs.get_prop_ascii x450 "addEventListener")
                     "apply"
                     [|x450;((let x442 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x442 "push" [|(Obj.magic x439)|]);
                              ignore
                                (Ojs.call x442 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x446 : Ojs.t) ->
                                           fun (x447 : Ojs.t) ->
                                             any_to_js
                                               (x440 ~this:(t_of_js x446)
                                                  ~ev:(any_of_js x447))))|]);
                              (match x441 with
                               | Some x443 ->
                                   ignore
                                     (Ojs.call x442 "push"
                                        [|((match x443 with
                                            | `U1 x444 -> Ojs.bool_to_js x444
                                            | `U2 x445 ->
                                                AddEventListenerOptions.t_to_js
                                                  x445))|])
                               | None -> ());
                              x442))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x458 : 'tags this) ->
        fun ~type_:(x451 : string) ->
          fun ~listener:(x452 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x453 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x460 = this_to_js Obj.magic x458 in
                   Ojs.call (Ojs.get_prop_ascii x460 "addEventListener")
                     "apply"
                     [|x460;((let x454 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x454 "push"
                                   [|(Ojs.string_to_js x451)|]);
                              ignore
                                (Ojs.call x454 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x452)|]);
                              (match x453 with
                               | Some x455 ->
                                   ignore
                                     (Ojs.call x454 "push"
                                        [|((match x455 with
                                            | `U1 x456 -> Ojs.bool_to_js x456
                                            | `U2 x457 ->
                                                AddEventListenerOptions.t_to_js
                                                  x457))|])
                               | None -> ());
                              x454))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x470 : 'tags this) ->
        fun ~type_:(x461 : 'K) ->
          fun ~listener:(x462 : this:t -> ev:any -> any) ->
            fun
              ?options:(x463 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x472 = this_to_js Obj.magic x470 in
                   Ojs.call (Ojs.get_prop_ascii x472 "removeEventListener")
                     "apply"
                     [|x472;((let x464 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x464 "push" [|(Obj.magic x461)|]);
                              ignore
                                (Ojs.call x464 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x468 : Ojs.t) ->
                                           fun (x469 : Ojs.t) ->
                                             any_to_js
                                               (x462 ~this:(t_of_js x468)
                                                  ~ev:(any_of_js x469))))|]);
                              (match x463 with
                               | Some x465 ->
                                   ignore
                                     (Ojs.call x464 "push"
                                        [|((match x465 with
                                            | `U1 x466 -> Ojs.bool_to_js x466
                                            | `U2 x467 ->
                                                EventListenerOptions.t_to_js
                                                  x467))|])
                               | None -> ());
                              x464))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x480 : 'tags this) ->
        fun ~type_:(x473 : string) ->
          fun ~listener:(x474 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x475 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x482 = this_to_js Obj.magic x480 in
                   Ojs.call (Ojs.get_prop_ascii x482 "removeEventListener")
                     "apply"
                     [|x482;((let x476 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x476 "push"
                                   [|(Ojs.string_to_js x473)|]);
                              ignore
                                (Ojs.call x476 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x474)|]);
                              (match x475 with
                               | Some x477 ->
                                   ignore
                                     (Ojs.call x476 "push"
                                        [|((match x477 with
                                            | `U1 x478 -> Ojs.bool_to_js x478
                                            | `U2 x479 ->
                                                EventListenerOptions.t_to_js
                                                  x479))|])
                               | None -> ());
                              x476))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Performance")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Performance") [||])
  end
module PerformanceStatic =
  struct
    let (onresourcetimingbufferfull :
      unit -> (this:Performance.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x483 : Ojs.t) ->
             fun ~this:(x484 : Performance.t) ->
               fun ~ev:(x485 : Event.t) ->
                 any_of_js
                   (Ojs.apply x483
                      [|(Performance.t_to_js x484);(Event.t_to_js x485)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "onresourcetimingbufferfull")
    let (timeOrigin : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "timeOrigin")
    let (clearMarks : ?markName:string -> unit -> unit) =
      fun ?markName:(x486 : string option) ->
        fun () ->
          ignore
            (let x489 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x489 "clearMarks") "apply"
               [|x489;((let x487 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x486 with
                         | Some x488 ->
                             ignore
                               (Ojs.call x487 "push"
                                  [|(Ojs.string_to_js x488)|])
                         | None -> ());
                        x487))|])
    let (clearMeasures : ?measureName:string -> unit -> unit) =
      fun ?measureName:(x490 : string option) ->
        fun () ->
          ignore
            (let x493 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x493 "clearMeasures") "apply"
               [|x493;((let x491 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x490 with
                         | Some x492 ->
                             ignore
                               (Ojs.call x491 "push"
                                  [|(Ojs.string_to_js x492)|])
                         | None -> ());
                        x491))|])
    let (clearResourceTimings : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "clearResourceTimings" [||])
    let (getEntries : unit -> PerformanceEntryList.t) =
      fun () ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntries" [||])
    let (getEntriesByName :
      name:string -> ?type_:string -> unit -> PerformanceEntryList.t) =
      fun ~name:(x494 : string) ->
        fun ?type_:(x495 : string option) ->
          fun () ->
            PerformanceEntryList.t_of_js
              (let x498 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x498 "getEntriesByName") "apply"
                 [|x498;((let x496 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x496 "push" [|(Ojs.string_to_js x494)|]);
                          (match x495 with
                           | Some x497 ->
                               ignore
                                 (Ojs.call x496 "push"
                                    [|(Ojs.string_to_js x497)|])
                           | None -> ());
                          x496))|])
    let (getEntriesByType : string -> PerformanceEntryList.t) =
      fun (x499 : string) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntriesByType" [|(Ojs.string_to_js x499)|])
    let (mark :
      markName:string ->
        ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun ~markName:(x500 : string) ->
        fun ?markOptions:(x501 : PerformanceMarkOptions.t option) ->
          fun () ->
            PerformanceMark.t_of_js
              (let x504 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x504 "mark") "apply"
                 [|x504;((let x502 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x502 "push" [|(Ojs.string_to_js x500)|]);
                          (match x501 with
                           | Some x503 ->
                               ignore
                                 (Ojs.call x502 "push"
                                    [|(PerformanceMarkOptions.t_to_js x503)|])
                           | None -> ());
                          x502))|])
    let (measure :
      measureName:string ->
        ?startOrMeasureOptions:[ `U1 of string 
                               | `U2 of PerformanceMeasureOptions.t ]
          -> ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun ~measureName:(x505 : string) ->
        fun
          ?startOrMeasureOptions:(x506 :
                                   [ `U1 of string 
                                   | `U2 of PerformanceMeasureOptions.t ]
                                     option)
          ->
          fun ?endMark:(x507 : string option) ->
            fun () ->
              PerformanceMeasure.t_of_js
                (let x513 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x513 "measure") "apply"
                   [|x513;((let x508 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x508 "push"
                                 [|(Ojs.string_to_js x505)|]);
                            (match x506 with
                             | Some x510 ->
                                 ignore
                                   (Ojs.call x508 "push"
                                      [|((match x510 with
                                          | `U1 x511 -> Ojs.string_to_js x511
                                          | `U2 x512 ->
                                              PerformanceMeasureOptions.t_to_js
                                                x512))|])
                             | None -> ());
                            (match x507 with
                             | Some x509 ->
                                 ignore
                                   (Ojs.call x508 "push"
                                      [|(Ojs.string_to_js x509)|])
                             | None -> ());
                            x508))|])
    let (now : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "now" [||])
    let (setResourceTimingBufferSize : float -> unit) =
      fun (x514 : float) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "setResourceTimingBufferSize" [|(Ojs.float_to_js x514)|])
    let (toJSON : unit -> any) =
      fun () ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "toJSON"
             [||])
    let (addEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x515 : 'K) ->
        fun ~listener:(x516 : this:Performance.t -> ev:any -> any) ->
          fun
            ?options:(x517 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x524 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x524 "addEventListener")
                   "apply"
                   [|x524;((let x518 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x518 "push" [|(Obj.magic x515)|]);
                            ignore
                              (Ojs.call x518 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x522 : Ojs.t) ->
                                         fun (x523 : Ojs.t) ->
                                           any_to_js
                                             (x516
                                                ~this:(Performance.t_of_js
                                                         x522)
                                                ~ev:(any_of_js x523))))|]);
                            (match x517 with
                             | Some x519 ->
                                 ignore
                                   (Ojs.call x518 "push"
                                      [|((match x519 with
                                          | `U1 x520 -> Ojs.bool_to_js x520
                                          | `U2 x521 ->
                                              AddEventListenerOptions.t_to_js
                                                x521))|])
                             | None -> ());
                            x518))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x525 : string) ->
        fun ~listener:(x526 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x527 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x532 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x532 "addEventListener")
                   "apply"
                   [|x532;((let x528 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x528 "push"
                                 [|(Ojs.string_to_js x525)|]);
                            ignore
                              (Ojs.call x528 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x526)|]);
                            (match x527 with
                             | Some x529 ->
                                 ignore
                                   (Ojs.call x528 "push"
                                      [|((match x529 with
                                          | `U1 x530 -> Ojs.bool_to_js x530
                                          | `U2 x531 ->
                                              AddEventListenerOptions.t_to_js
                                                x531))|])
                             | None -> ());
                            x528))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x533 : 'K) ->
        fun ~listener:(x534 : this:Performance.t -> ev:any -> any) ->
          fun
            ?options:(x535 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x542 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x542 "removeEventListener")
                   "apply"
                   [|x542;((let x536 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x536 "push" [|(Obj.magic x533)|]);
                            ignore
                              (Ojs.call x536 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x540 : Ojs.t) ->
                                         fun (x541 : Ojs.t) ->
                                           any_to_js
                                             (x534
                                                ~this:(Performance.t_of_js
                                                         x540)
                                                ~ev:(any_of_js x541))))|]);
                            (match x535 with
                             | Some x537 ->
                                 ignore
                                   (Ojs.call x536 "push"
                                      [|((match x537 with
                                          | `U1 x538 -> Ojs.bool_to_js x538
                                          | `U2 x539 ->
                                              EventListenerOptions.t_to_js
                                                x539))|])
                             | None -> ());
                            x536))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x543 : string) ->
        fun ~listener:(x544 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x545 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x550 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x550 "removeEventListener")
                   "apply"
                   [|x550;((let x546 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x546 "push"
                                 [|(Ojs.string_to_js x543)|]);
                            ignore
                              (Ojs.call x546 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x544)|]);
                            (match x545 with
                             | Some x547 ->
                                 ignore
                                   (Ojs.call x546 "push"
                                      [|((match x547 with
                                          | `U1 x548 -> Ojs.bool_to_js x548
                                          | `U2 x549 ->
                                              EventListenerOptions.t_to_js
                                                x549))|])
                             | None -> ());
                            x546))|])
  end
module StorageEstimate =
  struct
    type t = [ `StorageEstimate ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x552 : Ojs.t) -> t_of_js x552
    and t_0_to_js : t_0 -> Ojs.t = fun (x551 : t) -> t_to_js x551
    type tags = [ `StorageEstimate ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageEstimate ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x555 : Ojs.t) -> intf_of_js __tags_of_js x555
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x553 : __tags intf) -> intf_to_js __tags_to_js x553
    let (get_quota : 'tags this -> float) =
      fun (x557 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x557) "quota")
    let (set_quota : 'tags this -> float -> unit) =
      fun (x559 : 'tags this) ->
        fun (x560 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x559) "quota"
            (Ojs.float_to_js x560)
    let (get_usage : 'tags this -> float) =
      fun (x562 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x562) "usage")
    let (set_usage : 'tags this -> float -> unit) =
      fun (x564 : 'tags this) ->
        fun (x565 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x564) "usage"
            (Ojs.float_to_js x565)
    let (create : quota:float -> usage:float -> unit -> t) =
      fun ~quota:(x567 : float) ->
        fun ~usage:(x568 : float) ->
          fun () ->
            let x569 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x569 "quota" (Ojs.float_to_js x567);
            Ojs.set_prop_ascii x569 "usage" (Ojs.float_to_js x568);
            t_of_js x569
    let cast_from = Obj.magic
  end
module StorageManager =
  struct
    type t = [ `StorageManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x571 : Ojs.t) -> t_of_js x571
    and t_0_to_js : t_0 -> Ojs.t = fun (x570 : t) -> t_to_js x570
    type tags = [ `StorageManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x574 : Ojs.t) -> intf_of_js __tags_of_js x574
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x572 : __tags intf) -> intf_to_js __tags_to_js x572
    let (estimate : 'tags this -> StorageEstimate.t Promise.t_1) =
      fun (x576 : 'tags this) ->
        Promise.t_1_of_js StorageEstimate.t_of_js
          (Ojs.call (this_to_js Obj.magic x576) "estimate" [||])
    let (persisted : 'tags this -> bool Promise.t_1) =
      fun (x579 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x579) "persisted" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "StorageManager") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "StorageManager") [||])
  end
module NavigatorStorage =
  struct
    type t = [ `NavigatorStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x583 : Ojs.t) -> t_of_js x583
    and t_0_to_js : t_0 -> Ojs.t = fun (x582 : t) -> t_to_js x582
    type tags = [ `NavigatorStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x586 : Ojs.t) -> intf_of_js __tags_of_js x586
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x584 : __tags intf) -> intf_to_js __tags_to_js x584
    let (get_storage : 'tags this -> StorageManager.t) =
      fun (x588 : 'tags this) ->
        StorageManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x588) "storage")
    let (create : storage:StorageManager.t -> unit -> t) =
      fun ~storage:(x590 : StorageManager.t) ->
        fun () ->
          let x591 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x591 "storage" (StorageManager.t_to_js x590);
          t_of_js x591
    let cast_from = Obj.magic
  end
module NavigatorOnLine =
  struct
    type t = [ `NavigatorOnLine ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x593 : Ojs.t) -> t_of_js x593
    and t_0_to_js : t_0 -> Ojs.t = fun (x592 : t) -> t_to_js x592
    type tags = [ `NavigatorOnLine ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorOnLine ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x596 : Ojs.t) -> intf_of_js __tags_of_js x596
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x594 : __tags intf) -> intf_to_js __tags_to_js x594
    let (get_onLine : 'tags this -> bool) =
      fun (x598 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x598) "onLine")
    let (create : onLine:bool -> unit -> t) =
      fun ~onLine:(x600 : bool) ->
        fun () ->
          let x601 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x601 "onLine" (Ojs.bool_to_js x600);
          t_of_js x601
    let cast_from = Obj.magic
  end
module ConnectionType =
  struct
    type t =
      [ `L_s116_mixed  | `L_s128_none  | `L_s142_other  | `L_s196_unknown 
      | `L_s207_wifi  | `L_s46_bluetooth  | `L_s47_cellular 
      | `L_s68_ethernet ]
    let rec t_of_js : Ojs.t -> t =
      fun (x603 : Ojs.t) ->
        let x604 = x603 in
        match Ojs.string_of_js x604 with
        | "mixed" -> `L_s116_mixed
        | "none" -> `L_s128_none
        | "other" -> `L_s142_other
        | "unknown" -> `L_s196_unknown
        | "wifi" -> `L_s207_wifi
        | "bluetooth" -> `L_s46_bluetooth
        | "cellular" -> `L_s47_cellular
        | "ethernet" -> `L_s68_ethernet
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x602 :
          [ `L_s116_mixed  | `L_s128_none  | `L_s142_other 
          | `L_s196_unknown  | `L_s207_wifi  | `L_s46_bluetooth 
          | `L_s47_cellular  | `L_s68_ethernet ])
        ->
        match x602 with
        | `L_s116_mixed -> Ojs.string_to_js "mixed"
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s142_other -> Ojs.string_to_js "other"
        | `L_s196_unknown -> Ojs.string_to_js "unknown"
        | `L_s207_wifi -> Ojs.string_to_js "wifi"
        | `L_s46_bluetooth -> Ojs.string_to_js "bluetooth"
        | `L_s47_cellular -> Ojs.string_to_js "cellular"
        | `L_s68_ethernet -> Ojs.string_to_js "ethernet"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x606 : Ojs.t) -> t_of_js x606
    and t_0_to_js : t_0 -> Ojs.t = fun (x605 : t) -> t_to_js x605
  end
module NetworkInformation =
  struct
    type t = [ `EventTarget  | `NetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x608 : Ojs.t) -> t_of_js x608
    and t_0_to_js : t_0 -> Ojs.t = fun (x607 : t) -> t_to_js x607
    type tags = [ `EventTarget  | `NetworkInformation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x611 : Ojs.t) -> intf_of_js __tags_of_js x611
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x609 : __tags intf) -> intf_to_js __tags_to_js x609
    let (get_type : 'tags this -> ConnectionType.t) =
      fun (x613 : 'tags this) ->
        ConnectionType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x613) "type")
    let (create : type_:ConnectionType.t -> unit -> t) =
      fun ~type_:(x615 : ConnectionType.t) ->
        fun () ->
          let x616 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x616 "type" (ConnectionType.t_to_js x615);
          t_of_js x616
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NetworkInformation") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NetworkInformation")
             [||])
  end
module NavigatorNetworkInformation =
  struct
    type t = [ `NavigatorNetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x618 : Ojs.t) -> t_of_js x618
    and t_0_to_js : t_0 -> Ojs.t = fun (x617 : t) -> t_to_js x617
    type tags = [ `NavigatorNetworkInformation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorNetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x621 : Ojs.t) -> intf_of_js __tags_of_js x621
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x619 : __tags intf) -> intf_to_js __tags_to_js x619
    let (get_connection : 'tags this -> NetworkInformation.t) =
      fun (x623 : 'tags this) ->
        NetworkInformation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x623) "connection")
    let (create : connection:NetworkInformation.t -> unit -> t) =
      fun ~connection:(x625 : NetworkInformation.t) ->
        fun () ->
          let x626 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x626 "connection"
            (NetworkInformation.t_to_js x625);
          t_of_js x626
    let cast_from = Obj.magic
  end
module NavigatorLanguage =
  struct
    type t = [ `NavigatorLanguage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x628 : Ojs.t) -> t_of_js x628
    and t_0_to_js : t_0 -> Ojs.t = fun (x627 : t) -> t_to_js x627
    type tags = [ `NavigatorLanguage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLanguage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x631 : Ojs.t) -> intf_of_js __tags_of_js x631
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x629 : __tags intf) -> intf_to_js __tags_to_js x629
    let (get_language : 'tags this -> string) =
      fun (x633 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x633) "language")
    let (get_languages : 'tags this -> string list) =
      fun (x635 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x635) "languages")
    let (create : language:string -> languages:string list -> unit -> t) =
      fun ~language:(x638 : string) ->
        fun ~languages:(x639 : string list) ->
          fun () ->
            let x640 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x640 "language" (Ojs.string_to_js x638);
            Ojs.set_prop_ascii x640 "languages"
              (Ojs.list_to_js Ojs.string_to_js x639);
            t_of_js x640
    let cast_from = Obj.magic
  end
module NavigatorID =
  struct
    type t = [ `NavigatorID ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x643 : Ojs.t) -> t_of_js x643
    and t_0_to_js : t_0 -> Ojs.t = fun (x642 : t) -> t_to_js x642
    type tags = [ `NavigatorID ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorID ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x646 : Ojs.t) -> intf_of_js __tags_of_js x646
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x644 : __tags intf) -> intf_to_js __tags_to_js x644
    let (get_appCodeName : 'tags this -> string) =
      fun (x648 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x648) "appCodeName")
    let (get_appName : 'tags this -> string) =
      fun (x650 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x650) "appName")
    let (get_appVersion : 'tags this -> string) =
      fun (x652 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x652) "appVersion")
    let (get_platform : 'tags this -> string) =
      fun (x654 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x654) "platform")
    let (get_product : 'tags this -> string) =
      fun (x656 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x656) "product")
    let (get_userAgent : 'tags this -> string) =
      fun (x658 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x658) "userAgent")
    let (create :
      appCodeName:string ->
        appName:string ->
          appVersion:string ->
            platform:string ->
              product:string -> userAgent:string -> unit -> t)
      =
      fun ~appCodeName:(x660 : string) ->
        fun ~appName:(x661 : string) ->
          fun ~appVersion:(x662 : string) ->
            fun ~platform:(x663 : string) ->
              fun ~product:(x664 : string) ->
                fun ~userAgent:(x665 : string) ->
                  fun () ->
                    let x666 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x666 "appCodeName"
                      (Ojs.string_to_js x660);
                    Ojs.set_prop_ascii x666 "appName" (Ojs.string_to_js x661);
                    Ojs.set_prop_ascii x666 "appVersion"
                      (Ojs.string_to_js x662);
                    Ojs.set_prop_ascii x666 "platform"
                      (Ojs.string_to_js x663);
                    Ojs.set_prop_ascii x666 "product" (Ojs.string_to_js x664);
                    Ojs.set_prop_ascii x666 "userAgent"
                      (Ojs.string_to_js x665);
                    t_of_js x666
    let cast_from = Obj.magic
  end
module NavigatorConcurrentHardware =
  struct
    type t = [ `NavigatorConcurrentHardware ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x668 : Ojs.t) -> t_of_js x668
    and t_0_to_js : t_0 -> Ojs.t = fun (x667 : t) -> t_to_js x667
    type tags = [ `NavigatorConcurrentHardware ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorConcurrentHardware ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x671 : Ojs.t) -> intf_of_js __tags_of_js x671
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x669 : __tags intf) -> intf_to_js __tags_to_js x669
    let (get_hardwareConcurrency : 'tags this -> float) =
      fun (x673 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x673)
             "hardwareConcurrency")
    let (create : hardwareConcurrency:float -> unit -> t) =
      fun ~hardwareConcurrency:(x675 : float) ->
        fun () ->
          let x676 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x676 "hardwareConcurrency"
            (Ojs.float_to_js x675);
          t_of_js x676
    let cast_from = Obj.magic
  end
module MediaEncodingType =
  struct
    type t = [ `L_s165_record  | `L_s206_webrtc ]
    let rec t_of_js : Ojs.t -> t =
      fun (x678 : Ojs.t) ->
        let x679 = x678 in
        match Ojs.string_of_js x679 with
        | "record" -> `L_s165_record
        | "webrtc" -> `L_s206_webrtc
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x677 : [ `L_s165_record  | `L_s206_webrtc ]) ->
        match x677 with
        | `L_s165_record -> Ojs.string_to_js "record"
        | `L_s206_webrtc -> Ojs.string_to_js "webrtc"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x681 : Ojs.t) -> t_of_js x681
    and t_0_to_js : t_0 -> Ojs.t = fun (x680 : t) -> t_to_js x680
  end
module TransferFunction =
  struct
    type t = [ `L_s151_pq  | `L_s183_srgb  | `L_s86_hlg ]
    let rec t_of_js : Ojs.t -> t =
      fun (x683 : Ojs.t) ->
        let x684 = x683 in
        match Ojs.string_of_js x684 with
        | "pq" -> `L_s151_pq
        | "srgb" -> `L_s183_srgb
        | "hlg" -> `L_s86_hlg
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x682 : [ `L_s151_pq  | `L_s183_srgb  | `L_s86_hlg ]) ->
        match x682 with
        | `L_s151_pq -> Ojs.string_to_js "pq"
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
        | `L_s86_hlg -> Ojs.string_to_js "hlg"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x686 : Ojs.t) -> t_of_js x686
    and t_0_to_js : t_0 -> Ojs.t = fun (x685 : t) -> t_to_js x685
  end
module HdrMetadataType =
  struct
    type t =
      [ `L_s179_smpteSt2086  | `L_s180_smpteSt2094_10 
      | `L_s181_smpteSt2094_40 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x688 : Ojs.t) ->
        let x689 = x688 in
        match Ojs.string_of_js x689 with
        | "smpteSt2086" -> `L_s179_smpteSt2086
        | "smpteSt2094-10" -> `L_s180_smpteSt2094_10
        | "smpteSt2094-40" -> `L_s181_smpteSt2094_40
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x687 :
          [ `L_s179_smpteSt2086  | `L_s180_smpteSt2094_10 
          | `L_s181_smpteSt2094_40 ])
        ->
        match x687 with
        | `L_s179_smpteSt2086 -> Ojs.string_to_js "smpteSt2086"
        | `L_s180_smpteSt2094_10 -> Ojs.string_to_js "smpteSt2094-10"
        | `L_s181_smpteSt2094_40 -> Ojs.string_to_js "smpteSt2094-40"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x691 : Ojs.t) -> t_of_js x691
    and t_0_to_js : t_0 -> Ojs.t = fun (x690 : t) -> t_to_js x690
  end
module ColorGamut =
  struct
    type t = [ `L_s144_p3  | `L_s164_rec2020  | `L_s183_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x693 : Ojs.t) ->
        let x694 = x693 in
        match Ojs.string_of_js x694 with
        | "p3" -> `L_s144_p3
        | "rec2020" -> `L_s164_rec2020
        | "srgb" -> `L_s183_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x692 : [ `L_s144_p3  | `L_s164_rec2020  | `L_s183_srgb ]) ->
        match x692 with
        | `L_s144_p3 -> Ojs.string_to_js "p3"
        | `L_s164_rec2020 -> Ojs.string_to_js "rec2020"
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x696 : Ojs.t) -> t_of_js x696
    and t_0_to_js : t_0 -> Ojs.t = fun (x695 : t) -> t_to_js x695
  end
module VideoConfiguration =
  struct
    type t = [ `VideoConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x698 : Ojs.t) -> t_of_js x698
    and t_0_to_js : t_0 -> Ojs.t = fun (x697 : t) -> t_to_js x697
    type tags = [ `VideoConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VideoConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x701 : Ojs.t) -> intf_of_js __tags_of_js x701
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x699 : __tags intf) -> intf_to_js __tags_to_js x699
    let (get_bitrate : 'tags this -> float) =
      fun (x703 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x703) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x705 : 'tags this) ->
        fun (x706 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x705) "bitrate"
            (Ojs.float_to_js x706)
    let (get_colorGamut : 'tags this -> ColorGamut.t) =
      fun (x708 : 'tags this) ->
        ColorGamut.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x708) "colorGamut")
    let (set_colorGamut : 'tags this -> ColorGamut.t -> unit) =
      fun (x710 : 'tags this) ->
        fun (x711 : ColorGamut.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x710) "colorGamut"
            (ColorGamut.t_to_js x711)
    let (get_contentType : 'tags this -> string) =
      fun (x713 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x713) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x715 : 'tags this) ->
        fun (x716 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x715) "contentType"
            (Ojs.string_to_js x716)
    let (get_framerate : 'tags this -> float) =
      fun (x718 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x718) "framerate")
    let (set_framerate : 'tags this -> float -> unit) =
      fun (x720 : 'tags this) ->
        fun (x721 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x720) "framerate"
            (Ojs.float_to_js x721)
    let (get_hdrMetadataType : 'tags this -> HdrMetadataType.t) =
      fun (x723 : 'tags this) ->
        HdrMetadataType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x723) "hdrMetadataType")
    let (set_hdrMetadataType : 'tags this -> HdrMetadataType.t -> unit) =
      fun (x725 : 'tags this) ->
        fun (x726 : HdrMetadataType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x725) "hdrMetadataType"
            (HdrMetadataType.t_to_js x726)
    let (get_height : 'tags this -> float) =
      fun (x728 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x728) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x730 : 'tags this) ->
        fun (x731 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x730) "height"
            (Ojs.float_to_js x731)
    let (get_scalabilityMode : 'tags this -> string) =
      fun (x733 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x733) "scalabilityMode")
    let (set_scalabilityMode : 'tags this -> string -> unit) =
      fun (x735 : 'tags this) ->
        fun (x736 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x735) "scalabilityMode"
            (Ojs.string_to_js x736)
    let (get_transferFunction : 'tags this -> TransferFunction.t) =
      fun (x738 : 'tags this) ->
        TransferFunction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x738) "transferFunction")
    let (set_transferFunction : 'tags this -> TransferFunction.t -> unit) =
      fun (x740 : 'tags this) ->
        fun (x741 : TransferFunction.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x740) "transferFunction"
            (TransferFunction.t_to_js x741)
    let (get_width : 'tags this -> float) =
      fun (x743 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x743) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x745 : 'tags this) ->
        fun (x746 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x745) "width"
            (Ojs.float_to_js x746)
    let (create :
      bitrate:float ->
        colorGamut:ColorGamut.t ->
          contentType:string ->
            framerate:float ->
              hdrMetadataType:HdrMetadataType.t ->
                height:float ->
                  scalabilityMode:string ->
                    transferFunction:TransferFunction.t ->
                      width:float -> unit -> t)
      =
      fun ~bitrate:(x748 : float) ->
        fun ~colorGamut:(x749 : ColorGamut.t) ->
          fun ~contentType:(x750 : string) ->
            fun ~framerate:(x751 : float) ->
              fun ~hdrMetadataType:(x752 : HdrMetadataType.t) ->
                fun ~height:(x753 : float) ->
                  fun ~scalabilityMode:(x754 : string) ->
                    fun ~transferFunction:(x755 : TransferFunction.t) ->
                      fun ~width:(x756 : float) ->
                        fun () ->
                          let x757 = Ojs.empty_obj () in
                          Ojs.set_prop_ascii x757 "bitrate"
                            (Ojs.float_to_js x748);
                          Ojs.set_prop_ascii x757 "colorGamut"
                            (ColorGamut.t_to_js x749);
                          Ojs.set_prop_ascii x757 "contentType"
                            (Ojs.string_to_js x750);
                          Ojs.set_prop_ascii x757 "framerate"
                            (Ojs.float_to_js x751);
                          Ojs.set_prop_ascii x757 "hdrMetadataType"
                            (HdrMetadataType.t_to_js x752);
                          Ojs.set_prop_ascii x757 "height"
                            (Ojs.float_to_js x753);
                          Ojs.set_prop_ascii x757 "scalabilityMode"
                            (Ojs.string_to_js x754);
                          Ojs.set_prop_ascii x757 "transferFunction"
                            (TransferFunction.t_to_js x755);
                          Ojs.set_prop_ascii x757 "width"
                            (Ojs.float_to_js x756);
                          t_of_js x757
    let cast_from = Obj.magic
  end
module AudioConfiguration =
  struct
    type t = [ `AudioConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x759 : Ojs.t) -> t_of_js x759
    and t_0_to_js : t_0 -> Ojs.t = fun (x758 : t) -> t_to_js x758
    type tags = [ `AudioConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AudioConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x762 : Ojs.t) -> intf_of_js __tags_of_js x762
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x760 : __tags intf) -> intf_to_js __tags_to_js x760
    let (get_bitrate : 'tags this -> float) =
      fun (x764 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x764) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x766 : 'tags this) ->
        fun (x767 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x766) "bitrate"
            (Ojs.float_to_js x767)
    let (get_channels : 'tags this -> string) =
      fun (x769 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x769) "channels")
    let (set_channels : 'tags this -> string -> unit) =
      fun (x771 : 'tags this) ->
        fun (x772 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x771) "channels"
            (Ojs.string_to_js x772)
    let (get_contentType : 'tags this -> string) =
      fun (x774 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x774) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x776 : 'tags this) ->
        fun (x777 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x776) "contentType"
            (Ojs.string_to_js x777)
    let (get_samplerate : 'tags this -> float) =
      fun (x779 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x779) "samplerate")
    let (set_samplerate : 'tags this -> float -> unit) =
      fun (x781 : 'tags this) ->
        fun (x782 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x781) "samplerate"
            (Ojs.float_to_js x782)
    let (get_spatialRendering : 'tags this -> bool) =
      fun (x784 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x784) "spatialRendering")
    let (set_spatialRendering : 'tags this -> bool -> unit) =
      fun (x786 : 'tags this) ->
        fun (x787 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x786) "spatialRendering"
            (Ojs.bool_to_js x787)
    let (create :
      bitrate:float ->
        channels:string ->
          contentType:string ->
            samplerate:float -> spatialRendering:bool -> unit -> t)
      =
      fun ~bitrate:(x789 : float) ->
        fun ~channels:(x790 : string) ->
          fun ~contentType:(x791 : string) ->
            fun ~samplerate:(x792 : float) ->
              fun ~spatialRendering:(x793 : bool) ->
                fun () ->
                  let x794 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x794 "bitrate" (Ojs.float_to_js x789);
                  Ojs.set_prop_ascii x794 "channels" (Ojs.string_to_js x790);
                  Ojs.set_prop_ascii x794 "contentType"
                    (Ojs.string_to_js x791);
                  Ojs.set_prop_ascii x794 "samplerate" (Ojs.float_to_js x792);
                  Ojs.set_prop_ascii x794 "spatialRendering"
                    (Ojs.bool_to_js x793);
                  t_of_js x794
    let cast_from = Obj.magic
  end
module MediaConfiguration =
  struct
    type t = [ `MediaConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x796 : Ojs.t) -> t_of_js x796
    and t_0_to_js : t_0 -> Ojs.t = fun (x795 : t) -> t_to_js x795
    type tags = [ `MediaConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x799 : Ojs.t) -> intf_of_js __tags_of_js x799
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x797 : __tags intf) -> intf_to_js __tags_to_js x797
    let (get_audio : 'tags this -> AudioConfiguration.t) =
      fun (x801 : 'tags this) ->
        AudioConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x801) "audio")
    let (set_audio : 'tags this -> AudioConfiguration.t -> unit) =
      fun (x803 : 'tags this) ->
        fun (x804 : AudioConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x803) "audio"
            (AudioConfiguration.t_to_js x804)
    let (get_video : 'tags this -> VideoConfiguration.t) =
      fun (x806 : 'tags this) ->
        VideoConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x806) "video")
    let (set_video : 'tags this -> VideoConfiguration.t -> unit) =
      fun (x808 : 'tags this) ->
        fun (x809 : VideoConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x808) "video"
            (VideoConfiguration.t_to_js x809)
    let (create :
      audio:AudioConfiguration.t -> video:VideoConfiguration.t -> unit -> t)
      =
      fun ~audio:(x811 : AudioConfiguration.t) ->
        fun ~video:(x812 : VideoConfiguration.t) ->
          fun () ->
            let x813 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x813 "audio" (AudioConfiguration.t_to_js x811);
            Ojs.set_prop_ascii x813 "video" (VideoConfiguration.t_to_js x812);
            t_of_js x813
    let cast_from = Obj.magic
  end
module MediaEncodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaEncodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x815 : Ojs.t) -> t_of_js x815
    and t_0_to_js : t_0 -> Ojs.t = fun (x814 : t) -> t_to_js x814
    type tags = [ `MediaConfiguration  | `MediaEncodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaEncodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x818 : Ojs.t) -> intf_of_js __tags_of_js x818
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x816 : __tags intf) -> intf_to_js __tags_to_js x816
    let (get_type : 'tags this -> MediaEncodingType.t) =
      fun (x820 : 'tags this) ->
        MediaEncodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x820) "type")
    let (set_type : 'tags this -> MediaEncodingType.t -> unit) =
      fun (x822 : 'tags this) ->
        fun (x823 : MediaEncodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x822) "type"
            (MediaEncodingType.t_to_js x823)
    let (create : type_:MediaEncodingType.t -> unit -> t) =
      fun ~type_:(x825 : MediaEncodingType.t) ->
        fun () ->
          let x826 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x826 "type" (MediaEncodingType.t_to_js x825);
          t_of_js x826
    let cast_from = Obj.magic
  end
module MediaCapabilitiesInfo =
  struct
    type t = [ `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x828 : Ojs.t) -> t_of_js x828
    and t_0_to_js : t_0 -> Ojs.t = fun (x827 : t) -> t_to_js x827
    type tags = [ `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x831 : Ojs.t) -> intf_of_js __tags_of_js x831
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x829 : __tags intf) -> intf_to_js __tags_to_js x829
    let (get_powerEfficient : 'tags this -> bool) =
      fun (x833 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x833) "powerEfficient")
    let (set_powerEfficient : 'tags this -> bool -> unit) =
      fun (x835 : 'tags this) ->
        fun (x836 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x835) "powerEfficient"
            (Ojs.bool_to_js x836)
    let (get_smooth : 'tags this -> bool) =
      fun (x838 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x838) "smooth")
    let (set_smooth : 'tags this -> bool -> unit) =
      fun (x840 : 'tags this) ->
        fun (x841 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x840) "smooth"
            (Ojs.bool_to_js x841)
    let (get_supported : 'tags this -> bool) =
      fun (x843 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x843) "supported")
    let (set_supported : 'tags this -> bool -> unit) =
      fun (x845 : 'tags this) ->
        fun (x846 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x845) "supported"
            (Ojs.bool_to_js x846)
    let (create :
      powerEfficient:bool -> smooth:bool -> supported:bool -> unit -> t) =
      fun ~powerEfficient:(x848 : bool) ->
        fun ~smooth:(x849 : bool) ->
          fun ~supported:(x850 : bool) ->
            fun () ->
              let x851 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x851 "powerEfficient" (Ojs.bool_to_js x848);
              Ojs.set_prop_ascii x851 "smooth" (Ojs.bool_to_js x849);
              Ojs.set_prop_ascii x851 "supported" (Ojs.bool_to_js x850);
              t_of_js x851
    let cast_from = Obj.magic
  end
module MediaCapabilitiesEncodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x853 : Ojs.t) -> t_of_js x853
    and t_0_to_js : t_0 -> Ojs.t = fun (x852 : t) -> t_to_js x852
    type tags = [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesEncodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x856 : Ojs.t) -> intf_of_js __tags_of_js x856
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x854 : __tags intf) -> intf_to_js __tags_to_js x854
    let (get_configuration : 'tags this -> MediaEncodingConfiguration.t) =
      fun (x858 : 'tags this) ->
        MediaEncodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x858) "configuration")
    let (set_configuration :
      'tags this -> MediaEncodingConfiguration.t -> unit) =
      fun (x860 : 'tags this) ->
        fun (x861 : MediaEncodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x860) "configuration"
            (MediaEncodingConfiguration.t_to_js x861)
    let (create : configuration:MediaEncodingConfiguration.t -> unit -> t) =
      fun ~configuration:(x863 : MediaEncodingConfiguration.t) ->
        fun () ->
          let x864 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x864 "configuration"
            (MediaEncodingConfiguration.t_to_js x863);
          t_of_js x864
    let cast_from = Obj.magic
  end
module MediaDecodingType =
  struct
    type t = [ `L_s111_media_source  | `L_s206_webrtc  | `L_s73_file ]
    let rec t_of_js : Ojs.t -> t =
      fun (x866 : Ojs.t) ->
        let x867 = x866 in
        match Ojs.string_of_js x867 with
        | "media-source" -> `L_s111_media_source
        | "webrtc" -> `L_s206_webrtc
        | "file" -> `L_s73_file
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x865 : [ `L_s111_media_source  | `L_s206_webrtc  | `L_s73_file ])
        ->
        match x865 with
        | `L_s111_media_source -> Ojs.string_to_js "media-source"
        | `L_s206_webrtc -> Ojs.string_to_js "webrtc"
        | `L_s73_file -> Ojs.string_to_js "file"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x869 : Ojs.t) -> t_of_js x869
    and t_0_to_js : t_0 -> Ojs.t = fun (x868 : t) -> t_to_js x868
  end
module MediaDecodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaDecodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x871 : Ojs.t) -> t_of_js x871
    and t_0_to_js : t_0 -> Ojs.t = fun (x870 : t) -> t_to_js x870
    type tags = [ `MediaConfiguration  | `MediaDecodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaDecodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x874 : Ojs.t) -> intf_of_js __tags_of_js x874
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x872 : __tags intf) -> intf_to_js __tags_to_js x872
    let (get_type : 'tags this -> MediaDecodingType.t) =
      fun (x876 : 'tags this) ->
        MediaDecodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x876) "type")
    let (set_type : 'tags this -> MediaDecodingType.t -> unit) =
      fun (x878 : 'tags this) ->
        fun (x879 : MediaDecodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x878) "type"
            (MediaDecodingType.t_to_js x879)
    let (create : type_:MediaDecodingType.t -> unit -> t) =
      fun ~type_:(x881 : MediaDecodingType.t) ->
        fun () ->
          let x882 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x882 "type" (MediaDecodingType.t_to_js x881);
          t_of_js x882
    let cast_from = Obj.magic
  end
module MediaCapabilitiesDecodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x884 : Ojs.t) -> t_of_js x884
    and t_0_to_js : t_0 -> Ojs.t = fun (x883 : t) -> t_to_js x883
    type tags = [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesDecodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x887 : Ojs.t) -> intf_of_js __tags_of_js x887
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x885 : __tags intf) -> intf_to_js __tags_to_js x885
    let (get_configuration : 'tags this -> MediaDecodingConfiguration.t) =
      fun (x889 : 'tags this) ->
        MediaDecodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x889) "configuration")
    let (set_configuration :
      'tags this -> MediaDecodingConfiguration.t -> unit) =
      fun (x891 : 'tags this) ->
        fun (x892 : MediaDecodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x891) "configuration"
            (MediaDecodingConfiguration.t_to_js x892)
    let (create : configuration:MediaDecodingConfiguration.t -> unit -> t) =
      fun ~configuration:(x894 : MediaDecodingConfiguration.t) ->
        fun () ->
          let x895 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x895 "configuration"
            (MediaDecodingConfiguration.t_to_js x894);
          t_of_js x895
    let cast_from = Obj.magic
  end
module MediaCapabilities =
  struct
    type t = [ `MediaCapabilities ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x897 : Ojs.t) -> t_of_js x897
    and t_0_to_js : t_0 -> Ojs.t = fun (x896 : t) -> t_to_js x896
    type tags = [ `MediaCapabilities ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilities ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x900 : Ojs.t) -> intf_of_js __tags_of_js x900
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x898 : __tags intf) -> intf_to_js __tags_to_js x898
    let (decodingInfo :
      'tags this ->
        configuration:MediaDecodingConfiguration.t ->
          MediaCapabilitiesDecodingInfo.t Promise.t_1)
      =
      fun (x903 : 'tags this) ->
        fun ~configuration:(x902 : MediaDecodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesDecodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x903) "decodingInfo"
               [|(MediaDecodingConfiguration.t_to_js x902)|])
    let (encodingInfo :
      'tags this ->
        configuration:MediaEncodingConfiguration.t ->
          MediaCapabilitiesEncodingInfo.t Promise.t_1)
      =
      fun (x907 : 'tags this) ->
        fun ~configuration:(x906 : MediaEncodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesEncodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x907) "encodingInfo"
               [|(MediaEncodingConfiguration.t_to_js x906)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MediaCapabilities") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MediaCapabilities")
             [||])
  end
module NavigatorStatic =
  struct
    let (mediaCapabilities : unit -> MediaCapabilities.t) =
      fun () ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "navigator")
             "mediaCapabilities")
  end
module LocationStatic =
  struct
    let (hash : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hash")
    let (host : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "host")
    let (hostname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hostname")
    let (href : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "href")
    let (toString : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "location") "toString"
             [||])
    let (origin : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "origin")
    let (pathname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "pathname")
    let (port : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "port")
    let (protocol : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "protocol")
    let (search : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "search")
  end
module IDBVersionChangeEventInit =
  struct
    type t = [ `EventInit  | `IDBVersionChangeEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x911 : Ojs.t) -> t_of_js x911
    and t_0_to_js : t_0 -> Ojs.t = fun (x910 : t) -> t_to_js x910
    type tags = [ `EventInit  | `IDBVersionChangeEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x914 : Ojs.t) -> intf_of_js __tags_of_js x914
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x912 : __tags intf) -> intf_to_js __tags_to_js x912
    let (get_newVersion : 'tags this -> float option) =
      fun (x916 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x916) "newVersion")
    let (set_newVersion : 'tags this -> float option -> unit) =
      fun (x919 : 'tags this) ->
        fun (x920 : float option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x919) "newVersion"
            (Ojs.option_to_js Ojs.float_to_js x920)
    let (get_oldVersion : 'tags this -> float) =
      fun (x923 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x923) "oldVersion")
    let (set_oldVersion : 'tags this -> float -> unit) =
      fun (x925 : 'tags this) ->
        fun (x926 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x925) "oldVersion"
            (Ojs.float_to_js x926)
    let (create : ?newVersion:float -> oldVersion:float -> unit -> t) =
      fun ?newVersion:(x928 : float option) ->
        fun ~oldVersion:(x929 : float) ->
          fun () ->
            let x930 = Ojs.empty_obj () in
            (match x928 with
             | Some x931 ->
                 Ojs.set_prop_ascii x930 "newVersion" (Ojs.float_to_js x931)
             | None -> ());
            Ojs.set_prop_ascii x930 "oldVersion" (Ojs.float_to_js x929);
            t_of_js x930
    let cast_from = Obj.magic
  end
module IDBVersionChangeEvent =
  struct
    type t = [ `Event  | `IDBVersionChangeEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x933 : Ojs.t) -> t_of_js x933
    and t_0_to_js : t_0 -> Ojs.t = fun (x932 : t) -> t_to_js x932
    type tags = [ `Event  | `IDBVersionChangeEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x936 : Ojs.t) -> intf_of_js __tags_of_js x936
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x934 : __tags intf) -> intf_to_js __tags_to_js x934
    let (get_newVersion : 'tags this -> float option) =
      fun (x938 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x938) "newVersion")
    let (get_oldVersion : 'tags this -> float) =
      fun (x941 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x941) "oldVersion")
    let (create : ?newVersion:float -> oldVersion:float -> unit -> t) =
      fun ?newVersion:(x943 : float option) ->
        fun ~oldVersion:(x944 : float) ->
          fun () ->
            let x945 = Ojs.empty_obj () in
            (match x943 with
             | Some x946 ->
                 Ojs.set_prop_ascii x945 "newVersion" (Ojs.float_to_js x946)
             | None -> ());
            Ojs.set_prop_ascii x945 "oldVersion" (Ojs.float_to_js x944);
            t_of_js x945
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:IDBVersionChangeEventInit.t -> unit -> t)
      =
      fun ~type_:(x947 : string) ->
        fun ?eventInitDict:(x948 : IDBVersionChangeEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
                 (let x949 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x949 "push" [|(Ojs.string_to_js x947)|]);
                  (match x948 with
                   | Some x950 ->
                       ignore
                         (Ojs.call x949 "push"
                            [|(IDBVersionChangeEventInit.t_to_js x950)|])
                   | None -> ());
                  x949))
  end
module IDBObjectStoreParameters =
  struct
    type t = [ `IDBObjectStoreParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x952 : Ojs.t) -> t_of_js x952
    and t_0_to_js : t_0 -> Ojs.t = fun (x951 : t) -> t_to_js x951
    type tags = [ `IDBObjectStoreParameters ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBObjectStoreParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x955 : Ojs.t) -> intf_of_js __tags_of_js x955
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x953 : __tags intf) -> intf_to_js __tags_to_js x953
    let (get_autoIncrement : 'tags this -> bool) =
      fun (x957 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x957) "autoIncrement")
    let (set_autoIncrement : 'tags this -> bool -> unit) =
      fun (x959 : 'tags this) ->
        fun (x960 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x959) "autoIncrement"
            (Ojs.bool_to_js x960)
    let (get_keyPath :
      'tags this ->
        [ `String of string  | `Null  | `Other of string list ] Primitive.t)
      =
      fun (x962 : 'tags this) ->
        Primitive.t_of_js
          (fun (x964 : Ojs.t) ->
             let x965 = x964 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x965 "dummy") with
             | "String" -> `String (Ojs.string_of_js x965)
             | "Null" -> `Null
             | "Other" -> `Other (Ojs.list_of_js Ojs.string_of_js x965)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x962) "keyPath")
    let (set_keyPath :
      'tags this -> [ `Null  | `U1 of string  | `U2 of string list ] -> unit)
      =
      fun (x967 : 'tags this) ->
        fun (x968 : [ `Null  | `U1 of string  | `U2 of string list ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x967) "keyPath"
            (match x968 with
             | `Null -> Ojs.null
             | `U1 x969 -> Ojs.string_to_js x969
             | `U2 x970 -> Ojs.list_to_js Ojs.string_to_js x970)
    let (create :
      autoIncrement:bool ->
        ?keyPath:[ `String of string  | `Other of string list ] Primitive.t
          -> unit -> t)
      =
      fun ~autoIncrement:(x973 : bool) ->
        fun
          ?keyPath:(x974 :
                     [ `String of string  | `Other of string list ]
                       Primitive.t option)
          ->
          fun () ->
            let x975 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x975 "autoIncrement" (Ojs.bool_to_js x973);
            (match x974 with
             | Some x976 ->
                 Ojs.set_prop_ascii x975 "keyPath"
                   (Primitive.t_to_js
                      (fun
                         (x977 :
                           [ `String of string  | `Other of string list ])
                         ->
                         match x977 with
                         | `String x978 -> Ojs.string_to_js x978
                         | `Other x979 ->
                             Ojs.list_to_js Ojs.string_to_js x979) x976)
             | None -> ());
            t_of_js x975
    let cast_from = Obj.magic
  end
module IDBIndexParameters =
  struct
    type t = [ `IDBIndexParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x982 : Ojs.t) -> t_of_js x982
    and t_0_to_js : t_0 -> Ojs.t = fun (x981 : t) -> t_to_js x981
    type tags = [ `IDBIndexParameters ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBIndexParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x985 : Ojs.t) -> intf_of_js __tags_of_js x985
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x983 : __tags intf) -> intf_to_js __tags_to_js x983
    let (get_multiEntry : 'tags this -> bool) =
      fun (x987 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x987) "multiEntry")
    let (set_multiEntry : 'tags this -> bool -> unit) =
      fun (x989 : 'tags this) ->
        fun (x990 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x989) "multiEntry"
            (Ojs.bool_to_js x990)
    let (get_unique : 'tags this -> bool) =
      fun (x992 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x992) "unique")
    let (set_unique : 'tags this -> bool -> unit) =
      fun (x994 : 'tags this) ->
        fun (x995 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x994) "unique"
            (Ojs.bool_to_js x995)
    let (create : multiEntry:bool -> unique:bool -> unit -> t) =
      fun ~multiEntry:(x997 : bool) ->
        fun ~unique:(x998 : bool) ->
          fun () ->
            let x999 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x999 "multiEntry" (Ojs.bool_to_js x997);
            Ojs.set_prop_ascii x999 "unique" (Ojs.bool_to_js x998);
            t_of_js x999
    let cast_from = Obj.magic
  end
module BufferSource =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x1003 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x1003
    and t_to_js : t -> Ojs.t =
      fun (x1000 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x1000
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1007 : Ojs.t) -> t_of_js x1007
    and t_0_to_js : t_0 -> Ojs.t = fun (x1006 : t) -> t_to_js x1006
  end
module IDBValidKey =
  struct
    type t =
      [ `Number of float  | `String of string 
      | `Other of (t list, BufferSource.t, Date.t_0) union3 ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1017 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x1018 : Ojs.t) ->
             let x1019 = x1018 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x1019 "dummy") with
             | "Number" -> `Number (Ojs.float_of_js x1019)
             | "String" -> `String (Ojs.string_of_js x1019)
             | "Other" ->
                 `Other
                   (union3_of_js
                      (fun (x1020 : Ojs.t) -> Ojs.list_of_js t_of_js x1020)
                      BufferSource.t_of_js Date.t_0_of_js x1019)
             | _ -> assert false) x1017
    and t_to_js : t -> Ojs.t =
      fun
        (x1008 :
          [ `Number of float  | `String of string 
          | `Other of (t list, BufferSource.t, Date.t_0) union3 ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x1009 :
               [ `Number of float  | `String of string 
               | `Other of (t list, BufferSource.t, Date.t_0) union3 ])
             ->
             match x1009 with
             | `Number x1010 -> Ojs.float_to_js x1010
             | `String x1011 -> Ojs.string_to_js x1011
             | `Other x1012 ->
                 union3_to_js
                   (fun (x1013 : t list) -> Ojs.list_to_js t_to_js x1013)
                   BufferSource.t_to_js Date.t_0_to_js x1012) x1008
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1025 : Ojs.t) -> t_of_js x1025
    and t_0_to_js : t_0 -> Ojs.t = fun (x1024 : t) -> t_to_js x1024
  end
module IDBTransactionMode =
  struct
    type t =
      [ `L_s161_readonly  | `L_s162_readwrite  | `L_s203_versionchange ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1027 : Ojs.t) ->
        let x1028 = x1027 in
        match Ojs.string_of_js x1028 with
        | "readonly" -> `L_s161_readonly
        | "readwrite" -> `L_s162_readwrite
        | "versionchange" -> `L_s203_versionchange
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1026 :
          [ `L_s161_readonly  | `L_s162_readwrite  | `L_s203_versionchange ])
        ->
        match x1026 with
        | `L_s161_readonly -> Ojs.string_to_js "readonly"
        | `L_s162_readwrite -> Ojs.string_to_js "readwrite"
        | `L_s203_versionchange -> Ojs.string_to_js "versionchange"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1030 : Ojs.t) -> t_of_js x1030
    and t_0_to_js : t_0 -> Ojs.t = fun (x1029 : t) -> t_to_js x1029
  end
module IDBRequestReadyState =
  struct
    type t = [ `L_s147_pending  | `L_s63_done ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1032 : Ojs.t) ->
        let x1033 = x1032 in
        match Ojs.string_of_js x1033 with
        | "pending" -> `L_s147_pending
        | "done" -> `L_s63_done
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1031 : [ `L_s147_pending  | `L_s63_done ]) ->
        match x1031 with
        | `L_s147_pending -> Ojs.string_to_js "pending"
        | `L_s63_done -> Ojs.string_to_js "done"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1035 : Ojs.t) -> t_of_js x1035
    and t_0_to_js : t_0 -> Ojs.t = fun (x1034 : t) -> t_to_js x1034
  end
module IDBKeyRange =
  struct
    type t = [ `IDBKeyRange ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1037 : Ojs.t) -> t_of_js x1037
    and t_0_to_js : t_0 -> Ojs.t = fun (x1036 : t) -> t_to_js x1036
    type tags = [ `IDBKeyRange ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBKeyRange ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1040 : Ojs.t) -> intf_of_js __tags_of_js x1040
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1038 : __tags intf) -> intf_to_js __tags_to_js x1038
    let (get_lower : 'tags this -> any) =
      fun (x1042 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1042) "lower")
    let (get_lowerOpen : 'tags this -> bool) =
      fun (x1044 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1044) "lowerOpen")
    let (get_upper : 'tags this -> any) =
      fun (x1046 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1046) "upper")
    let (get_upperOpen : 'tags this -> bool) =
      fun (x1048 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1048) "upperOpen")
    let (includes : 'tags this -> key:any -> bool) =
      fun (x1051 : 'tags this) ->
        fun ~key:(x1050 : any) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1051) "includes"
               [|(any_to_js x1050)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBKeyRange")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") [||])
    let (bound :
      lower:any ->
        upper:any -> ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t)
      =
      fun ~lower:(x1053 : any) ->
        fun ~upper:(x1054 : any) ->
          fun ?lowerOpen:(x1055 : bool option) ->
            fun ?upperOpen:(x1056 : bool option) ->
              fun () ->
                t_of_js
                  (let x1060 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
                   Ojs.call (Ojs.get_prop_ascii x1060 "bound") "apply"
                     [|x1060;((let x1057 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1057 "push" [|(any_to_js x1053)|]);
                               ignore
                                 (Ojs.call x1057 "push" [|(any_to_js x1054)|]);
                               (match x1055 with
                                | Some x1059 ->
                                    ignore
                                      (Ojs.call x1057 "push"
                                         [|(Ojs.bool_to_js x1059)|])
                                | None -> ());
                               (match x1056 with
                                | Some x1058 ->
                                    ignore
                                      (Ojs.call x1057 "push"
                                         [|(Ojs.bool_to_js x1058)|])
                                | None -> ());
                               x1057))|])
    let (lowerBound : lower:any -> ?open_:bool -> unit -> t) =
      fun ~lower:(x1061 : any) ->
        fun ?open_:(x1062 : bool option) ->
          fun () ->
            t_of_js
              (let x1065 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x1065 "lowerBound") "apply"
                 [|x1065;((let x1063 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1063 "push" [|(any_to_js x1061)|]);
                           (match x1062 with
                            | Some x1064 ->
                                ignore
                                  (Ojs.call x1063 "push"
                                     [|(Ojs.bool_to_js x1064)|])
                            | None -> ());
                           x1063))|])
    let (only : any -> t) =
      fun (x1066 : any) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") "only"
             [|(any_to_js x1066)|])
    let (upperBound : upper:any -> ?open_:bool -> unit -> t) =
      fun ~upper:(x1067 : any) ->
        fun ?open_:(x1068 : bool option) ->
          fun () ->
            t_of_js
              (let x1071 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x1071 "upperBound") "apply"
                 [|x1071;((let x1069 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1069 "push" [|(any_to_js x1067)|]);
                           (match x1068 with
                            | Some x1070 ->
                                ignore
                                  (Ojs.call x1069 "push"
                                     [|(Ojs.bool_to_js x1070)|])
                            | None -> ());
                           x1069))|])
  end
module IDBCursorDirection =
  struct
    type t =
      [ `L_s121_next  | `L_s122_nextunique  | `L_s153_prev 
      | `L_s154_prevunique ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1073 : Ojs.t) ->
        let x1074 = x1073 in
        match Ojs.string_of_js x1074 with
        | "next" -> `L_s121_next
        | "nextunique" -> `L_s122_nextunique
        | "prev" -> `L_s153_prev
        | "prevunique" -> `L_s154_prevunique
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1072 :
          [ `L_s121_next  | `L_s122_nextunique  | `L_s153_prev 
          | `L_s154_prevunique ])
        ->
        match x1072 with
        | `L_s121_next -> Ojs.string_to_js "next"
        | `L_s122_nextunique -> Ojs.string_to_js "nextunique"
        | `L_s153_prev -> Ojs.string_to_js "prev"
        | `L_s154_prevunique -> Ojs.string_to_js "prevunique"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1076 : Ojs.t) -> t_of_js x1076
    and t_0_to_js : t_0 -> Ojs.t = fun (x1075 : t) -> t_to_js x1075
  end
module DOMStringList =
  struct
    type t =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1078 : Ojs.t) -> t_of_js x1078
    and t_0_to_js : t_0 -> Ojs.t = fun (x1077 : t) -> t_to_js x1077
    type tags =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMStringList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1081 : Ojs.t) -> intf_of_js __tags_of_js x1081
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1079 : __tags intf) -> intf_to_js __tags_to_js x1079
    let (get_length : 'tags this -> float) =
      fun (x1083 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1083) "length")
    let (contains : 'tags this -> string:string -> bool) =
      fun (x1086 : 'tags this) ->
        fun ~string:(x1085 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1086) "contains"
               [|(Ojs.string_to_js x1085)|])
    let (item : 'tags this -> index:float -> string option) =
      fun (x1089 : 'tags this) ->
        fun ~index:(x1088 : float) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x1089) "item"
               [|(Ojs.float_to_js x1088)|])
    let (get : 'tags this -> float -> string) =
      fun (x1092 : 'tags this) ->
        fun (x1094 : float) ->
          Ojs.string_of_js
            (Ojs.get_prop (this_to_js Obj.magic x1092)
               (Ojs.float_to_js x1094))
    let (set : 'tags this -> float -> string -> unit) =
      fun (x1095 : 'tags this) ->
        fun (x1097 : float) ->
          fun (x1098 : string) ->
            Ojs.set_prop (this_to_js Obj.magic x1095) (Ojs.float_to_js x1097)
              (Ojs.string_to_js x1098)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMStringList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "DOMStringList") [||])
  end
module DOMException =
  struct
    type t = [ `DOMException ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1100 : Ojs.t) -> t_of_js x1100
    and t_0_to_js : t_0 -> Ojs.t = fun (x1099 : t) -> t_to_js x1099
    type tags = [ `DOMException ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMException ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1103 : Ojs.t) -> intf_of_js __tags_of_js x1103
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1101 : __tags intf) -> intf_to_js __tags_to_js x1101
    let (get_code : 'tags this -> float) =
      fun (x1105 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1105) "code")
    let (get_message : 'tags this -> string) =
      fun (x1107 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1107) "message")
    let (get_name : 'tags this -> string) =
      fun (x1109 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1109) "name")
    let (get_ABORT_ERR : 'tags this -> float) =
      fun (x1111 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1111) "ABORT_ERR")
    let (get_DATA_CLONE_ERR : 'tags this -> float) =
      fun (x1113 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1113) "DATA_CLONE_ERR")
    let (get_DOMSTRING_SIZE_ERR : 'tags this -> float) =
      fun (x1115 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1115)
             "DOMSTRING_SIZE_ERR")
    let (get_HIERARCHY_REQUEST_ERR : 'tags this -> float) =
      fun (x1117 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1117)
             "HIERARCHY_REQUEST_ERR")
    let (get_INDEX_SIZE_ERR : 'tags this -> float) =
      fun (x1119 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1119) "INDEX_SIZE_ERR")
    let (get_INUSE_ATTRIBUTE_ERR : 'tags this -> float) =
      fun (x1121 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1121)
             "INUSE_ATTRIBUTE_ERR")
    let (get_INVALID_ACCESS_ERR : 'tags this -> float) =
      fun (x1123 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1123)
             "INVALID_ACCESS_ERR")
    let (get_INVALID_CHARACTER_ERR : 'tags this -> float) =
      fun (x1125 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1125)
             "INVALID_CHARACTER_ERR")
    let (get_INVALID_MODIFICATION_ERR : 'tags this -> float) =
      fun (x1127 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1127)
             "INVALID_MODIFICATION_ERR")
    let (get_INVALID_NODE_TYPE_ERR : 'tags this -> float) =
      fun (x1129 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1129)
             "INVALID_NODE_TYPE_ERR")
    let (get_INVALID_STATE_ERR : 'tags this -> float) =
      fun (x1131 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1131)
             "INVALID_STATE_ERR")
    let (get_NAMESPACE_ERR : 'tags this -> float) =
      fun (x1133 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1133) "NAMESPACE_ERR")
    let (get_NETWORK_ERR : 'tags this -> float) =
      fun (x1135 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1135) "NETWORK_ERR")
    let (get_NOT_FOUND_ERR : 'tags this -> float) =
      fun (x1137 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1137) "NOT_FOUND_ERR")
    let (get_NOT_SUPPORTED_ERR : 'tags this -> float) =
      fun (x1139 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1139)
             "NOT_SUPPORTED_ERR")
    let (get_NO_DATA_ALLOWED_ERR : 'tags this -> float) =
      fun (x1141 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1141)
             "NO_DATA_ALLOWED_ERR")
    let (get_NO_MODIFICATION_ALLOWED_ERR : 'tags this -> float) =
      fun (x1143 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1143)
             "NO_MODIFICATION_ALLOWED_ERR")
    let (get_QUOTA_EXCEEDED_ERR : 'tags this -> float) =
      fun (x1145 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1145)
             "QUOTA_EXCEEDED_ERR")
    let (get_SECURITY_ERR : 'tags this -> float) =
      fun (x1147 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1147) "SECURITY_ERR")
    let (get_SYNTAX_ERR : 'tags this -> float) =
      fun (x1149 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1149) "SYNTAX_ERR")
    let (get_TIMEOUT_ERR : 'tags this -> float) =
      fun (x1151 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1151) "TIMEOUT_ERR")
    let (get_TYPE_MISMATCH_ERR : 'tags this -> float) =
      fun (x1153 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1153)
             "TYPE_MISMATCH_ERR")
    let (get_URL_MISMATCH_ERR : 'tags this -> float) =
      fun (x1155 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1155) "URL_MISMATCH_ERR")
    let (get_VALIDATION_ERR : 'tags this -> float) =
      fun (x1157 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1157) "VALIDATION_ERR")
    let (get_WRONG_DOCUMENT_ERR : 'tags this -> float) =
      fun (x1159 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1159)
             "WRONG_DOCUMENT_ERR")
    let (create :
      code:float ->
        message:string ->
          name:string ->
            abort_err:float ->
              data_clone_err:float ->
                domstring_size_err:float ->
                  hierarchy_request_err:float ->
                    index_size_err:float ->
                      inuse_attribute_err:float ->
                        invalid_access_err:float ->
                          invalid_character_err:float ->
                            invalid_modification_err:float ->
                              invalid_node_type_err:float ->
                                invalid_state_err:float ->
                                  namespace_err:float ->
                                    network_err:float ->
                                      not_found_err:float ->
                                        not_supported_err:float ->
                                          no_data_allowed_err:float ->
                                            no_modification_allowed_err:float
                                              ->
                                              quota_exceeded_err:float ->
                                                security_err:float ->
                                                  syntax_err:float ->
                                                    timeout_err:float ->
                                                      type_mismatch_err:float
                                                        ->
                                                        url_mismatch_err:float
                                                          ->
                                                          validation_err:float
                                                            ->
                                                            wrong_document_err:float
                                                              -> unit -> t)
      =
      fun ~code:(x1161 : float) ->
        fun ~message:(x1162 : string) ->
          fun ~name:(x1163 : string) ->
            fun ~abort_err:(x1164 : float) ->
              fun ~data_clone_err:(x1165 : float) ->
                fun ~domstring_size_err:(x1166 : float) ->
                  fun ~hierarchy_request_err:(x1167 : float) ->
                    fun ~index_size_err:(x1168 : float) ->
                      fun ~inuse_attribute_err:(x1169 : float) ->
                        fun ~invalid_access_err:(x1170 : float) ->
                          fun ~invalid_character_err:(x1171 : float) ->
                            fun ~invalid_modification_err:(x1172 : float) ->
                              fun ~invalid_node_type_err:(x1173 : float) ->
                                fun ~invalid_state_err:(x1174 : float) ->
                                  fun ~namespace_err:(x1175 : float) ->
                                    fun ~network_err:(x1176 : float) ->
                                      fun ~not_found_err:(x1177 : float) ->
                                        fun
                                          ~not_supported_err:(x1178 : float)
                                          ->
                                          fun
                                            ~no_data_allowed_err:(x1179 :
                                                                   float)
                                            ->
                                            fun
                                              ~no_modification_allowed_err:
                                              (x1180 : float) ->
                                              fun
                                                ~quota_exceeded_err:(x1181 :
                                                                    float)
                                                ->
                                                fun
                                                  ~security_err:(x1182 :
                                                                  float)
                                                  ->
                                                  fun
                                                    ~syntax_err:(x1183 :
                                                                  float)
                                                    ->
                                                    fun
                                                      ~timeout_err:(x1184 :
                                                                    float)
                                                      ->
                                                      fun
                                                        ~type_mismatch_err:
                                                        (x1185 : float) ->
                                                        fun
                                                          ~url_mismatch_err:
                                                          (x1186 : float) ->
                                                          fun
                                                            ~validation_err:
                                                            (x1187 : 
                                                              float)
                                                            ->
                                                            fun
                                                              ~wrong_document_err:
                                                              (x1188 : 
                                                                float)
                                                              ->
                                                              fun () ->
                                                                let x1189 =
                                                                  Ojs.empty_obj
                                                                    () in
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "code"
                                                                  (Ojs.float_to_js
                                                                    x1161);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "message"
                                                                  (Ojs.string_to_js
                                                                    x1162);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "name"
                                                                  (Ojs.string_to_js
                                                                    x1163);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "ABORT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1164);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "DATA_CLONE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1165);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "DOMSTRING_SIZE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1166);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "HIERARCHY_REQUEST_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1167);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "INDEX_SIZE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1168);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "INUSE_ATTRIBUTE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1169);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "INVALID_ACCESS_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1170);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "INVALID_CHARACTER_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1171);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "INVALID_MODIFICATION_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1172);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "INVALID_NODE_TYPE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1173);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "INVALID_STATE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1174);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "NAMESPACE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1175);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "NETWORK_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1176);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "NOT_FOUND_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1177);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "NOT_SUPPORTED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1178);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "NO_DATA_ALLOWED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1179);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "NO_MODIFICATION_ALLOWED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1180);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "QUOTA_EXCEEDED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1181);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "SECURITY_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1182);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "SYNTAX_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1183);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "TIMEOUT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1184);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "TYPE_MISMATCH_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1185);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "URL_MISMATCH_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1186);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "VALIDATION_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1187);
                                                                Ojs.set_prop_ascii
                                                                  x1189
                                                                  "WRONG_DOCUMENT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1188);
                                                                t_of_js x1189
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "prototype")
    let (create' : ?message:string -> ?name:string -> unit -> t) =
      fun ?message:(x1190 : string option) ->
        fun ?name:(x1191 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMException")
                 (let x1192 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1190 with
                   | Some x1194 ->
                       ignore
                         (Ojs.call x1192 "push" [|(Ojs.string_to_js x1194)|])
                   | None -> ());
                  (match x1191 with
                   | Some x1193 ->
                       ignore
                         (Ojs.call x1192 "push" [|(Ojs.string_to_js x1193)|])
                   | None -> ());
                  x1192))
    let (abort_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "ABORT_ERR")
    let (data_clone_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DATA_CLONE_ERR")
    let (domstring_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DOMSTRING_SIZE_ERR")
    let (hierarchy_request_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "HIERARCHY_REQUEST_ERR")
    let (index_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INDEX_SIZE_ERR")
    let (inuse_attribute_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INUSE_ATTRIBUTE_ERR")
    let (invalid_access_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_ACCESS_ERR")
    let (invalid_character_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_CHARACTER_ERR")
    let (invalid_modification_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_MODIFICATION_ERR")
    let (invalid_node_type_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_NODE_TYPE_ERR")
    let (invalid_state_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_STATE_ERR")
    let (namespace_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NAMESPACE_ERR")
    let (network_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NETWORK_ERR")
    let (not_found_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_FOUND_ERR")
    let (not_supported_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_SUPPORTED_ERR")
    let (no_data_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_DATA_ALLOWED_ERR")
    let (no_modification_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_MODIFICATION_ALLOWED_ERR")
    let (quota_exceeded_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "QUOTA_EXCEEDED_ERR")
    let (security_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SECURITY_ERR")
    let (syntax_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SYNTAX_ERR")
    let (timeout_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TIMEOUT_ERR")
    let (type_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TYPE_MISMATCH_ERR")
    let (url_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "URL_MISMATCH_ERR")
    let (validation_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "VALIDATION_ERR")
    let (wrong_document_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "WRONG_DOCUMENT_ERR")
  end
module rec
  IDBCursor:sig
              type t = [ `IDBCursor ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `IDBCursor ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `IDBCursor ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_direction : 'tags this -> IDBCursorDirection.t
              val get_key : 'tags this -> IDBValidKey.t
              val get_primaryKey : 'tags this -> IDBValidKey.t
              val get_request : 'tags this -> IDBRequest.t_0
              val get_source :
                'tags this -> (IDBIndex.t, IDBObjectStore.t) union2
              val advance : 'tags this -> count:float -> unit
              val continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit
              val continuePrimaryKey :
                'tags this ->
                  key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit
              val delete : 'tags this -> undefined IDBRequest.t
              val update :
                'tags this -> value:any -> IDBValidKey.t IDBRequest.t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : unit -> t
            end =
  struct
    type t = [ `IDBCursor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1196 : Ojs.t) -> t_of_js x1196
    and t_0_to_js : t_0 -> Ojs.t = fun (x1195 : t) -> t_to_js x1195
    type tags = [ `IDBCursor ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1199 : Ojs.t) -> intf_of_js __tags_of_js x1199
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1197 : __tags intf) -> intf_to_js __tags_to_js x1197
    let (get_direction : 'tags this -> IDBCursorDirection.t) =
      fun (x1201 : 'tags this) ->
        IDBCursorDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1201) "direction")
    let (get_key : 'tags this -> IDBValidKey.t) =
      fun (x1203 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1203) "key")
    let (get_primaryKey : 'tags this -> IDBValidKey.t) =
      fun (x1205 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1205) "primaryKey")
    let (get_request : 'tags this -> IDBRequest.t_0) =
      fun (x1207 : 'tags this) ->
        IDBRequest.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1207) "request")
    let (get_source : 'tags this -> (IDBIndex.t, IDBObjectStore.t) union2) =
      fun (x1209 : 'tags this) ->
        union2_of_js IDBIndex.t_of_js IDBObjectStore.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1209) "source")
    let (advance : 'tags this -> count:float -> unit) =
      fun (x1214 : 'tags this) ->
        fun ~count:(x1213 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x1214) "advance"
               [|(Ojs.float_to_js x1213)|])
    let (continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit) =
      fun (x1219 : 'tags this) ->
        fun ?key:(x1216 : IDBValidKey.t option) ->
          fun () ->
            ignore
              (let x1221 = this_to_js Obj.magic x1219 in
               Ojs.call (Ojs.get_prop_ascii x1221 "continue") "apply"
                 [|x1221;((let x1217 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1216 with
                            | Some x1218 ->
                                ignore
                                  (Ojs.call x1217 "push"
                                     [|(IDBValidKey.t_to_js x1218)|])
                            | None -> ());
                           x1217))|])
    let (continuePrimaryKey :
      'tags this -> key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit) =
      fun (x1224 : 'tags this) ->
        fun ~key:(x1222 : IDBValidKey.t) ->
          fun ~primaryKey:(x1223 : IDBValidKey.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x1224) "continuePrimaryKey"
                 [|(IDBValidKey.t_to_js x1222);(IDBValidKey.t_to_js x1223)|])
    let (delete : 'tags this -> undefined IDBRequest.t) =
      fun (x1226 : 'tags this) ->
        IDBRequest.t_of_js undefined_of_js
          (Ojs.call (this_to_js Obj.magic x1226) "delete" [||])
    let (update : 'tags this -> value:any -> IDBValidKey.t IDBRequest.t) =
      fun (x1230 : 'tags this) ->
        fun ~value:(x1229 : any) ->
          IDBRequest.t_of_js IDBValidKey.t_of_js
            (Ojs.call (this_to_js Obj.magic x1230) "update"
               [|(any_to_js x1229)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBCursor")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursor") [||])
  end
 and
  IDBCursorWithValue:sig
                       type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags =
                                     [> `IDBCursorWithValue ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_value : 'tags this -> any
                       val create : value:any -> unit -> t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create' : unit -> t
                     end =
  struct
    type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1234 : Ojs.t) -> t_of_js x1234
    and t_0_to_js : t_0 -> Ojs.t = fun (x1233 : t) -> t_to_js x1233
    type tags = [ `IDBCursor  | `IDBCursorWithValue ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursorWithValue ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1237 : Ojs.t) -> intf_of_js __tags_of_js x1237
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1235 : __tags intf) -> intf_to_js __tags_to_js x1235
    let (get_value : 'tags this -> any) =
      fun (x1239 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1239) "value")
    let (create : value:any -> unit -> t) =
      fun ~value:(x1241 : any) ->
        fun () ->
          let x1242 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1242 "value" (any_to_js x1241); t_of_js x1242
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue")
             [||])
  end and
       IDBDatabase:sig
                     type t = [ `EventTarget  | `IDBDatabase ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `EventTarget  | `IDBDatabase ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `EventTarget  | `IDBDatabase ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `IDBDatabase ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val transaction :
                       'tags this ->
                         storeNames:[ `U1 of string 
                                    | `U2 of string Iterable.t_1 ]
                           ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val get_name : 'tags this -> string
                     val get_objectStoreNames : 'tags this -> DOMStringList.t
                     val get_onabort :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onabort :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onclose :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onclose :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onerror :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onerror :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any) option
                     val set_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any) option
                           -> unit
                     val get_version : 'tags this -> float
                     val close : 'tags this -> unit
                     val createObjectStore :
                       'tags this ->
                         name:string ->
                           ?options:IDBObjectStoreParameters.t ->
                             unit -> IDBObjectStore.t
                     val deleteObjectStore :
                       'tags this -> name:string -> unit
                     val transaction' :
                       'tags this ->
                         storeNames:[ `U1 of string  | `U2 of string list ]
                           ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:[ `U1 of bool 
                                      | `U2 of AddEventListenerOptions.t ]
                               -> unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:[ `U1 of bool 
                                      | `U2 of AddEventListenerOptions.t ]
                               -> unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:[ `U1 of bool 
                                      | `U2 of EventListenerOptions.t ]
                               -> unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:[ `U1 of bool 
                                      | `U2 of EventListenerOptions.t ]
                               -> unit -> unit
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
       struct
         type t = [ `EventTarget  | `IDBDatabase ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x1244 : Ojs.t) -> t_of_js x1244
         and t_0_to_js : t_0 -> Ojs.t = fun (x1243 : t) -> t_to_js x1243
         type tags = [ `EventTarget  | `IDBDatabase ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabase ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x1247 : Ojs.t) -> intf_of_js __tags_of_js x1247
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x1245 : __tags intf) -> intf_to_js __tags_to_js x1245
         let (transaction :
           'tags this ->
             storeNames:[ `U1 of string  | `U2 of string Iterable.t_1 ] ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x1256 : 'tags this) ->
             fun
               ~storeNames:(x1249 :
                             [ `U1 of string  | `U2 of string Iterable.t_1 ])
               ->
               fun ?mode:(x1250 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x1258 = this_to_js Obj.magic x1256 in
                      Ojs.call (Ojs.get_prop_ascii x1258 "transaction")
                        "apply"
                        [|x1258;((let x1251 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x1251 "push"
                                       [|((match x1249 with
                                           | `U1 x1253 ->
                                               Ojs.string_to_js x1253
                                           | `U2 x1254 ->
                                               Iterable.t_1_to_js
                                                 Ojs.string_to_js x1254))|]);
                                  (match x1250 with
                                   | Some x1252 ->
                                       ignore
                                         (Ojs.call x1251 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x1252)|])
                                   | None -> ());
                                  x1251))|])
         let (get_name : 'tags this -> string) =
           fun (x1259 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1259) "name")
         let (get_objectStoreNames : 'tags this -> DOMStringList.t) =
           fun (x1261 : 'tags this) ->
             DOMStringList.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1261)
                  "objectStoreNames")
         let (get_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x1263 : 'tags this) ->
             Ojs.option_of_js
               (fun (x1265 : Ojs.t) ->
                  fun ~this:(x1266 : t) ->
                    fun ~ev:(x1267 : Event.t) ->
                      any_of_js
                        (Ojs.apply x1265
                           [|(t_to_js x1266);(Event.t_to_js x1267)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1263) "onabort")
         let (set_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x1268 : 'tags this) ->
             fun (x1269 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1268) "onabort"
                 (Ojs.option_to_js
                    (fun (x1270 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x1271 : Ojs.t) ->
                            fun (x1272 : Ojs.t) ->
                              any_to_js
                                (x1270 ~this:(t_of_js x1271)
                                   ~ev:(Event.t_of_js x1272)))) x1269)
         let (get_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x1274 : 'tags this) ->
             Ojs.option_of_js
               (fun (x1276 : Ojs.t) ->
                  fun ~this:(x1277 : t) ->
                    fun ~ev:(x1278 : Event.t) ->
                      any_of_js
                        (Ojs.apply x1276
                           [|(t_to_js x1277);(Event.t_to_js x1278)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1274) "onclose")
         let (set_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x1279 : 'tags this) ->
             fun (x1280 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1279) "onclose"
                 (Ojs.option_to_js
                    (fun (x1281 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x1282 : Ojs.t) ->
                            fun (x1283 : Ojs.t) ->
                              any_to_js
                                (x1281 ~this:(t_of_js x1282)
                                   ~ev:(Event.t_of_js x1283)))) x1280)
         let (get_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x1285 : 'tags this) ->
             Ojs.option_of_js
               (fun (x1287 : Ojs.t) ->
                  fun ~this:(x1288 : t) ->
                    fun ~ev:(x1289 : Event.t) ->
                      any_of_js
                        (Ojs.apply x1287
                           [|(t_to_js x1288);(Event.t_to_js x1289)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1285) "onerror")
         let (set_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x1290 : 'tags this) ->
             fun (x1291 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1290) "onerror"
                 (Ojs.option_to_js
                    (fun (x1292 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x1293 : Ojs.t) ->
                            fun (x1294 : Ojs.t) ->
                              any_to_js
                                (x1292 ~this:(t_of_js x1293)
                                   ~ev:(Event.t_of_js x1294)))) x1291)
         let (get_onversionchange :
           'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option)
           =
           fun (x1296 : 'tags this) ->
             Ojs.option_of_js
               (fun (x1298 : Ojs.t) ->
                  fun ~this:(x1299 : t) ->
                    fun ~ev:(x1300 : IDBVersionChangeEvent.t) ->
                      any_of_js
                        (Ojs.apply x1298
                           [|(t_to_js x1299);(IDBVersionChangeEvent.t_to_js
                                                x1300)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1296)
                  "onversionchange")
         let (set_onversionchange :
           'tags this ->
             (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit)
           =
           fun (x1301 : 'tags this) ->
             fun
               (x1302 : (this:t -> ev:IDBVersionChangeEvent.t -> any) option)
               ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1301)
                 "onversionchange"
                 (Ojs.option_to_js
                    (fun
                       (x1303 : this:t -> ev:IDBVersionChangeEvent.t -> any)
                       ->
                       Ojs.fun_to_js 2
                         (fun (x1304 : Ojs.t) ->
                            fun (x1305 : Ojs.t) ->
                              any_to_js
                                (x1303 ~this:(t_of_js x1304)
                                   ~ev:(IDBVersionChangeEvent.t_of_js x1305))))
                    x1302)
         let (get_version : 'tags this -> float) =
           fun (x1307 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1307) "version")
         let (close : 'tags this -> unit) =
           fun (x1309 : 'tags this) ->
             ignore (Ojs.call (this_to_js Obj.magic x1309) "close" [||])
         let (createObjectStore :
           'tags this ->
             name:string ->
               ?options:IDBObjectStoreParameters.t ->
                 unit -> IDBObjectStore.t)
           =
           fun (x1315 : 'tags this) ->
             fun ~name:(x1311 : string) ->
               fun ?options:(x1312 : IDBObjectStoreParameters.t option) ->
                 fun () ->
                   IDBObjectStore.t_of_js
                     (let x1317 = this_to_js Obj.magic x1315 in
                      Ojs.call (Ojs.get_prop_ascii x1317 "createObjectStore")
                        "apply"
                        [|x1317;((let x1313 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x1313 "push"
                                       [|(Ojs.string_to_js x1311)|]);
                                  (match x1312 with
                                   | Some x1314 ->
                                       ignore
                                         (Ojs.call x1313 "push"
                                            [|(IDBObjectStoreParameters.t_to_js
                                                 x1314)|])
                                   | None -> ());
                                  x1313))|])
         let (deleteObjectStore : 'tags this -> name:string -> unit) =
           fun (x1319 : 'tags this) ->
             fun ~name:(x1318 : string) ->
               ignore
                 (Ojs.call (this_to_js Obj.magic x1319) "deleteObjectStore"
                    [|(Ojs.string_to_js x1318)|])
         let (transaction' :
           'tags this ->
             storeNames:[ `U1 of string  | `U2 of string list ] ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x1328 : 'tags this) ->
             fun
               ~storeNames:(x1321 : [ `U1 of string  | `U2 of string list ])
               ->
               fun ?mode:(x1322 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x1330 = this_to_js Obj.magic x1328 in
                      Ojs.call (Ojs.get_prop_ascii x1330 "transaction")
                        "apply"
                        [|x1330;((let x1323 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x1323 "push"
                                       [|((match x1321 with
                                           | `U1 x1325 ->
                                               Ojs.string_to_js x1325
                                           | `U2 x1326 ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1326))|]);
                                  (match x1322 with
                                   | Some x1324 ->
                                       ignore
                                         (Ojs.call x1323 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x1324)|])
                                   | None -> ());
                                  x1323))|])
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x1340 : 'tags this) ->
             fun ~type_:(x1331 : 'K) ->
               fun ~listener:(x1332 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x1333 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x1342 = this_to_js Obj.magic x1340 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1342 "addEventListener")
                          "apply"
                          [|x1342;((let x1334 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1334 "push"
                                         [|(Obj.magic x1331)|]);
                                    ignore
                                      (Ojs.call x1334 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x1338 : Ojs.t) ->
                                                 fun (x1339 : Ojs.t) ->
                                                   any_to_js
                                                     (x1332
                                                        ~this:(t_of_js x1338)
                                                        ~ev:(any_of_js x1339))))|]);
                                    (match x1333 with
                                     | Some x1335 ->
                                         ignore
                                           (Ojs.call x1334 "push"
                                              [|((match x1335 with
                                                  | `U1 x1336 ->
                                                      Ojs.bool_to_js x1336
                                                  | `U2 x1337 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x1337))|])
                                     | None -> ());
                                    x1334))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x1350 : 'tags this) ->
             fun ~type_:(x1343 : string) ->
               fun ~listener:(x1344 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x1345 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x1352 = this_to_js Obj.magic x1350 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1352 "addEventListener")
                          "apply"
                          [|x1352;((let x1346 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1346 "push"
                                         [|(Ojs.string_to_js x1343)|]);
                                    ignore
                                      (Ojs.call x1346 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x1344)|]);
                                    (match x1345 with
                                     | Some x1347 ->
                                         ignore
                                           (Ojs.call x1346 "push"
                                              [|((match x1347 with
                                                  | `U1 x1348 ->
                                                      Ojs.bool_to_js x1348
                                                  | `U2 x1349 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x1349))|])
                                     | None -> ());
                                    x1346))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x1362 : 'tags this) ->
             fun ~type_:(x1353 : 'K) ->
               fun ~listener:(x1354 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x1355 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x1364 = this_to_js Obj.magic x1362 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1364 "removeEventListener")
                          "apply"
                          [|x1364;((let x1356 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1356 "push"
                                         [|(Obj.magic x1353)|]);
                                    ignore
                                      (Ojs.call x1356 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x1360 : Ojs.t) ->
                                                 fun (x1361 : Ojs.t) ->
                                                   any_to_js
                                                     (x1354
                                                        ~this:(t_of_js x1360)
                                                        ~ev:(any_of_js x1361))))|]);
                                    (match x1355 with
                                     | Some x1357 ->
                                         ignore
                                           (Ojs.call x1356 "push"
                                              [|((match x1357 with
                                                  | `U1 x1358 ->
                                                      Ojs.bool_to_js x1358
                                                  | `U2 x1359 ->
                                                      EventListenerOptions.t_to_js
                                                        x1359))|])
                                     | None -> ());
                                    x1356))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x1372 : 'tags this) ->
             fun ~type_:(x1365 : string) ->
               fun ~listener:(x1366 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x1367 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x1374 = this_to_js Obj.magic x1372 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1374 "removeEventListener")
                          "apply"
                          [|x1374;((let x1368 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1368 "push"
                                         [|(Ojs.string_to_js x1365)|]);
                                    ignore
                                      (Ojs.call x1368 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x1366)|]);
                                    (match x1367 with
                                     | Some x1369 ->
                                         ignore
                                           (Ojs.call x1368 "push"
                                              [|((match x1369 with
                                                  | `U1 x1370 ->
                                                      Ojs.bool_to_js x1370
                                                  | `U2 x1371 ->
                                                      EventListenerOptions.t_to_js
                                                        x1371))|])
                                     | None -> ());
                                    x1368))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "IDBDatabase") "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBDatabase")
                  [||])
       end and
            IDBIndex:sig
                       type t = [ `IDBIndex ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBIndex ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBIndex ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags = [> `IDBIndex ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_keyPath :
                         'tags this ->
                           [ `String of string  | `Other of string list ]
                             Primitive.t
                       val get_multiEntry : 'tags this -> bool
                       val get_name : 'tags this -> string
                       val set_name : 'tags this -> string -> unit
                       val get_objectStore : 'tags this -> IDBObjectStore.t
                       val get_unique : 'tags this -> bool
                       val count :
                         'tags this ->
                           ?query:[ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             -> unit -> float IDBRequest.t
                       val get_ :
                         'tags this ->
                           query:[ `U1 of IDBValidKey.t 
                                 | `U2 of IDBKeyRange.t ]
                             -> any IDBRequest.t
                       val getAll :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             -> ?count:float -> unit -> any list IDBRequest.t
                       val getAllKeys :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?count:float ->
                               unit -> IDBValidKey.t list IDBRequest.t
                       val getKey :
                         'tags this ->
                           query:[ `U1 of IDBValidKey.t 
                                 | `U2 of IDBKeyRange.t ]
                             -> IDBValidKey.t option IDBRequest.t
                       val openCursor :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?direction:IDBCursorDirection.t ->
                               unit ->
                                 IDBCursorWithValue.t option IDBRequest.t
                       val openKeyCursor :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?direction:IDBCursorDirection.t ->
                               unit -> IDBCursor.t option IDBRequest.t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
            struct
              type t = [ `IDBIndex ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x1376 : Ojs.t) -> t_of_js x1376
              and t_0_to_js : t_0 -> Ojs.t = fun (x1375 : t) -> t_to_js x1375
              type tags = [ `IDBIndex ]
              type tags_0 = tags
              type 'tags this = 'tags intf constraint 'tags = [> `IDBIndex ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x1379 : Ojs.t) -> intf_of_js __tags_of_js x1379
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x1377 : __tags intf) -> intf_to_js __tags_to_js x1377
              let (get_keyPath :
                'tags this ->
                  [ `String of string  | `Other of string list ] Primitive.t)
                =
                fun (x1381 : 'tags this) ->
                  Primitive.t_of_js
                    (fun (x1383 : Ojs.t) ->
                       let x1384 = x1383 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x1384 "dummy")
                       with
                       | "String" -> `String (Ojs.string_of_js x1384)
                       | "Other" ->
                           `Other (Ojs.list_of_js Ojs.string_of_js x1384)
                       | _ -> assert false)
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1381)
                       "keyPath")
              let (get_multiEntry : 'tags this -> bool) =
                fun (x1386 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1386)
                       "multiEntry")
              let (get_name : 'tags this -> string) =
                fun (x1388 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1388) "name")
              let (set_name : 'tags this -> string -> unit) =
                fun (x1390 : 'tags this) ->
                  fun (x1391 : string) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x1390) "name"
                      (Ojs.string_to_js x1391)
              let (get_objectStore : 'tags this -> IDBObjectStore.t) =
                fun (x1393 : 'tags this) ->
                  IDBObjectStore.t_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1393)
                       "objectStore")
              let (get_unique : 'tags this -> bool) =
                fun (x1395 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1395) "unique")
              let (count :
                'tags this ->
                  ?query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    unit -> float IDBRequest.t)
                =
                fun (x1402 : 'tags this) ->
                  fun
                    ?query:(x1397 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                               option)
                    ->
                    fun () ->
                      IDBRequest.t_of_js Ojs.float_of_js
                        (let x1404 = this_to_js Obj.magic x1402 in
                         Ojs.call (Ojs.get_prop_ascii x1404 "count") "apply"
                           [|x1404;((let x1398 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x1397 with
                                      | Some x1399 ->
                                          ignore
                                            (Ojs.call x1398 "push"
                                               [|((match x1399 with
                                                   | `U1 x1400 ->
                                                       IDBValidKey.t_to_js
                                                         x1400
                                                   | `U2 x1401 ->
                                                       IDBKeyRange.t_to_js
                                                         x1401))|])
                                      | None -> ());
                                     x1398))|])
              let (get_ :
                'tags this ->
                  query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    any IDBRequest.t)
                =
                fun (x1409 : 'tags this) ->
                  fun
                    ~query:(x1406 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ])
                    ->
                    IDBRequest.t_of_js any_of_js
                      (Ojs.call (this_to_js Obj.magic x1409) "get"
                         [|((match x1406 with
                             | `U1 x1407 -> IDBValidKey.t_to_js x1407
                             | `U2 x1408 -> IDBKeyRange.t_to_js x1408))|])
              let (getAll :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    -> ?count:float -> unit -> any list IDBRequest.t)
                =
                fun (x1419 : 'tags this) ->
                  fun
                    ?query:(x1412 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?count:(x1413 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1422 : Ojs.t) ->
                             Ojs.list_of_js any_of_js x1422)
                          (let x1421 = this_to_js Obj.magic x1419 in
                           Ojs.call (Ojs.get_prop_ascii x1421 "getAll")
                             "apply"
                             [|x1421;((let x1414 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1412 with
                                        | Some x1416 ->
                                            ignore
                                              (Ojs.call x1414 "push"
                                                 [|((match x1416 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x1417 ->
                                                         IDBValidKey.t_to_js
                                                           x1417
                                                     | `U2 x1418 ->
                                                         IDBKeyRange.t_to_js
                                                           x1418))|])
                                        | None -> ());
                                       (match x1413 with
                                        | Some x1415 ->
                                            ignore
                                              (Ojs.call x1414 "push"
                                                 [|(Ojs.float_to_js x1415)|])
                                        | None -> ());
                                       x1414))|])
              let (getAllKeys :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?count:float -> unit -> IDBValidKey.t list IDBRequest.t)
                =
                fun (x1431 : 'tags this) ->
                  fun
                    ?query:(x1424 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?count:(x1425 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1434 : Ojs.t) ->
                             Ojs.list_of_js IDBValidKey.t_of_js x1434)
                          (let x1433 = this_to_js Obj.magic x1431 in
                           Ojs.call (Ojs.get_prop_ascii x1433 "getAllKeys")
                             "apply"
                             [|x1433;((let x1426 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1424 with
                                        | Some x1428 ->
                                            ignore
                                              (Ojs.call x1426 "push"
                                                 [|((match x1428 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x1429 ->
                                                         IDBValidKey.t_to_js
                                                           x1429
                                                     | `U2 x1430 ->
                                                         IDBKeyRange.t_to_js
                                                           x1430))|])
                                        | None -> ());
                                       (match x1425 with
                                        | Some x1427 ->
                                            ignore
                                              (Ojs.call x1426 "push"
                                                 [|(Ojs.float_to_js x1427)|])
                                        | None -> ());
                                       x1426))|])
              let (getKey :
                'tags this ->
                  query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    IDBValidKey.t option IDBRequest.t)
                =
                fun (x1439 : 'tags this) ->
                  fun
                    ~query:(x1436 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ])
                    ->
                    IDBRequest.t_of_js
                      (fun (x1441 : Ojs.t) ->
                         Ojs.option_of_js IDBValidKey.t_of_js x1441)
                      (Ojs.call (this_to_js Obj.magic x1439) "getKey"
                         [|((match x1436 with
                             | `U1 x1437 -> IDBValidKey.t_to_js x1437
                             | `U2 x1438 -> IDBKeyRange.t_to_js x1438))|])
              let (openCursor :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursorWithValue.t option IDBRequest.t)
                =
                fun (x1450 : 'tags this) ->
                  fun
                    ?query:(x1443 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?direction:(x1444 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1453 : Ojs.t) ->
                             Ojs.option_of_js IDBCursorWithValue.t_of_js
                               x1453)
                          (let x1452 = this_to_js Obj.magic x1450 in
                           Ojs.call (Ojs.get_prop_ascii x1452 "openCursor")
                             "apply"
                             [|x1452;((let x1445 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1443 with
                                        | Some x1447 ->
                                            ignore
                                              (Ojs.call x1445 "push"
                                                 [|((match x1447 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x1448 ->
                                                         IDBValidKey.t_to_js
                                                           x1448
                                                     | `U2 x1449 ->
                                                         IDBKeyRange.t_to_js
                                                           x1449))|])
                                        | None -> ());
                                       (match x1444 with
                                        | Some x1446 ->
                                            ignore
                                              (Ojs.call x1445 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x1446)|])
                                        | None -> ());
                                       x1445))|])
              let (openKeyCursor :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursor.t option IDBRequest.t)
                =
                fun (x1462 : 'tags this) ->
                  fun
                    ?query:(x1455 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?direction:(x1456 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1465 : Ojs.t) ->
                             Ojs.option_of_js IDBCursor.t_of_js x1465)
                          (let x1464 = this_to_js Obj.magic x1462 in
                           Ojs.call
                             (Ojs.get_prop_ascii x1464 "openKeyCursor")
                             "apply"
                             [|x1464;((let x1457 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1455 with
                                        | Some x1459 ->
                                            ignore
                                              (Ojs.call x1457 "push"
                                                 [|((match x1459 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x1460 ->
                                                         IDBValidKey.t_to_js
                                                           x1460
                                                     | `U2 x1461 ->
                                                         IDBKeyRange.t_to_js
                                                           x1461))|])
                                        | None -> ());
                                       (match x1456 with
                                        | Some x1458 ->
                                            ignore
                                              (Ojs.call x1457 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x1458)|])
                                        | None -> ());
                                       x1457))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "IDBIndex") "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBIndex")
                       [||])
            end and
                 IDBObjectStore:sig
                                  type t = [ `IDBObjectStore ] intf
                                  type t_0 = t
                                  [@@@js.stop ]
                                  type tags = [ `IDBObjectStore ]
                                  type tags_0 = tags
                                  [@@@js.start ]
                                  [@@@js.implem
                                    type tags = [ `IDBObjectStore ]
                                    type tags_0 = tags]
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `IDBObjectStore ]
                                  val t_to_js : t -> Ojs.t
                                  val t_of_js : Ojs.t -> t
                                  val t_0_to_js : t_0 -> Ojs.t
                                  val t_0_of_js : Ojs.t -> t_0
                                  val createIndex :
                                    'tags this ->
                                      name:string ->
                                        keyPath:[ `U1 of string 
                                                | `U2 of string Iterable.t_1 ]
                                          ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val get_autoIncrement : 'tags this -> bool
                                  val get_indexNames :
                                    'tags this -> DOMStringList.t
                                  val get_keyPath :
                                    'tags this ->
                                      [ `String of string 
                                      | `Other of string list ] Primitive.t
                                  val get_name : 'tags this -> string
                                  val set_name : 'tags this -> string -> unit
                                  val get_transaction :
                                    'tags this -> IDBTransaction.t
                                  val add :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val clear :
                                    'tags this -> undefined IDBRequest.t
                                  val count :
                                    'tags this ->
                                      ?query:[ `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        -> unit -> float IDBRequest.t
                                  val createIndex' :
                                    'tags this ->
                                      name:string ->
                                        keyPath:[ `U1 of string 
                                                | `U2 of string list ]
                                          ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val delete :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> undefined IDBRequest.t
                                  val deleteIndex :
                                    'tags this -> name:string -> unit
                                  val get_ :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> any IDBRequest.t
                                  val getAll :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?count:float ->
                                          unit -> any list IDBRequest.t
                                  val getAllKeys :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?count:float ->
                                          unit ->
                                            IDBValidKey.t list IDBRequest.t
                                  val getKey :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> IDBValidKey.t option IDBRequest.t
                                  val index :
                                    'tags this -> name:string -> IDBIndex.t
                                  val openCursor :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursorWithValue.t option
                                              IDBRequest.t
                                  val openKeyCursor :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursor.t option IDBRequest.t
                                  val put :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val cast_from : 'tags this -> t
                                  val prototype : unit -> t
                                  val create : unit -> t
                                end =
                 struct
                   type t = [ `IDBObjectStore ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x1468 : Ojs.t) -> t_of_js x1468
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x1467 : t) -> t_to_js x1467
                   type tags = [ `IDBObjectStore ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `IDBObjectStore ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x1471 : Ojs.t) -> intf_of_js __tags_of_js x1471
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x1469 : __tags intf) ->
                         intf_to_js __tags_to_js x1469
                   let (createIndex :
                     'tags this ->
                       name:string ->
                         keyPath:[ `U1 of string 
                                 | `U2 of string Iterable.t_1 ]
                           ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x1481 : 'tags this) ->
                       fun ~name:(x1473 : string) ->
                         fun
                           ~keyPath:(x1474 :
                                      [ `U1 of string 
                                      | `U2 of string Iterable.t_1 ])
                           ->
                           fun ?options:(x1475 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x1483 = this_to_js Obj.magic x1481 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x1483 "createIndex")
                                    "apply"
                                    [|x1483;((let x1476 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x1476 "push"
                                                   [|(Ojs.string_to_js x1473)|]);
                                              ignore
                                                (Ojs.call x1476 "push"
                                                   [|((match x1474 with
                                                       | `U1 x1478 ->
                                                           Ojs.string_to_js
                                                             x1478
                                                       | `U2 x1479 ->
                                                           Iterable.t_1_to_js
                                                             Ojs.string_to_js
                                                             x1479))|]);
                                              (match x1475 with
                                               | Some x1477 ->
                                                   ignore
                                                     (Ojs.call x1476 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x1477)|])
                                               | None -> ());
                                              x1476))|])
                   let (get_autoIncrement : 'tags this -> bool) =
                     fun (x1484 : 'tags this) ->
                       Ojs.bool_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1484)
                            "autoIncrement")
                   let (get_indexNames : 'tags this -> DOMStringList.t) =
                     fun (x1486 : 'tags this) ->
                       DOMStringList.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1486)
                            "indexNames")
                   let (get_keyPath :
                     'tags this ->
                       [ `String of string  | `Other of string list ]
                         Primitive.t)
                     =
                     fun (x1488 : 'tags this) ->
                       Primitive.t_of_js
                         (fun (x1490 : Ojs.t) ->
                            let x1491 = x1490 in
                            match Ojs.string_of_js
                                    (Ojs.get_prop_ascii x1491 "dummy")
                            with
                            | "String" -> `String (Ojs.string_of_js x1491)
                            | "Other" ->
                                `Other
                                  (Ojs.list_of_js Ojs.string_of_js x1491)
                            | _ -> assert false)
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1488)
                            "keyPath")
                   let (get_name : 'tags this -> string) =
                     fun (x1493 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1493)
                            "name")
                   let (set_name : 'tags this -> string -> unit) =
                     fun (x1495 : 'tags this) ->
                       fun (x1496 : string) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x1495)
                           "name" (Ojs.string_to_js x1496)
                   let (get_transaction : 'tags this -> IDBTransaction.t) =
                     fun (x1498 : 'tags this) ->
                       IDBTransaction.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1498)
                            "transaction")
                   let (add :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x1504 : 'tags this) ->
                       fun ~value:(x1500 : any) ->
                         fun ?key:(x1501 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x1506 = this_to_js Obj.magic x1504 in
                                Ojs.call (Ojs.get_prop_ascii x1506 "add")
                                  "apply"
                                  [|x1506;((let x1502 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x1502 "push"
                                                 [|(any_to_js x1500)|]);
                                            (match x1501 with
                                             | Some x1503 ->
                                                 ignore
                                                   (Ojs.call x1502 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x1503)|])
                                             | None -> ());
                                            x1502))|])
                   let (clear : 'tags this -> undefined IDBRequest.t) =
                     fun (x1508 : 'tags this) ->
                       IDBRequest.t_of_js undefined_of_js
                         (Ojs.call (this_to_js Obj.magic x1508) "clear" [||])
                   let (count :
                     'tags this ->
                       ?query:[ `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         -> unit -> float IDBRequest.t)
                     =
                     fun (x1516 : 'tags this) ->
                       fun
                         ?query:(x1511 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun () ->
                           IDBRequest.t_of_js Ojs.float_of_js
                             (let x1518 = this_to_js Obj.magic x1516 in
                              Ojs.call (Ojs.get_prop_ascii x1518 "count")
                                "apply"
                                [|x1518;((let x1512 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x1511 with
                                           | Some x1513 ->
                                               ignore
                                                 (Ojs.call x1512 "push"
                                                    [|((match x1513 with
                                                        | `U1 x1514 ->
                                                            IDBValidKey.t_to_js
                                                              x1514
                                                        | `U2 x1515 ->
                                                            IDBKeyRange.t_to_js
                                                              x1515))|])
                                           | None -> ());
                                          x1512))|])
                   let (createIndex' :
                     'tags this ->
                       name:string ->
                         keyPath:[ `U1 of string  | `U2 of string list ] ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x1528 : 'tags this) ->
                       fun ~name:(x1520 : string) ->
                         fun
                           ~keyPath:(x1521 :
                                      [ `U1 of string  | `U2 of string list ])
                           ->
                           fun ?options:(x1522 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x1530 = this_to_js Obj.magic x1528 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x1530 "createIndex")
                                    "apply"
                                    [|x1530;((let x1523 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x1523 "push"
                                                   [|(Ojs.string_to_js x1520)|]);
                                              ignore
                                                (Ojs.call x1523 "push"
                                                   [|((match x1521 with
                                                       | `U1 x1525 ->
                                                           Ojs.string_to_js
                                                             x1525
                                                       | `U2 x1526 ->
                                                           Ojs.list_to_js
                                                             Ojs.string_to_js
                                                             x1526))|]);
                                              (match x1522 with
                                               | Some x1524 ->
                                                   ignore
                                                     (Ojs.call x1523 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x1524)|])
                                               | None -> ());
                                              x1523))|])
                   let (delete :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> undefined IDBRequest.t)
                     =
                     fun (x1534 : 'tags this) ->
                       fun
                         ~query:(x1531 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js undefined_of_js
                           (Ojs.call (this_to_js Obj.magic x1534) "delete"
                              [|((match x1531 with
                                  | `U1 x1532 -> IDBValidKey.t_to_js x1532
                                  | `U2 x1533 -> IDBKeyRange.t_to_js x1533))|])
                   let (deleteIndex : 'tags this -> name:string -> unit) =
                     fun (x1538 : 'tags this) ->
                       fun ~name:(x1537 : string) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x1538)
                              "deleteIndex" [|(Ojs.string_to_js x1537)|])
                   let (get_ :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> any IDBRequest.t)
                     =
                     fun (x1543 : 'tags this) ->
                       fun
                         ~query:(x1540 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js any_of_js
                           (Ojs.call (this_to_js Obj.magic x1543) "get"
                              [|((match x1540 with
                                  | `U1 x1541 -> IDBValidKey.t_to_js x1541
                                  | `U2 x1542 -> IDBKeyRange.t_to_js x1542))|])
                   let (getAll :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         -> ?count:float -> unit -> any list IDBRequest.t)
                     =
                     fun (x1553 : 'tags this) ->
                       fun
                         ?query:(x1546 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?count:(x1547 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1556 : Ojs.t) ->
                                  Ojs.list_of_js any_of_js x1556)
                               (let x1555 = this_to_js Obj.magic x1553 in
                                Ojs.call (Ojs.get_prop_ascii x1555 "getAll")
                                  "apply"
                                  [|x1555;((let x1548 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1546 with
                                             | Some x1550 ->
                                                 ignore
                                                   (Ojs.call x1548 "push"
                                                      [|((match x1550 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x1551 ->
                                                              IDBValidKey.t_to_js
                                                                x1551
                                                          | `U2 x1552 ->
                                                              IDBKeyRange.t_to_js
                                                                x1552))|])
                                             | None -> ());
                                            (match x1547 with
                                             | Some x1549 ->
                                                 ignore
                                                   (Ojs.call x1548 "push"
                                                      [|(Ojs.float_to_js
                                                           x1549)|])
                                             | None -> ());
                                            x1548))|])
                   let (getAllKeys :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?count:float ->
                           unit -> IDBValidKey.t list IDBRequest.t)
                     =
                     fun (x1565 : 'tags this) ->
                       fun
                         ?query:(x1558 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?count:(x1559 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1568 : Ojs.t) ->
                                  Ojs.list_of_js IDBValidKey.t_of_js x1568)
                               (let x1567 = this_to_js Obj.magic x1565 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x1567 "getAllKeys")
                                  "apply"
                                  [|x1567;((let x1560 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1558 with
                                             | Some x1562 ->
                                                 ignore
                                                   (Ojs.call x1560 "push"
                                                      [|((match x1562 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x1563 ->
                                                              IDBValidKey.t_to_js
                                                                x1563
                                                          | `U2 x1564 ->
                                                              IDBKeyRange.t_to_js
                                                                x1564))|])
                                             | None -> ());
                                            (match x1559 with
                                             | Some x1561 ->
                                                 ignore
                                                   (Ojs.call x1560 "push"
                                                      [|(Ojs.float_to_js
                                                           x1561)|])
                                             | None -> ());
                                            x1560))|])
                   let (getKey :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> IDBValidKey.t option IDBRequest.t)
                     =
                     fun (x1573 : 'tags this) ->
                       fun
                         ~query:(x1570 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js
                           (fun (x1575 : Ojs.t) ->
                              Ojs.option_of_js IDBValidKey.t_of_js x1575)
                           (Ojs.call (this_to_js Obj.magic x1573) "getKey"
                              [|((match x1570 with
                                  | `U1 x1571 -> IDBValidKey.t_to_js x1571
                                  | `U2 x1572 -> IDBKeyRange.t_to_js x1572))|])
                   let (index : 'tags this -> name:string -> IDBIndex.t) =
                     fun (x1578 : 'tags this) ->
                       fun ~name:(x1577 : string) ->
                         IDBIndex.t_of_js
                           (Ojs.call (this_to_js Obj.magic x1578) "index"
                              [|(Ojs.string_to_js x1577)|])
                   let (openCursor :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursorWithValue.t option IDBRequest.t)
                     =
                     fun (x1587 : 'tags this) ->
                       fun
                         ?query:(x1580 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?direction:(x1581 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1590 : Ojs.t) ->
                                  Ojs.option_of_js IDBCursorWithValue.t_of_js
                                    x1590)
                               (let x1589 = this_to_js Obj.magic x1587 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x1589 "openCursor")
                                  "apply"
                                  [|x1589;((let x1582 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1580 with
                                             | Some x1584 ->
                                                 ignore
                                                   (Ojs.call x1582 "push"
                                                      [|((match x1584 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x1585 ->
                                                              IDBValidKey.t_to_js
                                                                x1585
                                                          | `U2 x1586 ->
                                                              IDBKeyRange.t_to_js
                                                                x1586))|])
                                             | None -> ());
                                            (match x1581 with
                                             | Some x1583 ->
                                                 ignore
                                                   (Ojs.call x1582 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x1583)|])
                                             | None -> ());
                                            x1582))|])
                   let (openKeyCursor :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursor.t option IDBRequest.t)
                     =
                     fun (x1599 : 'tags this) ->
                       fun
                         ?query:(x1592 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?direction:(x1593 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1602 : Ojs.t) ->
                                  Ojs.option_of_js IDBCursor.t_of_js x1602)
                               (let x1601 = this_to_js Obj.magic x1599 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x1601 "openKeyCursor")
                                  "apply"
                                  [|x1601;((let x1594 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1592 with
                                             | Some x1596 ->
                                                 ignore
                                                   (Ojs.call x1594 "push"
                                                      [|((match x1596 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x1597 ->
                                                              IDBValidKey.t_to_js
                                                                x1597
                                                          | `U2 x1598 ->
                                                              IDBKeyRange.t_to_js
                                                                x1598))|])
                                             | None -> ());
                                            (match x1593 with
                                             | Some x1595 ->
                                                 ignore
                                                   (Ojs.call x1594 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x1595)|])
                                             | None -> ());
                                            x1594))|])
                   let (put :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x1608 : 'tags this) ->
                       fun ~value:(x1604 : any) ->
                         fun ?key:(x1605 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x1610 = this_to_js Obj.magic x1608 in
                                Ojs.call (Ojs.get_prop_ascii x1610 "put")
                                  "apply"
                                  [|x1610;((let x1606 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x1606 "push"
                                                 [|(any_to_js x1604)|]);
                                            (match x1605 with
                                             | Some x1607 ->
                                                 ignore
                                                   (Ojs.call x1606 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x1607)|])
                                             | None -> ());
                                            x1606))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            [||])
                 end and
                      IDBRequest:sig
                                   type 'T t =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                       intf
                                   type 'T t_1 = 'T t
                                   type t_0 = any t
                                   [@@@js.stop ]
                                   type 'T tags =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                   type 'T tags_1 = 'T tags
                                   type tags_0 = any tags
                                   [@@@js.start ]
                                   [@@@js.implem
                                     type 'T tags =
                                       [ `EventTarget  | `IDBRequest of 'T ]
                                     type 'T tags_1 = 'T tags
                                     type tags_0 = any tags]
                                   type ('tags, 'T) this =
                                     'tags intf constraint 'tags =
                                                 [> `IDBRequest of 'T ]
                                   val t_to_js :
                                     ('T -> Ojs.t) -> 'T t -> Ojs.t
                                   val t_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t
                                   val t_1_to_js :
                                     ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                                   val t_1_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                                   val t_0_to_js : t_0 -> Ojs.t
                                   val t_0_of_js : Ojs.t -> t_0
                                   val get_error :
                                     ('tags, 'T) this ->
                                       DOMException.t option
                                   val get_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option
                                   val set_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option -> unit
                                   val get_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option
                                   val set_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option -> unit
                                   val get_readyState :
                                     ('tags, 'T) this ->
                                       IDBRequestReadyState.t
                                   val get_result : ('tags, 'T) this -> 'T
                                   val get_source :
                                     ('tags, 'T) this ->
                                       (IDBCursor.t, IDBIndex.t,
                                         IDBObjectStore.t) union3
                                   val get_transaction :
                                     ('tags, 'T) this ->
                                       IDBTransaction.t option
                                   val addEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        AddEventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val addEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        AddEventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val removeEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        EventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val removeEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        EventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val cast_from : ('tags, 'T) this -> 'T t
                                   val prototype : unit -> t_0
                                   val create : unit -> t_0
                                 end =
                      struct
                        type 'T t =
                          [ `EventTarget  | `IDBRequest of 'T ] intf
                        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t
                          = fun _T -> Obj.magic
                        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
                          fun _T -> Obj.magic
                        type 'T t_1 = 'T t
                        let rec t_1_of_js :
                          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
                          __T) ->
                          fun (__T_of_js : Ojs.t -> __T) ->
                            fun (x1614 : Ojs.t) -> t_of_js __T_of_js x1614
                        and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                          = fun (type __T) ->
                          fun (__T_to_js : __T -> Ojs.t) ->
                            fun (x1612 : __T t) -> t_to_js __T_to_js x1612
                        type t_0 = any t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x1618 : Ojs.t) -> t_of_js any_of_js x1618
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x1616 : any t) -> t_to_js any_to_js x1616
                        type 'T tags = [ `EventTarget  | `IDBRequest of 'T ]
                        type 'T tags_1 = 'T tags
                        type tags_0 = any tags
                        type ('tags, 'T) this =
                          'tags intf constraint 'tags =
                                      [> `IDBRequest of 'T ]
                        let rec this_of_js :
                          'tags 'T .
                            (Ojs.t -> 'tags) ->
                              (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
                          = fun (type __tags) -> fun (type __T) ->
                          fun (__tags_of_js : Ojs.t -> __tags) ->
                            fun (__T_of_js : Ojs.t -> __T) ->
                              fun (x1622 : Ojs.t) ->
                                intf_of_js __tags_of_js x1622
                        and this_to_js :
                          'tags 'T .
                            ('tags -> Ojs.t) ->
                              ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
                          = fun (type __tags) -> fun (type __T) ->
                          fun (__tags_to_js : __tags -> Ojs.t) ->
                            fun (__T_to_js : __T -> Ojs.t) ->
                              fun (x1620 : __tags intf) ->
                                intf_to_js __tags_to_js x1620
                        let (get_error :
                          ('tags, 'T) this -> DOMException.t option) =
                          fun (x1624 : ('tags, 'T) this) ->
                            Ojs.option_of_js DOMException.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1624)
                                 "error")
                        let (get_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option)
                          =
                          fun (x1628 : ('tags, 'T) this) ->
                            Ojs.option_of_js
                              (fun (x1631 : Ojs.t) ->
                                 fun ~this:(x1632 : 'T t) ->
                                   fun ~ev:(x1634 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x1631
                                          [|(t_to_js Obj.magic x1632);(
                                            Event.t_to_js x1634)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1628)
                                 "onerror")
                        let (set_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option -> unit)
                          =
                          fun (x1635 : ('tags, 'T) this) ->
                            fun
                              (x1636 :
                                (this:'T t -> ev:Event.t -> any) option)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x1635)
                                "onerror"
                                (Ojs.option_to_js
                                   (fun
                                      (x1637 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x1638 : Ojs.t) ->
                                           fun (x1640 : Ojs.t) ->
                                             any_to_js
                                               (x1637
                                                  ~this:(t_of_js Obj.magic
                                                           x1638)
                                                  ~ev:(Event.t_of_js x1640))))
                                   x1636)
                        let (get_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option)
                          =
                          fun (x1643 : ('tags, 'T) this) ->
                            Ojs.option_of_js
                              (fun (x1646 : Ojs.t) ->
                                 fun ~this:(x1647 : 'T t) ->
                                   fun ~ev:(x1649 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x1646
                                          [|(t_to_js Obj.magic x1647);(
                                            Event.t_to_js x1649)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1643)
                                 "onsuccess")
                        let (set_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option -> unit)
                          =
                          fun (x1650 : ('tags, 'T) this) ->
                            fun
                              (x1651 :
                                (this:'T t -> ev:Event.t -> any) option)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x1650)
                                "onsuccess"
                                (Ojs.option_to_js
                                   (fun
                                      (x1652 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x1653 : Ojs.t) ->
                                           fun (x1655 : Ojs.t) ->
                                             any_to_js
                                               (x1652
                                                  ~this:(t_of_js Obj.magic
                                                           x1653)
                                                  ~ev:(Event.t_of_js x1655))))
                                   x1651)
                        let (get_readyState :
                          ('tags, 'T) this -> IDBRequestReadyState.t) =
                          fun (x1658 : ('tags, 'T) this) ->
                            IDBRequestReadyState.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1658)
                                 "readyState")
                        let (get_result : ('tags, 'T) this -> 'T) =
                          fun (x1661 : ('tags, 'T) this) ->
                            Obj.magic
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1661)
                                 "result")
                        let (get_source :
                          ('tags, 'T) this ->
                            (IDBCursor.t, IDBIndex.t, IDBObjectStore.t)
                              union3)
                          =
                          fun (x1664 : ('tags, 'T) this) ->
                            union3_of_js IDBCursor.t_of_js IDBIndex.t_of_js
                              IDBObjectStore.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1664)
                                 "source")
                        let (get_transaction :
                          ('tags, 'T) this -> IDBTransaction.t option) =
                          fun (x1670 : ('tags, 'T) this) ->
                            Ojs.option_of_js IDBTransaction.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1670)
                                 "transaction")
                        let (addEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:[ `U1 of bool 
                                         | `U2 of AddEventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x1684 : ('tags, 'T) this) ->
                            fun ~type_:(x1674 : 'K) ->
                              fun
                                ~listener:(x1675 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x1676 :
                                             [ `U1 of bool 
                                             | `U2 of
                                                 AddEventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1687 =
                                         this_to_js Obj.magic Obj.magic x1684 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1687
                                            "addEventListener") "apply"
                                         [|x1687;((let x1677 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1677 "push"
                                                        [|(Obj.magic x1674)|]);
                                                   ignore
                                                     (Ojs.call x1677 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x1681 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1683 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x1675
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1681)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1683))))|]);
                                                   (match x1676 with
                                                    | Some x1678 ->
                                                        ignore
                                                          (Ojs.call x1677
                                                             "push"
                                                             [|((match x1678
                                                                 with
                                                                 | `U1 x1679
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x1679
                                                                 | `U2 x1680
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1680))|])
                                                    | None -> ());
                                                   x1677))|])
                        let (addEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:[ `U1 of bool 
                                         | `U2 of AddEventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x1695 : ('tags, 'T) this) ->
                            fun ~type_:(x1688 : string) ->
                              fun
                                ~listener:(x1689 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x1690 :
                                             [ `U1 of bool 
                                             | `U2 of
                                                 AddEventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1698 =
                                         this_to_js Obj.magic Obj.magic x1695 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1698
                                            "addEventListener") "apply"
                                         [|x1698;((let x1691 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1691 "push"
                                                        [|(Ojs.string_to_js
                                                             x1688)|]);
                                                   ignore
                                                     (Ojs.call x1691 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x1689)|]);
                                                   (match x1690 with
                                                    | Some x1692 ->
                                                        ignore
                                                          (Ojs.call x1691
                                                             "push"
                                                             [|((match x1692
                                                                 with
                                                                 | `U1 x1693
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x1693
                                                                 | `U2 x1694
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1694))|])
                                                    | None -> ());
                                                   x1691))|])
                        let (removeEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:[ `U1 of bool 
                                         | `U2 of EventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x1709 : ('tags, 'T) this) ->
                            fun ~type_:(x1699 : 'K) ->
                              fun
                                ~listener:(x1700 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x1701 :
                                             [ `U1 of bool 
                                             | `U2 of EventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1712 =
                                         this_to_js Obj.magic Obj.magic x1709 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1712
                                            "removeEventListener") "apply"
                                         [|x1712;((let x1702 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1702 "push"
                                                        [|(Obj.magic x1699)|]);
                                                   ignore
                                                     (Ojs.call x1702 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x1706 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1708 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x1700
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1706)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1708))))|]);
                                                   (match x1701 with
                                                    | Some x1703 ->
                                                        ignore
                                                          (Ojs.call x1702
                                                             "push"
                                                             [|((match x1703
                                                                 with
                                                                 | `U1 x1704
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x1704
                                                                 | `U2 x1705
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x1705))|])
                                                    | None -> ());
                                                   x1702))|])
                        let (removeEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:[ `U1 of bool 
                                         | `U2 of EventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x1720 : ('tags, 'T) this) ->
                            fun ~type_:(x1713 : string) ->
                              fun
                                ~listener:(x1714 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x1715 :
                                             [ `U1 of bool 
                                             | `U2 of EventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1723 =
                                         this_to_js Obj.magic Obj.magic x1720 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1723
                                            "removeEventListener") "apply"
                                         [|x1723;((let x1716 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1716 "push"
                                                        [|(Ojs.string_to_js
                                                             x1713)|]);
                                                   ignore
                                                     (Ojs.call x1716 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x1714)|]);
                                                   (match x1715 with
                                                    | Some x1717 ->
                                                        ignore
                                                          (Ojs.call x1716
                                                             "push"
                                                             [|((match x1717
                                                                 with
                                                                 | `U1 x1718
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x1718
                                                                 | `U2 x1719
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x1719))|])
                                                    | None -> ());
                                                   x1716))|])
                        let cast_from = Obj.magic
                        let (prototype : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 "prototype")
                        let (create : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 [||])
                      end and
                           IDBTransaction:sig
                                            type t =
                                              [ `EventTarget 
                                              | `IDBTransaction ] intf
                                            type t_0 = t
                                            [@@@js.stop ]
                                            type tags =
                                              [ `EventTarget 
                                              | `IDBTransaction ]
                                            type tags_0 = tags
                                            [@@@js.start ]
                                            [@@@js.implem
                                              type tags =
                                                [ `EventTarget 
                                                | `IDBTransaction ]
                                              type tags_0 = tags]
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [>
                                                            `IDBTransaction ]
                                            val t_to_js : t -> Ojs.t
                                            val t_of_js : Ojs.t -> t
                                            val t_0_to_js : t_0 -> Ojs.t
                                            val t_0_of_js : Ojs.t -> t_0
                                            val get_db :
                                              'tags this -> IDBDatabase.t
                                            val get_error :
                                              'tags this ->
                                                DOMException.t option
                                            val get_mode :
                                              'tags this ->
                                                IDBTransactionMode.t
                                            val get_objectStoreNames :
                                              'tags this -> DOMStringList.t
                                            val get_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val get_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val get_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val abort : 'tags this -> unit
                                            val commit : 'tags this -> unit
                                            val objectStore :
                                              'tags this ->
                                                name:string ->
                                                  IDBObjectStore.t
                                            val addEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 AddEventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val addEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 AddEventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val removeEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 EventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val removeEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 EventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val cast_from : 'tags this -> t
                                            val prototype : unit -> t
                                            val create : unit -> t
                                          end =
                           struct
                             type t =
                               [ `EventTarget  | `IDBTransaction ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x1725 : Ojs.t) -> t_of_js x1725
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x1724 : t) -> t_to_js x1724
                             type tags = [ `EventTarget  | `IDBTransaction ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `IDBTransaction ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               = fun (type __tags) ->
                               fun (__tags_of_js : Ojs.t -> __tags) ->
                                 fun (x1728 : Ojs.t) ->
                                   intf_of_js __tags_of_js x1728
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               = fun (type __tags) ->
                               fun (__tags_to_js : __tags -> Ojs.t) ->
                                 fun (x1726 : __tags intf) ->
                                   intf_to_js __tags_to_js x1726
                             let (get_db : 'tags this -> IDBDatabase.t) =
                               fun (x1730 : 'tags this) ->
                                 IDBDatabase.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1730) "db")
                             let (get_error :
                               'tags this -> DOMException.t option) =
                               fun (x1732 : 'tags this) ->
                                 Ojs.option_of_js DOMException.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1732) "error")
                             let (get_mode :
                               'tags this -> IDBTransactionMode.t) =
                               fun (x1735 : 'tags this) ->
                                 IDBTransactionMode.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1735) "mode")
                             let (get_objectStoreNames :
                               'tags this -> DOMStringList.t) =
                               fun (x1737 : 'tags this) ->
                                 DOMStringList.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1737)
                                      "objectStoreNames")
                             let (get_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x1739 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x1741 : Ojs.t) ->
                                      fun ~this:(x1742 : t) ->
                                        fun ~ev:(x1743 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x1741
                                               [|(t_to_js x1742);(Event.t_to_js
                                                                    x1743)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1739) "onabort")
                             let (set_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x1744 : 'tags this) ->
                                 fun
                                   (x1745 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x1744) "onabort"
                                     (Ojs.option_to_js
                                        (fun
                                           (x1746 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x1747 : Ojs.t) ->
                                                fun (x1748 : Ojs.t) ->
                                                  any_to_js
                                                    (x1746
                                                       ~this:(t_of_js x1747)
                                                       ~ev:(Event.t_of_js
                                                              x1748)))) x1745)
                             let (get_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x1750 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x1752 : Ojs.t) ->
                                      fun ~this:(x1753 : t) ->
                                        fun ~ev:(x1754 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x1752
                                               [|(t_to_js x1753);(Event.t_to_js
                                                                    x1754)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1750)
                                      "oncomplete")
                             let (set_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x1755 : 'tags this) ->
                                 fun
                                   (x1756 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x1755)
                                     "oncomplete"
                                     (Ojs.option_to_js
                                        (fun
                                           (x1757 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x1758 : Ojs.t) ->
                                                fun (x1759 : Ojs.t) ->
                                                  any_to_js
                                                    (x1757
                                                       ~this:(t_of_js x1758)
                                                       ~ev:(Event.t_of_js
                                                              x1759)))) x1756)
                             let (get_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x1761 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x1763 : Ojs.t) ->
                                      fun ~this:(x1764 : t) ->
                                        fun ~ev:(x1765 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x1763
                                               [|(t_to_js x1764);(Event.t_to_js
                                                                    x1765)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1761) "onerror")
                             let (set_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x1766 : 'tags this) ->
                                 fun
                                   (x1767 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x1766) "onerror"
                                     (Ojs.option_to_js
                                        (fun
                                           (x1768 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x1769 : Ojs.t) ->
                                                fun (x1770 : Ojs.t) ->
                                                  any_to_js
                                                    (x1768
                                                       ~this:(t_of_js x1769)
                                                       ~ev:(Event.t_of_js
                                                              x1770)))) x1767)
                             let (abort : 'tags this -> unit) =
                               fun (x1772 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x1772)
                                      "abort" [||])
                             let (commit : 'tags this -> unit) =
                               fun (x1774 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x1774)
                                      "commit" [||])
                             let (objectStore :
                               'tags this -> name:string -> IDBObjectStore.t)
                               =
                               fun (x1777 : 'tags this) ->
                                 fun ~name:(x1776 : string) ->
                                   IDBObjectStore.t_of_js
                                     (Ojs.call (this_to_js Obj.magic x1777)
                                        "objectStore"
                                        [|(Ojs.string_to_js x1776)|])
                             let (addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of
                                                  AddEventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x1788 : 'tags this) ->
                                 fun ~type_:(x1779 : 'K) ->
                                   fun
                                     ~listener:(x1780 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x1781 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1790 =
                                              this_to_js Obj.magic x1788 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1790
                                                 "addEventListener") "apply"
                                              [|x1790;((let x1782 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1782
                                                             "push"
                                                             [|(Obj.magic
                                                                  x1779)|]);
                                                        ignore
                                                          (Ojs.call x1782
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x1786 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1787 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1780
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1786)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1787))))|]);
                                                        (match x1781 with
                                                         | Some x1783 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1782
                                                                  "push"
                                                                  [|((
                                                                    match x1783
                                                                    with
                                                                    | 
                                                                    `U1 x1784
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x1784
                                                                    | 
                                                                    `U2 x1785
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1785))|])
                                                         | None -> ());
                                                        x1782))|])
                             let (addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of
                                                  AddEventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x1798 : 'tags this) ->
                                 fun ~type_:(x1791 : string) ->
                                   fun
                                     ~listener:(x1792 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x1793 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1800 =
                                              this_to_js Obj.magic x1798 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1800
                                                 "addEventListener") "apply"
                                              [|x1800;((let x1794 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1794
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x1791)|]);
                                                        ignore
                                                          (Ojs.call x1794
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x1792)|]);
                                                        (match x1793 with
                                                         | Some x1795 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1794
                                                                  "push"
                                                                  [|((
                                                                    match x1795
                                                                    with
                                                                    | 
                                                                    `U1 x1796
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x1796
                                                                    | 
                                                                    `U2 x1797
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1797))|])
                                                         | None -> ());
                                                        x1794))|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of EventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x1810 : 'tags this) ->
                                 fun ~type_:(x1801 : 'K) ->
                                   fun
                                     ~listener:(x1802 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x1803 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1812 =
                                              this_to_js Obj.magic x1810 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1812
                                                 "removeEventListener")
                                              "apply"
                                              [|x1812;((let x1804 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1804
                                                             "push"
                                                             [|(Obj.magic
                                                                  x1801)|]);
                                                        ignore
                                                          (Ojs.call x1804
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x1808 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1809 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1802
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1808)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1809))))|]);
                                                        (match x1803 with
                                                         | Some x1805 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1804
                                                                  "push"
                                                                  [|((
                                                                    match x1805
                                                                    with
                                                                    | 
                                                                    `U1 x1806
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x1806
                                                                    | 
                                                                    `U2 x1807
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x1807))|])
                                                         | None -> ());
                                                        x1804))|])
                             let (removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of EventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x1820 : 'tags this) ->
                                 fun ~type_:(x1813 : string) ->
                                   fun
                                     ~listener:(x1814 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x1815 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1822 =
                                              this_to_js Obj.magic x1820 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1822
                                                 "removeEventListener")
                                              "apply"
                                              [|x1822;((let x1816 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1816
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x1813)|]);
                                                        ignore
                                                          (Ojs.call x1816
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x1814)|]);
                                                        (match x1815 with
                                                         | Some x1817 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1816
                                                                  "push"
                                                                  [|((
                                                                    match x1817
                                                                    with
                                                                    | 
                                                                    `U1 x1818
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x1818
                                                                    | 
                                                                    `U2 x1819
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x1819))|])
                                                         | None -> ());
                                                        x1816))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") [||])
                           end
module IDBOpenDBRequest =
  struct
    type t =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1824 : Ojs.t) -> t_of_js x1824
    and t_0_to_js : t_0 -> Ojs.t = fun (x1823 : t) -> t_to_js x1823
    type tags =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1827 : Ojs.t) -> intf_of_js __tags_of_js x1827
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1825 : __tags intf) -> intf_to_js __tags_to_js x1825
    let (get_onblocked : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x1829 : 'tags this) ->
        Ojs.option_of_js
          (fun (x1831 : Ojs.t) ->
             fun ~this:(x1832 : t) ->
               fun ~ev:(x1833 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1831 [|(t_to_js x1832);(Event.t_to_js x1833)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1829) "onblocked")
    let (set_onblocked :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x1834 : 'tags this) ->
        fun (x1835 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1834) "onblocked"
            (Ojs.option_to_js
               (fun (x1836 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1837 : Ojs.t) ->
                       fun (x1838 : Ojs.t) ->
                         any_to_js
                           (x1836 ~this:(t_of_js x1837)
                              ~ev:(Event.t_of_js x1838)))) x1835)
    let (get_onupgradeneeded :
      'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option) =
      fun (x1840 : 'tags this) ->
        Ojs.option_of_js
          (fun (x1842 : Ojs.t) ->
             fun ~this:(x1843 : t) ->
               fun ~ev:(x1844 : IDBVersionChangeEvent.t) ->
                 any_of_js
                   (Ojs.apply x1842
                      [|(t_to_js x1843);(IDBVersionChangeEvent.t_to_js x1844)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1840) "onupgradeneeded")
    let (set_onupgradeneeded :
      'tags this ->
        (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit)
      =
      fun (x1845 : 'tags this) ->
        fun (x1846 : (this:t -> ev:IDBVersionChangeEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1845) "onupgradeneeded"
            (Ojs.option_to_js
               (fun (x1847 : this:t -> ev:IDBVersionChangeEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1848 : Ojs.t) ->
                       fun (x1849 : Ojs.t) ->
                         any_to_js
                           (x1847 ~this:(t_of_js x1848)
                              ~ev:(IDBVersionChangeEvent.t_of_js x1849))))
               x1846)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x1860 : 'tags this) ->
        fun ~type_:(x1851 : 'K) ->
          fun ~listener:(x1852 : this:t -> ev:any -> any) ->
            fun
              ?options:(x1853 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x1862 = this_to_js Obj.magic x1860 in
                   Ojs.call (Ojs.get_prop_ascii x1862 "addEventListener")
                     "apply"
                     [|x1862;((let x1854 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1854 "push" [|(Obj.magic x1851)|]);
                               ignore
                                 (Ojs.call x1854 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1858 : Ojs.t) ->
                                            fun (x1859 : Ojs.t) ->
                                              any_to_js
                                                (x1852 ~this:(t_of_js x1858)
                                                   ~ev:(any_of_js x1859))))|]);
                               (match x1853 with
                                | Some x1855 ->
                                    ignore
                                      (Ojs.call x1854 "push"
                                         [|((match x1855 with
                                             | `U1 x1856 ->
                                                 Ojs.bool_to_js x1856
                                             | `U2 x1857 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x1857))|])
                                | None -> ());
                               x1854))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x1870 : 'tags this) ->
        fun ~type_:(x1863 : string) ->
          fun ~listener:(x1864 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x1865 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x1872 = this_to_js Obj.magic x1870 in
                   Ojs.call (Ojs.get_prop_ascii x1872 "addEventListener")
                     "apply"
                     [|x1872;((let x1866 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1866 "push"
                                    [|(Ojs.string_to_js x1863)|]);
                               ignore
                                 (Ojs.call x1866 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1864)|]);
                               (match x1865 with
                                | Some x1867 ->
                                    ignore
                                      (Ojs.call x1866 "push"
                                         [|((match x1867 with
                                             | `U1 x1868 ->
                                                 Ojs.bool_to_js x1868
                                             | `U2 x1869 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x1869))|])
                                | None -> ());
                               x1866))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x1882 : 'tags this) ->
        fun ~type_:(x1873 : 'K) ->
          fun ~listener:(x1874 : this:t -> ev:any -> any) ->
            fun
              ?options:(x1875 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x1884 = this_to_js Obj.magic x1882 in
                   Ojs.call (Ojs.get_prop_ascii x1884 "removeEventListener")
                     "apply"
                     [|x1884;((let x1876 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1876 "push" [|(Obj.magic x1873)|]);
                               ignore
                                 (Ojs.call x1876 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1880 : Ojs.t) ->
                                            fun (x1881 : Ojs.t) ->
                                              any_to_js
                                                (x1874 ~this:(t_of_js x1880)
                                                   ~ev:(any_of_js x1881))))|]);
                               (match x1875 with
                                | Some x1877 ->
                                    ignore
                                      (Ojs.call x1876 "push"
                                         [|((match x1877 with
                                             | `U1 x1878 ->
                                                 Ojs.bool_to_js x1878
                                             | `U2 x1879 ->
                                                 EventListenerOptions.t_to_js
                                                   x1879))|])
                                | None -> ());
                               x1876))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x1892 : 'tags this) ->
        fun ~type_:(x1885 : string) ->
          fun ~listener:(x1886 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x1887 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x1894 = this_to_js Obj.magic x1892 in
                   Ojs.call (Ojs.get_prop_ascii x1894 "removeEventListener")
                     "apply"
                     [|x1894;((let x1888 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1888 "push"
                                    [|(Ojs.string_to_js x1885)|]);
                               ignore
                                 (Ojs.call x1888 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1886)|]);
                               (match x1887 with
                                | Some x1889 ->
                                    ignore
                                      (Ojs.call x1888 "push"
                                         [|((match x1889 with
                                             | `U1 x1890 ->
                                                 Ojs.bool_to_js x1890
                                             | `U2 x1891 ->
                                                 EventListenerOptions.t_to_js
                                                   x1891))|])
                                | None -> ());
                               x1888))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest")
             [||])
  end
module IDBDatabaseInfo =
  struct
    type t = [ `IDBDatabaseInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1896 : Ojs.t) -> t_of_js x1896
    and t_0_to_js : t_0 -> Ojs.t = fun (x1895 : t) -> t_to_js x1895
    type tags = [ `IDBDatabaseInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1899 : Ojs.t) -> intf_of_js __tags_of_js x1899
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1897 : __tags intf) -> intf_to_js __tags_to_js x1897
    let (get_name : 'tags this -> string) =
      fun (x1901 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1901) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x1903 : 'tags this) ->
        fun (x1904 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1903) "name"
            (Ojs.string_to_js x1904)
    let (get_version : 'tags this -> float) =
      fun (x1906 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1906) "version")
    let (set_version : 'tags this -> float -> unit) =
      fun (x1908 : 'tags this) ->
        fun (x1909 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1908) "version"
            (Ojs.float_to_js x1909)
    let (create : name:string -> version:float -> unit -> t) =
      fun ~name:(x1911 : string) ->
        fun ~version:(x1912 : float) ->
          fun () ->
            let x1913 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1913 "name" (Ojs.string_to_js x1911);
            Ojs.set_prop_ascii x1913 "version" (Ojs.float_to_js x1912);
            t_of_js x1913
    let cast_from = Obj.magic
  end
module IndexedDBStatic =
  struct
    let (cmp : first:any -> second:any -> float) =
      fun ~first:(x1914 : any) ->
        fun ~second:(x1915 : any) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "cmp"
               [|(any_to_js x1914);(any_to_js x1915)|])
    let (databases : unit -> IDBDatabaseInfo.t list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x1916 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x1916)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "databases"
             [||])
    let (deleteDatabase : string -> IDBOpenDBRequest.t) =
      fun (x1918 : string) ->
        IDBOpenDBRequest.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB")
             "deleteDatabase" [|(Ojs.string_to_js x1918)|])
    let (open_ : name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun ~name:(x1919 : string) ->
        fun ?version:(x1920 : float option) ->
          fun () ->
            IDBOpenDBRequest.t_of_js
              (let x1923 = Ojs.get_prop_ascii Ojs.global "indexedDB" in
               Ojs.call (Ojs.get_prop_ascii x1923 "open") "apply"
                 [|x1923;((let x1921 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1921 "push"
                                [|(Ojs.string_to_js x1919)|]);
                           (match x1920 with
                            | Some x1922 ->
                                ignore
                                  (Ojs.call x1921 "push"
                                     [|(Ojs.float_to_js x1922)|])
                            | None -> ());
                           x1921))|])
  end
module FontFaceSetLoadStatus =
  struct
    type t = [ `L_s100_loaded  | `L_s102_loading ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1925 : Ojs.t) ->
        let x1926 = x1925 in
        match Ojs.string_of_js x1926 with
        | "loaded" -> `L_s100_loaded
        | "loading" -> `L_s102_loading
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1924 : [ `L_s100_loaded  | `L_s102_loading ]) ->
        match x1924 with
        | `L_s100_loaded -> Ojs.string_to_js "loaded"
        | `L_s102_loading -> Ojs.string_to_js "loading"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1928 : Ojs.t) -> t_of_js x1928
    and t_0_to_js : t_0 -> Ojs.t = fun (x1927 : t) -> t_to_js x1927
  end
module FontFaceLoadStatus =
  struct
    type t =
      [ `L_s100_loaded  | `L_s102_loading  | `L_s197_unloaded 
      | `L_s67_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1930 : Ojs.t) ->
        let x1931 = x1930 in
        match Ojs.string_of_js x1931 with
        | "loaded" -> `L_s100_loaded
        | "loading" -> `L_s102_loading
        | "unloaded" -> `L_s197_unloaded
        | "error" -> `L_s67_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1929 :
          [ `L_s100_loaded  | `L_s102_loading  | `L_s197_unloaded 
          | `L_s67_error ])
        ->
        match x1929 with
        | `L_s100_loaded -> Ojs.string_to_js "loaded"
        | `L_s102_loading -> Ojs.string_to_js "loading"
        | `L_s197_unloaded -> Ojs.string_to_js "unloaded"
        | `L_s67_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1933 : Ojs.t) -> t_of_js x1933
    and t_0_to_js : t_0 -> Ojs.t = fun (x1932 : t) -> t_to_js x1932
  end
module FontFaceDescriptors =
  struct
    type t = [ `FontFaceDescriptors ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1935 : Ojs.t) -> t_of_js x1935
    and t_0_to_js : t_0 -> Ojs.t = fun (x1934 : t) -> t_to_js x1934
    type tags = [ `FontFaceDescriptors ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceDescriptors ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1938 : Ojs.t) -> intf_of_js __tags_of_js x1938
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1936 : __tags intf) -> intf_to_js __tags_to_js x1936
    let (get_display : 'tags this -> string) =
      fun (x1940 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1940) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x1942 : 'tags this) ->
        fun (x1943 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1942) "display"
            (Ojs.string_to_js x1943)
    let (get_featureSettings : 'tags this -> string) =
      fun (x1945 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1945) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x1947 : 'tags this) ->
        fun (x1948 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1947) "featureSettings"
            (Ojs.string_to_js x1948)
    let (get_stretch : 'tags this -> string) =
      fun (x1950 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1950) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x1952 : 'tags this) ->
        fun (x1953 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1952) "stretch"
            (Ojs.string_to_js x1953)
    let (get_style : 'tags this -> string) =
      fun (x1955 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1955) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x1957 : 'tags this) ->
        fun (x1958 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1957) "style"
            (Ojs.string_to_js x1958)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x1960 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1960) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x1962 : 'tags this) ->
        fun (x1963 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1962) "unicodeRange"
            (Ojs.string_to_js x1963)
    let (get_variant : 'tags this -> string) =
      fun (x1965 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1965) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x1967 : 'tags this) ->
        fun (x1968 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1967) "variant"
            (Ojs.string_to_js x1968)
    let (get_weight : 'tags this -> string) =
      fun (x1970 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1970) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x1972 : 'tags this) ->
        fun (x1973 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1972) "weight"
            (Ojs.string_to_js x1973)
    let (create :
      display:string ->
        featureSettings:string ->
          stretch:string ->
            style:string ->
              unicodeRange:string ->
                variant:string -> weight:string -> unit -> t)
      =
      fun ~display:(x1975 : string) ->
        fun ~featureSettings:(x1976 : string) ->
          fun ~stretch:(x1977 : string) ->
            fun ~style:(x1978 : string) ->
              fun ~unicodeRange:(x1979 : string) ->
                fun ~variant:(x1980 : string) ->
                  fun ~weight:(x1981 : string) ->
                    fun () ->
                      let x1982 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x1982 "display"
                        (Ojs.string_to_js x1975);
                      Ojs.set_prop_ascii x1982 "featureSettings"
                        (Ojs.string_to_js x1976);
                      Ojs.set_prop_ascii x1982 "stretch"
                        (Ojs.string_to_js x1977);
                      Ojs.set_prop_ascii x1982 "style"
                        (Ojs.string_to_js x1978);
                      Ojs.set_prop_ascii x1982 "unicodeRange"
                        (Ojs.string_to_js x1979);
                      Ojs.set_prop_ascii x1982 "variant"
                        (Ojs.string_to_js x1980);
                      Ojs.set_prop_ascii x1982 "weight"
                        (Ojs.string_to_js x1981);
                      t_of_js x1982
    let cast_from = Obj.magic
  end
module BinaryData =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x1986 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x1986
    and t_to_js : t -> Ojs.t =
      fun (x1983 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x1983
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1990 : Ojs.t) -> t_of_js x1990
    and t_0_to_js : t_0 -> Ojs.t = fun (x1989 : t) -> t_to_js x1989
  end
module FontFace =
  struct
    type t = [ `FontFace ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1992 : Ojs.t) -> t_of_js x1992
    and t_0_to_js : t_0 -> Ojs.t = fun (x1991 : t) -> t_to_js x1991
    type tags = [ `FontFace ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1995 : Ojs.t) -> intf_of_js __tags_of_js x1995
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1993 : __tags intf) -> intf_to_js __tags_to_js x1993
    let (get_ascentOverride : 'tags this -> string) =
      fun (x1997 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1997) "ascentOverride")
    let (set_ascentOverride : 'tags this -> string -> unit) =
      fun (x1999 : 'tags this) ->
        fun (x2000 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1999) "ascentOverride"
            (Ojs.string_to_js x2000)
    let (get_descentOverride : 'tags this -> string) =
      fun (x2002 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2002) "descentOverride")
    let (set_descentOverride : 'tags this -> string -> unit) =
      fun (x2004 : 'tags this) ->
        fun (x2005 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2004) "descentOverride"
            (Ojs.string_to_js x2005)
    let (get_display : 'tags this -> string) =
      fun (x2007 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2007) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x2009 : 'tags this) ->
        fun (x2010 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2009) "display"
            (Ojs.string_to_js x2010)
    let (get_family : 'tags this -> string) =
      fun (x2012 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2012) "family")
    let (set_family : 'tags this -> string -> unit) =
      fun (x2014 : 'tags this) ->
        fun (x2015 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2014) "family"
            (Ojs.string_to_js x2015)
    let (get_featureSettings : 'tags this -> string) =
      fun (x2017 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2017) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x2019 : 'tags this) ->
        fun (x2020 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2019) "featureSettings"
            (Ojs.string_to_js x2020)
    let (get_lineGapOverride : 'tags this -> string) =
      fun (x2022 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2022) "lineGapOverride")
    let (set_lineGapOverride : 'tags this -> string -> unit) =
      fun (x2024 : 'tags this) ->
        fun (x2025 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2024) "lineGapOverride"
            (Ojs.string_to_js x2025)
    let (get_loaded : 'tags this -> t Promise.t_1) =
      fun (x2027 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2027) "loaded")
    let (get_status : 'tags this -> FontFaceLoadStatus.t) =
      fun (x2030 : 'tags this) ->
        FontFaceLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2030) "status")
    let (get_stretch : 'tags this -> string) =
      fun (x2032 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2032) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x2034 : 'tags this) ->
        fun (x2035 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2034) "stretch"
            (Ojs.string_to_js x2035)
    let (get_style : 'tags this -> string) =
      fun (x2037 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2037) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x2039 : 'tags this) ->
        fun (x2040 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2039) "style"
            (Ojs.string_to_js x2040)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x2042 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2042) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x2044 : 'tags this) ->
        fun (x2045 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2044) "unicodeRange"
            (Ojs.string_to_js x2045)
    let (get_variant : 'tags this -> string) =
      fun (x2047 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2047) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x2049 : 'tags this) ->
        fun (x2050 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2049) "variant"
            (Ojs.string_to_js x2050)
    let (get_variationSettings : 'tags this -> string) =
      fun (x2052 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2052)
             "variationSettings")
    let (set_variationSettings : 'tags this -> string -> unit) =
      fun (x2054 : 'tags this) ->
        fun (x2055 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2054) "variationSettings"
            (Ojs.string_to_js x2055)
    let (get_weight : 'tags this -> string) =
      fun (x2057 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2057) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x2059 : 'tags this) ->
        fun (x2060 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2059) "weight"
            (Ojs.string_to_js x2060)
    let (load : 'tags this -> t Promise.t_1) =
      fun (x2062 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x2062) "load" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFace")
             "prototype")
    let (create :
      family:string ->
        source:[ `U1 of string  | `U2 of BinaryData.t ] ->
          ?descriptors:FontFaceDescriptors.t -> unit -> t)
      =
      fun ~family:(x2065 : string) ->
        fun ~source:(x2066 : [ `U1 of string  | `U2 of BinaryData.t ]) ->
          fun ?descriptors:(x2067 : FontFaceDescriptors.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "FontFace")
                   (let x2068 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2068 "push" [|(Ojs.string_to_js x2065)|]);
                    ignore
                      (Ojs.call x2068 "push"
                         [|((match x2066 with
                             | `U1 x2070 -> Ojs.string_to_js x2070
                             | `U2 x2071 -> BinaryData.t_to_js x2071))|]);
                    (match x2067 with
                     | Some x2069 ->
                         ignore
                           (Ojs.call x2068 "push"
                              [|(FontFaceDescriptors.t_to_js x2069)|])
                     | None -> ());
                    x2068))
  end
module FontFaceSet =
  struct
    type t = [ `EventTarget  | `FontFaceSet ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2073 : Ojs.t) -> t_of_js x2073
    and t_0_to_js : t_0 -> Ojs.t = fun (x2072 : t) -> t_to_js x2072
    type tags = [ `EventTarget  | `FontFaceSet ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSet ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2076 : Ojs.t) -> intf_of_js __tags_of_js x2076
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2074 : __tags intf) -> intf_to_js __tags_to_js x2074
    let (get_onloading : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x2078 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2080 : Ojs.t) ->
             fun ~this:(x2081 : t) ->
               fun ~ev:(x2082 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2080 [|(t_to_js x2081);(Event.t_to_js x2082)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2078) "onloading")
    let (set_onloading :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x2083 : 'tags this) ->
        fun (x2084 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2083) "onloading"
            (Ojs.option_to_js
               (fun (x2085 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2086 : Ojs.t) ->
                       fun (x2087 : Ojs.t) ->
                         any_to_js
                           (x2085 ~this:(t_of_js x2086)
                              ~ev:(Event.t_of_js x2087)))) x2084)
    let (get_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x2089 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2091 : Ojs.t) ->
             fun ~this:(x2092 : t) ->
               fun ~ev:(x2093 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2091 [|(t_to_js x2092);(Event.t_to_js x2093)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2089) "onloadingdone")
    let (set_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x2094 : 'tags this) ->
        fun (x2095 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2094) "onloadingdone"
            (Ojs.option_to_js
               (fun (x2096 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2097 : Ojs.t) ->
                       fun (x2098 : Ojs.t) ->
                         any_to_js
                           (x2096 ~this:(t_of_js x2097)
                              ~ev:(Event.t_of_js x2098)))) x2095)
    let (get_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x2100 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2102 : Ojs.t) ->
             fun ~this:(x2103 : t) ->
               fun ~ev:(x2104 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2102 [|(t_to_js x2103);(Event.t_to_js x2104)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2100) "onloadingerror")
    let (set_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x2105 : 'tags this) ->
        fun (x2106 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2105) "onloadingerror"
            (Ojs.option_to_js
               (fun (x2107 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2108 : Ojs.t) ->
                       fun (x2109 : Ojs.t) ->
                         any_to_js
                           (x2107 ~this:(t_of_js x2108)
                              ~ev:(Event.t_of_js x2109)))) x2106)
    let (get_ready : 'tags this -> t Promise.t_1) =
      fun (x2111 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2111) "ready")
    let (get_status : 'tags this -> FontFaceSetLoadStatus.t) =
      fun (x2114 : 'tags this) ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2114) "status")
    let (check : 'tags this -> font:string -> ?text:string -> unit -> bool) =
      fun (x2120 : 'tags this) ->
        fun ~font:(x2116 : string) ->
          fun ?text:(x2117 : string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2122 = this_to_js Obj.magic x2120 in
                 Ojs.call (Ojs.get_prop_ascii x2122 "check") "apply"
                   [|x2122;((let x2118 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2118 "push"
                                  [|(Ojs.string_to_js x2116)|]);
                             (match x2117 with
                              | Some x2119 ->
                                  ignore
                                    (Ojs.call x2118 "push"
                                       [|(Ojs.string_to_js x2119)|])
                              | None -> ());
                             x2118))|])
    let (load :
      'tags this ->
        font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1)
      =
      fun (x2127 : 'tags this) ->
        fun ~font:(x2123 : string) ->
          fun ?text:(x2124 : string option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x2130 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x2130)
                (let x2129 = this_to_js Obj.magic x2127 in
                 Ojs.call (Ojs.get_prop_ascii x2129 "load") "apply"
                   [|x2129;((let x2125 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2125 "push"
                                  [|(Ojs.string_to_js x2123)|]);
                             (match x2124 with
                              | Some x2126 ->
                                  ignore
                                    (Ojs.call x2125 "push"
                                       [|(Ojs.string_to_js x2126)|])
                              | None -> ());
                             x2125))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x2139 : 'tags this) ->
        fun
          ~callbackfn:(x2132 :
                        value:FontFace.t ->
                          key:FontFace.t -> parent:t -> unit)
          ->
          fun ?thisArg:(x2133 : any option) ->
            fun () ->
              ignore
                (let x2141 = this_to_js Obj.magic x2139 in
                 Ojs.call (Ojs.get_prop_ascii x2141 "forEach") "apply"
                   [|x2141;((let x2134 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2134 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2136 : Ojs.t) ->
                                          fun (x2137 : Ojs.t) ->
                                            fun (x2138 : Ojs.t) ->
                                              x2132
                                                ~value:(FontFace.t_of_js
                                                          x2136)
                                                ~key:(FontFace.t_of_js x2137)
                                                ~parent:(t_of_js x2138)))|]);
                             (match x2133 with
                              | Some x2135 ->
                                  ignore
                                    (Ojs.call x2134 "push"
                                       [|(any_to_js x2135)|])
                              | None -> ());
                             x2134))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2151 : 'tags this) ->
        fun ~type_:(x2142 : 'K) ->
          fun ~listener:(x2143 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2144 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2153 = this_to_js Obj.magic x2151 in
                   Ojs.call (Ojs.get_prop_ascii x2153 "addEventListener")
                     "apply"
                     [|x2153;((let x2145 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2145 "push" [|(Obj.magic x2142)|]);
                               ignore
                                 (Ojs.call x2145 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2149 : Ojs.t) ->
                                            fun (x2150 : Ojs.t) ->
                                              any_to_js
                                                (x2143 ~this:(t_of_js x2149)
                                                   ~ev:(any_of_js x2150))))|]);
                               (match x2144 with
                                | Some x2146 ->
                                    ignore
                                      (Ojs.call x2145 "push"
                                         [|((match x2146 with
                                             | `U1 x2147 ->
                                                 Ojs.bool_to_js x2147
                                             | `U2 x2148 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x2148))|])
                                | None -> ());
                               x2145))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2161 : 'tags this) ->
        fun ~type_:(x2154 : string) ->
          fun ~listener:(x2155 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2156 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2163 = this_to_js Obj.magic x2161 in
                   Ojs.call (Ojs.get_prop_ascii x2163 "addEventListener")
                     "apply"
                     [|x2163;((let x2157 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2157 "push"
                                    [|(Ojs.string_to_js x2154)|]);
                               ignore
                                 (Ojs.call x2157 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2155)|]);
                               (match x2156 with
                                | Some x2158 ->
                                    ignore
                                      (Ojs.call x2157 "push"
                                         [|((match x2158 with
                                             | `U1 x2159 ->
                                                 Ojs.bool_to_js x2159
                                             | `U2 x2160 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x2160))|])
                                | None -> ());
                               x2157))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2173 : 'tags this) ->
        fun ~type_:(x2164 : 'K) ->
          fun ~listener:(x2165 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2166 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2175 = this_to_js Obj.magic x2173 in
                   Ojs.call (Ojs.get_prop_ascii x2175 "removeEventListener")
                     "apply"
                     [|x2175;((let x2167 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2167 "push" [|(Obj.magic x2164)|]);
                               ignore
                                 (Ojs.call x2167 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2171 : Ojs.t) ->
                                            fun (x2172 : Ojs.t) ->
                                              any_to_js
                                                (x2165 ~this:(t_of_js x2171)
                                                   ~ev:(any_of_js x2172))))|]);
                               (match x2166 with
                                | Some x2168 ->
                                    ignore
                                      (Ojs.call x2167 "push"
                                         [|((match x2168 with
                                             | `U1 x2169 ->
                                                 Ojs.bool_to_js x2169
                                             | `U2 x2170 ->
                                                 EventListenerOptions.t_to_js
                                                   x2170))|])
                                | None -> ());
                               x2167))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2183 : 'tags this) ->
        fun ~type_:(x2176 : string) ->
          fun ~listener:(x2177 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2178 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2185 = this_to_js Obj.magic x2183 in
                   Ojs.call (Ojs.get_prop_ascii x2185 "removeEventListener")
                     "apply"
                     [|x2185;((let x2179 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2179 "push"
                                    [|(Ojs.string_to_js x2176)|]);
                               ignore
                                 (Ojs.call x2179 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2177)|]);
                               (match x2178 with
                                | Some x2180 ->
                                    ignore
                                      (Ojs.call x2179 "push"
                                         [|((match x2180 with
                                             | `U1 x2181 ->
                                                 Ojs.bool_to_js x2181
                                             | `U2 x2182 ->
                                                 EventListenerOptions.t_to_js
                                                   x2182))|])
                                | None -> ());
                               x2179))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             "prototype")
    let (create : FontFace.t list -> t) =
      fun (x2186 : FontFace.t list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             [|(Ojs.list_to_js FontFace.t_to_js x2186)|])
  end
module FontsStatic =
  struct
    let (onloading :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x2188 : Ojs.t) ->
             fun ~this:(x2189 : FontFaceSet.t) ->
               fun ~ev:(x2190 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2188
                      [|(FontFaceSet.t_to_js x2189);(Event.t_to_js x2190)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloading")
    let (onloadingdone :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x2191 : Ojs.t) ->
             fun ~this:(x2192 : FontFaceSet.t) ->
               fun ~ev:(x2193 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2191
                      [|(FontFaceSet.t_to_js x2192);(Event.t_to_js x2193)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingdone")
    let (onloadingerror :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x2194 : Ojs.t) ->
             fun ~this:(x2195 : FontFaceSet.t) ->
               fun ~ev:(x2196 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2194
                      [|(FontFaceSet.t_to_js x2195);(Event.t_to_js x2196)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingerror")
    let (ready : unit -> FontFaceSet.t Promise.t_1) =
      fun () ->
        Promise.t_1_of_js FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts") "ready")
    let (status : unit -> FontFaceSetLoadStatus.t) =
      fun () ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "status")
    let (check : font:string -> ?text:string -> unit -> bool) =
      fun ~font:(x2198 : string) ->
        fun ?text:(x2199 : string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x2202 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2202 "check") "apply"
                 [|x2202;((let x2200 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2200 "push"
                                [|(Ojs.string_to_js x2198)|]);
                           (match x2199 with
                            | Some x2201 ->
                                ignore
                                  (Ojs.call x2200 "push"
                                     [|(Ojs.string_to_js x2201)|])
                            | None -> ());
                           x2200))|])
    let (load :
      font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1) =
      fun ~font:(x2203 : string) ->
        fun ?text:(x2204 : string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x2208 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x2208)
              (let x2207 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2207 "load") "apply"
                 [|x2207;((let x2205 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2205 "push"
                                [|(Ojs.string_to_js x2203)|]);
                           (match x2204 with
                            | Some x2206 ->
                                ignore
                                  (Ojs.call x2205 "push"
                                     [|(Ojs.string_to_js x2206)|])
                            | None -> ());
                           x2205))|])
    let (forEach :
      callbackfn:(value:FontFace.t ->
                    key:FontFace.t -> parent:FontFaceSet.t -> unit)
        -> ?thisArg:any -> unit -> unit)
      =
      fun
        ~callbackfn:(x2210 :
                      value:FontFace.t ->
                        key:FontFace.t -> parent:FontFaceSet.t -> unit)
        ->
        fun ?thisArg:(x2211 : any option) ->
          fun () ->
            ignore
              (let x2217 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2217 "forEach") "apply"
                 [|x2217;((let x2212 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2212 "push"
                                [|(Ojs.fun_to_js 3
                                     (fun (x2214 : Ojs.t) ->
                                        fun (x2215 : Ojs.t) ->
                                          fun (x2216 : Ojs.t) ->
                                            x2210
                                              ~value:(FontFace.t_of_js x2214)
                                              ~key:(FontFace.t_of_js x2215)
                                              ~parent:(FontFaceSet.t_of_js
                                                         x2216)))|]);
                           (match x2211 with
                            | Some x2213 ->
                                ignore
                                  (Ojs.call x2212 "push"
                                     [|(any_to_js x2213)|])
                            | None -> ());
                           x2212))|])
    let (addEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x2218 : 'K) ->
        fun ~listener:(x2219 : this:FontFaceSet.t -> ev:any -> any) ->
          fun
            ?options:(x2220 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x2227 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2227 "addEventListener")
                   "apply"
                   [|x2227;((let x2221 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2221 "push" [|(Obj.magic x2218)|]);
                             ignore
                               (Ojs.call x2221 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2225 : Ojs.t) ->
                                          fun (x2226 : Ojs.t) ->
                                            any_to_js
                                              (x2219
                                                 ~this:(FontFaceSet.t_of_js
                                                          x2225)
                                                 ~ev:(any_of_js x2226))))|]);
                             (match x2220 with
                              | Some x2222 ->
                                  ignore
                                    (Ojs.call x2221 "push"
                                       [|((match x2222 with
                                           | `U1 x2223 ->
                                               Ojs.bool_to_js x2223
                                           | `U2 x2224 ->
                                               AddEventListenerOptions.t_to_js
                                                 x2224))|])
                              | None -> ());
                             x2221))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x2228 : string) ->
        fun ~listener:(x2229 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x2230 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x2235 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2235 "addEventListener")
                   "apply"
                   [|x2235;((let x2231 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2231 "push"
                                  [|(Ojs.string_to_js x2228)|]);
                             ignore
                               (Ojs.call x2231 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x2229)|]);
                             (match x2230 with
                              | Some x2232 ->
                                  ignore
                                    (Ojs.call x2231 "push"
                                       [|((match x2232 with
                                           | `U1 x2233 ->
                                               Ojs.bool_to_js x2233
                                           | `U2 x2234 ->
                                               AddEventListenerOptions.t_to_js
                                                 x2234))|])
                              | None -> ());
                             x2231))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x2236 : 'K) ->
        fun ~listener:(x2237 : this:FontFaceSet.t -> ev:any -> any) ->
          fun
            ?options:(x2238 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x2245 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2245 "removeEventListener")
                   "apply"
                   [|x2245;((let x2239 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2239 "push" [|(Obj.magic x2236)|]);
                             ignore
                               (Ojs.call x2239 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2243 : Ojs.t) ->
                                          fun (x2244 : Ojs.t) ->
                                            any_to_js
                                              (x2237
                                                 ~this:(FontFaceSet.t_of_js
                                                          x2243)
                                                 ~ev:(any_of_js x2244))))|]);
                             (match x2238 with
                              | Some x2240 ->
                                  ignore
                                    (Ojs.call x2239 "push"
                                       [|((match x2240 with
                                           | `U1 x2241 ->
                                               Ojs.bool_to_js x2241
                                           | `U2 x2242 ->
                                               EventListenerOptions.t_to_js
                                                 x2242))|])
                              | None -> ());
                             x2239))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x2246 : string) ->
        fun ~listener:(x2247 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x2248 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x2253 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2253 "removeEventListener")
                   "apply"
                   [|x2253;((let x2249 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2249 "push"
                                  [|(Ojs.string_to_js x2246)|]);
                             ignore
                               (Ojs.call x2249 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x2247)|]);
                             (match x2248 with
                              | Some x2250 ->
                                  ignore
                                    (Ojs.call x2249 "push"
                                       [|((match x2250 with
                                           | `U1 x2251 ->
                                               Ojs.bool_to_js x2251
                                           | `U2 x2252 ->
                                               EventListenerOptions.t_to_js
                                                 x2252))|])
                              | None -> ());
                             x2249))|])
  end
module Algorithm =
  struct
    type t = [ `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2255 : Ojs.t) -> t_of_js x2255
    and t_0_to_js : t_0 -> Ojs.t = fun (x2254 : t) -> t_to_js x2254
    type tags = [ `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Algorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2258 : Ojs.t) -> intf_of_js __tags_of_js x2258
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2256 : __tags intf) -> intf_to_js __tags_to_js x2256
    let (get_name : 'tags this -> string) =
      fun (x2260 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2260) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2262 : 'tags this) ->
        fun (x2263 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2262) "name"
            (Ojs.string_to_js x2263)
    let (create : name:string -> unit -> t) =
      fun ~name:(x2265 : string) ->
        fun () ->
          let x2266 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2266 "name" (Ojs.string_to_js x2265);
          t_of_js x2266
    let cast_from = Obj.magic
  end
module RsaPssParams =
  struct
    type t = [ `Algorithm  | `RsaPssParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2268 : Ojs.t) -> t_of_js x2268
    and t_0_to_js : t_0 -> Ojs.t = fun (x2267 : t) -> t_to_js x2267
    type tags = [ `Algorithm  | `RsaPssParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaPssParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2271 : Ojs.t) -> intf_of_js __tags_of_js x2271
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2269 : __tags intf) -> intf_to_js __tags_to_js x2269
    let (get_saltLength : 'tags this -> float) =
      fun (x2273 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2273) "saltLength")
    let (set_saltLength : 'tags this -> float -> unit) =
      fun (x2275 : 'tags this) ->
        fun (x2276 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2275) "saltLength"
            (Ojs.float_to_js x2276)
    let (create : saltLength:float -> unit -> t) =
      fun ~saltLength:(x2278 : float) ->
        fun () ->
          let x2279 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2279 "saltLength" (Ojs.float_to_js x2278);
          t_of_js x2279
    let cast_from = Obj.magic
  end
module RsaOaepParams =
  struct
    type t = [ `Algorithm  | `RsaOaepParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2281 : Ojs.t) -> t_of_js x2281
    and t_0_to_js : t_0 -> Ojs.t = fun (x2280 : t) -> t_to_js x2280
    type tags = [ `Algorithm  | `RsaOaepParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOaepParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2284 : Ojs.t) -> intf_of_js __tags_of_js x2284
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2282 : __tags intf) -> intf_to_js __tags_to_js x2282
    let (get_label : 'tags this -> BufferSource.t) =
      fun (x2286 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2286) "label")
    let (set_label : 'tags this -> BufferSource.t -> unit) =
      fun (x2288 : 'tags this) ->
        fun (x2289 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2288) "label"
            (BufferSource.t_to_js x2289)
    let (create : label:BufferSource.t -> unit -> t) =
      fun ~label:(x2291 : BufferSource.t) ->
        fun () ->
          let x2292 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2292 "label" (BufferSource.t_to_js x2291);
          t_of_js x2292
    let cast_from = Obj.magic
  end
module BigInteger =
  struct
    type t = Uint8Array.t_0
    let rec t_of_js : Ojs.t -> t =
      fun (x2294 : Ojs.t) -> Uint8Array.t_0_of_js x2294
    and t_to_js : t -> Ojs.t =
      fun (x2293 : Uint8Array.t_0) -> Uint8Array.t_0_to_js x2293
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2296 : Ojs.t) -> t_of_js x2296
    and t_0_to_js : t_0 -> Ojs.t = fun (x2295 : t) -> t_to_js x2295
  end
module RsaKeyGenParams =
  struct
    type t = [ `Algorithm  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2298 : Ojs.t) -> t_of_js x2298
    and t_0_to_js : t_0 -> Ojs.t = fun (x2297 : t) -> t_to_js x2297
    type tags = [ `Algorithm  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2301 : Ojs.t) -> intf_of_js __tags_of_js x2301
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2299 : __tags intf) -> intf_to_js __tags_to_js x2299
    let (get_modulusLength : 'tags this -> float) =
      fun (x2303 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2303) "modulusLength")
    let (set_modulusLength : 'tags this -> float -> unit) =
      fun (x2305 : 'tags this) ->
        fun (x2306 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2305) "modulusLength"
            (Ojs.float_to_js x2306)
    let (get_publicExponent : 'tags this -> BigInteger.t) =
      fun (x2308 : 'tags this) ->
        BigInteger.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2308) "publicExponent")
    let (set_publicExponent : 'tags this -> BigInteger.t -> unit) =
      fun (x2310 : 'tags this) ->
        fun (x2311 : BigInteger.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2310) "publicExponent"
            (BigInteger.t_to_js x2311)
    let (create :
      modulusLength:float -> publicExponent:BigInteger.t -> unit -> t) =
      fun ~modulusLength:(x2313 : float) ->
        fun ~publicExponent:(x2314 : BigInteger.t) ->
          fun () ->
            let x2315 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2315 "modulusLength" (Ojs.float_to_js x2313);
            Ojs.set_prop_ascii x2315 "publicExponent"
              (BigInteger.t_to_js x2314);
            t_of_js x2315
    let cast_from = Obj.magic
  end
module AlgorithmIdentifier =
  struct
    type t = [ `String of string  | `Other of Algorithm.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x2320 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x2321 : Ojs.t) ->
             let x2322 = x2321 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x2322 "dummy") with
             | "String" -> `String (Ojs.string_of_js x2322)
             | "Other" -> `Other (Algorithm.t_of_js x2322)
             | _ -> assert false) x2320
    and t_to_js : t -> Ojs.t =
      fun
        (x2316 : [ `String of string  | `Other of Algorithm.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x2317 : [ `String of string  | `Other of Algorithm.t ]) ->
             match x2317 with
             | `String x2318 -> Ojs.string_to_js x2318
             | `Other x2319 -> Algorithm.t_to_js x2319) x2316
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2324 : Ojs.t) -> t_of_js x2324
    and t_0_to_js : t_0 -> Ojs.t = fun (x2323 : t) -> t_to_js x2323
  end
module HashAlgorithmIdentifier =
  struct
    type t = AlgorithmIdentifier.t
    let rec t_of_js : Ojs.t -> t =
      fun (x2326 : Ojs.t) -> AlgorithmIdentifier.t_of_js x2326
    and t_to_js : t -> Ojs.t =
      fun (x2325 : AlgorithmIdentifier.t) ->
        AlgorithmIdentifier.t_to_js x2325
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2328 : Ojs.t) -> t_of_js x2328
    and t_0_to_js : t_0 -> Ojs.t = fun (x2327 : t) -> t_to_js x2327
  end
module RsaHashedKeyGenParams =
  struct
    type t =
      [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2330 : Ojs.t) -> t_of_js x2330
    and t_0_to_js : t_0 -> Ojs.t = fun (x2329 : t) -> t_to_js x2329
    type tags = [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2333 : Ojs.t) -> intf_of_js __tags_of_js x2333
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2331 : __tags intf) -> intf_to_js __tags_to_js x2331
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2335 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2335) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2337 : 'tags this) ->
        fun (x2338 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2337) "hash"
            (HashAlgorithmIdentifier.t_to_js x2338)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x2340 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x2341 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2341 "hash"
            (HashAlgorithmIdentifier.t_to_js x2340);
          t_of_js x2341
    let cast_from = Obj.magic
  end
module RsaHashedImportParams =
  struct
    type t = [ `Algorithm  | `RsaHashedImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2343 : Ojs.t) -> t_of_js x2343
    and t_0_to_js : t_0 -> Ojs.t = fun (x2342 : t) -> t_to_js x2342
    type tags = [ `Algorithm  | `RsaHashedImportParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2346 : Ojs.t) -> intf_of_js __tags_of_js x2346
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2344 : __tags intf) -> intf_to_js __tags_to_js x2344
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2348 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2348) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2350 : 'tags this) ->
        fun (x2351 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2350) "hash"
            (HashAlgorithmIdentifier.t_to_js x2351)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x2353 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x2354 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2354 "hash"
            (HashAlgorithmIdentifier.t_to_js x2353);
          t_of_js x2354
    let cast_from = Obj.magic
  end
module Pbkdf2Params =
  struct
    type t = [ `Algorithm  | `Pbkdf2Params ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2356 : Ojs.t) -> t_of_js x2356
    and t_0_to_js : t_0 -> Ojs.t = fun (x2355 : t) -> t_to_js x2355
    type tags = [ `Algorithm  | `Pbkdf2Params ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Pbkdf2Params ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2359 : Ojs.t) -> intf_of_js __tags_of_js x2359
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2357 : __tags intf) -> intf_to_js __tags_to_js x2357
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2361 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2361) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2363 : 'tags this) ->
        fun (x2364 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2363) "hash"
            (HashAlgorithmIdentifier.t_to_js x2364)
    let (get_iterations : 'tags this -> float) =
      fun (x2366 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2366) "iterations")
    let (set_iterations : 'tags this -> float -> unit) =
      fun (x2368 : 'tags this) ->
        fun (x2369 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2368) "iterations"
            (Ojs.float_to_js x2369)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x2371 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2371) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x2373 : 'tags this) ->
        fun (x2374 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2373) "salt"
            (BufferSource.t_to_js x2374)
    let (create :
      hash:HashAlgorithmIdentifier.t ->
        iterations:float -> salt:BufferSource.t -> unit -> t)
      =
      fun ~hash:(x2376 : HashAlgorithmIdentifier.t) ->
        fun ~iterations:(x2377 : float) ->
          fun ~salt:(x2378 : BufferSource.t) ->
            fun () ->
              let x2379 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x2379 "hash"
                (HashAlgorithmIdentifier.t_to_js x2376);
              Ojs.set_prop_ascii x2379 "iterations" (Ojs.float_to_js x2377);
              Ojs.set_prop_ascii x2379 "salt" (BufferSource.t_to_js x2378);
              t_of_js x2379
    let cast_from = Obj.magic
  end
module KeyFormat =
  struct
    type t = [ `L_s150_pkcs8  | `L_s160_raw  | `L_s182_spki  | `L_s97_jwk ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2381 : Ojs.t) ->
        let x2382 = x2381 in
        match Ojs.string_of_js x2382 with
        | "pkcs8" -> `L_s150_pkcs8
        | "raw" -> `L_s160_raw
        | "spki" -> `L_s182_spki
        | "jwk" -> `L_s97_jwk
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2380 :
          [ `L_s150_pkcs8  | `L_s160_raw  | `L_s182_spki  | `L_s97_jwk ])
        ->
        match x2380 with
        | `L_s150_pkcs8 -> Ojs.string_to_js "pkcs8"
        | `L_s160_raw -> Ojs.string_to_js "raw"
        | `L_s182_spki -> Ojs.string_to_js "spki"
        | `L_s97_jwk -> Ojs.string_to_js "jwk"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2384 : Ojs.t) -> t_of_js x2384
    and t_0_to_js : t_0 -> Ojs.t = fun (x2383 : t) -> t_to_js x2383
  end
module RsaOtherPrimesInfo =
  struct
    type t = [ `RsaOtherPrimesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2386 : Ojs.t) -> t_of_js x2386
    and t_0_to_js : t_0 -> Ojs.t = fun (x2385 : t) -> t_to_js x2385
    type tags = [ `RsaOtherPrimesInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOtherPrimesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2389 : Ojs.t) -> intf_of_js __tags_of_js x2389
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2387 : __tags intf) -> intf_to_js __tags_to_js x2387
    let (get_d : 'tags this -> string) =
      fun (x2391 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2391) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x2393 : 'tags this) ->
        fun (x2394 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2393) "d"
            (Ojs.string_to_js x2394)
    let (get_r : 'tags this -> string) =
      fun (x2396 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2396) "r")
    let (set_r : 'tags this -> string -> unit) =
      fun (x2398 : 'tags this) ->
        fun (x2399 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2398) "r"
            (Ojs.string_to_js x2399)
    let (get_t : 'tags this -> string) =
      fun (x2401 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2401) "t")
    let (set_t : 'tags this -> string -> unit) =
      fun (x2403 : 'tags this) ->
        fun (x2404 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2403) "t"
            (Ojs.string_to_js x2404)
    let (create : d:string -> r:string -> t:string -> unit -> t) =
      fun ~d:(x2406 : string) ->
        fun ~r:(x2407 : string) ->
          fun ~t:(x2408 : string) ->
            fun () ->
              let x2409 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x2409 "d" (Ojs.string_to_js x2406);
              Ojs.set_prop_ascii x2409 "r" (Ojs.string_to_js x2407);
              Ojs.set_prop_ascii x2409 "t" (Ojs.string_to_js x2408);
              t_of_js x2409
    let cast_from = Obj.magic
  end
module JsonWebKey =
  struct
    type t = [ `JsonWebKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2411 : Ojs.t) -> t_of_js x2411
    and t_0_to_js : t_0 -> Ojs.t = fun (x2410 : t) -> t_to_js x2410
    type tags = [ `JsonWebKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `JsonWebKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2414 : Ojs.t) -> intf_of_js __tags_of_js x2414
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2412 : __tags intf) -> intf_to_js __tags_to_js x2412
    let (get_alg : 'tags this -> string) =
      fun (x2416 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2416) "alg")
    let (set_alg : 'tags this -> string -> unit) =
      fun (x2418 : 'tags this) ->
        fun (x2419 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2418) "alg"
            (Ojs.string_to_js x2419)
    let (get_crv : 'tags this -> string) =
      fun (x2421 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2421) "crv")
    let (set_crv : 'tags this -> string -> unit) =
      fun (x2423 : 'tags this) ->
        fun (x2424 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2423) "crv"
            (Ojs.string_to_js x2424)
    let (get_d : 'tags this -> string) =
      fun (x2426 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2426) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x2428 : 'tags this) ->
        fun (x2429 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2428) "d"
            (Ojs.string_to_js x2429)
    let (get_dp : 'tags this -> string) =
      fun (x2431 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2431) "dp")
    let (set_dp : 'tags this -> string -> unit) =
      fun (x2433 : 'tags this) ->
        fun (x2434 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2433) "dp"
            (Ojs.string_to_js x2434)
    let (get_dq : 'tags this -> string) =
      fun (x2436 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2436) "dq")
    let (set_dq : 'tags this -> string -> unit) =
      fun (x2438 : 'tags this) ->
        fun (x2439 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2438) "dq"
            (Ojs.string_to_js x2439)
    let (get_e : 'tags this -> string) =
      fun (x2441 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2441) "e")
    let (set_e : 'tags this -> string -> unit) =
      fun (x2443 : 'tags this) ->
        fun (x2444 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2443) "e"
            (Ojs.string_to_js x2444)
    let (get_ext : 'tags this -> bool) =
      fun (x2446 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2446) "ext")
    let (set_ext : 'tags this -> bool -> unit) =
      fun (x2448 : 'tags this) ->
        fun (x2449 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2448) "ext"
            (Ojs.bool_to_js x2449)
    let (get_k : 'tags this -> string) =
      fun (x2451 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2451) "k")
    let (set_k : 'tags this -> string -> unit) =
      fun (x2453 : 'tags this) ->
        fun (x2454 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2453) "k"
            (Ojs.string_to_js x2454)
    let (get_key_ops : 'tags this -> string list) =
      fun (x2456 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2456) "key_ops")
    let (set_key_ops : 'tags this -> string list -> unit) =
      fun (x2459 : 'tags this) ->
        fun (x2460 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2459) "key_ops"
            (Ojs.list_to_js Ojs.string_to_js x2460)
    let (get_kty : 'tags this -> string) =
      fun (x2463 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2463) "kty")
    let (set_kty : 'tags this -> string -> unit) =
      fun (x2465 : 'tags this) ->
        fun (x2466 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2465) "kty"
            (Ojs.string_to_js x2466)
    let (get_n : 'tags this -> string) =
      fun (x2468 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2468) "n")
    let (set_n : 'tags this -> string -> unit) =
      fun (x2470 : 'tags this) ->
        fun (x2471 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2470) "n"
            (Ojs.string_to_js x2471)
    let (get_oth : 'tags this -> RsaOtherPrimesInfo.t list) =
      fun (x2473 : 'tags this) ->
        Ojs.list_of_js RsaOtherPrimesInfo.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2473) "oth")
    let (set_oth : 'tags this -> RsaOtherPrimesInfo.t list -> unit) =
      fun (x2476 : 'tags this) ->
        fun (x2477 : RsaOtherPrimesInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2476) "oth"
            (Ojs.list_to_js RsaOtherPrimesInfo.t_to_js x2477)
    let (get_p : 'tags this -> string) =
      fun (x2480 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2480) "p")
    let (set_p : 'tags this -> string -> unit) =
      fun (x2482 : 'tags this) ->
        fun (x2483 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2482) "p"
            (Ojs.string_to_js x2483)
    let (get_q : 'tags this -> string) =
      fun (x2485 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2485) "q")
    let (set_q : 'tags this -> string -> unit) =
      fun (x2487 : 'tags this) ->
        fun (x2488 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2487) "q"
            (Ojs.string_to_js x2488)
    let (get_qi : 'tags this -> string) =
      fun (x2490 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2490) "qi")
    let (set_qi : 'tags this -> string -> unit) =
      fun (x2492 : 'tags this) ->
        fun (x2493 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2492) "qi"
            (Ojs.string_to_js x2493)
    let (get_use : 'tags this -> string) =
      fun (x2495 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2495) "use")
    let (set_use : 'tags this -> string -> unit) =
      fun (x2497 : 'tags this) ->
        fun (x2498 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2497) "use"
            (Ojs.string_to_js x2498)
    let (get_x : 'tags this -> string) =
      fun (x2500 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2500) "x")
    let (set_x : 'tags this -> string -> unit) =
      fun (x2502 : 'tags this) ->
        fun (x2503 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2502) "x"
            (Ojs.string_to_js x2503)
    let (get_y : 'tags this -> string) =
      fun (x2505 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2505) "y")
    let (set_y : 'tags this -> string -> unit) =
      fun (x2507 : 'tags this) ->
        fun (x2508 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2507) "y"
            (Ojs.string_to_js x2508)
    let (create :
      alg:string ->
        crv:string ->
          d:string ->
            dp:string ->
              dq:string ->
                e:string ->
                  ext:bool ->
                    k:string ->
                      key_ops:string list ->
                        kty:string ->
                          n:string ->
                            oth:RsaOtherPrimesInfo.t list ->
                              p:string ->
                                q:string ->
                                  qi:string ->
                                    use:string ->
                                      x:string -> y:string -> unit -> t)
      =
      fun ~alg:(x2510 : string) ->
        fun ~crv:(x2511 : string) ->
          fun ~d:(x2512 : string) ->
            fun ~dp:(x2513 : string) ->
              fun ~dq:(x2514 : string) ->
                fun ~e:(x2515 : string) ->
                  fun ~ext:(x2516 : bool) ->
                    fun ~k:(x2517 : string) ->
                      fun ~key_ops:(x2518 : string list) ->
                        fun ~kty:(x2519 : string) ->
                          fun ~n:(x2520 : string) ->
                            fun ~oth:(x2521 : RsaOtherPrimesInfo.t list) ->
                              fun ~p:(x2522 : string) ->
                                fun ~q:(x2523 : string) ->
                                  fun ~qi:(x2524 : string) ->
                                    fun ~use:(x2525 : string) ->
                                      fun ~x:(x2526 : string) ->
                                        fun ~y:(x2527 : string) ->
                                          fun () ->
                                            let x2528 = Ojs.empty_obj () in
                                            Ojs.set_prop_ascii x2528 "alg"
                                              (Ojs.string_to_js x2510);
                                            Ojs.set_prop_ascii x2528 "crv"
                                              (Ojs.string_to_js x2511);
                                            Ojs.set_prop_ascii x2528 "d"
                                              (Ojs.string_to_js x2512);
                                            Ojs.set_prop_ascii x2528 "dp"
                                              (Ojs.string_to_js x2513);
                                            Ojs.set_prop_ascii x2528 "dq"
                                              (Ojs.string_to_js x2514);
                                            Ojs.set_prop_ascii x2528 "e"
                                              (Ojs.string_to_js x2515);
                                            Ojs.set_prop_ascii x2528 "ext"
                                              (Ojs.bool_to_js x2516);
                                            Ojs.set_prop_ascii x2528 "k"
                                              (Ojs.string_to_js x2517);
                                            Ojs.set_prop_ascii x2528 "keyOps"
                                              (Ojs.list_to_js
                                                 Ojs.string_to_js x2518);
                                            Ojs.set_prop_ascii x2528 "kty"
                                              (Ojs.string_to_js x2519);
                                            Ojs.set_prop_ascii x2528 "n"
                                              (Ojs.string_to_js x2520);
                                            Ojs.set_prop_ascii x2528 "oth"
                                              (Ojs.list_to_js
                                                 RsaOtherPrimesInfo.t_to_js
                                                 x2521);
                                            Ojs.set_prop_ascii x2528 "p"
                                              (Ojs.string_to_js x2522);
                                            Ojs.set_prop_ascii x2528 "q"
                                              (Ojs.string_to_js x2523);
                                            Ojs.set_prop_ascii x2528 "qi"
                                              (Ojs.string_to_js x2524);
                                            Ojs.set_prop_ascii x2528 "use"
                                              (Ojs.string_to_js x2525);
                                            Ojs.set_prop_ascii x2528 "x"
                                              (Ojs.string_to_js x2526);
                                            Ojs.set_prop_ascii x2528 "y"
                                              (Ojs.string_to_js x2527);
                                            t_of_js x2528
    let cast_from = Obj.magic
  end
module HmacKeyGenParams =
  struct
    type t = [ `Algorithm  | `HmacKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2532 : Ojs.t) -> t_of_js x2532
    and t_0_to_js : t_0 -> Ojs.t = fun (x2531 : t) -> t_to_js x2531
    type tags = [ `Algorithm  | `HmacKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2535 : Ojs.t) -> intf_of_js __tags_of_js x2535
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2533 : __tags intf) -> intf_to_js __tags_to_js x2533
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2537 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2537) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2539 : 'tags this) ->
        fun (x2540 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2539) "hash"
            (HashAlgorithmIdentifier.t_to_js x2540)
    let (get_length : 'tags this -> float) =
      fun (x2542 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2542) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2544 : 'tags this) ->
        fun (x2545 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2544) "length"
            (Ojs.float_to_js x2545)
    let (create :
      hash:HashAlgorithmIdentifier.t -> length:float -> unit -> t) =
      fun ~hash:(x2547 : HashAlgorithmIdentifier.t) ->
        fun ~length:(x2548 : float) ->
          fun () ->
            let x2549 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2549 "hash"
              (HashAlgorithmIdentifier.t_to_js x2547);
            Ojs.set_prop_ascii x2549 "length" (Ojs.float_to_js x2548);
            t_of_js x2549
    let cast_from = Obj.magic
  end
module HmacImportParams =
  struct
    type t = [ `Algorithm  | `HmacImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2551 : Ojs.t) -> t_of_js x2551
    and t_0_to_js : t_0 -> Ojs.t = fun (x2550 : t) -> t_to_js x2550
    type tags = [ `Algorithm  | `HmacImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2554 : Ojs.t) -> intf_of_js __tags_of_js x2554
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2552 : __tags intf) -> intf_to_js __tags_to_js x2552
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2556 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2556) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2558 : 'tags this) ->
        fun (x2559 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2558) "hash"
            (HashAlgorithmIdentifier.t_to_js x2559)
    let (get_length : 'tags this -> float) =
      fun (x2561 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2561) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2563 : 'tags this) ->
        fun (x2564 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2563) "length"
            (Ojs.float_to_js x2564)
    let (create :
      hash:HashAlgorithmIdentifier.t -> length:float -> unit -> t) =
      fun ~hash:(x2566 : HashAlgorithmIdentifier.t) ->
        fun ~length:(x2567 : float) ->
          fun () ->
            let x2568 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2568 "hash"
              (HashAlgorithmIdentifier.t_to_js x2566);
            Ojs.set_prop_ascii x2568 "length" (Ojs.float_to_js x2567);
            t_of_js x2568
    let cast_from = Obj.magic
  end
module HkdfParams =
  struct
    type t = [ `Algorithm  | `HkdfParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2570 : Ojs.t) -> t_of_js x2570
    and t_0_to_js : t_0 -> Ojs.t = fun (x2569 : t) -> t_to_js x2569
    type tags = [ `Algorithm  | `HkdfParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HkdfParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2573 : Ojs.t) -> intf_of_js __tags_of_js x2573
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2571 : __tags intf) -> intf_to_js __tags_to_js x2571
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2575 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2575) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2577 : 'tags this) ->
        fun (x2578 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2577) "hash"
            (HashAlgorithmIdentifier.t_to_js x2578)
    let (get_info : 'tags this -> BufferSource.t) =
      fun (x2580 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2580) "info")
    let (set_info : 'tags this -> BufferSource.t -> unit) =
      fun (x2582 : 'tags this) ->
        fun (x2583 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2582) "info"
            (BufferSource.t_to_js x2583)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x2585 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2585) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x2587 : 'tags this) ->
        fun (x2588 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2587) "salt"
            (BufferSource.t_to_js x2588)
    let (create :
      hash:HashAlgorithmIdentifier.t ->
        info:BufferSource.t -> salt:BufferSource.t -> unit -> t)
      =
      fun ~hash:(x2590 : HashAlgorithmIdentifier.t) ->
        fun ~info:(x2591 : BufferSource.t) ->
          fun ~salt:(x2592 : BufferSource.t) ->
            fun () ->
              let x2593 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x2593 "hash"
                (HashAlgorithmIdentifier.t_to_js x2590);
              Ojs.set_prop_ascii x2593 "info" (BufferSource.t_to_js x2591);
              Ojs.set_prop_ascii x2593 "salt" (BufferSource.t_to_js x2592);
              t_of_js x2593
    let cast_from = Obj.magic
  end
module EcdsaParams =
  struct
    type t = [ `Algorithm  | `EcdsaParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2595 : Ojs.t) -> t_of_js x2595
    and t_0_to_js : t_0 -> Ojs.t = fun (x2594 : t) -> t_to_js x2594
    type tags = [ `Algorithm  | `EcdsaParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdsaParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2598 : Ojs.t) -> intf_of_js __tags_of_js x2598
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2596 : __tags intf) -> intf_to_js __tags_to_js x2596
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2600 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2600) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2602 : 'tags this) ->
        fun (x2603 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2602) "hash"
            (HashAlgorithmIdentifier.t_to_js x2603)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x2605 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x2606 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2606 "hash"
            (HashAlgorithmIdentifier.t_to_js x2605);
          t_of_js x2606
    let cast_from = Obj.magic
  end
module KeyUsage =
  struct
    type t =
      [ `L_s178_sign  | `L_s199_unwrapKey  | `L_s202_verify 
      | `L_s210_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
      | `L_s60_deriveKey  | `L_s65_encrypt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2608 : Ojs.t) ->
        let x2609 = x2608 in
        match Ojs.string_of_js x2609 with
        | "sign" -> `L_s178_sign
        | "unwrapKey" -> `L_s199_unwrapKey
        | "verify" -> `L_s202_verify
        | "wrapKey" -> `L_s210_wrapKey
        | "decrypt" -> `L_s56_decrypt
        | "deriveBits" -> `L_s59_deriveBits
        | "deriveKey" -> `L_s60_deriveKey
        | "encrypt" -> `L_s65_encrypt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2607 :
          [ `L_s178_sign  | `L_s199_unwrapKey  | `L_s202_verify 
          | `L_s210_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
          | `L_s60_deriveKey  | `L_s65_encrypt ])
        ->
        match x2607 with
        | `L_s178_sign -> Ojs.string_to_js "sign"
        | `L_s199_unwrapKey -> Ojs.string_to_js "unwrapKey"
        | `L_s202_verify -> Ojs.string_to_js "verify"
        | `L_s210_wrapKey -> Ojs.string_to_js "wrapKey"
        | `L_s56_decrypt -> Ojs.string_to_js "decrypt"
        | `L_s59_deriveBits -> Ojs.string_to_js "deriveBits"
        | `L_s60_deriveKey -> Ojs.string_to_js "deriveKey"
        | `L_s65_encrypt -> Ojs.string_to_js "encrypt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2611 : Ojs.t) -> t_of_js x2611
    and t_0_to_js : t_0 -> Ojs.t = fun (x2610 : t) -> t_to_js x2610
  end
module KeyType =
  struct
    type t = [ `L_s155_private  | `L_s158_public  | `L_s175_secret ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2613 : Ojs.t) ->
        let x2614 = x2613 in
        match Ojs.string_of_js x2614 with
        | "private" -> `L_s155_private
        | "public" -> `L_s158_public
        | "secret" -> `L_s175_secret
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x2612 : [ `L_s155_private  | `L_s158_public  | `L_s175_secret ])
        ->
        match x2612 with
        | `L_s155_private -> Ojs.string_to_js "private"
        | `L_s158_public -> Ojs.string_to_js "public"
        | `L_s175_secret -> Ojs.string_to_js "secret"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2616 : Ojs.t) -> t_of_js x2616
    and t_0_to_js : t_0 -> Ojs.t = fun (x2615 : t) -> t_to_js x2615
  end
module KeyAlgorithm =
  struct
    type t = [ `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2618 : Ojs.t) -> t_of_js x2618
    and t_0_to_js : t_0 -> Ojs.t = fun (x2617 : t) -> t_to_js x2617
    type tags = [ `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `KeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2621 : Ojs.t) -> intf_of_js __tags_of_js x2621
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2619 : __tags intf) -> intf_to_js __tags_to_js x2619
    let (get_name : 'tags this -> string) =
      fun (x2623 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2623) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2625 : 'tags this) ->
        fun (x2626 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2625) "name"
            (Ojs.string_to_js x2626)
    let (create : name:string -> unit -> t) =
      fun ~name:(x2628 : string) ->
        fun () ->
          let x2629 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2629 "name" (Ojs.string_to_js x2628);
          t_of_js x2629
    let cast_from = Obj.magic
  end
module CryptoKey =
  struct
    type t = [ `CryptoKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2631 : Ojs.t) -> t_of_js x2631
    and t_0_to_js : t_0 -> Ojs.t = fun (x2630 : t) -> t_to_js x2630
    type tags = [ `CryptoKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2634 : Ojs.t) -> intf_of_js __tags_of_js x2634
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2632 : __tags intf) -> intf_to_js __tags_to_js x2632
    let (get_algorithm : 'tags this -> KeyAlgorithm.t) =
      fun (x2636 : 'tags this) ->
        KeyAlgorithm.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2636) "algorithm")
    let (get_extractable : 'tags this -> bool) =
      fun (x2638 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2638) "extractable")
    let (get_type : 'tags this -> KeyType.t) =
      fun (x2640 : 'tags this) ->
        KeyType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2640) "type")
    let (get_usages : 'tags this -> KeyUsage.t list) =
      fun (x2642 : 'tags this) ->
        Ojs.list_of_js KeyUsage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2642) "usages")
    let (create :
      algorithm:KeyAlgorithm.t ->
        extractable:bool ->
          type_:KeyType.t -> usages:KeyUsage.t list -> unit -> t)
      =
      fun ~algorithm:(x2645 : KeyAlgorithm.t) ->
        fun ~extractable:(x2646 : bool) ->
          fun ~type_:(x2647 : KeyType.t) ->
            fun ~usages:(x2648 : KeyUsage.t list) ->
              fun () ->
                let x2649 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x2649 "algorithm"
                  (KeyAlgorithm.t_to_js x2645);
                Ojs.set_prop_ascii x2649 "extractable" (Ojs.bool_to_js x2646);
                Ojs.set_prop_ascii x2649 "type" (KeyType.t_to_js x2647);
                Ojs.set_prop_ascii x2649 "usages"
                  (Ojs.list_to_js KeyUsage.t_to_js x2648);
                t_of_js x2649
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CryptoKey")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CryptoKey") [||])
  end
module EcdhKeyDeriveParams =
  struct
    type t = [ `Algorithm  | `EcdhKeyDeriveParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2652 : Ojs.t) -> t_of_js x2652
    and t_0_to_js : t_0 -> Ojs.t = fun (x2651 : t) -> t_to_js x2651
    type tags = [ `Algorithm  | `EcdhKeyDeriveParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdhKeyDeriveParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2655 : Ojs.t) -> intf_of_js __tags_of_js x2655
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2653 : __tags intf) -> intf_to_js __tags_to_js x2653
    let (get_public : 'tags this -> CryptoKey.t) =
      fun (x2657 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2657) "public")
    let (set_public : 'tags this -> CryptoKey.t -> unit) =
      fun (x2659 : 'tags this) ->
        fun (x2660 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2659) "public"
            (CryptoKey.t_to_js x2660)
    let (create : public:CryptoKey.t -> unit -> t) =
      fun ~public:(x2662 : CryptoKey.t) ->
        fun () ->
          let x2663 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2663 "public" (CryptoKey.t_to_js x2662);
          t_of_js x2663
    let cast_from = Obj.magic
  end
module NamedCurve =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x2665 : Ojs.t) -> Ojs.string_of_js x2665
    and t_to_js : t -> Ojs.t = fun (x2664 : string) -> Ojs.string_to_js x2664
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2667 : Ojs.t) -> t_of_js x2667
    and t_0_to_js : t_0 -> Ojs.t = fun (x2666 : t) -> t_to_js x2666
  end
module EcKeyImportParams =
  struct
    type t = [ `Algorithm  | `EcKeyImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2669 : Ojs.t) -> t_of_js x2669
    and t_0_to_js : t_0 -> Ojs.t = fun (x2668 : t) -> t_to_js x2668
    type tags = [ `Algorithm  | `EcKeyImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2672 : Ojs.t) -> intf_of_js __tags_of_js x2672
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2670 : __tags intf) -> intf_to_js __tags_to_js x2670
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x2674 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2674) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x2676 : 'tags this) ->
        fun (x2677 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2676) "namedCurve"
            (NamedCurve.t_to_js x2677)
    let (create : namedCurve:NamedCurve.t -> unit -> t) =
      fun ~namedCurve:(x2679 : NamedCurve.t) ->
        fun () ->
          let x2680 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2680 "namedCurve" (NamedCurve.t_to_js x2679);
          t_of_js x2680
    let cast_from = Obj.magic
  end
module EcKeyGenParams =
  struct
    type t = [ `Algorithm  | `EcKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2682 : Ojs.t) -> t_of_js x2682
    and t_0_to_js : t_0 -> Ojs.t = fun (x2681 : t) -> t_to_js x2681
    type tags = [ `Algorithm  | `EcKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2685 : Ojs.t) -> intf_of_js __tags_of_js x2685
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2683 : __tags intf) -> intf_to_js __tags_to_js x2683
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x2687 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2687) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x2689 : 'tags this) ->
        fun (x2690 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2689) "namedCurve"
            (NamedCurve.t_to_js x2690)
    let (create : namedCurve:NamedCurve.t -> unit -> t) =
      fun ~namedCurve:(x2692 : NamedCurve.t) ->
        fun () ->
          let x2693 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2693 "namedCurve" (NamedCurve.t_to_js x2692);
          t_of_js x2693
    let cast_from = Obj.magic
  end
module CryptoKeyPair =
  struct
    type t = [ `CryptoKeyPair ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2695 : Ojs.t) -> t_of_js x2695
    and t_0_to_js : t_0 -> Ojs.t = fun (x2694 : t) -> t_to_js x2694
    type tags = [ `CryptoKeyPair ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKeyPair ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2698 : Ojs.t) -> intf_of_js __tags_of_js x2698
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2696 : __tags intf) -> intf_to_js __tags_to_js x2696
    let (get_privateKey : 'tags this -> CryptoKey.t) =
      fun (x2700 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2700) "privateKey")
    let (set_privateKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x2702 : 'tags this) ->
        fun (x2703 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2702) "privateKey"
            (CryptoKey.t_to_js x2703)
    let (get_publicKey : 'tags this -> CryptoKey.t) =
      fun (x2705 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2705) "publicKey")
    let (set_publicKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x2707 : 'tags this) ->
        fun (x2708 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2707) "publicKey"
            (CryptoKey.t_to_js x2708)
    let (create :
      privateKey:CryptoKey.t -> publicKey:CryptoKey.t -> unit -> t) =
      fun ~privateKey:(x2710 : CryptoKey.t) ->
        fun ~publicKey:(x2711 : CryptoKey.t) ->
          fun () ->
            let x2712 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2712 "privateKey" (CryptoKey.t_to_js x2710);
            Ojs.set_prop_ascii x2712 "publicKey" (CryptoKey.t_to_js x2711);
            t_of_js x2712
    let cast_from = Obj.magic
  end
module AesKeyGenParams =
  struct
    type t = [ `AesKeyGenParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2714 : Ojs.t) -> t_of_js x2714
    and t_0_to_js : t_0 -> Ojs.t = fun (x2713 : t) -> t_to_js x2713
    type tags = [ `AesKeyGenParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2717 : Ojs.t) -> intf_of_js __tags_of_js x2717
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2715 : __tags intf) -> intf_to_js __tags_to_js x2715
    let (get_length : 'tags this -> float) =
      fun (x2719 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2719) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2721 : 'tags this) ->
        fun (x2722 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2721) "length"
            (Ojs.float_to_js x2722)
    let (create : length:float -> unit -> t) =
      fun ~length:(x2724 : float) ->
        fun () ->
          let x2725 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2725 "length" (Ojs.float_to_js x2724);
          t_of_js x2725
    let cast_from = Obj.magic
  end
module AesKeyAlgorithm =
  struct
    type t = [ `AesKeyAlgorithm  | `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2727 : Ojs.t) -> t_of_js x2727
    and t_0_to_js : t_0 -> Ojs.t = fun (x2726 : t) -> t_to_js x2726
    type tags = [ `AesKeyAlgorithm  | `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2730 : Ojs.t) -> intf_of_js __tags_of_js x2730
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2728 : __tags intf) -> intf_to_js __tags_to_js x2728
    let (get_length : 'tags this -> float) =
      fun (x2732 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2732) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2734 : 'tags this) ->
        fun (x2735 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2734) "length"
            (Ojs.float_to_js x2735)
    let (create : length:float -> unit -> t) =
      fun ~length:(x2737 : float) ->
        fun () ->
          let x2738 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2738 "length" (Ojs.float_to_js x2737);
          t_of_js x2738
    let cast_from = Obj.magic
  end
module AesGcmParams =
  struct
    type t = [ `AesGcmParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2740 : Ojs.t) -> t_of_js x2740
    and t_0_to_js : t_0 -> Ojs.t = fun (x2739 : t) -> t_to_js x2739
    type tags = [ `AesGcmParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesGcmParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2743 : Ojs.t) -> intf_of_js __tags_of_js x2743
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2741 : __tags intf) -> intf_to_js __tags_to_js x2741
    let (get_additionalData : 'tags this -> BufferSource.t) =
      fun (x2745 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2745) "additionalData")
    let (set_additionalData : 'tags this -> BufferSource.t -> unit) =
      fun (x2747 : 'tags this) ->
        fun (x2748 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2747) "additionalData"
            (BufferSource.t_to_js x2748)
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x2750 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2750) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x2752 : 'tags this) ->
        fun (x2753 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2752) "iv"
            (BufferSource.t_to_js x2753)
    let (get_tagLength : 'tags this -> float) =
      fun (x2755 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2755) "tagLength")
    let (set_tagLength : 'tags this -> float -> unit) =
      fun (x2757 : 'tags this) ->
        fun (x2758 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2757) "tagLength"
            (Ojs.float_to_js x2758)
    let (create :
      additionalData:BufferSource.t ->
        iv:BufferSource.t -> tagLength:float -> unit -> t)
      =
      fun ~additionalData:(x2760 : BufferSource.t) ->
        fun ~iv:(x2761 : BufferSource.t) ->
          fun ~tagLength:(x2762 : float) ->
            fun () ->
              let x2763 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x2763 "additionalData"
                (BufferSource.t_to_js x2760);
              Ojs.set_prop_ascii x2763 "iv" (BufferSource.t_to_js x2761);
              Ojs.set_prop_ascii x2763 "tagLength" (Ojs.float_to_js x2762);
              t_of_js x2763
    let cast_from = Obj.magic
  end
module AesDerivedKeyParams =
  struct
    type t = [ `AesDerivedKeyParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2765 : Ojs.t) -> t_of_js x2765
    and t_0_to_js : t_0 -> Ojs.t = fun (x2764 : t) -> t_to_js x2764
    type tags = [ `AesDerivedKeyParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesDerivedKeyParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2768 : Ojs.t) -> intf_of_js __tags_of_js x2768
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2766 : __tags intf) -> intf_to_js __tags_to_js x2766
    let (get_length : 'tags this -> float) =
      fun (x2770 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2770) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2772 : 'tags this) ->
        fun (x2773 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2772) "length"
            (Ojs.float_to_js x2773)
    let (create : length:float -> unit -> t) =
      fun ~length:(x2775 : float) ->
        fun () ->
          let x2776 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2776 "length" (Ojs.float_to_js x2775);
          t_of_js x2776
    let cast_from = Obj.magic
  end
module AesCtrParams =
  struct
    type t = [ `AesCtrParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2778 : Ojs.t) -> t_of_js x2778
    and t_0_to_js : t_0 -> Ojs.t = fun (x2777 : t) -> t_to_js x2777
    type tags = [ `AesCtrParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCtrParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2781 : Ojs.t) -> intf_of_js __tags_of_js x2781
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2779 : __tags intf) -> intf_to_js __tags_to_js x2779
    let (get_counter : 'tags this -> BufferSource.t) =
      fun (x2783 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2783) "counter")
    let (set_counter : 'tags this -> BufferSource.t -> unit) =
      fun (x2785 : 'tags this) ->
        fun (x2786 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2785) "counter"
            (BufferSource.t_to_js x2786)
    let (get_length : 'tags this -> float) =
      fun (x2788 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2788) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2790 : 'tags this) ->
        fun (x2791 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2790) "length"
            (Ojs.float_to_js x2791)
    let (create : counter:BufferSource.t -> length:float -> unit -> t) =
      fun ~counter:(x2793 : BufferSource.t) ->
        fun ~length:(x2794 : float) ->
          fun () ->
            let x2795 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2795 "counter" (BufferSource.t_to_js x2793);
            Ojs.set_prop_ascii x2795 "length" (Ojs.float_to_js x2794);
            t_of_js x2795
    let cast_from = Obj.magic
  end
module AesCbcParams =
  struct
    type t = [ `AesCbcParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2797 : Ojs.t) -> t_of_js x2797
    and t_0_to_js : t_0 -> Ojs.t = fun (x2796 : t) -> t_to_js x2796
    type tags = [ `AesCbcParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCbcParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2800 : Ojs.t) -> intf_of_js __tags_of_js x2800
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2798 : __tags intf) -> intf_to_js __tags_to_js x2798
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x2802 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2802) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x2804 : 'tags this) ->
        fun (x2805 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2804) "iv"
            (BufferSource.t_to_js x2805)
    let (create : iv:BufferSource.t -> unit -> t) =
      fun ~iv:(x2807 : BufferSource.t) ->
        fun () ->
          let x2808 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2808 "iv" (BufferSource.t_to_js x2807);
          t_of_js x2808
    let cast_from = Obj.magic
  end
module SubtleCrypto =
  struct
    type t = [ `SubtleCrypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2810 : Ojs.t) -> t_of_js x2810
    and t_0_to_js : t_0 -> Ojs.t = fun (x2809 : t) -> t_to_js x2809
    type tags = [ `SubtleCrypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `SubtleCrypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2813 : Ojs.t) -> intf_of_js __tags_of_js x2813
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2811 : __tags intf) -> intf_to_js __tags_to_js x2811
    let (deriveKey :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t ->
            derivedKeyType:[ `U1 of AlgorithmIdentifier.t 
                           | `U2 of AesDerivedKeyParams.t 
                           | `U3 of HmacImportParams.t 
                           | `U4 of HkdfParams.t  | `U5 of Pbkdf2Params.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x2830 : 'tags this) ->
        fun
          ~algorithm:(x2815 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x2820 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x2821 :
                                [ `U1 of AlgorithmIdentifier.t 
                                | `U2 of AesDerivedKeyParams.t 
                                | `U3 of HmacImportParams.t 
                                | `U4 of HkdfParams.t 
                                | `U5 of Pbkdf2Params.t ])
              ->
              fun ~extractable:(x2827 : bool) ->
                fun ~keyUsages:(x2828 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2830) "deriveKey"
                       [|((match x2815 with
                           | `U1 x2816 -> AlgorithmIdentifier.t_to_js x2816
                           | `U2 x2817 -> EcdhKeyDeriveParams.t_to_js x2817
                           | `U3 x2818 -> HkdfParams.t_to_js x2818
                           | `U4 x2819 -> Pbkdf2Params.t_to_js x2819));(
                         CryptoKey.t_to_js x2820);((match x2821 with
                                                    | `U1 x2822 ->
                                                        AlgorithmIdentifier.t_to_js
                                                          x2822
                                                    | `U2 x2823 ->
                                                        AesDerivedKeyParams.t_to_js
                                                          x2823
                                                    | `U3 x2824 ->
                                                        HmacImportParams.t_to_js
                                                          x2824
                                                    | `U4 x2825 ->
                                                        HkdfParams.t_to_js
                                                          x2825
                                                    | `U5 x2826 ->
                                                        Pbkdf2Params.t_to_js
                                                          x2826));(Ojs.bool_to_js
                                                                    x2827);(
                         Iterable.t_1_to_js KeyUsage.t_to_js x2828)|])
    let (generateKey :
      'tags this ->
        algorithm:[ `U1 of RsaHashedKeyGenParams.t 
                  | `U2 of EcKeyGenParams.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x2839 : 'tags this) ->
        fun
          ~algorithm:(x2833 :
                       [ `U1 of RsaHashedKeyGenParams.t 
                       | `U2 of EcKeyGenParams.t ])
          ->
          fun ~extractable:(x2836 : bool) ->
            fun ~keyUsages:(x2837 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x2839) "generateKey"
                   [|((match x2833 with
                       | `U1 x2834 -> RsaHashedKeyGenParams.t_to_js x2834
                       | `U2 x2835 -> EcKeyGenParams.t_to_js x2835));(
                     Ojs.bool_to_js x2836);(Ojs.list_to_js KeyUsage.t_to_js
                                              x2837)|])
    let (generateKey' :
      'tags this ->
        algorithm:[ `U1 of AesKeyGenParams.t  | `U2 of HmacKeyGenParams.t 
                  | `U3 of Pbkdf2Params.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2849 : 'tags this) ->
        fun
          ~algorithm:(x2842 :
                       [ `U1 of AesKeyGenParams.t 
                       | `U2 of HmacKeyGenParams.t  | `U3 of Pbkdf2Params.t ])
          ->
          fun ~extractable:(x2846 : bool) ->
            fun ~keyUsages:(x2847 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x2849) "generateKey"
                   [|((match x2842 with
                       | `U1 x2843 -> AesKeyGenParams.t_to_js x2843
                       | `U2 x2844 -> HmacKeyGenParams.t_to_js x2844
                       | `U3 x2845 -> Pbkdf2Params.t_to_js x2845));(Ojs.bool_to_js
                                                                    x2846);(
                     Ojs.list_to_js KeyUsage.t_to_js x2847)|])
    let (generateKey'' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t Iterable.t_1 ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x2856 : 'tags this) ->
        fun ~algorithm:(x2852 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x2853 : bool) ->
            fun ~keyUsages:(x2854 : KeyUsage.t Iterable.t_1) ->
              Promise.t_1_of_js
                (fun (x2858 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x2858)
                (Ojs.call (this_to_js Obj.magic x2856) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x2852);(Ojs.bool_to_js
                                                            x2853);(Iterable.t_1_to_js
                                                                    KeyUsage.t_to_js
                                                                    x2854)|])
    let (importKey :
      'tags this ->
        format:[ `L_s97_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2872 : 'tags this) ->
        fun ~format:(x2861 : [ `L_s97_jwk ]) ->
          fun ~keyData:(x2862 : JsonWebKey.t) ->
            fun
              ~algorithm:(x2863 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x2869 : bool) ->
                fun ~keyUsages:(x2870 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2872) "importKey"
                       [|((match x2861 with
                           | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x2862);((match x2863 with
                                                     | `U1 x2864 ->
                                                         AlgorithmIdentifier.t_to_js
                                                           x2864
                                                     | `U2 x2865 ->
                                                         RsaHashedImportParams.t_to_js
                                                           x2865
                                                     | `U3 x2866 ->
                                                         EcKeyImportParams.t_to_js
                                                           x2866
                                                     | `U4 x2867 ->
                                                         HmacImportParams.t_to_js
                                                           x2867
                                                     | `U5 x2868 ->
                                                         AesKeyAlgorithm.t_to_js
                                                           x2868));(Ojs.bool_to_js
                                                                    x2869);(
                         Ojs.list_to_js KeyUsage.t_to_js x2870)|])
    let (importKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x2888 : 'tags this) ->
        fun ~format:(x2875 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x2878 : BufferSource.t) ->
            fun
              ~algorithm:(x2879 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x2885 : bool) ->
                fun ~keyUsages:(x2886 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2888) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x2877 : [ `L_s97_jwk ]) ->
                               match x2877 with
                               | `L_s97_jwk -> Ojs.string_to_js "jwk") x2875);(
                         BufferSource.t_to_js x2878);((match x2879 with
                                                       | `U1 x2880 ->
                                                           AlgorithmIdentifier.t_to_js
                                                             x2880
                                                       | `U2 x2881 ->
                                                           RsaHashedImportParams.t_to_js
                                                             x2881
                                                       | `U3 x2882 ->
                                                           EcKeyImportParams.t_to_js
                                                             x2882
                                                       | `U4 x2883 ->
                                                           HmacImportParams.t_to_js
                                                             x2883
                                                       | `U5 x2884 ->
                                                           AesKeyAlgorithm.t_to_js
                                                             x2884));(
                         Ojs.bool_to_js x2885);(Iterable.t_1_to_js
                                                  KeyUsage.t_to_js x2886)|])
    let (unwrapKey :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                              | `U2 of RsaOaepParams.t 
                              | `U3 of AesCtrParams.t 
                              | `U4 of AesCbcParams.t 
                              | `U5 of AesGcmParams.t ]
                ->
                unwrappedKeyAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                                      | `U2 of RsaHashedImportParams.t 
                                      | `U3 of EcKeyImportParams.t 
                                      | `U4 of HmacImportParams.t 
                                      | `U5 of AesKeyAlgorithm.t ]
                  ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t Iterable.t_1 ->
                      CryptoKey.t Promise.t_1)
      =
      fun (x2909 : 'tags this) ->
        fun ~format:(x2891 : KeyFormat.t) ->
          fun ~wrappedKey:(x2892 : BufferSource.t) ->
            fun ~unwrappingKey:(x2893 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x2894 :
                                   [ `U1 of AlgorithmIdentifier.t 
                                   | `U2 of RsaOaepParams.t 
                                   | `U3 of AesCtrParams.t 
                                   | `U4 of AesCbcParams.t 
                                   | `U5 of AesGcmParams.t ])
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x2900 :
                                           [ `U1 of AlgorithmIdentifier.t 
                                           | `U2 of RsaHashedImportParams.t 
                                           | `U3 of EcKeyImportParams.t 
                                           | `U4 of HmacImportParams.t 
                                           | `U5 of AesKeyAlgorithm.t ])
                  ->
                  fun ~extractable:(x2906 : bool) ->
                    fun ~keyUsages:(x2907 : KeyUsage.t Iterable.t_1) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x2909) "unwrapKey"
                           [|(KeyFormat.t_to_js x2891);(BufferSource.t_to_js
                                                          x2892);(CryptoKey.t_to_js
                                                                    x2893);((
                             match x2894 with
                             | `U1 x2895 -> AlgorithmIdentifier.t_to_js x2895
                             | `U2 x2896 -> RsaOaepParams.t_to_js x2896
                             | `U3 x2897 -> AesCtrParams.t_to_js x2897
                             | `U4 x2898 -> AesCbcParams.t_to_js x2898
                             | `U5 x2899 -> AesGcmParams.t_to_js x2899));((
                             match x2900 with
                             | `U1 x2901 -> AlgorithmIdentifier.t_to_js x2901
                             | `U2 x2902 ->
                                 RsaHashedImportParams.t_to_js x2902
                             | `U3 x2903 -> EcKeyImportParams.t_to_js x2903
                             | `U4 x2904 -> HmacImportParams.t_to_js x2904
                             | `U5 x2905 -> AesKeyAlgorithm.t_to_js x2905));(
                             Ojs.bool_to_js x2906);(Iterable.t_1_to_js
                                                      KeyUsage.t_to_js x2907)|])
    let (decrypt :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaOaepParams.t 
                  | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                  | `U5 of AesGcmParams.t ]
          -> key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x2920 : 'tags this) ->
        fun
          ~algorithm:(x2912 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaOaepParams.t  | `U3 of AesCtrParams.t 
                       | `U4 of AesCbcParams.t  | `U5 of AesGcmParams.t ])
          ->
          fun ~key:(x2918 : CryptoKey.t) ->
            fun ~data:(x2919 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x2920) "decrypt"
                   [|((match x2912 with
                       | `U1 x2913 -> AlgorithmIdentifier.t_to_js x2913
                       | `U2 x2914 -> RsaOaepParams.t_to_js x2914
                       | `U3 x2915 -> AesCtrParams.t_to_js x2915
                       | `U4 x2916 -> AesCbcParams.t_to_js x2916
                       | `U5 x2917 -> AesGcmParams.t_to_js x2917));(CryptoKey.t_to_js
                                                                    x2918);(
                     BufferSource.t_to_js x2919)|])
    let (deriveBits :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t -> length:float -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2930 : 'tags this) ->
        fun
          ~algorithm:(x2923 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x2928 : CryptoKey.t) ->
            fun ~length:(x2929 : float) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x2930) "deriveBits"
                   [|((match x2923 with
                       | `U1 x2924 -> AlgorithmIdentifier.t_to_js x2924
                       | `U2 x2925 -> EcdhKeyDeriveParams.t_to_js x2925
                       | `U3 x2926 -> HkdfParams.t_to_js x2926
                       | `U4 x2927 -> Pbkdf2Params.t_to_js x2927));(CryptoKey.t_to_js
                                                                    x2928);(
                     Ojs.float_to_js x2929)|])
    let (deriveKey' :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t ->
            derivedKeyType:[ `U1 of AlgorithmIdentifier.t 
                           | `U2 of AesDerivedKeyParams.t 
                           | `U3 of HmacImportParams.t 
                           | `U4 of HkdfParams.t  | `U5 of Pbkdf2Params.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2948 : 'tags this) ->
        fun
          ~algorithm:(x2933 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x2938 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x2939 :
                                [ `U1 of AlgorithmIdentifier.t 
                                | `U2 of AesDerivedKeyParams.t 
                                | `U3 of HmacImportParams.t 
                                | `U4 of HkdfParams.t 
                                | `U5 of Pbkdf2Params.t ])
              ->
              fun ~extractable:(x2945 : bool) ->
                fun ~keyUsages:(x2946 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2948) "deriveKey"
                       [|((match x2933 with
                           | `U1 x2934 -> AlgorithmIdentifier.t_to_js x2934
                           | `U2 x2935 -> EcdhKeyDeriveParams.t_to_js x2935
                           | `U3 x2936 -> HkdfParams.t_to_js x2936
                           | `U4 x2937 -> Pbkdf2Params.t_to_js x2937));(
                         CryptoKey.t_to_js x2938);((match x2939 with
                                                    | `U1 x2940 ->
                                                        AlgorithmIdentifier.t_to_js
                                                          x2940
                                                    | `U2 x2941 ->
                                                        AesDerivedKeyParams.t_to_js
                                                          x2941
                                                    | `U3 x2942 ->
                                                        HmacImportParams.t_to_js
                                                          x2942
                                                    | `U4 x2943 ->
                                                        HkdfParams.t_to_js
                                                          x2943
                                                    | `U5 x2944 ->
                                                        Pbkdf2Params.t_to_js
                                                          x2944));(Ojs.bool_to_js
                                                                    x2945);(
                         Ojs.list_to_js KeyUsage.t_to_js x2946)|])
    let (digest :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2953 : 'tags this) ->
        fun ~algorithm:(x2951 : AlgorithmIdentifier.t) ->
          fun ~data:(x2952 : BufferSource.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x2953) "digest"
                 [|(AlgorithmIdentifier.t_to_js x2951);(BufferSource.t_to_js
                                                          x2952)|])
    let (encrypt :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaOaepParams.t 
                  | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                  | `U5 of AesGcmParams.t ]
          -> key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x2964 : 'tags this) ->
        fun
          ~algorithm:(x2956 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaOaepParams.t  | `U3 of AesCtrParams.t 
                       | `U4 of AesCbcParams.t  | `U5 of AesGcmParams.t ])
          ->
          fun ~key:(x2962 : CryptoKey.t) ->
            fun ~data:(x2963 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x2964) "encrypt"
                   [|((match x2956 with
                       | `U1 x2957 -> AlgorithmIdentifier.t_to_js x2957
                       | `U2 x2958 -> RsaOaepParams.t_to_js x2958
                       | `U3 x2959 -> AesCtrParams.t_to_js x2959
                       | `U4 x2960 -> AesCbcParams.t_to_js x2960
                       | `U5 x2961 -> AesGcmParams.t_to_js x2961));(CryptoKey.t_to_js
                                                                    x2962);(
                     BufferSource.t_to_js x2963)|])
    let (exportKey :
      'tags this ->
        format:[ `L_s97_jwk ] -> key:CryptoKey.t -> JsonWebKey.t Promise.t_1)
      =
      fun (x2969 : 'tags this) ->
        fun ~format:(x2967 : [ `L_s97_jwk ]) ->
          fun ~key:(x2968 : CryptoKey.t) ->
            Promise.t_1_of_js JsonWebKey.t_of_js
              (Ojs.call (this_to_js Obj.magic x2969) "exportKey"
                 [|((match x2967 with | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                   CryptoKey.t_to_js x2968)|])
    let (exportKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          key:CryptoKey.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2976 : 'tags this) ->
        fun ~format:(x2972 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~key:(x2975 : CryptoKey.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x2976) "exportKey"
                 [|(Exclude.t_2_to_js KeyFormat.t_to_js
                      (fun (x2974 : [ `L_s97_jwk ]) ->
                         match x2974 with
                         | `L_s97_jwk -> Ojs.string_to_js "jwk") x2972);(
                   CryptoKey.t_to_js x2975)|])
    let (generateKey''' :
      'tags this ->
        algorithm:[ `U1 of RsaHashedKeyGenParams.t 
                  | `U2 of EcKeyGenParams.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x2985 : 'tags this) ->
        fun
          ~algorithm:(x2979 :
                       [ `U1 of RsaHashedKeyGenParams.t 
                       | `U2 of EcKeyGenParams.t ])
          ->
          fun ~extractable:(x2982 : bool) ->
            fun ~keyUsages:(x2983 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x2985) "generateKey"
                   [|((match x2979 with
                       | `U1 x2980 -> RsaHashedKeyGenParams.t_to_js x2980
                       | `U2 x2981 -> EcKeyGenParams.t_to_js x2981));(
                     Ojs.bool_to_js x2982);(Ojs.list_to_js KeyUsage.t_to_js
                                              x2983)|])
    let (generateKey'''' :
      'tags this ->
        algorithm:[ `U1 of AesKeyGenParams.t  | `U2 of HmacKeyGenParams.t 
                  | `U3 of Pbkdf2Params.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2995 : 'tags this) ->
        fun
          ~algorithm:(x2988 :
                       [ `U1 of AesKeyGenParams.t 
                       | `U2 of HmacKeyGenParams.t  | `U3 of Pbkdf2Params.t ])
          ->
          fun ~extractable:(x2992 : bool) ->
            fun ~keyUsages:(x2993 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x2995) "generateKey"
                   [|((match x2988 with
                       | `U1 x2989 -> AesKeyGenParams.t_to_js x2989
                       | `U2 x2990 -> HmacKeyGenParams.t_to_js x2990
                       | `U3 x2991 -> Pbkdf2Params.t_to_js x2991));(Ojs.bool_to_js
                                                                    x2992);(
                     Ojs.list_to_js KeyUsage.t_to_js x2993)|])
    let (generateKey''''' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t list ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x3002 : 'tags this) ->
        fun ~algorithm:(x2998 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x2999 : bool) ->
            fun ~keyUsages:(x3000 : KeyUsage.t list) ->
              Promise.t_1_of_js
                (fun (x3004 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x3004)
                (Ojs.call (this_to_js Obj.magic x3002) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x2998);(Ojs.bool_to_js
                                                            x2999);(Ojs.list_to_js
                                                                    KeyUsage.t_to_js
                                                                    x3000)|])
    let (importKey'' :
      'tags this ->
        format:[ `L_s97_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3018 : 'tags this) ->
        fun ~format:(x3007 : [ `L_s97_jwk ]) ->
          fun ~keyData:(x3008 : JsonWebKey.t) ->
            fun
              ~algorithm:(x3009 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x3015 : bool) ->
                fun ~keyUsages:(x3016 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3018) "importKey"
                       [|((match x3007 with
                           | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x3008);((match x3009 with
                                                     | `U1 x3010 ->
                                                         AlgorithmIdentifier.t_to_js
                                                           x3010
                                                     | `U2 x3011 ->
                                                         RsaHashedImportParams.t_to_js
                                                           x3011
                                                     | `U3 x3012 ->
                                                         EcKeyImportParams.t_to_js
                                                           x3012
                                                     | `U4 x3013 ->
                                                         HmacImportParams.t_to_js
                                                           x3013
                                                     | `U5 x3014 ->
                                                         AesKeyAlgorithm.t_to_js
                                                           x3014));(Ojs.bool_to_js
                                                                    x3015);(
                         Ojs.list_to_js KeyUsage.t_to_js x3016)|])
    let (importKey''' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3034 : 'tags this) ->
        fun ~format:(x3021 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x3024 : BufferSource.t) ->
            fun
              ~algorithm:(x3025 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x3031 : bool) ->
                fun ~keyUsages:(x3032 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3034) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x3023 : [ `L_s97_jwk ]) ->
                               match x3023 with
                               | `L_s97_jwk -> Ojs.string_to_js "jwk") x3021);(
                         BufferSource.t_to_js x3024);((match x3025 with
                                                       | `U1 x3026 ->
                                                           AlgorithmIdentifier.t_to_js
                                                             x3026
                                                       | `U2 x3027 ->
                                                           RsaHashedImportParams.t_to_js
                                                             x3027
                                                       | `U3 x3028 ->
                                                           EcKeyImportParams.t_to_js
                                                             x3028
                                                       | `U4 x3029 ->
                                                           HmacImportParams.t_to_js
                                                             x3029
                                                       | `U5 x3030 ->
                                                           AesKeyAlgorithm.t_to_js
                                                             x3030));(
                         Ojs.bool_to_js x3031);(Ojs.list_to_js
                                                  KeyUsage.t_to_js x3032)|])
    let (sign :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaPssParams.t 
                  | `U3 of EcdsaParams.t ]
          ->
          key:CryptoKey.t ->
            data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3043 : 'tags this) ->
        fun
          ~algorithm:(x3037 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaPssParams.t  | `U3 of EcdsaParams.t ])
          ->
          fun ~key:(x3041 : CryptoKey.t) ->
            fun ~data:(x3042 : BufferSource.t) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x3043) "sign"
                   [|((match x3037 with
                       | `U1 x3038 -> AlgorithmIdentifier.t_to_js x3038
                       | `U2 x3039 -> RsaPssParams.t_to_js x3039
                       | `U3 x3040 -> EcdsaParams.t_to_js x3040));(CryptoKey.t_to_js
                                                                    x3041);(
                     BufferSource.t_to_js x3042)|])
    let (unwrapKey' :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                              | `U2 of RsaOaepParams.t 
                              | `U3 of AesCtrParams.t 
                              | `U4 of AesCbcParams.t 
                              | `U5 of AesGcmParams.t ]
                ->
                unwrappedKeyAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                                      | `U2 of RsaHashedImportParams.t 
                                      | `U3 of EcKeyImportParams.t 
                                      | `U4 of HmacImportParams.t 
                                      | `U5 of AesKeyAlgorithm.t ]
                  ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3064 : 'tags this) ->
        fun ~format:(x3046 : KeyFormat.t) ->
          fun ~wrappedKey:(x3047 : BufferSource.t) ->
            fun ~unwrappingKey:(x3048 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x3049 :
                                   [ `U1 of AlgorithmIdentifier.t 
                                   | `U2 of RsaOaepParams.t 
                                   | `U3 of AesCtrParams.t 
                                   | `U4 of AesCbcParams.t 
                                   | `U5 of AesGcmParams.t ])
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x3055 :
                                           [ `U1 of AlgorithmIdentifier.t 
                                           | `U2 of RsaHashedImportParams.t 
                                           | `U3 of EcKeyImportParams.t 
                                           | `U4 of HmacImportParams.t 
                                           | `U5 of AesKeyAlgorithm.t ])
                  ->
                  fun ~extractable:(x3061 : bool) ->
                    fun ~keyUsages:(x3062 : KeyUsage.t list) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x3064) "unwrapKey"
                           [|(KeyFormat.t_to_js x3046);(BufferSource.t_to_js
                                                          x3047);(CryptoKey.t_to_js
                                                                    x3048);((
                             match x3049 with
                             | `U1 x3050 -> AlgorithmIdentifier.t_to_js x3050
                             | `U2 x3051 -> RsaOaepParams.t_to_js x3051
                             | `U3 x3052 -> AesCtrParams.t_to_js x3052
                             | `U4 x3053 -> AesCbcParams.t_to_js x3053
                             | `U5 x3054 -> AesGcmParams.t_to_js x3054));((
                             match x3055 with
                             | `U1 x3056 -> AlgorithmIdentifier.t_to_js x3056
                             | `U2 x3057 ->
                                 RsaHashedImportParams.t_to_js x3057
                             | `U3 x3058 -> EcKeyImportParams.t_to_js x3058
                             | `U4 x3059 -> HmacImportParams.t_to_js x3059
                             | `U5 x3060 -> AesKeyAlgorithm.t_to_js x3060));(
                             Ojs.bool_to_js x3061);(Ojs.list_to_js
                                                      KeyUsage.t_to_js x3062)|])
    let (verify :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaPssParams.t 
                  | `U3 of EcdsaParams.t ]
          ->
          key:CryptoKey.t ->
            signature:BufferSource.t ->
              data:BufferSource.t -> bool Promise.t_1)
      =
      fun (x3074 : 'tags this) ->
        fun
          ~algorithm:(x3067 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaPssParams.t  | `U3 of EcdsaParams.t ])
          ->
          fun ~key:(x3071 : CryptoKey.t) ->
            fun ~signature:(x3072 : BufferSource.t) ->
              fun ~data:(x3073 : BufferSource.t) ->
                Promise.t_1_of_js Ojs.bool_of_js
                  (Ojs.call (this_to_js Obj.magic x3074) "verify"
                     [|((match x3067 with
                         | `U1 x3068 -> AlgorithmIdentifier.t_to_js x3068
                         | `U2 x3069 -> RsaPssParams.t_to_js x3069
                         | `U3 x3070 -> EcdsaParams.t_to_js x3070));(
                       CryptoKey.t_to_js x3071);(BufferSource.t_to_js x3072);(
                       BufferSource.t_to_js x3073)|])
    let (wrapKey :
      'tags this ->
        format:KeyFormat.t ->
          key:CryptoKey.t ->
            wrappingKey:CryptoKey.t ->
              wrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                            | `U2 of RsaOaepParams.t 
                            | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                            | `U5 of AesGcmParams.t ]
                -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3086 : 'tags this) ->
        fun ~format:(x3077 : KeyFormat.t) ->
          fun ~key:(x3078 : CryptoKey.t) ->
            fun ~wrappingKey:(x3079 : CryptoKey.t) ->
              fun
                ~wrapAlgorithm:(x3080 :
                                 [ `U1 of AlgorithmIdentifier.t 
                                 | `U2 of RsaOaepParams.t 
                                 | `U3 of AesCtrParams.t 
                                 | `U4 of AesCbcParams.t 
                                 | `U5 of AesGcmParams.t ])
                ->
                Promise.t_1_of_js ArrayBuffer.t_0_of_js
                  (Ojs.call (this_to_js Obj.magic x3086) "wrapKey"
                     [|(KeyFormat.t_to_js x3077);(CryptoKey.t_to_js x3078);(
                       CryptoKey.t_to_js x3079);((match x3080 with
                                                  | `U1 x3081 ->
                                                      AlgorithmIdentifier.t_to_js
                                                        x3081
                                                  | `U2 x3082 ->
                                                      RsaOaepParams.t_to_js
                                                        x3082
                                                  | `U3 x3083 ->
                                                      AesCtrParams.t_to_js
                                                        x3083
                                                  | `U4 x3084 ->
                                                      AesCbcParams.t_to_js
                                                        x3084
                                                  | `U5 x3085 ->
                                                      AesGcmParams.t_to_js
                                                        x3085))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SubtleCrypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SubtleCrypto") [||])
  end
module CryptoStatic =
  struct
    let (subtle : unit -> SubtleCrypto.t) =
      fun () ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "crypto")
             "subtle")
    let (getRandomValues : 'T -> 'T) =
      fun (x3089 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto")
             "getRandomValues" [|(Obj.magic x3089)|])
  end
module ConsoleStatic =
  struct
    let (assert_ : ?condition:bool -> data:any list -> unit -> unit) =
      fun ?condition:(x3090 : bool option) ->
        fun ~data:(x3091 : any list) ->
          fun () ->
            ignore
              (let x3095 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3095 "assert") "apply"
                 [|x3095;((let x3092 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3090 with
                            | Some x3094 ->
                                ignore
                                  (Ojs.call x3092 "push"
                                     [|(Ojs.bool_to_js x3094)|])
                            | None -> ());
                           List.iter
                             (fun (x3093 : any) ->
                                ignore
                                  (Ojs.call x3092 "push"
                                     [|(any_to_js x3093)|])) x3091;
                           x3092))|])
    let (clear : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "clear" [||])
    let (count : ?label:string -> unit -> unit) =
      fun ?label:(x3096 : string option) ->
        fun () ->
          ignore
            (let x3099 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3099 "count") "apply"
               [|x3099;((let x3097 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3096 with
                          | Some x3098 ->
                              ignore
                                (Ojs.call x3097 "push"
                                   [|(Ojs.string_to_js x3098)|])
                          | None -> ());
                         x3097))|])
    let (countReset : ?label:string -> unit -> unit) =
      fun ?label:(x3100 : string option) ->
        fun () ->
          ignore
            (let x3103 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3103 "countReset") "apply"
               [|x3103;((let x3101 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3100 with
                          | Some x3102 ->
                              ignore
                                (Ojs.call x3101 "push"
                                   [|(Ojs.string_to_js x3102)|])
                          | None -> ());
                         x3101))|])
    let (debug : any list -> unit) =
      fun (x3104 : any list) ->
        ignore
          (let x3107 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3107 "debug") "apply"
             [|x3107;((let x3105 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3106 : any) ->
                            ignore
                              (Ojs.call x3105 "push" [|(any_to_js x3106)|]))
                         x3104;
                       x3105))|])
    let (dir : ?item:any -> ?options:any -> unit -> unit) =
      fun ?item:(x3108 : any option) ->
        fun ?options:(x3109 : any option) ->
          fun () ->
            ignore
              (let x3113 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3113 "dir") "apply"
                 [|x3113;((let x3110 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3108 with
                            | Some x3112 ->
                                ignore
                                  (Ojs.call x3110 "push"
                                     [|(any_to_js x3112)|])
                            | None -> ());
                           (match x3109 with
                            | Some x3111 ->
                                ignore
                                  (Ojs.call x3110 "push"
                                     [|(any_to_js x3111)|])
                            | None -> ());
                           x3110))|])
    let (dirxml : any list -> unit) =
      fun (x3114 : any list) ->
        ignore
          (let x3117 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3117 "dirxml") "apply"
             [|x3117;((let x3115 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3116 : any) ->
                            ignore
                              (Ojs.call x3115 "push" [|(any_to_js x3116)|]))
                         x3114;
                       x3115))|])
    let (error : any list -> unit) =
      fun (x3118 : any list) ->
        ignore
          (let x3121 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3121 "error") "apply"
             [|x3121;((let x3119 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3120 : any) ->
                            ignore
                              (Ojs.call x3119 "push" [|(any_to_js x3120)|]))
                         x3118;
                       x3119))|])
    let (group : any list -> unit) =
      fun (x3122 : any list) ->
        ignore
          (let x3125 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3125 "group") "apply"
             [|x3125;((let x3123 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3124 : any) ->
                            ignore
                              (Ojs.call x3123 "push" [|(any_to_js x3124)|]))
                         x3122;
                       x3123))|])
    let (groupCollapsed : any list -> unit) =
      fun (x3126 : any list) ->
        ignore
          (let x3129 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3129 "groupCollapsed") "apply"
             [|x3129;((let x3127 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3128 : any) ->
                            ignore
                              (Ojs.call x3127 "push" [|(any_to_js x3128)|]))
                         x3126;
                       x3127))|])
    let (groupEnd : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "groupEnd" [||])
    let (info : any list -> unit) =
      fun (x3130 : any list) ->
        ignore
          (let x3133 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3133 "info") "apply"
             [|x3133;((let x3131 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3132 : any) ->
                            ignore
                              (Ojs.call x3131 "push" [|(any_to_js x3132)|]))
                         x3130;
                       x3131))|])
    let (log : any list -> unit) =
      fun (x3134 : any list) ->
        ignore
          (let x3137 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3137 "log") "apply"
             [|x3137;((let x3135 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3136 : any) ->
                            ignore
                              (Ojs.call x3135 "push" [|(any_to_js x3136)|]))
                         x3134;
                       x3135))|])
    let (table : ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun ?tabularData:(x3138 : any option) ->
        fun ?properties:(x3139 : string list option) ->
          fun () ->
            ignore
              (let x3144 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3144 "table") "apply"
                 [|x3144;((let x3140 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3138 with
                            | Some x3143 ->
                                ignore
                                  (Ojs.call x3140 "push"
                                     [|(any_to_js x3143)|])
                            | None -> ());
                           (match x3139 with
                            | Some x3141 ->
                                ignore
                                  (Ojs.call x3140 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x3141)|])
                            | None -> ());
                           x3140))|])
    let (time : ?label:string -> unit -> unit) =
      fun ?label:(x3145 : string option) ->
        fun () ->
          ignore
            (let x3148 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3148 "time") "apply"
               [|x3148;((let x3146 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3145 with
                          | Some x3147 ->
                              ignore
                                (Ojs.call x3146 "push"
                                   [|(Ojs.string_to_js x3147)|])
                          | None -> ());
                         x3146))|])
    let (timeEnd : ?label:string -> unit -> unit) =
      fun ?label:(x3149 : string option) ->
        fun () ->
          ignore
            (let x3152 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3152 "timeEnd") "apply"
               [|x3152;((let x3150 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3149 with
                          | Some x3151 ->
                              ignore
                                (Ojs.call x3150 "push"
                                   [|(Ojs.string_to_js x3151)|])
                          | None -> ());
                         x3150))|])
    let (timeLog : ?label:string -> data:any list -> unit -> unit) =
      fun ?label:(x3153 : string option) ->
        fun ~data:(x3154 : any list) ->
          fun () ->
            ignore
              (let x3158 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3158 "timeLog") "apply"
                 [|x3158;((let x3155 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3153 with
                            | Some x3157 ->
                                ignore
                                  (Ojs.call x3155 "push"
                                     [|(Ojs.string_to_js x3157)|])
                            | None -> ());
                           List.iter
                             (fun (x3156 : any) ->
                                ignore
                                  (Ojs.call x3155 "push"
                                     [|(any_to_js x3156)|])) x3154;
                           x3155))|])
    let (timeStamp : ?label:string -> unit -> unit) =
      fun ?label:(x3159 : string option) ->
        fun () ->
          ignore
            (let x3162 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3162 "timeStamp") "apply"
               [|x3162;((let x3160 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3159 with
                          | Some x3161 ->
                              ignore
                                (Ojs.call x3160 "push"
                                   [|(Ojs.string_to_js x3161)|])
                          | None -> ());
                         x3160))|])
    let (trace : any list -> unit) =
      fun (x3163 : any list) ->
        ignore
          (let x3166 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3166 "trace") "apply"
             [|x3166;((let x3164 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3165 : any) ->
                            ignore
                              (Ojs.call x3164 "push" [|(any_to_js x3165)|]))
                         x3163;
                       x3164))|])
    let (warn : any list -> unit) =
      fun (x3167 : any list) ->
        ignore
          (let x3170 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3170 "warn") "apply"
             [|x3170;((let x3168 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3169 : any) ->
                            ignore
                              (Ojs.call x3168 "push" [|(any_to_js x3169)|]))
                         x3167;
                       x3168))|])
  end
module CacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3172 : Ojs.t) -> t_of_js x3172
    and t_0_to_js : t_0 -> Ojs.t = fun (x3171 : t) -> t_to_js x3171
    type tags = [ `CacheQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3175 : Ojs.t) -> intf_of_js __tags_of_js x3175
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3173 : __tags intf) -> intf_to_js __tags_to_js x3173
    let (get_ignoreMethod : 'tags this -> bool) =
      fun (x3177 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3177) "ignoreMethod")
    let (set_ignoreMethod : 'tags this -> bool -> unit) =
      fun (x3179 : 'tags this) ->
        fun (x3180 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3179) "ignoreMethod"
            (Ojs.bool_to_js x3180)
    let (get_ignoreSearch : 'tags this -> bool) =
      fun (x3182 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3182) "ignoreSearch")
    let (set_ignoreSearch : 'tags this -> bool -> unit) =
      fun (x3184 : 'tags this) ->
        fun (x3185 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3184) "ignoreSearch"
            (Ojs.bool_to_js x3185)
    let (get_ignoreVary : 'tags this -> bool) =
      fun (x3187 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3187) "ignoreVary")
    let (set_ignoreVary : 'tags this -> bool -> unit) =
      fun (x3189 : 'tags this) ->
        fun (x3190 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3189) "ignoreVary"
            (Ojs.bool_to_js x3190)
    let (create :
      ignoreMethod:bool -> ignoreSearch:bool -> ignoreVary:bool -> unit -> t)
      =
      fun ~ignoreMethod:(x3192 : bool) ->
        fun ~ignoreSearch:(x3193 : bool) ->
          fun ~ignoreVary:(x3194 : bool) ->
            fun () ->
              let x3195 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x3195 "ignoreMethod" (Ojs.bool_to_js x3192);
              Ojs.set_prop_ascii x3195 "ignoreSearch" (Ojs.bool_to_js x3193);
              Ojs.set_prop_ascii x3195 "ignoreVary" (Ojs.bool_to_js x3194);
              t_of_js x3195
    let cast_from = Obj.magic
  end
module MultiCacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions  | `MultiCacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3197 : Ojs.t) -> t_of_js x3197
    and t_0_to_js : t_0 -> Ojs.t = fun (x3196 : t) -> t_to_js x3196
    type tags = [ `CacheQueryOptions  | `MultiCacheQueryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MultiCacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3200 : Ojs.t) -> intf_of_js __tags_of_js x3200
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3198 : __tags intf) -> intf_to_js __tags_to_js x3198
    let (get_cacheName : 'tags this -> string) =
      fun (x3202 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3202) "cacheName")
    let (set_cacheName : 'tags this -> string -> unit) =
      fun (x3204 : 'tags this) ->
        fun (x3205 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3204) "cacheName"
            (Ojs.string_to_js x3205)
    let (create : cacheName:string -> unit -> t) =
      fun ~cacheName:(x3207 : string) ->
        fun () ->
          let x3208 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3208 "cacheName" (Ojs.string_to_js x3207);
          t_of_js x3208
    let cast_from = Obj.magic
  end
module URLSearchParams =
  struct
    type t =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3210 : Ojs.t) -> t_of_js x3210
    and t_0_to_js : t_0 -> Ojs.t = fun (x3209 : t) -> t_to_js x3209
    type tags =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URLSearchParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3213 : Ojs.t) -> intf_of_js __tags_of_js x3213
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3211 : __tags intf) -> intf_to_js __tags_to_js x3211
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x3215 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x3217 : Ojs.t) ->
             let x3218 = x3217 in
             ((Ojs.string_of_js (Ojs.array_get x3218 0)),
               (Ojs.string_of_js (Ojs.array_get x3218 1))))
          (Ojs.call (this_to_js Obj.magic x3215) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x3219 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3219) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x3222 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3222) "values" [||])
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x3227 : 'tags this) ->
        fun ~name:(x3225 : string) ->
          fun ~value:(x3226 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3227) "append"
                 [|(Ojs.string_to_js x3225);(Ojs.string_to_js x3226)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x3230 : 'tags this) ->
        fun ~name:(x3229 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x3230) "delete"
               [|(Ojs.string_to_js x3229)|])
    let (get_ : 'tags this -> name:string -> string option) =
      fun (x3233 : 'tags this) ->
        fun ~name:(x3232 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3233) "get"
               [|(Ojs.string_to_js x3232)|])
    let (getAll : 'tags this -> name:string -> string list) =
      fun (x3237 : 'tags this) ->
        fun ~name:(x3236 : string) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3237) "getAll"
               [|(Ojs.string_to_js x3236)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x3241 : 'tags this) ->
        fun ~name:(x3240 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x3241) "has"
               [|(Ojs.string_to_js x3240)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x3245 : 'tags this) ->
        fun ~name:(x3243 : string) ->
          fun ~value:(x3244 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3245) "set"
                 [|(Ojs.string_to_js x3243);(Ojs.string_to_js x3244)|])
    let (sort : 'tags this -> unit) =
      fun (x3247 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x3247) "sort" [||])
    let (toString : 'tags this -> string) =
      fun (x3249 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3249) "toString" [||])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3258 : 'tags this) ->
        fun
          ~callbackfn:(x3251 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x3252 : any option) ->
            fun () ->
              ignore
                (let x3260 = this_to_js Obj.magic x3258 in
                 Ojs.call (Ojs.get_prop_ascii x3260 "forEach") "apply"
                   [|x3260;((let x3253 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3253 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3255 : Ojs.t) ->
                                          fun (x3256 : Ojs.t) ->
                                            fun (x3257 : Ojs.t) ->
                                              x3251
                                                ~value:(Ojs.string_of_js
                                                          x3255)
                                                ~key:(Ojs.string_of_js x3256)
                                                ~parent:(t_of_js x3257)))|]);
                             (match x3252 with
                              | Some x3254 ->
                                  ignore
                                    (Ojs.call x3253 "push"
                                       [|(any_to_js x3254)|])
                              | None -> ());
                             x3253))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "URLSearchParams") "prototype")
    let (create :
      ?init:[ `U1 of string list list  | `U2 of (string, string) Record.t_2 
            | `U3 of string  | `U4 of t ]
        -> unit -> t)
      =
      fun
        ?init:(x3261 :
                [ `U1 of string list list 
                | `U2 of (string, string) Record.t_2  | `U3 of string 
                | `U4 of t ] option)
        ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
               (let x3262 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x3261 with
                 | Some x3263 ->
                     ignore
                       (Ojs.call x3262 "push"
                          [|((match x3263 with
                              | `U1 x3264 ->
                                  Ojs.list_to_js
                                    (fun (x3265 : string list) ->
                                       Ojs.list_to_js Ojs.string_to_js x3265)
                                    x3264
                              | `U2 x3267 ->
                                  Record.t_2_to_js Ojs.string_to_js
                                    Ojs.string_to_js x3267
                              | `U3 x3270 -> Ojs.string_to_js x3270
                              | `U4 x3271 -> t_to_js x3271))|])
                 | None -> ());
                x3262))
    let (toString' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
             "toString" [||])
  end
module ReadableStreamDefaultController =
  struct
    type 'R t = [ `ReadableStreamDefaultController of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3274 : Ojs.t) -> t_of_js __R_of_js x3274
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3272 : __R t) -> t_to_js __R_to_js x3272
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3278 : Ojs.t) -> t_of_js any_of_js x3278
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3276 : any t) -> t_to_js any_to_js x3276
    type 'R tags = [ `ReadableStreamDefaultController of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultController of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3282 : Ojs.t) -> intf_of_js __tags_of_js x3282
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3280 : __tags intf) -> intf_to_js __tags_to_js x3280
    let (get_desiredSize : ('tags, 'R) this -> float option) =
      fun (x3284 : ('tags, 'R) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3284)
             "desiredSize")
    let (close : ('tags, 'R) this -> unit) =
      fun (x3288 : ('tags, 'R) this) ->
        ignore (Ojs.call (this_to_js Obj.magic Obj.magic x3288) "close" [||])
    let (enqueue : ('tags, 'R) this -> ?chunk:'R -> unit -> unit) =
      fun (x3294 : ('tags, 'R) this) ->
        fun ?chunk:(x3291 : 'R option) ->
          fun () ->
            ignore
              (let x3297 = this_to_js Obj.magic Obj.magic x3294 in
               Ojs.call (Ojs.get_prop_ascii x3297 "enqueue") "apply"
                 [|x3297;((let x3292 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3291 with
                            | Some x3293 ->
                                ignore
                                  (Ojs.call x3292 "push"
                                     [|(Obj.magic x3293)|])
                            | None -> ());
                           x3292))|])
    let (error : ('tags, 'R) this -> ?e:any -> unit -> unit) =
      fun (x3301 : ('tags, 'R) this) ->
        fun ?e:(x3298 : any option) ->
          fun () ->
            ignore
              (let x3304 = this_to_js Obj.magic Obj.magic x3301 in
               Ojs.call (Ojs.get_prop_ascii x3304 "error") "apply"
                 [|x3304;((let x3299 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3298 with
                            | Some x3300 ->
                                ignore
                                  (Ojs.call x3299 "push"
                                     [|(any_to_js x3300)|])
                            | None -> ());
                           x3299))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             [||])
  end
module ReadableStreamController =
  struct
    type 'T t = 'T ReadableStreamDefaultController.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3307 : Ojs.t) ->
          ReadableStreamDefaultController.t_of_js __T_of_js x3307
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3305 : __T ReadableStreamDefaultController.t) ->
          ReadableStreamDefaultController.t_to_js __T_to_js x3305
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3311 : Ojs.t) -> t_of_js __T_of_js x3311
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3309 : __T t) -> t_to_js __T_to_js x3309
  end
module UnderlyingSourceStartCallback =
  struct
    type 'R t = [ `UnderlyingSourceStartCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3315 : Ojs.t) -> t_of_js __R_of_js x3315
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3313 : __R t) -> t_to_js __R_to_js x3313
    type 'R tags = [ `UnderlyingSourceStartCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourceStartCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3319 : Ojs.t) -> intf_of_js __tags_of_js x3319
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3317 : __tags intf) -> intf_to_js __tags_to_js x3317
    let (apply :
      ('tags, 'R) this -> controller:'R ReadableStreamController.t -> any) =
      fun (x3323 : ('tags, 'R) this) ->
        fun ~controller:(x3321 : 'R ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3323)
               [|(ReadableStreamController.t_to_js Obj.magic x3321)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourcePullCallback =
  struct
    type 'R t = [ `UnderlyingSourcePullCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3328 : Ojs.t) -> t_of_js __R_of_js x3328
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3326 : __R t) -> t_to_js __R_to_js x3326
    type 'R tags = [ `UnderlyingSourcePullCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourcePullCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3332 : Ojs.t) -> intf_of_js __tags_of_js x3332
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3330 : __tags intf) -> intf_to_js __tags_to_js x3330
    let (apply :
      ('tags, 'R) this ->
        controller:'R ReadableStreamController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3336 : ('tags, 'R) this) ->
        fun ~controller:(x3334 : 'R ReadableStreamController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x3340 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x3340)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3336)
               [|(ReadableStreamController.t_to_js Obj.magic x3334)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourceCancelCallback =
  struct
    type t = [ `UnderlyingSourceCancelCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3343 : Ojs.t) -> t_of_js x3343
    and t_0_to_js : t_0 -> Ojs.t = fun (x3342 : t) -> t_to_js x3342
    type tags = [ `UnderlyingSourceCancelCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSourceCancelCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3346 : Ojs.t) -> intf_of_js __tags_of_js x3346
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3344 : __tags intf) -> intf_to_js __tags_to_js x3344
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3351 : 'tags this) ->
        fun ?reason:(x3348 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x3354 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x3354)
              (Ojs.call (this_to_js Obj.magic x3351) "apply"
                 [|Ojs.null;((let x3349 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3348 with
                               | Some x3350 ->
                                   ignore
                                     (Ojs.call x3349 "push"
                                        [|(any_to_js x3350)|])
                               | None -> ());
                              x3349))|])
    let cast_from = Obj.magic
  end
module UnderlyingSource =
  struct
    type 'R t = [ `UnderlyingSource of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3358 : Ojs.t) -> t_of_js __R_of_js x3358
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3356 : __R t) -> t_to_js __R_to_js x3356
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3362 : Ojs.t) -> t_of_js any_of_js x3362
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3360 : any t) -> t_to_js any_to_js x3360
    type 'R tags = [ `UnderlyingSource of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSource of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3366 : Ojs.t) -> intf_of_js __tags_of_js x3366
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3364 : __tags intf) -> intf_to_js __tags_to_js x3364
    let (get_cancel : ('tags, 'R) this -> UnderlyingSourceCancelCallback.t) =
      fun (x3368 : ('tags, 'R) this) ->
        UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3368) "cancel")
    let (set_cancel :
      ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x3371 : ('tags, 'R) this) ->
        fun (x3372 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3371) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x3372)
    let (get_pull : ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t) =
      fun (x3375 : ('tags, 'R) this) ->
        UnderlyingSourcePullCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3375) "pull")
    let (set_pull :
      ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t -> unit) =
      fun (x3379 : ('tags, 'R) this) ->
        fun (x3380 : 'R UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3379) "pull"
            (UnderlyingSourcePullCallback.t_to_js Obj.magic x3380)
    let (get_start : ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t)
      =
      fun (x3384 : ('tags, 'R) this) ->
        UnderlyingSourceStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3384) "start")
    let (set_start :
      ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t -> unit) =
      fun (x3388 : ('tags, 'R) this) ->
        fun (x3389 : 'R UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3388) "start"
            (UnderlyingSourceStartCallback.t_to_js Obj.magic x3389)
    let (get_type : ('tags, 'R) this -> undefined) =
      fun (x3393 : ('tags, 'R) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3393) "type")
    let (set_type : ('tags, 'R) this -> undefined -> unit) =
      fun (x3396 : ('tags, 'R) this) ->
        fun (x3397 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3396) "type"
            (undefined_to_js x3397)
    let (create :
      cancel:UnderlyingSourceCancelCallback.t ->
        pull:'R UnderlyingSourcePullCallback.t ->
          start:'R UnderlyingSourceStartCallback.t ->
            ?type_:never -> unit -> 'R t)
      =
      fun ~cancel:(x3400 : UnderlyingSourceCancelCallback.t) ->
        fun ~pull:(x3401 : 'R UnderlyingSourcePullCallback.t) ->
          fun ~start:(x3402 : 'R UnderlyingSourceStartCallback.t) ->
            fun ?type_:(x3403 : never option) ->
              fun () ->
                let x3404 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x3404 "cancel"
                  (UnderlyingSourceCancelCallback.t_to_js x3400);
                Ojs.set_prop_ascii x3404 "pull"
                  (UnderlyingSourcePullCallback.t_to_js Obj.magic x3401);
                Ojs.set_prop_ascii x3404 "start"
                  (UnderlyingSourceStartCallback.t_to_js Obj.magic x3402);
                (match x3403 with
                 | Some x3406 ->
                     Ojs.set_prop_ascii x3404 "type" (never_to_js x3406)
                 | None -> ());
                t_of_js Obj.magic x3404
    let cast_from = Obj.magic
  end
module StreamPipeOptions =
  struct
    type t = [ `StreamPipeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3410 : Ojs.t) -> t_of_js x3410
    and t_0_to_js : t_0 -> Ojs.t = fun (x3409 : t) -> t_to_js x3409
    type tags = [ `StreamPipeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StreamPipeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3413 : Ojs.t) -> intf_of_js __tags_of_js x3413
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3411 : __tags intf) -> intf_to_js __tags_to_js x3411
    let (get_preventAbort : 'tags this -> bool) =
      fun (x3415 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3415) "preventAbort")
    let (set_preventAbort : 'tags this -> bool -> unit) =
      fun (x3417 : 'tags this) ->
        fun (x3418 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3417) "preventAbort"
            (Ojs.bool_to_js x3418)
    let (get_preventCancel : 'tags this -> bool) =
      fun (x3420 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3420) "preventCancel")
    let (set_preventCancel : 'tags this -> bool -> unit) =
      fun (x3422 : 'tags this) ->
        fun (x3423 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3422) "preventCancel"
            (Ojs.bool_to_js x3423)
    let (get_preventClose : 'tags this -> bool) =
      fun (x3425 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3425) "preventClose")
    let (set_preventClose : 'tags this -> bool -> unit) =
      fun (x3427 : 'tags this) ->
        fun (x3428 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3427) "preventClose"
            (Ojs.bool_to_js x3428)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x3430 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3430) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x3432 : 'tags this) ->
        fun (x3433 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3432) "signal"
            (AbortSignal.t_to_js x3433)
    let (create :
      preventAbort:bool ->
        preventCancel:bool ->
          preventClose:bool -> signal:AbortSignal.t -> unit -> t)
      =
      fun ~preventAbort:(x3435 : bool) ->
        fun ~preventCancel:(x3436 : bool) ->
          fun ~preventClose:(x3437 : bool) ->
            fun ~signal:(x3438 : AbortSignal.t) ->
              fun () ->
                let x3439 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x3439 "preventAbort"
                  (Ojs.bool_to_js x3435);
                Ojs.set_prop_ascii x3439 "preventCancel"
                  (Ojs.bool_to_js x3436);
                Ojs.set_prop_ascii x3439 "preventClose"
                  (Ojs.bool_to_js x3437);
                Ojs.set_prop_ascii x3439 "signal" (AbortSignal.t_to_js x3438);
                t_of_js x3439
    let cast_from = Obj.magic
  end
module WritableStreamDefaultController =
  struct
    type t = [ `WritableStreamDefaultController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3441 : Ojs.t) -> t_of_js x3441
    and t_0_to_js : t_0 -> Ojs.t = fun (x3440 : t) -> t_to_js x3440
    type tags = [ `WritableStreamDefaultController ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3444 : Ojs.t) -> intf_of_js __tags_of_js x3444
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3442 : __tags intf) -> intf_to_js __tags_to_js x3442
    let (error : 'tags this -> ?e:any -> unit -> unit) =
      fun (x3449 : 'tags this) ->
        fun ?e:(x3446 : any option) ->
          fun () ->
            ignore
              (let x3451 = this_to_js Obj.magic x3449 in
               Ojs.call (Ojs.get_prop_ascii x3451 "error") "apply"
                 [|x3451;((let x3447 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3446 with
                            | Some x3448 ->
                                ignore
                                  (Ojs.call x3447 "push"
                                     [|(any_to_js x3448)|])
                            | None -> ());
                           x3447))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             [||])
  end
module UnderlyingSinkWriteCallback =
  struct
    type 'W t = [ `UnderlyingSinkWriteCallback of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3454 : Ojs.t) -> t_of_js __W_of_js x3454
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3452 : __W t) -> t_to_js __W_to_js x3452
    type 'W tags = [ `UnderlyingSinkWriteCallback of 'W ]
    type 'W tags_1 = 'W tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSinkWriteCallback of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3458 : Ojs.t) -> intf_of_js __tags_of_js x3458
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3456 : __tags intf) -> intf_to_js __tags_to_js x3456
    let (apply :
      ('tags, 'W) this ->
        chunk:'W ->
          controller:WritableStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3462 : ('tags, 'W) this) ->
        fun ~chunk:(x3460 : 'W) ->
          fun ~controller:(x3461 : WritableStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3466 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x3466)
              (Ojs.apply (this_to_js Obj.magic Obj.magic x3462)
                 [|(Obj.magic x3460);(WritableStreamDefaultController.t_to_js
                                        x3461)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkStartCallback =
  struct
    type t = [ `UnderlyingSinkStartCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3469 : Ojs.t) -> t_of_js x3469
    and t_0_to_js : t_0 -> Ojs.t = fun (x3468 : t) -> t_to_js x3468
    type tags = [ `UnderlyingSinkStartCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkStartCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3472 : Ojs.t) -> intf_of_js __tags_of_js x3472
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3470 : __tags intf) -> intf_to_js __tags_to_js x3470
    let (apply :
      'tags this -> controller:WritableStreamDefaultController.t -> any) =
      fun (x3475 : 'tags this) ->
        fun ~controller:(x3474 : WritableStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x3475)
               [|(WritableStreamDefaultController.t_to_js x3474)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkCloseCallback =
  struct
    type t = [ `UnderlyingSinkCloseCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3478 : Ojs.t) -> t_of_js x3478
    and t_0_to_js : t_0 -> Ojs.t = fun (x3477 : t) -> t_to_js x3477
    type tags = [ `UnderlyingSinkCloseCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkCloseCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3481 : Ojs.t) -> intf_of_js __tags_of_js x3481
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3479 : __tags intf) -> intf_to_js __tags_to_js x3479
    let (apply : 'tags this -> (unit, unit PromiseLike.t_1) union2) =
      fun (x3483 : 'tags this) ->
        union2_of_js Ojs.unit_of_js
          (fun (x3486 : Ojs.t) -> PromiseLike.t_1_of_js Ojs.unit_of_js x3486)
          (Ojs.apply (this_to_js Obj.magic x3483) [||])
    let cast_from = Obj.magic
  end
module UnderlyingSinkAbortCallback =
  struct
    type t = [ `UnderlyingSinkAbortCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3489 : Ojs.t) -> t_of_js x3489
    and t_0_to_js : t_0 -> Ojs.t = fun (x3488 : t) -> t_to_js x3488
    type tags = [ `UnderlyingSinkAbortCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkAbortCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3492 : Ojs.t) -> intf_of_js __tags_of_js x3492
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3490 : __tags intf) -> intf_to_js __tags_to_js x3490
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3497 : 'tags this) ->
        fun ?reason:(x3494 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x3500 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x3500)
              (Ojs.call (this_to_js Obj.magic x3497) "apply"
                 [|Ojs.null;((let x3495 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3494 with
                               | Some x3496 ->
                                   ignore
                                     (Ojs.call x3495 "push"
                                        [|(any_to_js x3496)|])
                               | None -> ());
                              x3495))|])
    let cast_from = Obj.magic
  end
module UnderlyingSink =
  struct
    type 'W t = [ `UnderlyingSink of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3504 : Ojs.t) -> t_of_js __W_of_js x3504
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3502 : __W t) -> t_to_js __W_to_js x3502
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3508 : Ojs.t) -> t_of_js any_of_js x3508
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3506 : any t) -> t_to_js any_to_js x3506
    type 'W tags = [ `UnderlyingSink of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSink of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3512 : Ojs.t) -> intf_of_js __tags_of_js x3512
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3510 : __tags intf) -> intf_to_js __tags_to_js x3510
    let (get_abort : ('tags, 'W) this -> UnderlyingSinkAbortCallback.t) =
      fun (x3514 : ('tags, 'W) this) ->
        UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3514) "abort")
    let (set_abort :
      ('tags, 'W) this -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x3517 : ('tags, 'W) this) ->
        fun (x3518 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3517) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x3518)
    let (get_close : ('tags, 'W) this -> UnderlyingSinkCloseCallback.t) =
      fun (x3521 : ('tags, 'W) this) ->
        UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3521) "close")
    let (set_close :
      ('tags, 'W) this -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x3524 : ('tags, 'W) this) ->
        fun (x3525 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3524) "close"
            (UnderlyingSinkCloseCallback.t_to_js x3525)
    let (get_start : ('tags, 'W) this -> UnderlyingSinkStartCallback.t) =
      fun (x3528 : ('tags, 'W) this) ->
        UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3528) "start")
    let (set_start :
      ('tags, 'W) this -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x3531 : ('tags, 'W) this) ->
        fun (x3532 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3531) "start"
            (UnderlyingSinkStartCallback.t_to_js x3532)
    let (get_type : ('tags, 'W) this -> undefined) =
      fun (x3535 : ('tags, 'W) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3535) "type")
    let (set_type : ('tags, 'W) this -> undefined -> unit) =
      fun (x3538 : ('tags, 'W) this) ->
        fun (x3539 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3538) "type"
            (undefined_to_js x3539)
    let (get_write : ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t) =
      fun (x3542 : ('tags, 'W) this) ->
        UnderlyingSinkWriteCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3542) "write")
    let (set_write :
      ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t -> unit) =
      fun (x3546 : ('tags, 'W) this) ->
        fun (x3547 : 'W UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3546) "write"
            (UnderlyingSinkWriteCallback.t_to_js Obj.magic x3547)
    let (create :
      abort:UnderlyingSinkAbortCallback.t ->
        close:UnderlyingSinkCloseCallback.t ->
          start:UnderlyingSinkStartCallback.t ->
            ?type_:never ->
              write:'W UnderlyingSinkWriteCallback.t -> unit -> 'W t)
      =
      fun ~abort:(x3551 : UnderlyingSinkAbortCallback.t) ->
        fun ~close:(x3552 : UnderlyingSinkCloseCallback.t) ->
          fun ~start:(x3553 : UnderlyingSinkStartCallback.t) ->
            fun ?type_:(x3554 : never option) ->
              fun ~write:(x3555 : 'W UnderlyingSinkWriteCallback.t) ->
                fun () ->
                  let x3556 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x3556 "abort"
                    (UnderlyingSinkAbortCallback.t_to_js x3551);
                  Ojs.set_prop_ascii x3556 "close"
                    (UnderlyingSinkCloseCallback.t_to_js x3552);
                  Ojs.set_prop_ascii x3556 "start"
                    (UnderlyingSinkStartCallback.t_to_js x3553);
                  (match x3554 with
                   | Some x3559 ->
                       Ojs.set_prop_ascii x3556 "type" (never_to_js x3559)
                   | None -> ());
                  Ojs.set_prop_ascii x3556 "write"
                    (UnderlyingSinkWriteCallback.t_to_js Obj.magic x3555);
                  t_of_js Obj.magic x3556
    let cast_from = Obj.magic
  end
module QueuingStrategySize =
  struct
    type 'T t = [ `QueuingStrategySize of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3562 : Ojs.t) -> t_of_js __T_of_js x3562
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3560 : __T t) -> t_to_js __T_to_js x3560
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3566 : Ojs.t) -> t_of_js any_of_js x3566
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3564 : any t) -> t_to_js any_to_js x3564
    type 'T tags = [ `QueuingStrategySize of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategySize of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3570 : Ojs.t) -> intf_of_js __tags_of_js x3570
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3568 : __tags intf) -> intf_to_js __tags_to_js x3568
    let (apply : ('tags, 'T) this -> chunk:'T -> float) =
      fun (x3573 : ('tags, 'T) this) ->
        fun ~chunk:(x3572 : 'T) ->
          Ojs.float_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3573)
               [|(Obj.magic x3572)|])
    let cast_from = Obj.magic
  end
module QueuingStrategy =
  struct
    type 'T t = [ `QueuingStrategy of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3578 : Ojs.t) -> t_of_js __T_of_js x3578
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3576 : __T t) -> t_to_js __T_to_js x3576
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3582 : Ojs.t) -> t_of_js any_of_js x3582
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3580 : any t) -> t_to_js any_to_js x3580
    type 'T tags = [ `QueuingStrategy of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategy of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3586 : Ojs.t) -> intf_of_js __tags_of_js x3586
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3584 : __tags intf) -> intf_to_js __tags_to_js x3584
    let (get_highWaterMark : ('tags, 'T) this -> float) =
      fun (x3588 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3588)
             "highWaterMark")
    let (set_highWaterMark : ('tags, 'T) this -> float -> unit) =
      fun (x3591 : ('tags, 'T) this) ->
        fun (x3592 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3591)
            "highWaterMark" (Ojs.float_to_js x3592)
    let (get_size : ('tags, 'T) this -> 'T QueuingStrategySize.t) =
      fun (x3595 : ('tags, 'T) this) ->
        QueuingStrategySize.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3595) "size")
    let (set_size : ('tags, 'T) this -> 'T QueuingStrategySize.t -> unit) =
      fun (x3599 : ('tags, 'T) this) ->
        fun (x3600 : 'T QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3599) "size"
            (QueuingStrategySize.t_to_js Obj.magic x3600)
    let (create :
      highWaterMark:float -> size:'T QueuingStrategySize.t -> unit -> 'T t) =
      fun ~highWaterMark:(x3604 : float) ->
        fun ~size:(x3605 : 'T QueuingStrategySize.t) ->
          fun () ->
            let x3606 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3606 "highWaterMark" (Ojs.float_to_js x3604);
            Ojs.set_prop_ascii x3606 "size"
              (QueuingStrategySize.t_to_js Obj.magic x3605);
            t_of_js Obj.magic x3606
    let cast_from = Obj.magic
  end
module rec
  WritableStream:sig
                   type 'W t = [ `WritableStream of 'W ] intf
                   type 'W t_1 = 'W t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'W tags = [ `WritableStream of 'W ]
                   type 'W tags_1 = 'W tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'W tags = [ `WritableStream of 'W ]
                     type 'W tags_1 = 'W tags
                     type tags_0 = any tags]
                   type ('tags, 'W) this =
                     'tags intf constraint 'tags = [> `WritableStream of 'W ]
                   val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                   val t_1_to_js : ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'W) this -> bool
                   val abort :
                     ('tags, 'W) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val close : ('tags, 'W) this -> unit Promise.t_1
                   val getWriter :
                     ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t
                   val cast_from : ('tags, 'W) this -> 'W t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSink:'W UnderlyingSink.t ->
                       ?strategy:'W QueuingStrategy.t -> unit -> 'W t
                 end =
  struct
    type 'W t = [ `WritableStream of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3611 : Ojs.t) -> t_of_js __W_of_js x3611
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3609 : __W t) -> t_to_js __W_to_js x3609
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3615 : Ojs.t) -> t_of_js any_of_js x3615
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3613 : any t) -> t_to_js any_to_js x3613
    type 'W tags = [ `WritableStream of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStream of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3619 : Ojs.t) -> intf_of_js __tags_of_js x3619
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3617 : __tags intf) -> intf_to_js __tags_to_js x3617
    let (get_locked : ('tags, 'W) this -> bool) =
      fun (x3621 : ('tags, 'W) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3621) "locked")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x3627 : ('tags, 'W) this) ->
        fun ?reason:(x3624 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3630 = this_to_js Obj.magic Obj.magic x3627 in
               Ojs.call (Ojs.get_prop_ascii x3630 "abort") "apply"
                 [|x3630;((let x3625 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3624 with
                            | Some x3626 ->
                                ignore
                                  (Ojs.call x3625 "push"
                                     [|(any_to_js x3626)|])
                            | None -> ());
                           x3625))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x3632 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x3632) "close" [||])
    let (getWriter : ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t) =
      fun (x3636 : ('tags, 'W) this) ->
        WritableStreamDefaultWriter.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x3636) "getWriter" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStream") "prototype")
    let (create :
      ?underlyingSink:'W UnderlyingSink.t ->
        ?strategy:'W QueuingStrategy.t -> unit -> 'W t)
      =
      fun ?underlyingSink:(x3640 : 'W UnderlyingSink.t option) ->
        fun ?strategy:(x3641 : 'W QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WritableStream")
                 (let x3642 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3640 with
                   | Some x3645 ->
                       ignore
                         (Ojs.call x3642 "push"
                            [|(UnderlyingSink.t_to_js Obj.magic x3645)|])
                   | None -> ());
                  (match x3641 with
                   | Some x3643 ->
                       ignore
                         (Ojs.call x3642 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x3643)|])
                   | None -> ());
                  x3642))
  end
 and
  WritableStreamDefaultWriter:sig
                                type 'W t =
                                  [ `WritableStreamDefaultWriter of 'W ] intf
                                type 'W t_1 = 'W t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'W tags =
                                  [ `WritableStreamDefaultWriter of 'W ]
                                type 'W tags_1 = 'W tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'W tags =
                                    [ `WritableStreamDefaultWriter of 'W ]
                                  type 'W tags_1 = 'W tags
                                  type tags_0 = any tags]
                                type ('tags, 'W) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `WritableStreamDefaultWriter
                                                  of 'W ]
                                val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                                val t_1_to_js :
                                  ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val get_closed :
                                  ('tags, 'W) this -> undefined Promise.t_1
                                val get_desiredSize :
                                  ('tags, 'W) this -> float option
                                val get_ready :
                                  ('tags, 'W) this -> undefined Promise.t_1
                                val abort :
                                  ('tags, 'W) this ->
                                    ?reason:any -> unit -> unit Promise.t_1
                                val close :
                                  ('tags, 'W) this -> unit Promise.t_1
                                val releaseLock : ('tags, 'W) this -> unit
                                val write :
                                  ('tags, 'W) this ->
                                    ?chunk:'W -> unit -> unit Promise.t_1
                                val cast_from : ('tags, 'W) this -> 'W t
                                val prototype : unit -> t_0
                                val create : 'W WritableStream.t -> 'W t
                              end =
  struct
    type 'W t = [ `WritableStreamDefaultWriter of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3650 : Ojs.t) -> t_of_js __W_of_js x3650
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3648 : __W t) -> t_to_js __W_to_js x3648
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3654 : Ojs.t) -> t_of_js any_of_js x3654
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3652 : any t) -> t_to_js any_to_js x3652
    type 'W tags = [ `WritableStreamDefaultWriter of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultWriter of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3658 : Ojs.t) -> intf_of_js __tags_of_js x3658
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3656 : __tags intf) -> intf_to_js __tags_to_js x3656
    let (get_closed : ('tags, 'W) this -> undefined Promise.t_1) =
      fun (x3660 : ('tags, 'W) this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3660) "closed")
    let (get_desiredSize : ('tags, 'W) this -> float option) =
      fun (x3664 : ('tags, 'W) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3664)
             "desiredSize")
    let (get_ready : ('tags, 'W) this -> undefined Promise.t_1) =
      fun (x3668 : ('tags, 'W) this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3668) "ready")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x3675 : ('tags, 'W) this) ->
        fun ?reason:(x3672 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3678 = this_to_js Obj.magic Obj.magic x3675 in
               Ojs.call (Ojs.get_prop_ascii x3678 "abort") "apply"
                 [|x3678;((let x3673 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3672 with
                            | Some x3674 ->
                                ignore
                                  (Ojs.call x3673 "push"
                                     [|(any_to_js x3674)|])
                            | None -> ());
                           x3673))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x3680 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x3680) "close" [||])
    let (releaseLock : ('tags, 'W) this -> unit) =
      fun (x3684 : ('tags, 'W) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x3684) "releaseLock" [||])
    let (write : ('tags, 'W) this -> ?chunk:'W -> unit -> unit Promise.t_1) =
      fun (x3690 : ('tags, 'W) this) ->
        fun ?chunk:(x3687 : 'W option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3693 = this_to_js Obj.magic Obj.magic x3690 in
               Ojs.call (Ojs.get_prop_ascii x3693 "write") "apply"
                 [|x3693;((let x3688 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3687 with
                            | Some x3689 ->
                                ignore
                                  (Ojs.call x3688 "push"
                                     [|(Obj.magic x3689)|])
                            | None -> ());
                           x3688))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             "prototype")
    let (create : 'W WritableStream.t -> 'W t) =
      fun (x3695 : 'W WritableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             [|(WritableStream.t_to_js Obj.magic x3695)|])
  end
module ReadableStreamGenericReader =
  struct
    type t = [ `ReadableStreamGenericReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3699 : Ojs.t) -> t_of_js x3699
    and t_0_to_js : t_0 -> Ojs.t = fun (x3698 : t) -> t_to_js x3698
    type tags = [ `ReadableStreamGenericReader ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamGenericReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3702 : Ojs.t) -> intf_of_js __tags_of_js x3702
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3700 : __tags intf) -> intf_to_js __tags_to_js x3700
    let (get_closed : 'tags this -> undefined Promise.t_1) =
      fun (x3704 : 'tags this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3704) "closed")
    let (cancel : 'tags this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x3710 : 'tags this) ->
        fun ?reason:(x3707 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3712 = this_to_js Obj.magic x3710 in
               Ojs.call (Ojs.get_prop_ascii x3712 "cancel") "apply"
                 [|x3712;((let x3708 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3707 with
                            | Some x3709 ->
                                ignore
                                  (Ojs.call x3708 "push"
                                     [|(any_to_js x3709)|])
                            | None -> ());
                           x3708))|])
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadValueResult =
  struct
    type 'T t = [ `ReadableStreamDefaultReadValueResult of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3716 : Ojs.t) -> t_of_js __T_of_js x3716
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3714 : __T t) -> t_to_js __T_to_js x3714
    type 'T tags = [ `ReadableStreamDefaultReadValueResult of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultReadValueResult of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3720 : Ojs.t) -> intf_of_js __tags_of_js x3720
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3718 : __tags intf) -> intf_to_js __tags_to_js x3718
    let (get_done : ('tags, 'T) this -> [ `L_b_false ]) =
      fun (x3722 : ('tags, 'T) this) ->
        let x3725 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3722) "done" in
        match Ojs.bool_of_js x3725 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : ('tags, 'T) this -> [ `L_b_false ] -> unit) =
      fun (x3726 : ('tags, 'T) this) ->
        fun (x3727 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3726) "done"
            (match x3727 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : ('tags, 'T) this -> 'T) =
      fun (x3730 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3730) "value")
    let (set_value : ('tags, 'T) this -> 'T -> unit) =
      fun (x3733 : ('tags, 'T) this) ->
        fun (x3734 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3733) "value"
            (Obj.magic x3734)
    let (create : done_:[ `L_b_false ] -> value:'T -> unit -> 'T t) =
      fun ~done_:(x3737 : [ `L_b_false ]) ->
        fun ~value:(x3738 : 'T) ->
          fun () ->
            let x3739 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3739 "done"
              (match x3737 with | `L_b_false -> Ojs.bool_to_js false);
            Ojs.set_prop_ascii x3739 "value" (Obj.magic x3738);
            t_of_js Obj.magic x3739
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadDoneResult =
  struct
    type t = [ `ReadableStreamDefaultReadDoneResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3742 : Ojs.t) -> t_of_js x3742
    and t_0_to_js : t_0 -> Ojs.t = fun (x3741 : t) -> t_to_js x3741
    type tags = [ `ReadableStreamDefaultReadDoneResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReadDoneResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3745 : Ojs.t) -> intf_of_js __tags_of_js x3745
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3743 : __tags intf) -> intf_to_js __tags_to_js x3743
    let (get_done : 'tags this -> [ `L_b_true ]) =
      fun (x3747 : 'tags this) ->
        let x3749 = Ojs.get_prop_ascii (this_to_js Obj.magic x3747) "done" in
        match Ojs.bool_of_js x3749 with
        | true -> `L_b_true
        | _ -> assert false
    let (set_done : 'tags this -> [ `L_b_true ] -> unit) =
      fun (x3750 : 'tags this) ->
        fun (x3751 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3750) "done"
            (match x3751 with | `L_b_true -> Ojs.bool_to_js true)
    let (get_value : 'tags this -> undefined) =
      fun (x3753 : 'tags this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3753) "value")
    let (set_value : 'tags this -> undefined -> unit) =
      fun (x3755 : 'tags this) ->
        fun (x3756 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3755) "value"
            (undefined_to_js x3756)
    let (create : done_:[ `L_b_true ] -> ?value:never -> unit -> t) =
      fun ~done_:(x3758 : [ `L_b_true ]) ->
        fun ?value:(x3759 : never option) ->
          fun () ->
            let x3760 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3760 "done"
              (match x3758 with | `L_b_true -> Ojs.bool_to_js true);
            (match x3759 with
             | Some x3761 ->
                 Ojs.set_prop_ascii x3760 "value" (never_to_js x3761)
             | None -> ());
            t_of_js x3760
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadResult =
  struct
    type 'T t =
      [ `U_b_false of 'T ReadableStreamDefaultReadValueResult.t 
      | `U_b_true of ReadableStreamDefaultReadDoneResult.t ]
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3766 : Ojs.t) ->
          let x3767 = x3766 in
          match Ojs.bool_of_js (Ojs.get_prop_ascii x3767 "done") with
          | false ->
              `U_b_false
                (ReadableStreamDefaultReadValueResult.t_of_js __T_of_js x3767)
          | true ->
              `U_b_true (ReadableStreamDefaultReadDoneResult.t_of_js x3767)
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun
          (x3762 :
            [ `U_b_false of __T ReadableStreamDefaultReadValueResult.t 
            | `U_b_true of ReadableStreamDefaultReadDoneResult.t ])
          ->
          match x3762 with
          | `U_b_false x3763 ->
              ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x3763
          | `U_b_true x3765 ->
              ReadableStreamDefaultReadDoneResult.t_to_js x3765
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3771 : Ojs.t) -> t_of_js __T_of_js x3771
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3769 : __T t) -> t_to_js __T_to_js x3769
  end
module rec
  ReadableStream:sig
                   type 'R t = [ `ReadableStream of 'R ] intf
                   type 'R t_1 = 'R t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'R tags = [ `ReadableStream of 'R ]
                   type 'R tags_1 = 'R tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'R tags = [ `ReadableStream of 'R ]
                     type 'R tags_1 = 'R tags
                     type tags_0 = any tags]
                   type ('tags, 'R) this =
                     'tags intf constraint 'tags = [> `ReadableStream of 'R ]
                   val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                   val t_1_to_js : ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'R) this -> bool
                   val cancel :
                     ('tags, 'R) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val getReader :
                     ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t
                   val pipeThrough :
                     ('tags, 'R) this ->
                       transform:('T, 'R) ReadableWritablePair.t ->
                         ?options:StreamPipeOptions.t -> unit -> 'T t
                   val pipeTo :
                     ('tags, 'R) this ->
                       destination:'R WritableStream.t ->
                         ?options:StreamPipeOptions.t ->
                           unit -> unit Promise.t_1
                   val tee : ('tags, 'R) this -> ('R t * 'R t)
                   val cast_from : ('tags, 'R) this -> 'R t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSource:'R UnderlyingSource.t ->
                       ?strategy:'R QueuingStrategy.t -> unit -> 'R t
                 end =
  struct
    type 'R t = [ `ReadableStream of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3775 : Ojs.t) -> t_of_js __R_of_js x3775
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3773 : __R t) -> t_to_js __R_to_js x3773
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3779 : Ojs.t) -> t_of_js any_of_js x3779
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3777 : any t) -> t_to_js any_to_js x3777
    type 'R tags = [ `ReadableStream of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStream of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3783 : Ojs.t) -> intf_of_js __tags_of_js x3783
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3781 : __tags intf) -> intf_to_js __tags_to_js x3781
    let (get_locked : ('tags, 'R) this -> bool) =
      fun (x3785 : ('tags, 'R) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3785) "locked")
    let (cancel :
      ('tags, 'R) this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x3791 : ('tags, 'R) this) ->
        fun ?reason:(x3788 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3794 = this_to_js Obj.magic Obj.magic x3791 in
               Ojs.call (Ojs.get_prop_ascii x3794 "cancel") "apply"
                 [|x3794;((let x3789 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3788 with
                            | Some x3790 ->
                                ignore
                                  (Ojs.call x3789 "push"
                                     [|(any_to_js x3790)|])
                            | None -> ());
                           x3789))|])
    let (getReader : ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t) =
      fun (x3796 : ('tags, 'R) this) ->
        ReadableStreamDefaultReader.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x3796) "getReader" [||])
    let (pipeThrough :
      ('tags, 'R) this ->
        transform:('T, 'R) ReadableWritablePair.t ->
          ?options:StreamPipeOptions.t -> unit -> 'T t)
      =
      fun (x3806 : ('tags, 'R) this) ->
        fun ~transform:(x3800 : ('T, 'R) ReadableWritablePair.t) ->
          fun ?options:(x3801 : StreamPipeOptions.t option) ->
            fun () ->
              t_of_js Obj.magic
                (let x3809 = this_to_js Obj.magic Obj.magic x3806 in
                 Ojs.call (Ojs.get_prop_ascii x3809 "pipeThrough") "apply"
                   [|x3809;((let x3802 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3802 "push"
                                  [|(ReadableWritablePair.t_to_js Obj.magic
                                       Obj.magic x3800)|]);
                             (match x3801 with
                              | Some x3803 ->
                                  ignore
                                    (Ojs.call x3802 "push"
                                       [|(StreamPipeOptions.t_to_js x3803)|])
                              | None -> ());
                             x3802))|])
    let (pipeTo :
      ('tags, 'R) this ->
        destination:'R WritableStream.t ->
          ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x3816 : ('tags, 'R) this) ->
        fun ~destination:(x3811 : 'R WritableStream.t) ->
          fun ?options:(x3812 : StreamPipeOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x3819 = this_to_js Obj.magic Obj.magic x3816 in
                 Ojs.call (Ojs.get_prop_ascii x3819 "pipeTo") "apply"
                   [|x3819;((let x3813 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3813 "push"
                                  [|(WritableStream.t_to_js Obj.magic x3811)|]);
                             (match x3812 with
                              | Some x3814 ->
                                  ignore
                                    (Ojs.call x3813 "push"
                                       [|(StreamPipeOptions.t_to_js x3814)|])
                              | None -> ());
                             x3813))|])
    let (tee : ('tags, 'R) this -> ('R t * 'R t)) =
      fun (x3821 : ('tags, 'R) this) ->
        let x3824 =
          Ojs.call (this_to_js Obj.magic Obj.magic x3821) "tee" [||] in
        ((t_of_js Obj.magic (Ojs.array_get x3824 0)),
          (t_of_js Obj.magic (Ojs.array_get x3824 1)))
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStream") "prototype")
    let (create :
      ?underlyingSource:'R UnderlyingSource.t ->
        ?strategy:'R QueuingStrategy.t -> unit -> 'R t)
      =
      fun ?underlyingSource:(x3827 : 'R UnderlyingSource.t option) ->
        fun ?strategy:(x3828 : 'R QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ReadableStream")
                 (let x3829 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3827 with
                   | Some x3832 ->
                       ignore
                         (Ojs.call x3829 "push"
                            [|(UnderlyingSource.t_to_js Obj.magic x3832)|])
                   | None -> ());
                  (match x3828 with
                   | Some x3830 ->
                       ignore
                         (Ojs.call x3829 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x3830)|])
                   | None -> ());
                  x3829))
  end
 and
  ReadableStreamDefaultReader:sig
                                type 'R t =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ] intf
                                type 'R t_1 = 'R t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'R tags =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ]
                                type 'R tags_1 = 'R tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'R tags =
                                    [ `ReadableStreamDefaultReader of 'R 
                                    | `ReadableStreamGenericReader ]
                                  type 'R tags_1 = 'R tags
                                  type tags_0 = any tags]
                                type ('tags, 'R) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `ReadableStreamDefaultReader
                                                  of 'R ]
                                val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                                val t_1_to_js :
                                  ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val read :
                                  ('tags, 'R) this ->
                                    'R ReadableStreamDefaultReadResult.t
                                      Promise.t_1
                                val releaseLock : ('tags, 'R) this -> unit
                                val cast_from : ('tags, 'R) this -> 'R t
                                val prototype : unit -> t_0
                                val create : 'R ReadableStream.t -> 'R t
                              end =
  struct
    type 'R t =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
        intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3837 : Ojs.t) -> t_of_js __R_of_js x3837
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3835 : __R t) -> t_to_js __R_to_js x3835
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3841 : Ojs.t) -> t_of_js any_of_js x3841
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3839 : any t) -> t_to_js any_to_js x3839
    type 'R tags =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReader of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3845 : Ojs.t) -> intf_of_js __tags_of_js x3845
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3843 : __tags intf) -> intf_to_js __tags_to_js x3843
    let (read :
      ('tags, 'R) this -> 'R ReadableStreamDefaultReadResult.t Promise.t_1) =
      fun (x3847 : ('tags, 'R) this) ->
        Promise.t_1_of_js
          (fun (x3850 : Ojs.t) ->
             ReadableStreamDefaultReadResult.t_of_js Obj.magic x3850)
          (Ojs.call (this_to_js Obj.magic Obj.magic x3847) "read" [||])
    let (releaseLock : ('tags, 'R) this -> unit) =
      fun (x3852 : ('tags, 'R) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x3852) "releaseLock" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             "prototype")
    let (create : 'R ReadableStream.t -> 'R t) =
      fun (x3855 : 'R ReadableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             [|(ReadableStream.t_to_js Obj.magic x3855)|])
  end and
       ReadableWritablePair:sig
                              type ('R, 'W) t =
                                [ `ReadableWritablePair of ('R * 'W) ] intf
                              type ('R, 'W) t_2 = ('R, 'W) t
                              type 'R t_1 = ('R, any) t
                              type t_0 = (any, any) t
                              [@@@js.stop ]
                              type ('R, 'W) tags =
                                [ `ReadableWritablePair of ('R * 'W) ]
                              type ('R, 'W) tags_2 = ('R, 'W) tags
                              type 'R tags_1 = ('R, any) tags
                              type tags_0 = (any, any) tags
                              [@@@js.start ]
                              [@@@js.implem
                                type ('R, 'W) tags =
                                  [ `ReadableWritablePair of ('R * 'W) ]
                                type ('R, 'W) tags_2 = ('R, 'W) tags
                                type 'R tags_1 = ('R, any) tags
                                type tags_0 = (any, any) tags]
                              type ('tags, 'R, 'W) this =
                                'tags intf constraint 'tags =
                                            [>
                                              `ReadableWritablePair of
                                                ('R * 'W) ]
                              val t_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t
                              val t_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t
                              val t_2_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t
                              val t_2_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2
                              val t_1_to_js :
                                ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                              val t_1_of_js :
                                (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_readable :
                                ('tags, 'R, 'W) this -> 'R ReadableStream.t
                              val set_readable :
                                ('tags, 'R, 'W) this ->
                                  'R ReadableStream.t -> unit
                              val get_writable :
                                ('tags, 'R, 'W) this -> 'W WritableStream.t
                              val set_writable :
                                ('tags, 'R, 'W) this ->
                                  'W WritableStream.t -> unit
                              val create :
                                readable:'R ReadableStream.t ->
                                  writable:'W WritableStream.t ->
                                    unit -> ('R, 'W) t
                              val cast_from :
                                ('tags, 'R, 'W) this -> ('R, 'W) t
                            end =
       struct
         type ('R, 'W) t = [ `ReadableWritablePair of ('R * 'W) ] intf
         let rec t_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t =
           fun _R -> fun _W -> Obj.magic
         and t_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t =
           fun _R -> fun _W -> Obj.magic
         type ('R, 'W) t_2 = ('R, 'W) t
         let rec t_2_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2 =
           fun (type __R) -> fun (type __W) ->
           fun (__R_of_js : Ojs.t -> __R) ->
             fun (__W_of_js : Ojs.t -> __W) ->
               fun (x3861 : Ojs.t) -> t_of_js __R_of_js __W_of_js x3861
         and t_2_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t =
           fun (type __R) -> fun (type __W) ->
           fun (__R_to_js : __R -> Ojs.t) ->
             fun (__W_to_js : __W -> Ojs.t) ->
               fun (x3858 : (__R, __W) t) ->
                 t_to_js __R_to_js __W_to_js x3858
         type 'R t_1 = ('R, any) t
         let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun
           (type __R) ->
           fun (__R_of_js : Ojs.t -> __R) ->
             fun (x3867 : Ojs.t) -> t_of_js __R_of_js any_of_js x3867
         and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type
           __R) ->
           fun (__R_to_js : __R -> Ojs.t) ->
             fun (x3864 : (__R, any) t) -> t_to_js __R_to_js any_to_js x3864
         type t_0 = (any, any) t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x3873 : Ojs.t) -> t_of_js any_of_js any_of_js x3873
         and t_0_to_js : t_0 -> Ojs.t =
           fun (x3870 : (any, any) t) -> t_to_js any_to_js any_to_js x3870
         type ('R, 'W) tags = [ `ReadableWritablePair of ('R * 'W) ]
         type ('R, 'W) tags_2 = ('R, 'W) tags
         type 'R tags_1 = ('R, any) tags
         type tags_0 = (any, any) tags
         type ('tags, 'R, 'W) this =
           'tags intf constraint 'tags =
                       [> `ReadableWritablePair of ('R * 'W) ]
         let rec this_of_js :
           'tags 'R 'W .
             (Ojs.t -> 'tags) ->
               (Ojs.t -> 'R) ->
                 (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'R, 'W) this
           = fun (type __tags) -> fun (type __R) -> fun (type __W) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (__R_of_js : Ojs.t -> __R) ->
               fun (__W_of_js : Ojs.t -> __W) ->
                 fun (x3878 : Ojs.t) -> intf_of_js __tags_of_js x3878
         and this_to_js :
           'tags 'R 'W .
             ('tags -> Ojs.t) ->
               ('R -> Ojs.t) ->
                 ('W -> Ojs.t) -> ('tags, 'R, 'W) this -> Ojs.t
           = fun (type __tags) -> fun (type __R) -> fun (type __W) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (__R_to_js : __R -> Ojs.t) ->
               fun (__W_to_js : __W -> Ojs.t) ->
                 fun (x3876 : __tags intf) -> intf_to_js __tags_to_js x3876
         let (get_readable : ('tags, 'R, 'W) this -> 'R ReadableStream.t) =
           fun (x3880 : ('tags, 'R, 'W) this) ->
             ReadableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x3880) "readable")
         let (set_readable :
           ('tags, 'R, 'W) this -> 'R ReadableStream.t -> unit) =
           fun (x3885 : ('tags, 'R, 'W) this) ->
             fun (x3886 : 'R ReadableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x3885) "readable"
                 (ReadableStream.t_to_js Obj.magic x3886)
         let (get_writable : ('tags, 'R, 'W) this -> 'W WritableStream.t) =
           fun (x3891 : ('tags, 'R, 'W) this) ->
             WritableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x3891) "writable")
         let (set_writable :
           ('tags, 'R, 'W) this -> 'W WritableStream.t -> unit) =
           fun (x3896 : ('tags, 'R, 'W) this) ->
             fun (x3897 : 'W WritableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x3896) "writable"
                 (WritableStream.t_to_js Obj.magic x3897)
         let (create :
           readable:'R ReadableStream.t ->
             writable:'W WritableStream.t -> unit -> ('R, 'W) t)
           =
           fun ~readable:(x3902 : 'R ReadableStream.t) ->
             fun ~writable:(x3903 : 'W WritableStream.t) ->
               fun () ->
                 let x3904 = Ojs.empty_obj () in
                 Ojs.set_prop_ascii x3904 "readable"
                   (ReadableStream.t_to_js Obj.magic x3902);
                 Ojs.set_prop_ascii x3904 "writable"
                   (WritableStream.t_to_js Obj.magic x3903);
                 t_of_js Obj.magic Obj.magic x3904
         let cast_from = Obj.magic
       end
module EndingType =
  struct
    type t = [ `L_s118_native  | `L_s194_transparent ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3910 : Ojs.t) ->
        let x3911 = x3910 in
        match Ojs.string_of_js x3911 with
        | "native" -> `L_s118_native
        | "transparent" -> `L_s194_transparent
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3909 : [ `L_s118_native  | `L_s194_transparent ]) ->
        match x3909 with
        | `L_s118_native -> Ojs.string_to_js "native"
        | `L_s194_transparent -> Ojs.string_to_js "transparent"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3913 : Ojs.t) -> t_of_js x3913
    and t_0_to_js : t_0 -> Ojs.t = fun (x3912 : t) -> t_to_js x3912
  end
module BlobPropertyBag =
  struct
    type t = [ `BlobPropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3915 : Ojs.t) -> t_of_js x3915
    and t_0_to_js : t_0 -> Ojs.t = fun (x3914 : t) -> t_to_js x3914
    type tags = [ `BlobPropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BlobPropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3918 : Ojs.t) -> intf_of_js __tags_of_js x3918
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3916 : __tags intf) -> intf_to_js __tags_to_js x3916
    let (get_endings : 'tags this -> EndingType.t) =
      fun (x3920 : 'tags this) ->
        EndingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3920) "endings")
    let (set_endings : 'tags this -> EndingType.t -> unit) =
      fun (x3922 : 'tags this) ->
        fun (x3923 : EndingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3922) "endings"
            (EndingType.t_to_js x3923)
    let (get_type : 'tags this -> string) =
      fun (x3925 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3925) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x3927 : 'tags this) ->
        fun (x3928 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3927) "type"
            (Ojs.string_to_js x3928)
    let (create : endings:EndingType.t -> type_:string -> unit -> t) =
      fun ~endings:(x3930 : EndingType.t) ->
        fun ~type_:(x3931 : string) ->
          fun () ->
            let x3932 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3932 "endings" (EndingType.t_to_js x3930);
            Ojs.set_prop_ascii x3932 "type" (Ojs.string_to_js x3931);
            t_of_js x3932
    let cast_from = Obj.magic
  end
module rec
  Blob:sig
         type t = [ `Blob ] intf
         type t_0 = t
         [@@@js.stop ]
         type tags = [ `Blob ]
         type tags_0 = tags
         [@@@js.start ]
         [@@@js.implem type tags = [ `Blob ]
           type tags_0 = tags]
         type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
         val t_to_js : t -> Ojs.t
         val t_of_js : Ojs.t -> t
         val t_0_to_js : t_0 -> Ojs.t
         val t_0_of_js : Ojs.t -> t_0
         val get_size : 'tags this -> float
         val get_type : 'tags this -> string
         val arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1
         val slice :
           'tags this ->
             ?start:float -> ?end_:float -> ?contentType:string -> unit -> t
         val stream : 'tags this -> ReadableStream.t_0
         val text : 'tags this -> string Promise.t_1
         val cast_from : 'tags this -> t
         val prototype : unit -> t
         val create :
           ?blobParts:BlobPart.t list ->
             ?options:BlobPropertyBag.t -> unit -> t
       end =
  struct
    type t = [ `Blob ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3934 : Ojs.t) -> t_of_js x3934
    and t_0_to_js : t_0 -> Ojs.t = fun (x3933 : t) -> t_to_js x3933
    type tags = [ `Blob ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3937 : Ojs.t) -> intf_of_js __tags_of_js x3937
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3935 : __tags intf) -> intf_to_js __tags_to_js x3935
    let (get_size : 'tags this -> float) =
      fun (x3939 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3939) "size")
    let (get_type : 'tags this -> string) =
      fun (x3941 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3941) "type")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x3943 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x3943) "arrayBuffer" [||])
    let (slice :
      'tags this ->
        ?start:float -> ?end_:float -> ?contentType:string -> unit -> t)
      =
      fun (x3953 : 'tags this) ->
        fun ?start:(x3946 : float option) ->
          fun ?end_:(x3947 : float option) ->
            fun ?contentType:(x3948 : string option) ->
              fun () ->
                t_of_js
                  (let x3955 = this_to_js Obj.magic x3953 in
                   Ojs.call (Ojs.get_prop_ascii x3955 "slice") "apply"
                     [|x3955;((let x3949 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3946 with
                                | Some x3952 ->
                                    ignore
                                      (Ojs.call x3949 "push"
                                         [|(Ojs.float_to_js x3952)|])
                                | None -> ());
                               (match x3947 with
                                | Some x3951 ->
                                    ignore
                                      (Ojs.call x3949 "push"
                                         [|(Ojs.float_to_js x3951)|])
                                | None -> ());
                               (match x3948 with
                                | Some x3950 ->
                                    ignore
                                      (Ojs.call x3949 "push"
                                         [|(Ojs.string_to_js x3950)|])
                                | None -> ());
                               x3949))|])
    let (stream : 'tags this -> ReadableStream.t_0) =
      fun (x3956 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x3956) "stream" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x3958 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3958) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Blob")
             "prototype")
    let (create :
      ?blobParts:BlobPart.t list -> ?options:BlobPropertyBag.t -> unit -> t)
      =
      fun ?blobParts:(x3961 : BlobPart.t list option) ->
        fun ?options:(x3962 : BlobPropertyBag.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Blob")
                 (let x3963 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3961 with
                   | Some x3965 ->
                       ignore
                         (Ojs.call x3963 "push"
                            [|(Ojs.list_to_js BlobPart.t_to_js x3965)|])
                   | None -> ());
                  (match x3962 with
                   | Some x3964 ->
                       ignore
                         (Ojs.call x3963 "push"
                            [|(BlobPropertyBag.t_to_js x3964)|])
                   | None -> ());
                  x3963))
  end
 and
  BlobPart:sig
             type t =
               [ `String of string 
               | `Other of (Blob.t, BufferSource.t) union2 ] Primitive.t
             type t_0 = t
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
           end =
  struct
    type t =
      [ `String of string  | `Other of (Blob.t, BufferSource.t) union2 ]
        Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x3973 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x3974 : Ojs.t) ->
             let x3975 = x3974 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x3975 "dummy") with
             | "String" -> `String (Ojs.string_of_js x3975)
             | "Other" ->
                 `Other
                   (union2_of_js Blob.t_of_js BufferSource.t_of_js x3975)
             | _ -> assert false) x3973
    and t_to_js : t -> Ojs.t =
      fun
        (x3967 :
          [ `String of string  | `Other of (Blob.t, BufferSource.t) union2 ]
            Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x3968 :
               [ `String of string 
               | `Other of (Blob.t, BufferSource.t) union2 ])
             ->
             match x3968 with
             | `String x3969 -> Ojs.string_to_js x3969
             | `Other x3970 ->
                 union2_to_js Blob.t_to_js BufferSource.t_to_js x3970) x3967
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3979 : Ojs.t) -> t_of_js x3979
    and t_0_to_js : t_0 -> Ojs.t = fun (x3978 : t) -> t_to_js x3978
  end
module URL =
  struct
    type t = [ `URL ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3981 : Ojs.t) -> t_of_js x3981
    and t_0_to_js : t_0 -> Ojs.t = fun (x3980 : t) -> t_to_js x3980
    type tags = [ `URL ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URL ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3984 : Ojs.t) -> intf_of_js __tags_of_js x3984
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3982 : __tags intf) -> intf_to_js __tags_to_js x3982
    let (get_hash : 'tags this -> string) =
      fun (x3986 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3986) "hash")
    let (set_hash : 'tags this -> string -> unit) =
      fun (x3988 : 'tags this) ->
        fun (x3989 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3988) "hash"
            (Ojs.string_to_js x3989)
    let (get_host : 'tags this -> string) =
      fun (x3991 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3991) "host")
    let (set_host : 'tags this -> string -> unit) =
      fun (x3993 : 'tags this) ->
        fun (x3994 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3993) "host"
            (Ojs.string_to_js x3994)
    let (get_hostname : 'tags this -> string) =
      fun (x3996 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3996) "hostname")
    let (set_hostname : 'tags this -> string -> unit) =
      fun (x3998 : 'tags this) ->
        fun (x3999 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3998) "hostname"
            (Ojs.string_to_js x3999)
    let (get_href : 'tags this -> string) =
      fun (x4001 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4001) "href")
    let (set_href : 'tags this -> string -> unit) =
      fun (x4003 : 'tags this) ->
        fun (x4004 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4003) "href"
            (Ojs.string_to_js x4004)
    let (toString : 'tags this -> string) =
      fun (x4006 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4006) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x4008 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4008) "origin")
    let (get_password : 'tags this -> string) =
      fun (x4010 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4010) "password")
    let (set_password : 'tags this -> string -> unit) =
      fun (x4012 : 'tags this) ->
        fun (x4013 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4012) "password"
            (Ojs.string_to_js x4013)
    let (get_pathname : 'tags this -> string) =
      fun (x4015 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4015) "pathname")
    let (set_pathname : 'tags this -> string -> unit) =
      fun (x4017 : 'tags this) ->
        fun (x4018 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4017) "pathname"
            (Ojs.string_to_js x4018)
    let (get_port : 'tags this -> string) =
      fun (x4020 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4020) "port")
    let (set_port : 'tags this -> string -> unit) =
      fun (x4022 : 'tags this) ->
        fun (x4023 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4022) "port"
            (Ojs.string_to_js x4023)
    let (get_protocol : 'tags this -> string) =
      fun (x4025 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4025) "protocol")
    let (set_protocol : 'tags this -> string -> unit) =
      fun (x4027 : 'tags this) ->
        fun (x4028 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4027) "protocol"
            (Ojs.string_to_js x4028)
    let (get_search : 'tags this -> string) =
      fun (x4030 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4030) "search")
    let (set_search : 'tags this -> string -> unit) =
      fun (x4032 : 'tags this) ->
        fun (x4033 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4032) "search"
            (Ojs.string_to_js x4033)
    let (get_searchParams : 'tags this -> URLSearchParams.t) =
      fun (x4035 : 'tags this) ->
        URLSearchParams.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4035) "searchParams")
    let (get_username : 'tags this -> string) =
      fun (x4037 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4037) "username")
    let (set_username : 'tags this -> string -> unit) =
      fun (x4039 : 'tags this) ->
        fun (x4040 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4039) "username"
            (Ojs.string_to_js x4040)
    let (toJSON : 'tags this -> string) =
      fun (x4042 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4042) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "URL")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of t ] ->
        ?base:[ `U1 of string  | `U2 of t ] -> unit -> t)
      =
      fun ~url:(x4044 : [ `U1 of string  | `U2 of t ]) ->
        fun ?base:(x4045 : [ `U1 of string  | `U2 of t ] option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URL")
                 (let x4046 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4046 "push"
                       [|((match x4044 with
                           | `U1 x4050 -> Ojs.string_to_js x4050
                           | `U2 x4051 -> t_to_js x4051))|]);
                  (match x4045 with
                   | Some x4047 ->
                       ignore
                         (Ojs.call x4046 "push"
                            [|((match x4047 with
                                | `U1 x4048 -> Ojs.string_to_js x4048
                                | `U2 x4049 -> t_to_js x4049))|])
                   | None -> ());
                  x4046))
    let (createObjectURL : Blob.t -> string) =
      fun (x4052 : Blob.t) ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "createObjectURL"
             [|(Blob.t_to_js x4052)|])
    let (revokeObjectURL : string -> unit) =
      fun (x4053 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "revokeObjectURL"
             [|(Ojs.string_to_js x4053)|])
  end
module ResponseType =
  struct
    type t =
      [ `L_s137_opaque  | `L_s138_opaqueredirect  | `L_s43_basic 
      | `L_s55_cors  | `L_s57_default  | `L_s67_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4055 : Ojs.t) ->
        let x4056 = x4055 in
        match Ojs.string_of_js x4056 with
        | "opaque" -> `L_s137_opaque
        | "opaqueredirect" -> `L_s138_opaqueredirect
        | "basic" -> `L_s43_basic
        | "cors" -> `L_s55_cors
        | "default" -> `L_s57_default
        | "error" -> `L_s67_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4054 :
          [ `L_s137_opaque  | `L_s138_opaqueredirect  | `L_s43_basic 
          | `L_s55_cors  | `L_s57_default  | `L_s67_error ])
        ->
        match x4054 with
        | `L_s137_opaque -> Ojs.string_to_js "opaque"
        | `L_s138_opaqueredirect -> Ojs.string_to_js "opaqueredirect"
        | `L_s43_basic -> Ojs.string_to_js "basic"
        | `L_s55_cors -> Ojs.string_to_js "cors"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s67_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4058 : Ojs.t) -> t_of_js x4058
    and t_0_to_js : t_0 -> Ojs.t = fun (x4057 : t) -> t_to_js x4057
  end
module rec
  Headers:sig
            type t =
              [ `Headers  | (string * string) IterableIterator.tags_1] intf
            type t_0 = t
            [@@@js.stop ]
            type tags =
              [ `Headers  | (string * string) IterableIterator.tags_1]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags =
                [ `Headers  | (string * string) IterableIterator.tags_1]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val entries :
              'tags this -> (string * string) IterableIterator.t_1
            val keys : 'tags this -> string IterableIterator.t_1
            val values : 'tags this -> string IterableIterator.t_1
            val append : 'tags this -> name:string -> value:string -> unit
            val delete : 'tags this -> name:string -> unit
            val get_ : 'tags this -> name:string -> string option
            val has : 'tags this -> name:string -> bool
            val set_ : 'tags this -> name:string -> value:string -> unit
            val forEach :
              'tags this ->
                callbackfn:(value:string -> key:string -> parent:t -> unit)
                  -> ?thisArg:any -> unit -> unit
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create : ?init:HeadersInit.t -> unit -> t
          end =
  struct
    type t = [ `Headers  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4060 : Ojs.t) -> t_of_js x4060
    and t_0_to_js : t_0 -> Ojs.t = fun (x4059 : t) -> t_to_js x4059
    type tags = [ `Headers  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4063 : Ojs.t) -> intf_of_js __tags_of_js x4063
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4061 : __tags intf) -> intf_to_js __tags_to_js x4061
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x4065 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4067 : Ojs.t) ->
             let x4068 = x4067 in
             ((Ojs.string_of_js (Ojs.array_get x4068 0)),
               (Ojs.string_of_js (Ojs.array_get x4068 1))))
          (Ojs.call (this_to_js Obj.magic x4065) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4069 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4069) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x4072 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4072) "values" [||])
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x4077 : 'tags this) ->
        fun ~name:(x4075 : string) ->
          fun ~value:(x4076 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4077) "append"
                 [|(Ojs.string_to_js x4075);(Ojs.string_to_js x4076)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4080 : 'tags this) ->
        fun ~name:(x4079 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4080) "delete"
               [|(Ojs.string_to_js x4079)|])
    let (get_ : 'tags this -> name:string -> string option) =
      fun (x4083 : 'tags this) ->
        fun ~name:(x4082 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4083) "get"
               [|(Ojs.string_to_js x4082)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4087 : 'tags this) ->
        fun ~name:(x4086 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4087) "has"
               [|(Ojs.string_to_js x4086)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x4091 : 'tags this) ->
        fun ~name:(x4089 : string) ->
          fun ~value:(x4090 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4091) "set"
                 [|(Ojs.string_to_js x4089);(Ojs.string_to_js x4090)|])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4100 : 'tags this) ->
        fun
          ~callbackfn:(x4093 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4094 : any option) ->
            fun () ->
              ignore
                (let x4102 = this_to_js Obj.magic x4100 in
                 Ojs.call (Ojs.get_prop_ascii x4102 "forEach") "apply"
                   [|x4102;((let x4095 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4095 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4097 : Ojs.t) ->
                                          fun (x4098 : Ojs.t) ->
                                            fun (x4099 : Ojs.t) ->
                                              x4093
                                                ~value:(Ojs.string_of_js
                                                          x4097)
                                                ~key:(Ojs.string_of_js x4098)
                                                ~parent:(t_of_js x4099)))|]);
                             (match x4094 with
                              | Some x4096 ->
                                  ignore
                                    (Ojs.call x4095 "push"
                                       [|(any_to_js x4096)|])
                              | None -> ());
                             x4095))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Headers")
             "prototype")
    let (create : ?init:HeadersInit.t -> unit -> t) =
      fun ?init:(x4103 : HeadersInit.t option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Headers")
               (let x4104 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4103 with
                 | Some x4105 ->
                     ignore
                       (Ojs.call x4104 "push" [|(HeadersInit.t_to_js x4105)|])
                 | None -> ());
                x4104))
  end
 and
  HeadersInit:sig
                type t =
                  (string list list, Headers.t, (string, string) Record.t_2)
                    union3
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t =
      (string list list, Headers.t, (string, string) Record.t_2) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x4114 : Ojs.t) ->
        union3_of_js
          (fun (x4115 : Ojs.t) ->
             Ojs.list_of_js
               (fun (x4116 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4116)
               x4115) Headers.t_of_js
          (fun (x4119 : Ojs.t) ->
             Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js x4119) x4114
    and t_to_js : t -> Ojs.t =
      fun
        (x4106 :
          (string list list, Headers.t, (string, string) Record.t_2) union3)
        ->
        union3_to_js
          (fun (x4107 : string list list) ->
             Ojs.list_to_js
               (fun (x4108 : string list) ->
                  Ojs.list_to_js Ojs.string_to_js x4108) x4107)
          Headers.t_to_js
          (fun (x4111 : (string, string) Record.t_2) ->
             Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x4111) x4106
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4123 : Ojs.t) -> t_of_js x4123
    and t_0_to_js : t_0 -> Ojs.t = fun (x4122 : t) -> t_to_js x4122
  end
module ResponseInit =
  struct
    type t = [ `ResponseInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4125 : Ojs.t) -> t_of_js x4125
    and t_0_to_js : t_0 -> Ojs.t = fun (x4124 : t) -> t_to_js x4124
    type tags = [ `ResponseInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ResponseInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4128 : Ojs.t) -> intf_of_js __tags_of_js x4128
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4126 : __tags intf) -> intf_to_js __tags_to_js x4126
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x4130 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4130) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4132 : 'tags this) ->
        fun (x4133 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4132) "headers"
            (HeadersInit.t_to_js x4133)
    let (get_status : 'tags this -> float) =
      fun (x4135 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4135) "status")
    let (set_status : 'tags this -> float -> unit) =
      fun (x4137 : 'tags this) ->
        fun (x4138 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4137) "status"
            (Ojs.float_to_js x4138)
    let (get_statusText : 'tags this -> string) =
      fun (x4140 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4140) "statusText")
    let (set_statusText : 'tags this -> string -> unit) =
      fun (x4142 : 'tags this) ->
        fun (x4143 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4142) "statusText"
            (Ojs.string_to_js x4143)
    let (create :
      headers:HeadersInit.t -> status:float -> statusText:string -> unit -> t)
      =
      fun ~headers:(x4145 : HeadersInit.t) ->
        fun ~status:(x4146 : float) ->
          fun ~statusText:(x4147 : string) ->
            fun () ->
              let x4148 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x4148 "headers" (HeadersInit.t_to_js x4145);
              Ojs.set_prop_ascii x4148 "status" (Ojs.float_to_js x4146);
              Ojs.set_prop_ascii x4148 "statusText" (Ojs.string_to_js x4147);
              t_of_js x4148
    let cast_from = Obj.magic
  end
module FilePropertyBag =
  struct
    type t = [ `BlobPropertyBag  | `FilePropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4150 : Ojs.t) -> t_of_js x4150
    and t_0_to_js : t_0 -> Ojs.t = fun (x4149 : t) -> t_to_js x4149
    type tags = [ `BlobPropertyBag  | `FilePropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FilePropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4153 : Ojs.t) -> intf_of_js __tags_of_js x4153
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4151 : __tags intf) -> intf_to_js __tags_to_js x4151
    let (get_lastModified : 'tags this -> float) =
      fun (x4155 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4155) "lastModified")
    let (set_lastModified : 'tags this -> float -> unit) =
      fun (x4157 : 'tags this) ->
        fun (x4158 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4157) "lastModified"
            (Ojs.float_to_js x4158)
    let (create : lastModified:float -> unit -> t) =
      fun ~lastModified:(x4160 : float) ->
        fun () ->
          let x4161 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x4161 "lastModified" (Ojs.float_to_js x4160);
          t_of_js x4161
    let cast_from = Obj.magic
  end
module File =
  struct
    type t = [ `Blob  | `File ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4163 : Ojs.t) -> t_of_js x4163
    and t_0_to_js : t_0 -> Ojs.t = fun (x4162 : t) -> t_to_js x4162
    type tags = [ `Blob  | `File ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `File ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4166 : Ojs.t) -> intf_of_js __tags_of_js x4166
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4164 : __tags intf) -> intf_to_js __tags_to_js x4164
    let (get_lastModified : 'tags this -> float) =
      fun (x4168 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4168) "lastModified")
    let (get_name : 'tags this -> string) =
      fun (x4170 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4170) "name")
    let (get_webkitRelativePath : 'tags this -> string) =
      fun (x4172 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4172)
             "webkitRelativePath")
    let (create :
      lastModified:float ->
        name:string -> webkitRelativePath:string -> unit -> t)
      =
      fun ~lastModified:(x4174 : float) ->
        fun ~name:(x4175 : string) ->
          fun ~webkitRelativePath:(x4176 : string) ->
            fun () ->
              let x4177 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x4177 "lastModified" (Ojs.float_to_js x4174);
              Ojs.set_prop_ascii x4177 "name" (Ojs.string_to_js x4175);
              Ojs.set_prop_ascii x4177 "webkitRelativePath"
                (Ojs.string_to_js x4176);
              t_of_js x4177
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "File")
             "prototype")
    let (create' :
      fileBits:BlobPart.t list ->
        fileName:string -> ?options:FilePropertyBag.t -> unit -> t)
      =
      fun ~fileBits:(x4178 : BlobPart.t list) ->
        fun ~fileName:(x4179 : string) ->
          fun ?options:(x4180 : FilePropertyBag.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "File")
                   (let x4181 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4181 "push"
                         [|(Ojs.list_to_js BlobPart.t_to_js x4178)|]);
                    ignore
                      (Ojs.call x4181 "push" [|(Ojs.string_to_js x4179)|]);
                    (match x4180 with
                     | Some x4182 ->
                         ignore
                           (Ojs.call x4181 "push"
                              [|(FilePropertyBag.t_to_js x4182)|])
                     | None -> ());
                    x4181))
  end
module FormDataEntryValue =
  struct
    type t = [ `String of string  | `Other of File.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4188 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4189 : Ojs.t) ->
             let x4190 = x4189 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4190 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4190)
             | "Other" -> `Other (File.t_of_js x4190)
             | _ -> assert false) x4188
    and t_to_js : t -> Ojs.t =
      fun (x4184 : [ `String of string  | `Other of File.t ] Primitive.t) ->
        Primitive.t_to_js
          (fun (x4185 : [ `String of string  | `Other of File.t ]) ->
             match x4185 with
             | `String x4186 -> Ojs.string_to_js x4186
             | `Other x4187 -> File.t_to_js x4187) x4184
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4192 : Ojs.t) -> t_of_js x4192
    and t_0_to_js : t_0 -> Ojs.t = fun (x4191 : t) -> t_to_js x4191
  end
module FormData =
  struct
    type t =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4194 : Ojs.t) -> t_of_js x4194
    and t_0_to_js : t_0 -> Ojs.t = fun (x4193 : t) -> t_to_js x4193
    type tags =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4197 : Ojs.t) -> intf_of_js __tags_of_js x4197
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4195 : __tags intf) -> intf_to_js __tags_to_js x4195
    let (entries :
      'tags this -> (string * FormDataEntryValue.t) IterableIterator.t_1) =
      fun (x4199 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4201 : Ojs.t) ->
             let x4202 = x4201 in
             ((Ojs.string_of_js (Ojs.array_get x4202 0)),
               (FormDataEntryValue.t_of_js (Ojs.array_get x4202 1))))
          (Ojs.call (this_to_js Obj.magic x4199) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4203 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4203) "keys" [||])
    let (values : 'tags this -> FormDataEntryValue.t IterableIterator.t_1) =
      fun (x4206 : 'tags this) ->
        IterableIterator.t_1_of_js FormDataEntryValue.t_of_js
          (Ojs.call (this_to_js Obj.magic x4206) "values" [||])
    let (append :
      'tags this ->
        name:string ->
          value:[ `U1 of string  | `U2 of Blob.t ] ->
            ?fileName:string -> unit -> unit)
      =
      fun (x4216 : 'tags this) ->
        fun ~name:(x4209 : string) ->
          fun ~value:(x4210 : [ `U1 of string  | `U2 of Blob.t ]) ->
            fun ?fileName:(x4211 : string option) ->
              fun () ->
                ignore
                  (let x4218 = this_to_js Obj.magic x4216 in
                   Ojs.call (Ojs.get_prop_ascii x4218 "append") "apply"
                     [|x4218;((let x4212 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4212 "push"
                                    [|(Ojs.string_to_js x4209)|]);
                               ignore
                                 (Ojs.call x4212 "push"
                                    [|((match x4210 with
                                        | `U1 x4214 -> Ojs.string_to_js x4214
                                        | `U2 x4215 -> Blob.t_to_js x4215))|]);
                               (match x4211 with
                                | Some x4213 ->
                                    ignore
                                      (Ojs.call x4212 "push"
                                         [|(Ojs.string_to_js x4213)|])
                                | None -> ());
                               x4212))|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4220 : 'tags this) ->
        fun ~name:(x4219 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4220) "delete"
               [|(Ojs.string_to_js x4219)|])
    let (get_ : 'tags this -> name:string -> FormDataEntryValue.t option) =
      fun (x4223 : 'tags this) ->
        fun ~name:(x4222 : string) ->
          Ojs.option_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4223) "get"
               [|(Ojs.string_to_js x4222)|])
    let (getAll : 'tags this -> name:string -> FormDataEntryValue.t list) =
      fun (x4227 : 'tags this) ->
        fun ~name:(x4226 : string) ->
          Ojs.list_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4227) "getAll"
               [|(Ojs.string_to_js x4226)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4231 : 'tags this) ->
        fun ~name:(x4230 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4231) "has"
               [|(Ojs.string_to_js x4230)|])
    let (set_ :
      'tags this ->
        name:string ->
          value:[ `U1 of string  | `U2 of Blob.t ] ->
            ?fileName:string -> unit -> unit)
      =
      fun (x4240 : 'tags this) ->
        fun ~name:(x4233 : string) ->
          fun ~value:(x4234 : [ `U1 of string  | `U2 of Blob.t ]) ->
            fun ?fileName:(x4235 : string option) ->
              fun () ->
                ignore
                  (let x4242 = this_to_js Obj.magic x4240 in
                   Ojs.call (Ojs.get_prop_ascii x4242 "set") "apply"
                     [|x4242;((let x4236 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4236 "push"
                                    [|(Ojs.string_to_js x4233)|]);
                               ignore
                                 (Ojs.call x4236 "push"
                                    [|((match x4234 with
                                        | `U1 x4238 -> Ojs.string_to_js x4238
                                        | `U2 x4239 -> Blob.t_to_js x4239))|]);
                               (match x4235 with
                                | Some x4237 ->
                                    ignore
                                      (Ojs.call x4236 "push"
                                         [|(Ojs.string_to_js x4237)|])
                                | None -> ());
                               x4236))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FormDataEntryValue.t ->
                      key:string -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x4250 : 'tags this) ->
        fun
          ~callbackfn:(x4243 :
                        value:FormDataEntryValue.t ->
                          key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4244 : any option) ->
            fun () ->
              ignore
                (let x4252 = this_to_js Obj.magic x4250 in
                 Ojs.call (Ojs.get_prop_ascii x4252 "forEach") "apply"
                   [|x4252;((let x4245 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4245 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4247 : Ojs.t) ->
                                          fun (x4248 : Ojs.t) ->
                                            fun (x4249 : Ojs.t) ->
                                              x4243
                                                ~value:(FormDataEntryValue.t_of_js
                                                          x4247)
                                                ~key:(Ojs.string_of_js x4248)
                                                ~parent:(t_of_js x4249)))|]);
                             (match x4244 with
                              | Some x4246 ->
                                  ignore
                                    (Ojs.call x4245 "push"
                                       [|(any_to_js x4246)|])
                              | None -> ());
                             x4245))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FormData")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FormData") [||])
  end
module XMLHttpRequestBodyInit =
  struct
    type t =
      [ `String of string 
      | `Other of
          (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4 ]
        Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4261 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4262 : Ojs.t) ->
             let x4263 = x4262 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4263 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4263)
             | "Other" ->
                 `Other
                   (union4_of_js Blob.t_of_js BufferSource.t_of_js
                      FormData.t_of_js URLSearchParams.t_of_js x4263)
             | _ -> assert false) x4261
    and t_to_js : t -> Ojs.t =
      fun
        (x4253 :
          [ `String of string 
          | `Other of
              (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4 ]
            Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x4254 :
               [ `String of string 
               | `Other of
                   (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t)
                     union4
                   ])
             ->
             match x4254 with
             | `String x4255 -> Ojs.string_to_js x4255
             | `Other x4256 ->
                 union4_to_js Blob.t_to_js BufferSource.t_to_js
                   FormData.t_to_js URLSearchParams.t_to_js x4256) x4253
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4269 : Ojs.t) -> t_of_js x4269
    and t_0_to_js : t_0 -> Ojs.t = fun (x4268 : t) -> t_to_js x4268
  end
module BodyInit =
  struct
    type t = (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x4273 : Ojs.t) ->
        union2_of_js ReadableStream.t_0_of_js XMLHttpRequestBodyInit.t_of_js
          x4273
    and t_to_js : t -> Ojs.t =
      fun (x4270 : (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2) ->
        union2_to_js ReadableStream.t_0_to_js XMLHttpRequestBodyInit.t_to_js
          x4270
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4277 : Ojs.t) -> t_of_js x4277
    and t_0_to_js : t_0 -> Ojs.t = fun (x4276 : t) -> t_to_js x4276
  end
module Body =
  struct
    type t = [ `Body ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4279 : Ojs.t) -> t_of_js x4279
    and t_0_to_js : t_0 -> Ojs.t = fun (x4278 : t) -> t_to_js x4278
    type tags = [ `Body ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Body ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4282 : Ojs.t) -> intf_of_js __tags_of_js x4282
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4280 : __tags intf) -> intf_to_js __tags_to_js x4280
    let (get_body : 'tags this -> Uint8Array.t_0 ReadableStream.t option) =
      fun (x4284 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4286 : Ojs.t) ->
             ReadableStream.t_of_js Uint8Array.t_0_of_js x4286)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4284) "body")
    let (get_bodyUsed : 'tags this -> bool) =
      fun (x4288 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4288) "bodyUsed")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x4290 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x4290) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t Promise.t_1) =
      fun (x4293 : 'tags this) ->
        Promise.t_1_of_js Blob.t_of_js
          (Ojs.call (this_to_js Obj.magic x4293) "blob" [||])
    let (formData : 'tags this -> FormData.t Promise.t_1) =
      fun (x4296 : 'tags this) ->
        Promise.t_1_of_js FormData.t_of_js
          (Ojs.call (this_to_js Obj.magic x4296) "formData" [||])
    let (json : 'tags this -> any Promise.t_1) =
      fun (x4299 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.call (this_to_js Obj.magic x4299) "json" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x4302 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4302) "text" [||])
    let cast_from = Obj.magic
  end
module Response =
  struct
    type t = [ `Body  | `Response ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4306 : Ojs.t) -> t_of_js x4306
    and t_0_to_js : t_0 -> Ojs.t = fun (x4305 : t) -> t_to_js x4305
    type tags = [ `Body  | `Response ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Response ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4309 : Ojs.t) -> intf_of_js __tags_of_js x4309
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4307 : __tags intf) -> intf_to_js __tags_to_js x4307
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4311 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4311) "headers")
    let (get_ok : 'tags this -> bool) =
      fun (x4313 : 'tags this) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4313) "ok")
    let (get_redirected : 'tags this -> bool) =
      fun (x4315 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4315) "redirected")
    let (get_status : 'tags this -> float) =
      fun (x4317 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4317) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4319 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4319) "statusText")
    let (get_type : 'tags this -> ResponseType.t) =
      fun (x4321 : 'tags this) ->
        ResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4321) "type")
    let (get_url : 'tags this -> string) =
      fun (x4323 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4323) "url")
    let (clone : 'tags this -> t) =
      fun (x4325 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4325) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Response")
             "prototype")
    let (create :
      ?body:BodyInit.t option -> ?init:ResponseInit.t -> unit -> t) =
      fun ?body:(x4327 : BodyInit.t option option) ->
        fun ?init:(x4328 : ResponseInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Response")
                 (let x4329 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x4327 with
                   | Some x4331 ->
                       ignore
                         (Ojs.call x4329 "push"
                            [|(Ojs.option_to_js BodyInit.t_to_js x4331)|])
                   | None -> ());
                  (match x4328 with
                   | Some x4330 ->
                       ignore
                         (Ojs.call x4329 "push"
                            [|(ResponseInit.t_to_js x4330)|])
                   | None -> ());
                  x4329))
    let (error : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Response") "error" [||])
    let (redirect :
      url:[ `U1 of string  | `U2 of URL.t ] -> ?status:float -> unit -> t) =
      fun ~url:(x4333 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?status:(x4334 : float option) ->
          fun () ->
            t_of_js
              (let x4339 = Ojs.get_prop_ascii Ojs.global "Response" in
               Ojs.call (Ojs.get_prop_ascii x4339 "redirect") "apply"
                 [|x4339;((let x4335 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4335 "push"
                                [|((match x4333 with
                                    | `U1 x4337 -> Ojs.string_to_js x4337
                                    | `U2 x4338 -> URL.t_to_js x4338))|]);
                           (match x4334 with
                            | Some x4336 ->
                                ignore
                                  (Ojs.call x4335 "push"
                                     [|(Ojs.float_to_js x4336)|])
                            | None -> ());
                           x4335))|])
  end
module RequestRedirect =
  struct
    type t = [ `L_s110_manual  | `L_s67_error  | `L_s75_follow ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4341 : Ojs.t) ->
        let x4342 = x4341 in
        match Ojs.string_of_js x4342 with
        | "manual" -> `L_s110_manual
        | "error" -> `L_s67_error
        | "follow" -> `L_s75_follow
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4340 : [ `L_s110_manual  | `L_s67_error  | `L_s75_follow ]) ->
        match x4340 with
        | `L_s110_manual -> Ojs.string_to_js "manual"
        | `L_s67_error -> Ojs.string_to_js "error"
        | `L_s75_follow -> Ojs.string_to_js "follow"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4344 : Ojs.t) -> t_of_js x4344
    and t_0_to_js : t_0 -> Ojs.t = fun (x4343 : t) -> t_to_js x4343
  end
module RequestMode =
  struct
    type t =
      [ `L_s119_navigate  | `L_s124_no_cors  | `L_s172_same_origin 
      | `L_s55_cors ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4346 : Ojs.t) ->
        let x4347 = x4346 in
        match Ojs.string_of_js x4347 with
        | "navigate" -> `L_s119_navigate
        | "no-cors" -> `L_s124_no_cors
        | "same-origin" -> `L_s172_same_origin
        | "cors" -> `L_s55_cors
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4345 :
          [ `L_s119_navigate  | `L_s124_no_cors  | `L_s172_same_origin 
          | `L_s55_cors ])
        ->
        match x4345 with
        | `L_s119_navigate -> Ojs.string_to_js "navigate"
        | `L_s124_no_cors -> Ojs.string_to_js "no-cors"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s55_cors -> Ojs.string_to_js "cors"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4349 : Ojs.t) -> t_of_js x4349
    and t_0_to_js : t_0 -> Ojs.t = fun (x4348 : t) -> t_to_js x4348
  end
module RequestCredentials =
  struct
    type t = [ `L_s134_omit  | `L_s172_same_origin  | `L_s92_include ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4351 : Ojs.t) ->
        let x4352 = x4351 in
        match Ojs.string_of_js x4352 with
        | "omit" -> `L_s134_omit
        | "same-origin" -> `L_s172_same_origin
        | "include" -> `L_s92_include
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4350 : [ `L_s134_omit  | `L_s172_same_origin  | `L_s92_include ])
        ->
        match x4350 with
        | `L_s134_omit -> Ojs.string_to_js "omit"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s92_include -> Ojs.string_to_js "include"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4354 : Ojs.t) -> t_of_js x4354
    and t_0_to_js : t_0 -> Ojs.t = fun (x4353 : t) -> t_to_js x4353
  end
module RequestCache =
  struct
    type t =
      [ `L_s123_no_cache  | `L_s127_no_store  | `L_s136_only_if_cached 
      | `L_s168_reload  | `L_s57_default  | `L_s77_force_cache ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4356 : Ojs.t) ->
        let x4357 = x4356 in
        match Ojs.string_of_js x4357 with
        | "no-cache" -> `L_s123_no_cache
        | "no-store" -> `L_s127_no_store
        | "only-if-cached" -> `L_s136_only_if_cached
        | "reload" -> `L_s168_reload
        | "default" -> `L_s57_default
        | "force-cache" -> `L_s77_force_cache
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4355 :
          [ `L_s123_no_cache  | `L_s127_no_store  | `L_s136_only_if_cached 
          | `L_s168_reload  | `L_s57_default  | `L_s77_force_cache ])
        ->
        match x4355 with
        | `L_s123_no_cache -> Ojs.string_to_js "no-cache"
        | `L_s127_no_store -> Ojs.string_to_js "no-store"
        | `L_s136_only_if_cached -> Ojs.string_to_js "only-if-cached"
        | `L_s168_reload -> Ojs.string_to_js "reload"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s77_force_cache -> Ojs.string_to_js "force-cache"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4359 : Ojs.t) -> t_of_js x4359
    and t_0_to_js : t_0 -> Ojs.t = fun (x4358 : t) -> t_to_js x4358
  end
module ReferrerPolicy =
  struct
    type t =
      [ `L_s0  | `L_s125_no_referrer  | `L_s126_no_referrer_when_downgrade 
      | `L_s140_origin  | `L_s141_origin_when_cross_origin 
      | `L_s172_same_origin  | `L_s185_strict_origin 
      | `L_s186_strict_origin_when_cross_origin  | `L_s198_unsafe_url ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4361 : Ojs.t) ->
        let x4362 = x4361 in
        match Ojs.string_of_js x4362 with
        | "" -> `L_s0
        | "no-referrer" -> `L_s125_no_referrer
        | "no-referrer-when-downgrade" -> `L_s126_no_referrer_when_downgrade
        | "origin" -> `L_s140_origin
        | "origin-when-cross-origin" -> `L_s141_origin_when_cross_origin
        | "same-origin" -> `L_s172_same_origin
        | "strict-origin" -> `L_s185_strict_origin
        | "strict-origin-when-cross-origin" ->
            `L_s186_strict_origin_when_cross_origin
        | "unsafe-url" -> `L_s198_unsafe_url
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4360 :
          [ `L_s0  | `L_s125_no_referrer 
          | `L_s126_no_referrer_when_downgrade  | `L_s140_origin 
          | `L_s141_origin_when_cross_origin  | `L_s172_same_origin 
          | `L_s185_strict_origin  | `L_s186_strict_origin_when_cross_origin 
          | `L_s198_unsafe_url ])
        ->
        match x4360 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s125_no_referrer -> Ojs.string_to_js "no-referrer"
        | `L_s126_no_referrer_when_downgrade ->
            Ojs.string_to_js "no-referrer-when-downgrade"
        | `L_s140_origin -> Ojs.string_to_js "origin"
        | `L_s141_origin_when_cross_origin ->
            Ojs.string_to_js "origin-when-cross-origin"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s185_strict_origin -> Ojs.string_to_js "strict-origin"
        | `L_s186_strict_origin_when_cross_origin ->
            Ojs.string_to_js "strict-origin-when-cross-origin"
        | `L_s198_unsafe_url -> Ojs.string_to_js "unsafe-url"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4364 : Ojs.t) -> t_of_js x4364
    and t_0_to_js : t_0 -> Ojs.t = fun (x4363 : t) -> t_to_js x4363
  end
module RequestInit =
  struct
    type t = [ `RequestInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4366 : Ojs.t) -> t_of_js x4366
    and t_0_to_js : t_0 -> Ojs.t = fun (x4365 : t) -> t_to_js x4365
    type tags = [ `RequestInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RequestInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4369 : Ojs.t) -> intf_of_js __tags_of_js x4369
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4367 : __tags intf) -> intf_to_js __tags_to_js x4367
    let (get_body : 'tags this -> BodyInit.t option) =
      fun (x4371 : 'tags this) ->
        Ojs.option_of_js BodyInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4371) "body")
    let (set_body : 'tags this -> BodyInit.t option -> unit) =
      fun (x4374 : 'tags this) ->
        fun (x4375 : BodyInit.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4374) "body"
            (Ojs.option_to_js BodyInit.t_to_js x4375)
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4378 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4378) "cache")
    let (set_cache : 'tags this -> RequestCache.t -> unit) =
      fun (x4380 : 'tags this) ->
        fun (x4381 : RequestCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4380) "cache"
            (RequestCache.t_to_js x4381)
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4383 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4383) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x4385 : 'tags this) ->
        fun (x4386 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4385) "credentials"
            (RequestCredentials.t_to_js x4386)
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x4388 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4388) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4390 : 'tags this) ->
        fun (x4391 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4390) "headers"
            (HeadersInit.t_to_js x4391)
    let (get_integrity : 'tags this -> string) =
      fun (x4393 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4393) "integrity")
    let (set_integrity : 'tags this -> string -> unit) =
      fun (x4395 : 'tags this) ->
        fun (x4396 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4395) "integrity"
            (Ojs.string_to_js x4396)
    let (get_keepalive : 'tags this -> bool) =
      fun (x4398 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4398) "keepalive")
    let (set_keepalive : 'tags this -> bool -> unit) =
      fun (x4400 : 'tags this) ->
        fun (x4401 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4400) "keepalive"
            (Ojs.bool_to_js x4401)
    let (get_method : 'tags this -> string) =
      fun (x4403 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4403) "method")
    let (set_method : 'tags this -> string -> unit) =
      fun (x4405 : 'tags this) ->
        fun (x4406 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4405) "method"
            (Ojs.string_to_js x4406)
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4408 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4408) "mode")
    let (set_mode : 'tags this -> RequestMode.t -> unit) =
      fun (x4410 : 'tags this) ->
        fun (x4411 : RequestMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4410) "mode"
            (RequestMode.t_to_js x4411)
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4413 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4413) "redirect")
    let (set_redirect : 'tags this -> RequestRedirect.t -> unit) =
      fun (x4415 : 'tags this) ->
        fun (x4416 : RequestRedirect.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4415) "redirect"
            (RequestRedirect.t_to_js x4416)
    let (get_referrer : 'tags this -> string) =
      fun (x4418 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4418) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x4420 : 'tags this) ->
        fun (x4421 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4420) "referrer"
            (Ojs.string_to_js x4421)
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4423 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4423) "referrerPolicy")
    let (set_referrerPolicy : 'tags this -> ReferrerPolicy.t -> unit) =
      fun (x4425 : 'tags this) ->
        fun (x4426 : ReferrerPolicy.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4425) "referrerPolicy"
            (ReferrerPolicy.t_to_js x4426)
    let (get_signal : 'tags this -> AbortSignal.t option) =
      fun (x4428 : 'tags this) ->
        Ojs.option_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4428) "signal")
    let (set_signal : 'tags this -> AbortSignal.t option -> unit) =
      fun (x4431 : 'tags this) ->
        fun (x4432 : AbortSignal.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4431) "signal"
            (Ojs.option_to_js AbortSignal.t_to_js x4432)
    let (get_window : 'tags this -> null) =
      fun (x4435 : 'tags this) ->
        null_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4435) "window")
    let (set_window : 'tags this -> null -> unit) =
      fun (x4437 : 'tags this) ->
        fun (x4438 : null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4437) "window"
            (null_to_js x4438)
    let (create :
      ?body:BodyInit.t ->
        cache:RequestCache.t ->
          credentials:RequestCredentials.t ->
            headers:HeadersInit.t ->
              integrity:string ->
                keepalive:bool ->
                  method_:string ->
                    mode:RequestMode.t ->
                      redirect:RequestRedirect.t ->
                        referrer:string ->
                          referrerPolicy:ReferrerPolicy.t ->
                            ?signal:AbortSignal.t ->
                              ?window:never -> unit -> t)
      =
      fun ?body:(x4440 : BodyInit.t option) ->
        fun ~cache:(x4441 : RequestCache.t) ->
          fun ~credentials:(x4442 : RequestCredentials.t) ->
            fun ~headers:(x4443 : HeadersInit.t) ->
              fun ~integrity:(x4444 : string) ->
                fun ~keepalive:(x4445 : bool) ->
                  fun ~method_:(x4446 : string) ->
                    fun ~mode:(x4447 : RequestMode.t) ->
                      fun ~redirect:(x4448 : RequestRedirect.t) ->
                        fun ~referrer:(x4449 : string) ->
                          fun ~referrerPolicy:(x4450 : ReferrerPolicy.t) ->
                            fun ?signal:(x4451 : AbortSignal.t option) ->
                              fun ?window:(x4452 : never option) ->
                                fun () ->
                                  let x4453 = Ojs.empty_obj () in
                                  (match x4440 with
                                   | Some x4456 ->
                                       Ojs.set_prop_ascii x4453 "body"
                                         (BodyInit.t_to_js x4456)
                                   | None -> ());
                                  Ojs.set_prop_ascii x4453 "cache"
                                    (RequestCache.t_to_js x4441);
                                  Ojs.set_prop_ascii x4453 "credentials"
                                    (RequestCredentials.t_to_js x4442);
                                  Ojs.set_prop_ascii x4453 "headers"
                                    (HeadersInit.t_to_js x4443);
                                  Ojs.set_prop_ascii x4453 "integrity"
                                    (Ojs.string_to_js x4444);
                                  Ojs.set_prop_ascii x4453 "keepalive"
                                    (Ojs.bool_to_js x4445);
                                  Ojs.set_prop_ascii x4453 "method"
                                    (Ojs.string_to_js x4446);
                                  Ojs.set_prop_ascii x4453 "mode"
                                    (RequestMode.t_to_js x4447);
                                  Ojs.set_prop_ascii x4453 "redirect"
                                    (RequestRedirect.t_to_js x4448);
                                  Ojs.set_prop_ascii x4453 "referrer"
                                    (Ojs.string_to_js x4449);
                                  Ojs.set_prop_ascii x4453 "referrerPolicy"
                                    (ReferrerPolicy.t_to_js x4450);
                                  (match x4451 with
                                   | Some x4455 ->
                                       Ojs.set_prop_ascii x4453 "signal"
                                         (AbortSignal.t_to_js x4455)
                                   | None -> ());
                                  (match x4452 with
                                   | Some x4454 ->
                                       Ojs.set_prop_ascii x4453 "window"
                                         (never_to_js x4454)
                                   | None -> ());
                                  t_of_js x4453
    let cast_from = Obj.magic
  end
module RequestDestination =
  struct
    type t =
      [ `L_s0  | `L_s109_manifest  | `L_s132_object  | `L_s145_paintworklet 
      | `L_s169_report  | `L_s174_script  | `L_s176_sharedworker 
      | `L_s187_style  | `L_s193_track  | `L_s204_video  | `L_s209_worker 
      | `L_s212_xslt  | `L_s38_audio  | `L_s39_audioworklet 
      | `L_s62_document  | `L_s64_embed  | `L_s76_font  | `L_s78_frame 
      | `L_s89_iframe  | `L_s90_image ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4458 : Ojs.t) ->
        let x4459 = x4458 in
        match Ojs.string_of_js x4459 with
        | "" -> `L_s0
        | "manifest" -> `L_s109_manifest
        | "object" -> `L_s132_object
        | "paintworklet" -> `L_s145_paintworklet
        | "report" -> `L_s169_report
        | "script" -> `L_s174_script
        | "sharedworker" -> `L_s176_sharedworker
        | "style" -> `L_s187_style
        | "track" -> `L_s193_track
        | "video" -> `L_s204_video
        | "worker" -> `L_s209_worker
        | "xslt" -> `L_s212_xslt
        | "audio" -> `L_s38_audio
        | "audioworklet" -> `L_s39_audioworklet
        | "document" -> `L_s62_document
        | "embed" -> `L_s64_embed
        | "font" -> `L_s76_font
        | "frame" -> `L_s78_frame
        | "iframe" -> `L_s89_iframe
        | "image" -> `L_s90_image
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4457 :
          [ `L_s0  | `L_s109_manifest  | `L_s132_object 
          | `L_s145_paintworklet  | `L_s169_report  | `L_s174_script 
          | `L_s176_sharedworker  | `L_s187_style  | `L_s193_track 
          | `L_s204_video  | `L_s209_worker  | `L_s212_xslt  | `L_s38_audio 
          | `L_s39_audioworklet  | `L_s62_document  | `L_s64_embed 
          | `L_s76_font  | `L_s78_frame  | `L_s89_iframe  | `L_s90_image ])
        ->
        match x4457 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s109_manifest -> Ojs.string_to_js "manifest"
        | `L_s132_object -> Ojs.string_to_js "object"
        | `L_s145_paintworklet -> Ojs.string_to_js "paintworklet"
        | `L_s169_report -> Ojs.string_to_js "report"
        | `L_s174_script -> Ojs.string_to_js "script"
        | `L_s176_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s187_style -> Ojs.string_to_js "style"
        | `L_s193_track -> Ojs.string_to_js "track"
        | `L_s204_video -> Ojs.string_to_js "video"
        | `L_s209_worker -> Ojs.string_to_js "worker"
        | `L_s212_xslt -> Ojs.string_to_js "xslt"
        | `L_s38_audio -> Ojs.string_to_js "audio"
        | `L_s39_audioworklet -> Ojs.string_to_js "audioworklet"
        | `L_s62_document -> Ojs.string_to_js "document"
        | `L_s64_embed -> Ojs.string_to_js "embed"
        | `L_s76_font -> Ojs.string_to_js "font"
        | `L_s78_frame -> Ojs.string_to_js "frame"
        | `L_s89_iframe -> Ojs.string_to_js "iframe"
        | `L_s90_image -> Ojs.string_to_js "image"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4461 : Ojs.t) -> t_of_js x4461
    and t_0_to_js : t_0 -> Ojs.t = fun (x4460 : t) -> t_to_js x4460
  end
module rec
  Request:sig
            type t = [ `Body  | `Request ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `Body  | `Request ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags = [ `Body  | `Request ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Request ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_cache : 'tags this -> RequestCache.t
            val get_credentials : 'tags this -> RequestCredentials.t
            val get_destination : 'tags this -> RequestDestination.t
            val get_headers : 'tags this -> Headers.t
            val get_integrity : 'tags this -> string
            val get_keepalive : 'tags this -> bool
            val get_method : 'tags this -> string
            val get_mode : 'tags this -> RequestMode.t
            val get_redirect : 'tags this -> RequestRedirect.t
            val get_referrer : 'tags this -> string
            val get_referrerPolicy : 'tags this -> ReferrerPolicy.t
            val get_signal : 'tags this -> AbortSignal.t
            val get_url : 'tags this -> string
            val clone : 'tags this -> t
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t
          end =
  struct
    type t = [ `Body  | `Request ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4463 : Ojs.t) -> t_of_js x4463
    and t_0_to_js : t_0 -> Ojs.t = fun (x4462 : t) -> t_to_js x4462
    type tags = [ `Body  | `Request ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Request ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4466 : Ojs.t) -> intf_of_js __tags_of_js x4466
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4464 : __tags intf) -> intf_to_js __tags_to_js x4464
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4468 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4468) "cache")
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4470 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4470) "credentials")
    let (get_destination : 'tags this -> RequestDestination.t) =
      fun (x4472 : 'tags this) ->
        RequestDestination.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4472) "destination")
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4474 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4474) "headers")
    let (get_integrity : 'tags this -> string) =
      fun (x4476 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4476) "integrity")
    let (get_keepalive : 'tags this -> bool) =
      fun (x4478 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4478) "keepalive")
    let (get_method : 'tags this -> string) =
      fun (x4480 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4480) "method")
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4482 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4482) "mode")
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4484 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4484) "redirect")
    let (get_referrer : 'tags this -> string) =
      fun (x4486 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4486) "referrer")
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4488 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4488) "referrerPolicy")
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x4490 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4490) "signal")
    let (get_url : 'tags this -> string) =
      fun (x4492 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4492) "url")
    let (clone : 'tags this -> t) =
      fun (x4494 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4494) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Request")
             "prototype")
    let (create : input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t) =
      fun ~input:(x4496 : RequestInfo.t) ->
        fun ?init:(x4497 : RequestInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Request")
                 (let x4498 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4498 "push" [|(RequestInfo.t_to_js x4496)|]);
                  (match x4497 with
                   | Some x4499 ->
                       ignore
                         (Ojs.call x4498 "push"
                            [|(RequestInit.t_to_js x4499)|])
                   | None -> ());
                  x4498))
  end
 and
  RequestInfo:sig
                type t =
                  [ `String of string  | `Other of Request.t ] Primitive.t
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t = [ `String of string  | `Other of Request.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4504 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4505 : Ojs.t) ->
             let x4506 = x4505 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4506 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4506)
             | "Other" -> `Other (Request.t_of_js x4506)
             | _ -> assert false) x4504
    and t_to_js : t -> Ojs.t =
      fun (x4500 : [ `String of string  | `Other of Request.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x4501 : [ `String of string  | `Other of Request.t ]) ->
             match x4501 with
             | `String x4502 -> Ojs.string_to_js x4502
             | `Other x4503 -> Request.t_to_js x4503) x4500
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4508 : Ojs.t) -> t_of_js x4508
    and t_0_to_js : t_0 -> Ojs.t = fun (x4507 : t) -> t_to_js x4507
  end
module Cache =
  struct
    type t = [ `Cache ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4510 : Ojs.t) -> t_of_js x4510
    and t_0_to_js : t_0 -> Ojs.t = fun (x4509 : t) -> t_to_js x4509
    type tags = [ `Cache ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4513 : Ojs.t) -> intf_of_js __tags_of_js x4513
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4511 : __tags intf) -> intf_to_js __tags_to_js x4511
    let (addAll :
      'tags this -> requests:RequestInfo.t Iterable.t_1 -> unit Promise.t_1)
      =
      fun (x4517 : 'tags this) ->
        fun ~requests:(x4515 : RequestInfo.t Iterable.t_1) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4517) "addAll"
               [|(Iterable.t_1_to_js RequestInfo.t_to_js x4515)|])
    let (add : 'tags this -> request:RequestInfo.t -> unit Promise.t_1) =
      fun (x4521 : 'tags this) ->
        fun ~request:(x4520 : RequestInfo.t) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4521) "add"
               [|(RequestInfo.t_to_js x4520)|])
    let (addAll' :
      'tags this -> requests:RequestInfo.t list -> unit Promise.t_1) =
      fun (x4526 : 'tags this) ->
        fun ~requests:(x4524 : RequestInfo.t list) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4526) "addAll"
               [|(Ojs.list_to_js RequestInfo.t_to_js x4524)|])
    let (delete :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> bool Promise.t_1)
      =
      fun (x4533 : 'tags this) ->
        fun ~request:(x4529 : RequestInfo.t) ->
          fun ?options:(x4530 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.bool_of_js
                (let x4535 = this_to_js Obj.magic x4533 in
                 Ojs.call (Ojs.get_prop_ascii x4535 "delete") "apply"
                   [|x4535;((let x4531 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4531 "push"
                                  [|(RequestInfo.t_to_js x4529)|]);
                             (match x4530 with
                              | Some x4532 ->
                                  ignore
                                    (Ojs.call x4531 "push"
                                       [|(CacheQueryOptions.t_to_js x4532)|])
                              | None -> ());
                             x4531))|])
    let (keys :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Request.t list Promise.t_1)
      =
      fun (x4542 : 'tags this) ->
        fun ?request:(x4537 : RequestInfo.t option) ->
          fun ?options:(x4538 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4545 : Ojs.t) -> Ojs.list_of_js Request.t_of_js x4545)
                (let x4544 = this_to_js Obj.magic x4542 in
                 Ojs.call (Ojs.get_prop_ascii x4544 "keys") "apply"
                   [|x4544;((let x4539 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4537 with
                              | Some x4541 ->
                                  ignore
                                    (Ojs.call x4539 "push"
                                       [|(RequestInfo.t_to_js x4541)|])
                              | None -> ());
                             (match x4538 with
                              | Some x4540 ->
                                  ignore
                                    (Ojs.call x4539 "push"
                                       [|(CacheQueryOptions.t_to_js x4540)|])
                              | None -> ());
                             x4539))|])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t ->
            unit -> Response.t option Promise.t_1)
      =
      fun (x4551 : 'tags this) ->
        fun ~request:(x4547 : RequestInfo.t) ->
          fun ?options:(x4548 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4554 : Ojs.t) ->
                   Ojs.option_of_js Response.t_of_js x4554)
                (let x4553 = this_to_js Obj.magic x4551 in
                 Ojs.call (Ojs.get_prop_ascii x4553 "match") "apply"
                   [|x4553;((let x4549 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4549 "push"
                                  [|(RequestInfo.t_to_js x4547)|]);
                             (match x4548 with
                              | Some x4550 ->
                                  ignore
                                    (Ojs.call x4549 "push"
                                       [|(CacheQueryOptions.t_to_js x4550)|])
                              | None -> ());
                             x4549))|])
    let (matchAll :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Response.t list Promise.t_1)
      =
      fun (x4561 : 'tags this) ->
        fun ?request:(x4556 : RequestInfo.t option) ->
          fun ?options:(x4557 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4564 : Ojs.t) -> Ojs.list_of_js Response.t_of_js x4564)
                (let x4563 = this_to_js Obj.magic x4561 in
                 Ojs.call (Ojs.get_prop_ascii x4563 "matchAll") "apply"
                   [|x4563;((let x4558 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4556 with
                              | Some x4560 ->
                                  ignore
                                    (Ojs.call x4558 "push"
                                       [|(RequestInfo.t_to_js x4560)|])
                              | None -> ());
                             (match x4557 with
                              | Some x4559 ->
                                  ignore
                                    (Ojs.call x4558 "push"
                                       [|(CacheQueryOptions.t_to_js x4559)|])
                              | None -> ());
                             x4558))|])
    let (put :
      'tags this ->
        request:RequestInfo.t -> response:Response.t -> unit Promise.t_1)
      =
      fun (x4568 : 'tags this) ->
        fun ~request:(x4566 : RequestInfo.t) ->
          fun ~response:(x4567 : Response.t) ->
            Promise.t_1_of_js Ojs.unit_of_js
              (Ojs.call (this_to_js Obj.magic x4568) "put"
                 [|(RequestInfo.t_to_js x4566);(Response.t_to_js x4567)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Cache")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Cache") [||])
  end
module CachesStatic =
  struct
    let (delete : string -> bool Promise.t_1) =
      fun (x4571 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "delete"
             [|(Ojs.string_to_js x4571)|])
    let (has : string -> bool Promise.t_1) =
      fun (x4573 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "has"
             [|(Ojs.string_to_js x4573)|])
    let (keys : unit -> string list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x4575 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4575)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "keys" [||])
    let (match_ :
      request:RequestInfo.t ->
        ?options:MultiCacheQueryOptions.t ->
          unit -> Response.t option Promise.t_1)
      =
      fun ~request:(x4577 : RequestInfo.t) ->
        fun ?options:(x4578 : MultiCacheQueryOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x4582 : Ojs.t) -> Ojs.option_of_js Response.t_of_js x4582)
              (let x4581 = Ojs.get_prop_ascii Ojs.global "caches" in
               Ojs.call (Ojs.get_prop_ascii x4581 "match") "apply"
                 [|x4581;((let x4579 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4579 "push"
                                [|(RequestInfo.t_to_js x4577)|]);
                           (match x4578 with
                            | Some x4580 ->
                                ignore
                                  (Ojs.call x4579 "push"
                                     [|(MultiCacheQueryOptions.t_to_js x4580)|])
                            | None -> ());
                           x4579))|])
    let (open_ : string -> Cache.t Promise.t_1) =
      fun (x4584 : string) ->
        Promise.t_1_of_js Cache.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "open"
             [|(Ojs.string_to_js x4584)|])
  end
module XMLHttpRequestResponseType =
  struct
    type t =
      [ `L_s0  | `L_s190_text  | `L_s37_arraybuffer  | `L_s44_blob 
      | `L_s62_document  | `L_s96_json ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4587 : Ojs.t) ->
        let x4588 = x4587 in
        match Ojs.string_of_js x4588 with
        | "" -> `L_s0
        | "text" -> `L_s190_text
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | "document" -> `L_s62_document
        | "json" -> `L_s96_json
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4586 :
          [ `L_s0  | `L_s190_text  | `L_s37_arraybuffer  | `L_s44_blob 
          | `L_s62_document  | `L_s96_json ])
        ->
        match x4586 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s190_text -> Ojs.string_to_js "text"
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
        | `L_s62_document -> Ojs.string_to_js "document"
        | `L_s96_json -> Ojs.string_to_js "json"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4590 : Ojs.t) -> t_of_js x4590
    and t_0_to_js : t_0 -> Ojs.t = fun (x4589 : t) -> t_to_js x4589
  end
module ProgressEventInit =
  struct
    type t = [ `EventInit  | `ProgressEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4592 : Ojs.t) -> t_of_js x4592
    and t_0_to_js : t_0 -> Ojs.t = fun (x4591 : t) -> t_to_js x4591
    type tags = [ `EventInit  | `ProgressEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ProgressEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4595 : Ojs.t) -> intf_of_js __tags_of_js x4595
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4593 : __tags intf) -> intf_to_js __tags_to_js x4593
    let (get_lengthComputable : 'tags this -> bool) =
      fun (x4597 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4597) "lengthComputable")
    let (set_lengthComputable : 'tags this -> bool -> unit) =
      fun (x4599 : 'tags this) ->
        fun (x4600 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4599) "lengthComputable"
            (Ojs.bool_to_js x4600)
    let (get_loaded : 'tags this -> float) =
      fun (x4602 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4602) "loaded")
    let (set_loaded : 'tags this -> float -> unit) =
      fun (x4604 : 'tags this) ->
        fun (x4605 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4604) "loaded"
            (Ojs.float_to_js x4605)
    let (get_total : 'tags this -> float) =
      fun (x4607 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4607) "total")
    let (set_total : 'tags this -> float -> unit) =
      fun (x4609 : 'tags this) ->
        fun (x4610 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4609) "total"
            (Ojs.float_to_js x4610)
    let (create :
      lengthComputable:bool -> loaded:float -> total:float -> unit -> t) =
      fun ~lengthComputable:(x4612 : bool) ->
        fun ~loaded:(x4613 : float) ->
          fun ~total:(x4614 : float) ->
            fun () ->
              let x4615 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x4615 "lengthComputable"
                (Ojs.bool_to_js x4612);
              Ojs.set_prop_ascii x4615 "loaded" (Ojs.float_to_js x4613);
              Ojs.set_prop_ascii x4615 "total" (Ojs.float_to_js x4614);
              t_of_js x4615
    let cast_from = Obj.magic
  end
module ProgressEvent =
  struct
    type 'T t = [ `Event  | `ProgressEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4618 : Ojs.t) -> t_of_js __T_of_js x4618
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4616 : __T t) -> t_to_js __T_to_js x4616
    type t_0 = EventTarget.t t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4622 : Ojs.t) -> t_of_js EventTarget.t_of_js x4622
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4620 : EventTarget.t t) -> t_to_js EventTarget.t_to_js x4620
    type 'T tags = [ `Event  | `ProgressEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = EventTarget.t tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4626 : Ojs.t) -> intf_of_js __tags_of_js x4626
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4624 : __tags intf) -> intf_to_js __tags_to_js x4624
    let (get_lengthComputable : ('tags, 'T) this -> bool) =
      fun (x4628 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4628)
             "lengthComputable")
    let (get_loaded : ('tags, 'T) this -> float) =
      fun (x4631 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4631) "loaded")
    let (get_target : ('tags, 'T) this -> 'T option) =
      fun (x4634 : ('tags, 'T) this) ->
        Ojs.option_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4634) "target")
    let (get_total : ('tags, 'T) this -> float) =
      fun (x4638 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4638) "total")
    let (create :
      lengthComputable:bool ->
        loaded:float -> ?target:'T -> total:float -> unit -> 'T t)
      =
      fun ~lengthComputable:(x4641 : bool) ->
        fun ~loaded:(x4642 : float) ->
          fun ?target:(x4643 : 'T option) ->
            fun ~total:(x4644 : float) ->
              fun () ->
                let x4645 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x4645 "lengthComputable"
                  (Ojs.bool_to_js x4641);
                Ojs.set_prop_ascii x4645 "loaded" (Ojs.float_to_js x4642);
                (match x4643 with
                 | Some x4647 ->
                     Ojs.set_prop_ascii x4645 "target" (Obj.magic x4647)
                 | None -> ());
                Ojs.set_prop_ascii x4645 "total" (Ojs.float_to_js x4644);
                t_of_js Obj.magic x4645
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:ProgressEventInit.t -> unit -> t_0) =
      fun ~type_:(x4648 : string) ->
        fun ?eventInitDict:(x4649 : ProgressEventInit.t option) ->
          fun () ->
            t_0_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
                 (let x4650 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4650 "push" [|(Ojs.string_to_js x4648)|]);
                  (match x4649 with
                   | Some x4651 ->
                       ignore
                         (Ojs.call x4650 "push"
                            [|(ProgressEventInit.t_to_js x4651)|])
                   | None -> ());
                  x4650))
  end
module rec
  XMLHttpRequest:sig
                   type t =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags =
                       [ `EventTarget  | `XMLHttpRequest 
                       | `XMLHttpRequestEventTarget ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `XMLHttpRequest ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_onreadystatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) option
                   val set_onreadystatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) option -> unit
                   val get_readyState : 'tags this -> float
                   val get_response : 'tags this -> any
                   val get_responseText : 'tags this -> string
                   val get_responseType :
                     'tags this -> XMLHttpRequestResponseType.t
                   val set_responseType :
                     'tags this -> XMLHttpRequestResponseType.t -> unit
                   val get_responseURL : 'tags this -> string
                   val get_status : 'tags this -> float
                   val get_statusText : 'tags this -> string
                   val get_timeout : 'tags this -> float
                   val set_timeout : 'tags this -> float -> unit
                   val get_upload : 'tags this -> XMLHttpRequestUpload.t
                   val get_withCredentials : 'tags this -> bool
                   val set_withCredentials : 'tags this -> bool -> unit
                   val abort : 'tags this -> unit
                   val getAllResponseHeaders : 'tags this -> string
                   val getResponseHeader :
                     'tags this -> name:string -> string option
                   val open_ :
                     'tags this ->
                       method_:string ->
                         url:[ `U1 of string  | `U2 of URL.t ] -> unit
                   val open_' :
                     'tags this ->
                       method_:string ->
                         url:[ `U1 of string  | `U2 of URL.t ] ->
                           async:bool ->
                             ?username:string option ->
                               ?password:string option -> unit -> unit
                   val overrideMimeType : 'tags this -> mime:string -> unit
                   val send :
                     'tags this ->
                       ?body:XMLHttpRequestBodyInit.t option -> unit -> unit
                   val setRequestHeader :
                     'tags this -> name:string -> value:string -> unit
                   val get_DONE : 'tags this -> float
                   val get_HEADERS_RECEIVED : 'tags this -> float
                   val get_LOADING : 'tags this -> float
                   val get_OPENED : 'tags this -> float
                   val get_UNSENT : 'tags this -> float
                   val addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit
                   val addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit
                   val removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit
                   val removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                   val done_ : unit -> float
                   val headers_received : unit -> float
                   val loading : unit -> float
                   val opened : unit -> float
                   val unsent : unit -> float
                 end =
  struct
    type t =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4653 : Ojs.t) -> t_of_js x4653
    and t_0_to_js : t_0 -> Ojs.t = fun (x4652 : t) -> t_to_js x4652
    type tags =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4656 : Ojs.t) -> intf_of_js __tags_of_js x4656
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4654 : __tags intf) -> intf_to_js __tags_to_js x4654
    let (get_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x4658 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4660 : Ojs.t) ->
             fun ~this:(x4661 : t) ->
               fun ~ev:(x4662 : Event.t) ->
                 any_of_js
                   (Ojs.apply x4660 [|(t_to_js x4661);(Event.t_to_js x4662)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4658)
             "onreadystatechange")
    let (set_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x4663 : 'tags this) ->
        fun (x4664 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4663)
            "onreadystatechange"
            (Ojs.option_to_js
               (fun (x4665 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x4666 : Ojs.t) ->
                       fun (x4667 : Ojs.t) ->
                         any_to_js
                           (x4665 ~this:(t_of_js x4666)
                              ~ev:(Event.t_of_js x4667)))) x4664)
    let (get_readyState : 'tags this -> float) =
      fun (x4669 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4669) "readyState")
    let (get_response : 'tags this -> any) =
      fun (x4671 : 'tags this) ->
        any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4671) "response")
    let (get_responseText : 'tags this -> string) =
      fun (x4673 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4673) "responseText")
    let (get_responseType : 'tags this -> XMLHttpRequestResponseType.t) =
      fun (x4675 : 'tags this) ->
        XMLHttpRequestResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4675) "responseType")
    let (set_responseType :
      'tags this -> XMLHttpRequestResponseType.t -> unit) =
      fun (x4677 : 'tags this) ->
        fun (x4678 : XMLHttpRequestResponseType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4677) "responseType"
            (XMLHttpRequestResponseType.t_to_js x4678)
    let (get_responseURL : 'tags this -> string) =
      fun (x4680 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4680) "responseURL")
    let (get_status : 'tags this -> float) =
      fun (x4682 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4682) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4684 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4684) "statusText")
    let (get_timeout : 'tags this -> float) =
      fun (x4686 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4686) "timeout")
    let (set_timeout : 'tags this -> float -> unit) =
      fun (x4688 : 'tags this) ->
        fun (x4689 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4688) "timeout"
            (Ojs.float_to_js x4689)
    let (get_upload : 'tags this -> XMLHttpRequestUpload.t) =
      fun (x4691 : 'tags this) ->
        XMLHttpRequestUpload.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4691) "upload")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x4693 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4693) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x4695 : 'tags this) ->
        fun (x4696 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4695) "withCredentials"
            (Ojs.bool_to_js x4696)
    let (abort : 'tags this -> unit) =
      fun (x4698 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4698) "abort" [||])
    let (getAllResponseHeaders : 'tags this -> string) =
      fun (x4700 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4700) "getAllResponseHeaders" [||])
    let (getResponseHeader : 'tags this -> name:string -> string option) =
      fun (x4703 : 'tags this) ->
        fun ~name:(x4702 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4703) "getResponseHeader"
               [|(Ojs.string_to_js x4702)|])
    let (open_ :
      'tags this ->
        method_:string -> url:[ `U1 of string  | `U2 of URL.t ] -> unit)
      =
      fun (x4710 : 'tags this) ->
        fun ~method_:(x4706 : string) ->
          fun ~url:(x4707 : [ `U1 of string  | `U2 of URL.t ]) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4710) "open"
                 [|(Ojs.string_to_js x4706);((match x4707 with
                                              | `U1 x4708 ->
                                                  Ojs.string_to_js x4708
                                              | `U2 x4709 ->
                                                  URL.t_to_js x4709))|])
    let (open_' :
      'tags this ->
        method_:string ->
          url:[ `U1 of string  | `U2 of URL.t ] ->
            async:bool ->
              ?username:string option ->
                ?password:string option -> unit -> unit)
      =
      fun (x4724 : 'tags this) ->
        fun ~method_:(x4712 : string) ->
          fun ~url:(x4713 : [ `U1 of string  | `U2 of URL.t ]) ->
            fun ~async:(x4714 : bool) ->
              fun ?username:(x4715 : string option option) ->
                fun ?password:(x4716 : string option option) ->
                  fun () ->
                    ignore
                      (let x4726 = this_to_js Obj.magic x4724 in
                       Ojs.call (Ojs.get_prop_ascii x4726 "open") "apply"
                         [|x4726;((let x4717 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4717 "push"
                                        [|(Ojs.string_to_js x4712)|]);
                                   ignore
                                     (Ojs.call x4717 "push"
                                        [|((match x4713 with
                                            | `U1 x4722 ->
                                                Ojs.string_to_js x4722
                                            | `U2 x4723 -> URL.t_to_js x4723))|]);
                                   ignore
                                     (Ojs.call x4717 "push"
                                        [|(Ojs.bool_to_js x4714)|]);
                                   (match x4715 with
                                    | Some x4720 ->
                                        ignore
                                          (Ojs.call x4717 "push"
                                             [|(Ojs.option_to_js
                                                  Ojs.string_to_js x4720)|])
                                    | None -> ());
                                   (match x4716 with
                                    | Some x4718 ->
                                        ignore
                                          (Ojs.call x4717 "push"
                                             [|(Ojs.option_to_js
                                                  Ojs.string_to_js x4718)|])
                                    | None -> ());
                                   x4717))|])
    let (overrideMimeType : 'tags this -> mime:string -> unit) =
      fun (x4728 : 'tags this) ->
        fun ~mime:(x4727 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4728) "overrideMimeType"
               [|(Ojs.string_to_js x4727)|])
    let (send :
      'tags this -> ?body:XMLHttpRequestBodyInit.t option -> unit -> unit) =
      fun (x4734 : 'tags this) ->
        fun ?body:(x4730 : XMLHttpRequestBodyInit.t option option) ->
          fun () ->
            ignore
              (let x4736 = this_to_js Obj.magic x4734 in
               Ojs.call (Ojs.get_prop_ascii x4736 "send") "apply"
                 [|x4736;((let x4731 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4730 with
                            | Some x4732 ->
                                ignore
                                  (Ojs.call x4731 "push"
                                     [|(Ojs.option_to_js
                                          XMLHttpRequestBodyInit.t_to_js
                                          x4732)|])
                            | None -> ());
                           x4731))|])
    let (setRequestHeader :
      'tags this -> name:string -> value:string -> unit) =
      fun (x4739 : 'tags this) ->
        fun ~name:(x4737 : string) ->
          fun ~value:(x4738 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4739) "setRequestHeader"
                 [|(Ojs.string_to_js x4737);(Ojs.string_to_js x4738)|])
    let (get_DONE : 'tags this -> float) =
      fun (x4741 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4741) "DONE")
    let (get_HEADERS_RECEIVED : 'tags this -> float) =
      fun (x4743 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4743) "HEADERS_RECEIVED")
    let (get_LOADING : 'tags this -> float) =
      fun (x4745 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4745) "LOADING")
    let (get_OPENED : 'tags this -> float) =
      fun (x4747 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4747) "OPENED")
    let (get_UNSENT : 'tags this -> float) =
      fun (x4749 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4749) "UNSENT")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4760 : 'tags this) ->
        fun ~type_:(x4751 : 'K) ->
          fun ~listener:(x4752 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4753 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4762 = this_to_js Obj.magic x4760 in
                   Ojs.call (Ojs.get_prop_ascii x4762 "addEventListener")
                     "apply"
                     [|x4762;((let x4754 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4754 "push" [|(Obj.magic x4751)|]);
                               ignore
                                 (Ojs.call x4754 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4758 : Ojs.t) ->
                                            fun (x4759 : Ojs.t) ->
                                              any_to_js
                                                (x4752 ~this:(t_of_js x4758)
                                                   ~ev:(any_of_js x4759))))|]);
                               (match x4753 with
                                | Some x4755 ->
                                    ignore
                                      (Ojs.call x4754 "push"
                                         [|((match x4755 with
                                             | `U1 x4756 ->
                                                 Ojs.bool_to_js x4756
                                             | `U2 x4757 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x4757))|])
                                | None -> ());
                               x4754))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4770 : 'tags this) ->
        fun ~type_:(x4763 : string) ->
          fun ~listener:(x4764 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4765 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4772 = this_to_js Obj.magic x4770 in
                   Ojs.call (Ojs.get_prop_ascii x4772 "addEventListener")
                     "apply"
                     [|x4772;((let x4766 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4766 "push"
                                    [|(Ojs.string_to_js x4763)|]);
                               ignore
                                 (Ojs.call x4766 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4764)|]);
                               (match x4765 with
                                | Some x4767 ->
                                    ignore
                                      (Ojs.call x4766 "push"
                                         [|((match x4767 with
                                             | `U1 x4768 ->
                                                 Ojs.bool_to_js x4768
                                             | `U2 x4769 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x4769))|])
                                | None -> ());
                               x4766))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4782 : 'tags this) ->
        fun ~type_:(x4773 : 'K) ->
          fun ~listener:(x4774 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4775 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4784 = this_to_js Obj.magic x4782 in
                   Ojs.call (Ojs.get_prop_ascii x4784 "removeEventListener")
                     "apply"
                     [|x4784;((let x4776 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4776 "push" [|(Obj.magic x4773)|]);
                               ignore
                                 (Ojs.call x4776 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4780 : Ojs.t) ->
                                            fun (x4781 : Ojs.t) ->
                                              any_to_js
                                                (x4774 ~this:(t_of_js x4780)
                                                   ~ev:(any_of_js x4781))))|]);
                               (match x4775 with
                                | Some x4777 ->
                                    ignore
                                      (Ojs.call x4776 "push"
                                         [|((match x4777 with
                                             | `U1 x4778 ->
                                                 Ojs.bool_to_js x4778
                                             | `U2 x4779 ->
                                                 EventListenerOptions.t_to_js
                                                   x4779))|])
                                | None -> ());
                               x4776))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4792 : 'tags this) ->
        fun ~type_:(x4785 : string) ->
          fun ~listener:(x4786 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4787 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4794 = this_to_js Obj.magic x4792 in
                   Ojs.call (Ojs.get_prop_ascii x4794 "removeEventListener")
                     "apply"
                     [|x4794;((let x4788 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4788 "push"
                                    [|(Ojs.string_to_js x4785)|]);
                               ignore
                                 (Ojs.call x4788 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4786)|]);
                               (match x4787 with
                                | Some x4789 ->
                                    ignore
                                      (Ojs.call x4788 "push"
                                         [|((match x4789 with
                                             | `U1 x4790 ->
                                                 Ojs.bool_to_js x4790
                                             | `U2 x4791 ->
                                                 EventListenerOptions.t_to_js
                                                   x4791))|])
                                | None -> ());
                               x4788))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "DONE")
    let (headers_received : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
             "HEADERS_RECEIVED")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "LOADING")
    let (opened : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "OPENED")
    let (unsent : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "UNSENT")
  end
 and
  XMLHttpRequestEventTarget:sig
                              type t =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestEventTarget ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
  struct
    type t = [ `EventTarget  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4796 : Ojs.t) -> t_of_js x4796
    and t_0_to_js : t_0 -> Ojs.t = fun (x4795 : t) -> t_to_js x4795
    type tags = [ `EventTarget  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTarget ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4799 : Ojs.t) -> intf_of_js __tags_of_js x4799
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4797 : __tags intf) -> intf_to_js __tags_to_js x4797
    let (get_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4801 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4803 : Ojs.t) ->
             fun ~this:(x4804 : XMLHttpRequest.t) ->
               fun ~ev:(x4805 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4803
                      [|(XMLHttpRequest.t_to_js x4804);(ProgressEvent.t_0_to_js
                                                          x4805)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4801) "onabort")
    let (set_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4806 : 'tags this) ->
        fun
          (x4807 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4806) "onabort"
            (Ojs.option_to_js
               (fun
                  (x4808 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4809 : Ojs.t) ->
                       fun (x4810 : Ojs.t) ->
                         any_to_js
                           (x4808 ~this:(XMLHttpRequest.t_of_js x4809)
                              ~ev:(ProgressEvent.t_0_of_js x4810)))) x4807)
    let (get_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4812 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4814 : Ojs.t) ->
             fun ~this:(x4815 : XMLHttpRequest.t) ->
               fun ~ev:(x4816 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4814
                      [|(XMLHttpRequest.t_to_js x4815);(ProgressEvent.t_0_to_js
                                                          x4816)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4812) "onerror")
    let (set_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4817 : 'tags this) ->
        fun
          (x4818 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4817) "onerror"
            (Ojs.option_to_js
               (fun
                  (x4819 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4820 : Ojs.t) ->
                       fun (x4821 : Ojs.t) ->
                         any_to_js
                           (x4819 ~this:(XMLHttpRequest.t_of_js x4820)
                              ~ev:(ProgressEvent.t_0_of_js x4821)))) x4818)
    let (get_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4823 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4825 : Ojs.t) ->
             fun ~this:(x4826 : XMLHttpRequest.t) ->
               fun ~ev:(x4827 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4825
                      [|(XMLHttpRequest.t_to_js x4826);(ProgressEvent.t_0_to_js
                                                          x4827)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4823) "onload")
    let (set_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4828 : 'tags this) ->
        fun
          (x4829 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4828) "onload"
            (Ojs.option_to_js
               (fun
                  (x4830 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4831 : Ojs.t) ->
                       fun (x4832 : Ojs.t) ->
                         any_to_js
                           (x4830 ~this:(XMLHttpRequest.t_of_js x4831)
                              ~ev:(ProgressEvent.t_0_of_js x4832)))) x4829)
    let (get_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4834 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4836 : Ojs.t) ->
             fun ~this:(x4837 : XMLHttpRequest.t) ->
               fun ~ev:(x4838 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4836
                      [|(XMLHttpRequest.t_to_js x4837);(ProgressEvent.t_0_to_js
                                                          x4838)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4834) "onloadend")
    let (set_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4839 : 'tags this) ->
        fun
          (x4840 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4839) "onloadend"
            (Ojs.option_to_js
               (fun
                  (x4841 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4842 : Ojs.t) ->
                       fun (x4843 : Ojs.t) ->
                         any_to_js
                           (x4841 ~this:(XMLHttpRequest.t_of_js x4842)
                              ~ev:(ProgressEvent.t_0_of_js x4843)))) x4840)
    let (get_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4845 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4847 : Ojs.t) ->
             fun ~this:(x4848 : XMLHttpRequest.t) ->
               fun ~ev:(x4849 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4847
                      [|(XMLHttpRequest.t_to_js x4848);(ProgressEvent.t_0_to_js
                                                          x4849)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4845) "onloadstart")
    let (set_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4850 : 'tags this) ->
        fun
          (x4851 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4850) "onloadstart"
            (Ojs.option_to_js
               (fun
                  (x4852 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4853 : Ojs.t) ->
                       fun (x4854 : Ojs.t) ->
                         any_to_js
                           (x4852 ~this:(XMLHttpRequest.t_of_js x4853)
                              ~ev:(ProgressEvent.t_0_of_js x4854)))) x4851)
    let (get_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4856 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4858 : Ojs.t) ->
             fun ~this:(x4859 : XMLHttpRequest.t) ->
               fun ~ev:(x4860 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4858
                      [|(XMLHttpRequest.t_to_js x4859);(ProgressEvent.t_0_to_js
                                                          x4860)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4856) "onprogress")
    let (set_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4861 : 'tags this) ->
        fun
          (x4862 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4861) "onprogress"
            (Ojs.option_to_js
               (fun
                  (x4863 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4864 : Ojs.t) ->
                       fun (x4865 : Ojs.t) ->
                         any_to_js
                           (x4863 ~this:(XMLHttpRequest.t_of_js x4864)
                              ~ev:(ProgressEvent.t_0_of_js x4865)))) x4862)
    let (get_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4867 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4869 : Ojs.t) ->
             fun ~this:(x4870 : XMLHttpRequest.t) ->
               fun ~ev:(x4871 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4869
                      [|(XMLHttpRequest.t_to_js x4870);(ProgressEvent.t_0_to_js
                                                          x4871)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4867) "ontimeout")
    let (set_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4872 : 'tags this) ->
        fun
          (x4873 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4872) "ontimeout"
            (Ojs.option_to_js
               (fun
                  (x4874 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4875 : Ojs.t) ->
                       fun (x4876 : Ojs.t) ->
                         any_to_js
                           (x4874 ~this:(XMLHttpRequest.t_of_js x4875)
                              ~ev:(ProgressEvent.t_0_of_js x4876)))) x4873)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4887 : 'tags this) ->
        fun ~type_:(x4878 : 'K) ->
          fun ~listener:(x4879 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4880 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4889 = this_to_js Obj.magic x4887 in
                   Ojs.call (Ojs.get_prop_ascii x4889 "addEventListener")
                     "apply"
                     [|x4889;((let x4881 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4881 "push" [|(Obj.magic x4878)|]);
                               ignore
                                 (Ojs.call x4881 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4885 : Ojs.t) ->
                                            fun (x4886 : Ojs.t) ->
                                              any_to_js
                                                (x4879 ~this:(t_of_js x4885)
                                                   ~ev:(any_of_js x4886))))|]);
                               (match x4880 with
                                | Some x4882 ->
                                    ignore
                                      (Ojs.call x4881 "push"
                                         [|((match x4882 with
                                             | `U1 x4883 ->
                                                 Ojs.bool_to_js x4883
                                             | `U2 x4884 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x4884))|])
                                | None -> ());
                               x4881))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4897 : 'tags this) ->
        fun ~type_:(x4890 : string) ->
          fun ~listener:(x4891 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4892 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4899 = this_to_js Obj.magic x4897 in
                   Ojs.call (Ojs.get_prop_ascii x4899 "addEventListener")
                     "apply"
                     [|x4899;((let x4893 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4893 "push"
                                    [|(Ojs.string_to_js x4890)|]);
                               ignore
                                 (Ojs.call x4893 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4891)|]);
                               (match x4892 with
                                | Some x4894 ->
                                    ignore
                                      (Ojs.call x4893 "push"
                                         [|((match x4894 with
                                             | `U1 x4895 ->
                                                 Ojs.bool_to_js x4895
                                             | `U2 x4896 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x4896))|])
                                | None -> ());
                               x4893))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4909 : 'tags this) ->
        fun ~type_:(x4900 : 'K) ->
          fun ~listener:(x4901 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4902 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4911 = this_to_js Obj.magic x4909 in
                   Ojs.call (Ojs.get_prop_ascii x4911 "removeEventListener")
                     "apply"
                     [|x4911;((let x4903 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4903 "push" [|(Obj.magic x4900)|]);
                               ignore
                                 (Ojs.call x4903 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4907 : Ojs.t) ->
                                            fun (x4908 : Ojs.t) ->
                                              any_to_js
                                                (x4901 ~this:(t_of_js x4907)
                                                   ~ev:(any_of_js x4908))))|]);
                               (match x4902 with
                                | Some x4904 ->
                                    ignore
                                      (Ojs.call x4903 "push"
                                         [|((match x4904 with
                                             | `U1 x4905 ->
                                                 Ojs.bool_to_js x4905
                                             | `U2 x4906 ->
                                                 EventListenerOptions.t_to_js
                                                   x4906))|])
                                | None -> ());
                               x4903))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4919 : 'tags this) ->
        fun ~type_:(x4912 : string) ->
          fun ~listener:(x4913 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4914 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4921 = this_to_js Obj.magic x4919 in
                   Ojs.call (Ojs.get_prop_ascii x4921 "removeEventListener")
                     "apply"
                     [|x4921;((let x4915 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4915 "push"
                                    [|(Ojs.string_to_js x4912)|]);
                               ignore
                                 (Ojs.call x4915 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4913)|]);
                               (match x4914 with
                                | Some x4916 ->
                                    ignore
                                      (Ojs.call x4915 "push"
                                         [|((match x4916 with
                                             | `U1 x4917 ->
                                                 Ojs.bool_to_js x4917
                                             | `U2 x4918 ->
                                                 EventListenerOptions.t_to_js
                                                   x4918))|])
                                | None -> ());
                               x4915))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget") 
             [||])
  end and
       XMLHttpRequestUpload:sig
                              type t =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget 
                                  | `XMLHttpRequestUpload ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestUpload ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
       struct
         type t =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x4923 : Ojs.t) -> t_of_js x4923
         and t_0_to_js : t_0 -> Ojs.t = fun (x4922 : t) -> t_to_js x4922
         type tags =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ]
         type tags_0 = tags
         type 'tags this =
           'tags intf constraint 'tags = [> `XMLHttpRequestUpload ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x4926 : Ojs.t) -> intf_of_js __tags_of_js x4926
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x4924 : __tags intf) -> intf_to_js __tags_to_js x4924
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x4937 : 'tags this) ->
             fun ~type_:(x4928 : 'K) ->
               fun ~listener:(x4929 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x4930 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x4939 = this_to_js Obj.magic x4937 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4939 "addEventListener")
                          "apply"
                          [|x4939;((let x4931 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4931 "push"
                                         [|(Obj.magic x4928)|]);
                                    ignore
                                      (Ojs.call x4931 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x4935 : Ojs.t) ->
                                                 fun (x4936 : Ojs.t) ->
                                                   any_to_js
                                                     (x4929
                                                        ~this:(t_of_js x4935)
                                                        ~ev:(any_of_js x4936))))|]);
                                    (match x4930 with
                                     | Some x4932 ->
                                         ignore
                                           (Ojs.call x4931 "push"
                                              [|((match x4932 with
                                                  | `U1 x4933 ->
                                                      Ojs.bool_to_js x4933
                                                  | `U2 x4934 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x4934))|])
                                     | None -> ());
                                    x4931))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x4947 : 'tags this) ->
             fun ~type_:(x4940 : string) ->
               fun ~listener:(x4941 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x4942 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x4949 = this_to_js Obj.magic x4947 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4949 "addEventListener")
                          "apply"
                          [|x4949;((let x4943 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4943 "push"
                                         [|(Ojs.string_to_js x4940)|]);
                                    ignore
                                      (Ojs.call x4943 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x4941)|]);
                                    (match x4942 with
                                     | Some x4944 ->
                                         ignore
                                           (Ojs.call x4943 "push"
                                              [|((match x4944 with
                                                  | `U1 x4945 ->
                                                      Ojs.bool_to_js x4945
                                                  | `U2 x4946 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x4946))|])
                                     | None -> ());
                                    x4943))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x4959 : 'tags this) ->
             fun ~type_:(x4950 : 'K) ->
               fun ~listener:(x4951 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x4952 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x4961 = this_to_js Obj.magic x4959 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4961 "removeEventListener")
                          "apply"
                          [|x4961;((let x4953 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4953 "push"
                                         [|(Obj.magic x4950)|]);
                                    ignore
                                      (Ojs.call x4953 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x4957 : Ojs.t) ->
                                                 fun (x4958 : Ojs.t) ->
                                                   any_to_js
                                                     (x4951
                                                        ~this:(t_of_js x4957)
                                                        ~ev:(any_of_js x4958))))|]);
                                    (match x4952 with
                                     | Some x4954 ->
                                         ignore
                                           (Ojs.call x4953 "push"
                                              [|((match x4954 with
                                                  | `U1 x4955 ->
                                                      Ojs.bool_to_js x4955
                                                  | `U2 x4956 ->
                                                      EventListenerOptions.t_to_js
                                                        x4956))|])
                                     | None -> ());
                                    x4953))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x4969 : 'tags this) ->
             fun ~type_:(x4962 : string) ->
               fun ~listener:(x4963 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x4964 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x4971 = this_to_js Obj.magic x4969 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4971 "removeEventListener")
                          "apply"
                          [|x4971;((let x4965 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4965 "push"
                                         [|(Ojs.string_to_js x4962)|]);
                                    ignore
                                      (Ojs.call x4965 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x4963)|]);
                                    (match x4964 with
                                     | Some x4966 ->
                                         ignore
                                           (Ojs.call x4965 "push"
                                              [|((match x4966 with
                                                  | `U1 x4967 ->
                                                      Ojs.bool_to_js x4967
                                                  | `U2 x4968 ->
                                                      EventListenerOptions.t_to_js
                                                        x4968))|])
                                     | None -> ());
                                    x4965))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload")
                  "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload") 
                  [||])
       end
module XMLHttpRequestEventTargetEventMap =
  struct
    type t = [ `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4973 : Ojs.t) -> t_of_js x4973
    and t_0_to_js : t_0 -> Ojs.t = fun (x4972 : t) -> t_to_js x4972
    type tags = [ `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTargetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4976 : Ojs.t) -> intf_of_js __tags_of_js x4976
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4974 : __tags intf) -> intf_to_js __tags_to_js x4974
    let (get_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4978 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4978) "abort")
    let (set_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4981 : 'tags this) ->
        fun (x4982 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4981) "abort"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4982)
    let (get_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4985 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4985) "error")
    let (set_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4988 : 'tags this) ->
        fun (x4989 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4988) "error"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4989)
    let (get_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4992 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4992) "load")
    let (set_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4995 : 'tags this) ->
        fun (x4996 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4995) "load"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4996)
    let (get_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4999 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4999) "loadend")
    let (set_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5002 : 'tags this) ->
        fun (x5003 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5002) "loadend"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5003)
    let (get_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5006 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5006) "loadstart")
    let (set_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5009 : 'tags this) ->
        fun (x5010 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5009) "loadstart"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5010)
    let (get_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5013 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5013) "progress")
    let (set_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5016 : 'tags this) ->
        fun (x5017 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5016) "progress"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5017)
    let (get_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5020 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5020) "timeout")
    let (set_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5023 : 'tags this) ->
        fun (x5024 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5023) "timeout"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5024)
    let (create :
      abort:XMLHttpRequestEventTarget.t ProgressEvent.t ->
        error:XMLHttpRequestEventTarget.t ProgressEvent.t ->
          load:XMLHttpRequestEventTarget.t ProgressEvent.t ->
            loadend:XMLHttpRequestEventTarget.t ProgressEvent.t ->
              loadstart:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                progress:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                  timeout:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                    unit -> t)
      =
      fun ~abort:(x5027 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
        fun ~error:(x5028 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          fun ~load:(x5029 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
            fun
              ~loadend:(x5030 : XMLHttpRequestEventTarget.t ProgressEvent.t)
              ->
              fun
                ~loadstart:(x5031 :
                             XMLHttpRequestEventTarget.t ProgressEvent.t)
                ->
                fun
                  ~progress:(x5032 :
                              XMLHttpRequestEventTarget.t ProgressEvent.t)
                  ->
                  fun
                    ~timeout:(x5033 :
                               XMLHttpRequestEventTarget.t ProgressEvent.t)
                    ->
                    fun () ->
                      let x5034 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x5034 "abort"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5027);
                      Ojs.set_prop_ascii x5034 "error"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5028);
                      Ojs.set_prop_ascii x5034 "load"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5029);
                      Ojs.set_prop_ascii x5034 "loadend"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5030);
                      Ojs.set_prop_ascii x5034 "loadstart"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5031);
                      Ojs.set_prop_ascii x5034 "progress"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5032);
                      Ojs.set_prop_ascii x5034 "timeout"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5033);
                      t_of_js x5034
    let cast_from = Obj.magic
  end
module XMLHttpRequestEventMap =
  struct
    type t =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5043 : Ojs.t) -> t_of_js x5043
    and t_0_to_js : t_0 -> Ojs.t = fun (x5042 : t) -> t_to_js x5042
    type tags =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5046 : Ojs.t) -> intf_of_js __tags_of_js x5046
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5044 : __tags intf) -> intf_to_js __tags_to_js x5044
    let (get_readystatechange : 'tags this -> Event.t) =
      fun (x5048 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5048) "readystatechange")
    let (set_readystatechange : 'tags this -> Event.t -> unit) =
      fun (x5050 : 'tags this) ->
        fun (x5051 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5050) "readystatechange"
            (Event.t_to_js x5051)
    let (create : readystatechange:Event.t -> unit -> t) =
      fun ~readystatechange:(x5053 : Event.t) ->
        fun () ->
          let x5054 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5054 "readystatechange" (Event.t_to_js x5053);
          t_of_js x5054
    let cast_from = Obj.magic
  end
module ServiceWorkerState =
  struct
    type t =
      [ `L_s146_parsed  | `L_s166_redundant  | `L_s33_activated 
      | `L_s34_activating  | `L_s94_installed  | `L_s95_installing ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5056 : Ojs.t) ->
        let x5057 = x5056 in
        match Ojs.string_of_js x5057 with
        | "parsed" -> `L_s146_parsed
        | "redundant" -> `L_s166_redundant
        | "activated" -> `L_s33_activated
        | "activating" -> `L_s34_activating
        | "installed" -> `L_s94_installed
        | "installing" -> `L_s95_installing
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x5055 :
          [ `L_s146_parsed  | `L_s166_redundant  | `L_s33_activated 
          | `L_s34_activating  | `L_s94_installed  | `L_s95_installing ])
        ->
        match x5055 with
        | `L_s146_parsed -> Ojs.string_to_js "parsed"
        | `L_s166_redundant -> Ojs.string_to_js "redundant"
        | `L_s33_activated -> Ojs.string_to_js "activated"
        | `L_s34_activating -> Ojs.string_to_js "activating"
        | `L_s94_installed -> Ojs.string_to_js "installed"
        | `L_s95_installing -> Ojs.string_to_js "installing"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5059 : Ojs.t) -> t_of_js x5059
    and t_0_to_js : t_0 -> Ojs.t = fun (x5058 : t) -> t_to_js x5058
  end
module ImageBitmap =
  struct
    type t = [ `ImageBitmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5061 : Ojs.t) -> t_of_js x5061
    and t_0_to_js : t_0 -> Ojs.t = fun (x5060 : t) -> t_to_js x5060
    type tags = [ `ImageBitmap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5064 : Ojs.t) -> intf_of_js __tags_of_js x5064
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5062 : __tags intf) -> intf_to_js __tags_to_js x5062
    let (get_height : 'tags this -> float) =
      fun (x5066 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5066) "height")
    let (get_width : 'tags this -> float) =
      fun (x5068 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5068) "width")
    let (close : 'tags this -> unit) =
      fun (x5070 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5070) "close" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageBitmap")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ImageBitmap") [||])
  end
module StructuredSerializeOptions =
  struct
    type t = [ `StructuredSerializeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5073 : Ojs.t) -> t_of_js x5073
    and t_0_to_js : t_0 -> Ojs.t = fun (x5072 : t) -> t_to_js x5072
    type tags = [ `StructuredSerializeOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `StructuredSerializeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5076 : Ojs.t) -> intf_of_js __tags_of_js x5076
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5074 : __tags intf) -> intf_to_js __tags_to_js x5074
    let (get_transfer : 'tags this -> any list) =
      fun (x5078 : 'tags this) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5078) "transfer")
    let (set_transfer : 'tags this -> any list -> unit) =
      fun (x5081 : 'tags this) ->
        fun (x5082 : any list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5081) "transfer"
            (Ojs.list_to_js any_to_js x5082)
    let (create : transfer:any list -> unit -> t) =
      fun ~transfer:(x5085 : any list) ->
        fun () ->
          let x5086 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5086 "transfer"
            (Ojs.list_to_js any_to_js x5085);
          t_of_js x5086
    let cast_from = Obj.magic
  end
module ErrorEventInit =
  struct
    type t = [ `ErrorEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5089 : Ojs.t) -> t_of_js x5089
    and t_0_to_js : t_0 -> Ojs.t = fun (x5088 : t) -> t_to_js x5088
    type tags = [ `ErrorEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5092 : Ojs.t) -> intf_of_js __tags_of_js x5092
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5090 : __tags intf) -> intf_to_js __tags_to_js x5090
    let (get_colno : 'tags this -> float) =
      fun (x5094 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5094) "colno")
    let (set_colno : 'tags this -> float -> unit) =
      fun (x5096 : 'tags this) ->
        fun (x5097 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5096) "colno"
            (Ojs.float_to_js x5097)
    let (get_error : 'tags this -> any) =
      fun (x5099 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5099) "error")
    let (set_error : 'tags this -> any -> unit) =
      fun (x5101 : 'tags this) ->
        fun (x5102 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5101) "error"
            (any_to_js x5102)
    let (get_filename : 'tags this -> string) =
      fun (x5104 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5104) "filename")
    let (set_filename : 'tags this -> string -> unit) =
      fun (x5106 : 'tags this) ->
        fun (x5107 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5106) "filename"
            (Ojs.string_to_js x5107)
    let (get_lineno : 'tags this -> float) =
      fun (x5109 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5109) "lineno")
    let (set_lineno : 'tags this -> float -> unit) =
      fun (x5111 : 'tags this) ->
        fun (x5112 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5111) "lineno"
            (Ojs.float_to_js x5112)
    let (get_message : 'tags this -> string) =
      fun (x5114 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5114) "message")
    let (set_message : 'tags this -> string -> unit) =
      fun (x5116 : 'tags this) ->
        fun (x5117 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5116) "message"
            (Ojs.string_to_js x5117)
    let (create :
      colno:float ->
        error:any ->
          filename:string -> lineno:float -> message:string -> unit -> t)
      =
      fun ~colno:(x5119 : float) ->
        fun ~error:(x5120 : any) ->
          fun ~filename:(x5121 : string) ->
            fun ~lineno:(x5122 : float) ->
              fun ~message:(x5123 : string) ->
                fun () ->
                  let x5124 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5124 "colno" (Ojs.float_to_js x5119);
                  Ojs.set_prop_ascii x5124 "error" (any_to_js x5120);
                  Ojs.set_prop_ascii x5124 "filename"
                    (Ojs.string_to_js x5121);
                  Ojs.set_prop_ascii x5124 "lineno" (Ojs.float_to_js x5122);
                  Ojs.set_prop_ascii x5124 "message" (Ojs.string_to_js x5123);
                  t_of_js x5124
    let cast_from = Obj.magic
  end
module ErrorEvent =
  struct
    type t = [ `ErrorEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5126 : Ojs.t) -> t_of_js x5126
    and t_0_to_js : t_0 -> Ojs.t = fun (x5125 : t) -> t_to_js x5125
    type tags = [ `ErrorEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5129 : Ojs.t) -> intf_of_js __tags_of_js x5129
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5127 : __tags intf) -> intf_to_js __tags_to_js x5127
    let (get_colno : 'tags this -> float) =
      fun (x5131 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5131) "colno")
    let (get_error : 'tags this -> any) =
      fun (x5133 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5133) "error")
    let (get_filename : 'tags this -> string) =
      fun (x5135 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5135) "filename")
    let (get_lineno : 'tags this -> float) =
      fun (x5137 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5137) "lineno")
    let (get_message : 'tags this -> string) =
      fun (x5139 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5139) "message")
    let (create :
      colno:float ->
        error:any ->
          filename:string -> lineno:float -> message:string -> unit -> t)
      =
      fun ~colno:(x5141 : float) ->
        fun ~error:(x5142 : any) ->
          fun ~filename:(x5143 : string) ->
            fun ~lineno:(x5144 : float) ->
              fun ~message:(x5145 : string) ->
                fun () ->
                  let x5146 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5146 "colno" (Ojs.float_to_js x5141);
                  Ojs.set_prop_ascii x5146 "error" (any_to_js x5142);
                  Ojs.set_prop_ascii x5146 "filename"
                    (Ojs.string_to_js x5143);
                  Ojs.set_prop_ascii x5146 "lineno" (Ojs.float_to_js x5144);
                  Ojs.set_prop_ascii x5146 "message" (Ojs.string_to_js x5145);
                  t_of_js x5146
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t) =
      fun ~type_:(x5147 : string) ->
        fun ?eventInitDict:(x5148 : ErrorEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
                 (let x5149 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5149 "push" [|(Ojs.string_to_js x5147)|]);
                  (match x5148 with
                   | Some x5150 ->
                       ignore
                         (Ojs.call x5149 "push"
                            [|(ErrorEventInit.t_to_js x5150)|])
                   | None -> ());
                  x5149))
  end
module AbstractWorker =
  struct
    type t = [ `AbstractWorker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5152 : Ojs.t) -> t_of_js x5152
    and t_0_to_js : t_0 -> Ojs.t = fun (x5151 : t) -> t_to_js x5151
    type tags = [ `AbstractWorker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5155 : Ojs.t) -> intf_of_js __tags_of_js x5155
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5153 : __tags intf) -> intf_to_js __tags_to_js x5153
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option) =
      fun (x5157 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5159 : Ojs.t) ->
             fun ~this:(x5160 : t) ->
               fun ~ev:(x5161 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x5159
                      [|(t_to_js x5160);(ErrorEvent.t_to_js x5161)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5157) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit) =
      fun (x5162 : 'tags this) ->
        fun (x5163 : (this:t -> ev:ErrorEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5162) "onerror"
            (Ojs.option_to_js
               (fun (x5164 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5165 : Ojs.t) ->
                       fun (x5166 : Ojs.t) ->
                         any_to_js
                           (x5164 ~this:(t_of_js x5165)
                              ~ev:(ErrorEvent.t_of_js x5166)))) x5163)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5177 : 'tags this) ->
        fun ~type_:(x5168 : 'K) ->
          fun ~listener:(x5169 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5170 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5179 = this_to_js Obj.magic x5177 in
                   Ojs.call (Ojs.get_prop_ascii x5179 "addEventListener")
                     "apply"
                     [|x5179;((let x5171 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5171 "push" [|(Obj.magic x5168)|]);
                               ignore
                                 (Ojs.call x5171 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5175 : Ojs.t) ->
                                            fun (x5176 : Ojs.t) ->
                                              any_to_js
                                                (x5169 ~this:(t_of_js x5175)
                                                   ~ev:(any_of_js x5176))))|]);
                               (match x5170 with
                                | Some x5172 ->
                                    ignore
                                      (Ojs.call x5171 "push"
                                         [|((match x5172 with
                                             | `U1 x5173 ->
                                                 Ojs.bool_to_js x5173
                                             | `U2 x5174 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5174))|])
                                | None -> ());
                               x5171))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5187 : 'tags this) ->
        fun ~type_:(x5180 : string) ->
          fun ~listener:(x5181 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5182 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5189 = this_to_js Obj.magic x5187 in
                   Ojs.call (Ojs.get_prop_ascii x5189 "addEventListener")
                     "apply"
                     [|x5189;((let x5183 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5183 "push"
                                    [|(Ojs.string_to_js x5180)|]);
                               ignore
                                 (Ojs.call x5183 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5181)|]);
                               (match x5182 with
                                | Some x5184 ->
                                    ignore
                                      (Ojs.call x5183 "push"
                                         [|((match x5184 with
                                             | `U1 x5185 ->
                                                 Ojs.bool_to_js x5185
                                             | `U2 x5186 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5186))|])
                                | None -> ());
                               x5183))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5199 : 'tags this) ->
        fun ~type_:(x5190 : 'K) ->
          fun ~listener:(x5191 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5192 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5201 = this_to_js Obj.magic x5199 in
                   Ojs.call (Ojs.get_prop_ascii x5201 "removeEventListener")
                     "apply"
                     [|x5201;((let x5193 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5193 "push" [|(Obj.magic x5190)|]);
                               ignore
                                 (Ojs.call x5193 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5197 : Ojs.t) ->
                                            fun (x5198 : Ojs.t) ->
                                              any_to_js
                                                (x5191 ~this:(t_of_js x5197)
                                                   ~ev:(any_of_js x5198))))|]);
                               (match x5192 with
                                | Some x5194 ->
                                    ignore
                                      (Ojs.call x5193 "push"
                                         [|((match x5194 with
                                             | `U1 x5195 ->
                                                 Ojs.bool_to_js x5195
                                             | `U2 x5196 ->
                                                 EventListenerOptions.t_to_js
                                                   x5196))|])
                                | None -> ());
                               x5193))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5209 : 'tags this) ->
        fun ~type_:(x5202 : string) ->
          fun ~listener:(x5203 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5204 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5211 = this_to_js Obj.magic x5209 in
                   Ojs.call (Ojs.get_prop_ascii x5211 "removeEventListener")
                     "apply"
                     [|x5211;((let x5205 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5205 "push"
                                    [|(Ojs.string_to_js x5202)|]);
                               ignore
                                 (Ojs.call x5205 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5203)|]);
                               (match x5204 with
                                | Some x5206 ->
                                    ignore
                                      (Ojs.call x5205 "push"
                                         [|((match x5206 with
                                             | `U1 x5207 ->
                                                 Ojs.bool_to_js x5207
                                             | `U2 x5208 ->
                                                 EventListenerOptions.t_to_js
                                                   x5208))|])
                                | None -> ());
                               x5205))|])
    let cast_from = Obj.magic
  end
module rec
  MessageEvent:sig
                 type 'T t = [ `Event  | `MessageEvent of 'T ] intf
                 type 'T t_1 = 'T t
                 type t_0 = any t
                 [@@@js.stop ]
                 type 'T tags = [ `Event  | `MessageEvent of 'T ]
                 type 'T tags_1 = 'T tags
                 type tags_0 = any tags
                 [@@@js.start ]
                 [@@@js.implem
                   type 'T tags = [ `Event  | `MessageEvent of 'T ]
                   type 'T tags_1 = 'T tags
                   type tags_0 = any tags]
                 type ('tags, 'T) this =
                   'tags intf constraint 'tags = [> `MessageEvent of 'T ]
                 val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                 val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                 val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                 val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val initMessageEvent :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t option ->
                                   ?ports:MessagePort.t Iterable.t_1 ->
                                     unit -> unit
                 val get_data : ('tags, 'T) this -> 'T
                 val get_lastEventId : ('tags, 'T) this -> string
                 val get_origin : ('tags, 'T) this -> string
                 val get_ports : ('tags, 'T) this -> MessagePort.t list
                 val get_source :
                   ('tags, 'T) this -> MessageEventSource.t option
                 val initMessageEvent' :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t option ->
                                   ?ports:MessagePort.t list -> unit -> unit
                 val cast_from : ('tags, 'T) this -> 'T t
                 val prototype : unit -> t_0
                 val create :
                   type_:string ->
                     ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t
               end =
  struct
    type 'T t = [ `Event  | `MessageEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5214 : Ojs.t) -> t_of_js __T_of_js x5214
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x5212 : __T t) -> t_to_js __T_to_js x5212
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5218 : Ojs.t) -> t_of_js any_of_js x5218
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5216 : any t) -> t_to_js any_to_js x5216
    type 'T tags = [ `Event  | `MessageEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5222 : Ojs.t) -> intf_of_js __tags_of_js x5222
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5220 : __tags intf) -> intf_to_js __tags_to_js x5220
    let (initMessageEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t Iterable.t_1 -> unit -> unit)
      =
      fun (x5242 : ('tags, 'T) this) ->
        fun ~type_:(x5224 : string) ->
          fun ?bubbles:(x5225 : bool option) ->
            fun ?cancelable:(x5226 : bool option) ->
              fun ?data:(x5227 : any option) ->
                fun ?origin:(x5228 : string option) ->
                  fun ?lastEventId:(x5229 : string option) ->
                    fun ?source:(x5230 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x5231 : MessagePort.t Iterable.t_1 option)
                        ->
                        fun () ->
                          ignore
                            (let x5245 = this_to_js Obj.magic Obj.magic x5242 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5245 "initMessageEvent")
                               "apply"
                               [|x5245;((let x5232 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5232 "push"
                                              [|(Ojs.string_to_js x5224)|]);
                                         (match x5225 with
                                          | Some x5241 ->
                                              ignore
                                                (Ojs.call x5232 "push"
                                                   [|(Ojs.bool_to_js x5241)|])
                                          | None -> ());
                                         (match x5226 with
                                          | Some x5240 ->
                                              ignore
                                                (Ojs.call x5232 "push"
                                                   [|(Ojs.bool_to_js x5240)|])
                                          | None -> ());
                                         (match x5227 with
                                          | Some x5239 ->
                                              ignore
                                                (Ojs.call x5232 "push"
                                                   [|(any_to_js x5239)|])
                                          | None -> ());
                                         (match x5228 with
                                          | Some x5238 ->
                                              ignore
                                                (Ojs.call x5232 "push"
                                                   [|(Ojs.string_to_js x5238)|])
                                          | None -> ());
                                         (match x5229 with
                                          | Some x5237 ->
                                              ignore
                                                (Ojs.call x5232 "push"
                                                   [|(Ojs.string_to_js x5237)|])
                                          | None -> ());
                                         (match x5230 with
                                          | Some x5235 ->
                                              ignore
                                                (Ojs.call x5232 "push"
                                                   [|(Ojs.option_to_js
                                                        MessageEventSource.t_to_js
                                                        x5235)|])
                                          | None -> ());
                                         (match x5231 with
                                          | Some x5233 ->
                                              ignore
                                                (Ojs.call x5232 "push"
                                                   [|(Iterable.t_1_to_js
                                                        MessagePort.t_to_js
                                                        x5233)|])
                                          | None -> ());
                                         x5232))|])
    let (get_data : ('tags, 'T) this -> 'T) =
      fun (x5246 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5246) "data")
    let (get_lastEventId : ('tags, 'T) this -> string) =
      fun (x5249 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5249)
             "lastEventId")
    let (get_origin : ('tags, 'T) this -> string) =
      fun (x5252 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5252) "origin")
    let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
      fun (x5255 : ('tags, 'T) this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5255) "ports")
    let (get_source : ('tags, 'T) this -> MessageEventSource.t option) =
      fun (x5259 : ('tags, 'T) this) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5259) "source")
    let (initMessageEvent' :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t list -> unit -> unit)
      =
      fun (x5281 : ('tags, 'T) this) ->
        fun ~type_:(x5263 : string) ->
          fun ?bubbles:(x5264 : bool option) ->
            fun ?cancelable:(x5265 : bool option) ->
              fun ?data:(x5266 : any option) ->
                fun ?origin:(x5267 : string option) ->
                  fun ?lastEventId:(x5268 : string option) ->
                    fun ?source:(x5269 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x5270 : MessagePort.t list option) ->
                        fun () ->
                          ignore
                            (let x5284 = this_to_js Obj.magic Obj.magic x5281 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5284 "initMessageEvent")
                               "apply"
                               [|x5284;((let x5271 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5271 "push"
                                              [|(Ojs.string_to_js x5263)|]);
                                         (match x5264 with
                                          | Some x5280 ->
                                              ignore
                                                (Ojs.call x5271 "push"
                                                   [|(Ojs.bool_to_js x5280)|])
                                          | None -> ());
                                         (match x5265 with
                                          | Some x5279 ->
                                              ignore
                                                (Ojs.call x5271 "push"
                                                   [|(Ojs.bool_to_js x5279)|])
                                          | None -> ());
                                         (match x5266 with
                                          | Some x5278 ->
                                              ignore
                                                (Ojs.call x5271 "push"
                                                   [|(any_to_js x5278)|])
                                          | None -> ());
                                         (match x5267 with
                                          | Some x5277 ->
                                              ignore
                                                (Ojs.call x5271 "push"
                                                   [|(Ojs.string_to_js x5277)|])
                                          | None -> ());
                                         (match x5268 with
                                          | Some x5276 ->
                                              ignore
                                                (Ojs.call x5271 "push"
                                                   [|(Ojs.string_to_js x5276)|])
                                          | None -> ());
                                         (match x5269 with
                                          | Some x5274 ->
                                              ignore
                                                (Ojs.call x5271 "push"
                                                   [|(Ojs.option_to_js
                                                        MessageEventSource.t_to_js
                                                        x5274)|])
                                          | None -> ());
                                         (match x5270 with
                                          | Some x5272 ->
                                              ignore
                                                (Ojs.call x5271 "push"
                                                   [|(Ojs.list_to_js
                                                        MessagePort.t_to_js
                                                        x5272)|])
                                          | None -> ());
                                         x5271))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MessageEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t) =
      fun ~type_:(x5285 : string) ->
        fun ?eventInitDict:(x5286 : 'T MessageEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "MessageEvent")
                 (let x5287 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5287 "push" [|(Ojs.string_to_js x5285)|]);
                  (match x5286 with
                   | Some x5288 ->
                       ignore
                         (Ojs.call x5287 "push"
                            [|(MessageEventInit.t_to_js Obj.magic x5288)|])
                   | None -> ());
                  x5287))
  end
 and
  MessageEventInit:sig
                     type 'T t =
                       [ `EventInit  | `MessageEventInit of 'T ] intf
                     type 'T t_1 = 'T t
                     type t_0 = any t
                     [@@@js.stop ]
                     type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
                     type 'T tags_1 = 'T tags
                     type tags_0 = any tags
                     [@@@js.start ]
                     [@@@js.implem
                       type 'T tags =
                         [ `EventInit  | `MessageEventInit of 'T ]
                       type 'T tags_1 = 'T tags
                       type tags_0 = any tags]
                     type ('tags, 'T) this =
                       'tags intf constraint 'tags =
                                   [> `MessageEventInit of 'T ]
                     val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                     val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                     val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                     val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_data : ('tags, 'T) this -> 'T
                     val set_data : ('tags, 'T) this -> 'T -> unit
                     val get_lastEventId : ('tags, 'T) this -> string
                     val set_lastEventId : ('tags, 'T) this -> string -> unit
                     val get_origin : ('tags, 'T) this -> string
                     val set_origin : ('tags, 'T) this -> string -> unit
                     val get_ports : ('tags, 'T) this -> MessagePort.t list
                     val set_ports :
                       ('tags, 'T) this -> MessagePort.t list -> unit
                     val get_source :
                       ('tags, 'T) this -> MessageEventSource.t option
                     val set_source :
                       ('tags, 'T) this ->
                         MessageEventSource.t option -> unit
                     val create :
                       data:'T ->
                         lastEventId:string ->
                           origin:string ->
                             ports:MessagePort.t list ->
                               ?source:MessageEventSource.t -> unit -> 'T t
                     val cast_from : ('tags, 'T) this -> 'T t
                   end =
  struct
    type 'T t = [ `EventInit  | `MessageEventInit of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5293 : Ojs.t) -> t_of_js __T_of_js x5293
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x5291 : __T t) -> t_to_js __T_to_js x5291
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5297 : Ojs.t) -> t_of_js any_of_js x5297
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5295 : any t) -> t_to_js any_to_js x5295
    type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5301 : Ojs.t) -> intf_of_js __tags_of_js x5301
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5299 : __tags intf) -> intf_to_js __tags_to_js x5299
    let (get_data : ('tags, 'T) this -> 'T) =
      fun (x5303 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5303) "data")
    let (set_data : ('tags, 'T) this -> 'T -> unit) =
      fun (x5306 : ('tags, 'T) this) ->
        fun (x5307 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5306) "data"
            (Obj.magic x5307)
    let (get_lastEventId : ('tags, 'T) this -> string) =
      fun (x5310 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5310)
             "lastEventId")
    let (set_lastEventId : ('tags, 'T) this -> string -> unit) =
      fun (x5313 : ('tags, 'T) this) ->
        fun (x5314 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5313)
            "lastEventId" (Ojs.string_to_js x5314)
    let (get_origin : ('tags, 'T) this -> string) =
      fun (x5317 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5317) "origin")
    let (set_origin : ('tags, 'T) this -> string -> unit) =
      fun (x5320 : ('tags, 'T) this) ->
        fun (x5321 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5320) "origin"
            (Ojs.string_to_js x5321)
    let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
      fun (x5324 : ('tags, 'T) this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5324) "ports")
    let (set_ports : ('tags, 'T) this -> MessagePort.t list -> unit) =
      fun (x5328 : ('tags, 'T) this) ->
        fun (x5329 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5328) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x5329)
    let (get_source : ('tags, 'T) this -> MessageEventSource.t option) =
      fun (x5333 : ('tags, 'T) this) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5333) "source")
    let (set_source :
      ('tags, 'T) this -> MessageEventSource.t option -> unit) =
      fun (x5337 : ('tags, 'T) this) ->
        fun (x5338 : MessageEventSource.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5337) "source"
            (Ojs.option_to_js MessageEventSource.t_to_js x5338)
    let (create :
      data:'T ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:MessageEventSource.t -> unit -> 'T t)
      =
      fun ~data:(x5342 : 'T) ->
        fun ~lastEventId:(x5343 : string) ->
          fun ~origin:(x5344 : string) ->
            fun ~ports:(x5345 : MessagePort.t list) ->
              fun ?source:(x5346 : MessageEventSource.t option) ->
                fun () ->
                  let x5347 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5347 "data" (Obj.magic x5342);
                  Ojs.set_prop_ascii x5347 "lastEventId"
                    (Ojs.string_to_js x5343);
                  Ojs.set_prop_ascii x5347 "origin" (Ojs.string_to_js x5344);
                  Ojs.set_prop_ascii x5347 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x5345);
                  (match x5346 with
                   | Some x5349 ->
                       Ojs.set_prop_ascii x5347 "source"
                         (MessageEventSource.t_to_js x5349)
                   | None -> ());
                  t_of_js Obj.magic x5347
    let cast_from = Obj.magic
  end and
       MessageEventSource:sig
                            type t = (MessagePort.t, ServiceWorker.t) union2
                            type t_0 = t
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                          end =
       struct
         type t = (MessagePort.t, ServiceWorker.t) union2
         let rec t_of_js : Ojs.t -> t =
           fun (x5354 : Ojs.t) ->
             union2_of_js MessagePort.t_of_js ServiceWorker.t_of_js x5354
         and t_to_js : t -> Ojs.t =
           fun (x5351 : (MessagePort.t, ServiceWorker.t) union2) ->
             union2_to_js MessagePort.t_to_js ServiceWorker.t_to_js x5351
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x5358 : Ojs.t) -> t_of_js x5358
         and t_0_to_js : t_0 -> Ojs.t = fun (x5357 : t) -> t_to_js x5357
       end and
            MessagePort:sig
                          type t = [ `EventTarget  | `MessagePort ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags = [ `EventTarget  | `MessagePort ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags = [ `EventTarget  | `MessagePort ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags = [> `MessagePort ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val get_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                          val set_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                                -> unit
                          val get_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                          val set_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                                -> unit
                          val close : 'tags this -> unit
                          val postMessage :
                            'tags this ->
                              message:any ->
                                transfer:Transferable.t list -> unit
                          val postMessage' :
                            'tags this ->
                              message:any ->
                                ?options:StructuredSerializeOptions.t ->
                                  unit -> unit
                          val start : 'tags this -> unit
                          val addEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of AddEventListenerOptions.t ]
                                    -> unit -> unit
                          val addEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of AddEventListenerOptions.t ]
                                    -> unit -> unit
                          val removeEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of EventListenerOptions.t ]
                                    -> unit -> unit
                          val removeEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of EventListenerOptions.t ]
                                    -> unit -> unit
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create : unit -> t
                        end =
            struct
              type t = [ `EventTarget  | `MessagePort ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x5360 : Ojs.t) -> t_of_js x5360
              and t_0_to_js : t_0 -> Ojs.t = fun (x5359 : t) -> t_to_js x5359
              type tags = [ `EventTarget  | `MessagePort ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `MessagePort ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x5363 : Ojs.t) -> intf_of_js __tags_of_js x5363
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x5361 : __tags intf) -> intf_to_js __tags_to_js x5361
              let (get_onmessage :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option)
                =
                fun (x5365 : 'tags this) ->
                  Ojs.option_of_js
                    (fun (x5367 : Ojs.t) ->
                       fun ~this:(x5368 : t) ->
                         fun ~ev:(x5369 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x5367
                                [|(t_to_js x5368);(MessageEvent.t_0_to_js
                                                     x5369)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x5365)
                       "onmessage")
              let (set_onmessage :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) option -> unit)
                =
                fun (x5370 : 'tags this) ->
                  fun (x5371 : (this:t -> ev:MessageEvent.t_0 -> any) option)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x5370)
                      "onmessage"
                      (Ojs.option_to_js
                         (fun (x5372 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x5373 : Ojs.t) ->
                                 fun (x5374 : Ojs.t) ->
                                   any_to_js
                                     (x5372 ~this:(t_of_js x5373)
                                        ~ev:(MessageEvent.t_0_of_js x5374))))
                         x5371)
              let (get_onmessageerror :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option)
                =
                fun (x5376 : 'tags this) ->
                  Ojs.option_of_js
                    (fun (x5378 : Ojs.t) ->
                       fun ~this:(x5379 : t) ->
                         fun ~ev:(x5380 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x5378
                                [|(t_to_js x5379);(MessageEvent.t_0_to_js
                                                     x5380)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x5376)
                       "onmessageerror")
              let (set_onmessageerror :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) option -> unit)
                =
                fun (x5381 : 'tags this) ->
                  fun (x5382 : (this:t -> ev:MessageEvent.t_0 -> any) option)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x5381)
                      "onmessageerror"
                      (Ojs.option_to_js
                         (fun (x5383 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x5384 : Ojs.t) ->
                                 fun (x5385 : Ojs.t) ->
                                   any_to_js
                                     (x5383 ~this:(t_of_js x5384)
                                        ~ev:(MessageEvent.t_0_of_js x5385))))
                         x5382)
              let (close : 'tags this -> unit) =
                fun (x5387 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x5387) "close" [||])
              let (postMessage :
                'tags this ->
                  message:any -> transfer:Transferable.t list -> unit)
                =
                fun (x5392 : 'tags this) ->
                  fun ~message:(x5389 : any) ->
                    fun ~transfer:(x5390 : Transferable.t list) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5392) "postMessage"
                           [|(any_to_js x5389);(Ojs.list_to_js
                                                  Transferable.t_to_js x5390)|])
              let (postMessage' :
                'tags this ->
                  message:any ->
                    ?options:StructuredSerializeOptions.t -> unit -> unit)
                =
                fun (x5398 : 'tags this) ->
                  fun ~message:(x5394 : any) ->
                    fun
                      ?options:(x5395 : StructuredSerializeOptions.t option)
                      ->
                      fun () ->
                        ignore
                          (let x5400 = this_to_js Obj.magic x5398 in
                           Ojs.call (Ojs.get_prop_ascii x5400 "postMessage")
                             "apply"
                             [|x5400;((let x5396 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x5396 "push"
                                            [|(any_to_js x5394)|]);
                                       (match x5395 with
                                        | Some x5397 ->
                                            ignore
                                              (Ojs.call x5396 "push"
                                                 [|(StructuredSerializeOptions.t_to_js
                                                      x5397)|])
                                        | None -> ());
                                       x5396))|])
              let (start : 'tags this -> unit) =
                fun (x5401 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x5401) "start" [||])
              let (addEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:[ `U1 of bool 
                               | `U2 of AddEventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5412 : 'tags this) ->
                  fun ~type_:(x5403 : 'K) ->
                    fun ~listener:(x5404 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x5405 :
                                   [ `U1 of bool 
                                   | `U2 of AddEventListenerOptions.t ]
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x5414 = this_to_js Obj.magic x5412 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5414 "addEventListener")
                               "apply"
                               [|x5414;((let x5406 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5406 "push"
                                              [|(Obj.magic x5403)|]);
                                         ignore
                                           (Ojs.call x5406 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x5410 : Ojs.t) ->
                                                      fun (x5411 : Ojs.t) ->
                                                        any_to_js
                                                          (x5404
                                                             ~this:(t_of_js
                                                                    x5410)
                                                             ~ev:(any_of_js
                                                                    x5411))))|]);
                                         (match x5405 with
                                          | Some x5407 ->
                                              ignore
                                                (Ojs.call x5406 "push"
                                                   [|((match x5407 with
                                                       | `U1 x5408 ->
                                                           Ojs.bool_to_js
                                                             x5408
                                                       | `U2 x5409 ->
                                                           AddEventListenerOptions.t_to_js
                                                             x5409))|])
                                          | None -> ());
                                         x5406))|])
              let (addEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:[ `U1 of bool 
                               | `U2 of AddEventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5422 : 'tags this) ->
                  fun ~type_:(x5415 : string) ->
                    fun
                      ~listener:(x5416 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x5417 :
                                   [ `U1 of bool 
                                   | `U2 of AddEventListenerOptions.t ]
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x5424 = this_to_js Obj.magic x5422 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5424 "addEventListener")
                               "apply"
                               [|x5424;((let x5418 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5418 "push"
                                              [|(Ojs.string_to_js x5415)|]);
                                         ignore
                                           (Ojs.call x5418 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x5416)|]);
                                         (match x5417 with
                                          | Some x5419 ->
                                              ignore
                                                (Ojs.call x5418 "push"
                                                   [|((match x5419 with
                                                       | `U1 x5420 ->
                                                           Ojs.bool_to_js
                                                             x5420
                                                       | `U2 x5421 ->
                                                           AddEventListenerOptions.t_to_js
                                                             x5421))|])
                                          | None -> ());
                                         x5418))|])
              let (removeEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:[ `U1 of bool 
                               | `U2 of EventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5434 : 'tags this) ->
                  fun ~type_:(x5425 : 'K) ->
                    fun ~listener:(x5426 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x5427 :
                                   [ `U1 of bool 
                                   | `U2 of EventListenerOptions.t ] option)
                        ->
                        fun () ->
                          ignore
                            (let x5436 = this_to_js Obj.magic x5434 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5436
                                  "removeEventListener") "apply"
                               [|x5436;((let x5428 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5428 "push"
                                              [|(Obj.magic x5425)|]);
                                         ignore
                                           (Ojs.call x5428 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x5432 : Ojs.t) ->
                                                      fun (x5433 : Ojs.t) ->
                                                        any_to_js
                                                          (x5426
                                                             ~this:(t_of_js
                                                                    x5432)
                                                             ~ev:(any_of_js
                                                                    x5433))))|]);
                                         (match x5427 with
                                          | Some x5429 ->
                                              ignore
                                                (Ojs.call x5428 "push"
                                                   [|((match x5429 with
                                                       | `U1 x5430 ->
                                                           Ojs.bool_to_js
                                                             x5430
                                                       | `U2 x5431 ->
                                                           EventListenerOptions.t_to_js
                                                             x5431))|])
                                          | None -> ());
                                         x5428))|])
              let (removeEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:[ `U1 of bool 
                               | `U2 of EventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5444 : 'tags this) ->
                  fun ~type_:(x5437 : string) ->
                    fun
                      ~listener:(x5438 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x5439 :
                                   [ `U1 of bool 
                                   | `U2 of EventListenerOptions.t ] option)
                        ->
                        fun () ->
                          ignore
                            (let x5446 = this_to_js Obj.magic x5444 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5446
                                  "removeEventListener") "apply"
                               [|x5446;((let x5440 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5440 "push"
                                              [|(Ojs.string_to_js x5437)|]);
                                         ignore
                                           (Ojs.call x5440 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x5438)|]);
                                         (match x5439 with
                                          | Some x5441 ->
                                              ignore
                                                (Ojs.call x5440 "push"
                                                   [|((match x5441 with
                                                       | `U1 x5442 ->
                                                           Ojs.bool_to_js
                                                             x5442
                                                       | `U2 x5443 ->
                                                           EventListenerOptions.t_to_js
                                                             x5443))|])
                                          | None -> ());
                                         x5440))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "MessagePort")
                       "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global "MessagePort") 
                       [||])
            end and
                 ServiceWorker:sig
                                 type t =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ] intf
                                 type t_0 = t
                                 [@@@js.stop ]
                                 type tags =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ]
                                 type tags_0 = tags
                                 [@@@js.start ]
                                 [@@@js.implem
                                   type tags =
                                     [ `AbstractWorker  | `EventTarget 
                                     | `ServiceWorker ]
                                   type tags_0 = tags]
                                 type 'tags this =
                                   'tags intf constraint 'tags =
                                               [> `ServiceWorker ]
                                 val t_to_js : t -> Ojs.t
                                 val t_of_js : Ojs.t -> t
                                 val t_0_to_js : t_0 -> Ojs.t
                                 val t_0_of_js : Ojs.t -> t_0
                                 val get_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) option
                                 val set_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) option ->
                                       unit
                                 val get_scriptURL : 'tags this -> string
                                 val get_state :
                                   'tags this -> ServiceWorkerState.t
                                 val postMessage :
                                   'tags this ->
                                     message:any ->
                                       transfer:Transferable.t list -> unit
                                 val postMessage' :
                                   'tags this ->
                                     message:any ->
                                       ?options:StructuredSerializeOptions.t
                                         -> unit -> unit
                                 val addEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                           -> unit -> unit
                                 val addEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                           -> unit -> unit
                                 val removeEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                           -> unit -> unit
                                 val removeEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                           -> unit -> unit
                                 val cast_from : 'tags this -> t
                                 val prototype : unit -> t
                                 val create : unit -> t
                               end =
                 struct
                   type t =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                       intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x5448 : Ojs.t) -> t_of_js x5448
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x5447 : t) -> t_to_js x5447
                   type tags =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `ServiceWorker ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x5451 : Ojs.t) -> intf_of_js __tags_of_js x5451
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x5449 : __tags intf) ->
                         intf_to_js __tags_to_js x5449
                   let (get_onstatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) option) =
                     fun (x5453 : 'tags this) ->
                       Ojs.option_of_js
                         (fun (x5455 : Ojs.t) ->
                            fun ~this:(x5456 : t) ->
                              fun ~ev:(x5457 : Event.t) ->
                                any_of_js
                                  (Ojs.apply x5455
                                     [|(t_to_js x5456);(Event.t_to_js x5457)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5453)
                            "onstatechange")
                   let (set_onstatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) option -> unit)
                     =
                     fun (x5458 : 'tags this) ->
                       fun (x5459 : (this:t -> ev:Event.t -> any) option) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x5458)
                           "onstatechange"
                           (Ojs.option_to_js
                              (fun (x5460 : this:t -> ev:Event.t -> any) ->
                                 Ojs.fun_to_js 2
                                   (fun (x5461 : Ojs.t) ->
                                      fun (x5462 : Ojs.t) ->
                                        any_to_js
                                          (x5460 ~this:(t_of_js x5461)
                                             ~ev:(Event.t_of_js x5462))))
                              x5459)
                   let (get_scriptURL : 'tags this -> string) =
                     fun (x5464 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5464)
                            "scriptURL")
                   let (get_state : 'tags this -> ServiceWorkerState.t) =
                     fun (x5466 : 'tags this) ->
                       ServiceWorkerState.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5466)
                            "state")
                   let (postMessage :
                     'tags this ->
                       message:any -> transfer:Transferable.t list -> unit)
                     =
                     fun (x5471 : 'tags this) ->
                       fun ~message:(x5468 : any) ->
                         fun ~transfer:(x5469 : Transferable.t list) ->
                           ignore
                             (Ojs.call (this_to_js Obj.magic x5471)
                                "postMessage"
                                [|(any_to_js x5468);(Ojs.list_to_js
                                                       Transferable.t_to_js
                                                       x5469)|])
                   let (postMessage' :
                     'tags this ->
                       message:any ->
                         ?options:StructuredSerializeOptions.t ->
                           unit -> unit)
                     =
                     fun (x5477 : 'tags this) ->
                       fun ~message:(x5473 : any) ->
                         fun
                           ?options:(x5474 :
                                      StructuredSerializeOptions.t option)
                           ->
                           fun () ->
                             ignore
                               (let x5479 = this_to_js Obj.magic x5477 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x5479 "postMessage")
                                  "apply"
                                  [|x5479;((let x5475 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x5475 "push"
                                                 [|(any_to_js x5473)|]);
                                            (match x5474 with
                                             | Some x5476 ->
                                                 ignore
                                                   (Ojs.call x5475 "push"
                                                      [|(StructuredSerializeOptions.t_to_js
                                                           x5476)|])
                                             | None -> ());
                                            x5475))|])
                   let (addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5489 : 'tags this) ->
                       fun ~type_:(x5480 : 'K) ->
                         fun ~listener:(x5481 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5482 :
                                        [ `U1 of bool 
                                        | `U2 of AddEventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5491 = this_to_js Obj.magic x5489 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5491
                                       "addEventListener") "apply"
                                    [|x5491;((let x5483 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5483 "push"
                                                   [|(Obj.magic x5480)|]);
                                              ignore
                                                (Ojs.call x5483 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5487 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5488 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5481
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5487)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5488))))|]);
                                              (match x5482 with
                                               | Some x5484 ->
                                                   ignore
                                                     (Ojs.call x5483 "push"
                                                        [|((match x5484 with
                                                            | `U1 x5485 ->
                                                                Ojs.bool_to_js
                                                                  x5485
                                                            | `U2 x5486 ->
                                                                AddEventListenerOptions.t_to_js
                                                                  x5486))|])
                                               | None -> ());
                                              x5483))|])
                   let (addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5499 : 'tags this) ->
                       fun ~type_:(x5492 : string) ->
                         fun
                           ~listener:(x5493 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5494 :
                                        [ `U1 of bool 
                                        | `U2 of AddEventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5501 = this_to_js Obj.magic x5499 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5501
                                       "addEventListener") "apply"
                                    [|x5501;((let x5495 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5495 "push"
                                                   [|(Ojs.string_to_js x5492)|]);
                                              ignore
                                                (Ojs.call x5495 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5493)|]);
                                              (match x5494 with
                                               | Some x5496 ->
                                                   ignore
                                                     (Ojs.call x5495 "push"
                                                        [|((match x5496 with
                                                            | `U1 x5497 ->
                                                                Ojs.bool_to_js
                                                                  x5497
                                                            | `U2 x5498 ->
                                                                AddEventListenerOptions.t_to_js
                                                                  x5498))|])
                                               | None -> ());
                                              x5495))|])
                   let (removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5511 : 'tags this) ->
                       fun ~type_:(x5502 : 'K) ->
                         fun ~listener:(x5503 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5504 :
                                        [ `U1 of bool 
                                        | `U2 of EventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5513 = this_to_js Obj.magic x5511 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5513
                                       "removeEventListener") "apply"
                                    [|x5513;((let x5505 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5505 "push"
                                                   [|(Obj.magic x5502)|]);
                                              ignore
                                                (Ojs.call x5505 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5509 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5510 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5503
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5509)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5510))))|]);
                                              (match x5504 with
                                               | Some x5506 ->
                                                   ignore
                                                     (Ojs.call x5505 "push"
                                                        [|((match x5506 with
                                                            | `U1 x5507 ->
                                                                Ojs.bool_to_js
                                                                  x5507
                                                            | `U2 x5508 ->
                                                                EventListenerOptions.t_to_js
                                                                  x5508))|])
                                               | None -> ());
                                              x5505))|])
                   let (removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5521 : 'tags this) ->
                       fun ~type_:(x5514 : string) ->
                         fun
                           ~listener:(x5515 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5516 :
                                        [ `U1 of bool 
                                        | `U2 of EventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5523 = this_to_js Obj.magic x5521 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5523
                                       "removeEventListener") "apply"
                                    [|x5523;((let x5517 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5517 "push"
                                                   [|(Ojs.string_to_js x5514)|]);
                                              ignore
                                                (Ojs.call x5517 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5515)|]);
                                              (match x5516 with
                                               | Some x5518 ->
                                                   ignore
                                                     (Ojs.call x5517 "push"
                                                        [|((match x5518 with
                                                            | `U1 x5519 ->
                                                                Ojs.bool_to_js
                                                                  x5519
                                                            | `U2 x5520 ->
                                                                EventListenerOptions.t_to_js
                                                                  x5520))|])
                                               | None -> ());
                                              x5517))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            [||])
                 end and
                      Transferable:sig
                                     type t =
                                       (ArrayBuffer.t_0, ImageBitmap.t,
                                         MessagePort.t) union3
                                     type t_0 = t
                                     val t_to_js : t -> Ojs.t
                                     val t_of_js : Ojs.t -> t
                                     val t_0_to_js : t_0 -> Ojs.t
                                     val t_0_of_js : Ojs.t -> t_0
                                   end =
                      struct
                        type t =
                          (ArrayBuffer.t_0, ImageBitmap.t, MessagePort.t)
                            union3
                        let rec t_of_js : Ojs.t -> t =
                          fun (x5528 : Ojs.t) ->
                            union3_of_js ArrayBuffer.t_0_of_js
                              ImageBitmap.t_of_js MessagePort.t_of_js x5528
                        and t_to_js : t -> Ojs.t =
                          fun
                            (x5524 :
                              (ArrayBuffer.t_0, ImageBitmap.t, MessagePort.t)
                                union3)
                            ->
                            union3_to_js ArrayBuffer.t_0_to_js
                              ImageBitmap.t_to_js MessagePort.t_to_js x5524
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x5533 : Ojs.t) -> t_of_js x5533
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x5532 : t) -> t_to_js x5532
                      end
module AbstractWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5535 : Ojs.t) -> t_of_js x5535
    and t_0_to_js : t_0 -> Ojs.t = fun (x5534 : t) -> t_to_js x5534
    type tags = [ `AbstractWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AbstractWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5538 : Ojs.t) -> intf_of_js __tags_of_js x5538
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5536 : __tags intf) -> intf_to_js __tags_to_js x5536
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x5540 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5540) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x5542 : 'tags this) ->
        fun (x5543 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5542) "error"
            (ErrorEvent.t_to_js x5543)
    let (create : error:ErrorEvent.t -> unit -> t) =
      fun ~error:(x5545 : ErrorEvent.t) ->
        fun () ->
          let x5546 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5546 "error" (ErrorEvent.t_to_js x5545);
          t_of_js x5546
    let cast_from = Obj.magic
  end
module WorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `WorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5548 : Ojs.t) -> t_of_js x5548
    and t_0_to_js : t_0 -> Ojs.t = fun (x5547 : t) -> t_to_js x5547
    type tags = [ `AbstractWorkerEventMap  | `WorkerEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5551 : Ojs.t) -> intf_of_js __tags_of_js x5551
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5549 : __tags intf) -> intf_to_js __tags_to_js x5549
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5553 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5553) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5555 : 'tags this) ->
        fun (x5556 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5555) "message"
            (MessageEvent.t_0_to_js x5556)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x5558 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5558) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5560 : 'tags this) ->
        fun (x5561 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5560) "messageerror"
            (MessageEvent.t_0_to_js x5561)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x5563 : MessageEvent.t_0) ->
        fun ~messageerror:(x5564 : MessageEvent.t_0) ->
          fun () ->
            let x5565 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x5565 "message" (MessageEvent.t_0_to_js x5563);
            Ojs.set_prop_ascii x5565 "messageerror"
              (MessageEvent.t_0_to_js x5564);
            t_of_js x5565
    let cast_from = Obj.magic
  end
module WorkerType =
  struct
    type t = [ `L_s117_module  | `L_s49_classic ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5567 : Ojs.t) ->
        let x5568 = x5567 in
        match Ojs.string_of_js x5568 with
        | "module" -> `L_s117_module
        | "classic" -> `L_s49_classic
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5566 : [ `L_s117_module  | `L_s49_classic ]) ->
        match x5566 with
        | `L_s117_module -> Ojs.string_to_js "module"
        | `L_s49_classic -> Ojs.string_to_js "classic"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5570 : Ojs.t) -> t_of_js x5570
    and t_0_to_js : t_0 -> Ojs.t = fun (x5569 : t) -> t_to_js x5569
  end
module WorkerOptions =
  struct
    type t = [ `WorkerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5572 : Ojs.t) -> t_of_js x5572
    and t_0_to_js : t_0 -> Ojs.t = fun (x5571 : t) -> t_to_js x5571
    type tags = [ `WorkerOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5575 : Ojs.t) -> intf_of_js __tags_of_js x5575
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5573 : __tags intf) -> intf_to_js __tags_to_js x5573
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x5577 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5577) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x5579 : 'tags this) ->
        fun (x5580 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5579) "credentials"
            (RequestCredentials.t_to_js x5580)
    let (get_name : 'tags this -> string) =
      fun (x5582 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5582) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x5584 : 'tags this) ->
        fun (x5585 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5584) "name"
            (Ojs.string_to_js x5585)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x5587 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5587) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x5589 : 'tags this) ->
        fun (x5590 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5589) "type"
            (WorkerType.t_to_js x5590)
    let (create :
      credentials:RequestCredentials.t ->
        name:string -> type_:WorkerType.t -> unit -> t)
      =
      fun ~credentials:(x5592 : RequestCredentials.t) ->
        fun ~name:(x5593 : string) ->
          fun ~type_:(x5594 : WorkerType.t) ->
            fun () ->
              let x5595 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5595 "credentials"
                (RequestCredentials.t_to_js x5592);
              Ojs.set_prop_ascii x5595 "name" (Ojs.string_to_js x5593);
              Ojs.set_prop_ascii x5595 "type" (WorkerType.t_to_js x5594);
              t_of_js x5595
    let cast_from = Obj.magic
  end
module Worker =
  struct
    type t = [ `AbstractWorker  | `EventTarget  | `Worker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5597 : Ojs.t) -> t_of_js x5597
    and t_0_to_js : t_0 -> Ojs.t = fun (x5596 : t) -> t_to_js x5596
    type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5600 : Ojs.t) -> intf_of_js __tags_of_js x5600
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5598 : __tags intf) -> intf_to_js __tags_to_js x5598
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x5602 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5604 : Ojs.t) ->
             fun ~this:(x5605 : t) ->
               fun ~ev:(x5606 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5604
                      [|(t_to_js x5605);(MessageEvent.t_0_to_js x5606)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5602) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x5607 : 'tags this) ->
        fun (x5608 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5607) "onmessage"
            (Ojs.option_to_js
               (fun (x5609 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5610 : Ojs.t) ->
                       fun (x5611 : Ojs.t) ->
                         any_to_js
                           (x5609 ~this:(t_of_js x5610)
                              ~ev:(MessageEvent.t_0_of_js x5611)))) x5608)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x5613 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5615 : Ojs.t) ->
             fun ~this:(x5616 : t) ->
               fun ~ev:(x5617 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5615
                      [|(t_to_js x5616);(MessageEvent.t_0_to_js x5617)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5613) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x5618 : 'tags this) ->
        fun (x5619 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5618) "onmessageerror"
            (Ojs.option_to_js
               (fun (x5620 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5621 : Ojs.t) ->
                       fun (x5622 : Ojs.t) ->
                         any_to_js
                           (x5620 ~this:(t_of_js x5621)
                              ~ev:(MessageEvent.t_0_of_js x5622)))) x5619)
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x5627 : 'tags this) ->
        fun ~message:(x5624 : any) ->
          fun ~transfer:(x5625 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5627) "postMessage"
                 [|(any_to_js x5624);(Ojs.list_to_js Transferable.t_to_js
                                        x5625)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x5633 : 'tags this) ->
        fun ~message:(x5629 : any) ->
          fun ?options:(x5630 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x5635 = this_to_js Obj.magic x5633 in
                 Ojs.call (Ojs.get_prop_ascii x5635 "postMessage") "apply"
                   [|x5635;((let x5631 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5631 "push" [|(any_to_js x5629)|]);
                             (match x5630 with
                              | Some x5632 ->
                                  ignore
                                    (Ojs.call x5631 "push"
                                       [|(StructuredSerializeOptions.t_to_js
                                            x5632)|])
                              | None -> ());
                             x5631))|])
    let (terminate : 'tags this -> unit) =
      fun (x5636 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5636) "terminate" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5647 : 'tags this) ->
        fun ~type_:(x5638 : 'K) ->
          fun ~listener:(x5639 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5640 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5649 = this_to_js Obj.magic x5647 in
                   Ojs.call (Ojs.get_prop_ascii x5649 "addEventListener")
                     "apply"
                     [|x5649;((let x5641 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5641 "push" [|(Obj.magic x5638)|]);
                               ignore
                                 (Ojs.call x5641 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5645 : Ojs.t) ->
                                            fun (x5646 : Ojs.t) ->
                                              any_to_js
                                                (x5639 ~this:(t_of_js x5645)
                                                   ~ev:(any_of_js x5646))))|]);
                               (match x5640 with
                                | Some x5642 ->
                                    ignore
                                      (Ojs.call x5641 "push"
                                         [|((match x5642 with
                                             | `U1 x5643 ->
                                                 Ojs.bool_to_js x5643
                                             | `U2 x5644 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5644))|])
                                | None -> ());
                               x5641))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5657 : 'tags this) ->
        fun ~type_:(x5650 : string) ->
          fun ~listener:(x5651 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5652 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5659 = this_to_js Obj.magic x5657 in
                   Ojs.call (Ojs.get_prop_ascii x5659 "addEventListener")
                     "apply"
                     [|x5659;((let x5653 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5653 "push"
                                    [|(Ojs.string_to_js x5650)|]);
                               ignore
                                 (Ojs.call x5653 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5651)|]);
                               (match x5652 with
                                | Some x5654 ->
                                    ignore
                                      (Ojs.call x5653 "push"
                                         [|((match x5654 with
                                             | `U1 x5655 ->
                                                 Ojs.bool_to_js x5655
                                             | `U2 x5656 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5656))|])
                                | None -> ());
                               x5653))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5669 : 'tags this) ->
        fun ~type_:(x5660 : 'K) ->
          fun ~listener:(x5661 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5662 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5671 = this_to_js Obj.magic x5669 in
                   Ojs.call (Ojs.get_prop_ascii x5671 "removeEventListener")
                     "apply"
                     [|x5671;((let x5663 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5663 "push" [|(Obj.magic x5660)|]);
                               ignore
                                 (Ojs.call x5663 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5667 : Ojs.t) ->
                                            fun (x5668 : Ojs.t) ->
                                              any_to_js
                                                (x5661 ~this:(t_of_js x5667)
                                                   ~ev:(any_of_js x5668))))|]);
                               (match x5662 with
                                | Some x5664 ->
                                    ignore
                                      (Ojs.call x5663 "push"
                                         [|((match x5664 with
                                             | `U1 x5665 ->
                                                 Ojs.bool_to_js x5665
                                             | `U2 x5666 ->
                                                 EventListenerOptions.t_to_js
                                                   x5666))|])
                                | None -> ());
                               x5663))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5679 : 'tags this) ->
        fun ~type_:(x5672 : string) ->
          fun ~listener:(x5673 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5674 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5681 = this_to_js Obj.magic x5679 in
                   Ojs.call (Ojs.get_prop_ascii x5681 "removeEventListener")
                     "apply"
                     [|x5681;((let x5675 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5675 "push"
                                    [|(Ojs.string_to_js x5672)|]);
                               ignore
                                 (Ojs.call x5675 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5673)|]);
                               (match x5674 with
                                | Some x5676 ->
                                    ignore
                                      (Ojs.call x5675 "push"
                                         [|((match x5676 with
                                             | `U1 x5677 ->
                                                 Ojs.bool_to_js x5677
                                             | `U2 x5678 ->
                                                 EventListenerOptions.t_to_js
                                                   x5678))|])
                                | None -> ());
                               x5675))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Worker")
             "prototype")
    let (create :
      scriptURL:[ `U1 of string  | `U2 of URL.t ] ->
        ?options:WorkerOptions.t -> unit -> t)
      =
      fun ~scriptURL:(x5682 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?options:(x5683 : WorkerOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Worker")
                 (let x5684 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x5684 "push"
                       [|((match x5682 with
                           | `U1 x5686 -> Ojs.string_to_js x5686
                           | `U2 x5687 -> URL.t_to_js x5687))|]);
                  (match x5683 with
                   | Some x5685 ->
                       ignore
                         (Ojs.call x5684 "push"
                            [|(WorkerOptions.t_to_js x5685)|])
                   | None -> ());
                  x5684))
  end
module CloseEventInit =
  struct
    type t = [ `CloseEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5689 : Ojs.t) -> t_of_js x5689
    and t_0_to_js : t_0 -> Ojs.t = fun (x5688 : t) -> t_to_js x5688
    type tags = [ `CloseEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5692 : Ojs.t) -> intf_of_js __tags_of_js x5692
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5690 : __tags intf) -> intf_to_js __tags_to_js x5690
    let (get_code : 'tags this -> float) =
      fun (x5694 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5694) "code")
    let (set_code : 'tags this -> float -> unit) =
      fun (x5696 : 'tags this) ->
        fun (x5697 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5696) "code"
            (Ojs.float_to_js x5697)
    let (get_reason : 'tags this -> string) =
      fun (x5699 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5699) "reason")
    let (set_reason : 'tags this -> string -> unit) =
      fun (x5701 : 'tags this) ->
        fun (x5702 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5701) "reason"
            (Ojs.string_to_js x5702)
    let (get_wasClean : 'tags this -> bool) =
      fun (x5704 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5704) "wasClean")
    let (set_wasClean : 'tags this -> bool -> unit) =
      fun (x5706 : 'tags this) ->
        fun (x5707 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5706) "wasClean"
            (Ojs.bool_to_js x5707)
    let (create : code:float -> reason:string -> wasClean:bool -> unit -> t)
      =
      fun ~code:(x5709 : float) ->
        fun ~reason:(x5710 : string) ->
          fun ~wasClean:(x5711 : bool) ->
            fun () ->
              let x5712 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5712 "code" (Ojs.float_to_js x5709);
              Ojs.set_prop_ascii x5712 "reason" (Ojs.string_to_js x5710);
              Ojs.set_prop_ascii x5712 "wasClean" (Ojs.bool_to_js x5711);
              t_of_js x5712
    let cast_from = Obj.magic
  end
module CloseEvent =
  struct
    type t = [ `CloseEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5714 : Ojs.t) -> t_of_js x5714
    and t_0_to_js : t_0 -> Ojs.t = fun (x5713 : t) -> t_to_js x5713
    type tags = [ `CloseEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5717 : Ojs.t) -> intf_of_js __tags_of_js x5717
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5715 : __tags intf) -> intf_to_js __tags_to_js x5715
    let (get_code : 'tags this -> float) =
      fun (x5719 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5719) "code")
    let (get_reason : 'tags this -> string) =
      fun (x5721 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5721) "reason")
    let (get_wasClean : 'tags this -> bool) =
      fun (x5723 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5723) "wasClean")
    let (create : code:float -> reason:string -> wasClean:bool -> unit -> t)
      =
      fun ~code:(x5725 : float) ->
        fun ~reason:(x5726 : string) ->
          fun ~wasClean:(x5727 : bool) ->
            fun () ->
              let x5728 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5728 "code" (Ojs.float_to_js x5725);
              Ojs.set_prop_ascii x5728 "reason" (Ojs.string_to_js x5726);
              Ojs.set_prop_ascii x5728 "wasClean" (Ojs.bool_to_js x5727);
              t_of_js x5728
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CloseEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t) =
      fun ~type_:(x5729 : string) ->
        fun ?eventInitDict:(x5730 : CloseEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CloseEvent")
                 (let x5731 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5731 "push" [|(Ojs.string_to_js x5729)|]);
                  (match x5730 with
                   | Some x5732 ->
                       ignore
                         (Ojs.call x5731 "push"
                            [|(CloseEventInit.t_to_js x5732)|])
                   | None -> ());
                  x5731))
  end
module WebSocketEventMap =
  struct
    type t = [ `WebSocketEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5734 : Ojs.t) -> t_of_js x5734
    and t_0_to_js : t_0 -> Ojs.t = fun (x5733 : t) -> t_to_js x5733
    type tags = [ `WebSocketEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocketEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5737 : Ojs.t) -> intf_of_js __tags_of_js x5737
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5735 : __tags intf) -> intf_to_js __tags_to_js x5735
    let (get_close : 'tags this -> CloseEvent.t) =
      fun (x5739 : 'tags this) ->
        CloseEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5739) "close")
    let (set_close : 'tags this -> CloseEvent.t -> unit) =
      fun (x5741 : 'tags this) ->
        fun (x5742 : CloseEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5741) "close"
            (CloseEvent.t_to_js x5742)
    let (get_error : 'tags this -> Event.t) =
      fun (x5744 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5744) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x5746 : 'tags this) ->
        fun (x5747 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5746) "error"
            (Event.t_to_js x5747)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5749 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5749) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5751 : 'tags this) ->
        fun (x5752 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5751) "message"
            (MessageEvent.t_0_to_js x5752)
    let (get_open : 'tags this -> Event.t) =
      fun (x5754 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5754) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x5756 : 'tags this) ->
        fun (x5757 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5756) "open"
            (Event.t_to_js x5757)
    let (create :
      close:CloseEvent.t ->
        error:Event.t ->
          message:MessageEvent.t_0 -> open_:Event.t -> unit -> t)
      =
      fun ~close:(x5759 : CloseEvent.t) ->
        fun ~error:(x5760 : Event.t) ->
          fun ~message:(x5761 : MessageEvent.t_0) ->
            fun ~open_:(x5762 : Event.t) ->
              fun () ->
                let x5763 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x5763 "close" (CloseEvent.t_to_js x5759);
                Ojs.set_prop_ascii x5763 "error" (Event.t_to_js x5760);
                Ojs.set_prop_ascii x5763 "message"
                  (MessageEvent.t_0_to_js x5761);
                Ojs.set_prop_ascii x5763 "open" (Event.t_to_js x5762);
                t_of_js x5763
    let cast_from = Obj.magic
  end
module BinaryType =
  struct
    type t = [ `L_s37_arraybuffer  | `L_s44_blob ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5765 : Ojs.t) ->
        let x5766 = x5765 in
        match Ojs.string_of_js x5766 with
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5764 : [ `L_s37_arraybuffer  | `L_s44_blob ]) ->
        match x5764 with
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5768 : Ojs.t) -> t_of_js x5768
    and t_0_to_js : t_0 -> Ojs.t = fun (x5767 : t) -> t_to_js x5767
  end
module WebSocket =
  struct
    type t = [ `EventTarget  | `WebSocket ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5770 : Ojs.t) -> t_of_js x5770
    and t_0_to_js : t_0 -> Ojs.t = fun (x5769 : t) -> t_to_js x5769
    type tags = [ `EventTarget  | `WebSocket ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5773 : Ojs.t) -> intf_of_js __tags_of_js x5773
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5771 : __tags intf) -> intf_to_js __tags_to_js x5771
    let (get_binaryType : 'tags this -> BinaryType.t) =
      fun (x5775 : 'tags this) ->
        BinaryType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5775) "binaryType")
    let (set_binaryType : 'tags this -> BinaryType.t -> unit) =
      fun (x5777 : 'tags this) ->
        fun (x5778 : BinaryType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5777) "binaryType"
            (BinaryType.t_to_js x5778)
    let (get_bufferedAmount : 'tags this -> float) =
      fun (x5780 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5780) "bufferedAmount")
    let (get_extensions : 'tags this -> string) =
      fun (x5782 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5782) "extensions")
    let (get_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) option) =
      fun (x5784 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5786 : Ojs.t) ->
             fun ~this:(x5787 : t) ->
               fun ~ev:(x5788 : CloseEvent.t) ->
                 any_of_js
                   (Ojs.apply x5786
                      [|(t_to_js x5787);(CloseEvent.t_to_js x5788)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5784) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) option -> unit) =
      fun (x5789 : 'tags this) ->
        fun (x5790 : (this:t -> ev:CloseEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5789) "onclose"
            (Ojs.option_to_js
               (fun (x5791 : this:t -> ev:CloseEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5792 : Ojs.t) ->
                       fun (x5793 : Ojs.t) ->
                         any_to_js
                           (x5791 ~this:(t_of_js x5792)
                              ~ev:(CloseEvent.t_of_js x5793)))) x5790)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x5795 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5797 : Ojs.t) ->
             fun ~this:(x5798 : t) ->
               fun ~ev:(x5799 : Event.t) ->
                 any_of_js
                   (Ojs.apply x5797 [|(t_to_js x5798);(Event.t_to_js x5799)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5795) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x5800 : 'tags this) ->
        fun (x5801 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5800) "onerror"
            (Ojs.option_to_js
               (fun (x5802 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5803 : Ojs.t) ->
                       fun (x5804 : Ojs.t) ->
                         any_to_js
                           (x5802 ~this:(t_of_js x5803)
                              ~ev:(Event.t_of_js x5804)))) x5801)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x5806 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5808 : Ojs.t) ->
             fun ~this:(x5809 : t) ->
               fun ~ev:(x5810 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5808
                      [|(t_to_js x5809);(MessageEvent.t_0_to_js x5810)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5806) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x5811 : 'tags this) ->
        fun (x5812 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5811) "onmessage"
            (Ojs.option_to_js
               (fun (x5813 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5814 : Ojs.t) ->
                       fun (x5815 : Ojs.t) ->
                         any_to_js
                           (x5813 ~this:(t_of_js x5814)
                              ~ev:(MessageEvent.t_0_of_js x5815)))) x5812)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x5817 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5819 : Ojs.t) ->
             fun ~this:(x5820 : t) ->
               fun ~ev:(x5821 : Event.t) ->
                 any_of_js
                   (Ojs.apply x5819 [|(t_to_js x5820);(Event.t_to_js x5821)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5817) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x5822 : 'tags this) ->
        fun (x5823 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5822) "onopen"
            (Ojs.option_to_js
               (fun (x5824 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5825 : Ojs.t) ->
                       fun (x5826 : Ojs.t) ->
                         any_to_js
                           (x5824 ~this:(t_of_js x5825)
                              ~ev:(Event.t_of_js x5826)))) x5823)
    let (get_protocol : 'tags this -> string) =
      fun (x5828 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5828) "protocol")
    let (get_readyState : 'tags this -> float) =
      fun (x5830 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5830) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x5832 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5832) "url")
    let (close : 'tags this -> ?code:float -> ?reason:string -> unit -> unit)
      =
      fun (x5839 : 'tags this) ->
        fun ?code:(x5834 : float option) ->
          fun ?reason:(x5835 : string option) ->
            fun () ->
              ignore
                (let x5841 = this_to_js Obj.magic x5839 in
                 Ojs.call (Ojs.get_prop_ascii x5841 "close") "apply"
                   [|x5841;((let x5836 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x5834 with
                              | Some x5838 ->
                                  ignore
                                    (Ojs.call x5836 "push"
                                       [|(Ojs.float_to_js x5838)|])
                              | None -> ());
                             (match x5835 with
                              | Some x5837 ->
                                  ignore
                                    (Ojs.call x5836 "push"
                                       [|(Ojs.string_to_js x5837)|])
                              | None -> ());
                             x5836))|])
    let (send :
      'tags this ->
        data:[ `U1 of string  | `U2 of ArrayBufferLike.t_0  | `U3 of Blob.t 
             | `U4 of ArrayBufferView.t_0 ]
          -> unit)
      =
      fun (x5847 : 'tags this) ->
        fun
          ~data:(x5842 :
                  [ `U1 of string  | `U2 of ArrayBufferLike.t_0 
                  | `U3 of Blob.t  | `U4 of ArrayBufferView.t_0 ])
          ->
          ignore
            (Ojs.call (this_to_js Obj.magic x5847) "send"
               [|((match x5842 with
                   | `U1 x5843 -> Ojs.string_to_js x5843
                   | `U2 x5844 -> ArrayBufferLike.t_0_to_js x5844
                   | `U3 x5845 -> Blob.t_to_js x5845
                   | `U4 x5846 -> ArrayBufferView.t_0_to_js x5846))|])
    let (get_CLOSED : 'tags this -> float) =
      fun (x5849 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5849) "CLOSED")
    let (get_CLOSING : 'tags this -> float) =
      fun (x5851 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5851) "CLOSING")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x5853 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5853) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x5855 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5855) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5866 : 'tags this) ->
        fun ~type_:(x5857 : 'K) ->
          fun ~listener:(x5858 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5859 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5868 = this_to_js Obj.magic x5866 in
                   Ojs.call (Ojs.get_prop_ascii x5868 "addEventListener")
                     "apply"
                     [|x5868;((let x5860 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5860 "push" [|(Obj.magic x5857)|]);
                               ignore
                                 (Ojs.call x5860 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5864 : Ojs.t) ->
                                            fun (x5865 : Ojs.t) ->
                                              any_to_js
                                                (x5858 ~this:(t_of_js x5864)
                                                   ~ev:(any_of_js x5865))))|]);
                               (match x5859 with
                                | Some x5861 ->
                                    ignore
                                      (Ojs.call x5860 "push"
                                         [|((match x5861 with
                                             | `U1 x5862 ->
                                                 Ojs.bool_to_js x5862
                                             | `U2 x5863 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5863))|])
                                | None -> ());
                               x5860))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5876 : 'tags this) ->
        fun ~type_:(x5869 : string) ->
          fun ~listener:(x5870 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5871 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5878 = this_to_js Obj.magic x5876 in
                   Ojs.call (Ojs.get_prop_ascii x5878 "addEventListener")
                     "apply"
                     [|x5878;((let x5872 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5872 "push"
                                    [|(Ojs.string_to_js x5869)|]);
                               ignore
                                 (Ojs.call x5872 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5870)|]);
                               (match x5871 with
                                | Some x5873 ->
                                    ignore
                                      (Ojs.call x5872 "push"
                                         [|((match x5873 with
                                             | `U1 x5874 ->
                                                 Ojs.bool_to_js x5874
                                             | `U2 x5875 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5875))|])
                                | None -> ());
                               x5872))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5888 : 'tags this) ->
        fun ~type_:(x5879 : 'K) ->
          fun ~listener:(x5880 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5881 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5890 = this_to_js Obj.magic x5888 in
                   Ojs.call (Ojs.get_prop_ascii x5890 "removeEventListener")
                     "apply"
                     [|x5890;((let x5882 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5882 "push" [|(Obj.magic x5879)|]);
                               ignore
                                 (Ojs.call x5882 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5886 : Ojs.t) ->
                                            fun (x5887 : Ojs.t) ->
                                              any_to_js
                                                (x5880 ~this:(t_of_js x5886)
                                                   ~ev:(any_of_js x5887))))|]);
                               (match x5881 with
                                | Some x5883 ->
                                    ignore
                                      (Ojs.call x5882 "push"
                                         [|((match x5883 with
                                             | `U1 x5884 ->
                                                 Ojs.bool_to_js x5884
                                             | `U2 x5885 ->
                                                 EventListenerOptions.t_to_js
                                                   x5885))|])
                                | None -> ());
                               x5882))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5898 : 'tags this) ->
        fun ~type_:(x5891 : string) ->
          fun ~listener:(x5892 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5893 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5900 = this_to_js Obj.magic x5898 in
                   Ojs.call (Ojs.get_prop_ascii x5900 "removeEventListener")
                     "apply"
                     [|x5900;((let x5894 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5894 "push"
                                    [|(Ojs.string_to_js x5891)|]);
                               ignore
                                 (Ojs.call x5894 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5892)|]);
                               (match x5893 with
                                | Some x5895 ->
                                    ignore
                                      (Ojs.call x5894 "push"
                                         [|((match x5895 with
                                             | `U1 x5896 ->
                                                 Ojs.bool_to_js x5896
                                             | `U2 x5897 ->
                                                 EventListenerOptions.t_to_js
                                                   x5897))|])
                                | None -> ());
                               x5894))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of URL.t ] ->
        ?protocols:[ `U1 of string  | `U2 of string list ] -> unit -> t)
      =
      fun ~url:(x5901 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun
          ?protocols:(x5902 : [ `U1 of string  | `U2 of string list ] option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WebSocket")
                 (let x5903 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x5903 "push"
                       [|((match x5901 with
                           | `U1 x5908 -> Ojs.string_to_js x5908
                           | `U2 x5909 -> URL.t_to_js x5909))|]);
                  (match x5902 with
                   | Some x5904 ->
                       ignore
                         (Ojs.call x5903 "push"
                            [|((match x5904 with
                                | `U1 x5905 -> Ojs.string_to_js x5905
                                | `U2 x5906 ->
                                    Ojs.list_to_js Ojs.string_to_js x5906))|])
                   | None -> ());
                  x5903))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSED")
    let (closing : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSING")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "OPEN")
  end
module WebGLUniformLocation =
  struct
    type t = [ `WebGLUniformLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5911 : Ojs.t) -> t_of_js x5911
    and t_0_to_js : t_0 -> Ojs.t = fun (x5910 : t) -> t_to_js x5910
    type tags = [ `WebGLUniformLocation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLUniformLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5914 : Ojs.t) -> intf_of_js __tags_of_js x5914
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5912 : __tags intf) -> intf_to_js __tags_to_js x5912
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             [||])
  end
module PredefinedColorSpace =
  struct
    type t = [ `L_s183_srgb  | `L_s61_display_p3 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5917 : Ojs.t) ->
        let x5918 = x5917 in
        match Ojs.string_of_js x5918 with
        | "srgb" -> `L_s183_srgb
        | "display-p3" -> `L_s61_display_p3
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5916 : [ `L_s183_srgb  | `L_s61_display_p3 ]) ->
        match x5916 with
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
        | `L_s61_display_p3 -> Ojs.string_to_js "display-p3"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5920 : Ojs.t) -> t_of_js x5920
    and t_0_to_js : t_0 -> Ojs.t = fun (x5919 : t) -> t_to_js x5919
  end
module ImageDataSettings =
  struct
    type t = [ `ImageDataSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5922 : Ojs.t) -> t_of_js x5922
    and t_0_to_js : t_0 -> Ojs.t = fun (x5921 : t) -> t_to_js x5921
    type tags = [ `ImageDataSettings ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageDataSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5925 : Ojs.t) -> intf_of_js __tags_of_js x5925
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5923 : __tags intf) -> intf_to_js __tags_to_js x5923
    let (get_colorSpace : 'tags this -> PredefinedColorSpace.t) =
      fun (x5927 : 'tags this) ->
        PredefinedColorSpace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5927) "colorSpace")
    let (set_colorSpace : 'tags this -> PredefinedColorSpace.t -> unit) =
      fun (x5929 : 'tags this) ->
        fun (x5930 : PredefinedColorSpace.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5929) "colorSpace"
            (PredefinedColorSpace.t_to_js x5930)
    let (create : colorSpace:PredefinedColorSpace.t -> unit -> t) =
      fun ~colorSpace:(x5932 : PredefinedColorSpace.t) ->
        fun () ->
          let x5933 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5933 "colorSpace"
            (PredefinedColorSpace.t_to_js x5932);
          t_of_js x5933
    let cast_from = Obj.magic
  end
module ImageData =
  struct
    type t = [ `ImageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5935 : Ojs.t) -> t_of_js x5935
    and t_0_to_js : t_0 -> Ojs.t = fun (x5934 : t) -> t_to_js x5934
    type tags = [ `ImageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5938 : Ojs.t) -> intf_of_js __tags_of_js x5938
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5936 : __tags intf) -> intf_to_js __tags_to_js x5936
    let (get_data : 'tags this -> Uint8ClampedArray.t_0) =
      fun (x5940 : 'tags this) ->
        Uint8ClampedArray.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5940) "data")
    let (get_height : 'tags this -> float) =
      fun (x5942 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5942) "height")
    let (get_width : 'tags this -> float) =
      fun (x5944 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5944) "width")
    let (create :
      data:Uint8ClampedArray.t_0 -> height:float -> width:float -> unit -> t)
      =
      fun ~data:(x5946 : Uint8ClampedArray.t_0) ->
        fun ~height:(x5947 : float) ->
          fun ~width:(x5948 : float) ->
            fun () ->
              let x5949 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5949 "data"
                (Uint8ClampedArray.t_0_to_js x5946);
              Ojs.set_prop_ascii x5949 "height" (Ojs.float_to_js x5947);
              Ojs.set_prop_ascii x5949 "width" (Ojs.float_to_js x5948);
              t_of_js x5949
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageData")
             "prototype")
    let (create' :
      sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> t) =
      fun ~sw:(x5950 : float) ->
        fun ~sh:(x5951 : float) ->
          fun ?settings:(x5952 : ImageDataSettings.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ImageData")
                   (let x5953 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5953 "push" [|(Ojs.float_to_js x5950)|]);
                    ignore
                      (Ojs.call x5953 "push" [|(Ojs.float_to_js x5951)|]);
                    (match x5952 with
                     | Some x5954 ->
                         ignore
                           (Ojs.call x5953 "push"
                              [|(ImageDataSettings.t_to_js x5954)|])
                     | None -> ());
                    x5953))
    let (create'' :
      data:Uint8ClampedArray.t_0 ->
        sw:float -> ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t)
      =
      fun ~data:(x5955 : Uint8ClampedArray.t_0) ->
        fun ~sw:(x5956 : float) ->
          fun ?sh:(x5957 : float option) ->
            fun ?settings:(x5958 : ImageDataSettings.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "ImageData")
                     (let x5959 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x5959 "push"
                           [|(Uint8ClampedArray.t_0_to_js x5955)|]);
                      ignore
                        (Ojs.call x5959 "push" [|(Ojs.float_to_js x5956)|]);
                      (match x5957 with
                       | Some x5961 ->
                           ignore
                             (Ojs.call x5959 "push"
                                [|(Ojs.float_to_js x5961)|])
                       | None -> ());
                      (match x5958 with
                       | Some x5960 ->
                           ignore
                             (Ojs.call x5959 "push"
                                [|(ImageDataSettings.t_to_js x5960)|])
                       | None -> ());
                      x5959))
  end
module OffscreenCanvas =
  struct
    type t = [ `EventTarget  | `OffscreenCanvas ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5963 : Ojs.t) -> t_of_js x5963
    and t_0_to_js : t_0 -> Ojs.t = fun (x5962 : t) -> t_to_js x5962
    type tags = [ `EventTarget  | `OffscreenCanvas ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvas ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5966 : Ojs.t) -> intf_of_js __tags_of_js x5966
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5964 : __tags intf) -> intf_to_js __tags_to_js x5964
    let cast_from = Obj.magic
  end
module TexImageSource =
  struct
    type t = (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x5972 : Ojs.t) ->
        union3_of_js ImageBitmap.t_of_js ImageData.t_of_js
          OffscreenCanvas.t_of_js x5972
    and t_to_js : t -> Ojs.t =
      fun (x5968 : (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3) ->
        union3_to_js ImageBitmap.t_to_js ImageData.t_to_js
          OffscreenCanvas.t_to_js x5968
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5977 : Ojs.t) -> t_of_js x5977
    and t_0_to_js : t_0 -> Ojs.t = fun (x5976 : t) -> t_to_js x5976
  end
module GLint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5979 : Ojs.t) -> Ojs.float_of_js x5979
    and t_to_js : t -> Ojs.t = fun (x5978 : float) -> Ojs.float_to_js x5978
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5981 : Ojs.t) -> t_of_js x5981
    and t_0_to_js : t_0 -> Ojs.t = fun (x5980 : t) -> t_to_js x5980
  end
module Int32List =
  struct
    type t = (GLint.t list, Int32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x5986 : Ojs.t) ->
        union2_of_js
          (fun (x5987 : Ojs.t) -> Ojs.list_of_js GLint.t_of_js x5987)
          Int32Array.t_0_of_js x5986
    and t_to_js : t -> Ojs.t =
      fun (x5982 : (GLint.t list, Int32Array.t_0) union2) ->
        union2_to_js
          (fun (x5983 : GLint.t list) -> Ojs.list_to_js GLint.t_to_js x5983)
          Int32Array.t_0_to_js x5982
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5991 : Ojs.t) -> t_of_js x5991
    and t_0_to_js : t_0 -> Ojs.t = fun (x5990 : t) -> t_to_js x5990
  end
module GLsizeiptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5993 : Ojs.t) -> Ojs.float_of_js x5993
    and t_to_js : t -> Ojs.t = fun (x5992 : float) -> Ojs.float_to_js x5992
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5995 : Ojs.t) -> t_of_js x5995
    and t_0_to_js : t_0 -> Ojs.t = fun (x5994 : t) -> t_to_js x5994
  end
module GLboolean =
  struct
    type t = bool
    let rec t_of_js : Ojs.t -> t =
      fun (x5997 : Ojs.t) -> Ojs.bool_of_js x5997
    and t_to_js : t -> Ojs.t = fun (x5996 : bool) -> Ojs.bool_to_js x5996
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5999 : Ojs.t) -> t_of_js x5999
    and t_0_to_js : t_0 -> Ojs.t = fun (x5998 : t) -> t_to_js x5998
  end
module GLfloat =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6001 : Ojs.t) -> Ojs.float_of_js x6001
    and t_to_js : t -> Ojs.t = fun (x6000 : float) -> Ojs.float_to_js x6000
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6003 : Ojs.t) -> t_of_js x6003
    and t_0_to_js : t_0 -> Ojs.t = fun (x6002 : t) -> t_to_js x6002
  end
module Float32List =
  struct
    type t = (GLfloat.t list, Float32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x6008 : Ojs.t) ->
        union2_of_js
          (fun (x6009 : Ojs.t) -> Ojs.list_of_js GLfloat.t_of_js x6009)
          Float32Array.t_0_of_js x6008
    and t_to_js : t -> Ojs.t =
      fun (x6004 : (GLfloat.t list, Float32Array.t_0) union2) ->
        union2_to_js
          (fun (x6005 : GLfloat.t list) ->
             Ojs.list_to_js GLfloat.t_to_js x6005) Float32Array.t_0_to_js
          x6004
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6013 : Ojs.t) -> t_of_js x6013
    and t_0_to_js : t_0 -> Ojs.t = fun (x6012 : t) -> t_to_js x6012
  end
module GLsizei =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6015 : Ojs.t) -> Ojs.float_of_js x6015
    and t_to_js : t -> Ojs.t = fun (x6014 : float) -> Ojs.float_to_js x6014
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6017 : Ojs.t) -> t_of_js x6017
    and t_0_to_js : t_0 -> Ojs.t = fun (x6016 : t) -> t_to_js x6016
  end
module GLintptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6019 : Ojs.t) -> Ojs.float_of_js x6019
    and t_to_js : t -> Ojs.t = fun (x6018 : float) -> Ojs.float_to_js x6018
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6021 : Ojs.t) -> t_of_js x6021
    and t_0_to_js : t_0 -> Ojs.t = fun (x6020 : t) -> t_to_js x6020
  end
module GLenum =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6023 : Ojs.t) -> Ojs.float_of_js x6023
    and t_to_js : t -> Ojs.t = fun (x6022 : float) -> Ojs.float_to_js x6022
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6025 : Ojs.t) -> t_of_js x6025
    and t_0_to_js : t_0 -> Ojs.t = fun (x6024 : t) -> t_to_js x6024
  end
module WebGLRenderingContextOverloads =
  struct
    type t = [ `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6027 : Ojs.t) -> t_of_js x6027
    and t_0_to_js : t_0 -> Ojs.t = fun (x6026 : t) -> t_to_js x6026
    type tags = [ `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6030 : Ojs.t) -> intf_of_js __tags_of_js x6030
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6028 : __tags intf) -> intf_to_js __tags_to_js x6028
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6036 : 'tags this) ->
        fun ~location:(x6032 : WebGLUniformLocation.t option) ->
          fun ~v:(x6034 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6036) "uniform1fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6032);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6034)|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6042 : 'tags this) ->
        fun ~location:(x6038 : WebGLUniformLocation.t option) ->
          fun ~v:(x6040 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6042) "uniform1iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6038);(
                   Iterable.t_1_to_js GLint.t_to_js x6040)|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6048 : 'tags this) ->
        fun ~location:(x6044 : WebGLUniformLocation.t option) ->
          fun ~v:(x6046 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6048) "uniform2fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6044);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6046)|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6054 : 'tags this) ->
        fun ~location:(x6050 : WebGLUniformLocation.t option) ->
          fun ~v:(x6052 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6054) "uniform2iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6050);(
                   Iterable.t_1_to_js GLint.t_to_js x6052)|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6060 : 'tags this) ->
        fun ~location:(x6056 : WebGLUniformLocation.t option) ->
          fun ~v:(x6058 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6060) "uniform3fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6056);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6058)|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6066 : 'tags this) ->
        fun ~location:(x6062 : WebGLUniformLocation.t option) ->
          fun ~v:(x6064 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6066) "uniform3iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6062);(
                   Iterable.t_1_to_js GLint.t_to_js x6064)|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6072 : 'tags this) ->
        fun ~location:(x6068 : WebGLUniformLocation.t option) ->
          fun ~v:(x6070 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6072) "uniform4fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6068);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6070)|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6078 : 'tags this) ->
        fun ~location:(x6074 : WebGLUniformLocation.t option) ->
          fun ~v:(x6076 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6078) "uniform4iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6074);(
                   Iterable.t_1_to_js GLint.t_to_js x6076)|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6085 : 'tags this) ->
        fun ~location:(x6080 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6082 : GLboolean.t) ->
            fun ~value:(x6083 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6085) "uniformMatrix2fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6080);(
                     GLboolean.t_to_js x6082);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6083)|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6092 : 'tags this) ->
        fun ~location:(x6087 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6089 : GLboolean.t) ->
            fun ~value:(x6090 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6092) "uniformMatrix3fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6087);(
                     GLboolean.t_to_js x6089);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6090)|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6099 : 'tags this) ->
        fun ~location:(x6094 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6096 : GLboolean.t) ->
            fun ~value:(x6097 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6099) "uniformMatrix4fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6094);(
                     GLboolean.t_to_js x6096);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6097)|])
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x6104 : 'tags this) ->
        fun ~target:(x6101 : GLenum.t) ->
          fun ~size:(x6102 : GLsizeiptr.t) ->
            fun ~usage:(x6103 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6104) "bufferData"
                   [|(GLenum.t_to_js x6101);(GLsizeiptr.t_to_js x6102);(
                     GLenum.t_to_js x6103)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          data:BufferSource.t option -> usage:GLenum.t -> unit)
      =
      fun (x6110 : 'tags this) ->
        fun ~target:(x6106 : GLenum.t) ->
          fun ~data:(x6107 : BufferSource.t option) ->
            fun ~usage:(x6109 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6110) "bufferData"
                   [|(GLenum.t_to_js x6106);(Ojs.option_to_js
                                               BufferSource.t_to_js x6107);(
                     GLenum.t_to_js x6109)|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t -> offset:GLintptr.t -> data:BufferSource.t -> unit)
      =
      fun (x6115 : 'tags this) ->
        fun ~target:(x6112 : GLenum.t) ->
          fun ~offset:(x6113 : GLintptr.t) ->
            fun ~data:(x6114 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6115) "bufferSubData"
                   [|(GLenum.t_to_js x6112);(GLintptr.t_to_js x6113);(
                     BufferSource.t_to_js x6114)|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x6124 : 'tags this) ->
        fun ~target:(x6117 : GLenum.t) ->
          fun ~level:(x6118 : GLint.t) ->
            fun ~internalformat:(x6119 : GLenum.t) ->
              fun ~width:(x6120 : GLsizei.t) ->
                fun ~height:(x6121 : GLsizei.t) ->
                  fun ~border:(x6122 : GLint.t) ->
                    fun ~data:(x6123 : ArrayBufferView.t_0) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6124)
                           "compressedTexImage2D"
                           [|(GLenum.t_to_js x6117);(GLint.t_to_js x6118);(
                             GLenum.t_to_js x6119);(GLsizei.t_to_js x6120);(
                             GLsizei.t_to_js x6121);(GLint.t_to_js x6122);(
                             ArrayBufferView.t_0_to_js x6123)|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x6134 : 'tags this) ->
        fun ~target:(x6126 : GLenum.t) ->
          fun ~level:(x6127 : GLint.t) ->
            fun ~xoffset:(x6128 : GLint.t) ->
              fun ~yoffset:(x6129 : GLint.t) ->
                fun ~width:(x6130 : GLsizei.t) ->
                  fun ~height:(x6131 : GLsizei.t) ->
                    fun ~format:(x6132 : GLenum.t) ->
                      fun ~data:(x6133 : ArrayBufferView.t_0) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x6134)
                             "compressedTexSubImage2D"
                             [|(GLenum.t_to_js x6126);(GLint.t_to_js x6127);(
                               GLint.t_to_js x6128);(GLint.t_to_js x6129);(
                               GLsizei.t_to_js x6130);(GLsizei.t_to_js x6131);(
                               GLenum.t_to_js x6132);(ArrayBufferView.t_0_to_js
                                                        x6133)|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6144 : 'tags this) ->
        fun ~x:(x6136 : GLint.t) ->
          fun ~y:(x6137 : GLint.t) ->
            fun ~width:(x6138 : GLsizei.t) ->
              fun ~height:(x6139 : GLsizei.t) ->
                fun ~format:(x6140 : GLenum.t) ->
                  fun ~type_:(x6141 : GLenum.t) ->
                    fun ~pixels:(x6142 : ArrayBufferView.t_0 option) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6144) "readPixels"
                           [|(GLint.t_to_js x6136);(GLint.t_to_js x6137);(
                             GLsizei.t_to_js x6138);(GLsizei.t_to_js x6139);(
                             GLenum.t_to_js x6140);(GLenum.t_to_js x6141);(
                             Ojs.option_to_js ArrayBufferView.t_0_to_js x6142)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6156 : 'tags this) ->
        fun ~target:(x6146 : GLenum.t) ->
          fun ~level:(x6147 : GLint.t) ->
            fun ~internalformat:(x6148 : GLint.t) ->
              fun ~width:(x6149 : GLsizei.t) ->
                fun ~height:(x6150 : GLsizei.t) ->
                  fun ~border:(x6151 : GLint.t) ->
                    fun ~format:(x6152 : GLenum.t) ->
                      fun ~type_:(x6153 : GLenum.t) ->
                        fun ~pixels:(x6154 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x6156)
                               "texImage2D"
                               [|(GLenum.t_to_js x6146);(GLint.t_to_js x6147);(
                                 GLint.t_to_js x6148);(GLsizei.t_to_js x6149);(
                                 GLsizei.t_to_js x6150);(GLint.t_to_js x6151);(
                                 GLenum.t_to_js x6152);(GLenum.t_to_js x6153);(
                                 Ojs.option_to_js ArrayBufferView.t_0_to_js
                                   x6154)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x6164 : 'tags this) ->
        fun ~target:(x6158 : GLenum.t) ->
          fun ~level:(x6159 : GLint.t) ->
            fun ~internalformat:(x6160 : GLint.t) ->
              fun ~format:(x6161 : GLenum.t) ->
                fun ~type_:(x6162 : GLenum.t) ->
                  fun ~source:(x6163 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x6164) "texImage2D"
                         [|(GLenum.t_to_js x6158);(GLint.t_to_js x6159);(
                           GLint.t_to_js x6160);(GLenum.t_to_js x6161);(
                           GLenum.t_to_js x6162);(TexImageSource.t_to_js
                                                    x6163)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6176 : 'tags this) ->
        fun ~target:(x6166 : GLenum.t) ->
          fun ~level:(x6167 : GLint.t) ->
            fun ~xoffset:(x6168 : GLint.t) ->
              fun ~yoffset:(x6169 : GLint.t) ->
                fun ~width:(x6170 : GLsizei.t) ->
                  fun ~height:(x6171 : GLsizei.t) ->
                    fun ~format:(x6172 : GLenum.t) ->
                      fun ~type_:(x6173 : GLenum.t) ->
                        fun ~pixels:(x6174 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x6176)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x6166);(GLint.t_to_js x6167);(
                                 GLint.t_to_js x6168);(GLint.t_to_js x6169);(
                                 GLsizei.t_to_js x6170);(GLsizei.t_to_js
                                                           x6171);(GLenum.t_to_js
                                                                    x6172);(
                                 GLenum.t_to_js x6173);(Ojs.option_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x6174)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x6185 : 'tags this) ->
        fun ~target:(x6178 : GLenum.t) ->
          fun ~level:(x6179 : GLint.t) ->
            fun ~xoffset:(x6180 : GLint.t) ->
              fun ~yoffset:(x6181 : GLint.t) ->
                fun ~format:(x6182 : GLenum.t) ->
                  fun ~type_:(x6183 : GLenum.t) ->
                    fun ~source:(x6184 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6185)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x6178);(GLint.t_to_js x6179);(
                             GLint.t_to_js x6180);(GLint.t_to_js x6181);(
                             GLenum.t_to_js x6182);(GLenum.t_to_js x6183);(
                             TexImageSource.t_to_js x6184)|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6190 : 'tags this) ->
        fun ~location:(x6187 : WebGLUniformLocation.t option) ->
          fun ~v:(x6189 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6190) "uniform1fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6187);(
                   Float32List.t_to_js x6189)|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6195 : 'tags this) ->
        fun ~location:(x6192 : WebGLUniformLocation.t option) ->
          fun ~v:(x6194 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6195) "uniform1iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6192);(
                   Int32List.t_to_js x6194)|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6200 : 'tags this) ->
        fun ~location:(x6197 : WebGLUniformLocation.t option) ->
          fun ~v:(x6199 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6200) "uniform2fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6197);(
                   Float32List.t_to_js x6199)|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6205 : 'tags this) ->
        fun ~location:(x6202 : WebGLUniformLocation.t option) ->
          fun ~v:(x6204 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6205) "uniform2iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6202);(
                   Int32List.t_to_js x6204)|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6210 : 'tags this) ->
        fun ~location:(x6207 : WebGLUniformLocation.t option) ->
          fun ~v:(x6209 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6210) "uniform3fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6207);(
                   Float32List.t_to_js x6209)|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6215 : 'tags this) ->
        fun ~location:(x6212 : WebGLUniformLocation.t option) ->
          fun ~v:(x6214 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6215) "uniform3iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6212);(
                   Int32List.t_to_js x6214)|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6220 : 'tags this) ->
        fun ~location:(x6217 : WebGLUniformLocation.t option) ->
          fun ~v:(x6219 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6220) "uniform4fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6217);(
                   Float32List.t_to_js x6219)|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6225 : 'tags this) ->
        fun ~location:(x6222 : WebGLUniformLocation.t option) ->
          fun ~v:(x6224 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6225) "uniform4iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6222);(
                   Int32List.t_to_js x6224)|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6231 : 'tags this) ->
        fun ~location:(x6227 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6229 : GLboolean.t) ->
            fun ~value:(x6230 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6231) "uniformMatrix2fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6227);(
                     GLboolean.t_to_js x6229);(Float32List.t_to_js x6230)|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6237 : 'tags this) ->
        fun ~location:(x6233 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6235 : GLboolean.t) ->
            fun ~value:(x6236 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6237) "uniformMatrix3fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6233);(
                     GLboolean.t_to_js x6235);(Float32List.t_to_js x6236)|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6243 : 'tags this) ->
        fun ~location:(x6239 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6241 : GLboolean.t) ->
            fun ~value:(x6242 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6243) "uniformMatrix4fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6239);(
                     GLboolean.t_to_js x6241);(Float32List.t_to_js x6242)|])
    let cast_from = Obj.magic
  end
module WebGLShaderPrecisionFormat =
  struct
    type t = [ `WebGLShaderPrecisionFormat ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6246 : Ojs.t) -> t_of_js x6246
    and t_0_to_js : t_0 -> Ojs.t = fun (x6245 : t) -> t_to_js x6245
    type tags = [ `WebGLShaderPrecisionFormat ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLShaderPrecisionFormat ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6249 : Ojs.t) -> intf_of_js __tags_of_js x6249
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6247 : __tags intf) -> intf_to_js __tags_to_js x6247
    let (get_precision : 'tags this -> GLint.t) =
      fun (x6251 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6251) "precision")
    let (get_rangeMax : 'tags this -> GLint.t) =
      fun (x6253 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6253) "rangeMax")
    let (get_rangeMin : 'tags this -> GLint.t) =
      fun (x6255 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6255) "rangeMin")
    let (create :
      precision:GLint.t -> rangeMax:GLint.t -> rangeMin:GLint.t -> unit -> t)
      =
      fun ~precision:(x6257 : GLint.t) ->
        fun ~rangeMax:(x6258 : GLint.t) ->
          fun ~rangeMin:(x6259 : GLint.t) ->
            fun () ->
              let x6260 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6260 "precision" (GLint.t_to_js x6257);
              Ojs.set_prop_ascii x6260 "rangeMax" (GLint.t_to_js x6258);
              Ojs.set_prop_ascii x6260 "rangeMin" (GLint.t_to_js x6259);
              t_of_js x6260
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             [||])
  end
module WebGLRenderbuffer =
  struct
    type t = [ `WebGLRenderbuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6262 : Ojs.t) -> t_of_js x6262
    and t_0_to_js : t_0 -> Ojs.t = fun (x6261 : t) -> t_to_js x6261
    type tags = [ `WebGLRenderbuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6265 : Ojs.t) -> intf_of_js __tags_of_js x6265
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6263 : __tags intf) -> intf_to_js __tags_to_js x6263
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer")
             [||])
  end
module WebGLFramebuffer =
  struct
    type t = [ `WebGLFramebuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6268 : Ojs.t) -> t_of_js x6268
    and t_0_to_js : t_0 -> Ojs.t = fun (x6267 : t) -> t_to_js x6267
    type tags = [ `WebGLFramebuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLFramebuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6271 : Ojs.t) -> intf_of_js __tags_of_js x6271
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6269 : __tags intf) -> intf_to_js __tags_to_js x6269
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer")
             [||])
  end
module WebGLPowerPreference =
  struct
    type t =
      [ `L_s107_low_power  | `L_s57_default  | `L_s85_high_performance ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6274 : Ojs.t) ->
        let x6275 = x6274 in
        match Ojs.string_of_js x6275 with
        | "low-power" -> `L_s107_low_power
        | "default" -> `L_s57_default
        | "high-performance" -> `L_s85_high_performance
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x6273 :
          [ `L_s107_low_power  | `L_s57_default  | `L_s85_high_performance ])
        ->
        match x6273 with
        | `L_s107_low_power -> Ojs.string_to_js "low-power"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s85_high_performance -> Ojs.string_to_js "high-performance"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6277 : Ojs.t) -> t_of_js x6277
    and t_0_to_js : t_0 -> Ojs.t = fun (x6276 : t) -> t_to_js x6276
  end
module WebGLContextAttributes =
  struct
    type t = [ `WebGLContextAttributes ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6279 : Ojs.t) -> t_of_js x6279
    and t_0_to_js : t_0 -> Ojs.t = fun (x6278 : t) -> t_to_js x6278
    type tags = [ `WebGLContextAttributes ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextAttributes ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6282 : Ojs.t) -> intf_of_js __tags_of_js x6282
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6280 : __tags intf) -> intf_to_js __tags_to_js x6280
    let (get_alpha : 'tags this -> bool) =
      fun (x6284 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6284) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x6286 : 'tags this) ->
        fun (x6287 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6286) "alpha"
            (Ojs.bool_to_js x6287)
    let (get_antialias : 'tags this -> bool) =
      fun (x6289 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6289) "antialias")
    let (set_antialias : 'tags this -> bool -> unit) =
      fun (x6291 : 'tags this) ->
        fun (x6292 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6291) "antialias"
            (Ojs.bool_to_js x6292)
    let (get_depth : 'tags this -> bool) =
      fun (x6294 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6294) "depth")
    let (set_depth : 'tags this -> bool -> unit) =
      fun (x6296 : 'tags this) ->
        fun (x6297 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6296) "depth"
            (Ojs.bool_to_js x6297)
    let (get_desynchronized : 'tags this -> bool) =
      fun (x6299 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6299) "desynchronized")
    let (set_desynchronized : 'tags this -> bool -> unit) =
      fun (x6301 : 'tags this) ->
        fun (x6302 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6301) "desynchronized"
            (Ojs.bool_to_js x6302)
    let (get_failIfMajorPerformanceCaveat : 'tags this -> bool) =
      fun (x6304 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6304)
             "failIfMajorPerformanceCaveat")
    let (set_failIfMajorPerformanceCaveat : 'tags this -> bool -> unit) =
      fun (x6306 : 'tags this) ->
        fun (x6307 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6306)
            "failIfMajorPerformanceCaveat" (Ojs.bool_to_js x6307)
    let (get_powerPreference : 'tags this -> WebGLPowerPreference.t) =
      fun (x6309 : 'tags this) ->
        WebGLPowerPreference.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6309) "powerPreference")
    let (set_powerPreference : 'tags this -> WebGLPowerPreference.t -> unit)
      =
      fun (x6311 : 'tags this) ->
        fun (x6312 : WebGLPowerPreference.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6311) "powerPreference"
            (WebGLPowerPreference.t_to_js x6312)
    let (get_premultipliedAlpha : 'tags this -> bool) =
      fun (x6314 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6314)
             "premultipliedAlpha")
    let (set_premultipliedAlpha : 'tags this -> bool -> unit) =
      fun (x6316 : 'tags this) ->
        fun (x6317 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6316)
            "premultipliedAlpha" (Ojs.bool_to_js x6317)
    let (get_preserveDrawingBuffer : 'tags this -> bool) =
      fun (x6319 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6319)
             "preserveDrawingBuffer")
    let (set_preserveDrawingBuffer : 'tags this -> bool -> unit) =
      fun (x6321 : 'tags this) ->
        fun (x6322 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6321)
            "preserveDrawingBuffer" (Ojs.bool_to_js x6322)
    let (get_stencil : 'tags this -> bool) =
      fun (x6324 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6324) "stencil")
    let (set_stencil : 'tags this -> bool -> unit) =
      fun (x6326 : 'tags this) ->
        fun (x6327 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6326) "stencil"
            (Ojs.bool_to_js x6327)
    let (create :
      alpha:bool ->
        antialias:bool ->
          depth:bool ->
            desynchronized:bool ->
              failIfMajorPerformanceCaveat:bool ->
                powerPreference:WebGLPowerPreference.t ->
                  premultipliedAlpha:bool ->
                    preserveDrawingBuffer:bool -> stencil:bool -> unit -> t)
      =
      fun ~alpha:(x6329 : bool) ->
        fun ~antialias:(x6330 : bool) ->
          fun ~depth:(x6331 : bool) ->
            fun ~desynchronized:(x6332 : bool) ->
              fun ~failIfMajorPerformanceCaveat:(x6333 : bool) ->
                fun ~powerPreference:(x6334 : WebGLPowerPreference.t) ->
                  fun ~premultipliedAlpha:(x6335 : bool) ->
                    fun ~preserveDrawingBuffer:(x6336 : bool) ->
                      fun ~stencil:(x6337 : bool) ->
                        fun () ->
                          let x6338 = Ojs.empty_obj () in
                          Ojs.set_prop_ascii x6338 "alpha"
                            (Ojs.bool_to_js x6329);
                          Ojs.set_prop_ascii x6338 "antialias"
                            (Ojs.bool_to_js x6330);
                          Ojs.set_prop_ascii x6338 "depth"
                            (Ojs.bool_to_js x6331);
                          Ojs.set_prop_ascii x6338 "desynchronized"
                            (Ojs.bool_to_js x6332);
                          Ojs.set_prop_ascii x6338
                            "failIfMajorPerformanceCaveat"
                            (Ojs.bool_to_js x6333);
                          Ojs.set_prop_ascii x6338 "powerPreference"
                            (WebGLPowerPreference.t_to_js x6334);
                          Ojs.set_prop_ascii x6338 "premultipliedAlpha"
                            (Ojs.bool_to_js x6335);
                          Ojs.set_prop_ascii x6338 "preserveDrawingBuffer"
                            (Ojs.bool_to_js x6336);
                          Ojs.set_prop_ascii x6338 "stencil"
                            (Ojs.bool_to_js x6337);
                          t_of_js x6338
    let cast_from = Obj.magic
  end
module WebGLProgram =
  struct
    type t = [ `WebGLProgram ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6340 : Ojs.t) -> t_of_js x6340
    and t_0_to_js : t_0 -> Ojs.t = fun (x6339 : t) -> t_to_js x6339
    type tags = [ `WebGLProgram ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLProgram ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6343 : Ojs.t) -> intf_of_js __tags_of_js x6343
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6341 : __tags intf) -> intf_to_js __tags_to_js x6341
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLProgram")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLProgram") [||])
  end
module WebGLBuffer =
  struct
    type t = [ `WebGLBuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6346 : Ojs.t) -> t_of_js x6346
    and t_0_to_js : t_0 -> Ojs.t = fun (x6345 : t) -> t_to_js x6345
    type tags = [ `WebGLBuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLBuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6349 : Ojs.t) -> intf_of_js __tags_of_js x6349
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6347 : __tags intf) -> intf_to_js __tags_to_js x6347
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLBuffer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLBuffer") [||])
  end
module WebGLActiveInfo =
  struct
    type t = [ `WebGLActiveInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6352 : Ojs.t) -> t_of_js x6352
    and t_0_to_js : t_0 -> Ojs.t = fun (x6351 : t) -> t_to_js x6351
    type tags = [ `WebGLActiveInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLActiveInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6355 : Ojs.t) -> intf_of_js __tags_of_js x6355
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6353 : __tags intf) -> intf_to_js __tags_to_js x6353
    let (get_name : 'tags this -> string) =
      fun (x6357 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6357) "name")
    let (get_size : 'tags this -> GLint.t) =
      fun (x6359 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6359) "size")
    let (get_type : 'tags this -> GLenum.t) =
      fun (x6361 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6361) "type")
    let (create : name:string -> size:GLint.t -> type_:GLenum.t -> unit -> t)
      =
      fun ~name:(x6363 : string) ->
        fun ~size:(x6364 : GLint.t) ->
          fun ~type_:(x6365 : GLenum.t) ->
            fun () ->
              let x6366 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6366 "name" (Ojs.string_to_js x6363);
              Ojs.set_prop_ascii x6366 "size" (GLint.t_to_js x6364);
              Ojs.set_prop_ascii x6366 "type" (GLenum.t_to_js x6365);
              t_of_js x6366
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") [||])
  end
module WEBGL_lose_context =
  struct
    type t = [ `WEBGL_lose_context ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6368 : Ojs.t) -> t_of_js x6368
    and t_0_to_js : t_0 -> Ojs.t = fun (x6367 : t) -> t_to_js x6367
    type tags = [ `WEBGL_lose_context ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_lose_context ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6371 : Ojs.t) -> intf_of_js __tags_of_js x6371
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6369 : __tags intf) -> intf_to_js __tags_to_js x6369
    let (loseContext : 'tags this -> unit) =
      fun (x6373 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6373) "loseContext" [||])
    let (restoreContext : 'tags this -> unit) =
      fun (x6375 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6375) "restoreContext" [||])
    let cast_from = Obj.magic
  end
module WEBGL_draw_buffers =
  struct
    type t = [ `WEBGL_draw_buffers ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6378 : Ojs.t) -> t_of_js x6378
    and t_0_to_js : t_0 -> Ojs.t = fun (x6377 : t) -> t_to_js x6377
    type tags = [ `WEBGL_draw_buffers ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_draw_buffers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6381 : Ojs.t) -> intf_of_js __tags_of_js x6381
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6379 : __tags intf) -> intf_to_js __tags_to_js x6379
    let (drawBuffersWEBGL :
      'tags this -> buffers:GLenum.t Iterable.t_1 -> unit) =
      fun (x6385 : 'tags this) ->
        fun ~buffers:(x6383 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6385) "drawBuffersWEBGL"
               [|(Iterable.t_1_to_js GLenum.t_to_js x6383)|])
    let (drawBuffersWEBGL' : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x6389 : 'tags this) ->
        fun ~buffers:(x6387 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6389) "drawBuffersWEBGL"
               [|(Ojs.list_to_js GLenum.t_to_js x6387)|])
    let (get_COLOR_ATTACHMENT0_WEBGL : 'tags this -> GLenum.t) =
      fun (x6391 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6391)
             "COLOR_ATTACHMENT0_WEBGL")
    let (get_COLOR_ATTACHMENT10_WEBGL : 'tags this -> GLenum.t) =
      fun (x6393 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6393)
             "COLOR_ATTACHMENT10_WEBGL")
    let (get_COLOR_ATTACHMENT11_WEBGL : 'tags this -> GLenum.t) =
      fun (x6395 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6395)
             "COLOR_ATTACHMENT11_WEBGL")
    let (get_COLOR_ATTACHMENT12_WEBGL : 'tags this -> GLenum.t) =
      fun (x6397 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6397)
             "COLOR_ATTACHMENT12_WEBGL")
    let (get_COLOR_ATTACHMENT13_WEBGL : 'tags this -> GLenum.t) =
      fun (x6399 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6399)
             "COLOR_ATTACHMENT13_WEBGL")
    let (get_COLOR_ATTACHMENT14_WEBGL : 'tags this -> GLenum.t) =
      fun (x6401 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6401)
             "COLOR_ATTACHMENT14_WEBGL")
    let (get_COLOR_ATTACHMENT15_WEBGL : 'tags this -> GLenum.t) =
      fun (x6403 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6403)
             "COLOR_ATTACHMENT15_WEBGL")
    let (get_COLOR_ATTACHMENT1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6405 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6405)
             "COLOR_ATTACHMENT1_WEBGL")
    let (get_COLOR_ATTACHMENT2_WEBGL : 'tags this -> GLenum.t) =
      fun (x6407 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6407)
             "COLOR_ATTACHMENT2_WEBGL")
    let (get_COLOR_ATTACHMENT3_WEBGL : 'tags this -> GLenum.t) =
      fun (x6409 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6409)
             "COLOR_ATTACHMENT3_WEBGL")
    let (get_COLOR_ATTACHMENT4_WEBGL : 'tags this -> GLenum.t) =
      fun (x6411 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6411)
             "COLOR_ATTACHMENT4_WEBGL")
    let (get_COLOR_ATTACHMENT5_WEBGL : 'tags this -> GLenum.t) =
      fun (x6413 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6413)
             "COLOR_ATTACHMENT5_WEBGL")
    let (get_COLOR_ATTACHMENT6_WEBGL : 'tags this -> GLenum.t) =
      fun (x6415 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6415)
             "COLOR_ATTACHMENT6_WEBGL")
    let (get_COLOR_ATTACHMENT7_WEBGL : 'tags this -> GLenum.t) =
      fun (x6417 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6417)
             "COLOR_ATTACHMENT7_WEBGL")
    let (get_COLOR_ATTACHMENT8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6419 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6419)
             "COLOR_ATTACHMENT8_WEBGL")
    let (get_COLOR_ATTACHMENT9_WEBGL : 'tags this -> GLenum.t) =
      fun (x6421 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6421)
             "COLOR_ATTACHMENT9_WEBGL")
    let (get_DRAW_BUFFER0_WEBGL : 'tags this -> GLenum.t) =
      fun (x6423 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6423)
             "DRAW_BUFFER0_WEBGL")
    let (get_DRAW_BUFFER10_WEBGL : 'tags this -> GLenum.t) =
      fun (x6425 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6425)
             "DRAW_BUFFER10_WEBGL")
    let (get_DRAW_BUFFER11_WEBGL : 'tags this -> GLenum.t) =
      fun (x6427 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6427)
             "DRAW_BUFFER11_WEBGL")
    let (get_DRAW_BUFFER12_WEBGL : 'tags this -> GLenum.t) =
      fun (x6429 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6429)
             "DRAW_BUFFER12_WEBGL")
    let (get_DRAW_BUFFER13_WEBGL : 'tags this -> GLenum.t) =
      fun (x6431 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6431)
             "DRAW_BUFFER13_WEBGL")
    let (get_DRAW_BUFFER14_WEBGL : 'tags this -> GLenum.t) =
      fun (x6433 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6433)
             "DRAW_BUFFER14_WEBGL")
    let (get_DRAW_BUFFER15_WEBGL : 'tags this -> GLenum.t) =
      fun (x6435 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6435)
             "DRAW_BUFFER15_WEBGL")
    let (get_DRAW_BUFFER1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6437 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6437)
             "DRAW_BUFFER1_WEBGL")
    let (get_DRAW_BUFFER2_WEBGL : 'tags this -> GLenum.t) =
      fun (x6439 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6439)
             "DRAW_BUFFER2_WEBGL")
    let (get_DRAW_BUFFER3_WEBGL : 'tags this -> GLenum.t) =
      fun (x6441 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6441)
             "DRAW_BUFFER3_WEBGL")
    let (get_DRAW_BUFFER4_WEBGL : 'tags this -> GLenum.t) =
      fun (x6443 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6443)
             "DRAW_BUFFER4_WEBGL")
    let (get_DRAW_BUFFER5_WEBGL : 'tags this -> GLenum.t) =
      fun (x6445 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6445)
             "DRAW_BUFFER5_WEBGL")
    let (get_DRAW_BUFFER6_WEBGL : 'tags this -> GLenum.t) =
      fun (x6447 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6447)
             "DRAW_BUFFER6_WEBGL")
    let (get_DRAW_BUFFER7_WEBGL : 'tags this -> GLenum.t) =
      fun (x6449 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6449)
             "DRAW_BUFFER7_WEBGL")
    let (get_DRAW_BUFFER8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6451 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6451)
             "DRAW_BUFFER8_WEBGL")
    let (get_DRAW_BUFFER9_WEBGL : 'tags this -> GLenum.t) =
      fun (x6453 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6453)
             "DRAW_BUFFER9_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS_WEBGL : 'tags this -> GLenum.t) =
      fun (x6455 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6455)
             "MAX_COLOR_ATTACHMENTS_WEBGL")
    let (get_MAX_DRAW_BUFFERS_WEBGL : 'tags this -> GLenum.t) =
      fun (x6457 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6457)
             "MAX_DRAW_BUFFERS_WEBGL")
    let cast_from = Obj.magic
  end
module WEBGL_depth_texture =
  struct
    type t = [ `WEBGL_depth_texture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6460 : Ojs.t) -> t_of_js x6460
    and t_0_to_js : t_0 -> Ojs.t = fun (x6459 : t) -> t_to_js x6459
    type tags = [ `WEBGL_depth_texture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_depth_texture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6463 : Ojs.t) -> intf_of_js __tags_of_js x6463
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6461 : __tags intf) -> intf_to_js __tags_to_js x6461
    let (get_UNSIGNED_INT_24_8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6465 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6465)
             "UNSIGNED_INT_24_8_WEBGL")
    let (create : unsigned_int_24_8_webgl:GLenum.t -> unit -> t) =
      fun ~unsigned_int_24_8_webgl:(x6467 : GLenum.t) ->
        fun () ->
          let x6468 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6468 "UNSIGNED_INT_24_8_WEBGL"
            (GLenum.t_to_js x6467);
          t_of_js x6468
    let cast_from = Obj.magic
  end
module WebGLShader =
  struct
    type t = [ `WebGLShader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6470 : Ojs.t) -> t_of_js x6470
    and t_0_to_js : t_0 -> Ojs.t = fun (x6469 : t) -> t_to_js x6469
    type tags = [ `WebGLShader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLShader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6473 : Ojs.t) -> intf_of_js __tags_of_js x6473
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6471 : __tags intf) -> intf_to_js __tags_to_js x6471
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLShader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLShader") [||])
  end
module WEBGL_debug_shaders =
  struct
    type t = [ `WEBGL_debug_shaders ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6476 : Ojs.t) -> t_of_js x6476
    and t_0_to_js : t_0 -> Ojs.t = fun (x6475 : t) -> t_to_js x6475
    type tags = [ `WEBGL_debug_shaders ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_shaders ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6479 : Ojs.t) -> intf_of_js __tags_of_js x6479
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6477 : __tags intf) -> intf_to_js __tags_to_js x6477
    let (getTranslatedShaderSource :
      'tags this -> shader:WebGLShader.t -> string) =
      fun (x6482 : 'tags this) ->
        fun ~shader:(x6481 : WebGLShader.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x6482)
               "getTranslatedShaderSource" [|(WebGLShader.t_to_js x6481)|])
    let cast_from = Obj.magic
  end
module WEBGL_debug_renderer_info =
  struct
    type t = [ `WEBGL_debug_renderer_info ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6485 : Ojs.t) -> t_of_js x6485
    and t_0_to_js : t_0 -> Ojs.t = fun (x6484 : t) -> t_to_js x6484
    type tags = [ `WEBGL_debug_renderer_info ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_debug_renderer_info ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6488 : Ojs.t) -> intf_of_js __tags_of_js x6488
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6486 : __tags intf) -> intf_to_js __tags_to_js x6486
    let (get_UNMASKED_RENDERER_WEBGL : 'tags this -> GLenum.t) =
      fun (x6490 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6490)
             "UNMASKED_RENDERER_WEBGL")
    let (get_UNMASKED_VENDOR_WEBGL : 'tags this -> GLenum.t) =
      fun (x6492 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6492)
             "UNMASKED_VENDOR_WEBGL")
    let (create :
      unmasked_renderer_webgl:GLenum.t ->
        unmasked_vendor_webgl:GLenum.t -> unit -> t)
      =
      fun ~unmasked_renderer_webgl:(x6494 : GLenum.t) ->
        fun ~unmasked_vendor_webgl:(x6495 : GLenum.t) ->
          fun () ->
            let x6496 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x6496 "UNMASKED_RENDERER_WEBGL"
              (GLenum.t_to_js x6494);
            Ojs.set_prop_ascii x6496 "UNMASKED_VENDOR_WEBGL"
              (GLenum.t_to_js x6495);
            t_of_js x6496
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc_srgb =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc_srgb ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6498 : Ojs.t) -> t_of_js x6498
    and t_0_to_js : t_0 -> Ojs.t = fun (x6497 : t) -> t_to_js x6497
    type tags = [ `WEBGL_compressed_texture_s3tc_srgb ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc_srgb ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6501 : Ojs.t) -> intf_of_js __tags_of_js x6501
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6499 : __tags intf) -> intf_to_js __tags_to_js x6499
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6503 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6503)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x6505 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6505)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x6507 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6507)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_SRGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6509 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6509)
             "COMPRESSED_SRGB_S3TC_DXT1_EXT")
    let (create :
      compressed_srgb_alpha_s3tc_dxt1_ext:GLenum.t ->
        compressed_srgb_alpha_s3tc_dxt3_ext:GLenum.t ->
          compressed_srgb_alpha_s3tc_dxt5_ext:GLenum.t ->
            compressed_srgb_s3tc_dxt1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_srgb_alpha_s3tc_dxt1_ext:(x6511 : GLenum.t) ->
        fun ~compressed_srgb_alpha_s3tc_dxt3_ext:(x6512 : GLenum.t) ->
          fun ~compressed_srgb_alpha_s3tc_dxt5_ext:(x6513 : GLenum.t) ->
            fun ~compressed_srgb_s3tc_dxt1_ext:(x6514 : GLenum.t) ->
              fun () ->
                let x6515 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6515
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6511);
                Ojs.set_prop_ascii x6515
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"
                  (GLenum.t_to_js x6512);
                Ojs.set_prop_ascii x6515
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"
                  (GLenum.t_to_js x6513);
                Ojs.set_prop_ascii x6515 "COMPRESSED_SRGB_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6514);
                t_of_js x6515
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6517 : Ojs.t) -> t_of_js x6517
    and t_0_to_js : t_0 -> Ojs.t = fun (x6516 : t) -> t_to_js x6516
    type tags = [ `WEBGL_compressed_texture_s3tc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6520 : Ojs.t) -> intf_of_js __tags_of_js x6520
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6518 : __tags intf) -> intf_to_js __tags_to_js x6518
    let (get_COMPRESSED_RGBA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6522 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6522)
             "COMPRESSED_RGBA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x6524 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6524)
             "COMPRESSED_RGBA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x6526 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6526)
             "COMPRESSED_RGBA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_RGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6528 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6528)
             "COMPRESSED_RGB_S3TC_DXT1_EXT")
    let (create :
      compressed_rgba_s3tc_dxt1_ext:GLenum.t ->
        compressed_rgba_s3tc_dxt3_ext:GLenum.t ->
          compressed_rgba_s3tc_dxt5_ext:GLenum.t ->
            compressed_rgb_s3tc_dxt1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_rgba_s3tc_dxt1_ext:(x6530 : GLenum.t) ->
        fun ~compressed_rgba_s3tc_dxt3_ext:(x6531 : GLenum.t) ->
          fun ~compressed_rgba_s3tc_dxt5_ext:(x6532 : GLenum.t) ->
            fun ~compressed_rgb_s3tc_dxt1_ext:(x6533 : GLenum.t) ->
              fun () ->
                let x6534 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6534 "COMPRESSED_RGBA_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6530);
                Ojs.set_prop_ascii x6534 "COMPRESSED_RGBA_S3TC_DXT3_EXT"
                  (GLenum.t_to_js x6531);
                Ojs.set_prop_ascii x6534 "COMPRESSED_RGBA_S3TC_DXT5_EXT"
                  (GLenum.t_to_js x6532);
                Ojs.set_prop_ascii x6534 "COMPRESSED_RGB_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6533);
                t_of_js x6534
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_pvrtc =
  struct
    type t = [ `WEBGL_compressed_texture_pvrtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6536 : Ojs.t) -> t_of_js x6536
    and t_0_to_js : t_0 -> Ojs.t = fun (x6535 : t) -> t_to_js x6535
    type tags = [ `WEBGL_compressed_texture_pvrtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_pvrtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6539 : Ojs.t) -> intf_of_js __tags_of_js x6539
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6537 : __tags intf) -> intf_to_js __tags_to_js x6537
    let (get_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6541 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6541)
             "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6543 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6543)
             "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6545 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6545)
             "COMPRESSED_RGB_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6547 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6547)
             "COMPRESSED_RGB_PVRTC_4BPPV1_IMG")
    let (create :
      compressed_rgba_pvrtc_2bppv1_img:GLenum.t ->
        compressed_rgba_pvrtc_4bppv1_img:GLenum.t ->
          compressed_rgb_pvrtc_2bppv1_img:GLenum.t ->
            compressed_rgb_pvrtc_4bppv1_img:GLenum.t -> unit -> t)
      =
      fun ~compressed_rgba_pvrtc_2bppv1_img:(x6549 : GLenum.t) ->
        fun ~compressed_rgba_pvrtc_4bppv1_img:(x6550 : GLenum.t) ->
          fun ~compressed_rgb_pvrtc_2bppv1_img:(x6551 : GLenum.t) ->
            fun ~compressed_rgb_pvrtc_4bppv1_img:(x6552 : GLenum.t) ->
              fun () ->
                let x6553 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6553 "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"
                  (GLenum.t_to_js x6549);
                Ojs.set_prop_ascii x6553 "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"
                  (GLenum.t_to_js x6550);
                Ojs.set_prop_ascii x6553 "COMPRESSED_RGB_PVRTC_2BPPV1_IMG"
                  (GLenum.t_to_js x6551);
                Ojs.set_prop_ascii x6553 "COMPRESSED_RGB_PVRTC_4BPPV1_IMG"
                  (GLenum.t_to_js x6552);
                t_of_js x6553
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc1 =
  struct
    type t = [ `WEBGL_compressed_texture_etc1 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6555 : Ojs.t) -> t_of_js x6555
    and t_0_to_js : t_0 -> Ojs.t = fun (x6554 : t) -> t_to_js x6554
    type tags = [ `WEBGL_compressed_texture_etc1 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc1 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6558 : Ojs.t) -> intf_of_js __tags_of_js x6558
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6556 : __tags intf) -> intf_to_js __tags_to_js x6556
    let (get_COMPRESSED_RGB_ETC1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6560 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6560)
             "COMPRESSED_RGB_ETC1_WEBGL")
    let (create : compressed_rgb_etc1_webgl:GLenum.t -> unit -> t) =
      fun ~compressed_rgb_etc1_webgl:(x6562 : GLenum.t) ->
        fun () ->
          let x6563 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6563 "COMPRESSED_RGB_ETC1_WEBGL"
            (GLenum.t_to_js x6562);
          t_of_js x6563
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc =
  struct
    type t = [ `WEBGL_compressed_texture_etc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6565 : Ojs.t) -> t_of_js x6565
    and t_0_to_js : t_0 -> Ojs.t = fun (x6564 : t) -> t_to_js x6564
    type tags = [ `WEBGL_compressed_texture_etc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6568 : Ojs.t) -> intf_of_js __tags_of_js x6568
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6566 : __tags intf) -> intf_to_js __tags_to_js x6566
    let (get_COMPRESSED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6570 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6570)
             "COMPRESSED_R11_EAC")
    let (get_COMPRESSED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6572 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6572)
             "COMPRESSED_RG11_EAC")
    let (get_COMPRESSED_RGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6574 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6574)
             "COMPRESSED_RGB8_ETC2")
    let (get_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6576 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6576)
             "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (get_COMPRESSED_RGBA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6578 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6578)
             "COMPRESSED_RGBA8_ETC2_EAC")
    let (get_COMPRESSED_SIGNED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6580 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6580)
             "COMPRESSED_SIGNED_R11_EAC")
    let (get_COMPRESSED_SIGNED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6582 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6582)
             "COMPRESSED_SIGNED_RG11_EAC")
    let (get_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6584 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6584)
             "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")
    let (get_COMPRESSED_SRGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6586 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6586)
             "COMPRESSED_SRGB8_ETC2")
    let (get_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6588 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6588)
             "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (create :
      compressed_r11_eac:GLenum.t ->
        compressed_rg11_eac:GLenum.t ->
          compressed_rgb8_etc2:GLenum.t ->
            compressed_rgb8_punchthrough_alpha1_etc2:GLenum.t ->
              compressed_rgba8_etc2_eac:GLenum.t ->
                compressed_signed_r11_eac:GLenum.t ->
                  compressed_signed_rg11_eac:GLenum.t ->
                    compressed_srgb8_alpha8_etc2_eac:GLenum.t ->
                      compressed_srgb8_etc2:GLenum.t ->
                        compressed_srgb8_punchthrough_alpha1_etc2:GLenum.t ->
                          unit -> t)
      =
      fun ~compressed_r11_eac:(x6590 : GLenum.t) ->
        fun ~compressed_rg11_eac:(x6591 : GLenum.t) ->
          fun ~compressed_rgb8_etc2:(x6592 : GLenum.t) ->
            fun ~compressed_rgb8_punchthrough_alpha1_etc2:(x6593 : GLenum.t)
              ->
              fun ~compressed_rgba8_etc2_eac:(x6594 : GLenum.t) ->
                fun ~compressed_signed_r11_eac:(x6595 : GLenum.t) ->
                  fun ~compressed_signed_rg11_eac:(x6596 : GLenum.t) ->
                    fun ~compressed_srgb8_alpha8_etc2_eac:(x6597 : GLenum.t)
                      ->
                      fun ~compressed_srgb8_etc2:(x6598 : GLenum.t) ->
                        fun
                          ~compressed_srgb8_punchthrough_alpha1_etc2:
                          (x6599 : GLenum.t) ->
                          fun () ->
                            let x6600 = Ojs.empty_obj () in
                            Ojs.set_prop_ascii x6600 "COMPRESSED_R11_EAC"
                              (GLenum.t_to_js x6590);
                            Ojs.set_prop_ascii x6600 "COMPRESSED_RG11_EAC"
                              (GLenum.t_to_js x6591);
                            Ojs.set_prop_ascii x6600 "COMPRESSED_RGB8_ETC2"
                              (GLenum.t_to_js x6592);
                            Ojs.set_prop_ascii x6600
                              "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"
                              (GLenum.t_to_js x6593);
                            Ojs.set_prop_ascii x6600
                              "COMPRESSED_RGBA8_ETC2_EAC"
                              (GLenum.t_to_js x6594);
                            Ojs.set_prop_ascii x6600
                              "COMPRESSED_SIGNED_R11_EAC"
                              (GLenum.t_to_js x6595);
                            Ojs.set_prop_ascii x6600
                              "COMPRESSED_SIGNED_RG11_EAC"
                              (GLenum.t_to_js x6596);
                            Ojs.set_prop_ascii x6600
                              "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"
                              (GLenum.t_to_js x6597);
                            Ojs.set_prop_ascii x6600 "COMPRESSED_SRGB8_ETC2"
                              (GLenum.t_to_js x6598);
                            Ojs.set_prop_ascii x6600
                              "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"
                              (GLenum.t_to_js x6599);
                            t_of_js x6600
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_astc =
  struct
    type t = [ `WEBGL_compressed_texture_astc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6602 : Ojs.t) -> t_of_js x6602
    and t_0_to_js : t_0 -> Ojs.t = fun (x6601 : t) -> t_to_js x6601
    type tags = [ `WEBGL_compressed_texture_astc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_astc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6605 : Ojs.t) -> intf_of_js __tags_of_js x6605
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6603 : __tags intf) -> intf_to_js __tags_to_js x6603
    let (getSupportedProfiles : 'tags this -> string list) =
      fun (x6607 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6607) "getSupportedProfiles" [||])
    let (get_COMPRESSED_RGBA_ASTC_10x10_KHR : 'tags this -> GLenum.t) =
      fun (x6610 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6610)
             "COMPRESSED_RGBA_ASTC_10x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x5_KHR : 'tags this -> GLenum.t) =
      fun (x6612 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6612)
             "COMPRESSED_RGBA_ASTC_10x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x6_KHR : 'tags this -> GLenum.t) =
      fun (x6614 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6614)
             "COMPRESSED_RGBA_ASTC_10x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x8_KHR : 'tags this -> GLenum.t) =
      fun (x6616 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6616)
             "COMPRESSED_RGBA_ASTC_10x8_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x10_KHR : 'tags this -> GLenum.t) =
      fun (x6618 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6618)
             "COMPRESSED_RGBA_ASTC_12x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x12_KHR : 'tags this -> GLenum.t) =
      fun (x6620 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6620)
             "COMPRESSED_RGBA_ASTC_12x12_KHR")
    let (get_COMPRESSED_RGBA_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x6622 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6622)
             "COMPRESSED_RGBA_ASTC_4x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x6624 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6624)
             "COMPRESSED_RGBA_ASTC_5x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x6626 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6626)
             "COMPRESSED_RGBA_ASTC_5x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x6628 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6628)
             "COMPRESSED_RGBA_ASTC_6x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x6630 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6630)
             "COMPRESSED_RGBA_ASTC_6x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x6632 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6632)
             "COMPRESSED_RGBA_ASTC_8x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x6634 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6634)
             "COMPRESSED_RGBA_ASTC_8x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x6636 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6636)
             "COMPRESSED_RGBA_ASTC_8x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x6638 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6638)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : 'tags this -> GLenum.t)
      =
      fun (x6640 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6640)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : 'tags this -> GLenum.t)
      =
      fun (x6642 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6642)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : 'tags this -> GLenum.t)
      =
      fun (x6644 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6644)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x6646 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6646)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : 'tags this -> GLenum.t)
      =
      fun (x6648 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6648)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x6650 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6650)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x6652 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6652)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x6654 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6654)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x6656 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6656)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x6658 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6658)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x6660 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6660)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x6662 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6662)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x6664 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6664)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR")
    let cast_from = Obj.magic
  end
module WEBGL_color_buffer_float =
  struct
    type t = [ `WEBGL_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6667 : Ojs.t) -> t_of_js x6667
    and t_0_to_js : t_0 -> Ojs.t = fun (x6666 : t) -> t_to_js x6666
    type tags = [ `WEBGL_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6670 : Ojs.t) -> intf_of_js __tags_of_js x6670
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6668 : __tags intf) -> intf_to_js __tags_to_js x6668
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x6672 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6672)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGBA32F_EXT : 'tags this -> GLenum.t) =
      fun (x6674 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6674) "RGBA32F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x6676 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6676)
             "UNSIGNED_NORMALIZED_EXT")
    let (create :
      framebuffer_attachment_component_type_ext:GLenum.t ->
        rgba32f_ext:GLenum.t -> unsigned_normalized_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_component_type_ext:(x6678 : GLenum.t) ->
        fun ~rgba32f_ext:(x6679 : GLenum.t) ->
          fun ~unsigned_normalized_ext:(x6680 : GLenum.t) ->
            fun () ->
              let x6681 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6681
                "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
                (GLenum.t_to_js x6678);
              Ojs.set_prop_ascii x6681 "RGBA32F_EXT" (GLenum.t_to_js x6679);
              Ojs.set_prop_ascii x6681 "UNSIGNED_NORMALIZED_EXT"
                (GLenum.t_to_js x6680);
              t_of_js x6681
    let cast_from = Obj.magic
  end
module WebGLTexture =
  struct
    type t = [ `WebGLTexture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6683 : Ojs.t) -> t_of_js x6683
    and t_0_to_js : t_0 -> Ojs.t = fun (x6682 : t) -> t_to_js x6682
    type tags = [ `WebGLTexture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLTexture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6686 : Ojs.t) -> intf_of_js __tags_of_js x6686
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6684 : __tags intf) -> intf_to_js __tags_to_js x6684
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLTexture")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLTexture") [||])
  end
module OVR_multiview2 =
  struct
    type t = [ `OVR_multiview2 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6689 : Ojs.t) -> t_of_js x6689
    and t_0_to_js : t_0 -> Ojs.t = fun (x6688 : t) -> t_to_js x6688
    type tags = [ `OVR_multiview2 ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OVR_multiview2 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6692 : Ojs.t) -> intf_of_js __tags_of_js x6692
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6690 : __tags intf) -> intf_to_js __tags_to_js x6690
    let (framebufferTextureMultiviewOVR :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t option ->
              level:GLint.t ->
                baseViewIndex:GLint.t -> numViews:GLsizei.t -> unit)
      =
      fun (x6701 : 'tags this) ->
        fun ~target:(x6694 : GLenum.t) ->
          fun ~attachment:(x6695 : GLenum.t) ->
            fun ~texture:(x6696 : WebGLTexture.t option) ->
              fun ~level:(x6698 : GLint.t) ->
                fun ~baseViewIndex:(x6699 : GLint.t) ->
                  fun ~numViews:(x6700 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x6701)
                         "framebufferTextureMultiviewOVR"
                         [|(GLenum.t_to_js x6694);(GLenum.t_to_js x6695);(
                           Ojs.option_to_js WebGLTexture.t_to_js x6696);(
                           GLint.t_to_js x6698);(GLint.t_to_js x6699);(
                           GLsizei.t_to_js x6700)|])
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :
      'tags this -> GLenum.t) =
      fun (x6703 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6703)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :
      'tags this -> GLenum.t) =
      fun (x6705 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6705)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR")
    let (get_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :
      'tags this -> GLenum.t) =
      fun (x6707 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6707)
             "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR")
    let (get_MAX_VIEWS_OVR : 'tags this -> GLenum.t) =
      fun (x6709 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6709) "MAX_VIEWS_OVR")
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObjectOES =
  struct
    type t = [ `WebGLVertexArrayObjectOES ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6712 : Ojs.t) -> t_of_js x6712
    and t_0_to_js : t_0 -> Ojs.t = fun (x6711 : t) -> t_to_js x6711
    type tags = [ `WebGLVertexArrayObjectOES ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObjectOES ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6715 : Ojs.t) -> intf_of_js __tags_of_js x6715
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6713 : __tags intf) -> intf_to_js __tags_to_js x6713
    let cast_from = Obj.magic
  end
module OES_vertex_array_object =
  struct
    type t = [ `OES_vertex_array_object ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6718 : Ojs.t) -> t_of_js x6718
    and t_0_to_js : t_0 -> Ojs.t = fun (x6717 : t) -> t_to_js x6717
    type tags = [ `OES_vertex_array_object ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_vertex_array_object ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6721 : Ojs.t) -> intf_of_js __tags_of_js x6721
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6719 : __tags intf) -> intf_to_js __tags_to_js x6719
    let (bindVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit) =
      fun (x6725 : 'tags this) ->
        fun ~arrayObject:(x6723 : WebGLVertexArrayObjectOES.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6725) "bindVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x6723)|])
    let (createVertexArrayOES :
      'tags this -> WebGLVertexArrayObjectOES.t option) =
      fun (x6727 : 'tags this) ->
        Ojs.option_of_js WebGLVertexArrayObjectOES.t_of_js
          (Ojs.call (this_to_js Obj.magic x6727) "createVertexArrayOES" [||])
    let (deleteVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit) =
      fun (x6732 : 'tags this) ->
        fun ~arrayObject:(x6730 : WebGLVertexArrayObjectOES.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6732) "deleteVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x6730)|])
    let (isVertexArrayOES :
      'tags this ->
        arrayObject:WebGLVertexArrayObjectOES.t option -> GLboolean.t)
      =
      fun (x6736 : 'tags this) ->
        fun ~arrayObject:(x6734 : WebGLVertexArrayObjectOES.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6736) "isVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x6734)|])
    let (get_VERTEX_ARRAY_BINDING_OES : 'tags this -> GLenum.t) =
      fun (x6738 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6738)
             "VERTEX_ARRAY_BINDING_OES")
    let cast_from = Obj.magic
  end
module OES_texture_half_float_linear =
  struct
    type t = [ `OES_texture_half_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6741 : Ojs.t) -> t_of_js x6741
    and t_0_to_js : t_0 -> Ojs.t = fun (x6740 : t) -> t_to_js x6740
    type tags = [ `OES_texture_half_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6744 : Ojs.t) -> intf_of_js __tags_of_js x6744
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6742 : __tags intf) -> intf_to_js __tags_to_js x6742
    let cast_from = Obj.magic
  end
module OES_texture_half_float =
  struct
    type t = [ `OES_texture_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6747 : Ojs.t) -> t_of_js x6747
    and t_0_to_js : t_0 -> Ojs.t = fun (x6746 : t) -> t_to_js x6746
    type tags = [ `OES_texture_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6750 : Ojs.t) -> intf_of_js __tags_of_js x6750
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6748 : __tags intf) -> intf_to_js __tags_to_js x6748
    let (get_HALF_FLOAT_OES : 'tags this -> GLenum.t) =
      fun (x6752 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6752) "HALF_FLOAT_OES")
    let (create : half_float_oes:GLenum.t -> unit -> t) =
      fun ~half_float_oes:(x6754 : GLenum.t) ->
        fun () ->
          let x6755 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6755 "HALF_FLOAT_OES" (GLenum.t_to_js x6754);
          t_of_js x6755
    let cast_from = Obj.magic
  end
module OES_texture_float_linear =
  struct
    type t = [ `OES_texture_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6757 : Ojs.t) -> t_of_js x6757
    and t_0_to_js : t_0 -> Ojs.t = fun (x6756 : t) -> t_to_js x6756
    type tags = [ `OES_texture_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6760 : Ojs.t) -> intf_of_js __tags_of_js x6760
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6758 : __tags intf) -> intf_to_js __tags_to_js x6758
    let cast_from = Obj.magic
  end
module OES_texture_float =
  struct
    type t = [ `OES_texture_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6763 : Ojs.t) -> t_of_js x6763
    and t_0_to_js : t_0 -> Ojs.t = fun (x6762 : t) -> t_to_js x6762
    type tags = [ `OES_texture_float ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6766 : Ojs.t) -> intf_of_js __tags_of_js x6766
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6764 : __tags intf) -> intf_to_js __tags_to_js x6764
    let cast_from = Obj.magic
  end
module OES_standard_derivatives =
  struct
    type t = [ `OES_standard_derivatives ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6769 : Ojs.t) -> t_of_js x6769
    and t_0_to_js : t_0 -> Ojs.t = fun (x6768 : t) -> t_to_js x6768
    type tags = [ `OES_standard_derivatives ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_standard_derivatives ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6772 : Ojs.t) -> intf_of_js __tags_of_js x6772
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6770 : __tags intf) -> intf_to_js __tags_to_js x6770
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT_OES : 'tags this -> GLenum.t) =
      fun (x6774 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6774)
             "FRAGMENT_SHADER_DERIVATIVE_HINT_OES")
    let (create : fragment_shader_derivative_hint_oes:GLenum.t -> unit -> t)
      =
      fun ~fragment_shader_derivative_hint_oes:(x6776 : GLenum.t) ->
        fun () ->
          let x6777 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6777 "FRAGMENT_SHADER_DERIVATIVE_HINT_OES"
            (GLenum.t_to_js x6776);
          t_of_js x6777
    let cast_from = Obj.magic
  end
module OES_element_index_uint =
  struct
    type t = [ `OES_element_index_uint ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6779 : Ojs.t) -> t_of_js x6779
    and t_0_to_js : t_0 -> Ojs.t = fun (x6778 : t) -> t_to_js x6778
    type tags = [ `OES_element_index_uint ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_element_index_uint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6782 : Ojs.t) -> intf_of_js __tags_of_js x6782
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6780 : __tags intf) -> intf_to_js __tags_to_js x6780
    let cast_from = Obj.magic
  end
module KHR_parallel_shader_compile =
  struct
    type t = [ `KHR_parallel_shader_compile ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6785 : Ojs.t) -> t_of_js x6785
    and t_0_to_js : t_0 -> Ojs.t = fun (x6784 : t) -> t_to_js x6784
    type tags = [ `KHR_parallel_shader_compile ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `KHR_parallel_shader_compile ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6788 : Ojs.t) -> intf_of_js __tags_of_js x6788
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6786 : __tags intf) -> intf_to_js __tags_to_js x6786
    let (get_COMPLETION_STATUS_KHR : 'tags this -> GLenum.t) =
      fun (x6790 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6790)
             "COMPLETION_STATUS_KHR")
    let (create : completion_status_khr:GLenum.t -> unit -> t) =
      fun ~completion_status_khr:(x6792 : GLenum.t) ->
        fun () ->
          let x6793 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6793 "COMPLETION_STATUS_KHR"
            (GLenum.t_to_js x6792);
          t_of_js x6793
    let cast_from = Obj.magic
  end
module GLclampf =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6795 : Ojs.t) -> Ojs.float_of_js x6795
    and t_to_js : t -> Ojs.t = fun (x6794 : float) -> Ojs.float_to_js x6794
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6797 : Ojs.t) -> t_of_js x6797
    and t_0_to_js : t_0 -> Ojs.t = fun (x6796 : t) -> t_to_js x6796
  end
module GLbitfield =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6799 : Ojs.t) -> Ojs.float_of_js x6799
    and t_to_js : t -> Ojs.t = fun (x6798 : float) -> Ojs.float_to_js x6798
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6801 : Ojs.t) -> t_of_js x6801
    and t_0_to_js : t_0 -> Ojs.t = fun (x6800 : t) -> t_to_js x6800
  end
module EXT_texture_filter_anisotropic =
  struct
    type t = [ `EXT_texture_filter_anisotropic ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6803 : Ojs.t) -> t_of_js x6803
    and t_0_to_js : t_0 -> Ojs.t = fun (x6802 : t) -> t_to_js x6802
    type tags = [ `EXT_texture_filter_anisotropic ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_filter_anisotropic ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6806 : Ojs.t) -> intf_of_js __tags_of_js x6806
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6804 : __tags intf) -> intf_to_js __tags_to_js x6804
    let (get_MAX_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x6808 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6808)
             "MAX_TEXTURE_MAX_ANISOTROPY_EXT")
    let (get_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x6810 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6810)
             "TEXTURE_MAX_ANISOTROPY_EXT")
    let (create :
      max_texture_max_anisotropy_ext:GLenum.t ->
        texture_max_anisotropy_ext:GLenum.t -> unit -> t)
      =
      fun ~max_texture_max_anisotropy_ext:(x6812 : GLenum.t) ->
        fun ~texture_max_anisotropy_ext:(x6813 : GLenum.t) ->
          fun () ->
            let x6814 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x6814 "MAX_TEXTURE_MAX_ANISOTROPY_EXT"
              (GLenum.t_to_js x6812);
            Ojs.set_prop_ascii x6814 "TEXTURE_MAX_ANISOTROPY_EXT"
              (GLenum.t_to_js x6813);
            t_of_js x6814
    let cast_from = Obj.magic
  end
module EXT_shader_texture_lod =
  struct
    type t = [ `EXT_shader_texture_lod ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6816 : Ojs.t) -> t_of_js x6816
    and t_0_to_js : t_0 -> Ojs.t = fun (x6815 : t) -> t_to_js x6815
    type tags = [ `EXT_shader_texture_lod ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_shader_texture_lod ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6819 : Ojs.t) -> intf_of_js __tags_of_js x6819
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6817 : __tags intf) -> intf_to_js __tags_to_js x6817
    let cast_from = Obj.magic
  end
module EXT_sRGB =
  struct
    type t = [ `EXT_sRGB ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6822 : Ojs.t) -> t_of_js x6822
    and t_0_to_js : t_0 -> Ojs.t = fun (x6821 : t) -> t_to_js x6821
    type tags = [ `EXT_sRGB ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_sRGB ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6825 : Ojs.t) -> intf_of_js __tags_of_js x6825
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6823 : __tags intf) -> intf_to_js __tags_to_js x6823
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT :
      'tags this -> GLenum.t) =
      fun (x6827 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6827)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT")
    let (get_SRGB8_ALPHA8_EXT : 'tags this -> GLenum.t) =
      fun (x6829 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6829) "SRGB8_ALPHA8_EXT")
    let (get_SRGB_ALPHA_EXT : 'tags this -> GLenum.t) =
      fun (x6831 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6831) "SRGB_ALPHA_EXT")
    let (get_SRGB_EXT : 'tags this -> GLenum.t) =
      fun (x6833 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6833) "SRGB_EXT")
    let (create :
      framebuffer_attachment_color_encoding_ext:GLenum.t ->
        srgb8_alpha8_ext:GLenum.t ->
          srgb_alpha_ext:GLenum.t -> srgb_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_color_encoding_ext:(x6835 : GLenum.t) ->
        fun ~srgb8_alpha8_ext:(x6836 : GLenum.t) ->
          fun ~srgb_alpha_ext:(x6837 : GLenum.t) ->
            fun ~srgb_ext:(x6838 : GLenum.t) ->
              fun () ->
                let x6839 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6839
                  "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT"
                  (GLenum.t_to_js x6835);
                Ojs.set_prop_ascii x6839 "SRGB8_ALPHA8_EXT"
                  (GLenum.t_to_js x6836);
                Ojs.set_prop_ascii x6839 "SRGB_ALPHA_EXT"
                  (GLenum.t_to_js x6837);
                Ojs.set_prop_ascii x6839 "SRGB_EXT" (GLenum.t_to_js x6838);
                t_of_js x6839
    let cast_from = Obj.magic
  end
module EXT_frag_depth =
  struct
    type t = [ `EXT_frag_depth ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6841 : Ojs.t) -> t_of_js x6841
    and t_0_to_js : t_0 -> Ojs.t = fun (x6840 : t) -> t_to_js x6840
    type tags = [ `EXT_frag_depth ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_frag_depth ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6844 : Ojs.t) -> intf_of_js __tags_of_js x6844
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6842 : __tags intf) -> intf_to_js __tags_to_js x6842
    let cast_from = Obj.magic
  end
module EXT_float_blend =
  struct
    type t = [ `EXT_float_blend ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6847 : Ojs.t) -> t_of_js x6847
    and t_0_to_js : t_0 -> Ojs.t = fun (x6846 : t) -> t_to_js x6846
    type tags = [ `EXT_float_blend ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_float_blend ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6850 : Ojs.t) -> intf_of_js __tags_of_js x6850
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6848 : __tags intf) -> intf_to_js __tags_to_js x6848
    let cast_from = Obj.magic
  end
module EXT_color_buffer_half_float =
  struct
    type t = [ `EXT_color_buffer_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6853 : Ojs.t) -> t_of_js x6853
    and t_0_to_js : t_0 -> Ojs.t = fun (x6852 : t) -> t_to_js x6852
    type tags = [ `EXT_color_buffer_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6856 : Ojs.t) -> intf_of_js __tags_of_js x6856
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6854 : __tags intf) -> intf_to_js __tags_to_js x6854
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x6858 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6858)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGB16F_EXT : 'tags this -> GLenum.t) =
      fun (x6860 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6860) "RGB16F_EXT")
    let (get_RGBA16F_EXT : 'tags this -> GLenum.t) =
      fun (x6862 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6862) "RGBA16F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x6864 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6864)
             "UNSIGNED_NORMALIZED_EXT")
    let (create :
      framebuffer_attachment_component_type_ext:GLenum.t ->
        rgb16f_ext:GLenum.t ->
          rgba16f_ext:GLenum.t ->
            unsigned_normalized_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_component_type_ext:(x6866 : GLenum.t) ->
        fun ~rgb16f_ext:(x6867 : GLenum.t) ->
          fun ~rgba16f_ext:(x6868 : GLenum.t) ->
            fun ~unsigned_normalized_ext:(x6869 : GLenum.t) ->
              fun () ->
                let x6870 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6870
                  "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
                  (GLenum.t_to_js x6866);
                Ojs.set_prop_ascii x6870 "RGB16F_EXT" (GLenum.t_to_js x6867);
                Ojs.set_prop_ascii x6870 "RGBA16F_EXT" (GLenum.t_to_js x6868);
                Ojs.set_prop_ascii x6870 "UNSIGNED_NORMALIZED_EXT"
                  (GLenum.t_to_js x6869);
                t_of_js x6870
    let cast_from = Obj.magic
  end
module EXT_color_buffer_float =
  struct
    type t = [ `EXT_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6872 : Ojs.t) -> t_of_js x6872
    and t_0_to_js : t_0 -> Ojs.t = fun (x6871 : t) -> t_to_js x6871
    type tags = [ `EXT_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6875 : Ojs.t) -> intf_of_js __tags_of_js x6875
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6873 : __tags intf) -> intf_to_js __tags_to_js x6873
    let cast_from = Obj.magic
  end
module EXT_blend_minmax =
  struct
    type t = [ `EXT_blend_minmax ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6878 : Ojs.t) -> t_of_js x6878
    and t_0_to_js : t_0 -> Ojs.t = fun (x6877 : t) -> t_to_js x6877
    type tags = [ `EXT_blend_minmax ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_blend_minmax ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6881 : Ojs.t) -> intf_of_js __tags_of_js x6881
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6879 : __tags intf) -> intf_to_js __tags_to_js x6879
    let (get_MAX_EXT : 'tags this -> GLenum.t) =
      fun (x6883 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6883) "MAX_EXT")
    let (get_MIN_EXT : 'tags this -> GLenum.t) =
      fun (x6885 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6885) "MIN_EXT")
    let (create : max_ext:GLenum.t -> min_ext:GLenum.t -> unit -> t) =
      fun ~max_ext:(x6887 : GLenum.t) ->
        fun ~min_ext:(x6888 : GLenum.t) ->
          fun () ->
            let x6889 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x6889 "MAX_EXT" (GLenum.t_to_js x6887);
            Ojs.set_prop_ascii x6889 "MIN_EXT" (GLenum.t_to_js x6888);
            t_of_js x6889
    let cast_from = Obj.magic
  end
module GLuint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6891 : Ojs.t) -> Ojs.float_of_js x6891
    and t_to_js : t -> Ojs.t = fun (x6890 : float) -> Ojs.float_to_js x6890
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6893 : Ojs.t) -> t_of_js x6893
    and t_0_to_js : t_0 -> Ojs.t = fun (x6892 : t) -> t_to_js x6892
  end
module ANGLE_instanced_arrays =
  struct
    type t = [ `ANGLE_instanced_arrays ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6895 : Ojs.t) -> t_of_js x6895
    and t_0_to_js : t_0 -> Ojs.t = fun (x6894 : t) -> t_to_js x6894
    type tags = [ `ANGLE_instanced_arrays ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ANGLE_instanced_arrays ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6898 : Ojs.t) -> intf_of_js __tags_of_js x6898
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6896 : __tags intf) -> intf_to_js __tags_to_js x6896
    let (drawArraysInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> primcount:GLsizei.t -> unit)
      =
      fun (x6904 : 'tags this) ->
        fun ~mode:(x6900 : GLenum.t) ->
          fun ~first:(x6901 : GLint.t) ->
            fun ~count:(x6902 : GLsizei.t) ->
              fun ~primcount:(x6903 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6904)
                     "drawArraysInstancedANGLE"
                     [|(GLenum.t_to_js x6900);(GLint.t_to_js x6901);(
                       GLsizei.t_to_js x6902);(GLsizei.t_to_js x6903)|])
    let (drawElementsInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> primcount:GLsizei.t -> unit)
      =
      fun (x6911 : 'tags this) ->
        fun ~mode:(x6906 : GLenum.t) ->
          fun ~count:(x6907 : GLsizei.t) ->
            fun ~type_:(x6908 : GLenum.t) ->
              fun ~offset:(x6909 : GLintptr.t) ->
                fun ~primcount:(x6910 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x6911)
                       "drawElementsInstancedANGLE"
                       [|(GLenum.t_to_js x6906);(GLsizei.t_to_js x6907);(
                         GLenum.t_to_js x6908);(GLintptr.t_to_js x6909);(
                         GLsizei.t_to_js x6910)|])
    let (vertexAttribDivisorANGLE :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x6915 : 'tags this) ->
        fun ~index:(x6913 : GLuint.t) ->
          fun ~divisor:(x6914 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6915)
                 "vertexAttribDivisorANGLE"
                 [|(GLuint.t_to_js x6913);(GLuint.t_to_js x6914)|])
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE : 'tags this -> GLenum.t) =
      fun (x6917 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6917)
             "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE")
    let cast_from = Obj.magic
  end
module WebGLRenderingContextBase =
  struct
    type t = [ `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6920 : Ojs.t) -> t_of_js x6920
    and t_0_to_js : t_0 -> Ojs.t = fun (x6919 : t) -> t_to_js x6919
    type tags = [ `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6923 : Ojs.t) -> intf_of_js __tags_of_js x6923
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6921 : __tags intf) -> intf_to_js __tags_to_js x6921
    let (vertexAttrib1fv :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6928 : 'tags this) ->
        fun ~index:(x6925 : GLuint.t) ->
          fun ~values:(x6926 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6928) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x6925);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x6926)|])
    let (vertexAttrib2fv :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6933 : 'tags this) ->
        fun ~index:(x6930 : GLuint.t) ->
          fun ~values:(x6931 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6933) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x6930);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x6931)|])
    let (vertexAttrib3fv :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6938 : 'tags this) ->
        fun ~index:(x6935 : GLuint.t) ->
          fun ~values:(x6936 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6938) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x6935);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x6936)|])
    let (vertexAttrib4fv :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6943 : 'tags this) ->
        fun ~index:(x6940 : GLuint.t) ->
          fun ~values:(x6941 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6943) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x6940);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x6941)|])
    let (get_drawingBufferHeight : 'tags this -> GLsizei.t) =
      fun (x6945 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6945)
             "drawingBufferHeight")
    let (get_drawingBufferWidth : 'tags this -> GLsizei.t) =
      fun (x6947 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6947)
             "drawingBufferWidth")
    let (activeTexture : 'tags this -> texture:GLenum.t -> unit) =
      fun (x6950 : 'tags this) ->
        fun ~texture:(x6949 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6950) "activeTexture"
               [|(GLenum.t_to_js x6949)|])
    let (attachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x6954 : 'tags this) ->
        fun ~program:(x6952 : WebGLProgram.t) ->
          fun ~shader:(x6953 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6954) "attachShader"
                 [|(WebGLProgram.t_to_js x6952);(WebGLShader.t_to_js x6953)|])
    let (bindAttribLocation :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> name:string -> unit)
      =
      fun (x6959 : 'tags this) ->
        fun ~program:(x6956 : WebGLProgram.t) ->
          fun ~index:(x6957 : GLuint.t) ->
            fun ~name:(x6958 : string) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6959) "bindAttribLocation"
                   [|(WebGLProgram.t_to_js x6956);(GLuint.t_to_js x6957);(
                     Ojs.string_to_js x6958)|])
    let (bindBuffer :
      'tags this -> target:GLenum.t -> buffer:WebGLBuffer.t option -> unit) =
      fun (x6964 : 'tags this) ->
        fun ~target:(x6961 : GLenum.t) ->
          fun ~buffer:(x6962 : WebGLBuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6964) "bindBuffer"
                 [|(GLenum.t_to_js x6961);(Ojs.option_to_js
                                             WebGLBuffer.t_to_js x6962)|])
    let (bindFramebuffer :
      'tags this ->
        target:GLenum.t -> framebuffer:WebGLFramebuffer.t option -> unit)
      =
      fun (x6969 : 'tags this) ->
        fun ~target:(x6966 : GLenum.t) ->
          fun ~framebuffer:(x6967 : WebGLFramebuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6969) "bindFramebuffer"
                 [|(GLenum.t_to_js x6966);(Ojs.option_to_js
                                             WebGLFramebuffer.t_to_js x6967)|])
    let (bindRenderbuffer :
      'tags this ->
        target:GLenum.t -> renderbuffer:WebGLRenderbuffer.t option -> unit)
      =
      fun (x6974 : 'tags this) ->
        fun ~target:(x6971 : GLenum.t) ->
          fun ~renderbuffer:(x6972 : WebGLRenderbuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6974) "bindRenderbuffer"
                 [|(GLenum.t_to_js x6971);(Ojs.option_to_js
                                             WebGLRenderbuffer.t_to_js x6972)|])
    let (bindTexture :
      'tags this -> target:GLenum.t -> texture:WebGLTexture.t option -> unit)
      =
      fun (x6979 : 'tags this) ->
        fun ~target:(x6976 : GLenum.t) ->
          fun ~texture:(x6977 : WebGLTexture.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6979) "bindTexture"
                 [|(GLenum.t_to_js x6976);(Ojs.option_to_js
                                             WebGLTexture.t_to_js x6977)|])
    let (blendColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x6985 : 'tags this) ->
        fun ~red:(x6981 : GLclampf.t) ->
          fun ~green:(x6982 : GLclampf.t) ->
            fun ~blue:(x6983 : GLclampf.t) ->
              fun ~alpha:(x6984 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6985) "blendColor"
                     [|(GLclampf.t_to_js x6981);(GLclampf.t_to_js x6982);(
                       GLclampf.t_to_js x6983);(GLclampf.t_to_js x6984)|])
    let (blendEquation : 'tags this -> mode:GLenum.t -> unit) =
      fun (x6988 : 'tags this) ->
        fun ~mode:(x6987 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6988) "blendEquation"
               [|(GLenum.t_to_js x6987)|])
    let (blendEquationSeparate :
      'tags this -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit) =
      fun (x6992 : 'tags this) ->
        fun ~modeRGB:(x6990 : GLenum.t) ->
          fun ~modeAlpha:(x6991 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6992) "blendEquationSeparate"
                 [|(GLenum.t_to_js x6990);(GLenum.t_to_js x6991)|])
    let (blendFunc :
      'tags this -> sfactor:GLenum.t -> dfactor:GLenum.t -> unit) =
      fun (x6996 : 'tags this) ->
        fun ~sfactor:(x6994 : GLenum.t) ->
          fun ~dfactor:(x6995 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6996) "blendFunc"
                 [|(GLenum.t_to_js x6994);(GLenum.t_to_js x6995)|])
    let (blendFuncSeparate :
      'tags this ->
        srcRGB:GLenum.t ->
          dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit)
      =
      fun (x7002 : 'tags this) ->
        fun ~srcRGB:(x6998 : GLenum.t) ->
          fun ~dstRGB:(x6999 : GLenum.t) ->
            fun ~srcAlpha:(x7000 : GLenum.t) ->
              fun ~dstAlpha:(x7001 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7002) "blendFuncSeparate"
                     [|(GLenum.t_to_js x6998);(GLenum.t_to_js x6999);(
                       GLenum.t_to_js x7000);(GLenum.t_to_js x7001)|])
    let (checkFramebufferStatus : 'tags this -> target:GLenum.t -> GLenum.t)
      =
      fun (x7005 : 'tags this) ->
        fun ~target:(x7004 : GLenum.t) ->
          GLenum.t_of_js
            (Ojs.call (this_to_js Obj.magic x7005) "checkFramebufferStatus"
               [|(GLenum.t_to_js x7004)|])
    let (clear : 'tags this -> mask:GLbitfield.t -> unit) =
      fun (x7008 : 'tags this) ->
        fun ~mask:(x7007 : GLbitfield.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7008) "clear"
               [|(GLbitfield.t_to_js x7007)|])
    let (clearColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x7014 : 'tags this) ->
        fun ~red:(x7010 : GLclampf.t) ->
          fun ~green:(x7011 : GLclampf.t) ->
            fun ~blue:(x7012 : GLclampf.t) ->
              fun ~alpha:(x7013 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7014) "clearColor"
                     [|(GLclampf.t_to_js x7010);(GLclampf.t_to_js x7011);(
                       GLclampf.t_to_js x7012);(GLclampf.t_to_js x7013)|])
    let (clearDepth : 'tags this -> depth:GLclampf.t -> unit) =
      fun (x7017 : 'tags this) ->
        fun ~depth:(x7016 : GLclampf.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7017) "clearDepth"
               [|(GLclampf.t_to_js x7016)|])
    let (clearStencil : 'tags this -> s:GLint.t -> unit) =
      fun (x7020 : 'tags this) ->
        fun ~s:(x7019 : GLint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7020) "clearStencil"
               [|(GLint.t_to_js x7019)|])
    let (colorMask :
      'tags this ->
        red:GLboolean.t ->
          green:GLboolean.t -> blue:GLboolean.t -> alpha:GLboolean.t -> unit)
      =
      fun (x7026 : 'tags this) ->
        fun ~red:(x7022 : GLboolean.t) ->
          fun ~green:(x7023 : GLboolean.t) ->
            fun ~blue:(x7024 : GLboolean.t) ->
              fun ~alpha:(x7025 : GLboolean.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7026) "colorMask"
                     [|(GLboolean.t_to_js x7022);(GLboolean.t_to_js x7023);(
                       GLboolean.t_to_js x7024);(GLboolean.t_to_js x7025)|])
    let (compileShader : 'tags this -> shader:WebGLShader.t -> unit) =
      fun (x7029 : 'tags this) ->
        fun ~shader:(x7028 : WebGLShader.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7029) "compileShader"
               [|(WebGLShader.t_to_js x7028)|])
    let (copyTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              x:GLint.t ->
                y:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t -> border:GLint.t -> unit)
      =
      fun (x7039 : 'tags this) ->
        fun ~target:(x7031 : GLenum.t) ->
          fun ~level:(x7032 : GLint.t) ->
            fun ~internalformat:(x7033 : GLenum.t) ->
              fun ~x:(x7034 : GLint.t) ->
                fun ~y:(x7035 : GLint.t) ->
                  fun ~width:(x7036 : GLsizei.t) ->
                    fun ~height:(x7037 : GLsizei.t) ->
                      fun ~border:(x7038 : GLint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x7039)
                             "copyTexImage2D"
                             [|(GLenum.t_to_js x7031);(GLint.t_to_js x7032);(
                               GLenum.t_to_js x7033);(GLint.t_to_js x7034);(
                               GLint.t_to_js x7035);(GLsizei.t_to_js x7036);(
                               GLsizei.t_to_js x7037);(GLint.t_to_js x7038)|])
    let (copyTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                x:GLint.t ->
                  y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7049 : 'tags this) ->
        fun ~target:(x7041 : GLenum.t) ->
          fun ~level:(x7042 : GLint.t) ->
            fun ~xoffset:(x7043 : GLint.t) ->
              fun ~yoffset:(x7044 : GLint.t) ->
                fun ~x:(x7045 : GLint.t) ->
                  fun ~y:(x7046 : GLint.t) ->
                    fun ~width:(x7047 : GLsizei.t) ->
                      fun ~height:(x7048 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x7049)
                             "copyTexSubImage2D"
                             [|(GLenum.t_to_js x7041);(GLint.t_to_js x7042);(
                               GLint.t_to_js x7043);(GLint.t_to_js x7044);(
                               GLint.t_to_js x7045);(GLint.t_to_js x7046);(
                               GLsizei.t_to_js x7047);(GLsizei.t_to_js x7048)|])
    let (createBuffer : 'tags this -> WebGLBuffer.t option) =
      fun (x7051 : 'tags this) ->
        Ojs.option_of_js WebGLBuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7051) "createBuffer" [||])
    let (createFramebuffer : 'tags this -> WebGLFramebuffer.t option) =
      fun (x7054 : 'tags this) ->
        Ojs.option_of_js WebGLFramebuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7054) "createFramebuffer" [||])
    let (createProgram : 'tags this -> WebGLProgram.t option) =
      fun (x7057 : 'tags this) ->
        Ojs.option_of_js WebGLProgram.t_of_js
          (Ojs.call (this_to_js Obj.magic x7057) "createProgram" [||])
    let (createRenderbuffer : 'tags this -> WebGLRenderbuffer.t option) =
      fun (x7060 : 'tags this) ->
        Ojs.option_of_js WebGLRenderbuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7060) "createRenderbuffer" [||])
    let (createShader : 'tags this -> type_:GLenum.t -> WebGLShader.t option)
      =
      fun (x7064 : 'tags this) ->
        fun ~type_:(x7063 : GLenum.t) ->
          Ojs.option_of_js WebGLShader.t_of_js
            (Ojs.call (this_to_js Obj.magic x7064) "createShader"
               [|(GLenum.t_to_js x7063)|])
    let (createTexture : 'tags this -> WebGLTexture.t option) =
      fun (x7067 : 'tags this) ->
        Ojs.option_of_js WebGLTexture.t_of_js
          (Ojs.call (this_to_js Obj.magic x7067) "createTexture" [||])
    let (cullFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7071 : 'tags this) ->
        fun ~mode:(x7070 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7071) "cullFace"
               [|(GLenum.t_to_js x7070)|])
    let (deleteBuffer : 'tags this -> buffer:WebGLBuffer.t option -> unit) =
      fun (x7075 : 'tags this) ->
        fun ~buffer:(x7073 : WebGLBuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7075) "deleteBuffer"
               [|(Ojs.option_to_js WebGLBuffer.t_to_js x7073)|])
    let (deleteFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t option -> unit) =
      fun (x7079 : 'tags this) ->
        fun ~framebuffer:(x7077 : WebGLFramebuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7079) "deleteFramebuffer"
               [|(Ojs.option_to_js WebGLFramebuffer.t_to_js x7077)|])
    let (deleteProgram : 'tags this -> program:WebGLProgram.t option -> unit)
      =
      fun (x7083 : 'tags this) ->
        fun ~program:(x7081 : WebGLProgram.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7083) "deleteProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7081)|])
    let (deleteRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t option -> unit) =
      fun (x7087 : 'tags this) ->
        fun ~renderbuffer:(x7085 : WebGLRenderbuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7087) "deleteRenderbuffer"
               [|(Ojs.option_to_js WebGLRenderbuffer.t_to_js x7085)|])
    let (deleteShader : 'tags this -> shader:WebGLShader.t option -> unit) =
      fun (x7091 : 'tags this) ->
        fun ~shader:(x7089 : WebGLShader.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7091) "deleteShader"
               [|(Ojs.option_to_js WebGLShader.t_to_js x7089)|])
    let (deleteTexture : 'tags this -> texture:WebGLTexture.t option -> unit)
      =
      fun (x7095 : 'tags this) ->
        fun ~texture:(x7093 : WebGLTexture.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7095) "deleteTexture"
               [|(Ojs.option_to_js WebGLTexture.t_to_js x7093)|])
    let (depthFunc : 'tags this -> func:GLenum.t -> unit) =
      fun (x7098 : 'tags this) ->
        fun ~func:(x7097 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7098) "depthFunc"
               [|(GLenum.t_to_js x7097)|])
    let (depthMask : 'tags this -> flag:GLboolean.t -> unit) =
      fun (x7101 : 'tags this) ->
        fun ~flag:(x7100 : GLboolean.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7101) "depthMask"
               [|(GLboolean.t_to_js x7100)|])
    let (depthRange :
      'tags this -> zNear:GLclampf.t -> zFar:GLclampf.t -> unit) =
      fun (x7105 : 'tags this) ->
        fun ~zNear:(x7103 : GLclampf.t) ->
          fun ~zFar:(x7104 : GLclampf.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7105) "depthRange"
                 [|(GLclampf.t_to_js x7103);(GLclampf.t_to_js x7104)|])
    let (detachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x7109 : 'tags this) ->
        fun ~program:(x7107 : WebGLProgram.t) ->
          fun ~shader:(x7108 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7109) "detachShader"
                 [|(WebGLProgram.t_to_js x7107);(WebGLShader.t_to_js x7108)|])
    let (disable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x7112 : 'tags this) ->
        fun ~cap:(x7111 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7112) "disable"
               [|(GLenum.t_to_js x7111)|])
    let (disableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x7115 : 'tags this) ->
        fun ~index:(x7114 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7115) "disableVertexAttribArray"
               [|(GLuint.t_to_js x7114)|])
    let (drawArrays :
      'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> unit)
      =
      fun (x7120 : 'tags this) ->
        fun ~mode:(x7117 : GLenum.t) ->
          fun ~first:(x7118 : GLint.t) ->
            fun ~count:(x7119 : GLsizei.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7120) "drawArrays"
                   [|(GLenum.t_to_js x7117);(GLint.t_to_js x7118);(GLsizei.t_to_js
                                                                    x7119)|])
    let (drawElements :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x7126 : 'tags this) ->
        fun ~mode:(x7122 : GLenum.t) ->
          fun ~count:(x7123 : GLsizei.t) ->
            fun ~type_:(x7124 : GLenum.t) ->
              fun ~offset:(x7125 : GLintptr.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7126) "drawElements"
                     [|(GLenum.t_to_js x7122);(GLsizei.t_to_js x7123);(
                       GLenum.t_to_js x7124);(GLintptr.t_to_js x7125)|])
    let (enable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x7129 : 'tags this) ->
        fun ~cap:(x7128 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7129) "enable"
               [|(GLenum.t_to_js x7128)|])
    let (enableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x7132 : 'tags this) ->
        fun ~index:(x7131 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7132) "enableVertexAttribArray"
               [|(GLuint.t_to_js x7131)|])
    let (finish : 'tags this -> unit) =
      fun (x7134 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7134) "finish" [||])
    let (flush : 'tags this -> unit) =
      fun (x7136 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7136) "flush" [||])
    let (framebufferRenderbuffer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            renderbuffertarget:GLenum.t ->
              renderbuffer:WebGLRenderbuffer.t option -> unit)
      =
      fun (x7143 : 'tags this) ->
        fun ~target:(x7138 : GLenum.t) ->
          fun ~attachment:(x7139 : GLenum.t) ->
            fun ~renderbuffertarget:(x7140 : GLenum.t) ->
              fun ~renderbuffer:(x7141 : WebGLRenderbuffer.t option) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7143)
                     "framebufferRenderbuffer"
                     [|(GLenum.t_to_js x7138);(GLenum.t_to_js x7139);(
                       GLenum.t_to_js x7140);(Ojs.option_to_js
                                                WebGLRenderbuffer.t_to_js
                                                x7141)|])
    let (framebufferTexture2D :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            textarget:GLenum.t ->
              texture:WebGLTexture.t option -> level:GLint.t -> unit)
      =
      fun (x7151 : 'tags this) ->
        fun ~target:(x7145 : GLenum.t) ->
          fun ~attachment:(x7146 : GLenum.t) ->
            fun ~textarget:(x7147 : GLenum.t) ->
              fun ~texture:(x7148 : WebGLTexture.t option) ->
                fun ~level:(x7150 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7151)
                       "framebufferTexture2D"
                       [|(GLenum.t_to_js x7145);(GLenum.t_to_js x7146);(
                         GLenum.t_to_js x7147);(Ojs.option_to_js
                                                  WebGLTexture.t_to_js x7148);(
                         GLint.t_to_js x7150)|])
    let (frontFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7154 : 'tags this) ->
        fun ~mode:(x7153 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7154) "frontFace"
               [|(GLenum.t_to_js x7153)|])
    let (generateMipmap : 'tags this -> target:GLenum.t -> unit) =
      fun (x7157 : 'tags this) ->
        fun ~target:(x7156 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7157) "generateMipmap"
               [|(GLenum.t_to_js x7156)|])
    let (getActiveAttrib :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x7161 : 'tags this) ->
        fun ~program:(x7159 : WebGLProgram.t) ->
          fun ~index:(x7160 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x7161) "getActiveAttrib"
                 [|(WebGLProgram.t_to_js x7159);(GLuint.t_to_js x7160)|])
    let (getActiveUniform :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x7166 : 'tags this) ->
        fun ~program:(x7164 : WebGLProgram.t) ->
          fun ~index:(x7165 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x7166) "getActiveUniform"
                 [|(WebGLProgram.t_to_js x7164);(GLuint.t_to_js x7165)|])
    let (getAttachedShaders :
      'tags this -> program:WebGLProgram.t -> WebGLShader.t list option) =
      fun (x7170 : 'tags this) ->
        fun ~program:(x7169 : WebGLProgram.t) ->
          Ojs.option_of_js
            (fun (x7172 : Ojs.t) -> Ojs.list_of_js WebGLShader.t_of_js x7172)
            (Ojs.call (this_to_js Obj.magic x7170) "getAttachedShaders"
               [|(WebGLProgram.t_to_js x7169)|])
    let (getAttribLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x7176 : 'tags this) ->
        fun ~program:(x7174 : WebGLProgram.t) ->
          fun ~name:(x7175 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x7176) "getAttribLocation"
                 [|(WebGLProgram.t_to_js x7174);(Ojs.string_to_js x7175)|])
    let (getBufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7180 : 'tags this) ->
        fun ~target:(x7178 : GLenum.t) ->
          fun ~pname:(x7179 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7180) "getBufferParameter"
                 [|(GLenum.t_to_js x7178);(GLenum.t_to_js x7179)|])
    let (getContextAttributes :
      'tags this -> WebGLContextAttributes.t option) =
      fun (x7182 : 'tags this) ->
        Ojs.option_of_js WebGLContextAttributes.t_of_js
          (Ojs.call (this_to_js Obj.magic x7182) "getContextAttributes" [||])
    let (getError : 'tags this -> GLenum.t) =
      fun (x7185 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.call (this_to_js Obj.magic x7185) "getError" [||])
    let (getExtension :
      'tags this ->
        extensionName:[ `L_s2_EXT_blend_minmax ] -> EXT_blend_minmax.t option)
      =
      fun (x7188 : 'tags this) ->
        fun ~extensionName:(x7187 : [ `L_s2_EXT_blend_minmax ]) ->
          Ojs.option_of_js EXT_blend_minmax.t_of_js
            (Ojs.call (this_to_js Obj.magic x7188) "getExtension"
               [|((match x7187 with
                   | `L_s2_EXT_blend_minmax ->
                       Ojs.string_to_js "EXT_blend_minmax"))|])
    let (getExtension' :
      'tags this ->
        extensionName:[ `L_s3_EXT_color_buffer_float ] ->
          EXT_color_buffer_float.t option)
      =
      fun (x7192 : 'tags this) ->
        fun ~extensionName:(x7191 : [ `L_s3_EXT_color_buffer_float ]) ->
          Ojs.option_of_js EXT_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7192) "getExtension"
               [|((match x7191 with
                   | `L_s3_EXT_color_buffer_float ->
                       Ojs.string_to_js "EXT_color_buffer_float"))|])
    let (getExtension'' :
      'tags this ->
        extensionName:[ `L_s4_EXT_color_buffer_half_float ] ->
          EXT_color_buffer_half_float.t option)
      =
      fun (x7196 : 'tags this) ->
        fun ~extensionName:(x7195 : [ `L_s4_EXT_color_buffer_half_float ]) ->
          Ojs.option_of_js EXT_color_buffer_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7196) "getExtension"
               [|((match x7195 with
                   | `L_s4_EXT_color_buffer_half_float ->
                       Ojs.string_to_js "EXT_color_buffer_half_float"))|])
    let (getExtension''' :
      'tags this ->
        extensionName:[ `L_s5_EXT_float_blend ] -> EXT_float_blend.t option)
      =
      fun (x7200 : 'tags this) ->
        fun ~extensionName:(x7199 : [ `L_s5_EXT_float_blend ]) ->
          Ojs.option_of_js EXT_float_blend.t_of_js
            (Ojs.call (this_to_js Obj.magic x7200) "getExtension"
               [|((match x7199 with
                   | `L_s5_EXT_float_blend ->
                       Ojs.string_to_js "EXT_float_blend"))|])
    let (getExtension'''' :
      'tags this ->
        extensionName:[ `L_s9_EXT_texture_filter_anisotropic ] ->
          EXT_texture_filter_anisotropic.t option)
      =
      fun (x7204 : 'tags this) ->
        fun ~extensionName:(x7203 : [ `L_s9_EXT_texture_filter_anisotropic ])
          ->
          Ojs.option_of_js EXT_texture_filter_anisotropic.t_of_js
            (Ojs.call (this_to_js Obj.magic x7204) "getExtension"
               [|((match x7203 with
                   | `L_s9_EXT_texture_filter_anisotropic ->
                       Ojs.string_to_js "EXT_texture_filter_anisotropic"))|])
    let (getExtension''''' :
      'tags this ->
        extensionName:[ `L_s6_EXT_frag_depth ] -> EXT_frag_depth.t option)
      =
      fun (x7208 : 'tags this) ->
        fun ~extensionName:(x7207 : [ `L_s6_EXT_frag_depth ]) ->
          Ojs.option_of_js EXT_frag_depth.t_of_js
            (Ojs.call (this_to_js Obj.magic x7208) "getExtension"
               [|((match x7207 with
                   | `L_s6_EXT_frag_depth ->
                       Ojs.string_to_js "EXT_frag_depth"))|])
    let (getExtension'''''' :
      'tags this ->
        extensionName:[ `L_s8_EXT_shader_texture_lod ] ->
          EXT_shader_texture_lod.t option)
      =
      fun (x7212 : 'tags this) ->
        fun ~extensionName:(x7211 : [ `L_s8_EXT_shader_texture_lod ]) ->
          Ojs.option_of_js EXT_shader_texture_lod.t_of_js
            (Ojs.call (this_to_js Obj.magic x7212) "getExtension"
               [|((match x7211 with
                   | `L_s8_EXT_shader_texture_lod ->
                       Ojs.string_to_js "EXT_shader_texture_lod"))|])
    let (getExtension''''''' :
      'tags this -> extensionName:[ `L_s7_EXT_sRGB ] -> EXT_sRGB.t option) =
      fun (x7216 : 'tags this) ->
        fun ~extensionName:(x7215 : [ `L_s7_EXT_sRGB ]) ->
          Ojs.option_of_js EXT_sRGB.t_of_js
            (Ojs.call (this_to_js Obj.magic x7216) "getExtension"
               [|((match x7215 with
                   | `L_s7_EXT_sRGB -> Ojs.string_to_js "EXT_sRGB"))|])
    let (getExtension'''''''' :
      'tags this ->
        extensionName:[ `L_s10_KHR_parallel_shader_compile ] ->
          KHR_parallel_shader_compile.t option)
      =
      fun (x7220 : 'tags this) ->
        fun ~extensionName:(x7219 : [ `L_s10_KHR_parallel_shader_compile ])
          ->
          Ojs.option_of_js KHR_parallel_shader_compile.t_of_js
            (Ojs.call (this_to_js Obj.magic x7220) "getExtension"
               [|((match x7219 with
                   | `L_s10_KHR_parallel_shader_compile ->
                       Ojs.string_to_js "KHR_parallel_shader_compile"))|])
    let (getExtension''''''''' :
      'tags this ->
        extensionName:[ `L_s17_OES_vertex_array_object ] ->
          OES_vertex_array_object.t option)
      =
      fun (x7224 : 'tags this) ->
        fun ~extensionName:(x7223 : [ `L_s17_OES_vertex_array_object ]) ->
          Ojs.option_of_js OES_vertex_array_object.t_of_js
            (Ojs.call (this_to_js Obj.magic x7224) "getExtension"
               [|((match x7223 with
                   | `L_s17_OES_vertex_array_object ->
                       Ojs.string_to_js "OES_vertex_array_object"))|])
    let (getExtension'''''''''' :
      'tags this ->
        extensionName:[ `L_s18_OVR_multiview2 ] -> OVR_multiview2.t option)
      =
      fun (x7228 : 'tags this) ->
        fun ~extensionName:(x7227 : [ `L_s18_OVR_multiview2 ]) ->
          Ojs.option_of_js OVR_multiview2.t_of_js
            (Ojs.call (this_to_js Obj.magic x7228) "getExtension"
               [|((match x7227 with
                   | `L_s18_OVR_multiview2 ->
                       Ojs.string_to_js "OVR_multiview2"))|])
    let (getExtension''''''''''' :
      'tags this ->
        extensionName:[ `L_s19_WEBGL_color_buffer_float ] ->
          WEBGL_color_buffer_float.t option)
      =
      fun (x7232 : 'tags this) ->
        fun ~extensionName:(x7231 : [ `L_s19_WEBGL_color_buffer_float ]) ->
          Ojs.option_of_js WEBGL_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7232) "getExtension"
               [|((match x7231 with
                   | `L_s19_WEBGL_color_buffer_float ->
                       Ojs.string_to_js "WEBGL_color_buffer_float"))|])
    let (getExtension'''''''''''' :
      'tags this ->
        extensionName:[ `L_s20_WEBGL_compressed_texture_astc ] ->
          WEBGL_compressed_texture_astc.t option)
      =
      fun (x7236 : 'tags this) ->
        fun ~extensionName:(x7235 : [ `L_s20_WEBGL_compressed_texture_astc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_astc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7236) "getExtension"
               [|((match x7235 with
                   | `L_s20_WEBGL_compressed_texture_astc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_astc"))|])
    let (getExtension''''''''''''' :
      'tags this ->
        extensionName:[ `L_s21_WEBGL_compressed_texture_etc ] ->
          WEBGL_compressed_texture_etc.t option)
      =
      fun (x7240 : 'tags this) ->
        fun ~extensionName:(x7239 : [ `L_s21_WEBGL_compressed_texture_etc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_etc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7240) "getExtension"
               [|((match x7239 with
                   | `L_s21_WEBGL_compressed_texture_etc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc"))|])
    let (getExtension'''''''''''''' :
      'tags this ->
        extensionName:[ `L_s22_WEBGL_compressed_texture_etc1 ] ->
          WEBGL_compressed_texture_etc1.t option)
      =
      fun (x7244 : 'tags this) ->
        fun ~extensionName:(x7243 : [ `L_s22_WEBGL_compressed_texture_etc1 ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_etc1.t_of_js
            (Ojs.call (this_to_js Obj.magic x7244) "getExtension"
               [|((match x7243 with
                   | `L_s22_WEBGL_compressed_texture_etc1 ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc1"))|])
    let (getExtension''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s23_WEBGL_compressed_texture_pvrtc ] ->
          WEBGL_compressed_texture_pvrtc.t option)
      =
      fun (x7248 : 'tags this) ->
        fun
          ~extensionName:(x7247 : [ `L_s23_WEBGL_compressed_texture_pvrtc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_pvrtc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7248) "getExtension"
               [|((match x7247 with
                   | `L_s23_WEBGL_compressed_texture_pvrtc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_pvrtc"))|])
    let (getExtension'''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s25_WEBGL_compressed_texture_s3tc_srgb ] ->
          WEBGL_compressed_texture_s3tc_srgb.t option)
      =
      fun (x7252 : 'tags this) ->
        fun
          ~extensionName:(x7251 :
                           [ `L_s25_WEBGL_compressed_texture_s3tc_srgb ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_s3tc_srgb.t_of_js
            (Ojs.call (this_to_js Obj.magic x7252) "getExtension"
               [|((match x7251 with
                   | `L_s25_WEBGL_compressed_texture_s3tc_srgb ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc_srgb"))|])
    let (getExtension''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s27_WEBGL_debug_shaders ] ->
          WEBGL_debug_shaders.t option)
      =
      fun (x7256 : 'tags this) ->
        fun ~extensionName:(x7255 : [ `L_s27_WEBGL_debug_shaders ]) ->
          Ojs.option_of_js WEBGL_debug_shaders.t_of_js
            (Ojs.call (this_to_js Obj.magic x7256) "getExtension"
               [|((match x7255 with
                   | `L_s27_WEBGL_debug_shaders ->
                       Ojs.string_to_js "WEBGL_debug_shaders"))|])
    let (getExtension'''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s29_WEBGL_draw_buffers ] ->
          WEBGL_draw_buffers.t option)
      =
      fun (x7260 : 'tags this) ->
        fun ~extensionName:(x7259 : [ `L_s29_WEBGL_draw_buffers ]) ->
          Ojs.option_of_js WEBGL_draw_buffers.t_of_js
            (Ojs.call (this_to_js Obj.magic x7260) "getExtension"
               [|((match x7259 with
                   | `L_s29_WEBGL_draw_buffers ->
                       Ojs.string_to_js "WEBGL_draw_buffers"))|])
    let (getExtension''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s30_WEBGL_lose_context ] ->
          WEBGL_lose_context.t option)
      =
      fun (x7264 : 'tags this) ->
        fun ~extensionName:(x7263 : [ `L_s30_WEBGL_lose_context ]) ->
          Ojs.option_of_js WEBGL_lose_context.t_of_js
            (Ojs.call (this_to_js Obj.magic x7264) "getExtension"
               [|((match x7263 with
                   | `L_s30_WEBGL_lose_context ->
                       Ojs.string_to_js "WEBGL_lose_context"))|])
    let (getExtension'''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s28_WEBGL_depth_texture ] ->
          WEBGL_depth_texture.t option)
      =
      fun (x7268 : 'tags this) ->
        fun ~extensionName:(x7267 : [ `L_s28_WEBGL_depth_texture ]) ->
          Ojs.option_of_js WEBGL_depth_texture.t_of_js
            (Ojs.call (this_to_js Obj.magic x7268) "getExtension"
               [|((match x7267 with
                   | `L_s28_WEBGL_depth_texture ->
                       Ojs.string_to_js "WEBGL_depth_texture"))|])
    let (getExtension''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s26_WEBGL_debug_renderer_info ] ->
          WEBGL_debug_renderer_info.t option)
      =
      fun (x7272 : 'tags this) ->
        fun ~extensionName:(x7271 : [ `L_s26_WEBGL_debug_renderer_info ]) ->
          Ojs.option_of_js WEBGL_debug_renderer_info.t_of_js
            (Ojs.call (this_to_js Obj.magic x7272) "getExtension"
               [|((match x7271 with
                   | `L_s26_WEBGL_debug_renderer_info ->
                       Ojs.string_to_js "WEBGL_debug_renderer_info"))|])
    let (getExtension'''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s24_WEBGL_compressed_texture_s3tc ] ->
          WEBGL_compressed_texture_s3tc.t option)
      =
      fun (x7276 : 'tags this) ->
        fun ~extensionName:(x7275 : [ `L_s24_WEBGL_compressed_texture_s3tc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_s3tc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7276) "getExtension"
               [|((match x7275 with
                   | `L_s24_WEBGL_compressed_texture_s3tc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc"))|])
    let (getExtension''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s16_OES_texture_half_float_linear ] ->
          OES_texture_half_float_linear.t option)
      =
      fun (x7280 : 'tags this) ->
        fun ~extensionName:(x7279 : [ `L_s16_OES_texture_half_float_linear ])
          ->
          Ojs.option_of_js OES_texture_half_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x7280) "getExtension"
               [|((match x7279 with
                   | `L_s16_OES_texture_half_float_linear ->
                       Ojs.string_to_js "OES_texture_half_float_linear"))|])
    let (getExtension'''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s15_OES_texture_half_float ] ->
          OES_texture_half_float.t option)
      =
      fun (x7284 : 'tags this) ->
        fun ~extensionName:(x7283 : [ `L_s15_OES_texture_half_float ]) ->
          Ojs.option_of_js OES_texture_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7284) "getExtension"
               [|((match x7283 with
                   | `L_s15_OES_texture_half_float ->
                       Ojs.string_to_js "OES_texture_half_float"))|])
    let (getExtension''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s14_OES_texture_float_linear ] ->
          OES_texture_float_linear.t option)
      =
      fun (x7288 : 'tags this) ->
        fun ~extensionName:(x7287 : [ `L_s14_OES_texture_float_linear ]) ->
          Ojs.option_of_js OES_texture_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x7288) "getExtension"
               [|((match x7287 with
                   | `L_s14_OES_texture_float_linear ->
                       Ojs.string_to_js "OES_texture_float_linear"))|])
    let (getExtension'''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s13_OES_texture_float ] ->
          OES_texture_float.t option)
      =
      fun (x7292 : 'tags this) ->
        fun ~extensionName:(x7291 : [ `L_s13_OES_texture_float ]) ->
          Ojs.option_of_js OES_texture_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7292) "getExtension"
               [|((match x7291 with
                   | `L_s13_OES_texture_float ->
                       Ojs.string_to_js "OES_texture_float"))|])
    let (getExtension''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s12_OES_standard_derivatives ] ->
          OES_standard_derivatives.t option)
      =
      fun (x7296 : 'tags this) ->
        fun ~extensionName:(x7295 : [ `L_s12_OES_standard_derivatives ]) ->
          Ojs.option_of_js OES_standard_derivatives.t_of_js
            (Ojs.call (this_to_js Obj.magic x7296) "getExtension"
               [|((match x7295 with
                   | `L_s12_OES_standard_derivatives ->
                       Ojs.string_to_js "OES_standard_derivatives"))|])
    let (getExtension'''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s11_OES_element_index_uint ] ->
          OES_element_index_uint.t option)
      =
      fun (x7300 : 'tags this) ->
        fun ~extensionName:(x7299 : [ `L_s11_OES_element_index_uint ]) ->
          Ojs.option_of_js OES_element_index_uint.t_of_js
            (Ojs.call (this_to_js Obj.magic x7300) "getExtension"
               [|((match x7299 with
                   | `L_s11_OES_element_index_uint ->
                       Ojs.string_to_js "OES_element_index_uint"))|])
    let (getExtension''''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s1_ANGLE_instanced_arrays ] ->
          ANGLE_instanced_arrays.t option)
      =
      fun (x7304 : 'tags this) ->
        fun ~extensionName:(x7303 : [ `L_s1_ANGLE_instanced_arrays ]) ->
          Ojs.option_of_js ANGLE_instanced_arrays.t_of_js
            (Ojs.call (this_to_js Obj.magic x7304) "getExtension"
               [|((match x7303 with
                   | `L_s1_ANGLE_instanced_arrays ->
                       Ojs.string_to_js "ANGLE_instanced_arrays"))|])
    let (getExtension'''''''''''''''''''''''''''''' :
      'tags this -> name:string -> any) =
      fun (x7308 : 'tags this) ->
        fun ~name:(x7307 : string) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x7308) "getExtension"
               [|(Ojs.string_to_js x7307)|])
    let (getFramebufferAttachmentParameter :
      'tags this ->
        target:GLenum.t -> attachment:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x7313 : 'tags this) ->
        fun ~target:(x7310 : GLenum.t) ->
          fun ~attachment:(x7311 : GLenum.t) ->
            fun ~pname:(x7312 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x7313)
                   "getFramebufferAttachmentParameter"
                   [|(GLenum.t_to_js x7310);(GLenum.t_to_js x7311);(GLenum.t_to_js
                                                                    x7312)|])
    let (getParameter : 'tags this -> pname:GLenum.t -> any) =
      fun (x7316 : 'tags this) ->
        fun ~pname:(x7315 : GLenum.t) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x7316) "getParameter"
               [|(GLenum.t_to_js x7315)|])
    let (getProgramInfoLog :
      'tags this -> program:WebGLProgram.t -> string option) =
      fun (x7319 : 'tags this) ->
        fun ~program:(x7318 : WebGLProgram.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7319) "getProgramInfoLog"
               [|(WebGLProgram.t_to_js x7318)|])
    let (getProgramParameter :
      'tags this -> program:WebGLProgram.t -> pname:GLenum.t -> any) =
      fun (x7324 : 'tags this) ->
        fun ~program:(x7322 : WebGLProgram.t) ->
          fun ~pname:(x7323 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7324) "getProgramParameter"
                 [|(WebGLProgram.t_to_js x7322);(GLenum.t_to_js x7323)|])
    let (getRenderbufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7328 : 'tags this) ->
        fun ~target:(x7326 : GLenum.t) ->
          fun ~pname:(x7327 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7328)
                 "getRenderbufferParameter"
                 [|(GLenum.t_to_js x7326);(GLenum.t_to_js x7327)|])
    let (getShaderInfoLog :
      'tags this -> shader:WebGLShader.t -> string option) =
      fun (x7331 : 'tags this) ->
        fun ~shader:(x7330 : WebGLShader.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7331) "getShaderInfoLog"
               [|(WebGLShader.t_to_js x7330)|])
    let (getShaderParameter :
      'tags this -> shader:WebGLShader.t -> pname:GLenum.t -> any) =
      fun (x7336 : 'tags this) ->
        fun ~shader:(x7334 : WebGLShader.t) ->
          fun ~pname:(x7335 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7336) "getShaderParameter"
                 [|(WebGLShader.t_to_js x7334);(GLenum.t_to_js x7335)|])
    let (getShaderPrecisionFormat :
      'tags this ->
        shadertype:GLenum.t ->
          precisiontype:GLenum.t -> WebGLShaderPrecisionFormat.t option)
      =
      fun (x7340 : 'tags this) ->
        fun ~shadertype:(x7338 : GLenum.t) ->
          fun ~precisiontype:(x7339 : GLenum.t) ->
            Ojs.option_of_js WebGLShaderPrecisionFormat.t_of_js
              (Ojs.call (this_to_js Obj.magic x7340)
                 "getShaderPrecisionFormat"
                 [|(GLenum.t_to_js x7338);(GLenum.t_to_js x7339)|])
    let (getShaderSource :
      'tags this -> shader:WebGLShader.t -> string option) =
      fun (x7344 : 'tags this) ->
        fun ~shader:(x7343 : WebGLShader.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7344) "getShaderSource"
               [|(WebGLShader.t_to_js x7343)|])
    let (getSupportedExtensions : 'tags this -> string list option) =
      fun (x7347 : 'tags this) ->
        Ojs.option_of_js
          (fun (x7349 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x7349)
          (Ojs.call (this_to_js Obj.magic x7347) "getSupportedExtensions"
             [||])
    let (getTexParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7353 : 'tags this) ->
        fun ~target:(x7351 : GLenum.t) ->
          fun ~pname:(x7352 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7353) "getTexParameter"
                 [|(GLenum.t_to_js x7351);(GLenum.t_to_js x7352)|])
    let (getUniform :
      'tags this ->
        program:WebGLProgram.t -> location:WebGLUniformLocation.t -> any)
      =
      fun (x7357 : 'tags this) ->
        fun ~program:(x7355 : WebGLProgram.t) ->
          fun ~location:(x7356 : WebGLUniformLocation.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7357) "getUniform"
                 [|(WebGLProgram.t_to_js x7355);(WebGLUniformLocation.t_to_js
                                                   x7356)|])
    let (getUniformLocation :
      'tags this ->
        program:WebGLProgram.t ->
          name:string -> WebGLUniformLocation.t option)
      =
      fun (x7361 : 'tags this) ->
        fun ~program:(x7359 : WebGLProgram.t) ->
          fun ~name:(x7360 : string) ->
            Ojs.option_of_js WebGLUniformLocation.t_of_js
              (Ojs.call (this_to_js Obj.magic x7361) "getUniformLocation"
                 [|(WebGLProgram.t_to_js x7359);(Ojs.string_to_js x7360)|])
    let (getVertexAttrib :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> any) =
      fun (x7366 : 'tags this) ->
        fun ~index:(x7364 : GLuint.t) ->
          fun ~pname:(x7365 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7366) "getVertexAttrib"
                 [|(GLuint.t_to_js x7364);(GLenum.t_to_js x7365)|])
    let (getVertexAttribOffset :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> GLintptr.t) =
      fun (x7370 : 'tags this) ->
        fun ~index:(x7368 : GLuint.t) ->
          fun ~pname:(x7369 : GLenum.t) ->
            GLintptr.t_of_js
              (Ojs.call (this_to_js Obj.magic x7370) "getVertexAttribOffset"
                 [|(GLuint.t_to_js x7368);(GLenum.t_to_js x7369)|])
    let (hint : 'tags this -> target:GLenum.t -> mode:GLenum.t -> unit) =
      fun (x7374 : 'tags this) ->
        fun ~target:(x7372 : GLenum.t) ->
          fun ~mode:(x7373 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7374) "hint"
                 [|(GLenum.t_to_js x7372);(GLenum.t_to_js x7373)|])
    let (isBuffer : 'tags this -> buffer:WebGLBuffer.t option -> GLboolean.t)
      =
      fun (x7378 : 'tags this) ->
        fun ~buffer:(x7376 : WebGLBuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7378) "isBuffer"
               [|(Ojs.option_to_js WebGLBuffer.t_to_js x7376)|])
    let (isContextLost : 'tags this -> bool) =
      fun (x7380 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x7380) "isContextLost" [||])
    let (isEnabled : 'tags this -> cap:GLenum.t -> GLboolean.t) =
      fun (x7383 : 'tags this) ->
        fun ~cap:(x7382 : GLenum.t) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7383) "isEnabled"
               [|(GLenum.t_to_js x7382)|])
    let (isFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t option -> GLboolean.t) =
      fun (x7387 : 'tags this) ->
        fun ~framebuffer:(x7385 : WebGLFramebuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7387) "isFramebuffer"
               [|(Ojs.option_to_js WebGLFramebuffer.t_to_js x7385)|])
    let (isProgram :
      'tags this -> program:WebGLProgram.t option -> GLboolean.t) =
      fun (x7391 : 'tags this) ->
        fun ~program:(x7389 : WebGLProgram.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7391) "isProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7389)|])
    let (isRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t option -> GLboolean.t) =
      fun (x7395 : 'tags this) ->
        fun ~renderbuffer:(x7393 : WebGLRenderbuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7395) "isRenderbuffer"
               [|(Ojs.option_to_js WebGLRenderbuffer.t_to_js x7393)|])
    let (isShader : 'tags this -> shader:WebGLShader.t option -> GLboolean.t)
      =
      fun (x7399 : 'tags this) ->
        fun ~shader:(x7397 : WebGLShader.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7399) "isShader"
               [|(Ojs.option_to_js WebGLShader.t_to_js x7397)|])
    let (isTexture :
      'tags this -> texture:WebGLTexture.t option -> GLboolean.t) =
      fun (x7403 : 'tags this) ->
        fun ~texture:(x7401 : WebGLTexture.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7403) "isTexture"
               [|(Ojs.option_to_js WebGLTexture.t_to_js x7401)|])
    let (lineWidth : 'tags this -> width:GLfloat.t -> unit) =
      fun (x7406 : 'tags this) ->
        fun ~width:(x7405 : GLfloat.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7406) "lineWidth"
               [|(GLfloat.t_to_js x7405)|])
    let (linkProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x7409 : 'tags this) ->
        fun ~program:(x7408 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7409) "linkProgram"
               [|(WebGLProgram.t_to_js x7408)|])
    let (pixelStorei :
      'tags this ->
        pname:GLenum.t ->
          param:[ `U1 of GLint.t  | `U2 of GLboolean.t ] -> unit)
      =
      fun (x7415 : 'tags this) ->
        fun ~pname:(x7411 : GLenum.t) ->
          fun ~param:(x7412 : [ `U1 of GLint.t  | `U2 of GLboolean.t ]) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7415) "pixelStorei"
                 [|(GLenum.t_to_js x7411);((match x7412 with
                                            | `U1 x7413 ->
                                                GLint.t_to_js x7413
                                            | `U2 x7414 ->
                                                GLboolean.t_to_js x7414))|])
    let (polygonOffset :
      'tags this -> factor:GLfloat.t -> units:GLfloat.t -> unit) =
      fun (x7419 : 'tags this) ->
        fun ~factor:(x7417 : GLfloat.t) ->
          fun ~units:(x7418 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7419) "polygonOffset"
                 [|(GLfloat.t_to_js x7417);(GLfloat.t_to_js x7418)|])
    let (renderbufferStorage :
      'tags this ->
        target:GLenum.t ->
          internalformat:GLenum.t ->
            width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7425 : 'tags this) ->
        fun ~target:(x7421 : GLenum.t) ->
          fun ~internalformat:(x7422 : GLenum.t) ->
            fun ~width:(x7423 : GLsizei.t) ->
              fun ~height:(x7424 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7425)
                     "renderbufferStorage"
                     [|(GLenum.t_to_js x7421);(GLenum.t_to_js x7422);(
                       GLsizei.t_to_js x7423);(GLsizei.t_to_js x7424)|])
    let (sampleCoverage :
      'tags this -> value:GLclampf.t -> invert:GLboolean.t -> unit) =
      fun (x7429 : 'tags this) ->
        fun ~value:(x7427 : GLclampf.t) ->
          fun ~invert:(x7428 : GLboolean.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7429) "sampleCoverage"
                 [|(GLclampf.t_to_js x7427);(GLboolean.t_to_js x7428)|])
    let (scissor :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7435 : 'tags this) ->
        fun ~x:(x7431 : GLint.t) ->
          fun ~y:(x7432 : GLint.t) ->
            fun ~width:(x7433 : GLsizei.t) ->
              fun ~height:(x7434 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7435) "scissor"
                     [|(GLint.t_to_js x7431);(GLint.t_to_js x7432);(GLsizei.t_to_js
                                                                    x7433);(
                       GLsizei.t_to_js x7434)|])
    let (shaderSource :
      'tags this -> shader:WebGLShader.t -> source:string -> unit) =
      fun (x7439 : 'tags this) ->
        fun ~shader:(x7437 : WebGLShader.t) ->
          fun ~source:(x7438 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7439) "shaderSource"
                 [|(WebGLShader.t_to_js x7437);(Ojs.string_to_js x7438)|])
    let (stencilFunc :
      'tags this -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit) =
      fun (x7444 : 'tags this) ->
        fun ~func:(x7441 : GLenum.t) ->
          fun ~ref:(x7442 : GLint.t) ->
            fun ~mask:(x7443 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7444) "stencilFunc"
                   [|(GLenum.t_to_js x7441);(GLint.t_to_js x7442);(GLuint.t_to_js
                                                                    x7443)|])
    let (stencilFuncSeparate :
      'tags this ->
        face:GLenum.t ->
          func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit)
      =
      fun (x7450 : 'tags this) ->
        fun ~face:(x7446 : GLenum.t) ->
          fun ~func:(x7447 : GLenum.t) ->
            fun ~ref:(x7448 : GLint.t) ->
              fun ~mask:(x7449 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7450)
                     "stencilFuncSeparate"
                     [|(GLenum.t_to_js x7446);(GLenum.t_to_js x7447);(
                       GLint.t_to_js x7448);(GLuint.t_to_js x7449)|])
    let (stencilMask : 'tags this -> mask:GLuint.t -> unit) =
      fun (x7453 : 'tags this) ->
        fun ~mask:(x7452 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7453) "stencilMask"
               [|(GLuint.t_to_js x7452)|])
    let (stencilMaskSeparate :
      'tags this -> face:GLenum.t -> mask:GLuint.t -> unit) =
      fun (x7457 : 'tags this) ->
        fun ~face:(x7455 : GLenum.t) ->
          fun ~mask:(x7456 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7457) "stencilMaskSeparate"
                 [|(GLenum.t_to_js x7455);(GLuint.t_to_js x7456)|])
    let (stencilOp :
      'tags this -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x7462 : 'tags this) ->
        fun ~fail:(x7459 : GLenum.t) ->
          fun ~zfail:(x7460 : GLenum.t) ->
            fun ~zpass:(x7461 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7462) "stencilOp"
                   [|(GLenum.t_to_js x7459);(GLenum.t_to_js x7460);(GLenum.t_to_js
                                                                    x7461)|])
    let (stencilOpSeparate :
      'tags this ->
        face:GLenum.t ->
          fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x7468 : 'tags this) ->
        fun ~face:(x7464 : GLenum.t) ->
          fun ~fail:(x7465 : GLenum.t) ->
            fun ~zfail:(x7466 : GLenum.t) ->
              fun ~zpass:(x7467 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7468) "stencilOpSeparate"
                     [|(GLenum.t_to_js x7464);(GLenum.t_to_js x7465);(
                       GLenum.t_to_js x7466);(GLenum.t_to_js x7467)|])
    let (texParameterf :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x7473 : 'tags this) ->
        fun ~target:(x7470 : GLenum.t) ->
          fun ~pname:(x7471 : GLenum.t) ->
            fun ~param:(x7472 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7473) "texParameterf"
                   [|(GLenum.t_to_js x7470);(GLenum.t_to_js x7471);(GLfloat.t_to_js
                                                                    x7472)|])
    let (texParameteri :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x7478 : 'tags this) ->
        fun ~target:(x7475 : GLenum.t) ->
          fun ~pname:(x7476 : GLenum.t) ->
            fun ~param:(x7477 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7478) "texParameteri"
                   [|(GLenum.t_to_js x7475);(GLenum.t_to_js x7476);(GLint.t_to_js
                                                                    x7477)|])
    let (uniform1f :
      'tags this ->
        location:WebGLUniformLocation.t option -> x:GLfloat.t -> unit)
      =
      fun (x7483 : 'tags this) ->
        fun ~location:(x7480 : WebGLUniformLocation.t option) ->
          fun ~x:(x7482 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7483) "uniform1f"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7480);(
                   GLfloat.t_to_js x7482)|])
    let (uniform1i :
      'tags this ->
        location:WebGLUniformLocation.t option -> x:GLint.t -> unit)
      =
      fun (x7488 : 'tags this) ->
        fun ~location:(x7485 : WebGLUniformLocation.t option) ->
          fun ~x:(x7487 : GLint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7488) "uniform1i"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7485);(
                   GLint.t_to_js x7487)|])
    let (uniform2f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> unit)
      =
      fun (x7494 : 'tags this) ->
        fun ~location:(x7490 : WebGLUniformLocation.t option) ->
          fun ~x:(x7492 : GLfloat.t) ->
            fun ~y:(x7493 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7494) "uniform2f"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7490);(
                     GLfloat.t_to_js x7492);(GLfloat.t_to_js x7493)|])
    let (uniform2i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> unit)
      =
      fun (x7500 : 'tags this) ->
        fun ~location:(x7496 : WebGLUniformLocation.t option) ->
          fun ~x:(x7498 : GLint.t) ->
            fun ~y:(x7499 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7500) "uniform2i"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7496);(
                     GLint.t_to_js x7498);(GLint.t_to_js x7499)|])
    let (uniform3f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x7507 : 'tags this) ->
        fun ~location:(x7502 : WebGLUniformLocation.t option) ->
          fun ~x:(x7504 : GLfloat.t) ->
            fun ~y:(x7505 : GLfloat.t) ->
              fun ~z:(x7506 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7507) "uniform3f"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7502);(
                       GLfloat.t_to_js x7504);(GLfloat.t_to_js x7505);(
                       GLfloat.t_to_js x7506)|])
    let (uniform3i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> unit)
      =
      fun (x7514 : 'tags this) ->
        fun ~location:(x7509 : WebGLUniformLocation.t option) ->
          fun ~x:(x7511 : GLint.t) ->
            fun ~y:(x7512 : GLint.t) ->
              fun ~z:(x7513 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7514) "uniform3i"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7509);(
                       GLint.t_to_js x7511);(GLint.t_to_js x7512);(GLint.t_to_js
                                                                    x7513)|])
    let (uniform4f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x7522 : 'tags this) ->
        fun ~location:(x7516 : WebGLUniformLocation.t option) ->
          fun ~x:(x7518 : GLfloat.t) ->
            fun ~y:(x7519 : GLfloat.t) ->
              fun ~z:(x7520 : GLfloat.t) ->
                fun ~w:(x7521 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7522) "uniform4f"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7516);(
                         GLfloat.t_to_js x7518);(GLfloat.t_to_js x7519);(
                         GLfloat.t_to_js x7520);(GLfloat.t_to_js x7521)|])
    let (uniform4i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x7530 : 'tags this) ->
        fun ~location:(x7524 : WebGLUniformLocation.t option) ->
          fun ~x:(x7526 : GLint.t) ->
            fun ~y:(x7527 : GLint.t) ->
              fun ~z:(x7528 : GLint.t) ->
                fun ~w:(x7529 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7530) "uniform4i"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7524);(
                         GLint.t_to_js x7526);(GLint.t_to_js x7527);(
                         GLint.t_to_js x7528);(GLint.t_to_js x7529)|])
    let (useProgram : 'tags this -> program:WebGLProgram.t option -> unit) =
      fun (x7534 : 'tags this) ->
        fun ~program:(x7532 : WebGLProgram.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7534) "useProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7532)|])
    let (validateProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x7537 : 'tags this) ->
        fun ~program:(x7536 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7537) "validateProgram"
               [|(WebGLProgram.t_to_js x7536)|])
    let (vertexAttrib1f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> unit) =
      fun (x7541 : 'tags this) ->
        fun ~index:(x7539 : GLuint.t) ->
          fun ~x:(x7540 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7541) "vertexAttrib1f"
                 [|(GLuint.t_to_js x7539);(GLfloat.t_to_js x7540)|])
    let (vertexAttrib1fv' :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7545 : 'tags this) ->
        fun ~index:(x7543 : GLuint.t) ->
          fun ~values:(x7544 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7545) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x7543);(Float32List.t_to_js x7544)|])
    let (vertexAttrib2f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> unit) =
      fun (x7550 : 'tags this) ->
        fun ~index:(x7547 : GLuint.t) ->
          fun ~x:(x7548 : GLfloat.t) ->
            fun ~y:(x7549 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7550) "vertexAttrib2f"
                   [|(GLuint.t_to_js x7547);(GLfloat.t_to_js x7548);(
                     GLfloat.t_to_js x7549)|])
    let (vertexAttrib2fv' :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7554 : 'tags this) ->
        fun ~index:(x7552 : GLuint.t) ->
          fun ~values:(x7553 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7554) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x7552);(Float32List.t_to_js x7553)|])
    let (vertexAttrib3f :
      'tags this ->
        index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x7560 : 'tags this) ->
        fun ~index:(x7556 : GLuint.t) ->
          fun ~x:(x7557 : GLfloat.t) ->
            fun ~y:(x7558 : GLfloat.t) ->
              fun ~z:(x7559 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7560) "vertexAttrib3f"
                     [|(GLuint.t_to_js x7556);(GLfloat.t_to_js x7557);(
                       GLfloat.t_to_js x7558);(GLfloat.t_to_js x7559)|])
    let (vertexAttrib3fv' :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7564 : 'tags this) ->
        fun ~index:(x7562 : GLuint.t) ->
          fun ~values:(x7563 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7564) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x7562);(Float32List.t_to_js x7563)|])
    let (vertexAttrib4f :
      'tags this ->
        index:GLuint.t ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x7571 : 'tags this) ->
        fun ~index:(x7566 : GLuint.t) ->
          fun ~x:(x7567 : GLfloat.t) ->
            fun ~y:(x7568 : GLfloat.t) ->
              fun ~z:(x7569 : GLfloat.t) ->
                fun ~w:(x7570 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7571) "vertexAttrib4f"
                       [|(GLuint.t_to_js x7566);(GLfloat.t_to_js x7567);(
                         GLfloat.t_to_js x7568);(GLfloat.t_to_js x7569);(
                         GLfloat.t_to_js x7570)|])
    let (vertexAttrib4fv' :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7575 : 'tags this) ->
        fun ~index:(x7573 : GLuint.t) ->
          fun ~values:(x7574 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7575) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x7573);(Float32List.t_to_js x7574)|])
    let (vertexAttribPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t ->
              normalized:GLboolean.t ->
                stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x7583 : 'tags this) ->
        fun ~index:(x7577 : GLuint.t) ->
          fun ~size:(x7578 : GLint.t) ->
            fun ~type_:(x7579 : GLenum.t) ->
              fun ~normalized:(x7580 : GLboolean.t) ->
                fun ~stride:(x7581 : GLsizei.t) ->
                  fun ~offset:(x7582 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x7583)
                         "vertexAttribPointer"
                         [|(GLuint.t_to_js x7577);(GLint.t_to_js x7578);(
                           GLenum.t_to_js x7579);(GLboolean.t_to_js x7580);(
                           GLsizei.t_to_js x7581);(GLintptr.t_to_js x7582)|])
    let (viewport :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7589 : 'tags this) ->
        fun ~x:(x7585 : GLint.t) ->
          fun ~y:(x7586 : GLint.t) ->
            fun ~width:(x7587 : GLsizei.t) ->
              fun ~height:(x7588 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7589) "viewport"
                     [|(GLint.t_to_js x7585);(GLint.t_to_js x7586);(GLsizei.t_to_js
                                                                    x7587);(
                       GLsizei.t_to_js x7588)|])
    let (get_ACTIVE_ATTRIBUTES : 'tags this -> GLenum.t) =
      fun (x7591 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7591)
             "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : 'tags this -> GLenum.t) =
      fun (x7593 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7593) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x7595 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7595) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : 'tags this -> GLenum.t) =
      fun (x7597 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7597)
             "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : 'tags this -> GLenum.t) =
      fun (x7599 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7599)
             "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : 'tags this -> GLenum.t) =
      fun (x7601 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7601) "ALPHA")
    let (get_ALPHA_BITS : 'tags this -> GLenum.t) =
      fun (x7603 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7603) "ALPHA_BITS")
    let (get_ALWAYS : 'tags this -> GLenum.t) =
      fun (x7605 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7605) "ALWAYS")
    let (get_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x7607 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7607) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7609 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7609)
             "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : 'tags this -> GLenum.t) =
      fun (x7611 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7611) "ATTACHED_SHADERS")
    let (get_BACK : 'tags this -> GLenum.t) =
      fun (x7613 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7613) "BACK")
    let (get_BLEND : 'tags this -> GLenum.t) =
      fun (x7615 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7615) "BLEND")
    let (get_BLEND_COLOR : 'tags this -> GLenum.t) =
      fun (x7617 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7617) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7619 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7619) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : 'tags this -> GLenum.t) =
      fun (x7621 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7621) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : 'tags this -> GLenum.t) =
      fun (x7623 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7623) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : 'tags this -> GLenum.t) =
      fun (x7625 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7625)
             "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : 'tags this -> GLenum.t) =
      fun (x7627 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7627)
             "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7629 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7629) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : 'tags this -> GLenum.t) =
      fun (x7631 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7631) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : 'tags this -> GLenum.t) =
      fun (x7633 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7633) "BLUE_BITS")
    let (get_BOOL : 'tags this -> GLenum.t) =
      fun (x7635 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7635) "BOOL")
    let (get_BOOL_VEC2 : 'tags this -> GLenum.t) =
      fun (x7637 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7637) "BOOL_VEC2")
    let (get_BOOL_VEC3 : 'tags this -> GLenum.t) =
      fun (x7639 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7639) "BOOL_VEC3")
    let (get_BOOL_VEC4 : 'tags this -> GLenum.t) =
      fun (x7641 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7641) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : 'tags this -> GLenum.t) =
      fun (x7643 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7643)
             "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x7645 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7645) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : 'tags this -> GLenum.t) =
      fun (x7647 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7647) "BUFFER_USAGE")
    let (get_BYTE : 'tags this -> GLenum.t) =
      fun (x7649 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7649) "BYTE")
    let (get_CCW : 'tags this -> GLenum.t) =
      fun (x7651 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7651) "CCW")
    let (get_CLAMP_TO_EDGE : 'tags this -> GLenum.t) =
      fun (x7653 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7653) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : 'tags this -> GLenum.t) =
      fun (x7655 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7655)
             "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x7657 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7657) "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x7659 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7659)
             "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7661 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7661) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : 'tags this -> GLenum.t) =
      fun (x7663 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7663) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : 'tags this -> GLenum.t) =
      fun (x7665 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7665)
             "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x7667 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7667) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x7669 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7669) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : 'tags this -> GLenum.t) =
      fun (x7671 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7671)
             "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : 'tags this -> GLenum.t) =
      fun (x7673 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7673) "CULL_FACE")
    let (get_CULL_FACE_MODE : 'tags this -> GLenum.t) =
      fun (x7675 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7675) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : 'tags this -> GLenum.t) =
      fun (x7677 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7677) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : 'tags this -> GLenum.t) =
      fun (x7679 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7679)
             "CURRENT_VERTEX_ATTRIB")
    let (get_CW : 'tags this -> GLenum.t) =
      fun (x7681 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x7681) "CW")
    let (get_DECR : 'tags this -> GLenum.t) =
      fun (x7683 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7683) "DECR")
    let (get_DECR_WRAP : 'tags this -> GLenum.t) =
      fun (x7685 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7685) "DECR_WRAP")
    let (get_DELETE_STATUS : 'tags this -> GLenum.t) =
      fun (x7687 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7687) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7689 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7689) "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : 'tags this -> GLenum.t) =
      fun (x7691 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7691) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x7693 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7693) "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x7695 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7695)
             "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : 'tags this -> GLenum.t) =
      fun (x7697 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7697) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : 'tags this -> GLenum.t) =
      fun (x7699 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7699)
             "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : 'tags this -> GLenum.t) =
      fun (x7701 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7701) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : 'tags this -> GLenum.t) =
      fun (x7703 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7703) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : 'tags this -> GLenum.t) =
      fun (x7705 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7705) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7707 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7707)
             "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : 'tags this -> GLenum.t) =
      fun (x7709 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7709) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7711 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7711) "DEPTH_WRITEMASK")
    let (get_DITHER : 'tags this -> GLenum.t) =
      fun (x7713 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7713) "DITHER")
    let (get_DONT_CARE : 'tags this -> GLenum.t) =
      fun (x7715 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7715) "DONT_CARE")
    let (get_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7717 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7717) "DST_ALPHA")
    let (get_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x7719 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7719) "DST_COLOR")
    let (get_DYNAMIC_DRAW : 'tags this -> GLenum.t) =
      fun (x7721 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7721) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x7723 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7723)
             "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7725 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7725)
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : 'tags this -> GLenum.t) =
      fun (x7727 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7727) "EQUAL")
    let (get_FASTEST : 'tags this -> GLenum.t) =
      fun (x7729 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7729) "FASTEST")
    let (get_FLOAT : 'tags this -> GLenum.t) =
      fun (x7731 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7731) "FLOAT")
    let (get_FLOAT_MAT2 : 'tags this -> GLenum.t) =
      fun (x7733 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7733) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : 'tags this -> GLenum.t) =
      fun (x7735 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7735) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : 'tags this -> GLenum.t) =
      fun (x7737 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7737) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : 'tags this -> GLenum.t) =
      fun (x7739 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7739) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : 'tags this -> GLenum.t) =
      fun (x7741 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7741) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : 'tags this -> GLenum.t) =
      fun (x7743 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7743) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : 'tags this -> GLenum.t) =
      fun (x7745 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7745) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x7747 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7747) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : 'tags this -> GLenum.t) =
      fun (x7749 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7749)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x7751 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7751)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :
      'tags this -> GLenum.t) =
      fun (x7753 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7753)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : 'tags this -> GLenum.t) =
      fun (x7755 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7755)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7757 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7757)
             "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : 'tags this -> GLenum.t) =
      fun (x7759 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7759)
             "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7761 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7761)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : 'tags this -> GLenum.t) =
      fun (x7763 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7763)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
      'tags this -> GLenum.t) =
      fun (x7765 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7765)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : 'tags this -> GLenum.t) =
      fun (x7767 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7767)
             "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : 'tags this -> GLenum.t) =
      fun (x7769 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7769) "FRONT")
    let (get_FRONT_AND_BACK : 'tags this -> GLenum.t) =
      fun (x7771 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7771) "FRONT_AND_BACK")
    let (get_FRONT_FACE : 'tags this -> GLenum.t) =
      fun (x7773 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7773) "FRONT_FACE")
    let (get_FUNC_ADD : 'tags this -> GLenum.t) =
      fun (x7775 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7775) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x7777 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7777)
             "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x7779 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7779) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : 'tags this -> GLenum.t) =
      fun (x7781 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7781)
             "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : 'tags this -> GLenum.t) =
      fun (x7783 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7783) "GEQUAL")
    let (get_GREATER : 'tags this -> GLenum.t) =
      fun (x7785 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7785) "GREATER")
    let (get_GREEN_BITS : 'tags this -> GLenum.t) =
      fun (x7787 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7787) "GREEN_BITS")
    let (get_HIGH_FLOAT : 'tags this -> GLenum.t) =
      fun (x7789 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7789) "HIGH_FLOAT")
    let (get_HIGH_INT : 'tags this -> GLenum.t) =
      fun (x7791 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7791) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : 'tags this -> GLenum.t) =
      fun (x7793 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7793)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : 'tags this -> GLenum.t) =
      fun (x7795 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7795)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : 'tags this -> GLenum.t) =
      fun (x7797 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7797) "INCR")
    let (get_INCR_WRAP : 'tags this -> GLenum.t) =
      fun (x7799 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7799) "INCR_WRAP")
    let (get_INT : 'tags this -> GLenum.t) =
      fun (x7801 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7801) "INT")
    let (get_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x7803 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7803) "INT_VEC2")
    let (get_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x7805 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7805) "INT_VEC3")
    let (get_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x7807 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7807) "INT_VEC4")
    let (get_INVALID_ENUM : 'tags this -> GLenum.t) =
      fun (x7809 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7809) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : 'tags this -> GLenum.t) =
      fun (x7811 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7811)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : 'tags this -> GLenum.t) =
      fun (x7813 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7813)
             "INVALID_OPERATION")
    let (get_INVALID_VALUE : 'tags this -> GLenum.t) =
      fun (x7815 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7815) "INVALID_VALUE")
    let (get_INVERT : 'tags this -> GLenum.t) =
      fun (x7817 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7817) "INVERT")
    let (get_KEEP : 'tags this -> GLenum.t) =
      fun (x7819 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7819) "KEEP")
    let (get_LEQUAL : 'tags this -> GLenum.t) =
      fun (x7821 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7821) "LEQUAL")
    let (get_LESS : 'tags this -> GLenum.t) =
      fun (x7823 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7823) "LESS")
    let (get_LINEAR : 'tags this -> GLenum.t) =
      fun (x7825 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7825) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x7827 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7827)
             "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x7829 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7829)
             "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : 'tags this -> GLenum.t) =
      fun (x7831 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7831) "LINES")
    let (get_LINE_LOOP : 'tags this -> GLenum.t) =
      fun (x7833 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7833) "LINE_LOOP")
    let (get_LINE_STRIP : 'tags this -> GLenum.t) =
      fun (x7835 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7835) "LINE_STRIP")
    let (get_LINE_WIDTH : 'tags this -> GLenum.t) =
      fun (x7837 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7837) "LINE_WIDTH")
    let (get_LINK_STATUS : 'tags this -> GLenum.t) =
      fun (x7839 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7839) "LINK_STATUS")
    let (get_LOW_FLOAT : 'tags this -> GLenum.t) =
      fun (x7841 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7841) "LOW_FLOAT")
    let (get_LOW_INT : 'tags this -> GLenum.t) =
      fun (x7843 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7843) "LOW_INT")
    let (get_LUMINANCE : 'tags this -> GLenum.t) =
      fun (x7845 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7845) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : 'tags this -> GLenum.t) =
      fun (x7847 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7847) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7849 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7849)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x7851 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7851)
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x7853 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7853)
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x7855 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7855)
             "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7857 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7857)
             "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x7859 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7859) "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : 'tags this -> GLenum.t) =
      fun (x7861 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7861)
             "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x7863 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7863)
             "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7865 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7865)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x7867 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7867)
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : 'tags this -> GLenum.t) =
      fun (x7869 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7869)
             "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : 'tags this -> GLenum.t) =
      fun (x7871 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7871) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : 'tags this -> GLenum.t) =
      fun (x7873 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7873) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : 'tags this -> GLenum.t) =
      fun (x7875 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7875) "MIRRORED_REPEAT")
    let (get_NEAREST : 'tags this -> GLenum.t) =
      fun (x7877 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7877) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x7879 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7879)
             "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x7881 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7881)
             "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : 'tags this -> GLenum.t) =
      fun (x7883 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7883) "NEVER")
    let (get_NICEST : 'tags this -> GLenum.t) =
      fun (x7885 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7885) "NICEST")
    let (get_NONE : 'tags this -> GLenum.t) =
      fun (x7887 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7887) "NONE")
    let (get_NOTEQUAL : 'tags this -> GLenum.t) =
      fun (x7889 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7889) "NOTEQUAL")
    let (get_NO_ERROR : 'tags this -> GLenum.t) =
      fun (x7891 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7891) "NO_ERROR")
    let (get_ONE : 'tags this -> GLenum.t) =
      fun (x7893 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7893) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x7895 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7895)
             "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x7897 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7897)
             "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7899 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7899)
             "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x7901 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7901)
             "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7903 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7903)
             "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x7905 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7905)
             "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : 'tags this -> GLenum.t) =
      fun (x7907 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7907) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x7909 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7909) "PACK_ALIGNMENT")
    let (get_POINTS : 'tags this -> GLenum.t) =
      fun (x7911 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7911) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : 'tags this -> GLenum.t) =
      fun (x7913 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7913)
             "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : 'tags this -> GLenum.t) =
      fun (x7915 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7915)
             "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : 'tags this -> GLenum.t) =
      fun (x7917 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7917)
             "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : 'tags this -> GLenum.t) =
      fun (x7919 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7919) "RED_BITS")
    let (get_RENDERBUFFER : 'tags this -> GLenum.t) =
      fun (x7921 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7921) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x7923 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7923)
             "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7925 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7925)
             "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x7927 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7927)
             "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x7929 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7929)
             "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x7931 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7931)
             "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : 'tags this -> GLenum.t) =
      fun (x7933 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7933)
             "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : 'tags this -> GLenum.t) =
      fun (x7935 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7935)
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x7937 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7937)
             "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x7939 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7939)
             "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : 'tags this -> GLenum.t) =
      fun (x7941 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7941)
             "RENDERBUFFER_WIDTH")
    let (get_RENDERER : 'tags this -> GLenum.t) =
      fun (x7943 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7943) "RENDERER")
    let (get_REPEAT : 'tags this -> GLenum.t) =
      fun (x7945 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7945) "REPEAT")
    let (get_REPLACE : 'tags this -> GLenum.t) =
      fun (x7947 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7947) "REPLACE")
    let (get_RGB : 'tags this -> GLenum.t) =
      fun (x7949 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7949) "RGB")
    let (get_RGB565 : 'tags this -> GLenum.t) =
      fun (x7951 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7951) "RGB565")
    let (get_RGB5_A1 : 'tags this -> GLenum.t) =
      fun (x7953 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7953) "RGB5_A1")
    let (get_RGBA : 'tags this -> GLenum.t) =
      fun (x7955 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7955) "RGBA")
    let (get_RGBA4 : 'tags this -> GLenum.t) =
      fun (x7957 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7957) "RGBA4")
    let (get_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x7959 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7959) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x7961 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7961) "SAMPLER_CUBE")
    let (get_SAMPLES : 'tags this -> GLenum.t) =
      fun (x7963 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7963) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : 'tags this -> GLenum.t) =
      fun (x7965 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7965)
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : 'tags this -> GLenum.t) =
      fun (x7967 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7967) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : 'tags this -> GLenum.t) =
      fun (x7969 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7969) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : 'tags this -> GLenum.t) =
      fun (x7971 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7971)
             "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : 'tags this -> GLenum.t) =
      fun (x7973 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7973)
             "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : 'tags this -> GLenum.t) =
      fun (x7975 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7975) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : 'tags this -> GLenum.t) =
      fun (x7977 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7977) "SCISSOR_TEST")
    let (get_SHADER_TYPE : 'tags this -> GLenum.t) =
      fun (x7979 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7979) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : 'tags this -> GLenum.t) =
      fun (x7981 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7981)
             "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : 'tags this -> GLenum.t) =
      fun (x7983 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7983) "SHORT")
    let (get_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7985 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7985) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : 'tags this -> GLenum.t) =
      fun (x7987 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7987)
             "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x7989 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7989) "SRC_COLOR")
    let (get_STATIC_DRAW : 'tags this -> GLenum.t) =
      fun (x7991 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7991) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7993 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7993)
             "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : 'tags this -> GLenum.t) =
      fun (x7995 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7995)
             "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : 'tags this -> GLenum.t) =
      fun (x7997 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7997)
             "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x7999 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7999)
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x8001 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8001)
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : 'tags this -> GLenum.t) =
      fun (x8003 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8003) "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x8005 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8005)
             "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8007 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8007)
             "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : 'tags this -> GLenum.t) =
      fun (x8009 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8009) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x8011 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8011)
             "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x8013 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8013)
             "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : 'tags this -> GLenum.t) =
      fun (x8015 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8015) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : 'tags this -> GLenum.t) =
      fun (x8017 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8017) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : 'tags this -> GLenum.t) =
      fun (x8019 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8019) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x8021 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8021)
             "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x8023 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8023)
             "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : 'tags this -> GLenum.t) =
      fun (x8025 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8025) "STENCIL_REF")
    let (get_STENCIL_TEST : 'tags this -> GLenum.t) =
      fun (x8027 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8027) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x8029 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8029)
             "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8031 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8031)
             "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : 'tags this -> GLenum.t) =
      fun (x8033 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8033) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : 'tags this -> GLenum.t) =
      fun (x8035 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8035) "SUBPIXEL_BITS")
    let (get_TEXTURE : 'tags this -> GLenum.t) =
      fun (x8037 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8037) "TEXTURE")
    let (get_TEXTURE0 : 'tags this -> GLenum.t) =
      fun (x8039 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8039) "TEXTURE0")
    let (get_TEXTURE1 : 'tags this -> GLenum.t) =
      fun (x8041 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8041) "TEXTURE1")
    let (get_TEXTURE10 : 'tags this -> GLenum.t) =
      fun (x8043 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8043) "TEXTURE10")
    let (get_TEXTURE11 : 'tags this -> GLenum.t) =
      fun (x8045 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8045) "TEXTURE11")
    let (get_TEXTURE12 : 'tags this -> GLenum.t) =
      fun (x8047 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8047) "TEXTURE12")
    let (get_TEXTURE13 : 'tags this -> GLenum.t) =
      fun (x8049 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8049) "TEXTURE13")
    let (get_TEXTURE14 : 'tags this -> GLenum.t) =
      fun (x8051 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8051) "TEXTURE14")
    let (get_TEXTURE15 : 'tags this -> GLenum.t) =
      fun (x8053 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8053) "TEXTURE15")
    let (get_TEXTURE16 : 'tags this -> GLenum.t) =
      fun (x8055 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8055) "TEXTURE16")
    let (get_TEXTURE17 : 'tags this -> GLenum.t) =
      fun (x8057 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8057) "TEXTURE17")
    let (get_TEXTURE18 : 'tags this -> GLenum.t) =
      fun (x8059 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8059) "TEXTURE18")
    let (get_TEXTURE19 : 'tags this -> GLenum.t) =
      fun (x8061 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8061) "TEXTURE19")
    let (get_TEXTURE2 : 'tags this -> GLenum.t) =
      fun (x8063 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8063) "TEXTURE2")
    let (get_TEXTURE20 : 'tags this -> GLenum.t) =
      fun (x8065 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8065) "TEXTURE20")
    let (get_TEXTURE21 : 'tags this -> GLenum.t) =
      fun (x8067 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8067) "TEXTURE21")
    let (get_TEXTURE22 : 'tags this -> GLenum.t) =
      fun (x8069 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8069) "TEXTURE22")
    let (get_TEXTURE23 : 'tags this -> GLenum.t) =
      fun (x8071 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8071) "TEXTURE23")
    let (get_TEXTURE24 : 'tags this -> GLenum.t) =
      fun (x8073 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8073) "TEXTURE24")
    let (get_TEXTURE25 : 'tags this -> GLenum.t) =
      fun (x8075 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8075) "TEXTURE25")
    let (get_TEXTURE26 : 'tags this -> GLenum.t) =
      fun (x8077 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8077) "TEXTURE26")
    let (get_TEXTURE27 : 'tags this -> GLenum.t) =
      fun (x8079 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8079) "TEXTURE27")
    let (get_TEXTURE28 : 'tags this -> GLenum.t) =
      fun (x8081 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8081) "TEXTURE28")
    let (get_TEXTURE29 : 'tags this -> GLenum.t) =
      fun (x8083 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8083) "TEXTURE29")
    let (get_TEXTURE3 : 'tags this -> GLenum.t) =
      fun (x8085 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8085) "TEXTURE3")
    let (get_TEXTURE30 : 'tags this -> GLenum.t) =
      fun (x8087 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8087) "TEXTURE30")
    let (get_TEXTURE31 : 'tags this -> GLenum.t) =
      fun (x8089 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8089) "TEXTURE31")
    let (get_TEXTURE4 : 'tags this -> GLenum.t) =
      fun (x8091 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8091) "TEXTURE4")
    let (get_TEXTURE5 : 'tags this -> GLenum.t) =
      fun (x8093 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8093) "TEXTURE5")
    let (get_TEXTURE6 : 'tags this -> GLenum.t) =
      fun (x8095 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8095) "TEXTURE6")
    let (get_TEXTURE7 : 'tags this -> GLenum.t) =
      fun (x8097 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8097) "TEXTURE7")
    let (get_TEXTURE8 : 'tags this -> GLenum.t) =
      fun (x8099 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8099) "TEXTURE8")
    let (get_TEXTURE9 : 'tags this -> GLenum.t) =
      fun (x8101 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8101) "TEXTURE9")
    let (get_TEXTURE_2D : 'tags this -> GLenum.t) =
      fun (x8103 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8103) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : 'tags this -> GLenum.t) =
      fun (x8105 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8105)
             "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x8107 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8107)
             "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x8109 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8109) "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : 'tags this -> GLenum.t) =
      fun (x8111 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8111)
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : 'tags this -> GLenum.t) =
      fun (x8113 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8113)
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : 'tags this -> GLenum.t) =
      fun (x8115 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8115)
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : 'tags this -> GLenum.t) =
      fun (x8117 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8117)
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : 'tags this -> GLenum.t) =
      fun (x8119 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8119)
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : 'tags this -> GLenum.t) =
      fun (x8121 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8121)
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : 'tags this -> GLenum.t) =
      fun (x8123 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8123)
             "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : 'tags this -> GLenum.t) =
      fun (x8125 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8125)
             "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : 'tags this -> GLenum.t) =
      fun (x8127 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8127) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : 'tags this -> GLenum.t) =
      fun (x8129 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8129) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : 'tags this -> GLenum.t) =
      fun (x8131 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8131) "TRIANGLES")
    let (get_TRIANGLE_FAN : 'tags this -> GLenum.t) =
      fun (x8133 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8133) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : 'tags this -> GLenum.t) =
      fun (x8135 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8135) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x8137 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8137) "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : 'tags this -> GLenum.t) =
      fun (x8139 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8139)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : 'tags this -> GLenum.t) =
      fun (x8141 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8141)
             "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : 'tags this -> GLenum.t) =
      fun (x8143 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8143)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : 'tags this -> GLenum.t) =
      fun (x8145 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8145) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : 'tags this -> GLenum.t) =
      fun (x8147 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8147) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : 'tags this -> GLenum.t) =
      fun (x8149 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8149) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : 'tags this -> GLenum.t) =
      fun (x8151 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8151)
             "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : 'tags this -> GLenum.t) =
      fun (x8153 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8153)
             "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : 'tags this -> GLenum.t) =
      fun (x8155 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8155)
             "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : 'tags this -> GLenum.t) =
      fun (x8157 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8157) "VALIDATE_STATUS")
    let (get_VENDOR : 'tags this -> GLenum.t) =
      fun (x8159 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8159) "VENDOR")
    let (get_VERSION : 'tags this -> GLenum.t) =
      fun (x8161 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8161) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8163 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8163)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : 'tags this -> GLenum.t) =
      fun (x8165 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8165)
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x8167 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8167)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : 'tags this -> GLenum.t) =
      fun (x8169 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8169)
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : 'tags this -> GLenum.t) =
      fun (x8171 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8171)
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x8173 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8173)
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : 'tags this -> GLenum.t) =
      fun (x8175 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8175)
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : 'tags this -> GLenum.t) =
      fun (x8177 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8177) "VERTEX_SHADER")
    let (get_VIEWPORT : 'tags this -> GLenum.t) =
      fun (x8179 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8179) "VIEWPORT")
    let (get_ZERO : 'tags this -> GLenum.t) =
      fun (x8181 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8181) "ZERO")
    let cast_from = Obj.magic
  end
module WebGLRenderingContext =
  struct
    type t =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8184 : Ojs.t) -> t_of_js x8184
    and t_0_to_js : t_0 -> Ojs.t = fun (x8183 : t) -> t_to_js x8183
    type tags =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8187 : Ojs.t) -> intf_of_js __tags_of_js x8187
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8185 : __tags intf) -> intf_to_js __tags_to_js x8185
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") 
             [||])
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ZERO")
  end
module WebGLContextEventInit =
  struct
    type t = [ `EventInit  | `WebGLContextEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8190 : Ojs.t) -> t_of_js x8190
    and t_0_to_js : t_0 -> Ojs.t = fun (x8189 : t) -> t_to_js x8189
    type tags = [ `EventInit  | `WebGLContextEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8193 : Ojs.t) -> intf_of_js __tags_of_js x8193
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8191 : __tags intf) -> intf_to_js __tags_to_js x8191
    let (get_statusMessage : 'tags this -> string) =
      fun (x8195 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8195) "statusMessage")
    let (set_statusMessage : 'tags this -> string -> unit) =
      fun (x8197 : 'tags this) ->
        fun (x8198 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8197) "statusMessage"
            (Ojs.string_to_js x8198)
    let (create : statusMessage:string -> unit -> t) =
      fun ~statusMessage:(x8200 : string) ->
        fun () ->
          let x8201 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x8201 "statusMessage" (Ojs.string_to_js x8200);
          t_of_js x8201
    let cast_from = Obj.magic
  end
module WebGLContextEvent =
  struct
    type t = [ `Event  | `WebGLContextEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8203 : Ojs.t) -> t_of_js x8203
    and t_0_to_js : t_0 -> Ojs.t = fun (x8202 : t) -> t_to_js x8202
    type tags = [ `Event  | `WebGLContextEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8206 : Ojs.t) -> intf_of_js __tags_of_js x8206
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8204 : __tags intf) -> intf_to_js __tags_to_js x8204
    let (get_statusMessage : 'tags this -> string) =
      fun (x8208 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8208) "statusMessage")
    let (create : statusMessage:string -> unit -> t) =
      fun ~statusMessage:(x8210 : string) ->
        fun () ->
          let x8211 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x8211 "statusMessage" (Ojs.string_to_js x8210);
          t_of_js x8211
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent") "prototype")
    let (create' :
      type_:string -> ?eventInit:WebGLContextEventInit.t -> unit -> t) =
      fun ~type_:(x8212 : string) ->
        fun ?eventInit:(x8213 : WebGLContextEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent")
                 (let x8214 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x8214 "push" [|(Ojs.string_to_js x8212)|]);
                  (match x8213 with
                   | Some x8215 ->
                       ignore
                         (Ojs.call x8214 "push"
                            [|(WebGLContextEventInit.t_to_js x8215)|])
                   | None -> ());
                  x8214))
  end
module WebGL2RenderingContextOverloads =
  struct
    type t = [ `WebGL2RenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8217 : Ojs.t) -> t_of_js x8217
    and t_0_to_js : t_0 -> Ojs.t = fun (x8216 : t) -> t_to_js x8216
    type tags = [ `WebGL2RenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8220 : Ojs.t) -> intf_of_js __tags_of_js x8220
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8218 : __tags intf) -> intf_to_js __tags_to_js x8218
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8231 : 'tags this) ->
        fun ~location:(x8222 : WebGLUniformLocation.t option) ->
          fun ~data:(x8223 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8224 : GLuint.t option) ->
              fun ?srcLength:(x8225 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8233 = this_to_js Obj.magic x8231 in
                     Ojs.call (Ojs.get_prop_ascii x8233 "uniform1fv") "apply"
                       [|x8233;((let x8226 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8226 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8222)|]);
                                 ignore
                                   (Ojs.call x8226 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8223)|]);
                                 (match x8224 with
                                  | Some x8228 ->
                                      ignore
                                        (Ojs.call x8226 "push"
                                           [|(GLuint.t_to_js x8228)|])
                                  | None -> ());
                                 (match x8225 with
                                  | Some x8227 ->
                                      ignore
                                        (Ojs.call x8226 "push"
                                           [|(GLuint.t_to_js x8227)|])
                                  | None -> ());
                                 x8226))|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8243 : 'tags this) ->
        fun ~location:(x8234 : WebGLUniformLocation.t option) ->
          fun ~data:(x8235 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8236 : GLuint.t option) ->
              fun ?srcLength:(x8237 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8245 = this_to_js Obj.magic x8243 in
                     Ojs.call (Ojs.get_prop_ascii x8245 "uniform1iv") "apply"
                       [|x8245;((let x8238 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8238 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8234)|]);
                                 ignore
                                   (Ojs.call x8238 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8235)|]);
                                 (match x8236 with
                                  | Some x8240 ->
                                      ignore
                                        (Ojs.call x8238 "push"
                                           [|(GLuint.t_to_js x8240)|])
                                  | None -> ());
                                 (match x8237 with
                                  | Some x8239 ->
                                      ignore
                                        (Ojs.call x8238 "push"
                                           [|(GLuint.t_to_js x8239)|])
                                  | None -> ());
                                 x8238))|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8255 : 'tags this) ->
        fun ~location:(x8246 : WebGLUniformLocation.t option) ->
          fun ~data:(x8247 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8248 : GLuint.t option) ->
              fun ?srcLength:(x8249 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8257 = this_to_js Obj.magic x8255 in
                     Ojs.call (Ojs.get_prop_ascii x8257 "uniform2fv") "apply"
                       [|x8257;((let x8250 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8250 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8246)|]);
                                 ignore
                                   (Ojs.call x8250 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8247)|]);
                                 (match x8248 with
                                  | Some x8252 ->
                                      ignore
                                        (Ojs.call x8250 "push"
                                           [|(GLuint.t_to_js x8252)|])
                                  | None -> ());
                                 (match x8249 with
                                  | Some x8251 ->
                                      ignore
                                        (Ojs.call x8250 "push"
                                           [|(GLuint.t_to_js x8251)|])
                                  | None -> ());
                                 x8250))|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8267 : 'tags this) ->
        fun ~location:(x8258 : WebGLUniformLocation.t option) ->
          fun ~data:(x8259 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8260 : GLuint.t option) ->
              fun ?srcLength:(x8261 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8269 = this_to_js Obj.magic x8267 in
                     Ojs.call (Ojs.get_prop_ascii x8269 "uniform2iv") "apply"
                       [|x8269;((let x8262 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8262 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8258)|]);
                                 ignore
                                   (Ojs.call x8262 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8259)|]);
                                 (match x8260 with
                                  | Some x8264 ->
                                      ignore
                                        (Ojs.call x8262 "push"
                                           [|(GLuint.t_to_js x8264)|])
                                  | None -> ());
                                 (match x8261 with
                                  | Some x8263 ->
                                      ignore
                                        (Ojs.call x8262 "push"
                                           [|(GLuint.t_to_js x8263)|])
                                  | None -> ());
                                 x8262))|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8279 : 'tags this) ->
        fun ~location:(x8270 : WebGLUniformLocation.t option) ->
          fun ~data:(x8271 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8272 : GLuint.t option) ->
              fun ?srcLength:(x8273 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8281 = this_to_js Obj.magic x8279 in
                     Ojs.call (Ojs.get_prop_ascii x8281 "uniform3fv") "apply"
                       [|x8281;((let x8274 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8274 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8270)|]);
                                 ignore
                                   (Ojs.call x8274 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8271)|]);
                                 (match x8272 with
                                  | Some x8276 ->
                                      ignore
                                        (Ojs.call x8274 "push"
                                           [|(GLuint.t_to_js x8276)|])
                                  | None -> ());
                                 (match x8273 with
                                  | Some x8275 ->
                                      ignore
                                        (Ojs.call x8274 "push"
                                           [|(GLuint.t_to_js x8275)|])
                                  | None -> ());
                                 x8274))|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8291 : 'tags this) ->
        fun ~location:(x8282 : WebGLUniformLocation.t option) ->
          fun ~data:(x8283 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8284 : GLuint.t option) ->
              fun ?srcLength:(x8285 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8293 = this_to_js Obj.magic x8291 in
                     Ojs.call (Ojs.get_prop_ascii x8293 "uniform3iv") "apply"
                       [|x8293;((let x8286 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8286 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8282)|]);
                                 ignore
                                   (Ojs.call x8286 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8283)|]);
                                 (match x8284 with
                                  | Some x8288 ->
                                      ignore
                                        (Ojs.call x8286 "push"
                                           [|(GLuint.t_to_js x8288)|])
                                  | None -> ());
                                 (match x8285 with
                                  | Some x8287 ->
                                      ignore
                                        (Ojs.call x8286 "push"
                                           [|(GLuint.t_to_js x8287)|])
                                  | None -> ());
                                 x8286))|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8303 : 'tags this) ->
        fun ~location:(x8294 : WebGLUniformLocation.t option) ->
          fun ~data:(x8295 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8296 : GLuint.t option) ->
              fun ?srcLength:(x8297 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8305 = this_to_js Obj.magic x8303 in
                     Ojs.call (Ojs.get_prop_ascii x8305 "uniform4fv") "apply"
                       [|x8305;((let x8298 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8298 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8294)|]);
                                 ignore
                                   (Ojs.call x8298 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8295)|]);
                                 (match x8296 with
                                  | Some x8300 ->
                                      ignore
                                        (Ojs.call x8298 "push"
                                           [|(GLuint.t_to_js x8300)|])
                                  | None -> ());
                                 (match x8297 with
                                  | Some x8299 ->
                                      ignore
                                        (Ojs.call x8298 "push"
                                           [|(GLuint.t_to_js x8299)|])
                                  | None -> ());
                                 x8298))|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8315 : 'tags this) ->
        fun ~location:(x8306 : WebGLUniformLocation.t option) ->
          fun ~data:(x8307 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8308 : GLuint.t option) ->
              fun ?srcLength:(x8309 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8317 = this_to_js Obj.magic x8315 in
                     Ojs.call (Ojs.get_prop_ascii x8317 "uniform4iv") "apply"
                       [|x8317;((let x8310 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8310 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8306)|]);
                                 ignore
                                   (Ojs.call x8310 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8307)|]);
                                 (match x8308 with
                                  | Some x8312 ->
                                      ignore
                                        (Ojs.call x8310 "push"
                                           [|(GLuint.t_to_js x8312)|])
                                  | None -> ());
                                 (match x8309 with
                                  | Some x8311 ->
                                      ignore
                                        (Ojs.call x8310 "push"
                                           [|(GLuint.t_to_js x8311)|])
                                  | None -> ());
                                 x8310))|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8328 : 'tags this) ->
        fun ~location:(x8318 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8319 : GLboolean.t) ->
            fun ~data:(x8320 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8321 : GLuint.t option) ->
                fun ?srcLength:(x8322 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8330 = this_to_js Obj.magic x8328 in
                       Ojs.call (Ojs.get_prop_ascii x8330 "uniformMatrix2fv")
                         "apply"
                         [|x8330;((let x8323 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8323 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8318)|]);
                                   ignore
                                     (Ojs.call x8323 "push"
                                        [|(GLboolean.t_to_js x8319)|]);
                                   ignore
                                     (Ojs.call x8323 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8320)|]);
                                   (match x8321 with
                                    | Some x8325 ->
                                        ignore
                                          (Ojs.call x8323 "push"
                                             [|(GLuint.t_to_js x8325)|])
                                    | None -> ());
                                   (match x8322 with
                                    | Some x8324 ->
                                        ignore
                                          (Ojs.call x8323 "push"
                                             [|(GLuint.t_to_js x8324)|])
                                    | None -> ());
                                   x8323))|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8341 : 'tags this) ->
        fun ~location:(x8331 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8332 : GLboolean.t) ->
            fun ~data:(x8333 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8334 : GLuint.t option) ->
                fun ?srcLength:(x8335 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8343 = this_to_js Obj.magic x8341 in
                       Ojs.call (Ojs.get_prop_ascii x8343 "uniformMatrix3fv")
                         "apply"
                         [|x8343;((let x8336 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8336 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8331)|]);
                                   ignore
                                     (Ojs.call x8336 "push"
                                        [|(GLboolean.t_to_js x8332)|]);
                                   ignore
                                     (Ojs.call x8336 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8333)|]);
                                   (match x8334 with
                                    | Some x8338 ->
                                        ignore
                                          (Ojs.call x8336 "push"
                                             [|(GLuint.t_to_js x8338)|])
                                    | None -> ());
                                   (match x8335 with
                                    | Some x8337 ->
                                        ignore
                                          (Ojs.call x8336 "push"
                                             [|(GLuint.t_to_js x8337)|])
                                    | None -> ());
                                   x8336))|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8354 : 'tags this) ->
        fun ~location:(x8344 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8345 : GLboolean.t) ->
            fun ~data:(x8346 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8347 : GLuint.t option) ->
                fun ?srcLength:(x8348 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8356 = this_to_js Obj.magic x8354 in
                       Ojs.call (Ojs.get_prop_ascii x8356 "uniformMatrix4fv")
                         "apply"
                         [|x8356;((let x8349 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8349 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8344)|]);
                                   ignore
                                     (Ojs.call x8349 "push"
                                        [|(GLboolean.t_to_js x8345)|]);
                                   ignore
                                     (Ojs.call x8349 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8346)|]);
                                   (match x8347 with
                                    | Some x8351 ->
                                        ignore
                                          (Ojs.call x8349 "push"
                                             [|(GLuint.t_to_js x8351)|])
                                    | None -> ());
                                   (match x8348 with
                                    | Some x8350 ->
                                        ignore
                                          (Ojs.call x8349 "push"
                                             [|(GLuint.t_to_js x8350)|])
                                    | None -> ());
                                   x8349))|])
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x8360 : 'tags this) ->
        fun ~target:(x8357 : GLenum.t) ->
          fun ~size:(x8358 : GLsizeiptr.t) ->
            fun ~usage:(x8359 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8360) "bufferData"
                   [|(GLenum.t_to_js x8357);(GLsizeiptr.t_to_js x8358);(
                     GLenum.t_to_js x8359)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          srcData:BufferSource.t option -> usage:GLenum.t -> unit)
      =
      fun (x8366 : 'tags this) ->
        fun ~target:(x8362 : GLenum.t) ->
          fun ~srcData:(x8363 : BufferSource.t option) ->
            fun ~usage:(x8365 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8366) "bufferData"
                   [|(GLenum.t_to_js x8362);(Ojs.option_to_js
                                               BufferSource.t_to_js x8363);(
                     GLenum.t_to_js x8365)|])
    let (bufferData'' :
      'tags this ->
        target:GLenum.t ->
          srcData:ArrayBufferView.t_0 ->
            usage:GLenum.t ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8375 : 'tags this) ->
        fun ~target:(x8368 : GLenum.t) ->
          fun ~srcData:(x8369 : ArrayBufferView.t_0) ->
            fun ~usage:(x8370 : GLenum.t) ->
              fun ~srcOffset:(x8371 : GLuint.t) ->
                fun ?length:(x8372 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8377 = this_to_js Obj.magic x8375 in
                       Ojs.call (Ojs.get_prop_ascii x8377 "bufferData")
                         "apply"
                         [|x8377;((let x8373 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8373 "push"
                                        [|(GLenum.t_to_js x8368)|]);
                                   ignore
                                     (Ojs.call x8373 "push"
                                        [|(ArrayBufferView.t_0_to_js x8369)|]);
                                   ignore
                                     (Ojs.call x8373 "push"
                                        [|(GLenum.t_to_js x8370)|]);
                                   ignore
                                     (Ojs.call x8373 "push"
                                        [|(GLuint.t_to_js x8371)|]);
                                   (match x8372 with
                                    | Some x8374 ->
                                        ignore
                                          (Ojs.call x8373 "push"
                                             [|(GLuint.t_to_js x8374)|])
                                    | None -> ());
                                   x8373))|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t -> srcData:BufferSource.t -> unit)
      =
      fun (x8381 : 'tags this) ->
        fun ~target:(x8378 : GLenum.t) ->
          fun ~dstByteOffset:(x8379 : GLintptr.t) ->
            fun ~srcData:(x8380 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8381) "bufferSubData"
                   [|(GLenum.t_to_js x8378);(GLintptr.t_to_js x8379);(
                     BufferSource.t_to_js x8380)|])
    let (bufferSubData' :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t ->
            srcData:ArrayBufferView.t_0 ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8390 : 'tags this) ->
        fun ~target:(x8383 : GLenum.t) ->
          fun ~dstByteOffset:(x8384 : GLintptr.t) ->
            fun ~srcData:(x8385 : ArrayBufferView.t_0) ->
              fun ~srcOffset:(x8386 : GLuint.t) ->
                fun ?length:(x8387 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8392 = this_to_js Obj.magic x8390 in
                       Ojs.call (Ojs.get_prop_ascii x8392 "bufferSubData")
                         "apply"
                         [|x8392;((let x8388 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8388 "push"
                                        [|(GLenum.t_to_js x8383)|]);
                                   ignore
                                     (Ojs.call x8388 "push"
                                        [|(GLintptr.t_to_js x8384)|]);
                                   ignore
                                     (Ojs.call x8388 "push"
                                        [|(ArrayBufferView.t_0_to_js x8385)|]);
                                   ignore
                                     (Ojs.call x8388 "push"
                                        [|(GLuint.t_to_js x8386)|]);
                                   (match x8387 with
                                    | Some x8389 ->
                                        ignore
                                          (Ojs.call x8388 "push"
                                             [|(GLuint.t_to_js x8389)|])
                                    | None -> ());
                                   x8388))|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8401 : 'tags this) ->
        fun ~target:(x8393 : GLenum.t) ->
          fun ~level:(x8394 : GLint.t) ->
            fun ~internalformat:(x8395 : GLenum.t) ->
              fun ~width:(x8396 : GLsizei.t) ->
                fun ~height:(x8397 : GLsizei.t) ->
                  fun ~border:(x8398 : GLint.t) ->
                    fun ~imageSize:(x8399 : GLsizei.t) ->
                      fun ~offset:(x8400 : GLintptr.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x8401)
                             "compressedTexImage2D"
                             [|(GLenum.t_to_js x8393);(GLint.t_to_js x8394);(
                               GLenum.t_to_js x8395);(GLsizei.t_to_js x8396);(
                               GLsizei.t_to_js x8397);(GLint.t_to_js x8398);(
                               GLsizei.t_to_js x8399);(GLintptr.t_to_js x8400)|])
    let (compressedTexImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    srcData:ArrayBufferView.t_0 ->
                      ?srcOffset:GLuint.t ->
                        ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8415 : 'tags this) ->
        fun ~target:(x8403 : GLenum.t) ->
          fun ~level:(x8404 : GLint.t) ->
            fun ~internalformat:(x8405 : GLenum.t) ->
              fun ~width:(x8406 : GLsizei.t) ->
                fun ~height:(x8407 : GLsizei.t) ->
                  fun ~border:(x8408 : GLint.t) ->
                    fun ~srcData:(x8409 : ArrayBufferView.t_0) ->
                      fun ?srcOffset:(x8410 : GLuint.t option) ->
                        fun ?srcLengthOverride:(x8411 : GLuint.t option) ->
                          fun () ->
                            ignore
                              (let x8417 = this_to_js Obj.magic x8415 in
                               Ojs.call
                                 (Ojs.get_prop_ascii x8417
                                    "compressedTexImage2D") "apply"
                                 [|x8417;((let x8412 =
                                             Ojs.new_obj
                                               (Ojs.get_prop_ascii Ojs.global
                                                  "Array") [||] in
                                           ignore
                                             (Ojs.call x8412 "push"
                                                [|(GLenum.t_to_js x8403)|]);
                                           ignore
                                             (Ojs.call x8412 "push"
                                                [|(GLint.t_to_js x8404)|]);
                                           ignore
                                             (Ojs.call x8412 "push"
                                                [|(GLenum.t_to_js x8405)|]);
                                           ignore
                                             (Ojs.call x8412 "push"
                                                [|(GLsizei.t_to_js x8406)|]);
                                           ignore
                                             (Ojs.call x8412 "push"
                                                [|(GLsizei.t_to_js x8407)|]);
                                           ignore
                                             (Ojs.call x8412 "push"
                                                [|(GLint.t_to_js x8408)|]);
                                           ignore
                                             (Ojs.call x8412 "push"
                                                [|(ArrayBufferView.t_0_to_js
                                                     x8409)|]);
                                           (match x8410 with
                                            | Some x8414 ->
                                                ignore
                                                  (Ojs.call x8412 "push"
                                                     [|(GLuint.t_to_js x8414)|])
                                            | None -> ());
                                           (match x8411 with
                                            | Some x8413 ->
                                                ignore
                                                  (Ojs.call x8412 "push"
                                                     [|(GLuint.t_to_js x8413)|])
                                            | None -> ());
                                           x8412))|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8427 : 'tags this) ->
        fun ~target:(x8418 : GLenum.t) ->
          fun ~level:(x8419 : GLint.t) ->
            fun ~xoffset:(x8420 : GLint.t) ->
              fun ~yoffset:(x8421 : GLint.t) ->
                fun ~width:(x8422 : GLsizei.t) ->
                  fun ~height:(x8423 : GLsizei.t) ->
                    fun ~format:(x8424 : GLenum.t) ->
                      fun ~imageSize:(x8425 : GLsizei.t) ->
                        fun ~offset:(x8426 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8427)
                               "compressedTexSubImage2D"
                               [|(GLenum.t_to_js x8418);(GLint.t_to_js x8419);(
                                 GLint.t_to_js x8420);(GLint.t_to_js x8421);(
                                 GLsizei.t_to_js x8422);(GLsizei.t_to_js
                                                           x8423);(GLenum.t_to_js
                                                                    x8424);(
                                 GLsizei.t_to_js x8425);(GLintptr.t_to_js
                                                           x8426)|])
    let (compressedTexSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8442 : 'tags this) ->
        fun ~target:(x8429 : GLenum.t) ->
          fun ~level:(x8430 : GLint.t) ->
            fun ~xoffset:(x8431 : GLint.t) ->
              fun ~yoffset:(x8432 : GLint.t) ->
                fun ~width:(x8433 : GLsizei.t) ->
                  fun ~height:(x8434 : GLsizei.t) ->
                    fun ~format:(x8435 : GLenum.t) ->
                      fun ~srcData:(x8436 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x8437 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x8438 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x8444 = this_to_js Obj.magic x8442 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x8444
                                      "compressedTexSubImage2D") "apply"
                                   [|x8444;((let x8439 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x8439 "push"
                                                  [|(GLenum.t_to_js x8429)|]);
                                             ignore
                                               (Ojs.call x8439 "push"
                                                  [|(GLint.t_to_js x8430)|]);
                                             ignore
                                               (Ojs.call x8439 "push"
                                                  [|(GLint.t_to_js x8431)|]);
                                             ignore
                                               (Ojs.call x8439 "push"
                                                  [|(GLint.t_to_js x8432)|]);
                                             ignore
                                               (Ojs.call x8439 "push"
                                                  [|(GLsizei.t_to_js x8433)|]);
                                             ignore
                                               (Ojs.call x8439 "push"
                                                  [|(GLsizei.t_to_js x8434)|]);
                                             ignore
                                               (Ojs.call x8439 "push"
                                                  [|(GLenum.t_to_js x8435)|]);
                                             ignore
                                               (Ojs.call x8439 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x8436)|]);
                                             (match x8437 with
                                              | Some x8441 ->
                                                  ignore
                                                    (Ojs.call x8439 "push"
                                                       [|(GLuint.t_to_js
                                                            x8441)|])
                                              | None -> ());
                                             (match x8438 with
                                              | Some x8440 ->
                                                  ignore
                                                    (Ojs.call x8439 "push"
                                                       [|(GLuint.t_to_js
                                                            x8440)|])
                                              | None -> ());
                                             x8439))|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8453 : 'tags this) ->
        fun ~x:(x8445 : GLint.t) ->
          fun ~y:(x8446 : GLint.t) ->
            fun ~width:(x8447 : GLsizei.t) ->
              fun ~height:(x8448 : GLsizei.t) ->
                fun ~format:(x8449 : GLenum.t) ->
                  fun ~type_:(x8450 : GLenum.t) ->
                    fun ~dstData:(x8451 : ArrayBufferView.t_0 option) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8453) "readPixels"
                           [|(GLint.t_to_js x8445);(GLint.t_to_js x8446);(
                             GLsizei.t_to_js x8447);(GLsizei.t_to_js x8448);(
                             GLenum.t_to_js x8449);(GLenum.t_to_js x8450);(
                             Ojs.option_to_js ArrayBufferView.t_0_to_js x8451)|])
    let (readPixels' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x8462 : 'tags this) ->
        fun ~x:(x8455 : GLint.t) ->
          fun ~y:(x8456 : GLint.t) ->
            fun ~width:(x8457 : GLsizei.t) ->
              fun ~height:(x8458 : GLsizei.t) ->
                fun ~format:(x8459 : GLenum.t) ->
                  fun ~type_:(x8460 : GLenum.t) ->
                    fun ~offset:(x8461 : GLintptr.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8462) "readPixels"
                           [|(GLint.t_to_js x8455);(GLint.t_to_js x8456);(
                             GLsizei.t_to_js x8457);(GLsizei.t_to_js x8458);(
                             GLenum.t_to_js x8459);(GLenum.t_to_js x8460);(
                             GLintptr.t_to_js x8461)|])
    let (readPixels'' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 -> dstOffset:GLuint.t -> unit)
      =
      fun (x8472 : 'tags this) ->
        fun ~x:(x8464 : GLint.t) ->
          fun ~y:(x8465 : GLint.t) ->
            fun ~width:(x8466 : GLsizei.t) ->
              fun ~height:(x8467 : GLsizei.t) ->
                fun ~format:(x8468 : GLenum.t) ->
                  fun ~type_:(x8469 : GLenum.t) ->
                    fun ~dstData:(x8470 : ArrayBufferView.t_0) ->
                      fun ~dstOffset:(x8471 : GLuint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x8472) "readPixels"
                             [|(GLint.t_to_js x8464);(GLint.t_to_js x8465);(
                               GLsizei.t_to_js x8466);(GLsizei.t_to_js x8467);(
                               GLenum.t_to_js x8468);(GLenum.t_to_js x8469);(
                               ArrayBufferView.t_0_to_js x8470);(GLuint.t_to_js
                                                                   x8471)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8484 : 'tags this) ->
        fun ~target:(x8474 : GLenum.t) ->
          fun ~level:(x8475 : GLint.t) ->
            fun ~internalformat:(x8476 : GLint.t) ->
              fun ~width:(x8477 : GLsizei.t) ->
                fun ~height:(x8478 : GLsizei.t) ->
                  fun ~border:(x8479 : GLint.t) ->
                    fun ~format:(x8480 : GLenum.t) ->
                      fun ~type_:(x8481 : GLenum.t) ->
                        fun ~pixels:(x8482 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8484)
                               "texImage2D"
                               [|(GLenum.t_to_js x8474);(GLint.t_to_js x8475);(
                                 GLint.t_to_js x8476);(GLsizei.t_to_js x8477);(
                                 GLsizei.t_to_js x8478);(GLint.t_to_js x8479);(
                                 GLenum.t_to_js x8480);(GLenum.t_to_js x8481);(
                                 Ojs.option_to_js ArrayBufferView.t_0_to_js
                                   x8482)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8492 : 'tags this) ->
        fun ~target:(x8486 : GLenum.t) ->
          fun ~level:(x8487 : GLint.t) ->
            fun ~internalformat:(x8488 : GLint.t) ->
              fun ~format:(x8489 : GLenum.t) ->
                fun ~type_:(x8490 : GLenum.t) ->
                  fun ~source:(x8491 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8492) "texImage2D"
                         [|(GLenum.t_to_js x8486);(GLint.t_to_js x8487);(
                           GLint.t_to_js x8488);(GLenum.t_to_js x8489);(
                           GLenum.t_to_js x8490);(TexImageSource.t_to_js
                                                    x8491)|])
    let (texImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8503 : 'tags this) ->
        fun ~target:(x8494 : GLenum.t) ->
          fun ~level:(x8495 : GLint.t) ->
            fun ~internalformat:(x8496 : GLint.t) ->
              fun ~width:(x8497 : GLsizei.t) ->
                fun ~height:(x8498 : GLsizei.t) ->
                  fun ~border:(x8499 : GLint.t) ->
                    fun ~format:(x8500 : GLenum.t) ->
                      fun ~type_:(x8501 : GLenum.t) ->
                        fun ~pboOffset:(x8502 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8503)
                               "texImage2D"
                               [|(GLenum.t_to_js x8494);(GLint.t_to_js x8495);(
                                 GLint.t_to_js x8496);(GLsizei.t_to_js x8497);(
                                 GLsizei.t_to_js x8498);(GLint.t_to_js x8499);(
                                 GLenum.t_to_js x8500);(GLenum.t_to_js x8501);(
                                 GLintptr.t_to_js x8502)|])
    let (texImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8514 : 'tags this) ->
        fun ~target:(x8505 : GLenum.t) ->
          fun ~level:(x8506 : GLint.t) ->
            fun ~internalformat:(x8507 : GLint.t) ->
              fun ~width:(x8508 : GLsizei.t) ->
                fun ~height:(x8509 : GLsizei.t) ->
                  fun ~border:(x8510 : GLint.t) ->
                    fun ~format:(x8511 : GLenum.t) ->
                      fun ~type_:(x8512 : GLenum.t) ->
                        fun ~source:(x8513 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8514)
                               "texImage2D"
                               [|(GLenum.t_to_js x8505);(GLint.t_to_js x8506);(
                                 GLint.t_to_js x8507);(GLsizei.t_to_js x8508);(
                                 GLsizei.t_to_js x8509);(GLint.t_to_js x8510);(
                                 GLenum.t_to_js x8511);(GLenum.t_to_js x8512);(
                                 TexImageSource.t_to_js x8513)|])
    let (texImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x8526 : 'tags this) ->
        fun ~target:(x8516 : GLenum.t) ->
          fun ~level:(x8517 : GLint.t) ->
            fun ~internalformat:(x8518 : GLint.t) ->
              fun ~width:(x8519 : GLsizei.t) ->
                fun ~height:(x8520 : GLsizei.t) ->
                  fun ~border:(x8521 : GLint.t) ->
                    fun ~format:(x8522 : GLenum.t) ->
                      fun ~type_:(x8523 : GLenum.t) ->
                        fun ~srcData:(x8524 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x8525 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8526)
                                 "texImage2D"
                                 [|(GLenum.t_to_js x8516);(GLint.t_to_js
                                                             x8517);(
                                   GLint.t_to_js x8518);(GLsizei.t_to_js
                                                           x8519);(GLsizei.t_to_js
                                                                    x8520);(
                                   GLint.t_to_js x8521);(GLenum.t_to_js x8522);(
                                   GLenum.t_to_js x8523);(ArrayBufferView.t_0_to_js
                                                            x8524);(GLuint.t_to_js
                                                                    x8525)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8538 : 'tags this) ->
        fun ~target:(x8528 : GLenum.t) ->
          fun ~level:(x8529 : GLint.t) ->
            fun ~xoffset:(x8530 : GLint.t) ->
              fun ~yoffset:(x8531 : GLint.t) ->
                fun ~width:(x8532 : GLsizei.t) ->
                  fun ~height:(x8533 : GLsizei.t) ->
                    fun ~format:(x8534 : GLenum.t) ->
                      fun ~type_:(x8535 : GLenum.t) ->
                        fun ~pixels:(x8536 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8538)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8528);(GLint.t_to_js x8529);(
                                 GLint.t_to_js x8530);(GLint.t_to_js x8531);(
                                 GLsizei.t_to_js x8532);(GLsizei.t_to_js
                                                           x8533);(GLenum.t_to_js
                                                                    x8534);(
                                 GLenum.t_to_js x8535);(Ojs.option_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x8536)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8547 : 'tags this) ->
        fun ~target:(x8540 : GLenum.t) ->
          fun ~level:(x8541 : GLint.t) ->
            fun ~xoffset:(x8542 : GLint.t) ->
              fun ~yoffset:(x8543 : GLint.t) ->
                fun ~format:(x8544 : GLenum.t) ->
                  fun ~type_:(x8545 : GLenum.t) ->
                    fun ~source:(x8546 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8547)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x8540);(GLint.t_to_js x8541);(
                             GLint.t_to_js x8542);(GLint.t_to_js x8543);(
                             GLenum.t_to_js x8544);(GLenum.t_to_js x8545);(
                             TexImageSource.t_to_js x8546)|])
    let (texSubImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8558 : 'tags this) ->
        fun ~target:(x8549 : GLenum.t) ->
          fun ~level:(x8550 : GLint.t) ->
            fun ~xoffset:(x8551 : GLint.t) ->
              fun ~yoffset:(x8552 : GLint.t) ->
                fun ~width:(x8553 : GLsizei.t) ->
                  fun ~height:(x8554 : GLsizei.t) ->
                    fun ~format:(x8555 : GLenum.t) ->
                      fun ~type_:(x8556 : GLenum.t) ->
                        fun ~pboOffset:(x8557 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8558)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8549);(GLint.t_to_js x8550);(
                                 GLint.t_to_js x8551);(GLint.t_to_js x8552);(
                                 GLsizei.t_to_js x8553);(GLsizei.t_to_js
                                                           x8554);(GLenum.t_to_js
                                                                    x8555);(
                                 GLenum.t_to_js x8556);(GLintptr.t_to_js
                                                          x8557)|])
    let (texSubImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8569 : 'tags this) ->
        fun ~target:(x8560 : GLenum.t) ->
          fun ~level:(x8561 : GLint.t) ->
            fun ~xoffset:(x8562 : GLint.t) ->
              fun ~yoffset:(x8563 : GLint.t) ->
                fun ~width:(x8564 : GLsizei.t) ->
                  fun ~height:(x8565 : GLsizei.t) ->
                    fun ~format:(x8566 : GLenum.t) ->
                      fun ~type_:(x8567 : GLenum.t) ->
                        fun ~source:(x8568 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8569)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8560);(GLint.t_to_js x8561);(
                                 GLint.t_to_js x8562);(GLint.t_to_js x8563);(
                                 GLsizei.t_to_js x8564);(GLsizei.t_to_js
                                                           x8565);(GLenum.t_to_js
                                                                    x8566);(
                                 GLenum.t_to_js x8567);(TexImageSource.t_to_js
                                                          x8568)|])
    let (texSubImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x8581 : 'tags this) ->
        fun ~target:(x8571 : GLenum.t) ->
          fun ~level:(x8572 : GLint.t) ->
            fun ~xoffset:(x8573 : GLint.t) ->
              fun ~yoffset:(x8574 : GLint.t) ->
                fun ~width:(x8575 : GLsizei.t) ->
                  fun ~height:(x8576 : GLsizei.t) ->
                    fun ~format:(x8577 : GLenum.t) ->
                      fun ~type_:(x8578 : GLenum.t) ->
                        fun ~srcData:(x8579 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x8580 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8581)
                                 "texSubImage2D"
                                 [|(GLenum.t_to_js x8571);(GLint.t_to_js
                                                             x8572);(
                                   GLint.t_to_js x8573);(GLint.t_to_js x8574);(
                                   GLsizei.t_to_js x8575);(GLsizei.t_to_js
                                                             x8576);(
                                   GLenum.t_to_js x8577);(GLenum.t_to_js
                                                            x8578);(ArrayBufferView.t_0_to_js
                                                                    x8579);(
                                   GLuint.t_to_js x8580)|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8591 : 'tags this) ->
        fun ~location:(x8583 : WebGLUniformLocation.t option) ->
          fun ~data:(x8584 : Float32List.t) ->
            fun ?srcOffset:(x8585 : GLuint.t option) ->
              fun ?srcLength:(x8586 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8593 = this_to_js Obj.magic x8591 in
                     Ojs.call (Ojs.get_prop_ascii x8593 "uniform1fv") "apply"
                       [|x8593;((let x8587 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8587 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8583)|]);
                                 ignore
                                   (Ojs.call x8587 "push"
                                      [|(Float32List.t_to_js x8584)|]);
                                 (match x8585 with
                                  | Some x8589 ->
                                      ignore
                                        (Ojs.call x8587 "push"
                                           [|(GLuint.t_to_js x8589)|])
                                  | None -> ());
                                 (match x8586 with
                                  | Some x8588 ->
                                      ignore
                                        (Ojs.call x8587 "push"
                                           [|(GLuint.t_to_js x8588)|])
                                  | None -> ());
                                 x8587))|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8602 : 'tags this) ->
        fun ~location:(x8594 : WebGLUniformLocation.t option) ->
          fun ~data:(x8595 : Int32List.t) ->
            fun ?srcOffset:(x8596 : GLuint.t option) ->
              fun ?srcLength:(x8597 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8604 = this_to_js Obj.magic x8602 in
                     Ojs.call (Ojs.get_prop_ascii x8604 "uniform1iv") "apply"
                       [|x8604;((let x8598 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8598 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8594)|]);
                                 ignore
                                   (Ojs.call x8598 "push"
                                      [|(Int32List.t_to_js x8595)|]);
                                 (match x8596 with
                                  | Some x8600 ->
                                      ignore
                                        (Ojs.call x8598 "push"
                                           [|(GLuint.t_to_js x8600)|])
                                  | None -> ());
                                 (match x8597 with
                                  | Some x8599 ->
                                      ignore
                                        (Ojs.call x8598 "push"
                                           [|(GLuint.t_to_js x8599)|])
                                  | None -> ());
                                 x8598))|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8613 : 'tags this) ->
        fun ~location:(x8605 : WebGLUniformLocation.t option) ->
          fun ~data:(x8606 : Float32List.t) ->
            fun ?srcOffset:(x8607 : GLuint.t option) ->
              fun ?srcLength:(x8608 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8615 = this_to_js Obj.magic x8613 in
                     Ojs.call (Ojs.get_prop_ascii x8615 "uniform2fv") "apply"
                       [|x8615;((let x8609 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8609 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8605)|]);
                                 ignore
                                   (Ojs.call x8609 "push"
                                      [|(Float32List.t_to_js x8606)|]);
                                 (match x8607 with
                                  | Some x8611 ->
                                      ignore
                                        (Ojs.call x8609 "push"
                                           [|(GLuint.t_to_js x8611)|])
                                  | None -> ());
                                 (match x8608 with
                                  | Some x8610 ->
                                      ignore
                                        (Ojs.call x8609 "push"
                                           [|(GLuint.t_to_js x8610)|])
                                  | None -> ());
                                 x8609))|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8624 : 'tags this) ->
        fun ~location:(x8616 : WebGLUniformLocation.t option) ->
          fun ~data:(x8617 : Int32List.t) ->
            fun ?srcOffset:(x8618 : GLuint.t option) ->
              fun ?srcLength:(x8619 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8626 = this_to_js Obj.magic x8624 in
                     Ojs.call (Ojs.get_prop_ascii x8626 "uniform2iv") "apply"
                       [|x8626;((let x8620 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8620 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8616)|]);
                                 ignore
                                   (Ojs.call x8620 "push"
                                      [|(Int32List.t_to_js x8617)|]);
                                 (match x8618 with
                                  | Some x8622 ->
                                      ignore
                                        (Ojs.call x8620 "push"
                                           [|(GLuint.t_to_js x8622)|])
                                  | None -> ());
                                 (match x8619 with
                                  | Some x8621 ->
                                      ignore
                                        (Ojs.call x8620 "push"
                                           [|(GLuint.t_to_js x8621)|])
                                  | None -> ());
                                 x8620))|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8635 : 'tags this) ->
        fun ~location:(x8627 : WebGLUniformLocation.t option) ->
          fun ~data:(x8628 : Float32List.t) ->
            fun ?srcOffset:(x8629 : GLuint.t option) ->
              fun ?srcLength:(x8630 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8637 = this_to_js Obj.magic x8635 in
                     Ojs.call (Ojs.get_prop_ascii x8637 "uniform3fv") "apply"
                       [|x8637;((let x8631 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8631 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8627)|]);
                                 ignore
                                   (Ojs.call x8631 "push"
                                      [|(Float32List.t_to_js x8628)|]);
                                 (match x8629 with
                                  | Some x8633 ->
                                      ignore
                                        (Ojs.call x8631 "push"
                                           [|(GLuint.t_to_js x8633)|])
                                  | None -> ());
                                 (match x8630 with
                                  | Some x8632 ->
                                      ignore
                                        (Ojs.call x8631 "push"
                                           [|(GLuint.t_to_js x8632)|])
                                  | None -> ());
                                 x8631))|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8646 : 'tags this) ->
        fun ~location:(x8638 : WebGLUniformLocation.t option) ->
          fun ~data:(x8639 : Int32List.t) ->
            fun ?srcOffset:(x8640 : GLuint.t option) ->
              fun ?srcLength:(x8641 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8648 = this_to_js Obj.magic x8646 in
                     Ojs.call (Ojs.get_prop_ascii x8648 "uniform3iv") "apply"
                       [|x8648;((let x8642 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8642 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8638)|]);
                                 ignore
                                   (Ojs.call x8642 "push"
                                      [|(Int32List.t_to_js x8639)|]);
                                 (match x8640 with
                                  | Some x8644 ->
                                      ignore
                                        (Ojs.call x8642 "push"
                                           [|(GLuint.t_to_js x8644)|])
                                  | None -> ());
                                 (match x8641 with
                                  | Some x8643 ->
                                      ignore
                                        (Ojs.call x8642 "push"
                                           [|(GLuint.t_to_js x8643)|])
                                  | None -> ());
                                 x8642))|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8657 : 'tags this) ->
        fun ~location:(x8649 : WebGLUniformLocation.t option) ->
          fun ~data:(x8650 : Float32List.t) ->
            fun ?srcOffset:(x8651 : GLuint.t option) ->
              fun ?srcLength:(x8652 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8659 = this_to_js Obj.magic x8657 in
                     Ojs.call (Ojs.get_prop_ascii x8659 "uniform4fv") "apply"
                       [|x8659;((let x8653 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8653 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8649)|]);
                                 ignore
                                   (Ojs.call x8653 "push"
                                      [|(Float32List.t_to_js x8650)|]);
                                 (match x8651 with
                                  | Some x8655 ->
                                      ignore
                                        (Ojs.call x8653 "push"
                                           [|(GLuint.t_to_js x8655)|])
                                  | None -> ());
                                 (match x8652 with
                                  | Some x8654 ->
                                      ignore
                                        (Ojs.call x8653 "push"
                                           [|(GLuint.t_to_js x8654)|])
                                  | None -> ());
                                 x8653))|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8668 : 'tags this) ->
        fun ~location:(x8660 : WebGLUniformLocation.t option) ->
          fun ~data:(x8661 : Int32List.t) ->
            fun ?srcOffset:(x8662 : GLuint.t option) ->
              fun ?srcLength:(x8663 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8670 = this_to_js Obj.magic x8668 in
                     Ojs.call (Ojs.get_prop_ascii x8670 "uniform4iv") "apply"
                       [|x8670;((let x8664 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8664 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8660)|]);
                                 ignore
                                   (Ojs.call x8664 "push"
                                      [|(Int32List.t_to_js x8661)|]);
                                 (match x8662 with
                                  | Some x8666 ->
                                      ignore
                                        (Ojs.call x8664 "push"
                                           [|(GLuint.t_to_js x8666)|])
                                  | None -> ());
                                 (match x8663 with
                                  | Some x8665 ->
                                      ignore
                                        (Ojs.call x8664 "push"
                                           [|(GLuint.t_to_js x8665)|])
                                  | None -> ());
                                 x8664))|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8680 : 'tags this) ->
        fun ~location:(x8671 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8672 : GLboolean.t) ->
            fun ~data:(x8673 : Float32List.t) ->
              fun ?srcOffset:(x8674 : GLuint.t option) ->
                fun ?srcLength:(x8675 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8682 = this_to_js Obj.magic x8680 in
                       Ojs.call (Ojs.get_prop_ascii x8682 "uniformMatrix2fv")
                         "apply"
                         [|x8682;((let x8676 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8676 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8671)|]);
                                   ignore
                                     (Ojs.call x8676 "push"
                                        [|(GLboolean.t_to_js x8672)|]);
                                   ignore
                                     (Ojs.call x8676 "push"
                                        [|(Float32List.t_to_js x8673)|]);
                                   (match x8674 with
                                    | Some x8678 ->
                                        ignore
                                          (Ojs.call x8676 "push"
                                             [|(GLuint.t_to_js x8678)|])
                                    | None -> ());
                                   (match x8675 with
                                    | Some x8677 ->
                                        ignore
                                          (Ojs.call x8676 "push"
                                             [|(GLuint.t_to_js x8677)|])
                                    | None -> ());
                                   x8676))|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8692 : 'tags this) ->
        fun ~location:(x8683 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8684 : GLboolean.t) ->
            fun ~data:(x8685 : Float32List.t) ->
              fun ?srcOffset:(x8686 : GLuint.t option) ->
                fun ?srcLength:(x8687 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8694 = this_to_js Obj.magic x8692 in
                       Ojs.call (Ojs.get_prop_ascii x8694 "uniformMatrix3fv")
                         "apply"
                         [|x8694;((let x8688 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8688 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8683)|]);
                                   ignore
                                     (Ojs.call x8688 "push"
                                        [|(GLboolean.t_to_js x8684)|]);
                                   ignore
                                     (Ojs.call x8688 "push"
                                        [|(Float32List.t_to_js x8685)|]);
                                   (match x8686 with
                                    | Some x8690 ->
                                        ignore
                                          (Ojs.call x8688 "push"
                                             [|(GLuint.t_to_js x8690)|])
                                    | None -> ());
                                   (match x8687 with
                                    | Some x8689 ->
                                        ignore
                                          (Ojs.call x8688 "push"
                                             [|(GLuint.t_to_js x8689)|])
                                    | None -> ());
                                   x8688))|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8704 : 'tags this) ->
        fun ~location:(x8695 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8696 : GLboolean.t) ->
            fun ~data:(x8697 : Float32List.t) ->
              fun ?srcOffset:(x8698 : GLuint.t option) ->
                fun ?srcLength:(x8699 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8706 = this_to_js Obj.magic x8704 in
                       Ojs.call (Ojs.get_prop_ascii x8706 "uniformMatrix4fv")
                         "apply"
                         [|x8706;((let x8700 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8700 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8695)|]);
                                   ignore
                                     (Ojs.call x8700 "push"
                                        [|(GLboolean.t_to_js x8696)|]);
                                   ignore
                                     (Ojs.call x8700 "push"
                                        [|(Float32List.t_to_js x8697)|]);
                                   (match x8698 with
                                    | Some x8702 ->
                                        ignore
                                          (Ojs.call x8700 "push"
                                             [|(GLuint.t_to_js x8702)|])
                                    | None -> ());
                                   (match x8699 with
                                    | Some x8701 ->
                                        ignore
                                          (Ojs.call x8700 "push"
                                             [|(GLuint.t_to_js x8701)|])
                                    | None -> ());
                                   x8700))|])
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObject =
  struct
    type t = [ `WebGLVertexArrayObject ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8708 : Ojs.t) -> t_of_js x8708
    and t_0_to_js : t_0 -> Ojs.t = fun (x8707 : t) -> t_to_js x8707
    type tags = [ `WebGLVertexArrayObject ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObject ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8711 : Ojs.t) -> intf_of_js __tags_of_js x8711
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8709 : __tags intf) -> intf_to_js __tags_to_js x8709
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject") 
             [||])
  end
module WebGLTransformFeedback =
  struct
    type t = [ `WebGLTransformFeedback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8714 : Ojs.t) -> t_of_js x8714
    and t_0_to_js : t_0 -> Ojs.t = fun (x8713 : t) -> t_to_js x8713
    type tags = [ `WebGLTransformFeedback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLTransformFeedback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8717 : Ojs.t) -> intf_of_js __tags_of_js x8717
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8715 : __tags intf) -> intf_to_js __tags_to_js x8715
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback") 
             [||])
  end
module WebGLSync =
  struct
    type t = [ `WebGLSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8720 : Ojs.t) -> t_of_js x8720
    and t_0_to_js : t_0 -> Ojs.t = fun (x8719 : t) -> t_to_js x8719
    type tags = [ `WebGLSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8723 : Ojs.t) -> intf_of_js __tags_of_js x8723
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8721 : __tags intf) -> intf_to_js __tags_to_js x8721
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSync")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSync") [||])
  end
module WebGLSampler =
  struct
    type t = [ `WebGLSampler ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8726 : Ojs.t) -> t_of_js x8726
    and t_0_to_js : t_0 -> Ojs.t = fun (x8725 : t) -> t_to_js x8725
    type tags = [ `WebGLSampler ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSampler ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8729 : Ojs.t) -> intf_of_js __tags_of_js x8729
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8727 : __tags intf) -> intf_to_js __tags_to_js x8727
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSampler")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSampler") [||])
  end
module WebGLQuery =
  struct
    type t = [ `WebGLQuery ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8732 : Ojs.t) -> t_of_js x8732
    and t_0_to_js : t_0 -> Ojs.t = fun (x8731 : t) -> t_to_js x8731
    type tags = [ `WebGLQuery ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLQuery ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8735 : Ojs.t) -> intf_of_js __tags_of_js x8735
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8733 : __tags intf) -> intf_to_js __tags_to_js x8733
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLQuery")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLQuery") [||])
  end
module Uint32List =
  struct
    type t = (GLuint.t list, Uint32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x8741 : Ojs.t) ->
        union2_of_js
          (fun (x8742 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x8742)
          Uint32Array.t_0_of_js x8741
    and t_to_js : t -> Ojs.t =
      fun (x8737 : (GLuint.t list, Uint32Array.t_0) union2) ->
        union2_to_js
          (fun (x8738 : GLuint.t list) -> Ojs.list_to_js GLuint.t_to_js x8738)
          Uint32Array.t_0_to_js x8737
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8746 : Ojs.t) -> t_of_js x8746
    and t_0_to_js : t_0 -> Ojs.t = fun (x8745 : t) -> t_to_js x8745
  end
module GLuint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x8748 : Ojs.t) -> Ojs.float_of_js x8748
    and t_to_js : t -> Ojs.t = fun (x8747 : float) -> Ojs.float_to_js x8747
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8750 : Ojs.t) -> t_of_js x8750
    and t_0_to_js : t_0 -> Ojs.t = fun (x8749 : t) -> t_to_js x8749
  end
module GLint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x8752 : Ojs.t) -> Ojs.float_of_js x8752
    and t_to_js : t -> Ojs.t = fun (x8751 : float) -> Ojs.float_to_js x8751
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8754 : Ojs.t) -> t_of_js x8754
    and t_0_to_js : t_0 -> Ojs.t = fun (x8753 : t) -> t_to_js x8753
  end
module WebGL2RenderingContextBase =
  struct
    type t = [ `WebGL2RenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8756 : Ojs.t) -> t_of_js x8756
    and t_0_to_js : t_0 -> Ojs.t = fun (x8755 : t) -> t_to_js x8755
    type tags = [ `WebGL2RenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8759 : Ojs.t) -> intf_of_js __tags_of_js x8759
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8757 : __tags intf) -> intf_to_js __tags_to_js x8757
    let (clearBufferfv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8768 : 'tags this) ->
        fun ~buffer:(x8761 : GLenum.t) ->
          fun ~drawbuffer:(x8762 : GLint.t) ->
            fun ~values:(x8763 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8764 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8770 = this_to_js Obj.magic x8768 in
                     Ojs.call (Ojs.get_prop_ascii x8770 "clearBufferfv")
                       "apply"
                       [|x8770;((let x8765 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8765 "push"
                                      [|(GLenum.t_to_js x8761)|]);
                                 ignore
                                   (Ojs.call x8765 "push"
                                      [|(GLint.t_to_js x8762)|]);
                                 ignore
                                   (Ojs.call x8765 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8763)|]);
                                 (match x8764 with
                                  | Some x8766 ->
                                      ignore
                                        (Ojs.call x8765 "push"
                                           [|(GLuint.t_to_js x8766)|])
                                  | None -> ());
                                 x8765))|])
    let (clearBufferiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8778 : 'tags this) ->
        fun ~buffer:(x8771 : GLenum.t) ->
          fun ~drawbuffer:(x8772 : GLint.t) ->
            fun ~values:(x8773 : GLint.t Iterable.t_1) ->
              fun ?srcOffset:(x8774 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8780 = this_to_js Obj.magic x8778 in
                     Ojs.call (Ojs.get_prop_ascii x8780 "clearBufferiv")
                       "apply"
                       [|x8780;((let x8775 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8775 "push"
                                      [|(GLenum.t_to_js x8771)|]);
                                 ignore
                                   (Ojs.call x8775 "push"
                                      [|(GLint.t_to_js x8772)|]);
                                 ignore
                                   (Ojs.call x8775 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8773)|]);
                                 (match x8774 with
                                  | Some x8776 ->
                                      ignore
                                        (Ojs.call x8775 "push"
                                           [|(GLuint.t_to_js x8776)|])
                                  | None -> ());
                                 x8775))|])
    let (clearBufferuiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLuint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8788 : 'tags this) ->
        fun ~buffer:(x8781 : GLenum.t) ->
          fun ~drawbuffer:(x8782 : GLint.t) ->
            fun ~values:(x8783 : GLuint.t Iterable.t_1) ->
              fun ?srcOffset:(x8784 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8790 = this_to_js Obj.magic x8788 in
                     Ojs.call (Ojs.get_prop_ascii x8790 "clearBufferuiv")
                       "apply"
                       [|x8790;((let x8785 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8785 "push"
                                      [|(GLenum.t_to_js x8781)|]);
                                 ignore
                                   (Ojs.call x8785 "push"
                                      [|(GLint.t_to_js x8782)|]);
                                 ignore
                                   (Ojs.call x8785 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x8783)|]);
                                 (match x8784 with
                                  | Some x8786 ->
                                      ignore
                                        (Ojs.call x8785 "push"
                                           [|(GLuint.t_to_js x8786)|])
                                  | None -> ());
                                 x8785))|])
    let (drawBuffers : 'tags this -> buffers:GLenum.t Iterable.t_1 -> unit) =
      fun (x8793 : 'tags this) ->
        fun ~buffers:(x8791 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8793) "drawBuffers"
               [|(Iterable.t_1_to_js GLenum.t_to_js x8791)|])
    let (getActiveUniforms :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t Iterable.t_1 -> pname:GLenum.t -> any)
      =
      fun (x8799 : 'tags this) ->
        fun ~program:(x8795 : WebGLProgram.t) ->
          fun ~uniformIndices:(x8796 : GLuint.t Iterable.t_1) ->
            fun ~pname:(x8798 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x8799) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x8795);(Iterable.t_1_to_js
                                                     GLuint.t_to_js x8796);(
                     GLenum.t_to_js x8798)|])
    let (getUniformIndices :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string Iterable.t_1 -> GLuint.t Iterable.t_1 option)
      =
      fun (x8804 : 'tags this) ->
        fun ~program:(x8801 : WebGLProgram.t) ->
          fun ~uniformNames:(x8802 : string Iterable.t_1) ->
            Ojs.option_of_js
              (fun (x8806 : Ojs.t) -> Iterable.t_1_of_js GLuint.t_of_js x8806)
              (Ojs.call (this_to_js Obj.magic x8804) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x8801);(Iterable.t_1_to_js
                                                   Ojs.string_to_js x8802)|])
    let (invalidateFramebuffer :
      'tags this ->
        target:GLenum.t -> attachments:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x8811 : 'tags this) ->
        fun ~target:(x8808 : GLenum.t) ->
          fun ~attachments:(x8809 : GLenum.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8811) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x8808);(Iterable.t_1_to_js GLenum.t_to_js
                                             x8809)|])
    let (invalidateSubFramebuffer :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t Iterable.t_1 ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x8820 : 'tags this) ->
        fun ~target:(x8813 : GLenum.t) ->
          fun ~attachments:(x8814 : GLenum.t Iterable.t_1) ->
            fun ~x:(x8816 : GLint.t) ->
              fun ~y:(x8817 : GLint.t) ->
                fun ~width:(x8818 : GLsizei.t) ->
                  fun ~height:(x8819 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8820)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x8813);(Iterable.t_1_to_js
                                                     GLenum.t_to_js x8814);(
                           GLint.t_to_js x8816);(GLint.t_to_js x8817);(
                           GLsizei.t_to_js x8818);(GLsizei.t_to_js x8819)|])
    let (transformFeedbackVaryings :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string Iterable.t_1 -> bufferMode:GLenum.t -> unit)
      =
      fun (x8826 : 'tags this) ->
        fun ~program:(x8822 : WebGLProgram.t) ->
          fun ~varyings:(x8823 : string Iterable.t_1) ->
            fun ~bufferMode:(x8825 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8826)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x8822);(Iterable.t_1_to_js
                                                     Ojs.string_to_js x8823);(
                     GLenum.t_to_js x8825)|])
    let (uniform1uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8837 : 'tags this) ->
        fun ~location:(x8828 : WebGLUniformLocation.t option) ->
          fun ~data:(x8829 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x8830 : GLuint.t option) ->
              fun ?srcLength:(x8831 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8839 = this_to_js Obj.magic x8837 in
                     Ojs.call (Ojs.get_prop_ascii x8839 "uniform1uiv")
                       "apply"
                       [|x8839;((let x8832 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8832 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8828)|]);
                                 ignore
                                   (Ojs.call x8832 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x8829)|]);
                                 (match x8830 with
                                  | Some x8834 ->
                                      ignore
                                        (Ojs.call x8832 "push"
                                           [|(GLuint.t_to_js x8834)|])
                                  | None -> ());
                                 (match x8831 with
                                  | Some x8833 ->
                                      ignore
                                        (Ojs.call x8832 "push"
                                           [|(GLuint.t_to_js x8833)|])
                                  | None -> ());
                                 x8832))|])
    let (uniform2uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8849 : 'tags this) ->
        fun ~location:(x8840 : WebGLUniformLocation.t option) ->
          fun ~data:(x8841 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x8842 : GLuint.t option) ->
              fun ?srcLength:(x8843 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8851 = this_to_js Obj.magic x8849 in
                     Ojs.call (Ojs.get_prop_ascii x8851 "uniform2uiv")
                       "apply"
                       [|x8851;((let x8844 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8844 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8840)|]);
                                 ignore
                                   (Ojs.call x8844 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x8841)|]);
                                 (match x8842 with
                                  | Some x8846 ->
                                      ignore
                                        (Ojs.call x8844 "push"
                                           [|(GLuint.t_to_js x8846)|])
                                  | None -> ());
                                 (match x8843 with
                                  | Some x8845 ->
                                      ignore
                                        (Ojs.call x8844 "push"
                                           [|(GLuint.t_to_js x8845)|])
                                  | None -> ());
                                 x8844))|])
    let (uniform3uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8861 : 'tags this) ->
        fun ~location:(x8852 : WebGLUniformLocation.t option) ->
          fun ~data:(x8853 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x8854 : GLuint.t option) ->
              fun ?srcLength:(x8855 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8863 = this_to_js Obj.magic x8861 in
                     Ojs.call (Ojs.get_prop_ascii x8863 "uniform3uiv")
                       "apply"
                       [|x8863;((let x8856 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8856 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8852)|]);
                                 ignore
                                   (Ojs.call x8856 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x8853)|]);
                                 (match x8854 with
                                  | Some x8858 ->
                                      ignore
                                        (Ojs.call x8856 "push"
                                           [|(GLuint.t_to_js x8858)|])
                                  | None -> ());
                                 (match x8855 with
                                  | Some x8857 ->
                                      ignore
                                        (Ojs.call x8856 "push"
                                           [|(GLuint.t_to_js x8857)|])
                                  | None -> ());
                                 x8856))|])
    let (uniform4uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8873 : 'tags this) ->
        fun ~location:(x8864 : WebGLUniformLocation.t option) ->
          fun ~data:(x8865 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x8866 : GLuint.t option) ->
              fun ?srcLength:(x8867 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8875 = this_to_js Obj.magic x8873 in
                     Ojs.call (Ojs.get_prop_ascii x8875 "uniform4uiv")
                       "apply"
                       [|x8875;((let x8868 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8868 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8864)|]);
                                 ignore
                                   (Ojs.call x8868 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x8865)|]);
                                 (match x8866 with
                                  | Some x8870 ->
                                      ignore
                                        (Ojs.call x8868 "push"
                                           [|(GLuint.t_to_js x8870)|])
                                  | None -> ());
                                 (match x8867 with
                                  | Some x8869 ->
                                      ignore
                                        (Ojs.call x8868 "push"
                                           [|(GLuint.t_to_js x8869)|])
                                  | None -> ());
                                 x8868))|])
    let (uniformMatrix2x3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8886 : 'tags this) ->
        fun ~location:(x8876 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8877 : GLboolean.t) ->
            fun ~data:(x8878 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8879 : GLuint.t option) ->
                fun ?srcLength:(x8880 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8888 = this_to_js Obj.magic x8886 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8888 "uniformMatrix2x3fv")
                         "apply"
                         [|x8888;((let x8881 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8881 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8876)|]);
                                   ignore
                                     (Ojs.call x8881 "push"
                                        [|(GLboolean.t_to_js x8877)|]);
                                   ignore
                                     (Ojs.call x8881 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8878)|]);
                                   (match x8879 with
                                    | Some x8883 ->
                                        ignore
                                          (Ojs.call x8881 "push"
                                             [|(GLuint.t_to_js x8883)|])
                                    | None -> ());
                                   (match x8880 with
                                    | Some x8882 ->
                                        ignore
                                          (Ojs.call x8881 "push"
                                             [|(GLuint.t_to_js x8882)|])
                                    | None -> ());
                                   x8881))|])
    let (uniformMatrix2x4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8899 : 'tags this) ->
        fun ~location:(x8889 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8890 : GLboolean.t) ->
            fun ~data:(x8891 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8892 : GLuint.t option) ->
                fun ?srcLength:(x8893 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8901 = this_to_js Obj.magic x8899 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8901 "uniformMatrix2x4fv")
                         "apply"
                         [|x8901;((let x8894 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8894 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8889)|]);
                                   ignore
                                     (Ojs.call x8894 "push"
                                        [|(GLboolean.t_to_js x8890)|]);
                                   ignore
                                     (Ojs.call x8894 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8891)|]);
                                   (match x8892 with
                                    | Some x8896 ->
                                        ignore
                                          (Ojs.call x8894 "push"
                                             [|(GLuint.t_to_js x8896)|])
                                    | None -> ());
                                   (match x8893 with
                                    | Some x8895 ->
                                        ignore
                                          (Ojs.call x8894 "push"
                                             [|(GLuint.t_to_js x8895)|])
                                    | None -> ());
                                   x8894))|])
    let (uniformMatrix3x2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8912 : 'tags this) ->
        fun ~location:(x8902 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8903 : GLboolean.t) ->
            fun ~data:(x8904 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8905 : GLuint.t option) ->
                fun ?srcLength:(x8906 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8914 = this_to_js Obj.magic x8912 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8914 "uniformMatrix3x2fv")
                         "apply"
                         [|x8914;((let x8907 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8907 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8902)|]);
                                   ignore
                                     (Ojs.call x8907 "push"
                                        [|(GLboolean.t_to_js x8903)|]);
                                   ignore
                                     (Ojs.call x8907 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8904)|]);
                                   (match x8905 with
                                    | Some x8909 ->
                                        ignore
                                          (Ojs.call x8907 "push"
                                             [|(GLuint.t_to_js x8909)|])
                                    | None -> ());
                                   (match x8906 with
                                    | Some x8908 ->
                                        ignore
                                          (Ojs.call x8907 "push"
                                             [|(GLuint.t_to_js x8908)|])
                                    | None -> ());
                                   x8907))|])
    let (uniformMatrix3x4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8925 : 'tags this) ->
        fun ~location:(x8915 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8916 : GLboolean.t) ->
            fun ~data:(x8917 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8918 : GLuint.t option) ->
                fun ?srcLength:(x8919 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8927 = this_to_js Obj.magic x8925 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8927 "uniformMatrix3x4fv")
                         "apply"
                         [|x8927;((let x8920 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8920 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8915)|]);
                                   ignore
                                     (Ojs.call x8920 "push"
                                        [|(GLboolean.t_to_js x8916)|]);
                                   ignore
                                     (Ojs.call x8920 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8917)|]);
                                   (match x8918 with
                                    | Some x8922 ->
                                        ignore
                                          (Ojs.call x8920 "push"
                                             [|(GLuint.t_to_js x8922)|])
                                    | None -> ());
                                   (match x8919 with
                                    | Some x8921 ->
                                        ignore
                                          (Ojs.call x8920 "push"
                                             [|(GLuint.t_to_js x8921)|])
                                    | None -> ());
                                   x8920))|])
    let (uniformMatrix4x2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8938 : 'tags this) ->
        fun ~location:(x8928 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8929 : GLboolean.t) ->
            fun ~data:(x8930 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8931 : GLuint.t option) ->
                fun ?srcLength:(x8932 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8940 = this_to_js Obj.magic x8938 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8940 "uniformMatrix4x2fv")
                         "apply"
                         [|x8940;((let x8933 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8933 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8928)|]);
                                   ignore
                                     (Ojs.call x8933 "push"
                                        [|(GLboolean.t_to_js x8929)|]);
                                   ignore
                                     (Ojs.call x8933 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8930)|]);
                                   (match x8931 with
                                    | Some x8935 ->
                                        ignore
                                          (Ojs.call x8933 "push"
                                             [|(GLuint.t_to_js x8935)|])
                                    | None -> ());
                                   (match x8932 with
                                    | Some x8934 ->
                                        ignore
                                          (Ojs.call x8933 "push"
                                             [|(GLuint.t_to_js x8934)|])
                                    | None -> ());
                                   x8933))|])
    let (uniformMatrix4x3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8951 : 'tags this) ->
        fun ~location:(x8941 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8942 : GLboolean.t) ->
            fun ~data:(x8943 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8944 : GLuint.t option) ->
                fun ?srcLength:(x8945 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8953 = this_to_js Obj.magic x8951 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8953 "uniformMatrix4x3fv")
                         "apply"
                         [|x8953;((let x8946 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8946 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8941)|]);
                                   ignore
                                     (Ojs.call x8946 "push"
                                        [|(GLboolean.t_to_js x8942)|]);
                                   ignore
                                     (Ojs.call x8946 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8943)|]);
                                   (match x8944 with
                                    | Some x8948 ->
                                        ignore
                                          (Ojs.call x8946 "push"
                                             [|(GLuint.t_to_js x8948)|])
                                    | None -> ());
                                   (match x8945 with
                                    | Some x8947 ->
                                        ignore
                                          (Ojs.call x8946 "push"
                                             [|(GLuint.t_to_js x8947)|])
                                    | None -> ());
                                   x8946))|])
    let (vertexAttribI4iv :
      'tags this -> index:GLuint.t -> values:GLint.t Iterable.t_1 -> unit) =
      fun (x8957 : 'tags this) ->
        fun ~index:(x8954 : GLuint.t) ->
          fun ~values:(x8955 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8957) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x8954);(Iterable.t_1_to_js GLint.t_to_js
                                             x8955)|])
    let (vertexAttribI4uiv :
      'tags this -> index:GLuint.t -> values:GLuint.t Iterable.t_1 -> unit) =
      fun (x8962 : 'tags this) ->
        fun ~index:(x8959 : GLuint.t) ->
          fun ~values:(x8960 : GLuint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8962) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x8959);(Iterable.t_1_to_js GLuint.t_to_js
                                             x8960)|])
    let (beginQuery :
      'tags this -> target:GLenum.t -> query:WebGLQuery.t -> unit) =
      fun (x8966 : 'tags this) ->
        fun ~target:(x8964 : GLenum.t) ->
          fun ~query:(x8965 : WebGLQuery.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8966) "beginQuery"
                 [|(GLenum.t_to_js x8964);(WebGLQuery.t_to_js x8965)|])
    let (beginTransformFeedback :
      'tags this -> primitiveMode:GLenum.t -> unit) =
      fun (x8969 : 'tags this) ->
        fun ~primitiveMode:(x8968 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8969) "beginTransformFeedback"
               [|(GLenum.t_to_js x8968)|])
    let (bindBufferBase :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t -> buffer:WebGLBuffer.t option -> unit)
      =
      fun (x8975 : 'tags this) ->
        fun ~target:(x8971 : GLenum.t) ->
          fun ~index:(x8972 : GLuint.t) ->
            fun ~buffer:(x8973 : WebGLBuffer.t option) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8975) "bindBufferBase"
                   [|(GLenum.t_to_js x8971);(GLuint.t_to_js x8972);(Ojs.option_to_js
                                                                    WebGLBuffer.t_to_js
                                                                    x8973)|])
    let (bindBufferRange :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t ->
            buffer:WebGLBuffer.t option ->
              offset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x8983 : 'tags this) ->
        fun ~target:(x8977 : GLenum.t) ->
          fun ~index:(x8978 : GLuint.t) ->
            fun ~buffer:(x8979 : WebGLBuffer.t option) ->
              fun ~offset:(x8981 : GLintptr.t) ->
                fun ~size:(x8982 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8983) "bindBufferRange"
                       [|(GLenum.t_to_js x8977);(GLuint.t_to_js x8978);(
                         Ojs.option_to_js WebGLBuffer.t_to_js x8979);(
                         GLintptr.t_to_js x8981);(GLsizeiptr.t_to_js x8982)|])
    let (bindSampler :
      'tags this -> unit:GLuint.t -> sampler:WebGLSampler.t option -> unit) =
      fun (x8988 : 'tags this) ->
        fun ~unit:(x8985 : GLuint.t) ->
          fun ~sampler:(x8986 : WebGLSampler.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8988) "bindSampler"
                 [|(GLuint.t_to_js x8985);(Ojs.option_to_js
                                             WebGLSampler.t_to_js x8986)|])
    let (bindTransformFeedback :
      'tags this ->
        target:GLenum.t -> tf:WebGLTransformFeedback.t option -> unit)
      =
      fun (x8993 : 'tags this) ->
        fun ~target:(x8990 : GLenum.t) ->
          fun ~tf:(x8991 : WebGLTransformFeedback.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8993) "bindTransformFeedback"
                 [|(GLenum.t_to_js x8990);(Ojs.option_to_js
                                             WebGLTransformFeedback.t_to_js
                                             x8991)|])
    let (bindVertexArray :
      'tags this -> array:WebGLVertexArrayObject.t option -> unit) =
      fun (x8997 : 'tags this) ->
        fun ~array:(x8995 : WebGLVertexArrayObject.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8997) "bindVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x8995)|])
    let (blitFramebuffer :
      'tags this ->
        srcX0:GLint.t ->
          srcY0:GLint.t ->
            srcX1:GLint.t ->
              srcY1:GLint.t ->
                dstX0:GLint.t ->
                  dstY0:GLint.t ->
                    dstX1:GLint.t ->
                      dstY1:GLint.t ->
                        mask:GLbitfield.t -> filter:GLenum.t -> unit)
      =
      fun (x9009 : 'tags this) ->
        fun ~srcX0:(x8999 : GLint.t) ->
          fun ~srcY0:(x9000 : GLint.t) ->
            fun ~srcX1:(x9001 : GLint.t) ->
              fun ~srcY1:(x9002 : GLint.t) ->
                fun ~dstX0:(x9003 : GLint.t) ->
                  fun ~dstY0:(x9004 : GLint.t) ->
                    fun ~dstX1:(x9005 : GLint.t) ->
                      fun ~dstY1:(x9006 : GLint.t) ->
                        fun ~mask:(x9007 : GLbitfield.t) ->
                          fun ~filter:(x9008 : GLenum.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9009)
                                 "blitFramebuffer"
                                 [|(GLint.t_to_js x8999);(GLint.t_to_js x9000);(
                                   GLint.t_to_js x9001);(GLint.t_to_js x9002);(
                                   GLint.t_to_js x9003);(GLint.t_to_js x9004);(
                                   GLint.t_to_js x9005);(GLint.t_to_js x9006);(
                                   GLbitfield.t_to_js x9007);(GLenum.t_to_js
                                                                x9008)|])
    let (clearBufferfi :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t -> depth:GLfloat.t -> stencil:GLint.t -> unit)
      =
      fun (x9015 : 'tags this) ->
        fun ~buffer:(x9011 : GLenum.t) ->
          fun ~drawbuffer:(x9012 : GLint.t) ->
            fun ~depth:(x9013 : GLfloat.t) ->
              fun ~stencil:(x9014 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9015) "clearBufferfi"
                     [|(GLenum.t_to_js x9011);(GLint.t_to_js x9012);(
                       GLfloat.t_to_js x9013);(GLint.t_to_js x9014)|])
    let (clearBufferfv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Float32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9023 : 'tags this) ->
        fun ~buffer:(x9017 : GLenum.t) ->
          fun ~drawbuffer:(x9018 : GLint.t) ->
            fun ~values:(x9019 : Float32List.t) ->
              fun ?srcOffset:(x9020 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9025 = this_to_js Obj.magic x9023 in
                     Ojs.call (Ojs.get_prop_ascii x9025 "clearBufferfv")
                       "apply"
                       [|x9025;((let x9021 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9021 "push"
                                      [|(GLenum.t_to_js x9017)|]);
                                 ignore
                                   (Ojs.call x9021 "push"
                                      [|(GLint.t_to_js x9018)|]);
                                 ignore
                                   (Ojs.call x9021 "push"
                                      [|(Float32List.t_to_js x9019)|]);
                                 (match x9020 with
                                  | Some x9022 ->
                                      ignore
                                        (Ojs.call x9021 "push"
                                           [|(GLuint.t_to_js x9022)|])
                                  | None -> ());
                                 x9021))|])
    let (clearBufferiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Int32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9032 : 'tags this) ->
        fun ~buffer:(x9026 : GLenum.t) ->
          fun ~drawbuffer:(x9027 : GLint.t) ->
            fun ~values:(x9028 : Int32List.t) ->
              fun ?srcOffset:(x9029 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9034 = this_to_js Obj.magic x9032 in
                     Ojs.call (Ojs.get_prop_ascii x9034 "clearBufferiv")
                       "apply"
                       [|x9034;((let x9030 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9030 "push"
                                      [|(GLenum.t_to_js x9026)|]);
                                 ignore
                                   (Ojs.call x9030 "push"
                                      [|(GLint.t_to_js x9027)|]);
                                 ignore
                                   (Ojs.call x9030 "push"
                                      [|(Int32List.t_to_js x9028)|]);
                                 (match x9029 with
                                  | Some x9031 ->
                                      ignore
                                        (Ojs.call x9030 "push"
                                           [|(GLuint.t_to_js x9031)|])
                                  | None -> ());
                                 x9030))|])
    let (clearBufferuiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Uint32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9041 : 'tags this) ->
        fun ~buffer:(x9035 : GLenum.t) ->
          fun ~drawbuffer:(x9036 : GLint.t) ->
            fun ~values:(x9037 : Uint32List.t) ->
              fun ?srcOffset:(x9038 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9043 = this_to_js Obj.magic x9041 in
                     Ojs.call (Ojs.get_prop_ascii x9043 "clearBufferuiv")
                       "apply"
                       [|x9043;((let x9039 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9039 "push"
                                      [|(GLenum.t_to_js x9035)|]);
                                 ignore
                                   (Ojs.call x9039 "push"
                                      [|(GLint.t_to_js x9036)|]);
                                 ignore
                                   (Ojs.call x9039 "push"
                                      [|(Uint32List.t_to_js x9037)|]);
                                 (match x9038 with
                                  | Some x9040 ->
                                      ignore
                                        (Ojs.call x9039 "push"
                                           [|(GLuint.t_to_js x9040)|])
                                  | None -> ());
                                 x9039))|])
    let (clientWaitSync :
      'tags this ->
        sync:WebGLSync.t ->
          flags:GLbitfield.t -> timeout:GLuint64.t -> GLenum.t)
      =
      fun (x9047 : 'tags this) ->
        fun ~sync:(x9044 : WebGLSync.t) ->
          fun ~flags:(x9045 : GLbitfield.t) ->
            fun ~timeout:(x9046 : GLuint64.t) ->
              GLenum.t_of_js
                (Ojs.call (this_to_js Obj.magic x9047) "clientWaitSync"
                   [|(WebGLSync.t_to_js x9044);(GLbitfield.t_to_js x9045);(
                     GLuint64.t_to_js x9046)|])
    let (compressedTexImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9058 : 'tags this) ->
        fun ~target:(x9049 : GLenum.t) ->
          fun ~level:(x9050 : GLint.t) ->
            fun ~internalformat:(x9051 : GLenum.t) ->
              fun ~width:(x9052 : GLsizei.t) ->
                fun ~height:(x9053 : GLsizei.t) ->
                  fun ~depth:(x9054 : GLsizei.t) ->
                    fun ~border:(x9055 : GLint.t) ->
                      fun ~imageSize:(x9056 : GLsizei.t) ->
                        fun ~offset:(x9057 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x9058)
                               "compressedTexImage3D"
                               [|(GLenum.t_to_js x9049);(GLint.t_to_js x9050);(
                                 GLenum.t_to_js x9051);(GLsizei.t_to_js x9052);(
                                 GLsizei.t_to_js x9053);(GLsizei.t_to_js
                                                           x9054);(GLint.t_to_js
                                                                    x9055);(
                                 GLsizei.t_to_js x9056);(GLintptr.t_to_js
                                                           x9057)|])
    let (compressedTexImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x9073 : 'tags this) ->
        fun ~target:(x9060 : GLenum.t) ->
          fun ~level:(x9061 : GLint.t) ->
            fun ~internalformat:(x9062 : GLenum.t) ->
              fun ~width:(x9063 : GLsizei.t) ->
                fun ~height:(x9064 : GLsizei.t) ->
                  fun ~depth:(x9065 : GLsizei.t) ->
                    fun ~border:(x9066 : GLint.t) ->
                      fun ~srcData:(x9067 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x9068 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x9069 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x9075 = this_to_js Obj.magic x9073 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x9075
                                      "compressedTexImage3D") "apply"
                                   [|x9075;((let x9070 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x9070 "push"
                                                  [|(GLenum.t_to_js x9060)|]);
                                             ignore
                                               (Ojs.call x9070 "push"
                                                  [|(GLint.t_to_js x9061)|]);
                                             ignore
                                               (Ojs.call x9070 "push"
                                                  [|(GLenum.t_to_js x9062)|]);
                                             ignore
                                               (Ojs.call x9070 "push"
                                                  [|(GLsizei.t_to_js x9063)|]);
                                             ignore
                                               (Ojs.call x9070 "push"
                                                  [|(GLsizei.t_to_js x9064)|]);
                                             ignore
                                               (Ojs.call x9070 "push"
                                                  [|(GLsizei.t_to_js x9065)|]);
                                             ignore
                                               (Ojs.call x9070 "push"
                                                  [|(GLint.t_to_js x9066)|]);
                                             ignore
                                               (Ojs.call x9070 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x9067)|]);
                                             (match x9068 with
                                              | Some x9072 ->
                                                  ignore
                                                    (Ojs.call x9070 "push"
                                                       [|(GLuint.t_to_js
                                                            x9072)|])
                                              | None -> ());
                                             (match x9069 with
                                              | Some x9071 ->
                                                  ignore
                                                    (Ojs.call x9070 "push"
                                                       [|(GLuint.t_to_js
                                                            x9071)|])
                                              | None -> ());
                                             x9070))|])
    let (compressedTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9087 : 'tags this) ->
        fun ~target:(x9076 : GLenum.t) ->
          fun ~level:(x9077 : GLint.t) ->
            fun ~xoffset:(x9078 : GLint.t) ->
              fun ~yoffset:(x9079 : GLint.t) ->
                fun ~zoffset:(x9080 : GLint.t) ->
                  fun ~width:(x9081 : GLsizei.t) ->
                    fun ~height:(x9082 : GLsizei.t) ->
                      fun ~depth:(x9083 : GLsizei.t) ->
                        fun ~format:(x9084 : GLenum.t) ->
                          fun ~imageSize:(x9085 : GLsizei.t) ->
                            fun ~offset:(x9086 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9087)
                                   "compressedTexSubImage3D"
                                   [|(GLenum.t_to_js x9076);(GLint.t_to_js
                                                               x9077);(
                                     GLint.t_to_js x9078);(GLint.t_to_js
                                                             x9079);(
                                     GLint.t_to_js x9080);(GLsizei.t_to_js
                                                             x9081);(
                                     GLsizei.t_to_js x9082);(GLsizei.t_to_js
                                                               x9083);(
                                     GLenum.t_to_js x9084);(GLsizei.t_to_js
                                                              x9085);(
                                     GLintptr.t_to_js x9086)|])
    let (compressedTexSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            ?srcOffset:GLuint.t ->
                              ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x9104 : 'tags this) ->
        fun ~target:(x9089 : GLenum.t) ->
          fun ~level:(x9090 : GLint.t) ->
            fun ~xoffset:(x9091 : GLint.t) ->
              fun ~yoffset:(x9092 : GLint.t) ->
                fun ~zoffset:(x9093 : GLint.t) ->
                  fun ~width:(x9094 : GLsizei.t) ->
                    fun ~height:(x9095 : GLsizei.t) ->
                      fun ~depth:(x9096 : GLsizei.t) ->
                        fun ~format:(x9097 : GLenum.t) ->
                          fun ~srcData:(x9098 : ArrayBufferView.t_0) ->
                            fun ?srcOffset:(x9099 : GLuint.t option) ->
                              fun
                                ?srcLengthOverride:(x9100 : GLuint.t option)
                                ->
                                fun () ->
                                  ignore
                                    (let x9106 = this_to_js Obj.magic x9104 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x9106
                                          "compressedTexSubImage3D") "apply"
                                       [|x9106;((let x9101 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x9101 "push"
                                                      [|(GLenum.t_to_js x9089)|]);
                                                 ignore
                                                   (Ojs.call x9101 "push"
                                                      [|(GLint.t_to_js x9090)|]);
                                                 ignore
                                                   (Ojs.call x9101 "push"
                                                      [|(GLint.t_to_js x9091)|]);
                                                 ignore
                                                   (Ojs.call x9101 "push"
                                                      [|(GLint.t_to_js x9092)|]);
                                                 ignore
                                                   (Ojs.call x9101 "push"
                                                      [|(GLint.t_to_js x9093)|]);
                                                 ignore
                                                   (Ojs.call x9101 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9094)|]);
                                                 ignore
                                                   (Ojs.call x9101 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9095)|]);
                                                 ignore
                                                   (Ojs.call x9101 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9096)|]);
                                                 ignore
                                                   (Ojs.call x9101 "push"
                                                      [|(GLenum.t_to_js x9097)|]);
                                                 ignore
                                                   (Ojs.call x9101 "push"
                                                      [|(ArrayBufferView.t_0_to_js
                                                           x9098)|]);
                                                 (match x9099 with
                                                  | Some x9103 ->
                                                      ignore
                                                        (Ojs.call x9101
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9103)|])
                                                  | None -> ());
                                                 (match x9100 with
                                                  | Some x9102 ->
                                                      ignore
                                                        (Ojs.call x9101
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9102)|])
                                                  | None -> ());
                                                 x9101))|])
    let (copyBufferSubData :
      'tags this ->
        readTarget:GLenum.t ->
          writeTarget:GLenum.t ->
            readOffset:GLintptr.t ->
              writeOffset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x9112 : 'tags this) ->
        fun ~readTarget:(x9107 : GLenum.t) ->
          fun ~writeTarget:(x9108 : GLenum.t) ->
            fun ~readOffset:(x9109 : GLintptr.t) ->
              fun ~writeOffset:(x9110 : GLintptr.t) ->
                fun ~size:(x9111 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9112)
                       "copyBufferSubData"
                       [|(GLenum.t_to_js x9107);(GLenum.t_to_js x9108);(
                         GLintptr.t_to_js x9109);(GLintptr.t_to_js x9110);(
                         GLsizeiptr.t_to_js x9111)|])
    let (copyTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  x:GLint.t ->
                    y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9123 : 'tags this) ->
        fun ~target:(x9114 : GLenum.t) ->
          fun ~level:(x9115 : GLint.t) ->
            fun ~xoffset:(x9116 : GLint.t) ->
              fun ~yoffset:(x9117 : GLint.t) ->
                fun ~zoffset:(x9118 : GLint.t) ->
                  fun ~x:(x9119 : GLint.t) ->
                    fun ~y:(x9120 : GLint.t) ->
                      fun ~width:(x9121 : GLsizei.t) ->
                        fun ~height:(x9122 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x9123)
                               "copyTexSubImage3D"
                               [|(GLenum.t_to_js x9114);(GLint.t_to_js x9115);(
                                 GLint.t_to_js x9116);(GLint.t_to_js x9117);(
                                 GLint.t_to_js x9118);(GLint.t_to_js x9119);(
                                 GLint.t_to_js x9120);(GLsizei.t_to_js x9121);(
                                 GLsizei.t_to_js x9122)|])
    let (createQuery : 'tags this -> WebGLQuery.t option) =
      fun (x9125 : 'tags this) ->
        Ojs.option_of_js WebGLQuery.t_of_js
          (Ojs.call (this_to_js Obj.magic x9125) "createQuery" [||])
    let (createSampler : 'tags this -> WebGLSampler.t option) =
      fun (x9128 : 'tags this) ->
        Ojs.option_of_js WebGLSampler.t_of_js
          (Ojs.call (this_to_js Obj.magic x9128) "createSampler" [||])
    let (createTransformFeedback :
      'tags this -> WebGLTransformFeedback.t option) =
      fun (x9131 : 'tags this) ->
        Ojs.option_of_js WebGLTransformFeedback.t_of_js
          (Ojs.call (this_to_js Obj.magic x9131) "createTransformFeedback"
             [||])
    let (createVertexArray : 'tags this -> WebGLVertexArrayObject.t option) =
      fun (x9134 : 'tags this) ->
        Ojs.option_of_js WebGLVertexArrayObject.t_of_js
          (Ojs.call (this_to_js Obj.magic x9134) "createVertexArray" [||])
    let (deleteQuery : 'tags this -> query:WebGLQuery.t option -> unit) =
      fun (x9139 : 'tags this) ->
        fun ~query:(x9137 : WebGLQuery.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9139) "deleteQuery"
               [|(Ojs.option_to_js WebGLQuery.t_to_js x9137)|])
    let (deleteSampler : 'tags this -> sampler:WebGLSampler.t option -> unit)
      =
      fun (x9143 : 'tags this) ->
        fun ~sampler:(x9141 : WebGLSampler.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9143) "deleteSampler"
               [|(Ojs.option_to_js WebGLSampler.t_to_js x9141)|])
    let (deleteSync : 'tags this -> sync:WebGLSync.t option -> unit) =
      fun (x9147 : 'tags this) ->
        fun ~sync:(x9145 : WebGLSync.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9147) "deleteSync"
               [|(Ojs.option_to_js WebGLSync.t_to_js x9145)|])
    let (deleteTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t option -> unit) =
      fun (x9151 : 'tags this) ->
        fun ~tf:(x9149 : WebGLTransformFeedback.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9151) "deleteTransformFeedback"
               [|(Ojs.option_to_js WebGLTransformFeedback.t_to_js x9149)|])
    let (deleteVertexArray :
      'tags this -> vertexArray:WebGLVertexArrayObject.t option -> unit) =
      fun (x9155 : 'tags this) ->
        fun ~vertexArray:(x9153 : WebGLVertexArrayObject.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9155) "deleteVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9153)|])
    let (drawArraysInstanced :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x9161 : 'tags this) ->
        fun ~mode:(x9157 : GLenum.t) ->
          fun ~first:(x9158 : GLint.t) ->
            fun ~count:(x9159 : GLsizei.t) ->
              fun ~instanceCount:(x9160 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9161)
                     "drawArraysInstanced"
                     [|(GLenum.t_to_js x9157);(GLint.t_to_js x9158);(
                       GLsizei.t_to_js x9159);(GLsizei.t_to_js x9160)|])
    let (drawBuffers' : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x9165 : 'tags this) ->
        fun ~buffers:(x9163 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9165) "drawBuffers"
               [|(Ojs.list_to_js GLenum.t_to_js x9163)|])
    let (drawElementsInstanced :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x9172 : 'tags this) ->
        fun ~mode:(x9167 : GLenum.t) ->
          fun ~count:(x9168 : GLsizei.t) ->
            fun ~type_:(x9169 : GLenum.t) ->
              fun ~offset:(x9170 : GLintptr.t) ->
                fun ~instanceCount:(x9171 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9172)
                       "drawElementsInstanced"
                       [|(GLenum.t_to_js x9167);(GLsizei.t_to_js x9168);(
                         GLenum.t_to_js x9169);(GLintptr.t_to_js x9170);(
                         GLsizei.t_to_js x9171)|])
    let (drawRangeElements :
      'tags this ->
        mode:GLenum.t ->
          start:GLuint.t ->
            end_:GLuint.t ->
              count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x9180 : 'tags this) ->
        fun ~mode:(x9174 : GLenum.t) ->
          fun ~start:(x9175 : GLuint.t) ->
            fun ~end_:(x9176 : GLuint.t) ->
              fun ~count:(x9177 : GLsizei.t) ->
                fun ~type_:(x9178 : GLenum.t) ->
                  fun ~offset:(x9179 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9180)
                         "drawRangeElements"
                         [|(GLenum.t_to_js x9174);(GLuint.t_to_js x9175);(
                           GLuint.t_to_js x9176);(GLsizei.t_to_js x9177);(
                           GLenum.t_to_js x9178);(GLintptr.t_to_js x9179)|])
    let (endQuery : 'tags this -> target:GLenum.t -> unit) =
      fun (x9183 : 'tags this) ->
        fun ~target:(x9182 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9183) "endQuery"
               [|(GLenum.t_to_js x9182)|])
    let (endTransformFeedback : 'tags this -> unit) =
      fun (x9185 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9185) "endTransformFeedback" [||])
    let (fenceSync :
      'tags this ->
        condition:GLenum.t -> flags:GLbitfield.t -> WebGLSync.t option)
      =
      fun (x9189 : 'tags this) ->
        fun ~condition:(x9187 : GLenum.t) ->
          fun ~flags:(x9188 : GLbitfield.t) ->
            Ojs.option_of_js WebGLSync.t_of_js
              (Ojs.call (this_to_js Obj.magic x9189) "fenceSync"
                 [|(GLenum.t_to_js x9187);(GLbitfield.t_to_js x9188)|])
    let (framebufferTextureLayer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t option ->
              level:GLint.t -> layer:GLint.t -> unit)
      =
      fun (x9198 : 'tags this) ->
        fun ~target:(x9192 : GLenum.t) ->
          fun ~attachment:(x9193 : GLenum.t) ->
            fun ~texture:(x9194 : WebGLTexture.t option) ->
              fun ~level:(x9196 : GLint.t) ->
                fun ~layer:(x9197 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9198)
                       "framebufferTextureLayer"
                       [|(GLenum.t_to_js x9192);(GLenum.t_to_js x9193);(
                         Ojs.option_to_js WebGLTexture.t_to_js x9194);(
                         GLint.t_to_js x9196);(GLint.t_to_js x9197)|])
    let (getActiveUniformBlockName :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockIndex:GLuint.t -> string option)
      =
      fun (x9202 : 'tags this) ->
        fun ~program:(x9200 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9201 : GLuint.t) ->
            Ojs.option_of_js Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x9202)
                 "getActiveUniformBlockName"
                 [|(WebGLProgram.t_to_js x9200);(GLuint.t_to_js x9201)|])
    let (getActiveUniformBlockParameter :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> pname:GLenum.t -> any)
      =
      fun (x9208 : 'tags this) ->
        fun ~program:(x9205 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9206 : GLuint.t) ->
            fun ~pname:(x9207 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9208)
                   "getActiveUniformBlockParameter"
                   [|(WebGLProgram.t_to_js x9205);(GLuint.t_to_js x9206);(
                     GLenum.t_to_js x9207)|])
    let (getActiveUniforms' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t list -> pname:GLenum.t -> any)
      =
      fun (x9214 : 'tags this) ->
        fun ~program:(x9210 : WebGLProgram.t) ->
          fun ~uniformIndices:(x9211 : GLuint.t list) ->
            fun ~pname:(x9213 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9214) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x9210);(Ojs.list_to_js
                                                     GLuint.t_to_js x9211);(
                     GLenum.t_to_js x9213)|])
    let (getBufferSubData :
      'tags this ->
        target:GLenum.t ->
          srcByteOffset:GLintptr.t ->
            dstBuffer:ArrayBufferView.t_0 ->
              ?dstOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x9224 : 'tags this) ->
        fun ~target:(x9216 : GLenum.t) ->
          fun ~srcByteOffset:(x9217 : GLintptr.t) ->
            fun ~dstBuffer:(x9218 : ArrayBufferView.t_0) ->
              fun ?dstOffset:(x9219 : GLuint.t option) ->
                fun ?length:(x9220 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9226 = this_to_js Obj.magic x9224 in
                       Ojs.call (Ojs.get_prop_ascii x9226 "getBufferSubData")
                         "apply"
                         [|x9226;((let x9221 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9221 "push"
                                        [|(GLenum.t_to_js x9216)|]);
                                   ignore
                                     (Ojs.call x9221 "push"
                                        [|(GLintptr.t_to_js x9217)|]);
                                   ignore
                                     (Ojs.call x9221 "push"
                                        [|(ArrayBufferView.t_0_to_js x9218)|]);
                                   (match x9219 with
                                    | Some x9223 ->
                                        ignore
                                          (Ojs.call x9221 "push"
                                             [|(GLuint.t_to_js x9223)|])
                                    | None -> ());
                                   (match x9220 with
                                    | Some x9222 ->
                                        ignore
                                          (Ojs.call x9221 "push"
                                             [|(GLuint.t_to_js x9222)|])
                                    | None -> ());
                                   x9221))|])
    let (getFragDataLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x9229 : 'tags this) ->
        fun ~program:(x9227 : WebGLProgram.t) ->
          fun ~name:(x9228 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x9229) "getFragDataLocation"
                 [|(WebGLProgram.t_to_js x9227);(Ojs.string_to_js x9228)|])
    let (getIndexedParameter :
      'tags this -> target:GLenum.t -> index:GLuint.t -> any) =
      fun (x9233 : 'tags this) ->
        fun ~target:(x9231 : GLenum.t) ->
          fun ~index:(x9232 : GLuint.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9233) "getIndexedParameter"
                 [|(GLenum.t_to_js x9231);(GLuint.t_to_js x9232)|])
    let (getInternalformatParameter :
      'tags this ->
        target:GLenum.t -> internalformat:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x9238 : 'tags this) ->
        fun ~target:(x9235 : GLenum.t) ->
          fun ~internalformat:(x9236 : GLenum.t) ->
            fun ~pname:(x9237 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9238)
                   "getInternalformatParameter"
                   [|(GLenum.t_to_js x9235);(GLenum.t_to_js x9236);(GLenum.t_to_js
                                                                    x9237)|])
    let (getQuery :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> WebGLQuery.t option)
      =
      fun (x9242 : 'tags this) ->
        fun ~target:(x9240 : GLenum.t) ->
          fun ~pname:(x9241 : GLenum.t) ->
            Ojs.option_of_js WebGLQuery.t_of_js
              (Ojs.call (this_to_js Obj.magic x9242) "getQuery"
                 [|(GLenum.t_to_js x9240);(GLenum.t_to_js x9241)|])
    let (getQueryParameter :
      'tags this -> query:WebGLQuery.t -> pname:GLenum.t -> any) =
      fun (x9247 : 'tags this) ->
        fun ~query:(x9245 : WebGLQuery.t) ->
          fun ~pname:(x9246 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9247) "getQueryParameter"
                 [|(WebGLQuery.t_to_js x9245);(GLenum.t_to_js x9246)|])
    let (getSamplerParameter :
      'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> any) =
      fun (x9251 : 'tags this) ->
        fun ~sampler:(x9249 : WebGLSampler.t) ->
          fun ~pname:(x9250 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9251) "getSamplerParameter"
                 [|(WebGLSampler.t_to_js x9249);(GLenum.t_to_js x9250)|])
    let (getSyncParameter :
      'tags this -> sync:WebGLSync.t -> pname:GLenum.t -> any) =
      fun (x9255 : 'tags this) ->
        fun ~sync:(x9253 : WebGLSync.t) ->
          fun ~pname:(x9254 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9255) "getSyncParameter"
                 [|(WebGLSync.t_to_js x9253);(GLenum.t_to_js x9254)|])
    let (getTransformFeedbackVarying :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x9259 : 'tags this) ->
        fun ~program:(x9257 : WebGLProgram.t) ->
          fun ~index:(x9258 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x9259)
                 "getTransformFeedbackVarying"
                 [|(WebGLProgram.t_to_js x9257);(GLuint.t_to_js x9258)|])
    let (getUniformBlockIndex :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockName:string -> GLuint.t)
      =
      fun (x9264 : 'tags this) ->
        fun ~program:(x9262 : WebGLProgram.t) ->
          fun ~uniformBlockName:(x9263 : string) ->
            GLuint.t_of_js
              (Ojs.call (this_to_js Obj.magic x9264) "getUniformBlockIndex"
                 [|(WebGLProgram.t_to_js x9262);(Ojs.string_to_js x9263)|])
    let (getUniformIndices' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string list -> GLuint.t list option)
      =
      fun (x9269 : 'tags this) ->
        fun ~program:(x9266 : WebGLProgram.t) ->
          fun ~uniformNames:(x9267 : string list) ->
            Ojs.option_of_js
              (fun (x9271 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x9271)
              (Ojs.call (this_to_js Obj.magic x9269) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x9266);(Ojs.list_to_js
                                                   Ojs.string_to_js x9267)|])
    let (invalidateFramebuffer' :
      'tags this -> target:GLenum.t -> attachments:GLenum.t list -> unit) =
      fun (x9276 : 'tags this) ->
        fun ~target:(x9273 : GLenum.t) ->
          fun ~attachments:(x9274 : GLenum.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9276) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x9273);(Ojs.list_to_js GLenum.t_to_js
                                             x9274)|])
    let (invalidateSubFramebuffer' :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t list ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9285 : 'tags this) ->
        fun ~target:(x9278 : GLenum.t) ->
          fun ~attachments:(x9279 : GLenum.t list) ->
            fun ~x:(x9281 : GLint.t) ->
              fun ~y:(x9282 : GLint.t) ->
                fun ~width:(x9283 : GLsizei.t) ->
                  fun ~height:(x9284 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9285)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x9278);(Ojs.list_to_js
                                                     GLenum.t_to_js x9279);(
                           GLint.t_to_js x9281);(GLint.t_to_js x9282);(
                           GLsizei.t_to_js x9283);(GLsizei.t_to_js x9284)|])
    let (isQuery : 'tags this -> query:WebGLQuery.t option -> GLboolean.t) =
      fun (x9289 : 'tags this) ->
        fun ~query:(x9287 : WebGLQuery.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9289) "isQuery"
               [|(Ojs.option_to_js WebGLQuery.t_to_js x9287)|])
    let (isSampler :
      'tags this -> sampler:WebGLSampler.t option -> GLboolean.t) =
      fun (x9293 : 'tags this) ->
        fun ~sampler:(x9291 : WebGLSampler.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9293) "isSampler"
               [|(Ojs.option_to_js WebGLSampler.t_to_js x9291)|])
    let (isSync : 'tags this -> sync:WebGLSync.t option -> GLboolean.t) =
      fun (x9297 : 'tags this) ->
        fun ~sync:(x9295 : WebGLSync.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9297) "isSync"
               [|(Ojs.option_to_js WebGLSync.t_to_js x9295)|])
    let (isTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t option -> GLboolean.t) =
      fun (x9301 : 'tags this) ->
        fun ~tf:(x9299 : WebGLTransformFeedback.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9301) "isTransformFeedback"
               [|(Ojs.option_to_js WebGLTransformFeedback.t_to_js x9299)|])
    let (isVertexArray :
      'tags this ->
        vertexArray:WebGLVertexArrayObject.t option -> GLboolean.t)
      =
      fun (x9305 : 'tags this) ->
        fun ~vertexArray:(x9303 : WebGLVertexArrayObject.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9305) "isVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9303)|])
    let (pauseTransformFeedback : 'tags this -> unit) =
      fun (x9307 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9307) "pauseTransformFeedback"
             [||])
    let (readBuffer : 'tags this -> src:GLenum.t -> unit) =
      fun (x9310 : 'tags this) ->
        fun ~src:(x9309 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9310) "readBuffer"
               [|(GLenum.t_to_js x9309)|])
    let (renderbufferStorageMultisample :
      'tags this ->
        target:GLenum.t ->
          samples:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9317 : 'tags this) ->
        fun ~target:(x9312 : GLenum.t) ->
          fun ~samples:(x9313 : GLsizei.t) ->
            fun ~internalformat:(x9314 : GLenum.t) ->
              fun ~width:(x9315 : GLsizei.t) ->
                fun ~height:(x9316 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9317)
                       "renderbufferStorageMultisample"
                       [|(GLenum.t_to_js x9312);(GLsizei.t_to_js x9313);(
                         GLenum.t_to_js x9314);(GLsizei.t_to_js x9315);(
                         GLsizei.t_to_js x9316)|])
    let (resumeTransformFeedback : 'tags this -> unit) =
      fun (x9319 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9319) "resumeTransformFeedback"
             [||])
    let (samplerParameterf :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x9324 : 'tags this) ->
        fun ~sampler:(x9321 : WebGLSampler.t) ->
          fun ~pname:(x9322 : GLenum.t) ->
            fun ~param:(x9323 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9324) "samplerParameterf"
                   [|(WebGLSampler.t_to_js x9321);(GLenum.t_to_js x9322);(
                     GLfloat.t_to_js x9323)|])
    let (samplerParameteri :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x9329 : 'tags this) ->
        fun ~sampler:(x9326 : WebGLSampler.t) ->
          fun ~pname:(x9327 : GLenum.t) ->
            fun ~param:(x9328 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9329) "samplerParameteri"
                   [|(WebGLSampler.t_to_js x9326);(GLenum.t_to_js x9327);(
                     GLint.t_to_js x9328)|])
    let (texImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x9341 : 'tags this) ->
        fun ~target:(x9331 : GLenum.t) ->
          fun ~level:(x9332 : GLint.t) ->
            fun ~internalformat:(x9333 : GLint.t) ->
              fun ~width:(x9334 : GLsizei.t) ->
                fun ~height:(x9335 : GLsizei.t) ->
                  fun ~depth:(x9336 : GLsizei.t) ->
                    fun ~border:(x9337 : GLint.t) ->
                      fun ~format:(x9338 : GLenum.t) ->
                        fun ~type_:(x9339 : GLenum.t) ->
                          fun ~pboOffset:(x9340 : GLintptr.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9341)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9331);(GLint.t_to_js
                                                             x9332);(
                                   GLint.t_to_js x9333);(GLsizei.t_to_js
                                                           x9334);(GLsizei.t_to_js
                                                                    x9335);(
                                   GLsizei.t_to_js x9336);(GLint.t_to_js
                                                             x9337);(
                                   GLenum.t_to_js x9338);(GLenum.t_to_js
                                                            x9339);(GLintptr.t_to_js
                                                                    x9340)|])
    let (texImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x9353 : 'tags this) ->
        fun ~target:(x9343 : GLenum.t) ->
          fun ~level:(x9344 : GLint.t) ->
            fun ~internalformat:(x9345 : GLint.t) ->
              fun ~width:(x9346 : GLsizei.t) ->
                fun ~height:(x9347 : GLsizei.t) ->
                  fun ~depth:(x9348 : GLsizei.t) ->
                    fun ~border:(x9349 : GLint.t) ->
                      fun ~format:(x9350 : GLenum.t) ->
                        fun ~type_:(x9351 : GLenum.t) ->
                          fun ~source:(x9352 : TexImageSource.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9353)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9343);(GLint.t_to_js
                                                             x9344);(
                                   GLint.t_to_js x9345);(GLsizei.t_to_js
                                                           x9346);(GLsizei.t_to_js
                                                                    x9347);(
                                   GLsizei.t_to_js x9348);(GLint.t_to_js
                                                             x9349);(
                                   GLenum.t_to_js x9350);(GLenum.t_to_js
                                                            x9351);(TexImageSource.t_to_js
                                                                    x9352)|])
    let (texImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 option -> unit)
      =
      fun (x9366 : 'tags this) ->
        fun ~target:(x9355 : GLenum.t) ->
          fun ~level:(x9356 : GLint.t) ->
            fun ~internalformat:(x9357 : GLint.t) ->
              fun ~width:(x9358 : GLsizei.t) ->
                fun ~height:(x9359 : GLsizei.t) ->
                  fun ~depth:(x9360 : GLsizei.t) ->
                    fun ~border:(x9361 : GLint.t) ->
                      fun ~format:(x9362 : GLenum.t) ->
                        fun ~type_:(x9363 : GLenum.t) ->
                          fun ~srcData:(x9364 : ArrayBufferView.t_0 option)
                            ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9366)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9355);(GLint.t_to_js
                                                             x9356);(
                                   GLint.t_to_js x9357);(GLsizei.t_to_js
                                                           x9358);(GLsizei.t_to_js
                                                                    x9359);(
                                   GLsizei.t_to_js x9360);(GLint.t_to_js
                                                             x9361);(
                                   GLenum.t_to_js x9362);(GLenum.t_to_js
                                                            x9363);(Ojs.option_to_js
                                                                    ArrayBufferView.t_0_to_js
                                                                    x9364)|])
    let (texImage3D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            srcOffset:GLuint.t -> unit)
      =
      fun (x9379 : 'tags this) ->
        fun ~target:(x9368 : GLenum.t) ->
          fun ~level:(x9369 : GLint.t) ->
            fun ~internalformat:(x9370 : GLint.t) ->
              fun ~width:(x9371 : GLsizei.t) ->
                fun ~height:(x9372 : GLsizei.t) ->
                  fun ~depth:(x9373 : GLsizei.t) ->
                    fun ~border:(x9374 : GLint.t) ->
                      fun ~format:(x9375 : GLenum.t) ->
                        fun ~type_:(x9376 : GLenum.t) ->
                          fun ~srcData:(x9377 : ArrayBufferView.t_0) ->
                            fun ~srcOffset:(x9378 : GLuint.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9379)
                                   "texImage3D"
                                   [|(GLenum.t_to_js x9368);(GLint.t_to_js
                                                               x9369);(
                                     GLint.t_to_js x9370);(GLsizei.t_to_js
                                                             x9371);(
                                     GLsizei.t_to_js x9372);(GLsizei.t_to_js
                                                               x9373);(
                                     GLint.t_to_js x9374);(GLenum.t_to_js
                                                             x9375);(
                                     GLenum.t_to_js x9376);(ArrayBufferView.t_0_to_js
                                                              x9377);(
                                     GLuint.t_to_js x9378)|])
    let (texStorage2D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9386 : 'tags this) ->
        fun ~target:(x9381 : GLenum.t) ->
          fun ~levels:(x9382 : GLsizei.t) ->
            fun ~internalformat:(x9383 : GLenum.t) ->
              fun ~width:(x9384 : GLsizei.t) ->
                fun ~height:(x9385 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9386) "texStorage2D"
                       [|(GLenum.t_to_js x9381);(GLsizei.t_to_js x9382);(
                         GLenum.t_to_js x9383);(GLsizei.t_to_js x9384);(
                         GLsizei.t_to_js x9385)|])
    let (texStorage3D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> unit)
      =
      fun (x9394 : 'tags this) ->
        fun ~target:(x9388 : GLenum.t) ->
          fun ~levels:(x9389 : GLsizei.t) ->
            fun ~internalformat:(x9390 : GLenum.t) ->
              fun ~width:(x9391 : GLsizei.t) ->
                fun ~height:(x9392 : GLsizei.t) ->
                  fun ~depth:(x9393 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9394) "texStorage3D"
                         [|(GLenum.t_to_js x9388);(GLsizei.t_to_js x9389);(
                           GLenum.t_to_js x9390);(GLsizei.t_to_js x9391);(
                           GLsizei.t_to_js x9392);(GLsizei.t_to_js x9393)|])
    let (texSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x9407 : 'tags this) ->
        fun ~target:(x9396 : GLenum.t) ->
          fun ~level:(x9397 : GLint.t) ->
            fun ~xoffset:(x9398 : GLint.t) ->
              fun ~yoffset:(x9399 : GLint.t) ->
                fun ~zoffset:(x9400 : GLint.t) ->
                  fun ~width:(x9401 : GLsizei.t) ->
                    fun ~height:(x9402 : GLsizei.t) ->
                      fun ~depth:(x9403 : GLsizei.t) ->
                        fun ~format:(x9404 : GLenum.t) ->
                          fun ~type_:(x9405 : GLenum.t) ->
                            fun ~pboOffset:(x9406 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9407)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x9396);(GLint.t_to_js
                                                               x9397);(
                                     GLint.t_to_js x9398);(GLint.t_to_js
                                                             x9399);(
                                     GLint.t_to_js x9400);(GLsizei.t_to_js
                                                             x9401);(
                                     GLsizei.t_to_js x9402);(GLsizei.t_to_js
                                                               x9403);(
                                     GLenum.t_to_js x9404);(GLenum.t_to_js
                                                              x9405);(
                                     GLintptr.t_to_js x9406)|])
    let (texSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x9420 : 'tags this) ->
        fun ~target:(x9409 : GLenum.t) ->
          fun ~level:(x9410 : GLint.t) ->
            fun ~xoffset:(x9411 : GLint.t) ->
              fun ~yoffset:(x9412 : GLint.t) ->
                fun ~zoffset:(x9413 : GLint.t) ->
                  fun ~width:(x9414 : GLsizei.t) ->
                    fun ~height:(x9415 : GLsizei.t) ->
                      fun ~depth:(x9416 : GLsizei.t) ->
                        fun ~format:(x9417 : GLenum.t) ->
                          fun ~type_:(x9418 : GLenum.t) ->
                            fun ~source:(x9419 : TexImageSource.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9420)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x9409);(GLint.t_to_js
                                                               x9410);(
                                     GLint.t_to_js x9411);(GLint.t_to_js
                                                             x9412);(
                                     GLint.t_to_js x9413);(GLsizei.t_to_js
                                                             x9414);(
                                     GLsizei.t_to_js x9415);(GLsizei.t_to_js
                                                               x9416);(
                                     GLenum.t_to_js x9417);(GLenum.t_to_js
                                                              x9418);(
                                     TexImageSource.t_to_js x9419)|])
    let (texSubImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t ->
                            srcData:ArrayBufferView.t_0 option ->
                              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9437 : 'tags this) ->
        fun ~target:(x9422 : GLenum.t) ->
          fun ~level:(x9423 : GLint.t) ->
            fun ~xoffset:(x9424 : GLint.t) ->
              fun ~yoffset:(x9425 : GLint.t) ->
                fun ~zoffset:(x9426 : GLint.t) ->
                  fun ~width:(x9427 : GLsizei.t) ->
                    fun ~height:(x9428 : GLsizei.t) ->
                      fun ~depth:(x9429 : GLsizei.t) ->
                        fun ~format:(x9430 : GLenum.t) ->
                          fun ~type_:(x9431 : GLenum.t) ->
                            fun ~srcData:(x9432 : ArrayBufferView.t_0 option)
                              ->
                              fun ?srcOffset:(x9433 : GLuint.t option) ->
                                fun () ->
                                  ignore
                                    (let x9439 = this_to_js Obj.magic x9437 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x9439
                                          "texSubImage3D") "apply"
                                       [|x9439;((let x9434 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(GLenum.t_to_js x9422)|]);
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(GLint.t_to_js x9423)|]);
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(GLint.t_to_js x9424)|]);
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(GLint.t_to_js x9425)|]);
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(GLint.t_to_js x9426)|]);
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9427)|]);
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9428)|]);
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9429)|]);
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(GLenum.t_to_js x9430)|]);
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(GLenum.t_to_js x9431)|]);
                                                 ignore
                                                   (Ojs.call x9434 "push"
                                                      [|(Ojs.option_to_js
                                                           ArrayBufferView.t_0_to_js
                                                           x9432)|]);
                                                 (match x9433 with
                                                  | Some x9435 ->
                                                      ignore
                                                        (Ojs.call x9434
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9435)|])
                                                  | None -> ());
                                                 x9434))|])
    let (transformFeedbackVaryings' :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string list -> bufferMode:GLenum.t -> unit)
      =
      fun (x9444 : 'tags this) ->
        fun ~program:(x9440 : WebGLProgram.t) ->
          fun ~varyings:(x9441 : string list) ->
            fun ~bufferMode:(x9443 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9444)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x9440);(Ojs.list_to_js
                                                     Ojs.string_to_js x9441);(
                     GLenum.t_to_js x9443)|])
    let (uniform1ui :
      'tags this ->
        location:WebGLUniformLocation.t option -> v0:GLuint.t -> unit)
      =
      fun (x9449 : 'tags this) ->
        fun ~location:(x9446 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9448 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9449) "uniform1ui"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9446);(
                   GLuint.t_to_js x9448)|])
    let (uniform1uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9459 : 'tags this) ->
        fun ~location:(x9451 : WebGLUniformLocation.t option) ->
          fun ~data:(x9452 : Uint32List.t) ->
            fun ?srcOffset:(x9453 : GLuint.t option) ->
              fun ?srcLength:(x9454 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9461 = this_to_js Obj.magic x9459 in
                     Ojs.call (Ojs.get_prop_ascii x9461 "uniform1uiv")
                       "apply"
                       [|x9461;((let x9455 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9455 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9451)|]);
                                 ignore
                                   (Ojs.call x9455 "push"
                                      [|(Uint32List.t_to_js x9452)|]);
                                 (match x9453 with
                                  | Some x9457 ->
                                      ignore
                                        (Ojs.call x9455 "push"
                                           [|(GLuint.t_to_js x9457)|])
                                  | None -> ());
                                 (match x9454 with
                                  | Some x9456 ->
                                      ignore
                                        (Ojs.call x9455 "push"
                                           [|(GLuint.t_to_js x9456)|])
                                  | None -> ());
                                 x9455))|])
    let (uniform2ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> unit)
      =
      fun (x9466 : 'tags this) ->
        fun ~location:(x9462 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9464 : GLuint.t) ->
            fun ~v1:(x9465 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9466) "uniform2ui"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9462);(
                     GLuint.t_to_js x9464);(GLuint.t_to_js x9465)|])
    let (uniform2uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9476 : 'tags this) ->
        fun ~location:(x9468 : WebGLUniformLocation.t option) ->
          fun ~data:(x9469 : Uint32List.t) ->
            fun ?srcOffset:(x9470 : GLuint.t option) ->
              fun ?srcLength:(x9471 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9478 = this_to_js Obj.magic x9476 in
                     Ojs.call (Ojs.get_prop_ascii x9478 "uniform2uiv")
                       "apply"
                       [|x9478;((let x9472 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9472 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9468)|]);
                                 ignore
                                   (Ojs.call x9472 "push"
                                      [|(Uint32List.t_to_js x9469)|]);
                                 (match x9470 with
                                  | Some x9474 ->
                                      ignore
                                        (Ojs.call x9472 "push"
                                           [|(GLuint.t_to_js x9474)|])
                                  | None -> ());
                                 (match x9471 with
                                  | Some x9473 ->
                                      ignore
                                        (Ojs.call x9472 "push"
                                           [|(GLuint.t_to_js x9473)|])
                                  | None -> ());
                                 x9472))|])
    let (uniform3ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> unit)
      =
      fun (x9484 : 'tags this) ->
        fun ~location:(x9479 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9481 : GLuint.t) ->
            fun ~v1:(x9482 : GLuint.t) ->
              fun ~v2:(x9483 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9484) "uniform3ui"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9479);(
                       GLuint.t_to_js x9481);(GLuint.t_to_js x9482);(
                       GLuint.t_to_js x9483)|])
    let (uniform3uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9494 : 'tags this) ->
        fun ~location:(x9486 : WebGLUniformLocation.t option) ->
          fun ~data:(x9487 : Uint32List.t) ->
            fun ?srcOffset:(x9488 : GLuint.t option) ->
              fun ?srcLength:(x9489 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9496 = this_to_js Obj.magic x9494 in
                     Ojs.call (Ojs.get_prop_ascii x9496 "uniform3uiv")
                       "apply"
                       [|x9496;((let x9490 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9490 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9486)|]);
                                 ignore
                                   (Ojs.call x9490 "push"
                                      [|(Uint32List.t_to_js x9487)|]);
                                 (match x9488 with
                                  | Some x9492 ->
                                      ignore
                                        (Ojs.call x9490 "push"
                                           [|(GLuint.t_to_js x9492)|])
                                  | None -> ());
                                 (match x9489 with
                                  | Some x9491 ->
                                      ignore
                                        (Ojs.call x9490 "push"
                                           [|(GLuint.t_to_js x9491)|])
                                  | None -> ());
                                 x9490))|])
    let (uniform4ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> v3:GLuint.t -> unit)
      =
      fun (x9503 : 'tags this) ->
        fun ~location:(x9497 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9499 : GLuint.t) ->
            fun ~v1:(x9500 : GLuint.t) ->
              fun ~v2:(x9501 : GLuint.t) ->
                fun ~v3:(x9502 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9503) "uniform4ui"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9497);(
                         GLuint.t_to_js x9499);(GLuint.t_to_js x9500);(
                         GLuint.t_to_js x9501);(GLuint.t_to_js x9502)|])
    let (uniform4uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9513 : 'tags this) ->
        fun ~location:(x9505 : WebGLUniformLocation.t option) ->
          fun ~data:(x9506 : Uint32List.t) ->
            fun ?srcOffset:(x9507 : GLuint.t option) ->
              fun ?srcLength:(x9508 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9515 = this_to_js Obj.magic x9513 in
                     Ojs.call (Ojs.get_prop_ascii x9515 "uniform4uiv")
                       "apply"
                       [|x9515;((let x9509 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9509 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9505)|]);
                                 ignore
                                   (Ojs.call x9509 "push"
                                      [|(Uint32List.t_to_js x9506)|]);
                                 (match x9507 with
                                  | Some x9511 ->
                                      ignore
                                        (Ojs.call x9509 "push"
                                           [|(GLuint.t_to_js x9511)|])
                                  | None -> ());
                                 (match x9508 with
                                  | Some x9510 ->
                                      ignore
                                        (Ojs.call x9509 "push"
                                           [|(GLuint.t_to_js x9510)|])
                                  | None -> ());
                                 x9509))|])
    let (uniformBlockBinding :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> uniformBlockBinding:GLuint.t -> unit)
      =
      fun (x9519 : 'tags this) ->
        fun ~program:(x9516 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9517 : GLuint.t) ->
            fun ~uniformBlockBinding:(x9518 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9519) "uniformBlockBinding"
                   [|(WebGLProgram.t_to_js x9516);(GLuint.t_to_js x9517);(
                     GLuint.t_to_js x9518)|])
    let (uniformMatrix2x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9530 : 'tags this) ->
        fun ~location:(x9521 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9522 : GLboolean.t) ->
            fun ~data:(x9523 : Float32List.t) ->
              fun ?srcOffset:(x9524 : GLuint.t option) ->
                fun ?srcLength:(x9525 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9532 = this_to_js Obj.magic x9530 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9532 "uniformMatrix2x3fv")
                         "apply"
                         [|x9532;((let x9526 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9526 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9521)|]);
                                   ignore
                                     (Ojs.call x9526 "push"
                                        [|(GLboolean.t_to_js x9522)|]);
                                   ignore
                                     (Ojs.call x9526 "push"
                                        [|(Float32List.t_to_js x9523)|]);
                                   (match x9524 with
                                    | Some x9528 ->
                                        ignore
                                          (Ojs.call x9526 "push"
                                             [|(GLuint.t_to_js x9528)|])
                                    | None -> ());
                                   (match x9525 with
                                    | Some x9527 ->
                                        ignore
                                          (Ojs.call x9526 "push"
                                             [|(GLuint.t_to_js x9527)|])
                                    | None -> ());
                                   x9526))|])
    let (uniformMatrix2x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9542 : 'tags this) ->
        fun ~location:(x9533 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9534 : GLboolean.t) ->
            fun ~data:(x9535 : Float32List.t) ->
              fun ?srcOffset:(x9536 : GLuint.t option) ->
                fun ?srcLength:(x9537 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9544 = this_to_js Obj.magic x9542 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9544 "uniformMatrix2x4fv")
                         "apply"
                         [|x9544;((let x9538 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9538 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9533)|]);
                                   ignore
                                     (Ojs.call x9538 "push"
                                        [|(GLboolean.t_to_js x9534)|]);
                                   ignore
                                     (Ojs.call x9538 "push"
                                        [|(Float32List.t_to_js x9535)|]);
                                   (match x9536 with
                                    | Some x9540 ->
                                        ignore
                                          (Ojs.call x9538 "push"
                                             [|(GLuint.t_to_js x9540)|])
                                    | None -> ());
                                   (match x9537 with
                                    | Some x9539 ->
                                        ignore
                                          (Ojs.call x9538 "push"
                                             [|(GLuint.t_to_js x9539)|])
                                    | None -> ());
                                   x9538))|])
    let (uniformMatrix3x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9554 : 'tags this) ->
        fun ~location:(x9545 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9546 : GLboolean.t) ->
            fun ~data:(x9547 : Float32List.t) ->
              fun ?srcOffset:(x9548 : GLuint.t option) ->
                fun ?srcLength:(x9549 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9556 = this_to_js Obj.magic x9554 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9556 "uniformMatrix3x2fv")
                         "apply"
                         [|x9556;((let x9550 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9550 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9545)|]);
                                   ignore
                                     (Ojs.call x9550 "push"
                                        [|(GLboolean.t_to_js x9546)|]);
                                   ignore
                                     (Ojs.call x9550 "push"
                                        [|(Float32List.t_to_js x9547)|]);
                                   (match x9548 with
                                    | Some x9552 ->
                                        ignore
                                          (Ojs.call x9550 "push"
                                             [|(GLuint.t_to_js x9552)|])
                                    | None -> ());
                                   (match x9549 with
                                    | Some x9551 ->
                                        ignore
                                          (Ojs.call x9550 "push"
                                             [|(GLuint.t_to_js x9551)|])
                                    | None -> ());
                                   x9550))|])
    let (uniformMatrix3x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9566 : 'tags this) ->
        fun ~location:(x9557 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9558 : GLboolean.t) ->
            fun ~data:(x9559 : Float32List.t) ->
              fun ?srcOffset:(x9560 : GLuint.t option) ->
                fun ?srcLength:(x9561 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9568 = this_to_js Obj.magic x9566 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9568 "uniformMatrix3x4fv")
                         "apply"
                         [|x9568;((let x9562 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9562 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9557)|]);
                                   ignore
                                     (Ojs.call x9562 "push"
                                        [|(GLboolean.t_to_js x9558)|]);
                                   ignore
                                     (Ojs.call x9562 "push"
                                        [|(Float32List.t_to_js x9559)|]);
                                   (match x9560 with
                                    | Some x9564 ->
                                        ignore
                                          (Ojs.call x9562 "push"
                                             [|(GLuint.t_to_js x9564)|])
                                    | None -> ());
                                   (match x9561 with
                                    | Some x9563 ->
                                        ignore
                                          (Ojs.call x9562 "push"
                                             [|(GLuint.t_to_js x9563)|])
                                    | None -> ());
                                   x9562))|])
    let (uniformMatrix4x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9578 : 'tags this) ->
        fun ~location:(x9569 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9570 : GLboolean.t) ->
            fun ~data:(x9571 : Float32List.t) ->
              fun ?srcOffset:(x9572 : GLuint.t option) ->
                fun ?srcLength:(x9573 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9580 = this_to_js Obj.magic x9578 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9580 "uniformMatrix4x2fv")
                         "apply"
                         [|x9580;((let x9574 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9574 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9569)|]);
                                   ignore
                                     (Ojs.call x9574 "push"
                                        [|(GLboolean.t_to_js x9570)|]);
                                   ignore
                                     (Ojs.call x9574 "push"
                                        [|(Float32List.t_to_js x9571)|]);
                                   (match x9572 with
                                    | Some x9576 ->
                                        ignore
                                          (Ojs.call x9574 "push"
                                             [|(GLuint.t_to_js x9576)|])
                                    | None -> ());
                                   (match x9573 with
                                    | Some x9575 ->
                                        ignore
                                          (Ojs.call x9574 "push"
                                             [|(GLuint.t_to_js x9575)|])
                                    | None -> ());
                                   x9574))|])
    let (uniformMatrix4x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9590 : 'tags this) ->
        fun ~location:(x9581 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9582 : GLboolean.t) ->
            fun ~data:(x9583 : Float32List.t) ->
              fun ?srcOffset:(x9584 : GLuint.t option) ->
                fun ?srcLength:(x9585 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9592 = this_to_js Obj.magic x9590 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9592 "uniformMatrix4x3fv")
                         "apply"
                         [|x9592;((let x9586 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9586 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9581)|]);
                                   ignore
                                     (Ojs.call x9586 "push"
                                        [|(GLboolean.t_to_js x9582)|]);
                                   ignore
                                     (Ojs.call x9586 "push"
                                        [|(Float32List.t_to_js x9583)|]);
                                   (match x9584 with
                                    | Some x9588 ->
                                        ignore
                                          (Ojs.call x9586 "push"
                                             [|(GLuint.t_to_js x9588)|])
                                    | None -> ());
                                   (match x9585 with
                                    | Some x9587 ->
                                        ignore
                                          (Ojs.call x9586 "push"
                                             [|(GLuint.t_to_js x9587)|])
                                    | None -> ());
                                   x9586))|])
    let (vertexAttribDivisor :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x9595 : 'tags this) ->
        fun ~index:(x9593 : GLuint.t) ->
          fun ~divisor:(x9594 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9595) "vertexAttribDivisor"
                 [|(GLuint.t_to_js x9593);(GLuint.t_to_js x9594)|])
    let (vertexAttribI4i :
      'tags this ->
        index:GLuint.t ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x9602 : 'tags this) ->
        fun ~index:(x9597 : GLuint.t) ->
          fun ~x:(x9598 : GLint.t) ->
            fun ~y:(x9599 : GLint.t) ->
              fun ~z:(x9600 : GLint.t) ->
                fun ~w:(x9601 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9602) "vertexAttribI4i"
                       [|(GLuint.t_to_js x9597);(GLint.t_to_js x9598);(
                         GLint.t_to_js x9599);(GLint.t_to_js x9600);(
                         GLint.t_to_js x9601)|])
    let (vertexAttribI4iv' :
      'tags this -> index:GLuint.t -> values:Int32List.t -> unit) =
      fun (x9606 : 'tags this) ->
        fun ~index:(x9604 : GLuint.t) ->
          fun ~values:(x9605 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9606) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x9604);(Int32List.t_to_js x9605)|])
    let (vertexAttribI4ui :
      'tags this ->
        index:GLuint.t ->
          x:GLuint.t -> y:GLuint.t -> z:GLuint.t -> w:GLuint.t -> unit)
      =
      fun (x9613 : 'tags this) ->
        fun ~index:(x9608 : GLuint.t) ->
          fun ~x:(x9609 : GLuint.t) ->
            fun ~y:(x9610 : GLuint.t) ->
              fun ~z:(x9611 : GLuint.t) ->
                fun ~w:(x9612 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9613) "vertexAttribI4ui"
                       [|(GLuint.t_to_js x9608);(GLuint.t_to_js x9609);(
                         GLuint.t_to_js x9610);(GLuint.t_to_js x9611);(
                         GLuint.t_to_js x9612)|])
    let (vertexAttribI4uiv' :
      'tags this -> index:GLuint.t -> values:Uint32List.t -> unit) =
      fun (x9617 : 'tags this) ->
        fun ~index:(x9615 : GLuint.t) ->
          fun ~values:(x9616 : Uint32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9617) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x9615);(Uint32List.t_to_js x9616)|])
    let (vertexAttribIPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9624 : 'tags this) ->
        fun ~index:(x9619 : GLuint.t) ->
          fun ~size:(x9620 : GLint.t) ->
            fun ~type_:(x9621 : GLenum.t) ->
              fun ~stride:(x9622 : GLsizei.t) ->
                fun ~offset:(x9623 : GLintptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9624)
                       "vertexAttribIPointer"
                       [|(GLuint.t_to_js x9619);(GLint.t_to_js x9620);(
                         GLenum.t_to_js x9621);(GLsizei.t_to_js x9622);(
                         GLintptr.t_to_js x9623)|])
    let (waitSync :
      'tags this ->
        sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLint64.t -> unit)
      =
      fun (x9629 : 'tags this) ->
        fun ~sync:(x9626 : WebGLSync.t) ->
          fun ~flags:(x9627 : GLbitfield.t) ->
            fun ~timeout:(x9628 : GLint64.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9629) "waitSync"
                   [|(WebGLSync.t_to_js x9626);(GLbitfield.t_to_js x9627);(
                     GLint64.t_to_js x9628)|])
    let (get_ACTIVE_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9631 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9631)
             "ACTIVE_UNIFORM_BLOCKS")
    let (get_ALREADY_SIGNALED : 'tags this -> GLenum.t) =
      fun (x9633 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9633) "ALREADY_SIGNALED")
    let (get_ANY_SAMPLES_PASSED : 'tags this -> GLenum.t) =
      fun (x9635 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9635)
             "ANY_SAMPLES_PASSED")
    let (get_ANY_SAMPLES_PASSED_CONSERVATIVE : 'tags this -> GLenum.t) =
      fun (x9637 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9637)
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (get_COLOR : 'tags this -> GLenum.t) =
      fun (x9639 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9639) "COLOR")
    let (get_COLOR_ATTACHMENT1 : 'tags this -> GLenum.t) =
      fun (x9641 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9641)
             "COLOR_ATTACHMENT1")
    let (get_COLOR_ATTACHMENT10 : 'tags this -> GLenum.t) =
      fun (x9643 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9643)
             "COLOR_ATTACHMENT10")
    let (get_COLOR_ATTACHMENT11 : 'tags this -> GLenum.t) =
      fun (x9645 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9645)
             "COLOR_ATTACHMENT11")
    let (get_COLOR_ATTACHMENT12 : 'tags this -> GLenum.t) =
      fun (x9647 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9647)
             "COLOR_ATTACHMENT12")
    let (get_COLOR_ATTACHMENT13 : 'tags this -> GLenum.t) =
      fun (x9649 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9649)
             "COLOR_ATTACHMENT13")
    let (get_COLOR_ATTACHMENT14 : 'tags this -> GLenum.t) =
      fun (x9651 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9651)
             "COLOR_ATTACHMENT14")
    let (get_COLOR_ATTACHMENT15 : 'tags this -> GLenum.t) =
      fun (x9653 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9653)
             "COLOR_ATTACHMENT15")
    let (get_COLOR_ATTACHMENT2 : 'tags this -> GLenum.t) =
      fun (x9655 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9655)
             "COLOR_ATTACHMENT2")
    let (get_COLOR_ATTACHMENT3 : 'tags this -> GLenum.t) =
      fun (x9657 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9657)
             "COLOR_ATTACHMENT3")
    let (get_COLOR_ATTACHMENT4 : 'tags this -> GLenum.t) =
      fun (x9659 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9659)
             "COLOR_ATTACHMENT4")
    let (get_COLOR_ATTACHMENT5 : 'tags this -> GLenum.t) =
      fun (x9661 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9661)
             "COLOR_ATTACHMENT5")
    let (get_COLOR_ATTACHMENT6 : 'tags this -> GLenum.t) =
      fun (x9663 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9663)
             "COLOR_ATTACHMENT6")
    let (get_COLOR_ATTACHMENT7 : 'tags this -> GLenum.t) =
      fun (x9665 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9665)
             "COLOR_ATTACHMENT7")
    let (get_COLOR_ATTACHMENT8 : 'tags this -> GLenum.t) =
      fun (x9667 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9667)
             "COLOR_ATTACHMENT8")
    let (get_COLOR_ATTACHMENT9 : 'tags this -> GLenum.t) =
      fun (x9669 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9669)
             "COLOR_ATTACHMENT9")
    let (get_COMPARE_REF_TO_TEXTURE : 'tags this -> GLenum.t) =
      fun (x9671 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9671)
             "COMPARE_REF_TO_TEXTURE")
    let (get_CONDITION_SATISFIED : 'tags this -> GLenum.t) =
      fun (x9673 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9673)
             "CONDITION_SATISFIED")
    let (get_COPY_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x9675 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9675) "COPY_READ_BUFFER")
    let (get_COPY_READ_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9677 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9677)
             "COPY_READ_BUFFER_BINDING")
    let (get_COPY_WRITE_BUFFER : 'tags this -> GLenum.t) =
      fun (x9679 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9679)
             "COPY_WRITE_BUFFER")
    let (get_COPY_WRITE_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9681 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9681)
             "COPY_WRITE_BUFFER_BINDING")
    let (get_CURRENT_QUERY : 'tags this -> GLenum.t) =
      fun (x9683 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9683) "CURRENT_QUERY")
    let (get_DEPTH : 'tags this -> GLenum.t) =
      fun (x9685 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9685) "DEPTH")
    let (get_DEPTH24_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x9687 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9687) "DEPTH24_STENCIL8")
    let (get_DEPTH32F_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x9689 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9689)
             "DEPTH32F_STENCIL8")
    let (get_DEPTH_COMPONENT24 : 'tags this -> GLenum.t) =
      fun (x9691 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9691)
             "DEPTH_COMPONENT24")
    let (get_DEPTH_COMPONENT32F : 'tags this -> GLenum.t) =
      fun (x9693 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9693)
             "DEPTH_COMPONENT32F")
    let (get_DRAW_BUFFER0 : 'tags this -> GLenum.t) =
      fun (x9695 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9695) "DRAW_BUFFER0")
    let (get_DRAW_BUFFER1 : 'tags this -> GLenum.t) =
      fun (x9697 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9697) "DRAW_BUFFER1")
    let (get_DRAW_BUFFER10 : 'tags this -> GLenum.t) =
      fun (x9699 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9699) "DRAW_BUFFER10")
    let (get_DRAW_BUFFER11 : 'tags this -> GLenum.t) =
      fun (x9701 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9701) "DRAW_BUFFER11")
    let (get_DRAW_BUFFER12 : 'tags this -> GLenum.t) =
      fun (x9703 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9703) "DRAW_BUFFER12")
    let (get_DRAW_BUFFER13 : 'tags this -> GLenum.t) =
      fun (x9705 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9705) "DRAW_BUFFER13")
    let (get_DRAW_BUFFER14 : 'tags this -> GLenum.t) =
      fun (x9707 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9707) "DRAW_BUFFER14")
    let (get_DRAW_BUFFER15 : 'tags this -> GLenum.t) =
      fun (x9709 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9709) "DRAW_BUFFER15")
    let (get_DRAW_BUFFER2 : 'tags this -> GLenum.t) =
      fun (x9711 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9711) "DRAW_BUFFER2")
    let (get_DRAW_BUFFER3 : 'tags this -> GLenum.t) =
      fun (x9713 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9713) "DRAW_BUFFER3")
    let (get_DRAW_BUFFER4 : 'tags this -> GLenum.t) =
      fun (x9715 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9715) "DRAW_BUFFER4")
    let (get_DRAW_BUFFER5 : 'tags this -> GLenum.t) =
      fun (x9717 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9717) "DRAW_BUFFER5")
    let (get_DRAW_BUFFER6 : 'tags this -> GLenum.t) =
      fun (x9719 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9719) "DRAW_BUFFER6")
    let (get_DRAW_BUFFER7 : 'tags this -> GLenum.t) =
      fun (x9721 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9721) "DRAW_BUFFER7")
    let (get_DRAW_BUFFER8 : 'tags this -> GLenum.t) =
      fun (x9723 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9723) "DRAW_BUFFER8")
    let (get_DRAW_BUFFER9 : 'tags this -> GLenum.t) =
      fun (x9725 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9725) "DRAW_BUFFER9")
    let (get_DRAW_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x9727 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9727) "DRAW_FRAMEBUFFER")
    let (get_DRAW_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9729 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9729)
             "DRAW_FRAMEBUFFER_BINDING")
    let (get_DYNAMIC_COPY : 'tags this -> GLenum.t) =
      fun (x9731 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9731) "DYNAMIC_COPY")
    let (get_DYNAMIC_READ : 'tags this -> GLenum.t) =
      fun (x9733 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9733) "DYNAMIC_READ")
    let (get_FLOAT_32_UNSIGNED_INT_24_8_REV : 'tags this -> GLenum.t) =
      fun (x9735 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9735)
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (get_FLOAT_MAT2x3 : 'tags this -> GLenum.t) =
      fun (x9737 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9737) "FLOAT_MAT2x3")
    let (get_FLOAT_MAT2x4 : 'tags this -> GLenum.t) =
      fun (x9739 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9739) "FLOAT_MAT2x4")
    let (get_FLOAT_MAT3x2 : 'tags this -> GLenum.t) =
      fun (x9741 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9741) "FLOAT_MAT3x2")
    let (get_FLOAT_MAT3x4 : 'tags this -> GLenum.t) =
      fun (x9743 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9743) "FLOAT_MAT3x4")
    let (get_FLOAT_MAT4x2 : 'tags this -> GLenum.t) =
      fun (x9745 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9745) "FLOAT_MAT4x2")
    let (get_FLOAT_MAT4x3 : 'tags this -> GLenum.t) =
      fun (x9747 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9747) "FLOAT_MAT4x3")
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT : 'tags this -> GLenum.t) =
      fun (x9749 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9749)
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x9751 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9751)
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x9753 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9753)
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : 'tags this -> GLenum.t)
      =
      fun (x9755 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9755)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : 'tags this -> GLenum.t)
      =
      fun (x9757 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9757)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x9759 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9759)
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x9761 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9761)
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x9763 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9763)
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x9765 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9765)
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : 'tags this -> GLenum.t) =
      fun (x9767 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9767)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (get_FRAMEBUFFER_DEFAULT : 'tags this -> GLenum.t) =
      fun (x9769 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9769)
             "FRAMEBUFFER_DEFAULT")
    let (get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : 'tags this -> GLenum.t) =
      fun (x9771 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9771)
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (get_HALF_FLOAT : 'tags this -> GLenum.t) =
      fun (x9773 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9773) "HALF_FLOAT")
    let (get_INTERLEAVED_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x9775 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9775)
             "INTERLEAVED_ATTRIBS")
    let (get_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x9777 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9777)
             "INT_2_10_10_10_REV")
    let (get_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x9779 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9779) "INT_SAMPLER_2D")
    let (get_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9781 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9781)
             "INT_SAMPLER_2D_ARRAY")
    let (get_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x9783 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9783) "INT_SAMPLER_3D")
    let (get_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x9785 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9785) "INT_SAMPLER_CUBE")
    let (get_INVALID_INDEX : 'tags this -> GLenum.t) =
      fun (x9787 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9787) "INVALID_INDEX")
    let (get_MAX : 'tags this -> GLenum.t) =
      fun (x9789 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9789) "MAX")
    let (get_MAX_3D_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x9791 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9791)
             "MAX_3D_TEXTURE_SIZE")
    let (get_MAX_ARRAY_TEXTURE_LAYERS : 'tags this -> GLenum.t) =
      fun (x9793 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9793)
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL : 'tags this -> GLenum.t) =
      fun (x9795 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9795)
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS : 'tags this -> GLenum.t) =
      fun (x9797 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9797)
             "MAX_COLOR_ATTACHMENTS")
    let (get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9799 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9799)
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_COMBINED_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9801 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9801)
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t)
      =
      fun (x9803 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9803)
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (get_MAX_DRAW_BUFFERS : 'tags this -> GLenum.t) =
      fun (x9805 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9805) "MAX_DRAW_BUFFERS")
    let (get_MAX_ELEMENTS_INDICES : 'tags this -> GLenum.t) =
      fun (x9807 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9807)
             "MAX_ELEMENTS_INDICES")
    let (get_MAX_ELEMENTS_VERTICES : 'tags this -> GLenum.t) =
      fun (x9809 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9809)
             "MAX_ELEMENTS_VERTICES")
    let (get_MAX_ELEMENT_INDEX : 'tags this -> GLenum.t) =
      fun (x9811 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9811)
             "MAX_ELEMENT_INDEX")
    let (get_MAX_FRAGMENT_INPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9813 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9813)
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (get_MAX_FRAGMENT_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9815 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9815)
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (get_MAX_FRAGMENT_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9817 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9817)
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x9819 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9819)
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (get_MAX_SAMPLES : 'tags this -> GLenum.t) =
      fun (x9821 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9821) "MAX_SAMPLES")
    let (get_MAX_SERVER_WAIT_TIMEOUT : 'tags this -> GLenum.t) =
      fun (x9823 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9823)
             "MAX_SERVER_WAIT_TIMEOUT")
    let (get_MAX_TEXTURE_LOD_BIAS : 'tags this -> GLenum.t) =
      fun (x9825 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9825)
             "MAX_TEXTURE_LOD_BIAS")
    let (get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9827 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9827)
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :
      'tags this -> GLenum.t) =
      fun (x9829 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9829)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9831 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9831)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (get_MAX_UNIFORM_BLOCK_SIZE : 'tags this -> GLenum.t) =
      fun (x9833 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9833)
             "MAX_UNIFORM_BLOCK_SIZE")
    let (get_MAX_UNIFORM_BUFFER_BINDINGS : 'tags this -> GLenum.t) =
      fun (x9835 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9835)
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (get_MAX_VARYING_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9837 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9837)
             "MAX_VARYING_COMPONENTS")
    let (get_MAX_VERTEX_OUTPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9839 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9839)
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (get_MAX_VERTEX_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9841 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9841)
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (get_MAX_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9843 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9843)
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (get_MIN : 'tags this -> GLenum.t) =
      fun (x9845 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9845) "MIN")
    let (get_MIN_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x9847 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9847)
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (get_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x9849 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9849) "OBJECT_TYPE")
    let (get_PACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x9851 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9851) "PACK_ROW_LENGTH")
    let (get_PACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x9853 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9853) "PACK_SKIP_PIXELS")
    let (get_PACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x9855 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9855) "PACK_SKIP_ROWS")
    let (get_PIXEL_PACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x9857 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9857)
             "PIXEL_PACK_BUFFER")
    let (get_PIXEL_PACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9859 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9859)
             "PIXEL_PACK_BUFFER_BINDING")
    let (get_PIXEL_UNPACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x9861 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9861)
             "PIXEL_UNPACK_BUFFER")
    let (get_PIXEL_UNPACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9863 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9863)
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (get_QUERY_RESULT : 'tags this -> GLenum.t) =
      fun (x9865 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9865) "QUERY_RESULT")
    let (get_QUERY_RESULT_AVAILABLE : 'tags this -> GLenum.t) =
      fun (x9867 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9867)
             "QUERY_RESULT_AVAILABLE")
    let (get_R11F_G11F_B10F : 'tags this -> GLenum.t) =
      fun (x9869 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9869) "R11F_G11F_B10F")
    let (get_R16F : 'tags this -> GLenum.t) =
      fun (x9871 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9871) "R16F")
    let (get_R16I : 'tags this -> GLenum.t) =
      fun (x9873 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9873) "R16I")
    let (get_R16UI : 'tags this -> GLenum.t) =
      fun (x9875 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9875) "R16UI")
    let (get_R32F : 'tags this -> GLenum.t) =
      fun (x9877 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9877) "R32F")
    let (get_R32I : 'tags this -> GLenum.t) =
      fun (x9879 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9879) "R32I")
    let (get_R32UI : 'tags this -> GLenum.t) =
      fun (x9881 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9881) "R32UI")
    let (get_R8 : 'tags this -> GLenum.t) =
      fun (x9883 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9883) "R8")
    let (get_R8I : 'tags this -> GLenum.t) =
      fun (x9885 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9885) "R8I")
    let (get_R8UI : 'tags this -> GLenum.t) =
      fun (x9887 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9887) "R8UI")
    let (get_R8_SNORM : 'tags this -> GLenum.t) =
      fun (x9889 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9889) "R8_SNORM")
    let (get_RASTERIZER_DISCARD : 'tags this -> GLenum.t) =
      fun (x9891 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9891)
             "RASTERIZER_DISCARD")
    let (get_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x9893 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9893) "READ_BUFFER")
    let (get_READ_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x9895 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9895) "READ_FRAMEBUFFER")
    let (get_READ_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9897 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9897)
             "READ_FRAMEBUFFER_BINDING")
    let (get_RED : 'tags this -> GLenum.t) =
      fun (x9899 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9899) "RED")
    let (get_RED_INTEGER : 'tags this -> GLenum.t) =
      fun (x9901 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9901) "RED_INTEGER")
    let (get_RENDERBUFFER_SAMPLES : 'tags this -> GLenum.t) =
      fun (x9903 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9903)
             "RENDERBUFFER_SAMPLES")
    let (get_RG : 'tags this -> GLenum.t) =
      fun (x9905 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9905) "RG")
    let (get_RG16F : 'tags this -> GLenum.t) =
      fun (x9907 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9907) "RG16F")
    let (get_RG16I : 'tags this -> GLenum.t) =
      fun (x9909 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9909) "RG16I")
    let (get_RG16UI : 'tags this -> GLenum.t) =
      fun (x9911 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9911) "RG16UI")
    let (get_RG32F : 'tags this -> GLenum.t) =
      fun (x9913 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9913) "RG32F")
    let (get_RG32I : 'tags this -> GLenum.t) =
      fun (x9915 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9915) "RG32I")
    let (get_RG32UI : 'tags this -> GLenum.t) =
      fun (x9917 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9917) "RG32UI")
    let (get_RG8 : 'tags this -> GLenum.t) =
      fun (x9919 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9919) "RG8")
    let (get_RG8I : 'tags this -> GLenum.t) =
      fun (x9921 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9921) "RG8I")
    let (get_RG8UI : 'tags this -> GLenum.t) =
      fun (x9923 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9923) "RG8UI")
    let (get_RG8_SNORM : 'tags this -> GLenum.t) =
      fun (x9925 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9925) "RG8_SNORM")
    let (get_RGB10_A2 : 'tags this -> GLenum.t) =
      fun (x9927 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9927) "RGB10_A2")
    let (get_RGB10_A2UI : 'tags this -> GLenum.t) =
      fun (x9929 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9929) "RGB10_A2UI")
    let (get_RGB16F : 'tags this -> GLenum.t) =
      fun (x9931 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9931) "RGB16F")
    let (get_RGB16I : 'tags this -> GLenum.t) =
      fun (x9933 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9933) "RGB16I")
    let (get_RGB16UI : 'tags this -> GLenum.t) =
      fun (x9935 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9935) "RGB16UI")
    let (get_RGB32F : 'tags this -> GLenum.t) =
      fun (x9937 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9937) "RGB32F")
    let (get_RGB32I : 'tags this -> GLenum.t) =
      fun (x9939 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9939) "RGB32I")
    let (get_RGB32UI : 'tags this -> GLenum.t) =
      fun (x9941 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9941) "RGB32UI")
    let (get_RGB8 : 'tags this -> GLenum.t) =
      fun (x9943 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9943) "RGB8")
    let (get_RGB8I : 'tags this -> GLenum.t) =
      fun (x9945 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9945) "RGB8I")
    let (get_RGB8UI : 'tags this -> GLenum.t) =
      fun (x9947 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9947) "RGB8UI")
    let (get_RGB8_SNORM : 'tags this -> GLenum.t) =
      fun (x9949 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9949) "RGB8_SNORM")
    let (get_RGB9_E5 : 'tags this -> GLenum.t) =
      fun (x9951 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9951) "RGB9_E5")
    let (get_RGBA16F : 'tags this -> GLenum.t) =
      fun (x9953 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9953) "RGBA16F")
    let (get_RGBA16I : 'tags this -> GLenum.t) =
      fun (x9955 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9955) "RGBA16I")
    let (get_RGBA16UI : 'tags this -> GLenum.t) =
      fun (x9957 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9957) "RGBA16UI")
    let (get_RGBA32F : 'tags this -> GLenum.t) =
      fun (x9959 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9959) "RGBA32F")
    let (get_RGBA32I : 'tags this -> GLenum.t) =
      fun (x9961 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9961) "RGBA32I")
    let (get_RGBA32UI : 'tags this -> GLenum.t) =
      fun (x9963 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9963) "RGBA32UI")
    let (get_RGBA8 : 'tags this -> GLenum.t) =
      fun (x9965 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9965) "RGBA8")
    let (get_RGBA8I : 'tags this -> GLenum.t) =
      fun (x9967 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9967) "RGBA8I")
    let (get_RGBA8UI : 'tags this -> GLenum.t) =
      fun (x9969 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9969) "RGBA8UI")
    let (get_RGBA8_SNORM : 'tags this -> GLenum.t) =
      fun (x9971 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9971) "RGBA8_SNORM")
    let (get_RGBA_INTEGER : 'tags this -> GLenum.t) =
      fun (x9973 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9973) "RGBA_INTEGER")
    let (get_RGB_INTEGER : 'tags this -> GLenum.t) =
      fun (x9975 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9975) "RGB_INTEGER")
    let (get_RG_INTEGER : 'tags this -> GLenum.t) =
      fun (x9977 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9977) "RG_INTEGER")
    let (get_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9979 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9979) "SAMPLER_2D_ARRAY")
    let (get_SAMPLER_2D_ARRAY_SHADOW : 'tags this -> GLenum.t) =
      fun (x9981 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9981)
             "SAMPLER_2D_ARRAY_SHADOW")
    let (get_SAMPLER_2D_SHADOW : 'tags this -> GLenum.t) =
      fun (x9983 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9983)
             "SAMPLER_2D_SHADOW")
    let (get_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x9985 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9985) "SAMPLER_3D")
    let (get_SAMPLER_BINDING : 'tags this -> GLenum.t) =
      fun (x9987 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9987) "SAMPLER_BINDING")
    let (get_SAMPLER_CUBE_SHADOW : 'tags this -> GLenum.t) =
      fun (x9989 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9989)
             "SAMPLER_CUBE_SHADOW")
    let (get_SEPARATE_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x9991 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9991) "SEPARATE_ATTRIBS")
    let (get_SIGNALED : 'tags this -> GLenum.t) =
      fun (x9993 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9993) "SIGNALED")
    let (get_SIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x9995 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9995)
             "SIGNED_NORMALIZED")
    let (get_SRGB : 'tags this -> GLenum.t) =
      fun (x9997 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9997) "SRGB")
    let (get_SRGB8 : 'tags this -> GLenum.t) =
      fun (x9999 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9999) "SRGB8")
    let (get_SRGB8_ALPHA8 : 'tags this -> GLenum.t) =
      fun (x10001 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10001) "SRGB8_ALPHA8")
    let (get_STATIC_COPY : 'tags this -> GLenum.t) =
      fun (x10003 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10003) "STATIC_COPY")
    let (get_STATIC_READ : 'tags this -> GLenum.t) =
      fun (x10005 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10005) "STATIC_READ")
    let (get_STENCIL : 'tags this -> GLenum.t) =
      fun (x10007 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10007) "STENCIL")
    let (get_STREAM_COPY : 'tags this -> GLenum.t) =
      fun (x10009 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10009) "STREAM_COPY")
    let (get_STREAM_READ : 'tags this -> GLenum.t) =
      fun (x10011 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10011) "STREAM_READ")
    let (get_SYNC_CONDITION : 'tags this -> GLenum.t) =
      fun (x10013 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10013) "SYNC_CONDITION")
    let (get_SYNC_FENCE : 'tags this -> GLenum.t) =
      fun (x10015 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10015) "SYNC_FENCE")
    let (get_SYNC_FLAGS : 'tags this -> GLenum.t) =
      fun (x10017 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10017) "SYNC_FLAGS")
    let (get_SYNC_FLUSH_COMMANDS_BIT : 'tags this -> GLenum.t) =
      fun (x10019 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10019)
             "SYNC_FLUSH_COMMANDS_BIT")
    let (get_SYNC_GPU_COMMANDS_COMPLETE : 'tags this -> GLenum.t) =
      fun (x10021 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10021)
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (get_SYNC_STATUS : 'tags this -> GLenum.t) =
      fun (x10023 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10023) "SYNC_STATUS")
    let (get_TEXTURE_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10025 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10025)
             "TEXTURE_2D_ARRAY")
    let (get_TEXTURE_3D : 'tags this -> GLenum.t) =
      fun (x10027 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10027) "TEXTURE_3D")
    let (get_TEXTURE_BASE_LEVEL : 'tags this -> GLenum.t) =
      fun (x10029 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10029)
             "TEXTURE_BASE_LEVEL")
    let (get_TEXTURE_BINDING_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10031 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10031)
             "TEXTURE_BINDING_2D_ARRAY")
    let (get_TEXTURE_BINDING_3D : 'tags this -> GLenum.t) =
      fun (x10033 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10033)
             "TEXTURE_BINDING_3D")
    let (get_TEXTURE_COMPARE_FUNC : 'tags this -> GLenum.t) =
      fun (x10035 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10035)
             "TEXTURE_COMPARE_FUNC")
    let (get_TEXTURE_COMPARE_MODE : 'tags this -> GLenum.t) =
      fun (x10037 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10037)
             "TEXTURE_COMPARE_MODE")
    let (get_TEXTURE_IMMUTABLE_FORMAT : 'tags this -> GLenum.t) =
      fun (x10039 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10039)
             "TEXTURE_IMMUTABLE_FORMAT")
    let (get_TEXTURE_IMMUTABLE_LEVELS : 'tags this -> GLenum.t) =
      fun (x10041 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10041)
             "TEXTURE_IMMUTABLE_LEVELS")
    let (get_TEXTURE_MAX_LEVEL : 'tags this -> GLenum.t) =
      fun (x10043 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10043)
             "TEXTURE_MAX_LEVEL")
    let (get_TEXTURE_MAX_LOD : 'tags this -> GLenum.t) =
      fun (x10045 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10045) "TEXTURE_MAX_LOD")
    let (get_TEXTURE_MIN_LOD : 'tags this -> GLenum.t) =
      fun (x10047 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10047) "TEXTURE_MIN_LOD")
    let (get_TEXTURE_WRAP_R : 'tags this -> GLenum.t) =
      fun (x10049 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10049) "TEXTURE_WRAP_R")
    let (get_TIMEOUT_EXPIRED : 'tags this -> GLenum.t) =
      fun (x10051 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10051) "TIMEOUT_EXPIRED")
    let (get_TIMEOUT_IGNORED : 'tags this -> GLint64.t) =
      fun (x10053 : 'tags this) ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10053) "TIMEOUT_IGNORED")
    let (get_TRANSFORM_FEEDBACK : 'tags this -> GLenum.t) =
      fun (x10055 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10055)
             "TRANSFORM_FEEDBACK")
    let (get_TRANSFORM_FEEDBACK_ACTIVE : 'tags this -> GLenum.t) =
      fun (x10057 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10057)
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (get_TRANSFORM_FEEDBACK_BINDING : 'tags this -> GLenum.t) =
      fun (x10059 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10059)
             "TRANSFORM_FEEDBACK_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x10061 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10061)
             "TRANSFORM_FEEDBACK_BUFFER")
    let (get_TRANSFORM_FEEDBACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10063 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10063)
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER_MODE : 'tags this -> GLenum.t) =
      fun (x10065 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10065)
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x10067 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10067)
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x10069 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10069)
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (get_TRANSFORM_FEEDBACK_PAUSED : 'tags this -> GLenum.t) =
      fun (x10071 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10071)
             "TRANSFORM_FEEDBACK_PAUSED")
    let (get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : 'tags this -> GLenum.t)
      =
      fun (x10073 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10073)
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (get_TRANSFORM_FEEDBACK_VARYINGS : 'tags this -> GLenum.t) =
      fun (x10075 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10075)
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (get_UNIFORM_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x10077 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10077)
             "UNIFORM_ARRAY_STRIDE")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x10079 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10079)
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : 'tags this -> GLenum.t) =
      fun (x10081 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10081)
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (get_UNIFORM_BLOCK_BINDING : 'tags this -> GLenum.t) =
      fun (x10083 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10083)
             "UNIFORM_BLOCK_BINDING")
    let (get_UNIFORM_BLOCK_DATA_SIZE : 'tags this -> GLenum.t) =
      fun (x10085 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10085)
             "UNIFORM_BLOCK_DATA_SIZE")
    let (get_UNIFORM_BLOCK_INDEX : 'tags this -> GLenum.t) =
      fun (x10087 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10087)
             "UNIFORM_BLOCK_INDEX")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :
      'tags this -> GLenum.t) =
      fun (x10089 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10089)
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :
      'tags this -> GLenum.t) =
      fun (x10091 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10091)
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (get_UNIFORM_BUFFER : 'tags this -> GLenum.t) =
      fun (x10093 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10093) "UNIFORM_BUFFER")
    let (get_UNIFORM_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10095 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10095)
             "UNIFORM_BUFFER_BINDING")
    let (get_UNIFORM_BUFFER_OFFSET_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x10097 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10097)
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (get_UNIFORM_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x10099 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10099)
             "UNIFORM_BUFFER_SIZE")
    let (get_UNIFORM_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x10101 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10101)
             "UNIFORM_BUFFER_START")
    let (get_UNIFORM_IS_ROW_MAJOR : 'tags this -> GLenum.t) =
      fun (x10103 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10103)
             "UNIFORM_IS_ROW_MAJOR")
    let (get_UNIFORM_MATRIX_STRIDE : 'tags this -> GLenum.t) =
      fun (x10105 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10105)
             "UNIFORM_MATRIX_STRIDE")
    let (get_UNIFORM_OFFSET : 'tags this -> GLenum.t) =
      fun (x10107 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10107) "UNIFORM_OFFSET")
    let (get_UNIFORM_SIZE : 'tags this -> GLenum.t) =
      fun (x10109 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10109) "UNIFORM_SIZE")
    let (get_UNIFORM_TYPE : 'tags this -> GLenum.t) =
      fun (x10111 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10111) "UNIFORM_TYPE")
    let (get_UNPACK_IMAGE_HEIGHT : 'tags this -> GLenum.t) =
      fun (x10113 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10113)
             "UNPACK_IMAGE_HEIGHT")
    let (get_UNPACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x10115 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10115)
             "UNPACK_ROW_LENGTH")
    let (get_UNPACK_SKIP_IMAGES : 'tags this -> GLenum.t) =
      fun (x10117 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10117)
             "UNPACK_SKIP_IMAGES")
    let (get_UNPACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x10119 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10119)
             "UNPACK_SKIP_PIXELS")
    let (get_UNPACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x10121 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10121)
             "UNPACK_SKIP_ROWS")
    let (get_UNSIGNALED : 'tags this -> GLenum.t) =
      fun (x10123 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10123) "UNSIGNALED")
    let (get_UNSIGNED_INT_10F_11F_11F_REV : 'tags this -> GLenum.t) =
      fun (x10125 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10125)
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (get_UNSIGNED_INT_24_8 : 'tags this -> GLenum.t) =
      fun (x10127 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10127)
             "UNSIGNED_INT_24_8")
    let (get_UNSIGNED_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x10129 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10129)
             "UNSIGNED_INT_2_10_10_10_REV")
    let (get_UNSIGNED_INT_5_9_9_9_REV : 'tags this -> GLenum.t) =
      fun (x10131 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10131)
             "UNSIGNED_INT_5_9_9_9_REV")
    let (get_UNSIGNED_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x10133 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10133)
             "UNSIGNED_INT_SAMPLER_2D")
    let (get_UNSIGNED_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10135 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10135)
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (get_UNSIGNED_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x10137 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10137)
             "UNSIGNED_INT_SAMPLER_3D")
    let (get_UNSIGNED_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x10139 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10139)
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (get_UNSIGNED_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x10141 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10141)
             "UNSIGNED_INT_VEC2")
    let (get_UNSIGNED_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x10143 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10143)
             "UNSIGNED_INT_VEC3")
    let (get_UNSIGNED_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x10145 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10145)
             "UNSIGNED_INT_VEC4")
    let (get_UNSIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x10147 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10147)
             "UNSIGNED_NORMALIZED")
    let (get_VERTEX_ARRAY_BINDING : 'tags this -> GLenum.t) =
      fun (x10149 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10149)
             "VERTEX_ARRAY_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR : 'tags this -> GLenum.t) =
      fun (x10151 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10151)
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (get_VERTEX_ATTRIB_ARRAY_INTEGER : 'tags this -> GLenum.t) =
      fun (x10153 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10153)
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (get_WAIT_FAILED : 'tags this -> GLenum.t) =
      fun (x10155 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10155) "WAIT_FAILED")
    let cast_from = Obj.magic
  end
module WebGL2RenderingContext =
  struct
    type t =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10158 : Ojs.t) -> t_of_js x10158
    and t_0_to_js : t_0 -> Ojs.t = fun (x10157 : t) -> t_to_js x10157
    type tags =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10161 : Ojs.t) -> intf_of_js __tags_of_js x10161
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10159 : __tags intf) -> intf_to_js __tags_to_js x10159
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") 
             [||])
    let (active_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORM_BLOCKS")
    let (already_signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALREADY_SIGNALED")
    let (any_samples_passed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED")
    let (any_samples_passed_conservative : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "COLOR")
    let (color_attachment1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT1")
    let (color_attachment10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT10")
    let (color_attachment11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT11")
    let (color_attachment12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT12")
    let (color_attachment13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT13")
    let (color_attachment14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT14")
    let (color_attachment15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT15")
    let (color_attachment2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT2")
    let (color_attachment3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT3")
    let (color_attachment4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT4")
    let (color_attachment5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT5")
    let (color_attachment6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT6")
    let (color_attachment7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT7")
    let (color_attachment8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT8")
    let (color_attachment9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT9")
    let (compare_ref_to_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPARE_REF_TO_TEXTURE")
    let (condition_satisfied : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONDITION_SATISFIED")
    let (copy_read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER")
    let (copy_read_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER_BINDING")
    let (copy_write_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER")
    let (copy_write_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER_BINDING")
    let (current_query : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_QUERY")
    let (depth : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DEPTH")
    let (depth24_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH24_STENCIL8")
    let (depth32f_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH32F_STENCIL8")
    let (depth_component24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT24")
    let (depth_component32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT32F")
    let (draw_buffer0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER0")
    let (draw_buffer1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER1")
    let (draw_buffer10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER10")
    let (draw_buffer11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER11")
    let (draw_buffer12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER12")
    let (draw_buffer13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER13")
    let (draw_buffer14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER14")
    let (draw_buffer15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER15")
    let (draw_buffer2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER2")
    let (draw_buffer3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER3")
    let (draw_buffer4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER4")
    let (draw_buffer5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER5")
    let (draw_buffer6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER6")
    let (draw_buffer7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER7")
    let (draw_buffer8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER8")
    let (draw_buffer9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER9")
    let (draw_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER")
    let (draw_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER_BINDING")
    let (dynamic_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_COPY")
    let (dynamic_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_READ")
    let (float_32_unsigned_int_24_8_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (fLOAT_MAT2x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x3")
    let (fLOAT_MAT2x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x4")
    let (fLOAT_MAT3x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x2")
    let (fLOAT_MAT3x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x4")
    let (fLOAT_MAT4x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x2")
    let (fLOAT_MAT4x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x3")
    let (fragment_shader_derivative_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (framebuffer_attachment_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (framebuffer_attachment_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (framebuffer_attachment_color_encoding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (framebuffer_attachment_component_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (framebuffer_attachment_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (framebuffer_attachment_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (framebuffer_attachment_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (framebuffer_attachment_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (framebuffer_attachment_texture_layer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (framebuffer_default : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_DEFAULT")
    let (framebuffer_incomplete_multisample : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (half_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HALF_FLOAT")
    let (interleaved_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INTERLEAVED_ATTRIBS")
    let (int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_2_10_10_10_REV")
    let (int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D")
    let (int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D_ARRAY")
    let (int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_3D")
    let (int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_CUBE")
    let (invalid_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_INDEX")
    let (max : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MAX")
    let (max_3d_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_3D_TEXTURE_SIZE")
    let (max_array_texture_layers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (max_client_wait_timeout_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (max_color_attachments : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COLOR_ATTACHMENTS")
    let (max_combined_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_combined_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (max_combined_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (max_draw_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_DRAW_BUFFERS")
    let (max_elements_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_INDICES")
    let (max_elements_vertices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_VERTICES")
    let (max_element_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENT_INDEX")
    let (max_fragment_input_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (max_fragment_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (max_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (max_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SAMPLES")
    let (max_server_wait_timeout : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SERVER_WAIT_TIMEOUT")
    let (max_texture_lod_bias : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_LOD_BIAS")
    let (max_transform_feedback_interleaved_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (max_transform_feedback_separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (max_transform_feedback_separate_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (max_uniform_block_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BLOCK_SIZE")
    let (max_uniform_buffer_bindings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (max_varying_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_COMPONENTS")
    let (max_vertex_output_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (max_vertex_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (max_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (min : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MIN")
    let (min_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OBJECT_TYPE")
    let (pack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ROW_LENGTH")
    let (pack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_PIXELS")
    let (pack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_ROWS")
    let (pixel_pack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER")
    let (pixel_pack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER_BINDING")
    let (pixel_unpack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER")
    let (pixel_unpack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (query_result : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT")
    let (query_result_available : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT_AVAILABLE")
    let (r11f_g11f_b10f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R11F_G11F_B10F")
    let (r16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16F")
    let (r16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16I")
    let (r16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16UI")
    let (r32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32F")
    let (r32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32I")
    let (r32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32UI")
    let (r8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8")
    let (r8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8I")
    let (r8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8UI")
    let (r8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R8_SNORM")
    let (rasterizer_discard : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RASTERIZER_DISCARD")
    let (read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_BUFFER")
    let (read_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER")
    let (read_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER_BINDING")
    let (red : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RED")
    let (red_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_INTEGER")
    let (renderbuffer_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_SAMPLES")
    let (rg : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG")
    let (rg16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16F")
    let (rg16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16I")
    let (rg16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG16UI")
    let (rg32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32F")
    let (rg32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32I")
    let (rg32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG32UI")
    let (rg8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8")
    let (rg8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8I")
    let (rg8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8UI")
    let (rg8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG8_SNORM")
    let (rgb10_a2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2")
    let (rgb10_a2ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2UI")
    let (rgb16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16F")
    let (rgb16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16I")
    let (rgb16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16UI")
    let (rgb32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32F")
    let (rgb32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32I")
    let (rgb32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32UI")
    let (rgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8")
    let (rgb8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8I")
    let (rgb8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8UI")
    let (rgb8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8_SNORM")
    let (rgb9_e5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB9_E5")
    let (rgba16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16F")
    let (rgba16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16I")
    let (rgba16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16UI")
    let (rgba32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32F")
    let (rgba32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32I")
    let (rgba32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32UI")
    let (rgba8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA8")
    let (rgba8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8I")
    let (rgba8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8UI")
    let (rgba8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8_SNORM")
    let (rgba_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA_INTEGER")
    let (rgb_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB_INTEGER")
    let (rg_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG_INTEGER")
    let (sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY")
    let (sampler_2d_array_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY_SHADOW")
    let (sampler_2d_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_SHADOW")
    let (sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_3D")
    let (sampler_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_BINDING")
    let (sampler_cube_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE_SHADOW")
    let (separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SEPARATE_ATTRIBS")
    let (signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNALED")
    let (signed_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNED_NORMALIZED")
    let (srgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB")
    let (srgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB8")
    let (srgb8_alpha8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRGB8_ALPHA8")
    let (static_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_COPY")
    let (static_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_READ")
    let (stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL")
    let (stream_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_COPY")
    let (stream_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_READ")
    let (sync_condition : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_CONDITION")
    let (sync_fence : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FENCE")
    let (sync_flags : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLAGS")
    let (sync_flush_commands_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLUSH_COMMANDS_BIT")
    let (sync_gpu_commands_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (sync_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_STATUS")
    let (texture_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D_ARRAY")
    let (texture_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_3D")
    let (texture_base_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BASE_LEVEL")
    let (texture_binding_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D_ARRAY")
    let (texture_binding_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_3D")
    let (texture_compare_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_FUNC")
    let (texture_compare_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_MODE")
    let (texture_immutable_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_FORMAT")
    let (texture_immutable_levels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_LEVELS")
    let (texture_max_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LEVEL")
    let (texture_max_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LOD")
    let (texture_min_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_LOD")
    let (texture_wrap_r : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_R")
    let (timeout_expired : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_EXPIRED")
    let (timeout_ignored : unit -> GLint64.t) =
      fun () ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_IGNORED")
    let (transform_feedback : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK")
    let (transform_feedback_active : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (transform_feedback_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BINDING")
    let (transform_feedback_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER")
    let (transform_feedback_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (transform_feedback_buffer_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (transform_feedback_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (transform_feedback_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (transform_feedback_paused : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PAUSED")
    let (transform_feedback_primitives_written : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (transform_feedback_varyings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (uniform_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_ARRAY_STRIDE")
    let (uniform_block_active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (uniform_block_active_uniform_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (uniform_block_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_BINDING")
    let (uniform_block_data_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_DATA_SIZE")
    let (uniform_block_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_INDEX")
    let (uniform_block_referenced_by_fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (uniform_block_referenced_by_vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (uniform_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER")
    let (uniform_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_BINDING")
    let (uniform_buffer_offset_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (uniform_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_SIZE")
    let (uniform_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_START")
    let (uniform_is_row_major : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_IS_ROW_MAJOR")
    let (uniform_matrix_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_MATRIX_STRIDE")
    let (uniform_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_OFFSET")
    let (uniform_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_SIZE")
    let (uniform_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_TYPE")
    let (unpack_image_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_IMAGE_HEIGHT")
    let (unpack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ROW_LENGTH")
    let (unpack_skip_images : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_IMAGES")
    let (unpack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_PIXELS")
    let (unpack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_ROWS")
    let (unsignaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNALED")
    let (unsigned_int_10f_11f_11f_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (unsigned_int_24_8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_24_8")
    let (unsigned_int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_2_10_10_10_REV")
    let (unsigned_int_5_9_9_9_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_5_9_9_9_REV")
    let (unsigned_int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D")
    let (unsigned_int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (unsigned_int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_3D")
    let (unsigned_int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (unsigned_int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC2")
    let (unsigned_int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC3")
    let (unsigned_int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC4")
    let (unsigned_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_NORMALIZED")
    let (vertex_array_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ARRAY_BINDING")
    let (vertex_attrib_array_divisor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (vertex_attrib_array_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (wait_failed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "WAIT_FAILED")
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ZERO")
  end
module WebAssembly =
  struct
    module ImportExportKind =
      struct
        type t =
          [ `L_s113_memory  | `L_s189_table  | `L_s79_function 
          | `L_s81_global ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10164 : Ojs.t) ->
            let x10165 = x10164 in
            match Ojs.string_of_js x10165 with
            | "memory" -> `L_s113_memory
            | "table" -> `L_s189_table
            | "function" -> `L_s79_function
            | "global" -> `L_s81_global
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x10163 :
              [ `L_s113_memory  | `L_s189_table  | `L_s79_function 
              | `L_s81_global ])
            ->
            match x10163 with
            | `L_s113_memory -> Ojs.string_to_js "memory"
            | `L_s189_table -> Ojs.string_to_js "table"
            | `L_s79_function -> Ojs.string_to_js "function"
            | `L_s81_global -> Ojs.string_to_js "global"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10167 : Ojs.t) -> t_of_js x10167
        and t_0_to_js : t_0 -> Ojs.t = fun (x10166 : t) -> t_to_js x10166
      end
    module ModuleImportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleImportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10169 : Ojs.t) -> t_of_js x10169
        and t_0_to_js : t_0 -> Ojs.t = fun (x10168 : t) -> t_to_js x10168
        type tags = [ `WebAssembly_ModuleImportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleImportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10172 : Ojs.t) -> intf_of_js __tags_of_js x10172
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10170 : __tags intf) -> intf_to_js __tags_to_js x10170
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x10174 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10174) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x10176 : 'tags this) ->
            fun (x10177 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10176) "kind"
                (ImportExportKind.t_to_js x10177)
        let (get_module : 'tags this -> string) =
          fun (x10179 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10179) "module")
        let (set_module : 'tags this -> string -> unit) =
          fun (x10181 : 'tags this) ->
            fun (x10182 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10181) "module"
                (Ojs.string_to_js x10182)
        let (get_name : 'tags this -> string) =
          fun (x10184 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10184) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x10186 : 'tags this) ->
            fun (x10187 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10186) "name"
                (Ojs.string_to_js x10187)
        let (create :
          kind:ImportExportKind.t ->
            module_:string -> name:string -> unit -> t)
          =
          fun ~kind:(x10189 : ImportExportKind.t) ->
            fun ~module_:(x10190 : string) ->
              fun ~name:(x10191 : string) ->
                fun () ->
                  let x10192 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10192 "kind"
                    (ImportExportKind.t_to_js x10189);
                  Ojs.set_prop_ascii x10192 "module"
                    (Ojs.string_to_js x10190);
                  Ojs.set_prop_ascii x10192 "name" (Ojs.string_to_js x10191);
                  t_of_js x10192
        let cast_from = Obj.magic
      end
    module ModuleExportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleExportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10194 : Ojs.t) -> t_of_js x10194
        and t_0_to_js : t_0 -> Ojs.t = fun (x10193 : t) -> t_to_js x10193
        type tags = [ `WebAssembly_ModuleExportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleExportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10197 : Ojs.t) -> intf_of_js __tags_of_js x10197
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10195 : __tags intf) -> intf_to_js __tags_to_js x10195
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x10199 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10199) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x10201 : 'tags this) ->
            fun (x10202 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10201) "kind"
                (ImportExportKind.t_to_js x10202)
        let (get_name : 'tags this -> string) =
          fun (x10204 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10204) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x10206 : 'tags this) ->
            fun (x10207 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10206) "name"
                (Ojs.string_to_js x10207)
        let (create : kind:ImportExportKind.t -> name:string -> unit -> t) =
          fun ~kind:(x10209 : ImportExportKind.t) ->
            fun ~name:(x10210 : string) ->
              fun () ->
                let x10211 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10211 "kind"
                  (ImportExportKind.t_to_js x10209);
                Ojs.set_prop_ascii x10211 "name" (Ojs.string_to_js x10210);
                t_of_js x10211
        let cast_from = Obj.magic
      end
    module Module =
      struct
        type t = [ `WebAssembly_Module ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10213 : Ojs.t) -> t_of_js x10213
        and t_0_to_js : t_0 -> Ojs.t = fun (x10212 : t) -> t_to_js x10212
        type tags = [ `WebAssembly_Module ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Module ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10216 : Ojs.t) -> intf_of_js __tags_of_js x10216
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10214 : __tags intf) -> intf_to_js __tags_to_js x10214
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "prototype")
        let (create : BufferSource.t -> t) =
          fun (x10218 : BufferSource.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 [|(BufferSource.t_to_js x10218)|])
        let (customSections :
          moduleObject:t -> sectionName:string -> ArrayBuffer.t_0 list) =
          fun ~moduleObject:(x10219 : t) ->
            fun ~sectionName:(x10220 : string) ->
              Ojs.list_of_js ArrayBuffer.t_0_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                   "customSections"
                   [|(t_to_js x10219);(Ojs.string_to_js x10220)|])
        let (exports : t -> ModuleExportDescriptor.t list) =
          fun (x10222 : t) ->
            Ojs.list_of_js ModuleExportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "exports" [|(t_to_js x10222)|])
        let (imports : t -> ModuleImportDescriptor.t list) =
          fun (x10224 : t) ->
            Ojs.list_of_js ModuleImportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "imports" [|(t_to_js x10224)|])
      end
    module TableKind =
      struct
        type t = [ `L_s36_anyfunc  | `L_s69_externref ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10227 : Ojs.t) ->
            let x10228 = x10227 in
            match Ojs.string_of_js x10228 with
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s69_externref
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x10226 : [ `L_s36_anyfunc  | `L_s69_externref ]) ->
            match x10226 with
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s69_externref -> Ojs.string_to_js "externref"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10230 : Ojs.t) -> t_of_js x10230
        and t_0_to_js : t_0 -> Ojs.t = fun (x10229 : t) -> t_to_js x10229
      end
    module TableDescriptor =
      struct
        type t = [ `WebAssembly_TableDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10232 : Ojs.t) -> t_of_js x10232
        and t_0_to_js : t_0 -> Ojs.t = fun (x10231 : t) -> t_to_js x10231
        type tags = [ `WebAssembly_TableDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_TableDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10235 : Ojs.t) -> intf_of_js __tags_of_js x10235
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10233 : __tags intf) -> intf_to_js __tags_to_js x10233
        let (get_element : 'tags this -> TableKind.t) =
          fun (x10237 : 'tags this) ->
            TableKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10237) "element")
        let (set_element : 'tags this -> TableKind.t -> unit) =
          fun (x10239 : 'tags this) ->
            fun (x10240 : TableKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10239) "element"
                (TableKind.t_to_js x10240)
        let (get_initial : 'tags this -> float) =
          fun (x10242 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10242) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x10244 : 'tags this) ->
            fun (x10245 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10244) "initial"
                (Ojs.float_to_js x10245)
        let (get_maximum : 'tags this -> float) =
          fun (x10247 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10247) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x10249 : 'tags this) ->
            fun (x10250 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10249) "maximum"
                (Ojs.float_to_js x10250)
        let (create :
          element:TableKind.t -> initial:float -> maximum:float -> unit -> t)
          =
          fun ~element:(x10252 : TableKind.t) ->
            fun ~initial:(x10253 : float) ->
              fun ~maximum:(x10254 : float) ->
                fun () ->
                  let x10255 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10255 "element"
                    (TableKind.t_to_js x10252);
                  Ojs.set_prop_ascii x10255 "initial"
                    (Ojs.float_to_js x10253);
                  Ojs.set_prop_ascii x10255 "maximum"
                    (Ojs.float_to_js x10254);
                  t_of_js x10255
        let cast_from = Obj.magic
      end
    module Table =
      struct
        type t = [ `WebAssembly_Table ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10257 : Ojs.t) -> t_of_js x10257
        and t_0_to_js : t_0 -> Ojs.t = fun (x10256 : t) -> t_to_js x10256
        type tags = [ `WebAssembly_Table ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Table ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10260 : Ojs.t) -> intf_of_js __tags_of_js x10260
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10258 : __tags intf) -> intf_to_js __tags_to_js x10258
        let (get_length : 'tags this -> float) =
          fun (x10262 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10262) "length")
        let (get_ : 'tags this -> index:float -> any) =
          fun (x10265 : 'tags this) ->
            fun ~index:(x10264 : float) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x10265) "get"
                   [|(Ojs.float_to_js x10264)|])
        let (grow : 'tags this -> delta:float -> ?value:any -> unit -> float)
          =
          fun (x10271 : 'tags this) ->
            fun ~delta:(x10267 : float) ->
              fun ?value:(x10268 : any option) ->
                fun () ->
                  Ojs.float_of_js
                    (let x10273 = this_to_js Obj.magic x10271 in
                     Ojs.call (Ojs.get_prop_ascii x10273 "grow") "apply"
                       [|x10273;((let x10269 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10269 "push"
                                       [|(Ojs.float_to_js x10267)|]);
                                  (match x10268 with
                                   | Some x10270 ->
                                       ignore
                                         (Ojs.call x10269 "push"
                                            [|(any_to_js x10270)|])
                                   | None -> ());
                                  x10269))|])
        let (set_ : 'tags this -> index:float -> ?value:any -> unit -> unit)
          =
          fun (x10278 : 'tags this) ->
            fun ~index:(x10274 : float) ->
              fun ?value:(x10275 : any option) ->
                fun () ->
                  ignore
                    (let x10280 = this_to_js Obj.magic x10278 in
                     Ojs.call (Ojs.get_prop_ascii x10280 "set") "apply"
                       [|x10280;((let x10276 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10276 "push"
                                       [|(Ojs.float_to_js x10274)|]);
                                  (match x10275 with
                                   | Some x10277 ->
                                       ignore
                                         (Ojs.call x10276 "push"
                                            [|(any_to_js x10277)|])
                                   | None -> ());
                                  x10276))|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                 "prototype")
        let (create :
          descriptor:TableDescriptor.t -> ?value:any -> unit -> t) =
          fun ~descriptor:(x10281 : TableDescriptor.t) ->
            fun ?value:(x10282 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                     (let x10283 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10283 "push"
                           [|(TableDescriptor.t_to_js x10281)|]);
                      (match x10282 with
                       | Some x10284 ->
                           ignore
                             (Ojs.call x10283 "push" [|(any_to_js x10284)|])
                       | None -> ());
                      x10283))
      end
    module MemoryDescriptor =
      struct
        type t = [ `WebAssembly_MemoryDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10286 : Ojs.t) -> t_of_js x10286
        and t_0_to_js : t_0 -> Ojs.t = fun (x10285 : t) -> t_to_js x10285
        type tags = [ `WebAssembly_MemoryDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_MemoryDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10289 : Ojs.t) -> intf_of_js __tags_of_js x10289
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10287 : __tags intf) -> intf_to_js __tags_to_js x10287
        let (get_initial : 'tags this -> float) =
          fun (x10291 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10291) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x10293 : 'tags this) ->
            fun (x10294 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10293) "initial"
                (Ojs.float_to_js x10294)
        let (get_maximum : 'tags this -> float) =
          fun (x10296 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10296) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x10298 : 'tags this) ->
            fun (x10299 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10298) "maximum"
                (Ojs.float_to_js x10299)
        let (get_shared : 'tags this -> bool) =
          fun (x10301 : 'tags this) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10301) "shared")
        let (set_shared : 'tags this -> bool -> unit) =
          fun (x10303 : 'tags this) ->
            fun (x10304 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10303) "shared"
                (Ojs.bool_to_js x10304)
        let (create :
          initial:float -> maximum:float -> shared:bool -> unit -> t) =
          fun ~initial:(x10306 : float) ->
            fun ~maximum:(x10307 : float) ->
              fun ~shared:(x10308 : bool) ->
                fun () ->
                  let x10309 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10309 "initial"
                    (Ojs.float_to_js x10306);
                  Ojs.set_prop_ascii x10309 "maximum"
                    (Ojs.float_to_js x10307);
                  Ojs.set_prop_ascii x10309 "shared" (Ojs.bool_to_js x10308);
                  t_of_js x10309
        let cast_from = Obj.magic
      end
    module Memory =
      struct
        type t = [ `WebAssembly_Memory ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10311 : Ojs.t) -> t_of_js x10311
        and t_0_to_js : t_0 -> Ojs.t = fun (x10310 : t) -> t_to_js x10310
        type tags = [ `WebAssembly_Memory ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Memory ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10314 : Ojs.t) -> intf_of_js __tags_of_js x10314
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10312 : __tags intf) -> intf_to_js __tags_to_js x10312
        let (get_buffer : 'tags this -> ArrayBuffer.t_0) =
          fun (x10316 : 'tags this) ->
            ArrayBuffer.t_0_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10316) "buffer")
        let (grow : 'tags this -> delta:float -> float) =
          fun (x10319 : 'tags this) ->
            fun ~delta:(x10318 : float) ->
              Ojs.float_of_js
                (Ojs.call (this_to_js Obj.magic x10319) "grow"
                   [|(Ojs.float_to_js x10318)|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 "prototype")
        let (create : MemoryDescriptor.t -> t) =
          fun (x10321 : MemoryDescriptor.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 [|(MemoryDescriptor.t_to_js x10321)|])
      end
    module ValueType =
      struct
        type t =
          [ `L_s36_anyfunc  | `L_s69_externref  | `L_s70_f32  | `L_s71_f64 
          | `L_s87_i32  | `L_s88_i64 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10323 : Ojs.t) ->
            let x10324 = x10323 in
            match Ojs.string_of_js x10324 with
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s69_externref
            | "f32" -> `L_s70_f32
            | "f64" -> `L_s71_f64
            | "i32" -> `L_s87_i32
            | "i64" -> `L_s88_i64
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x10322 :
              [ `L_s36_anyfunc  | `L_s69_externref  | `L_s70_f32 
              | `L_s71_f64  | `L_s87_i32  | `L_s88_i64 ])
            ->
            match x10322 with
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s69_externref -> Ojs.string_to_js "externref"
            | `L_s70_f32 -> Ojs.string_to_js "f32"
            | `L_s71_f64 -> Ojs.string_to_js "f64"
            | `L_s87_i32 -> Ojs.string_to_js "i32"
            | `L_s88_i64 -> Ojs.string_to_js "i64"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10326 : Ojs.t) -> t_of_js x10326
        and t_0_to_js : t_0 -> Ojs.t = fun (x10325 : t) -> t_to_js x10325
      end
    module GlobalDescriptor =
      struct
        type t = [ `WebAssembly_GlobalDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10328 : Ojs.t) -> t_of_js x10328
        and t_0_to_js : t_0 -> Ojs.t = fun (x10327 : t) -> t_to_js x10327
        type tags = [ `WebAssembly_GlobalDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_GlobalDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10331 : Ojs.t) -> intf_of_js __tags_of_js x10331
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10329 : __tags intf) -> intf_to_js __tags_to_js x10329
        let (get_mutable : 'tags this -> bool) =
          fun (x10333 : 'tags this) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10333) "mutable")
        let (set_mutable : 'tags this -> bool -> unit) =
          fun (x10335 : 'tags this) ->
            fun (x10336 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10335) "mutable"
                (Ojs.bool_to_js x10336)
        let (get_value : 'tags this -> ValueType.t) =
          fun (x10338 : 'tags this) ->
            ValueType.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10338) "value")
        let (set_value : 'tags this -> ValueType.t -> unit) =
          fun (x10340 : 'tags this) ->
            fun (x10341 : ValueType.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10340) "value"
                (ValueType.t_to_js x10341)
        let (create : mutable_:bool -> value:ValueType.t -> unit -> t) =
          fun ~mutable_:(x10343 : bool) ->
            fun ~value:(x10344 : ValueType.t) ->
              fun () ->
                let x10345 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10345 "mutable" (Ojs.bool_to_js x10343);
                Ojs.set_prop_ascii x10345 "value" (ValueType.t_to_js x10344);
                t_of_js x10345
        let cast_from = Obj.magic
      end
    module Global =
      struct
        type t = [ `WebAssembly_Global ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10347 : Ojs.t) -> t_of_js x10347
        and t_0_to_js : t_0 -> Ojs.t = fun (x10346 : t) -> t_to_js x10346
        type tags = [ `WebAssembly_Global ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Global ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10350 : Ojs.t) -> intf_of_js __tags_of_js x10350
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10348 : __tags intf) -> intf_to_js __tags_to_js x10348
        let (get_value : 'tags this -> any) =
          fun (x10352 : 'tags this) ->
            any_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10352) "value")
        let (set_value : 'tags this -> any -> unit) =
          fun (x10354 : 'tags this) ->
            fun (x10355 : any) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10354) "value"
                (any_to_js x10355)
        let (valueOf : 'tags this -> any) =
          fun (x10357 : 'tags this) ->
            any_of_js (Ojs.call (this_to_js Obj.magic x10357) "valueOf" [||])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Global")
                 "prototype")
        let (create : descriptor:GlobalDescriptor.t -> ?v:any -> unit -> t) =
          fun ~descriptor:(x10359 : GlobalDescriptor.t) ->
            fun ?v:(x10360 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Global")
                     (let x10361 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10361 "push"
                           [|(GlobalDescriptor.t_to_js x10359)|]);
                      (match x10360 with
                       | Some x10362 ->
                           ignore
                             (Ojs.call x10361 "push" [|(any_to_js x10362)|])
                       | None -> ());
                      x10361))
      end
    module ExportValue =
      struct
        type t = (untyped_function, Global.t, Memory.t, Table.t) union4
        let rec t_of_js : Ojs.t -> t =
          fun (x10368 : Ojs.t) ->
            union4_of_js untyped_function_of_js Global.t_of_js Memory.t_of_js
              Table.t_of_js x10368
        and t_to_js : t -> Ojs.t =
          fun
            (x10363 : (untyped_function, Global.t, Memory.t, Table.t) union4)
            ->
            union4_to_js untyped_function_to_js Global.t_to_js Memory.t_to_js
              Table.t_to_js x10363
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10374 : Ojs.t) -> t_of_js x10374
        and t_0_to_js : t_0 -> Ojs.t = fun (x10373 : t) -> t_to_js x10373
      end
    module ImportValue =
      struct
        type t = [ `Number of float  | `Other of ExportValue.t ] Primitive.t
        let rec t_of_js : Ojs.t -> t =
          fun (x10379 : Ojs.t) ->
            Primitive.t_of_js
              (fun (x10380 : Ojs.t) ->
                 let x10381 = x10380 in
                 match Ojs.string_of_js (Ojs.get_prop_ascii x10381 "dummy")
                 with
                 | "Number" -> `Number (Ojs.float_of_js x10381)
                 | "Other" -> `Other (ExportValue.t_of_js x10381)
                 | _ -> assert false) x10379
        and t_to_js : t -> Ojs.t =
          fun
            (x10375 :
              [ `Number of float  | `Other of ExportValue.t ] Primitive.t)
            ->
            Primitive.t_to_js
              (fun (x10376 : [ `Number of float  | `Other of ExportValue.t ])
                 ->
                 match x10376 with
                 | `Number x10377 -> Ojs.float_to_js x10377
                 | `Other x10378 -> ExportValue.t_to_js x10378) x10375
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10383 : Ojs.t) -> t_of_js x10383
        and t_0_to_js : t_0 -> Ojs.t = fun (x10382 : t) -> t_to_js x10382
      end
    module ModuleImports =
      struct
        type t = (string, ImportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10387 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ImportValue.t_of_js x10387
        and t_to_js : t -> Ojs.t =
          fun (x10384 : (string, ImportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ImportValue.t_to_js x10384
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10391 : Ojs.t) -> t_of_js x10391
        and t_0_to_js : t_0 -> Ojs.t = fun (x10390 : t) -> t_to_js x10390
      end
    module Imports =
      struct
        type t = (string, ModuleImports.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10395 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ModuleImports.t_of_js x10395
        and t_to_js : t -> Ojs.t =
          fun (x10392 : (string, ModuleImports.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ModuleImports.t_to_js x10392
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10399 : Ojs.t) -> t_of_js x10399
        and t_0_to_js : t_0 -> Ojs.t = fun (x10398 : t) -> t_to_js x10398
      end
    module Exports =
      struct
        type t = (string, ExportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10403 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ExportValue.t_of_js x10403
        and t_to_js : t -> Ojs.t =
          fun (x10400 : (string, ExportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ExportValue.t_to_js x10400
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10407 : Ojs.t) -> t_of_js x10407
        and t_0_to_js : t_0 -> Ojs.t = fun (x10406 : t) -> t_to_js x10406
      end
    module Instance =
      struct
        type t = [ `WebAssembly_Instance ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10409 : Ojs.t) -> t_of_js x10409
        and t_0_to_js : t_0 -> Ojs.t = fun (x10408 : t) -> t_to_js x10408
        type tags = [ `WebAssembly_Instance ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Instance ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10412 : Ojs.t) -> intf_of_js __tags_of_js x10412
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10410 : __tags intf) -> intf_to_js __tags_to_js x10410
        let (get_exports : 'tags this -> Exports.t) =
          fun (x10414 : 'tags this) ->
            Exports.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10414) "exports")
        let (create : exports:Exports.t -> unit -> t) =
          fun ~exports:(x10416 : Exports.t) ->
            fun () ->
              let x10417 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x10417 "exports" (Exports.t_to_js x10416);
              t_of_js x10417
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Instance")
                 "prototype")
        let (create' :
          module_:Module.t -> ?importObject:Imports.t -> unit -> t) =
          fun ~module_:(x10418 : Module.t) ->
            fun ?importObject:(x10419 : Imports.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Instance")
                     (let x10420 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10420 "push" [|(Module.t_to_js x10418)|]);
                      (match x10419 with
                       | Some x10421 ->
                           ignore
                             (Ojs.call x10420 "push"
                                [|(Imports.t_to_js x10421)|])
                       | None -> ());
                      x10420))
      end
    module WebAssemblyInstantiatedSource =
      struct
        type t = [ `WebAssembly_WebAssemblyInstantiatedSource ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10423 : Ojs.t) -> t_of_js x10423
        and t_0_to_js : t_0 -> Ojs.t = fun (x10422 : t) -> t_to_js x10422
        type tags = [ `WebAssembly_WebAssemblyInstantiatedSource ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_WebAssemblyInstantiatedSource ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10426 : Ojs.t) -> intf_of_js __tags_of_js x10426
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10424 : __tags intf) -> intf_to_js __tags_to_js x10424
        let (get_instance : 'tags this -> Instance.t) =
          fun (x10428 : 'tags this) ->
            Instance.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10428) "instance")
        let (set_instance : 'tags this -> Instance.t -> unit) =
          fun (x10430 : 'tags this) ->
            fun (x10431 : Instance.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10430) "instance"
                (Instance.t_to_js x10431)
        let (get_module : 'tags this -> Module.t) =
          fun (x10433 : 'tags this) ->
            Module.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10433) "module")
        let (set_module : 'tags this -> Module.t -> unit) =
          fun (x10435 : 'tags this) ->
            fun (x10436 : Module.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10435) "module"
                (Module.t_to_js x10436)
        let (create : instance:Instance.t -> module_:Module.t -> unit -> t) =
          fun ~instance:(x10438 : Instance.t) ->
            fun ~module_:(x10439 : Module.t) ->
              fun () ->
                let x10440 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10440 "instance"
                  (Instance.t_to_js x10438);
                Ojs.set_prop_ascii x10440 "module" (Module.t_to_js x10439);
                t_of_js x10440
        let cast_from = Obj.magic
      end
    module RuntimeError =
      struct
        type t = [ `WebAssembly_RuntimeError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10442 : Ojs.t) -> t_of_js x10442
        and t_0_to_js : t_0 -> Ojs.t = fun (x10441 : t) -> t_to_js x10441
        type tags = [ `WebAssembly_RuntimeError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_RuntimeError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10445 : Ojs.t) -> intf_of_js __tags_of_js x10445
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10443 : __tags intf) -> intf_to_js __tags_to_js x10443
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "RuntimeError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10447 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError")
                   (let x10448 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10447 with
                     | Some x10449 ->
                         ignore
                           (Ojs.call x10448 "push"
                              [|(Ojs.string_to_js x10449)|])
                     | None -> ());
                    x10448))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10450 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError") "apply"
                   [|Ojs.null;((let x10451 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10450 with
                                 | Some x10452 ->
                                     ignore
                                       (Ojs.call x10451 "push"
                                          [|(Ojs.string_to_js x10452)|])
                                 | None -> ());
                                x10451))|])
      end
    module LinkError =
      struct
        type t = [ `WebAssembly_LinkError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10454 : Ojs.t) -> t_of_js x10454
        and t_0_to_js : t_0 -> Ojs.t = fun (x10453 : t) -> t_to_js x10453
        type tags = [ `WebAssembly_LinkError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_LinkError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10457 : Ojs.t) -> intf_of_js __tags_of_js x10457
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10455 : __tags intf) -> intf_to_js __tags_to_js x10455
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "LinkError")
                 "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10459 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError")
                   (let x10460 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10459 with
                     | Some x10461 ->
                         ignore
                           (Ojs.call x10460 "push"
                              [|(Ojs.string_to_js x10461)|])
                     | None -> ());
                    x10460))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10462 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError") "apply"
                   [|Ojs.null;((let x10463 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10462 with
                                 | Some x10464 ->
                                     ignore
                                       (Ojs.call x10463 "push"
                                          [|(Ojs.string_to_js x10464)|])
                                 | None -> ());
                                x10463))|])
      end
    module CompileError =
      struct
        type t = [ `WebAssembly_CompileError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10466 : Ojs.t) -> t_of_js x10466
        and t_0_to_js : t_0 -> Ojs.t = fun (x10465 : t) -> t_to_js x10465
        type tags = [ `WebAssembly_CompileError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_CompileError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10469 : Ojs.t) -> intf_of_js __tags_of_js x10469
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10467 : __tags intf) -> intf_to_js __tags_to_js x10467
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "CompileError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10471 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError")
                   (let x10472 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10471 with
                     | Some x10473 ->
                         ignore
                           (Ojs.call x10472 "push"
                              [|(Ojs.string_to_js x10473)|])
                     | None -> ());
                    x10472))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10474 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError") "apply"
                   [|Ojs.null;((let x10475 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10474 with
                                 | Some x10476 ->
                                     ignore
                                       (Ojs.call x10475 "push"
                                          [|(Ojs.string_to_js x10476)|])
                                 | None -> ());
                                x10475))|])
      end
    let (compile : BufferSource.t -> Module.t Promise.t_1) =
      fun (x10477 : BufferSource.t) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "compile"
             [|(BufferSource.t_to_js x10477)|])
    let (compileStreaming :
      (Response.t, Response.t PromiseLike.t_1) union2 -> Module.t Promise.t_1)
      =
      fun (x10479 : (Response.t, Response.t PromiseLike.t_1) union2) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly")
             "compileStreaming"
             [|(union2_to_js Response.t_to_js
                  (fun (x10481 : Response.t PromiseLike.t_1) ->
                     PromiseLike.t_1_to_js Response.t_to_js x10481) x10479)|])
    let (instantiate :
      bytes:BufferSource.t ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~bytes:(x10484 : BufferSource.t) ->
        fun ?importObject:(x10485 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x10488 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10488 "instantiate") "apply"
                 [|x10488;((let x10486 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10486 "push"
                                 [|(BufferSource.t_to_js x10484)|]);
                            (match x10485 with
                             | Some x10487 ->
                                 ignore
                                   (Ojs.call x10486 "push"
                                      [|(Imports.t_to_js x10487)|])
                             | None -> ());
                            x10486))|])
    let (instantiate' :
      moduleObject:Module.t ->
        ?importObject:Imports.t -> unit -> Instance.t Promise.t_1)
      =
      fun ~moduleObject:(x10490 : Module.t) ->
        fun ?importObject:(x10491 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js Instance.t_of_js
              (let x10494 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10494 "instantiate") "apply"
                 [|x10494;((let x10492 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10492 "push"
                                 [|(Module.t_to_js x10490)|]);
                            (match x10491 with
                             | Some x10493 ->
                                 ignore
                                   (Ojs.call x10492 "push"
                                      [|(Imports.t_to_js x10493)|])
                             | None -> ());
                            x10492))|])
    let (instantiateStreaming :
      source:(Response.t, Response.t PromiseLike.t_1) union2 ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~source:(x10496 : (Response.t, Response.t PromiseLike.t_1) union2)
        ->
        fun ?importObject:(x10497 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x10503 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10503 "instantiateStreaming")
                 "apply"
                 [|x10503;((let x10498 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10498 "push"
                                 [|(union2_to_js Response.t_to_js
                                      (fun
                                         (x10501 :
                                           Response.t PromiseLike.t_1)
                                         ->
                                         PromiseLike.t_1_to_js
                                           Response.t_to_js x10501) x10496)|]);
                            (match x10497 with
                             | Some x10499 ->
                                 ignore
                                   (Ojs.call x10498 "push"
                                      [|(Imports.t_to_js x10499)|])
                             | None -> ());
                            x10498))|])
    let (validate : BufferSource.t -> bool) =
      fun (x10505 : BufferSource.t) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "validate"
             [|(BufferSource.t_to_js x10505)|])
  end
module TransformStreamDefaultController =
  struct
    type 'O t = [ `TransformStreamDefaultController of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x10508 : Ojs.t) -> t_of_js __O_of_js x10508
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x10506 : __O t) -> t_to_js __O_to_js x10506
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10512 : Ojs.t) -> t_of_js any_of_js x10512
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10510 : any t) -> t_to_js any_to_js x10510
    type 'O tags = [ `TransformStreamDefaultController of 'O ]
    type 'O tags_1 = 'O tags
    type tags_0 = any tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformStreamDefaultController of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10516 : Ojs.t) -> intf_of_js __tags_of_js x10516
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10514 : __tags intf) -> intf_to_js __tags_to_js x10514
    let (get_desiredSize : ('tags, 'O) this -> float option) =
      fun (x10518 : ('tags, 'O) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x10518)
             "desiredSize")
    let (enqueue : ('tags, 'O) this -> ?chunk:'O -> unit -> unit) =
      fun (x10525 : ('tags, 'O) this) ->
        fun ?chunk:(x10522 : 'O option) ->
          fun () ->
            ignore
              (let x10528 = this_to_js Obj.magic Obj.magic x10525 in
               Ojs.call (Ojs.get_prop_ascii x10528 "enqueue") "apply"
                 [|x10528;((let x10523 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10522 with
                             | Some x10524 ->
                                 ignore
                                   (Ojs.call x10523 "push"
                                      [|(Obj.magic x10524)|])
                             | None -> ());
                            x10523))|])
    let (error : ('tags, 'O) this -> ?reason:any -> unit -> unit) =
      fun (x10532 : ('tags, 'O) this) ->
        fun ?reason:(x10529 : any option) ->
          fun () ->
            ignore
              (let x10535 = this_to_js Obj.magic Obj.magic x10532 in
               Ojs.call (Ojs.get_prop_ascii x10535 "error") "apply"
                 [|x10535;((let x10530 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10529 with
                             | Some x10531 ->
                                 ignore
                                   (Ojs.call x10530 "push"
                                      [|(any_to_js x10531)|])
                             | None -> ());
                            x10530))|])
    let (terminate : ('tags, 'O) this -> unit) =
      fun (x10536 : ('tags, 'O) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x10536) "terminate" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") [||])
  end
module TransformerTransformCallback =
  struct
    type ('I, 'O) t = [ `TransformerTransformCallback of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10542 : Ojs.t) -> t_of_js __I_of_js __O_of_js x10542
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10539 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x10539
    type ('I, 'O) tags = [ `TransformerTransformCallback of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformerTransformCallback of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x10547 : Ojs.t) -> intf_of_js __tags_of_js x10547
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x10545 : __tags intf) -> intf_to_js __tags_to_js x10545
    let (apply :
      ('tags, 'I, 'O) this ->
        chunk:'I ->
          controller:'O TransformStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x10552 : ('tags, 'I, 'O) this) ->
        fun ~chunk:(x10549 : 'I) ->
          fun ~controller:(x10550 : 'O TransformStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x10557 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x10557)
              (Ojs.apply (this_to_js Obj.magic Obj.magic Obj.magic x10552)
                 [|(Obj.magic x10549);(TransformStreamDefaultController.t_to_js
                                         Obj.magic x10550)|])
    let cast_from = Obj.magic
  end
module TransformerStartCallback =
  struct
    type 'O t = [ `TransformerStartCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x10561 : Ojs.t) -> t_of_js __O_of_js x10561
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x10559 : __O t) -> t_to_js __O_to_js x10559
    type 'O tags = [ `TransformerStartCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerStartCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10565 : Ojs.t) -> intf_of_js __tags_of_js x10565
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10563 : __tags intf) -> intf_to_js __tags_to_js x10563
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t -> any)
      =
      fun (x10569 : ('tags, 'O) this) ->
        fun ~controller:(x10567 : 'O TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x10569)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x10567)|])
    let cast_from = Obj.magic
  end
module TransformerFlushCallback =
  struct
    type 'O t = [ `TransformerFlushCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x10574 : Ojs.t) -> t_of_js __O_of_js x10574
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x10572 : __O t) -> t_to_js __O_to_js x10572
    type 'O tags = [ `TransformerFlushCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerFlushCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10578 : Ojs.t) -> intf_of_js __tags_of_js x10578
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10576 : __tags intf) -> intf_to_js __tags_to_js x10576
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x10582 : ('tags, 'O) this) ->
        fun ~controller:(x10580 : 'O TransformStreamDefaultController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x10586 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x10586)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x10582)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x10580)|])
    let cast_from = Obj.magic
  end
module Transformer =
  struct
    type ('I, 'O) t = [ `Transformer of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10591 : Ojs.t) -> t_of_js __I_of_js __O_of_js x10591
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10588 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x10588
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 = fun (type
      __I) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (x10597 : Ojs.t) -> t_of_js __I_of_js any_of_js x10597
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t = fun (type __I) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (x10594 : (__I, any) t) -> t_to_js __I_to_js any_to_js x10594
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10603 : Ojs.t) -> t_of_js any_of_js any_of_js x10603
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10600 : (any, any) t) -> t_to_js any_to_js any_to_js x10600
    type ('I, 'O) tags = [ `Transformer of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `Transformer of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x10608 : Ojs.t) -> intf_of_js __tags_of_js x10608
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x10606 : __tags intf) -> intf_to_js __tags_to_js x10606
    let (get_flush : ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t) =
      fun (x10610 : ('tags, 'I, 'O) this) ->
        TransformerFlushCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10610) "flush")
    let (set_flush :
      ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t -> unit) =
      fun (x10615 : ('tags, 'I, 'O) this) ->
        fun (x10616 : 'O TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10615) "flush"
            (TransformerFlushCallback.t_to_js Obj.magic x10616)
    let (get_readableType : ('tags, 'I, 'O) this -> undefined) =
      fun (x10621 : ('tags, 'I, 'O) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10621) "readableType")
    let (set_readableType : ('tags, 'I, 'O) this -> undefined -> unit) =
      fun (x10625 : ('tags, 'I, 'O) this) ->
        fun (x10626 : undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10625) "readableType"
            (undefined_to_js x10626)
    let (get_start : ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t) =
      fun (x10630 : ('tags, 'I, 'O) this) ->
        TransformerStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10630) "start")
    let (set_start :
      ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t -> unit) =
      fun (x10635 : ('tags, 'I, 'O) this) ->
        fun (x10636 : 'O TransformerStartCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10635) "start"
            (TransformerStartCallback.t_to_js Obj.magic x10636)
    let (get_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t) =
      fun (x10641 : ('tags, 'I, 'O) this) ->
        TransformerTransformCallback.t_of_js Obj.magic Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10641) "transform")
    let (set_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t -> unit)
      =
      fun (x10647 : ('tags, 'I, 'O) this) ->
        fun (x10648 : ('I, 'O) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10647) "transform"
            (TransformerTransformCallback.t_to_js Obj.magic Obj.magic x10648)
    let (get_writableType : ('tags, 'I, 'O) this -> undefined) =
      fun (x10654 : ('tags, 'I, 'O) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10654) "writableType")
    let (set_writableType : ('tags, 'I, 'O) this -> undefined -> unit) =
      fun (x10658 : ('tags, 'I, 'O) this) ->
        fun (x10659 : undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10658) "writableType"
            (undefined_to_js x10659)
    let (create :
      flush:'O TransformerFlushCallback.t ->
        ?readableType:never ->
          start:'O TransformerStartCallback.t ->
            transform:('I, 'O) TransformerTransformCallback.t ->
              ?writableType:never -> unit -> ('I, 'O) t)
      =
      fun ~flush:(x10663 : 'O TransformerFlushCallback.t) ->
        fun ?readableType:(x10664 : never option) ->
          fun ~start:(x10665 : 'O TransformerStartCallback.t) ->
            fun ~transform:(x10666 : ('I, 'O) TransformerTransformCallback.t)
              ->
              fun ?writableType:(x10667 : never option) ->
                fun () ->
                  let x10668 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10668 "flush"
                    (TransformerFlushCallback.t_to_js Obj.magic x10663);
                  (match x10664 with
                   | Some x10675 ->
                       Ojs.set_prop_ascii x10668 "readableType"
                         (never_to_js x10675)
                   | None -> ());
                  Ojs.set_prop_ascii x10668 "start"
                    (TransformerStartCallback.t_to_js Obj.magic x10665);
                  Ojs.set_prop_ascii x10668 "transform"
                    (TransformerTransformCallback.t_to_js Obj.magic Obj.magic
                       x10666);
                  (match x10667 with
                   | Some x10671 ->
                       Ojs.set_prop_ascii x10668 "writableType"
                         (never_to_js x10671)
                   | None -> ());
                  t_of_js Obj.magic Obj.magic x10668
    let cast_from = Obj.magic
  end
module TransformStream =
  struct
    type ('I, 'O) t = [ `TransformStream of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10680 : Ojs.t) -> t_of_js __I_of_js __O_of_js x10680
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10677 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x10677
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 = fun (type
      __I) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (x10686 : Ojs.t) -> t_of_js __I_of_js any_of_js x10686
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t = fun (type __I) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (x10683 : (__I, any) t) -> t_to_js __I_to_js any_to_js x10683
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10692 : Ojs.t) -> t_of_js any_of_js any_of_js x10692
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10689 : (any, any) t) -> t_to_js any_to_js any_to_js x10689
    type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `TransformStream of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x10697 : Ojs.t) -> intf_of_js __tags_of_js x10697
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x10695 : __tags intf) -> intf_to_js __tags_to_js x10695
    let (get_readable : ('tags, 'I, 'O) this -> 'O ReadableStream.t) =
      fun (x10699 : ('tags, 'I, 'O) this) ->
        ReadableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10699) "readable")
    let (get_writable : ('tags, 'I, 'O) this -> 'I WritableStream.t) =
      fun (x10704 : ('tags, 'I, 'O) this) ->
        WritableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10704) "writable")
    let (create :
      readable:'O ReadableStream.t ->
        writable:'I WritableStream.t -> unit -> ('I, 'O) t)
      =
      fun ~readable:(x10709 : 'O ReadableStream.t) ->
        fun ~writable:(x10710 : 'I WritableStream.t) ->
          fun () ->
            let x10711 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10711 "readable"
              (ReadableStream.t_to_js Obj.magic x10709);
            Ojs.set_prop_ascii x10711 "writable"
              (WritableStream.t_to_js Obj.magic x10710);
            t_of_js Obj.magic Obj.magic x10711
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TransformStream") "prototype")
    let (create' :
      ?transformer:('I, 'O) Transformer.t ->
        ?writableStrategy:'I QueuingStrategy.t ->
          ?readableStrategy:'O QueuingStrategy.t -> unit -> ('I, 'O) t)
      =
      fun ?transformer:(x10716 : ('I, 'O) Transformer.t option) ->
        fun ?writableStrategy:(x10717 : 'I QueuingStrategy.t option) ->
          fun ?readableStrategy:(x10718 : 'O QueuingStrategy.t option) ->
            fun () ->
              t_of_js Obj.magic Obj.magic
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "TransformStream")
                   (let x10719 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10716 with
                     | Some x10724 ->
                         ignore
                           (Ojs.call x10719 "push"
                              [|(Transformer.t_to_js Obj.magic Obj.magic
                                   x10724)|])
                     | None -> ());
                    (match x10717 with
                     | Some x10722 ->
                         ignore
                           (Ojs.call x10719 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x10722)|])
                     | None -> ());
                    (match x10718 with
                     | Some x10720 ->
                         ignore
                           (Ojs.call x10719 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x10720)|])
                     | None -> ());
                    x10719))
  end
module TextMetrics =
  struct
    type t = [ `TextMetrics ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10730 : Ojs.t) -> t_of_js x10730
    and t_0_to_js : t_0 -> Ojs.t = fun (x10729 : t) -> t_to_js x10729
    type tags = [ `TextMetrics ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextMetrics ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10733 : Ojs.t) -> intf_of_js __tags_of_js x10733
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10731 : __tags intf) -> intf_to_js __tags_to_js x10731
    let (get_actualBoundingBoxAscent : 'tags this -> float) =
      fun (x10735 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10735)
             "actualBoundingBoxAscent")
    let (get_actualBoundingBoxDescent : 'tags this -> float) =
      fun (x10737 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10737)
             "actualBoundingBoxDescent")
    let (get_actualBoundingBoxLeft : 'tags this -> float) =
      fun (x10739 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10739)
             "actualBoundingBoxLeft")
    let (get_actualBoundingBoxRight : 'tags this -> float) =
      fun (x10741 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10741)
             "actualBoundingBoxRight")
    let (get_fontBoundingBoxAscent : 'tags this -> float) =
      fun (x10743 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10743)
             "fontBoundingBoxAscent")
    let (get_fontBoundingBoxDescent : 'tags this -> float) =
      fun (x10745 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10745)
             "fontBoundingBoxDescent")
    let (get_width : 'tags this -> float) =
      fun (x10747 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10747) "width")
    let (create :
      actualBoundingBoxAscent:float ->
        actualBoundingBoxDescent:float ->
          actualBoundingBoxLeft:float ->
            actualBoundingBoxRight:float ->
              fontBoundingBoxAscent:float ->
                fontBoundingBoxDescent:float -> width:float -> unit -> t)
      =
      fun ~actualBoundingBoxAscent:(x10749 : float) ->
        fun ~actualBoundingBoxDescent:(x10750 : float) ->
          fun ~actualBoundingBoxLeft:(x10751 : float) ->
            fun ~actualBoundingBoxRight:(x10752 : float) ->
              fun ~fontBoundingBoxAscent:(x10753 : float) ->
                fun ~fontBoundingBoxDescent:(x10754 : float) ->
                  fun ~width:(x10755 : float) ->
                    fun () ->
                      let x10756 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x10756 "actualBoundingBoxAscent"
                        (Ojs.float_to_js x10749);
                      Ojs.set_prop_ascii x10756 "actualBoundingBoxDescent"
                        (Ojs.float_to_js x10750);
                      Ojs.set_prop_ascii x10756 "actualBoundingBoxLeft"
                        (Ojs.float_to_js x10751);
                      Ojs.set_prop_ascii x10756 "actualBoundingBoxRight"
                        (Ojs.float_to_js x10752);
                      Ojs.set_prop_ascii x10756 "fontBoundingBoxAscent"
                        (Ojs.float_to_js x10753);
                      Ojs.set_prop_ascii x10756 "fontBoundingBoxDescent"
                        (Ojs.float_to_js x10754);
                      Ojs.set_prop_ascii x10756 "width"
                        (Ojs.float_to_js x10755);
                      t_of_js x10756
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextMetrics")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextMetrics") [||])
  end
module TextEncoderCommon =
  struct
    type t = [ `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10758 : Ojs.t) -> t_of_js x10758
    and t_0_to_js : t_0 -> Ojs.t = fun (x10757 : t) -> t_to_js x10757
    type tags = [ `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10761 : Ojs.t) -> intf_of_js __tags_of_js x10761
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10759 : __tags intf) -> intf_to_js __tags_to_js x10759
    let (get_encoding : 'tags this -> string) =
      fun (x10763 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10763) "encoding")
    let (create : encoding:string -> unit -> t) =
      fun ~encoding:(x10765 : string) ->
        fun () ->
          let x10766 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x10766 "encoding" (Ojs.string_to_js x10765);
          t_of_js x10766
    let cast_from = Obj.magic
  end
module GenericTransformStream =
  struct
    type t = [ `GenericTransformStream ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10768 : Ojs.t) -> t_of_js x10768
    and t_0_to_js : t_0 -> Ojs.t = fun (x10767 : t) -> t_to_js x10767
    type tags = [ `GenericTransformStream ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GenericTransformStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10771 : Ojs.t) -> intf_of_js __tags_of_js x10771
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10769 : __tags intf) -> intf_to_js __tags_to_js x10769
    let (get_readable : 'tags this -> ReadableStream.t_0) =
      fun (x10773 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10773) "readable")
    let (get_writable : 'tags this -> WritableStream.t_0) =
      fun (x10775 : 'tags this) ->
        WritableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10775) "writable")
    let (create :
      readable:ReadableStream.t_0 -> writable:WritableStream.t_0 -> unit -> t)
      =
      fun ~readable:(x10777 : ReadableStream.t_0) ->
        fun ~writable:(x10778 : WritableStream.t_0) ->
          fun () ->
            let x10779 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10779 "readable"
              (ReadableStream.t_0_to_js x10777);
            Ojs.set_prop_ascii x10779 "writable"
              (WritableStream.t_0_to_js x10778);
            t_of_js x10779
    let cast_from = Obj.magic
  end
module TextEncoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10781 : Ojs.t) -> t_of_js x10781
    and t_0_to_js : t_0 -> Ojs.t = fun (x10780 : t) -> t_to_js x10780
    type tags =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10784 : Ojs.t) -> intf_of_js __tags_of_js x10784
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10782 : __tags intf) -> intf_to_js __tags_to_js x10782
    let (get_readable : 'tags this -> Uint8Array.t_0 ReadableStream.t) =
      fun (x10786 : 'tags this) ->
        ReadableStream.t_of_js Uint8Array.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10786) "readable")
    let (get_writable : 'tags this -> string WritableStream.t) =
      fun (x10789 : 'tags this) ->
        WritableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10789) "writable")
    let (create :
      readable:Uint8Array.t_0 ReadableStream.t ->
        writable:string WritableStream.t -> unit -> t)
      =
      fun ~readable:(x10792 : Uint8Array.t_0 ReadableStream.t) ->
        fun ~writable:(x10793 : string WritableStream.t) ->
          fun () ->
            let x10794 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10794 "readable"
              (ReadableStream.t_to_js Uint8Array.t_0_to_js x10792);
            Ojs.set_prop_ascii x10794 "writable"
              (WritableStream.t_to_js Ojs.string_to_js x10793);
            t_of_js x10794
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextEncoderStream") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoderStream")
             [||])
  end
module TextEncoderEncodeIntoResult =
  struct
    type t = [ `TextEncoderEncodeIntoResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10798 : Ojs.t) -> t_of_js x10798
    and t_0_to_js : t_0 -> Ojs.t = fun (x10797 : t) -> t_to_js x10797
    type tags = [ `TextEncoderEncodeIntoResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `TextEncoderEncodeIntoResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10801 : Ojs.t) -> intf_of_js __tags_of_js x10801
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10799 : __tags intf) -> intf_to_js __tags_to_js x10799
    let (get_read : 'tags this -> float) =
      fun (x10803 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10803) "read")
    let (set_read : 'tags this -> float -> unit) =
      fun (x10805 : 'tags this) ->
        fun (x10806 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10805) "read"
            (Ojs.float_to_js x10806)
    let (get_written : 'tags this -> float) =
      fun (x10808 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10808) "written")
    let (set_written : 'tags this -> float -> unit) =
      fun (x10810 : 'tags this) ->
        fun (x10811 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10810) "written"
            (Ojs.float_to_js x10811)
    let (create : read:float -> written:float -> unit -> t) =
      fun ~read:(x10813 : float) ->
        fun ~written:(x10814 : float) ->
          fun () ->
            let x10815 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10815 "read" (Ojs.float_to_js x10813);
            Ojs.set_prop_ascii x10815 "written" (Ojs.float_to_js x10814);
            t_of_js x10815
    let cast_from = Obj.magic
  end
module TextEncoder =
  struct
    type t = [ `TextEncoder  | `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10817 : Ojs.t) -> t_of_js x10817
    and t_0_to_js : t_0 -> Ojs.t = fun (x10816 : t) -> t_to_js x10816
    type tags = [ `TextEncoder  | `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10820 : Ojs.t) -> intf_of_js __tags_of_js x10820
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10818 : __tags intf) -> intf_to_js __tags_to_js x10818
    let (encode : 'tags this -> ?input:string -> unit -> Uint8Array.t_0) =
      fun (x10825 : 'tags this) ->
        fun ?input:(x10822 : string option) ->
          fun () ->
            Uint8Array.t_0_of_js
              (let x10827 = this_to_js Obj.magic x10825 in
               Ojs.call (Ojs.get_prop_ascii x10827 "encode") "apply"
                 [|x10827;((let x10823 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10822 with
                             | Some x10824 ->
                                 ignore
                                   (Ojs.call x10823 "push"
                                      [|(Ojs.string_to_js x10824)|])
                             | None -> ());
                            x10823))|])
    let (encodeInto :
      'tags this ->
        source:string ->
          destination:Uint8Array.t_0 -> TextEncoderEncodeIntoResult.t)
      =
      fun (x10830 : 'tags this) ->
        fun ~source:(x10828 : string) ->
          fun ~destination:(x10829 : Uint8Array.t_0) ->
            TextEncoderEncodeIntoResult.t_of_js
              (Ojs.call (this_to_js Obj.magic x10830) "encodeInto"
                 [|(Ojs.string_to_js x10828);(Uint8Array.t_0_to_js x10829)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextEncoder")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoder") [||])
  end
module TextDecoderOptions =
  struct
    type t = [ `TextDecoderOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10833 : Ojs.t) -> t_of_js x10833
    and t_0_to_js : t_0 -> Ojs.t = fun (x10832 : t) -> t_to_js x10832
    type tags = [ `TextDecoderOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10836 : Ojs.t) -> intf_of_js __tags_of_js x10836
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10834 : __tags intf) -> intf_to_js __tags_to_js x10834
    let (get_fatal : 'tags this -> bool) =
      fun (x10838 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10838) "fatal")
    let (set_fatal : 'tags this -> bool -> unit) =
      fun (x10840 : 'tags this) ->
        fun (x10841 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10840) "fatal"
            (Ojs.bool_to_js x10841)
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x10843 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10843) "ignoreBOM")
    let (set_ignoreBOM : 'tags this -> bool -> unit) =
      fun (x10845 : 'tags this) ->
        fun (x10846 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10845) "ignoreBOM"
            (Ojs.bool_to_js x10846)
    let (create : fatal:bool -> ignoreBOM:bool -> unit -> t) =
      fun ~fatal:(x10848 : bool) ->
        fun ~ignoreBOM:(x10849 : bool) ->
          fun () ->
            let x10850 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10850 "fatal" (Ojs.bool_to_js x10848);
            Ojs.set_prop_ascii x10850 "ignoreBOM" (Ojs.bool_to_js x10849);
            t_of_js x10850
    let cast_from = Obj.magic
  end
module TextDecoderCommon =
  struct
    type t = [ `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10852 : Ojs.t) -> t_of_js x10852
    and t_0_to_js : t_0 -> Ojs.t = fun (x10851 : t) -> t_to_js x10851
    type tags = [ `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10855 : Ojs.t) -> intf_of_js __tags_of_js x10855
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10853 : __tags intf) -> intf_to_js __tags_to_js x10853
    let (get_encoding : 'tags this -> string) =
      fun (x10857 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10857) "encoding")
    let (get_fatal : 'tags this -> bool) =
      fun (x10859 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10859) "fatal")
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x10861 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10861) "ignoreBOM")
    let (create :
      encoding:string -> fatal:bool -> ignoreBOM:bool -> unit -> t) =
      fun ~encoding:(x10863 : string) ->
        fun ~fatal:(x10864 : bool) ->
          fun ~ignoreBOM:(x10865 : bool) ->
            fun () ->
              let x10866 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x10866 "encoding" (Ojs.string_to_js x10863);
              Ojs.set_prop_ascii x10866 "fatal" (Ojs.bool_to_js x10864);
              Ojs.set_prop_ascii x10866 "ignoreBOM" (Ojs.bool_to_js x10865);
              t_of_js x10866
    let cast_from = Obj.magic
  end
module TextDecoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10868 : Ojs.t) -> t_of_js x10868
    and t_0_to_js : t_0 -> Ojs.t = fun (x10867 : t) -> t_to_js x10867
    type tags =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10871 : Ojs.t) -> intf_of_js __tags_of_js x10871
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10869 : __tags intf) -> intf_to_js __tags_to_js x10869
    let (get_readable : 'tags this -> string ReadableStream.t) =
      fun (x10873 : 'tags this) ->
        ReadableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10873) "readable")
    let (get_writable : 'tags this -> BufferSource.t WritableStream.t) =
      fun (x10876 : 'tags this) ->
        WritableStream.t_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10876) "writable")
    let (create :
      readable:string ReadableStream.t ->
        writable:BufferSource.t WritableStream.t -> unit -> t)
      =
      fun ~readable:(x10879 : string ReadableStream.t) ->
        fun ~writable:(x10880 : BufferSource.t WritableStream.t) ->
          fun () ->
            let x10881 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10881 "readable"
              (ReadableStream.t_to_js Ojs.string_to_js x10879);
            Ojs.set_prop_ascii x10881 "writable"
              (WritableStream.t_to_js BufferSource.t_to_js x10880);
            t_of_js x10881
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextDecoderStream") "prototype")
    let (create' :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x10884 : string option) ->
        fun ?options:(x10885 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "TextDecoderStream")
                 (let x10886 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x10884 with
                   | Some x10888 ->
                       ignore
                         (Ojs.call x10886 "push"
                            [|(Ojs.string_to_js x10888)|])
                   | None -> ());
                  (match x10885 with
                   | Some x10887 ->
                       ignore
                         (Ojs.call x10886 "push"
                            [|(TextDecoderOptions.t_to_js x10887)|])
                   | None -> ());
                  x10886))
  end
module TextDecodeOptions =
  struct
    type t = [ `TextDecodeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10890 : Ojs.t) -> t_of_js x10890
    and t_0_to_js : t_0 -> Ojs.t = fun (x10889 : t) -> t_to_js x10889
    type tags = [ `TextDecodeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecodeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10893 : Ojs.t) -> intf_of_js __tags_of_js x10893
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10891 : __tags intf) -> intf_to_js __tags_to_js x10891
    let (get_stream : 'tags this -> bool) =
      fun (x10895 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10895) "stream")
    let (set_stream : 'tags this -> bool -> unit) =
      fun (x10897 : 'tags this) ->
        fun (x10898 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10897) "stream"
            (Ojs.bool_to_js x10898)
    let (create : stream:bool -> unit -> t) =
      fun ~stream:(x10900 : bool) ->
        fun () ->
          let x10901 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x10901 "stream" (Ojs.bool_to_js x10900);
          t_of_js x10901
    let cast_from = Obj.magic
  end
module TextDecoder =
  struct
    type t = [ `TextDecoder  | `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10903 : Ojs.t) -> t_of_js x10903
    and t_0_to_js : t_0 -> Ojs.t = fun (x10902 : t) -> t_to_js x10902
    type tags = [ `TextDecoder  | `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10906 : Ojs.t) -> intf_of_js __tags_of_js x10906
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10904 : __tags intf) -> intf_to_js __tags_to_js x10904
    let (decode :
      'tags this ->
        ?input:BufferSource.t ->
          ?options:TextDecodeOptions.t -> unit -> string)
      =
      fun (x10913 : 'tags this) ->
        fun ?input:(x10908 : BufferSource.t option) ->
          fun ?options:(x10909 : TextDecodeOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x10915 = this_to_js Obj.magic x10913 in
                 Ojs.call (Ojs.get_prop_ascii x10915 "decode") "apply"
                   [|x10915;((let x10910 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x10908 with
                               | Some x10912 ->
                                   ignore
                                     (Ojs.call x10910 "push"
                                        [|(BufferSource.t_to_js x10912)|])
                               | None -> ());
                              (match x10909 with
                               | Some x10911 ->
                                   ignore
                                     (Ojs.call x10910 "push"
                                        [|(TextDecodeOptions.t_to_js x10911)|])
                               | None -> ());
                              x10910))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextDecoder")
             "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x10916 : string option) ->
        fun ?options:(x10917 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TextDecoder")
                 (let x10918 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x10916 with
                   | Some x10920 ->
                       ignore
                         (Ojs.call x10918 "push"
                            [|(Ojs.string_to_js x10920)|])
                   | None -> ());
                  (match x10917 with
                   | Some x10919 ->
                       ignore
                         (Ojs.call x10918 "push"
                            [|(TextDecoderOptions.t_to_js x10919)|])
                   | None -> ());
                  x10918))
  end
module PromiseRejectionEventInit =
  struct
    type t = [ `EventInit  | `PromiseRejectionEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10922 : Ojs.t) -> t_of_js x10922
    and t_0_to_js : t_0 -> Ojs.t = fun (x10921 : t) -> t_to_js x10921
    type tags = [ `EventInit  | `PromiseRejectionEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10925 : Ojs.t) -> intf_of_js __tags_of_js x10925
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10923 : __tags intf) -> intf_to_js __tags_to_js x10923
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x10927 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10927) "promise")
    let (set_promise : 'tags this -> any Promise.t_1 -> unit) =
      fun (x10930 : 'tags this) ->
        fun (x10931 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10930) "promise"
            (Promise.t_1_to_js any_to_js x10931)
    let (get_reason : 'tags this -> any) =
      fun (x10934 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x10934) "reason")
    let (set_reason : 'tags this -> any -> unit) =
      fun (x10936 : 'tags this) ->
        fun (x10937 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10936) "reason"
            (any_to_js x10937)
    let (create : promise:any Promise.t_1 -> reason:any -> unit -> t) =
      fun ~promise:(x10939 : any Promise.t_1) ->
        fun ~reason:(x10940 : any) ->
          fun () ->
            let x10941 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10941 "promise"
              (Promise.t_1_to_js any_to_js x10939);
            Ojs.set_prop_ascii x10941 "reason" (any_to_js x10940);
            t_of_js x10941
    let cast_from = Obj.magic
  end
module PromiseRejectionEvent =
  struct
    type t = [ `Event  | `PromiseRejectionEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10944 : Ojs.t) -> t_of_js x10944
    and t_0_to_js : t_0 -> Ojs.t = fun (x10943 : t) -> t_to_js x10943
    type tags = [ `Event  | `PromiseRejectionEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10947 : Ojs.t) -> intf_of_js __tags_of_js x10947
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10945 : __tags intf) -> intf_to_js __tags_to_js x10945
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x10949 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10949) "promise")
    let (get_reason : 'tags this -> any) =
      fun (x10952 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x10952) "reason")
    let (create : promise:any Promise.t_1 -> reason:any -> unit -> t) =
      fun ~promise:(x10954 : any Promise.t_1) ->
        fun ~reason:(x10955 : any) ->
          fun () ->
            let x10956 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10956 "promise"
              (Promise.t_1_to_js any_to_js x10954);
            Ojs.set_prop_ascii x10956 "reason" (any_to_js x10955);
            t_of_js x10956
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
             "prototype")
    let (create' :
      type_:string -> eventInitDict:PromiseRejectionEventInit.t -> t) =
      fun ~type_:(x10958 : string) ->
        fun ~eventInitDict:(x10959 : PromiseRejectionEventInit.t) ->
          t_of_js
            (Ojs.new_obj
               (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
               [|(Ojs.string_to_js x10958);(PromiseRejectionEventInit.t_to_js
                                              x10959)|])
  end
module WorkerGlobalScopeEventMap =
  struct
    type t = [ `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10961 : Ojs.t) -> t_of_js x10961
    and t_0_to_js : t_0 -> Ojs.t = fun (x10960 : t) -> t_to_js x10960
    type tags = [ `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10964 : Ojs.t) -> intf_of_js __tags_of_js x10964
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10962 : __tags intf) -> intf_to_js __tags_to_js x10962
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x10966 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10966) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x10968 : 'tags this) ->
        fun (x10969 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10968) "error"
            (ErrorEvent.t_to_js x10969)
    let (get_languagechange : 'tags this -> Event.t) =
      fun (x10971 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10971) "languagechange")
    let (set_languagechange : 'tags this -> Event.t -> unit) =
      fun (x10973 : 'tags this) ->
        fun (x10974 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10973) "languagechange"
            (Event.t_to_js x10974)
    let (get_offline : 'tags this -> Event.t) =
      fun (x10976 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10976) "offline")
    let (set_offline : 'tags this -> Event.t -> unit) =
      fun (x10978 : 'tags this) ->
        fun (x10979 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10978) "offline"
            (Event.t_to_js x10979)
    let (get_online : 'tags this -> Event.t) =
      fun (x10981 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10981) "online")
    let (set_online : 'tags this -> Event.t -> unit) =
      fun (x10983 : 'tags this) ->
        fun (x10984 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10983) "online"
            (Event.t_to_js x10984)
    let (get_rejectionhandled : 'tags this -> PromiseRejectionEvent.t) =
      fun (x10986 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10986)
             "rejectionhandled")
    let (set_rejectionhandled :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x10988 : 'tags this) ->
        fun (x10989 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10988) "rejectionhandled"
            (PromiseRejectionEvent.t_to_js x10989)
    let (get_unhandledrejection : 'tags this -> PromiseRejectionEvent.t) =
      fun (x10991 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10991)
             "unhandledrejection")
    let (set_unhandledrejection :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x10993 : 'tags this) ->
        fun (x10994 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10993)
            "unhandledrejection" (PromiseRejectionEvent.t_to_js x10994)
    let (create :
      error:ErrorEvent.t ->
        languagechange:Event.t ->
          offline:Event.t ->
            online:Event.t ->
              rejectionhandled:PromiseRejectionEvent.t ->
                unhandledrejection:PromiseRejectionEvent.t -> unit -> t)
      =
      fun ~error:(x10996 : ErrorEvent.t) ->
        fun ~languagechange:(x10997 : Event.t) ->
          fun ~offline:(x10998 : Event.t) ->
            fun ~online:(x10999 : Event.t) ->
              fun ~rejectionhandled:(x11000 : PromiseRejectionEvent.t) ->
                fun ~unhandledrejection:(x11001 : PromiseRejectionEvent.t) ->
                  fun () ->
                    let x11002 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x11002 "error"
                      (ErrorEvent.t_to_js x10996);
                    Ojs.set_prop_ascii x11002 "languagechange"
                      (Event.t_to_js x10997);
                    Ojs.set_prop_ascii x11002 "offline"
                      (Event.t_to_js x10998);
                    Ojs.set_prop_ascii x11002 "online" (Event.t_to_js x10999);
                    Ojs.set_prop_ascii x11002 "rejectionhandled"
                      (PromiseRejectionEvent.t_to_js x11000);
                    Ojs.set_prop_ascii x11002 "unhandledrejection"
                      (PromiseRejectionEvent.t_to_js x11001);
                    t_of_js x11002
    let cast_from = Obj.magic
  end
module SharedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11004 : Ojs.t) -> t_of_js x11004
    and t_0_to_js : t_0 -> Ojs.t = fun (x11003 : t) -> t_to_js x11003
    type tags =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11007 : Ojs.t) -> intf_of_js __tags_of_js x11007
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11005 : __tags intf) -> intf_to_js __tags_to_js x11005
    let (get_connect : 'tags this -> MessageEvent.t_0) =
      fun (x11009 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11009) "connect")
    let (set_connect : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x11011 : 'tags this) ->
        fun (x11012 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11011) "connect"
            (MessageEvent.t_0_to_js x11012)
    let (create : connect:MessageEvent.t_0 -> unit -> t) =
      fun ~connect:(x11014 : MessageEvent.t_0) ->
        fun () ->
          let x11015 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11015 "connect" (MessageEvent.t_0_to_js x11014);
          t_of_js x11015
    let cast_from = Obj.magic
  end
module WorkerNavigator =
  struct
    type t =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11017 : Ojs.t) -> t_of_js x11017
    and t_0_to_js : t_0 -> Ojs.t = fun (x11016 : t) -> t_to_js x11016
    type tags =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerNavigator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11020 : Ojs.t) -> intf_of_js __tags_of_js x11020
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11018 : __tags intf) -> intf_to_js __tags_to_js x11018
    let (get_mediaCapabilities : 'tags this -> MediaCapabilities.t) =
      fun (x11022 : 'tags this) ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11022)
             "mediaCapabilities")
    let (create : mediaCapabilities:MediaCapabilities.t -> unit -> t) =
      fun ~mediaCapabilities:(x11024 : MediaCapabilities.t) ->
        fun () ->
          let x11025 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11025 "mediaCapabilities"
            (MediaCapabilities.t_to_js x11024);
          t_of_js x11025
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") [||])
  end
module WorkerLocation =
  struct
    type t = [ `WorkerLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11027 : Ojs.t) -> t_of_js x11027
    and t_0_to_js : t_0 -> Ojs.t = fun (x11026 : t) -> t_to_js x11026
    type tags = [ `WorkerLocation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11030 : Ojs.t) -> intf_of_js __tags_of_js x11030
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11028 : __tags intf) -> intf_to_js __tags_to_js x11028
    let (get_hash : 'tags this -> string) =
      fun (x11032 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11032) "hash")
    let (get_host : 'tags this -> string) =
      fun (x11034 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11034) "host")
    let (get_hostname : 'tags this -> string) =
      fun (x11036 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11036) "hostname")
    let (get_href : 'tags this -> string) =
      fun (x11038 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11038) "href")
    let (toString : 'tags this -> string) =
      fun (x11040 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x11040) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x11042 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11042) "origin")
    let (get_pathname : 'tags this -> string) =
      fun (x11044 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11044) "pathname")
    let (get_port : 'tags this -> string) =
      fun (x11046 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11046) "port")
    let (get_protocol : 'tags this -> string) =
      fun (x11048 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11048) "protocol")
    let (get_search : 'tags this -> string) =
      fun (x11050 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11050) "search")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerLocation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerLocation") [||])
  end
module VoidFunction =
  struct
    type t = [ `VoidFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11053 : Ojs.t) -> t_of_js x11053
    and t_0_to_js : t_0 -> Ojs.t = fun (x11052 : t) -> t_to_js x11052
    type tags = [ `VoidFunction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VoidFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11056 : Ojs.t) -> intf_of_js __tags_of_js x11056
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11054 : __tags intf) -> intf_to_js __tags_to_js x11054
    let (apply : 'tags this -> unit) =
      fun (x11058 : 'tags this) ->
        ignore (Ojs.apply (this_to_js Obj.magic x11058) [||])
    let cast_from = Obj.magic
  end
module TimerHandler =
  struct
    type t = [ `String of string  | `Other of untyped_function ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x11064 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x11065 : Ojs.t) ->
             let x11066 = x11065 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x11066 "dummy") with
             | "String" -> `String (Ojs.string_of_js x11066)
             | "Other" -> `Other (untyped_function_of_js x11066)
             | _ -> assert false) x11064
    and t_to_js : t -> Ojs.t =
      fun
        (x11060 :
          [ `String of string  | `Other of untyped_function ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x11061 : [ `String of string  | `Other of untyped_function ])
             ->
             match x11061 with
             | `String x11062 -> Ojs.string_to_js x11062
             | `Other x11063 -> untyped_function_to_js x11063) x11060
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11068 : Ojs.t) -> t_of_js x11068
    and t_0_to_js : t_0 -> Ojs.t = fun (x11067 : t) -> t_to_js x11067
  end
module CanvasImageSource =
  struct
    type t = (ImageBitmap.t, OffscreenCanvas.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x11072 : Ojs.t) ->
        union2_of_js ImageBitmap.t_of_js OffscreenCanvas.t_of_js x11072
    and t_to_js : t -> Ojs.t =
      fun (x11069 : (ImageBitmap.t, OffscreenCanvas.t) union2) ->
        union2_to_js ImageBitmap.t_to_js OffscreenCanvas.t_to_js x11069
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11076 : Ojs.t) -> t_of_js x11076
    and t_0_to_js : t_0 -> Ojs.t = fun (x11075 : t) -> t_to_js x11075
  end
module ImageBitmapSource =
  struct
    type t = (Blob.t, CanvasImageSource.t, ImageData.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x11081 : Ojs.t) ->
        union3_of_js Blob.t_of_js CanvasImageSource.t_of_js ImageData.t_of_js
          x11081
    and t_to_js : t -> Ojs.t =
      fun (x11077 : (Blob.t, CanvasImageSource.t, ImageData.t) union3) ->
        union3_to_js Blob.t_to_js CanvasImageSource.t_to_js ImageData.t_to_js
          x11077
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11086 : Ojs.t) -> t_of_js x11086
    and t_0_to_js : t_0 -> Ojs.t = fun (x11085 : t) -> t_to_js x11085
  end
module ResizeQuality =
  struct
    type t =
      [ `L_s106_low  | `L_s112_medium  | `L_s149_pixelated  | `L_s84_high ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11088 : Ojs.t) ->
        let x11089 = x11088 in
        match Ojs.string_of_js x11089 with
        | "low" -> `L_s106_low
        | "medium" -> `L_s112_medium
        | "pixelated" -> `L_s149_pixelated
        | "high" -> `L_s84_high
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11087 :
          [ `L_s106_low  | `L_s112_medium  | `L_s149_pixelated 
          | `L_s84_high ])
        ->
        match x11087 with
        | `L_s106_low -> Ojs.string_to_js "low"
        | `L_s112_medium -> Ojs.string_to_js "medium"
        | `L_s149_pixelated -> Ojs.string_to_js "pixelated"
        | `L_s84_high -> Ojs.string_to_js "high"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11091 : Ojs.t) -> t_of_js x11091
    and t_0_to_js : t_0 -> Ojs.t = fun (x11090 : t) -> t_to_js x11090
  end
module PremultiplyAlpha =
  struct
    type t = [ `L_s128_none  | `L_s152_premultiply  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11093 : Ojs.t) ->
        let x11094 = x11093 in
        match Ojs.string_of_js x11094 with
        | "none" -> `L_s128_none
        | "premultiply" -> `L_s152_premultiply
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11092 : [ `L_s128_none  | `L_s152_premultiply  | `L_s57_default ])
        ->
        match x11092 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s152_premultiply -> Ojs.string_to_js "premultiply"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11096 : Ojs.t) -> t_of_js x11096
    and t_0_to_js : t_0 -> Ojs.t = fun (x11095 : t) -> t_to_js x11095
  end
module ImageOrientation =
  struct
    type t = [ `L_s128_none  | `L_s74_flipY ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11098 : Ojs.t) ->
        let x11099 = x11098 in
        match Ojs.string_of_js x11099 with
        | "none" -> `L_s128_none
        | "flipY" -> `L_s74_flipY
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11097 : [ `L_s128_none  | `L_s74_flipY ]) ->
        match x11097 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s74_flipY -> Ojs.string_to_js "flipY"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11101 : Ojs.t) -> t_of_js x11101
    and t_0_to_js : t_0 -> Ojs.t = fun (x11100 : t) -> t_to_js x11100
  end
module ColorSpaceConversion =
  struct
    type t = [ `L_s128_none  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11103 : Ojs.t) ->
        let x11104 = x11103 in
        match Ojs.string_of_js x11104 with
        | "none" -> `L_s128_none
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11102 : [ `L_s128_none  | `L_s57_default ]) ->
        match x11102 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11106 : Ojs.t) -> t_of_js x11106
    and t_0_to_js : t_0 -> Ojs.t = fun (x11105 : t) -> t_to_js x11105
  end
module ImageBitmapOptions =
  struct
    type t = [ `ImageBitmapOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11108 : Ojs.t) -> t_of_js x11108
    and t_0_to_js : t_0 -> Ojs.t = fun (x11107 : t) -> t_to_js x11107
    type tags = [ `ImageBitmapOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11111 : Ojs.t) -> intf_of_js __tags_of_js x11111
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11109 : __tags intf) -> intf_to_js __tags_to_js x11109
    let (get_colorSpaceConversion : 'tags this -> ColorSpaceConversion.t) =
      fun (x11113 : 'tags this) ->
        ColorSpaceConversion.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11113)
             "colorSpaceConversion")
    let (set_colorSpaceConversion :
      'tags this -> ColorSpaceConversion.t -> unit) =
      fun (x11115 : 'tags this) ->
        fun (x11116 : ColorSpaceConversion.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11115)
            "colorSpaceConversion" (ColorSpaceConversion.t_to_js x11116)
    let (get_imageOrientation : 'tags this -> ImageOrientation.t) =
      fun (x11118 : 'tags this) ->
        ImageOrientation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11118)
             "imageOrientation")
    let (set_imageOrientation : 'tags this -> ImageOrientation.t -> unit) =
      fun (x11120 : 'tags this) ->
        fun (x11121 : ImageOrientation.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11120) "imageOrientation"
            (ImageOrientation.t_to_js x11121)
    let (get_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t) =
      fun (x11123 : 'tags this) ->
        PremultiplyAlpha.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11123)
             "premultiplyAlpha")
    let (set_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t -> unit) =
      fun (x11125 : 'tags this) ->
        fun (x11126 : PremultiplyAlpha.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11125) "premultiplyAlpha"
            (PremultiplyAlpha.t_to_js x11126)
    let (get_resizeHeight : 'tags this -> float) =
      fun (x11128 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11128) "resizeHeight")
    let (set_resizeHeight : 'tags this -> float -> unit) =
      fun (x11130 : 'tags this) ->
        fun (x11131 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11130) "resizeHeight"
            (Ojs.float_to_js x11131)
    let (get_resizeQuality : 'tags this -> ResizeQuality.t) =
      fun (x11133 : 'tags this) ->
        ResizeQuality.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11133) "resizeQuality")
    let (set_resizeQuality : 'tags this -> ResizeQuality.t -> unit) =
      fun (x11135 : 'tags this) ->
        fun (x11136 : ResizeQuality.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11135) "resizeQuality"
            (ResizeQuality.t_to_js x11136)
    let (get_resizeWidth : 'tags this -> float) =
      fun (x11138 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11138) "resizeWidth")
    let (set_resizeWidth : 'tags this -> float -> unit) =
      fun (x11140 : 'tags this) ->
        fun (x11141 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11140) "resizeWidth"
            (Ojs.float_to_js x11141)
    let (create :
      colorSpaceConversion:ColorSpaceConversion.t ->
        imageOrientation:ImageOrientation.t ->
          premultiplyAlpha:PremultiplyAlpha.t ->
            resizeHeight:float ->
              resizeQuality:ResizeQuality.t -> resizeWidth:float -> unit -> t)
      =
      fun ~colorSpaceConversion:(x11143 : ColorSpaceConversion.t) ->
        fun ~imageOrientation:(x11144 : ImageOrientation.t) ->
          fun ~premultiplyAlpha:(x11145 : PremultiplyAlpha.t) ->
            fun ~resizeHeight:(x11146 : float) ->
              fun ~resizeQuality:(x11147 : ResizeQuality.t) ->
                fun ~resizeWidth:(x11148 : float) ->
                  fun () ->
                    let x11149 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x11149 "colorSpaceConversion"
                      (ColorSpaceConversion.t_to_js x11143);
                    Ojs.set_prop_ascii x11149 "imageOrientation"
                      (ImageOrientation.t_to_js x11144);
                    Ojs.set_prop_ascii x11149 "premultiplyAlpha"
                      (PremultiplyAlpha.t_to_js x11145);
                    Ojs.set_prop_ascii x11149 "resizeHeight"
                      (Ojs.float_to_js x11146);
                    Ojs.set_prop_ascii x11149 "resizeQuality"
                      (ResizeQuality.t_to_js x11147);
                    Ojs.set_prop_ascii x11149 "resizeWidth"
                      (Ojs.float_to_js x11148);
                    t_of_js x11149
    let cast_from = Obj.magic
  end
module IDBFactory =
  struct
    type t = [ `IDBFactory ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11151 : Ojs.t) -> t_of_js x11151
    and t_0_to_js : t_0 -> Ojs.t = fun (x11150 : t) -> t_to_js x11150
    type tags = [ `IDBFactory ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBFactory ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11154 : Ojs.t) -> intf_of_js __tags_of_js x11154
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11152 : __tags intf) -> intf_to_js __tags_to_js x11152
    let (cmp : 'tags this -> first:any -> second:any -> float) =
      fun (x11158 : 'tags this) ->
        fun ~first:(x11156 : any) ->
          fun ~second:(x11157 : any) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x11158) "cmp"
                 [|(any_to_js x11156);(any_to_js x11157)|])
    let (databases : 'tags this -> IDBDatabaseInfo.t list Promise.t_1) =
      fun (x11160 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11162 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x11162)
          (Ojs.call (this_to_js Obj.magic x11160) "databases" [||])
    let (deleteDatabase : 'tags this -> name:string -> IDBOpenDBRequest.t) =
      fun (x11165 : 'tags this) ->
        fun ~name:(x11164 : string) ->
          IDBOpenDBRequest.t_of_js
            (Ojs.call (this_to_js Obj.magic x11165) "deleteDatabase"
               [|(Ojs.string_to_js x11164)|])
    let (open_ :
      'tags this ->
        name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun (x11171 : 'tags this) ->
        fun ~name:(x11167 : string) ->
          fun ?version:(x11168 : float option) ->
            fun () ->
              IDBOpenDBRequest.t_of_js
                (let x11173 = this_to_js Obj.magic x11171 in
                 Ojs.call (Ojs.get_prop_ascii x11173 "open") "apply"
                   [|x11173;((let x11169 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11169 "push"
                                   [|(Ojs.string_to_js x11167)|]);
                              (match x11168 with
                               | Some x11170 ->
                                   ignore
                                     (Ojs.call x11169 "push"
                                        [|(Ojs.float_to_js x11170)|])
                               | None -> ());
                              x11169))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBFactory")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBFactory") [||])
  end
module Crypto =
  struct
    type t = [ `Crypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11175 : Ojs.t) -> t_of_js x11175
    and t_0_to_js : t_0 -> Ojs.t = fun (x11174 : t) -> t_to_js x11174
    type tags = [ `Crypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11178 : Ojs.t) -> intf_of_js __tags_of_js x11178
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11176 : __tags intf) -> intf_to_js __tags_to_js x11176
    let (get_subtle : 'tags this -> SubtleCrypto.t) =
      fun (x11180 : 'tags this) ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11180) "subtle")
    let (getRandomValues : 'tags this -> array:'T -> 'T) =
      fun (x11183 : 'tags this) ->
        fun ~array:(x11182 : 'T) ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic x11183) "getRandomValues"
               [|(Obj.magic x11182)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Crypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Crypto") [||])
  end
module CacheStorage =
  struct
    type t = [ `CacheStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11186 : Ojs.t) -> t_of_js x11186
    and t_0_to_js : t_0 -> Ojs.t = fun (x11185 : t) -> t_to_js x11185
    type tags = [ `CacheStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11189 : Ojs.t) -> intf_of_js __tags_of_js x11189
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11187 : __tags intf) -> intf_to_js __tags_to_js x11187
    let (delete : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x11192 : 'tags this) ->
        fun ~cacheName:(x11191 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x11192) "delete"
               [|(Ojs.string_to_js x11191)|])
    let (has : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x11196 : 'tags this) ->
        fun ~cacheName:(x11195 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x11196) "has"
               [|(Ojs.string_to_js x11195)|])
    let (keys : 'tags this -> string list Promise.t_1) =
      fun (x11199 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11201 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x11201)
          (Ojs.call (this_to_js Obj.magic x11199) "keys" [||])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:MultiCacheQueryOptions.t ->
            unit -> Response.t option Promise.t_1)
      =
      fun (x11207 : 'tags this) ->
        fun ~request:(x11203 : RequestInfo.t) ->
          fun ?options:(x11204 : MultiCacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x11210 : Ojs.t) ->
                   Ojs.option_of_js Response.t_of_js x11210)
                (let x11209 = this_to_js Obj.magic x11207 in
                 Ojs.call (Ojs.get_prop_ascii x11209 "match") "apply"
                   [|x11209;((let x11205 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11205 "push"
                                   [|(RequestInfo.t_to_js x11203)|]);
                              (match x11204 with
                               | Some x11206 ->
                                   ignore
                                     (Ojs.call x11205 "push"
                                        [|(MultiCacheQueryOptions.t_to_js
                                             x11206)|])
                               | None -> ());
                              x11205))|])
    let (open_ : 'tags this -> cacheName:string -> Cache.t Promise.t_1) =
      fun (x11213 : 'tags this) ->
        fun ~cacheName:(x11212 : string) ->
          Promise.t_1_of_js Cache.t_of_js
            (Ojs.call (this_to_js Obj.magic x11213) "open"
               [|(Ojs.string_to_js x11212)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CacheStorage")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CacheStorage") [||])
  end
module WindowOrWorkerGlobalScope =
  struct
    type t = [ `WindowOrWorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11217 : Ojs.t) -> t_of_js x11217
    and t_0_to_js : t_0 -> Ojs.t = fun (x11216 : t) -> t_to_js x11216
    type tags = [ `WindowOrWorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WindowOrWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11220 : Ojs.t) -> intf_of_js __tags_of_js x11220
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11218 : __tags intf) -> intf_to_js __tags_to_js x11218
    let (get_caches : 'tags this -> CacheStorage.t) =
      fun (x11222 : 'tags this) ->
        CacheStorage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11222) "caches")
    let (get_crossOriginIsolated : 'tags this -> bool) =
      fun (x11224 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11224)
             "crossOriginIsolated")
    let (get_crypto : 'tags this -> Crypto.t) =
      fun (x11226 : 'tags this) ->
        Crypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11226) "crypto")
    let (get_indexedDB : 'tags this -> IDBFactory.t) =
      fun (x11228 : 'tags this) ->
        IDBFactory.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11228) "indexedDB")
    let (get_isSecureContext : 'tags this -> bool) =
      fun (x11230 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11230) "isSecureContext")
    let (get_origin : 'tags this -> string) =
      fun (x11232 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11232) "origin")
    let (get_performance : 'tags this -> Performance.t) =
      fun (x11234 : 'tags this) ->
        Performance.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11234) "performance")
    let (atob : 'tags this -> data:string -> string) =
      fun (x11237 : 'tags this) ->
        fun ~data:(x11236 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11237) "atob"
               [|(Ojs.string_to_js x11236)|])
    let (btoa : 'tags this -> data:string -> string) =
      fun (x11240 : 'tags this) ->
        fun ~data:(x11239 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11240) "btoa"
               [|(Ojs.string_to_js x11239)|])
    let (clearInterval : 'tags this -> ?handle:float -> unit -> unit) =
      fun (x11245 : 'tags this) ->
        fun ?handle:(x11242 : float option) ->
          fun () ->
            ignore
              (let x11247 = this_to_js Obj.magic x11245 in
               Ojs.call (Ojs.get_prop_ascii x11247 "clearInterval") "apply"
                 [|x11247;((let x11243 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11242 with
                             | Some x11244 ->
                                 ignore
                                   (Ojs.call x11243 "push"
                                      [|(Ojs.float_to_js x11244)|])
                             | None -> ());
                            x11243))|])
    let (clearTimeout : 'tags this -> ?handle:float -> unit -> unit) =
      fun (x11251 : 'tags this) ->
        fun ?handle:(x11248 : float option) ->
          fun () ->
            ignore
              (let x11253 = this_to_js Obj.magic x11251 in
               Ojs.call (Ojs.get_prop_ascii x11253 "clearTimeout") "apply"
                 [|x11253;((let x11249 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11248 with
                             | Some x11250 ->
                                 ignore
                                   (Ojs.call x11249 "push"
                                      [|(Ojs.float_to_js x11250)|])
                             | None -> ());
                            x11249))|])
    let (createImageBitmap :
      'tags this ->
        image:ImageBitmapSource.t ->
          ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x11258 : 'tags this) ->
        fun ~image:(x11254 : ImageBitmapSource.t) ->
          fun ?options:(x11255 : ImageBitmapOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ImageBitmap.t_of_js
                (let x11260 = this_to_js Obj.magic x11258 in
                 Ojs.call (Ojs.get_prop_ascii x11260 "createImageBitmap")
                   "apply"
                   [|x11260;((let x11256 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11256 "push"
                                   [|(ImageBitmapSource.t_to_js x11254)|]);
                              (match x11255 with
                               | Some x11257 ->
                                   ignore
                                     (Ojs.call x11256 "push"
                                        [|(ImageBitmapOptions.t_to_js x11257)|])
                               | None -> ());
                              x11256))|])
    let (createImageBitmap' :
      'tags this ->
        image:ImageBitmapSource.t ->
          sx:float ->
            sy:float ->
              sw:float ->
                sh:float ->
                  ?options:ImageBitmapOptions.t ->
                    unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x11270 : 'tags this) ->
        fun ~image:(x11262 : ImageBitmapSource.t) ->
          fun ~sx:(x11263 : float) ->
            fun ~sy:(x11264 : float) ->
              fun ~sw:(x11265 : float) ->
                fun ~sh:(x11266 : float) ->
                  fun ?options:(x11267 : ImageBitmapOptions.t option) ->
                    fun () ->
                      Promise.t_1_of_js ImageBitmap.t_of_js
                        (let x11272 = this_to_js Obj.magic x11270 in
                         Ojs.call
                           (Ojs.get_prop_ascii x11272 "createImageBitmap")
                           "apply"
                           [|x11272;((let x11268 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x11268 "push"
                                           [|(ImageBitmapSource.t_to_js
                                                x11262)|]);
                                      ignore
                                        (Ojs.call x11268 "push"
                                           [|(Ojs.float_to_js x11263)|]);
                                      ignore
                                        (Ojs.call x11268 "push"
                                           [|(Ojs.float_to_js x11264)|]);
                                      ignore
                                        (Ojs.call x11268 "push"
                                           [|(Ojs.float_to_js x11265)|]);
                                      ignore
                                        (Ojs.call x11268 "push"
                                           [|(Ojs.float_to_js x11266)|]);
                                      (match x11267 with
                                       | Some x11269 ->
                                           ignore
                                             (Ojs.call x11268 "push"
                                                [|(ImageBitmapOptions.t_to_js
                                                     x11269)|])
                                       | None -> ());
                                      x11268))|])
    let (fetch :
      'tags this ->
        input:RequestInfo.t ->
          ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
      =
      fun (x11278 : 'tags this) ->
        fun ~input:(x11274 : RequestInfo.t) ->
          fun ?init:(x11275 : RequestInit.t option) ->
            fun () ->
              Promise.t_1_of_js Response.t_of_js
                (let x11280 = this_to_js Obj.magic x11278 in
                 Ojs.call (Ojs.get_prop_ascii x11280 "fetch") "apply"
                   [|x11280;((let x11276 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11276 "push"
                                   [|(RequestInfo.t_to_js x11274)|]);
                              (match x11275 with
                               | Some x11277 ->
                                   ignore
                                     (Ojs.call x11276 "push"
                                        [|(RequestInit.t_to_js x11277)|])
                               | None -> ());
                              x11276))|])
    let (queueMicrotask : 'tags this -> callback:VoidFunction.t -> unit) =
      fun (x11283 : 'tags this) ->
        fun ~callback:(x11282 : VoidFunction.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11283) "queueMicrotask"
               [|(VoidFunction.t_to_js x11282)|])
    let (setInterval :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x11291 : 'tags this) ->
        fun ~handler:(x11285 : TimerHandler.t) ->
          fun ?timeout:(x11286 : float option) ->
            fun ~arguments:(x11287 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x11293 = this_to_js Obj.magic x11291 in
                   Ojs.call (Ojs.get_prop_ascii x11293 "setInterval") "apply"
                     [|x11293;((let x11288 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11288 "push"
                                     [|(TimerHandler.t_to_js x11285)|]);
                                (match x11286 with
                                 | Some x11290 ->
                                     ignore
                                       (Ojs.call x11288 "push"
                                          [|(Ojs.float_to_js x11290)|])
                                 | None -> ());
                                List.iter
                                  (fun (x11289 : any) ->
                                     ignore
                                       (Ojs.call x11288 "push"
                                          [|(any_to_js x11289)|])) x11287;
                                x11288))|])
    let (setTimeout :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x11300 : 'tags this) ->
        fun ~handler:(x11294 : TimerHandler.t) ->
          fun ?timeout:(x11295 : float option) ->
            fun ~arguments:(x11296 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x11302 = this_to_js Obj.magic x11300 in
                   Ojs.call (Ojs.get_prop_ascii x11302 "setTimeout") "apply"
                     [|x11302;((let x11297 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11297 "push"
                                     [|(TimerHandler.t_to_js x11294)|]);
                                (match x11295 with
                                 | Some x11299 ->
                                     ignore
                                       (Ojs.call x11297 "push"
                                          [|(Ojs.float_to_js x11299)|])
                                 | None -> ());
                                List.iter
                                  (fun (x11298 : any) ->
                                     ignore
                                       (Ojs.call x11297 "push"
                                          [|(any_to_js x11298)|])) x11296;
                                x11297))|])
    let cast_from = Obj.magic
  end
module FontFaceSource =
  struct
    type t = [ `FontFaceSource ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11304 : Ojs.t) -> t_of_js x11304
    and t_0_to_js : t_0 -> Ojs.t = fun (x11303 : t) -> t_to_js x11303
    type tags = [ `FontFaceSource ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11307 : Ojs.t) -> intf_of_js __tags_of_js x11307
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11305 : __tags intf) -> intf_to_js __tags_to_js x11305
    let (get_fonts : 'tags this -> FontFaceSet.t) =
      fun (x11309 : 'tags this) ->
        FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11309) "fonts")
    let (create : fonts:FontFaceSet.t -> unit -> t) =
      fun ~fonts:(x11311 : FontFaceSet.t) ->
        fun () ->
          let x11312 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11312 "fonts" (FontFaceSet.t_to_js x11311);
          t_of_js x11312
    let cast_from = Obj.magic
  end
module WorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11314 : Ojs.t) -> t_of_js x11314
    and t_0_to_js : t_0 -> Ojs.t = fun (x11313 : t) -> t_to_js x11313
    type tags =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11317 : Ojs.t) -> intf_of_js __tags_of_js x11317
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11315 : __tags intf) -> intf_to_js __tags_to_js x11315
    let (get_location : 'tags this -> WorkerLocation.t) =
      fun (x11319 : 'tags this) ->
        WorkerLocation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11319) "location")
    let (get_navigator : 'tags this -> WorkerNavigator.t) =
      fun (x11321 : 'tags this) ->
        WorkerNavigator.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11321) "navigator")
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option) =
      fun (x11323 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11325 : Ojs.t) ->
             fun ~this:(x11326 : t) ->
               fun ~ev:(x11327 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x11325
                      [|(t_to_js x11326);(ErrorEvent.t_to_js x11327)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11323) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit) =
      fun (x11328 : 'tags this) ->
        fun (x11329 : (this:t -> ev:ErrorEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11328) "onerror"
            (Ojs.option_to_js
               (fun (x11330 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11331 : Ojs.t) ->
                       fun (x11332 : Ojs.t) ->
                         any_to_js
                           (x11330 ~this:(t_of_js x11331)
                              ~ev:(ErrorEvent.t_of_js x11332)))) x11329)
    let (get_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11334 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11336 : Ojs.t) ->
             fun ~this:(x11337 : t) ->
               fun ~ev:(x11338 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11336
                      [|(t_to_js x11337);(Event.t_to_js x11338)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11334)
             "onlanguagechange")
    let (set_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11339 : 'tags this) ->
        fun (x11340 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11339) "onlanguagechange"
            (Ojs.option_to_js
               (fun (x11341 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11342 : Ojs.t) ->
                       fun (x11343 : Ojs.t) ->
                         any_to_js
                           (x11341 ~this:(t_of_js x11342)
                              ~ev:(Event.t_of_js x11343)))) x11340)
    let (get_onoffline : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x11345 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11347 : Ojs.t) ->
             fun ~this:(x11348 : t) ->
               fun ~ev:(x11349 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11347
                      [|(t_to_js x11348);(Event.t_to_js x11349)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11345) "onoffline")
    let (set_onoffline :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11350 : 'tags this) ->
        fun (x11351 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11350) "onoffline"
            (Ojs.option_to_js
               (fun (x11352 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11353 : Ojs.t) ->
                       fun (x11354 : Ojs.t) ->
                         any_to_js
                           (x11352 ~this:(t_of_js x11353)
                              ~ev:(Event.t_of_js x11354)))) x11351)
    let (get_ononline : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11356 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11358 : Ojs.t) ->
             fun ~this:(x11359 : t) ->
               fun ~ev:(x11360 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11358
                      [|(t_to_js x11359);(Event.t_to_js x11360)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11356) "ononline")
    let (set_ononline :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11361 : 'tags this) ->
        fun (x11362 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11361) "ononline"
            (Ojs.option_to_js
               (fun (x11363 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11364 : Ojs.t) ->
                       fun (x11365 : Ojs.t) ->
                         any_to_js
                           (x11363 ~this:(t_of_js x11364)
                              ~ev:(Event.t_of_js x11365)))) x11362)
    let (get_onrejectionhandled :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option) =
      fun (x11367 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11369 : Ojs.t) ->
             fun ~this:(x11370 : t) ->
               fun ~ev:(x11371 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x11369
                      [|(t_to_js x11370);(PromiseRejectionEvent.t_to_js
                                            x11371)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11367)
             "onrejectionhandled")
    let (set_onrejectionhandled :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit)
      =
      fun (x11372 : 'tags this) ->
        fun (x11373 : (this:t -> ev:PromiseRejectionEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11372)
            "onrejectionhandled"
            (Ojs.option_to_js
               (fun (x11374 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11375 : Ojs.t) ->
                       fun (x11376 : Ojs.t) ->
                         any_to_js
                           (x11374 ~this:(t_of_js x11375)
                              ~ev:(PromiseRejectionEvent.t_of_js x11376))))
               x11373)
    let (get_onunhandledrejection :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option) =
      fun (x11378 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11380 : Ojs.t) ->
             fun ~this:(x11381 : t) ->
               fun ~ev:(x11382 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x11380
                      [|(t_to_js x11381);(PromiseRejectionEvent.t_to_js
                                            x11382)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11378)
             "onunhandledrejection")
    let (set_onunhandledrejection :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit)
      =
      fun (x11383 : 'tags this) ->
        fun (x11384 : (this:t -> ev:PromiseRejectionEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11383)
            "onunhandledrejection"
            (Ojs.option_to_js
               (fun (x11385 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11386 : Ojs.t) ->
                       fun (x11387 : Ojs.t) ->
                         any_to_js
                           (x11385 ~this:(t_of_js x11386)
                              ~ev:(PromiseRejectionEvent.t_of_js x11387))))
               x11384)
    let (get_self : 'tags this -> (t, any) intersection2) =
      fun (x11389 : 'tags this) ->
        intersection2_of_js t_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11389) "self")
    let (importScripts :
      'tags this -> urls:[ `U1 of string  | `U2 of URL.t ] list -> unit) =
      fun (x11398 : 'tags this) ->
        fun ~urls:(x11393 : [ `U1 of string  | `U2 of URL.t ] list) ->
          ignore
            (let x11400 = this_to_js Obj.magic x11398 in
             Ojs.call (Ojs.get_prop_ascii x11400 "importScripts") "apply"
               [|x11400;((let x11394 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x11395 : [ `U1 of string  | `U2 of URL.t ])
                               ->
                               ignore
                                 (Ojs.call x11394 "push"
                                    [|((match x11395 with
                                        | `U1 x11396 ->
                                            Ojs.string_to_js x11396
                                        | `U2 x11397 -> URL.t_to_js x11397))|]))
                            x11393;
                          x11394))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11410 : 'tags this) ->
        fun ~type_:(x11401 : 'K) ->
          fun ~listener:(x11402 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11403 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11412 = this_to_js Obj.magic x11410 in
                   Ojs.call (Ojs.get_prop_ascii x11412 "addEventListener")
                     "apply"
                     [|x11412;((let x11404 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11404 "push"
                                     [|(Obj.magic x11401)|]);
                                ignore
                                  (Ojs.call x11404 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11408 : Ojs.t) ->
                                             fun (x11409 : Ojs.t) ->
                                               any_to_js
                                                 (x11402
                                                    ~this:(t_of_js x11408)
                                                    ~ev:(any_of_js x11409))))|]);
                                (match x11403 with
                                 | Some x11405 ->
                                     ignore
                                       (Ojs.call x11404 "push"
                                          [|((match x11405 with
                                              | `U1 x11406 ->
                                                  Ojs.bool_to_js x11406
                                              | `U2 x11407 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11407))|])
                                 | None -> ());
                                x11404))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11420 : 'tags this) ->
        fun ~type_:(x11413 : string) ->
          fun ~listener:(x11414 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11415 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11422 = this_to_js Obj.magic x11420 in
                   Ojs.call (Ojs.get_prop_ascii x11422 "addEventListener")
                     "apply"
                     [|x11422;((let x11416 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11416 "push"
                                     [|(Ojs.string_to_js x11413)|]);
                                ignore
                                  (Ojs.call x11416 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11414)|]);
                                (match x11415 with
                                 | Some x11417 ->
                                     ignore
                                       (Ojs.call x11416 "push"
                                          [|((match x11417 with
                                              | `U1 x11418 ->
                                                  Ojs.bool_to_js x11418
                                              | `U2 x11419 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11419))|])
                                 | None -> ());
                                x11416))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11432 : 'tags this) ->
        fun ~type_:(x11423 : 'K) ->
          fun ~listener:(x11424 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11425 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11434 = this_to_js Obj.magic x11432 in
                   Ojs.call (Ojs.get_prop_ascii x11434 "removeEventListener")
                     "apply"
                     [|x11434;((let x11426 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11426 "push"
                                     [|(Obj.magic x11423)|]);
                                ignore
                                  (Ojs.call x11426 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11430 : Ojs.t) ->
                                             fun (x11431 : Ojs.t) ->
                                               any_to_js
                                                 (x11424
                                                    ~this:(t_of_js x11430)
                                                    ~ev:(any_of_js x11431))))|]);
                                (match x11425 with
                                 | Some x11427 ->
                                     ignore
                                       (Ojs.call x11426 "push"
                                          [|((match x11427 with
                                              | `U1 x11428 ->
                                                  Ojs.bool_to_js x11428
                                              | `U2 x11429 ->
                                                  EventListenerOptions.t_to_js
                                                    x11429))|])
                                 | None -> ());
                                x11426))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11442 : 'tags this) ->
        fun ~type_:(x11435 : string) ->
          fun ~listener:(x11436 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11437 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11444 = this_to_js Obj.magic x11442 in
                   Ojs.call (Ojs.get_prop_ascii x11444 "removeEventListener")
                     "apply"
                     [|x11444;((let x11438 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11438 "push"
                                     [|(Ojs.string_to_js x11435)|]);
                                ignore
                                  (Ojs.call x11438 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11436)|]);
                                (match x11437 with
                                 | Some x11439 ->
                                     ignore
                                       (Ojs.call x11438 "push"
                                          [|((match x11439 with
                                              | `U1 x11440 ->
                                                  Ojs.bool_to_js x11440
                                              | `U2 x11441 ->
                                                  EventListenerOptions.t_to_js
                                                    x11441))|])
                                 | None -> ());
                                x11438))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope")
             [||])
  end
module SharedWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11446 : Ojs.t) -> t_of_js x11446
    and t_0_to_js : t_0 -> Ojs.t = fun (x11445 : t) -> t_to_js x11445
    type tags =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11449 : Ojs.t) -> intf_of_js __tags_of_js x11449
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11447 : __tags intf) -> intf_to_js __tags_to_js x11447
    let (get_name : 'tags this -> string) =
      fun (x11451 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11451) "name")
    let (get_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x11453 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11455 : Ojs.t) ->
             fun ~this:(x11456 : t) ->
               fun ~ev:(x11457 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x11455
                      [|(t_to_js x11456);(MessageEvent.t_0_to_js x11457)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11453) "onconnect")
    let (set_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x11458 : 'tags this) ->
        fun (x11459 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11458) "onconnect"
            (Ojs.option_to_js
               (fun (x11460 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11461 : Ojs.t) ->
                       fun (x11462 : Ojs.t) ->
                         any_to_js
                           (x11460 ~this:(t_of_js x11461)
                              ~ev:(MessageEvent.t_0_of_js x11462)))) x11459)
    let (close : 'tags this -> unit) =
      fun (x11464 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11464) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11475 : 'tags this) ->
        fun ~type_:(x11466 : 'K) ->
          fun ~listener:(x11467 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11468 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11477 = this_to_js Obj.magic x11475 in
                   Ojs.call (Ojs.get_prop_ascii x11477 "addEventListener")
                     "apply"
                     [|x11477;((let x11469 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11469 "push"
                                     [|(Obj.magic x11466)|]);
                                ignore
                                  (Ojs.call x11469 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11473 : Ojs.t) ->
                                             fun (x11474 : Ojs.t) ->
                                               any_to_js
                                                 (x11467
                                                    ~this:(t_of_js x11473)
                                                    ~ev:(any_of_js x11474))))|]);
                                (match x11468 with
                                 | Some x11470 ->
                                     ignore
                                       (Ojs.call x11469 "push"
                                          [|((match x11470 with
                                              | `U1 x11471 ->
                                                  Ojs.bool_to_js x11471
                                              | `U2 x11472 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11472))|])
                                 | None -> ());
                                x11469))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11485 : 'tags this) ->
        fun ~type_:(x11478 : string) ->
          fun ~listener:(x11479 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11480 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11487 = this_to_js Obj.magic x11485 in
                   Ojs.call (Ojs.get_prop_ascii x11487 "addEventListener")
                     "apply"
                     [|x11487;((let x11481 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11481 "push"
                                     [|(Ojs.string_to_js x11478)|]);
                                ignore
                                  (Ojs.call x11481 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11479)|]);
                                (match x11480 with
                                 | Some x11482 ->
                                     ignore
                                       (Ojs.call x11481 "push"
                                          [|((match x11482 with
                                              | `U1 x11483 ->
                                                  Ojs.bool_to_js x11483
                                              | `U2 x11484 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11484))|])
                                 | None -> ());
                                x11481))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11497 : 'tags this) ->
        fun ~type_:(x11488 : 'K) ->
          fun ~listener:(x11489 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11490 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11499 = this_to_js Obj.magic x11497 in
                   Ojs.call (Ojs.get_prop_ascii x11499 "removeEventListener")
                     "apply"
                     [|x11499;((let x11491 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11491 "push"
                                     [|(Obj.magic x11488)|]);
                                ignore
                                  (Ojs.call x11491 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11495 : Ojs.t) ->
                                             fun (x11496 : Ojs.t) ->
                                               any_to_js
                                                 (x11489
                                                    ~this:(t_of_js x11495)
                                                    ~ev:(any_of_js x11496))))|]);
                                (match x11490 with
                                 | Some x11492 ->
                                     ignore
                                       (Ojs.call x11491 "push"
                                          [|((match x11492 with
                                              | `U1 x11493 ->
                                                  Ojs.bool_to_js x11493
                                              | `U2 x11494 ->
                                                  EventListenerOptions.t_to_js
                                                    x11494))|])
                                 | None -> ());
                                x11491))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11507 : 'tags this) ->
        fun ~type_:(x11500 : string) ->
          fun ~listener:(x11501 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11502 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11509 = this_to_js Obj.magic x11507 in
                   Ojs.call (Ojs.get_prop_ascii x11509 "removeEventListener")
                     "apply"
                     [|x11509;((let x11503 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11503 "push"
                                     [|(Ojs.string_to_js x11500)|]);
                                ignore
                                  (Ojs.call x11503 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11501)|]);
                                (match x11502 with
                                 | Some x11504 ->
                                     ignore
                                       (Ojs.call x11503 "push"
                                          [|((match x11504 with
                                              | `U1 x11505 ->
                                                  Ojs.bool_to_js x11505
                                              | `U2 x11506 ->
                                                  EventListenerOptions.t_to_js
                                                    x11506))|])
                                 | None -> ());
                                x11503))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerRegistrationEventMap =
  struct
    type t = [ `ServiceWorkerRegistrationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11511 : Ojs.t) -> t_of_js x11511
    and t_0_to_js : t_0 -> Ojs.t = fun (x11510 : t) -> t_to_js x11510
    type tags = [ `ServiceWorkerRegistrationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistrationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11514 : Ojs.t) -> intf_of_js __tags_of_js x11514
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11512 : __tags intf) -> intf_to_js __tags_to_js x11512
    let (get_updatefound : 'tags this -> Event.t) =
      fun (x11516 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11516) "updatefound")
    let (set_updatefound : 'tags this -> Event.t -> unit) =
      fun (x11518 : 'tags this) ->
        fun (x11519 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11518) "updatefound"
            (Event.t_to_js x11519)
    let (create : updatefound:Event.t -> unit -> t) =
      fun ~updatefound:(x11521 : Event.t) ->
        fun () ->
          let x11522 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11522 "updatefound" (Event.t_to_js x11521);
          t_of_js x11522
    let cast_from = Obj.magic
  end
module PushMessageData =
  struct
    type t = [ `PushMessageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11524 : Ojs.t) -> t_of_js x11524
    and t_0_to_js : t_0 -> Ojs.t = fun (x11523 : t) -> t_to_js x11523
    type tags = [ `PushMessageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushMessageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11527 : Ojs.t) -> intf_of_js __tags_of_js x11527
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11525 : __tags intf) -> intf_to_js __tags_to_js x11525
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0) =
      fun (x11529 : 'tags this) ->
        ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x11529) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t) =
      fun (x11531 : 'tags this) ->
        Blob.t_of_js (Ojs.call (this_to_js Obj.magic x11531) "blob" [||])
    let (json : 'tags this -> any) =
      fun (x11533 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x11533) "json" [||])
    let (text : 'tags this -> string) =
      fun (x11535 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x11535) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushMessageData") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushMessageData") [||])
  end
module PushMessageDataInit =
  struct
    type t = [ `String of string  | `Other of BufferSource.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x11541 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x11542 : Ojs.t) ->
             let x11543 = x11542 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x11543 "dummy") with
             | "String" -> `String (Ojs.string_of_js x11543)
             | "Other" -> `Other (BufferSource.t_of_js x11543)
             | _ -> assert false) x11541
    and t_to_js : t -> Ojs.t =
      fun
        (x11537 :
          [ `String of string  | `Other of BufferSource.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x11538 : [ `String of string  | `Other of BufferSource.t ])
             ->
             match x11538 with
             | `String x11539 -> Ojs.string_to_js x11539
             | `Other x11540 -> BufferSource.t_to_js x11540) x11537
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11545 : Ojs.t) -> t_of_js x11545
    and t_0_to_js : t_0 -> Ojs.t = fun (x11544 : t) -> t_to_js x11544
  end
module ExtendableEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11547 : Ojs.t) -> t_of_js x11547
    and t_0_to_js : t_0 -> Ojs.t = fun (x11546 : t) -> t_to_js x11546
    type tags = [ `EventInit  | `ExtendableEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11550 : Ojs.t) -> intf_of_js __tags_of_js x11550
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11548 : __tags intf) -> intf_to_js __tags_to_js x11548
    let cast_from = Obj.magic
  end
module PushEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11553 : Ojs.t) -> t_of_js x11553
    and t_0_to_js : t_0 -> Ojs.t = fun (x11552 : t) -> t_to_js x11552
    type tags = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11556 : Ojs.t) -> intf_of_js __tags_of_js x11556
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11554 : __tags intf) -> intf_to_js __tags_to_js x11554
    let (get_data : 'tags this -> PushMessageDataInit.t) =
      fun (x11558 : 'tags this) ->
        PushMessageDataInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11558) "data")
    let (set_data : 'tags this -> PushMessageDataInit.t -> unit) =
      fun (x11560 : 'tags this) ->
        fun (x11561 : PushMessageDataInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11560) "data"
            (PushMessageDataInit.t_to_js x11561)
    let (create : data:PushMessageDataInit.t -> unit -> t) =
      fun ~data:(x11563 : PushMessageDataInit.t) ->
        fun () ->
          let x11564 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11564 "data"
            (PushMessageDataInit.t_to_js x11563);
          t_of_js x11564
    let cast_from = Obj.magic
  end
module ExtendableEvent =
  struct
    type t = [ `Event  | `ExtendableEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11566 : Ojs.t) -> t_of_js x11566
    and t_0_to_js : t_0 -> Ojs.t = fun (x11565 : t) -> t_to_js x11565
    type tags = [ `Event  | `ExtendableEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11569 : Ojs.t) -> intf_of_js __tags_of_js x11569
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11567 : __tags intf) -> intf_to_js __tags_to_js x11567
    let (waitUntil : 'tags this -> f:any -> unit) =
      fun (x11572 : 'tags this) ->
        fun ~f:(x11571 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11572) "waitUntil"
               [|(any_to_js x11571)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableEvent") "prototype")
    let (create :
      type_:string -> ?eventInitDict:ExtendableEventInit.t -> unit -> t) =
      fun ~type_:(x11574 : string) ->
        fun ?eventInitDict:(x11575 : ExtendableEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableEvent")
                 (let x11576 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11576 "push" [|(Ojs.string_to_js x11574)|]);
                  (match x11575 with
                   | Some x11577 ->
                       ignore
                         (Ojs.call x11576 "push"
                            [|(ExtendableEventInit.t_to_js x11577)|])
                   | None -> ());
                  x11576))
  end
module PushEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `PushEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11579 : Ojs.t) -> t_of_js x11579
    and t_0_to_js : t_0 -> Ojs.t = fun (x11578 : t) -> t_to_js x11578
    type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11582 : Ojs.t) -> intf_of_js __tags_of_js x11582
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11580 : __tags intf) -> intf_to_js __tags_to_js x11580
    let (get_data : 'tags this -> PushMessageData.t option) =
      fun (x11584 : 'tags this) ->
        Ojs.option_of_js PushMessageData.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11584) "data")
    let (create : ?data:PushMessageData.t -> unit -> t) =
      fun ?data:(x11587 : PushMessageData.t option) ->
        fun () ->
          let x11588 = Ojs.empty_obj () in
          (match x11587 with
           | Some x11589 ->
               Ojs.set_prop_ascii x11588 "data"
                 (PushMessageData.t_to_js x11589)
           | None -> ());
          t_of_js x11588
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t) =
      fun ~type_:(x11590 : string) ->
        fun ?eventInitDict:(x11591 : PushEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "PushEvent")
                 (let x11592 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11592 "push" [|(Ojs.string_to_js x11590)|]);
                  (match x11591 with
                   | Some x11593 ->
                       ignore
                         (Ojs.call x11592 "push"
                            [|(PushEventInit.t_to_js x11593)|])
                   | None -> ());
                  x11592))
  end
module NotificationPermission =
  struct
    type t = [ `L_s57_default  | `L_s58_denied  | `L_s82_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11595 : Ojs.t) ->
        let x11596 = x11595 in
        match Ojs.string_of_js x11596 with
        | "default" -> `L_s57_default
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11594 : [ `L_s57_default  | `L_s58_denied  | `L_s82_granted ]) ->
        match x11594 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11598 : Ojs.t) -> t_of_js x11598
    and t_0_to_js : t_0 -> Ojs.t = fun (x11597 : t) -> t_to_js x11597
  end
module VibratePattern =
  struct
    type t = [ `Number of float  | `Other of float list ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x11604 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x11605 : Ojs.t) ->
             let x11606 = x11605 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x11606 "dummy") with
             | "Number" -> `Number (Ojs.float_of_js x11606)
             | "Other" -> `Other (Ojs.list_of_js Ojs.float_of_js x11606)
             | _ -> assert false) x11604
    and t_to_js : t -> Ojs.t =
      fun (x11599 : [ `Number of float  | `Other of float list ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x11600 : [ `Number of float  | `Other of float list ]) ->
             match x11600 with
             | `Number x11601 -> Ojs.float_to_js x11601
             | `Other x11602 -> Ojs.list_to_js Ojs.float_to_js x11602) x11599
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11609 : Ojs.t) -> t_of_js x11609
    and t_0_to_js : t_0 -> Ojs.t = fun (x11608 : t) -> t_to_js x11608
  end
module NotificationAction =
  struct
    type t = [ `NotificationAction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11611 : Ojs.t) -> t_of_js x11611
    and t_0_to_js : t_0 -> Ojs.t = fun (x11610 : t) -> t_to_js x11610
    type tags = [ `NotificationAction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationAction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11614 : Ojs.t) -> intf_of_js __tags_of_js x11614
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11612 : __tags intf) -> intf_to_js __tags_to_js x11612
    let (get_action : 'tags this -> string) =
      fun (x11616 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11616) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x11618 : 'tags this) ->
        fun (x11619 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11618) "action"
            (Ojs.string_to_js x11619)
    let (get_icon : 'tags this -> string) =
      fun (x11621 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11621) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x11623 : 'tags this) ->
        fun (x11624 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11623) "icon"
            (Ojs.string_to_js x11624)
    let (get_title : 'tags this -> string) =
      fun (x11626 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11626) "title")
    let (set_title : 'tags this -> string -> unit) =
      fun (x11628 : 'tags this) ->
        fun (x11629 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11628) "title"
            (Ojs.string_to_js x11629)
    let (create : action:string -> icon:string -> title:string -> unit -> t)
      =
      fun ~action:(x11631 : string) ->
        fun ~icon:(x11632 : string) ->
          fun ~title:(x11633 : string) ->
            fun () ->
              let x11634 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x11634 "action" (Ojs.string_to_js x11631);
              Ojs.set_prop_ascii x11634 "icon" (Ojs.string_to_js x11632);
              Ojs.set_prop_ascii x11634 "title" (Ojs.string_to_js x11633);
              t_of_js x11634
    let cast_from = Obj.magic
  end
module NotificationDirection =
  struct
    type t = [ `L_s108_ltr  | `L_s171_rtl  | `L_s41_auto ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11636 : Ojs.t) ->
        let x11637 = x11636 in
        match Ojs.string_of_js x11637 with
        | "ltr" -> `L_s108_ltr
        | "rtl" -> `L_s171_rtl
        | "auto" -> `L_s41_auto
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11635 : [ `L_s108_ltr  | `L_s171_rtl  | `L_s41_auto ]) ->
        match x11635 with
        | `L_s108_ltr -> Ojs.string_to_js "ltr"
        | `L_s171_rtl -> Ojs.string_to_js "rtl"
        | `L_s41_auto -> Ojs.string_to_js "auto"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11639 : Ojs.t) -> t_of_js x11639
    and t_0_to_js : t_0 -> Ojs.t = fun (x11638 : t) -> t_to_js x11638
  end
module DOMTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x11641 : Ojs.t) -> Ojs.float_of_js x11641
    and t_to_js : t -> Ojs.t = fun (x11640 : float) -> Ojs.float_to_js x11640
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11643 : Ojs.t) -> t_of_js x11643
    and t_0_to_js : t_0 -> Ojs.t = fun (x11642 : t) -> t_to_js x11642
  end
module NotificationOptions =
  struct
    type t = [ `NotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11645 : Ojs.t) -> t_of_js x11645
    and t_0_to_js : t_0 -> Ojs.t = fun (x11644 : t) -> t_to_js x11644
    type tags = [ `NotificationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11648 : Ojs.t) -> intf_of_js __tags_of_js x11648
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11646 : __tags intf) -> intf_to_js __tags_to_js x11646
    let (get_actions : 'tags this -> NotificationAction.t list) =
      fun (x11650 : 'tags this) ->
        Ojs.list_of_js NotificationAction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11650) "actions")
    let (set_actions : 'tags this -> NotificationAction.t list -> unit) =
      fun (x11653 : 'tags this) ->
        fun (x11654 : NotificationAction.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11653) "actions"
            (Ojs.list_to_js NotificationAction.t_to_js x11654)
    let (get_badge : 'tags this -> string) =
      fun (x11657 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11657) "badge")
    let (set_badge : 'tags this -> string -> unit) =
      fun (x11659 : 'tags this) ->
        fun (x11660 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11659) "badge"
            (Ojs.string_to_js x11660)
    let (get_body : 'tags this -> string) =
      fun (x11662 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11662) "body")
    let (set_body : 'tags this -> string -> unit) =
      fun (x11664 : 'tags this) ->
        fun (x11665 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11664) "body"
            (Ojs.string_to_js x11665)
    let (get_data : 'tags this -> any) =
      fun (x11667 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11667) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x11669 : 'tags this) ->
        fun (x11670 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11669) "data"
            (any_to_js x11670)
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x11672 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11672) "dir")
    let (set_dir : 'tags this -> NotificationDirection.t -> unit) =
      fun (x11674 : 'tags this) ->
        fun (x11675 : NotificationDirection.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11674) "dir"
            (NotificationDirection.t_to_js x11675)
    let (get_icon : 'tags this -> string) =
      fun (x11677 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11677) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x11679 : 'tags this) ->
        fun (x11680 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11679) "icon"
            (Ojs.string_to_js x11680)
    let (get_image : 'tags this -> string) =
      fun (x11682 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11682) "image")
    let (set_image : 'tags this -> string -> unit) =
      fun (x11684 : 'tags this) ->
        fun (x11685 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11684) "image"
            (Ojs.string_to_js x11685)
    let (get_lang : 'tags this -> string) =
      fun (x11687 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11687) "lang")
    let (set_lang : 'tags this -> string -> unit) =
      fun (x11689 : 'tags this) ->
        fun (x11690 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11689) "lang"
            (Ojs.string_to_js x11690)
    let (get_renotify : 'tags this -> bool) =
      fun (x11692 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11692) "renotify")
    let (set_renotify : 'tags this -> bool -> unit) =
      fun (x11694 : 'tags this) ->
        fun (x11695 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11694) "renotify"
            (Ojs.bool_to_js x11695)
    let (get_requireInteraction : 'tags this -> bool) =
      fun (x11697 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11697)
             "requireInteraction")
    let (set_requireInteraction : 'tags this -> bool -> unit) =
      fun (x11699 : 'tags this) ->
        fun (x11700 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11699)
            "requireInteraction" (Ojs.bool_to_js x11700)
    let (get_silent : 'tags this -> bool) =
      fun (x11702 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11702) "silent")
    let (set_silent : 'tags this -> bool -> unit) =
      fun (x11704 : 'tags this) ->
        fun (x11705 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11704) "silent"
            (Ojs.bool_to_js x11705)
    let (get_tag : 'tags this -> string) =
      fun (x11707 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11707) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x11709 : 'tags this) ->
        fun (x11710 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11709) "tag"
            (Ojs.string_to_js x11710)
    let (get_timestamp : 'tags this -> DOMTimeStamp.t) =
      fun (x11712 : 'tags this) ->
        DOMTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11712) "timestamp")
    let (set_timestamp : 'tags this -> DOMTimeStamp.t -> unit) =
      fun (x11714 : 'tags this) ->
        fun (x11715 : DOMTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11714) "timestamp"
            (DOMTimeStamp.t_to_js x11715)
    let (get_vibrate : 'tags this -> VibratePattern.t) =
      fun (x11717 : 'tags this) ->
        VibratePattern.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11717) "vibrate")
    let (set_vibrate : 'tags this -> VibratePattern.t -> unit) =
      fun (x11719 : 'tags this) ->
        fun (x11720 : VibratePattern.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11719) "vibrate"
            (VibratePattern.t_to_js x11720)
    let (create :
      actions:NotificationAction.t list ->
        badge:string ->
          body:string ->
            data:any ->
              dir:NotificationDirection.t ->
                icon:string ->
                  image:string ->
                    lang:string ->
                      renotify:bool ->
                        requireInteraction:bool ->
                          silent:bool ->
                            tag:string ->
                              timestamp:DOMTimeStamp.t ->
                                vibrate:VibratePattern.t -> unit -> t)
      =
      fun ~actions:(x11722 : NotificationAction.t list) ->
        fun ~badge:(x11723 : string) ->
          fun ~body:(x11724 : string) ->
            fun ~data:(x11725 : any) ->
              fun ~dir:(x11726 : NotificationDirection.t) ->
                fun ~icon:(x11727 : string) ->
                  fun ~image:(x11728 : string) ->
                    fun ~lang:(x11729 : string) ->
                      fun ~renotify:(x11730 : bool) ->
                        fun ~requireInteraction:(x11731 : bool) ->
                          fun ~silent:(x11732 : bool) ->
                            fun ~tag:(x11733 : string) ->
                              fun ~timestamp:(x11734 : DOMTimeStamp.t) ->
                                fun ~vibrate:(x11735 : VibratePattern.t) ->
                                  fun () ->
                                    let x11736 = Ojs.empty_obj () in
                                    Ojs.set_prop_ascii x11736 "actions"
                                      (Ojs.list_to_js
                                         NotificationAction.t_to_js x11722);
                                    Ojs.set_prop_ascii x11736 "badge"
                                      (Ojs.string_to_js x11723);
                                    Ojs.set_prop_ascii x11736 "body"
                                      (Ojs.string_to_js x11724);
                                    Ojs.set_prop_ascii x11736 "data"
                                      (any_to_js x11725);
                                    Ojs.set_prop_ascii x11736 "dir"
                                      (NotificationDirection.t_to_js x11726);
                                    Ojs.set_prop_ascii x11736 "icon"
                                      (Ojs.string_to_js x11727);
                                    Ojs.set_prop_ascii x11736 "image"
                                      (Ojs.string_to_js x11728);
                                    Ojs.set_prop_ascii x11736 "lang"
                                      (Ojs.string_to_js x11729);
                                    Ojs.set_prop_ascii x11736 "renotify"
                                      (Ojs.bool_to_js x11730);
                                    Ojs.set_prop_ascii x11736
                                      "requireInteraction"
                                      (Ojs.bool_to_js x11731);
                                    Ojs.set_prop_ascii x11736 "silent"
                                      (Ojs.bool_to_js x11732);
                                    Ojs.set_prop_ascii x11736 "tag"
                                      (Ojs.string_to_js x11733);
                                    Ojs.set_prop_ascii x11736 "timestamp"
                                      (DOMTimeStamp.t_to_js x11734);
                                    Ojs.set_prop_ascii x11736 "vibrate"
                                      (VibratePattern.t_to_js x11735);
                                    t_of_js x11736
    let cast_from = Obj.magic
  end
module Notification =
  struct
    type t = [ `EventTarget  | `Notification ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11739 : Ojs.t) -> t_of_js x11739
    and t_0_to_js : t_0 -> Ojs.t = fun (x11738 : t) -> t_to_js x11738
    type tags = [ `EventTarget  | `Notification ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Notification ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11742 : Ojs.t) -> intf_of_js __tags_of_js x11742
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11740 : __tags intf) -> intf_to_js __tags_to_js x11740
    let (get_body : 'tags this -> string) =
      fun (x11744 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11744) "body")
    let (get_data : 'tags this -> any) =
      fun (x11746 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11746) "data")
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x11748 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11748) "dir")
    let (get_icon : 'tags this -> string) =
      fun (x11750 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11750) "icon")
    let (get_lang : 'tags this -> string) =
      fun (x11752 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11752) "lang")
    let (get_onclick : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11754 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11756 : Ojs.t) ->
             fun ~this:(x11757 : t) ->
               fun ~ev:(x11758 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11756
                      [|(t_to_js x11757);(Event.t_to_js x11758)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11754) "onclick")
    let (set_onclick :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11759 : 'tags this) ->
        fun (x11760 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11759) "onclick"
            (Ojs.option_to_js
               (fun (x11761 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11762 : Ojs.t) ->
                       fun (x11763 : Ojs.t) ->
                         any_to_js
                           (x11761 ~this:(t_of_js x11762)
                              ~ev:(Event.t_of_js x11763)))) x11760)
    let (get_onclose : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11765 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11767 : Ojs.t) ->
             fun ~this:(x11768 : t) ->
               fun ~ev:(x11769 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11767
                      [|(t_to_js x11768);(Event.t_to_js x11769)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11765) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11770 : 'tags this) ->
        fun (x11771 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11770) "onclose"
            (Ojs.option_to_js
               (fun (x11772 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11773 : Ojs.t) ->
                       fun (x11774 : Ojs.t) ->
                         any_to_js
                           (x11772 ~this:(t_of_js x11773)
                              ~ev:(Event.t_of_js x11774)))) x11771)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11776 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11778 : Ojs.t) ->
             fun ~this:(x11779 : t) ->
               fun ~ev:(x11780 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11778
                      [|(t_to_js x11779);(Event.t_to_js x11780)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11776) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11781 : 'tags this) ->
        fun (x11782 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11781) "onerror"
            (Ojs.option_to_js
               (fun (x11783 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11784 : Ojs.t) ->
                       fun (x11785 : Ojs.t) ->
                         any_to_js
                           (x11783 ~this:(t_of_js x11784)
                              ~ev:(Event.t_of_js x11785)))) x11782)
    let (get_onshow : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11787 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11789 : Ojs.t) ->
             fun ~this:(x11790 : t) ->
               fun ~ev:(x11791 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11789
                      [|(t_to_js x11790);(Event.t_to_js x11791)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11787) "onshow")
    let (set_onshow :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11792 : 'tags this) ->
        fun (x11793 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11792) "onshow"
            (Ojs.option_to_js
               (fun (x11794 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11795 : Ojs.t) ->
                       fun (x11796 : Ojs.t) ->
                         any_to_js
                           (x11794 ~this:(t_of_js x11795)
                              ~ev:(Event.t_of_js x11796)))) x11793)
    let (get_tag : 'tags this -> string) =
      fun (x11798 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11798) "tag")
    let (get_title : 'tags this -> string) =
      fun (x11800 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11800) "title")
    let (close : 'tags this -> unit) =
      fun (x11802 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11802) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11813 : 'tags this) ->
        fun ~type_:(x11804 : 'K) ->
          fun ~listener:(x11805 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11806 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11815 = this_to_js Obj.magic x11813 in
                   Ojs.call (Ojs.get_prop_ascii x11815 "addEventListener")
                     "apply"
                     [|x11815;((let x11807 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11807 "push"
                                     [|(Obj.magic x11804)|]);
                                ignore
                                  (Ojs.call x11807 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11811 : Ojs.t) ->
                                             fun (x11812 : Ojs.t) ->
                                               any_to_js
                                                 (x11805
                                                    ~this:(t_of_js x11811)
                                                    ~ev:(any_of_js x11812))))|]);
                                (match x11806 with
                                 | Some x11808 ->
                                     ignore
                                       (Ojs.call x11807 "push"
                                          [|((match x11808 with
                                              | `U1 x11809 ->
                                                  Ojs.bool_to_js x11809
                                              | `U2 x11810 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11810))|])
                                 | None -> ());
                                x11807))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11823 : 'tags this) ->
        fun ~type_:(x11816 : string) ->
          fun ~listener:(x11817 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11818 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11825 = this_to_js Obj.magic x11823 in
                   Ojs.call (Ojs.get_prop_ascii x11825 "addEventListener")
                     "apply"
                     [|x11825;((let x11819 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11819 "push"
                                     [|(Ojs.string_to_js x11816)|]);
                                ignore
                                  (Ojs.call x11819 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11817)|]);
                                (match x11818 with
                                 | Some x11820 ->
                                     ignore
                                       (Ojs.call x11819 "push"
                                          [|((match x11820 with
                                              | `U1 x11821 ->
                                                  Ojs.bool_to_js x11821
                                              | `U2 x11822 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11822))|])
                                 | None -> ());
                                x11819))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11835 : 'tags this) ->
        fun ~type_:(x11826 : 'K) ->
          fun ~listener:(x11827 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11828 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11837 = this_to_js Obj.magic x11835 in
                   Ojs.call (Ojs.get_prop_ascii x11837 "removeEventListener")
                     "apply"
                     [|x11837;((let x11829 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11829 "push"
                                     [|(Obj.magic x11826)|]);
                                ignore
                                  (Ojs.call x11829 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11833 : Ojs.t) ->
                                             fun (x11834 : Ojs.t) ->
                                               any_to_js
                                                 (x11827
                                                    ~this:(t_of_js x11833)
                                                    ~ev:(any_of_js x11834))))|]);
                                (match x11828 with
                                 | Some x11830 ->
                                     ignore
                                       (Ojs.call x11829 "push"
                                          [|((match x11830 with
                                              | `U1 x11831 ->
                                                  Ojs.bool_to_js x11831
                                              | `U2 x11832 ->
                                                  EventListenerOptions.t_to_js
                                                    x11832))|])
                                 | None -> ());
                                x11829))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11845 : 'tags this) ->
        fun ~type_:(x11838 : string) ->
          fun ~listener:(x11839 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11840 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11847 = this_to_js Obj.magic x11845 in
                   Ojs.call (Ojs.get_prop_ascii x11847 "removeEventListener")
                     "apply"
                     [|x11847;((let x11841 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11841 "push"
                                     [|(Ojs.string_to_js x11838)|]);
                                ignore
                                  (Ojs.call x11841 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11839)|]);
                                (match x11840 with
                                 | Some x11842 ->
                                     ignore
                                       (Ojs.call x11841 "push"
                                          [|((match x11842 with
                                              | `U1 x11843 ->
                                                  Ojs.bool_to_js x11843
                                              | `U2 x11844 ->
                                                  EventListenerOptions.t_to_js
                                                    x11844))|])
                                 | None -> ());
                                x11841))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "prototype")
    let (create :
      title:string -> ?options:NotificationOptions.t -> unit -> t) =
      fun ~title:(x11848 : string) ->
        fun ?options:(x11849 : NotificationOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Notification")
                 (let x11850 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11850 "push" [|(Ojs.string_to_js x11848)|]);
                  (match x11849 with
                   | Some x11851 ->
                       ignore
                         (Ojs.call x11850 "push"
                            [|(NotificationOptions.t_to_js x11851)|])
                   | None -> ());
                  x11850))
    let (permission : unit -> NotificationPermission.t) =
      fun () ->
        NotificationPermission.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "permission")
  end
module NotificationEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11853 : Ojs.t) -> t_of_js x11853
    and t_0_to_js : t_0 -> Ojs.t = fun (x11852 : t) -> t_to_js x11852
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11856 : Ojs.t) -> intf_of_js __tags_of_js x11856
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11854 : __tags intf) -> intf_to_js __tags_to_js x11854
    let (get_action : 'tags this -> string) =
      fun (x11858 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11858) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x11860 : 'tags this) ->
        fun (x11861 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11860) "action"
            (Ojs.string_to_js x11861)
    let (get_notification : 'tags this -> Notification.t) =
      fun (x11863 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11863) "notification")
    let (set_notification : 'tags this -> Notification.t -> unit) =
      fun (x11865 : 'tags this) ->
        fun (x11866 : Notification.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11865) "notification"
            (Notification.t_to_js x11866)
    let (create : action:string -> notification:Notification.t -> unit -> t)
      =
      fun ~action:(x11868 : string) ->
        fun ~notification:(x11869 : Notification.t) ->
          fun () ->
            let x11870 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11870 "action" (Ojs.string_to_js x11868);
            Ojs.set_prop_ascii x11870 "notification"
              (Notification.t_to_js x11869);
            t_of_js x11870
    let cast_from = Obj.magic
  end
module NotificationEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `NotificationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11872 : Ojs.t) -> t_of_js x11872
    and t_0_to_js : t_0 -> Ojs.t = fun (x11871 : t) -> t_to_js x11871
    type tags = [ `Event  | `ExtendableEvent  | `NotificationEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11875 : Ojs.t) -> intf_of_js __tags_of_js x11875
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11873 : __tags intf) -> intf_to_js __tags_to_js x11873
    let (get_action : 'tags this -> string) =
      fun (x11877 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11877) "action")
    let (get_notification : 'tags this -> Notification.t) =
      fun (x11879 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11879) "notification")
    let (create : action:string -> notification:Notification.t -> unit -> t)
      =
      fun ~action:(x11881 : string) ->
        fun ~notification:(x11882 : Notification.t) ->
          fun () ->
            let x11883 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11883 "action" (Ojs.string_to_js x11881);
            Ojs.set_prop_ascii x11883 "notification"
              (Notification.t_to_js x11882);
            t_of_js x11883
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NotificationEvent") "prototype")
    let (create' :
      type_:string -> eventInitDict:NotificationEventInit.t -> t) =
      fun ~type_:(x11884 : string) ->
        fun ~eventInitDict:(x11885 : NotificationEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationEvent")
               [|(Ojs.string_to_js x11884);(NotificationEventInit.t_to_js
                                              x11885)|])
  end
module FetchEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11887 : Ojs.t) -> t_of_js x11887
    and t_0_to_js : t_0 -> Ojs.t = fun (x11886 : t) -> t_to_js x11886
    type tags = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11890 : Ojs.t) -> intf_of_js __tags_of_js x11890
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11888 : __tags intf) -> intf_to_js __tags_to_js x11888
    let (get_clientId : 'tags this -> string) =
      fun (x11892 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11892) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x11894 : 'tags this) ->
        fun (x11895 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11894) "clientId"
            (Ojs.string_to_js x11895)
    let (get_handled : 'tags this -> undefined Promise.t_1) =
      fun (x11897 : 'tags this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11897) "handled")
    let (set_handled : 'tags this -> undefined Promise.t_1 -> unit) =
      fun (x11900 : 'tags this) ->
        fun (x11901 : undefined Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11900) "handled"
            (Promise.t_1_to_js undefined_to_js x11901)
    let (get_preloadResponse : 'tags this -> any Promise.t_1) =
      fun (x11904 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11904) "preloadResponse")
    let (set_preloadResponse : 'tags this -> any Promise.t_1 -> unit) =
      fun (x11907 : 'tags this) ->
        fun (x11908 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11907) "preloadResponse"
            (Promise.t_1_to_js any_to_js x11908)
    let (get_replacesClientId : 'tags this -> string) =
      fun (x11911 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11911)
             "replacesClientId")
    let (set_replacesClientId : 'tags this -> string -> unit) =
      fun (x11913 : 'tags this) ->
        fun (x11914 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11913) "replacesClientId"
            (Ojs.string_to_js x11914)
    let (get_request : 'tags this -> Request.t) =
      fun (x11916 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11916) "request")
    let (set_request : 'tags this -> Request.t -> unit) =
      fun (x11918 : 'tags this) ->
        fun (x11919 : Request.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11918) "request"
            (Request.t_to_js x11919)
    let (get_resultingClientId : 'tags this -> string) =
      fun (x11921 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11921)
             "resultingClientId")
    let (set_resultingClientId : 'tags this -> string -> unit) =
      fun (x11923 : 'tags this) ->
        fun (x11924 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11923)
            "resultingClientId" (Ojs.string_to_js x11924)
    let (create :
      clientId:string ->
        handled:undefined Promise.t_1 ->
          preloadResponse:any Promise.t_1 ->
            replacesClientId:string ->
              request:Request.t -> resultingClientId:string -> unit -> t)
      =
      fun ~clientId:(x11926 : string) ->
        fun ~handled:(x11927 : undefined Promise.t_1) ->
          fun ~preloadResponse:(x11928 : any Promise.t_1) ->
            fun ~replacesClientId:(x11929 : string) ->
              fun ~request:(x11930 : Request.t) ->
                fun ~resultingClientId:(x11931 : string) ->
                  fun () ->
                    let x11932 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x11932 "clientId"
                      (Ojs.string_to_js x11926);
                    Ojs.set_prop_ascii x11932 "handled"
                      (Promise.t_1_to_js undefined_to_js x11927);
                    Ojs.set_prop_ascii x11932 "preloadResponse"
                      (Promise.t_1_to_js any_to_js x11928);
                    Ojs.set_prop_ascii x11932 "replacesClientId"
                      (Ojs.string_to_js x11929);
                    Ojs.set_prop_ascii x11932 "request"
                      (Request.t_to_js x11930);
                    Ojs.set_prop_ascii x11932 "resultingClientId"
                      (Ojs.string_to_js x11931);
                    t_of_js x11932
    let cast_from = Obj.magic
  end
module FetchEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `FetchEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11936 : Ojs.t) -> t_of_js x11936
    and t_0_to_js : t_0 -> Ojs.t = fun (x11935 : t) -> t_to_js x11935
    type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11939 : Ojs.t) -> intf_of_js __tags_of_js x11939
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11937 : __tags intf) -> intf_to_js __tags_to_js x11937
    let (get_clientId : 'tags this -> string) =
      fun (x11941 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11941) "clientId")
    let (get_handled : 'tags this -> undefined Promise.t_1) =
      fun (x11943 : 'tags this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11943) "handled")
    let (get_request : 'tags this -> Request.t) =
      fun (x11946 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11946) "request")
    let (get_resultingClientId : 'tags this -> string) =
      fun (x11948 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11948)
             "resultingClientId")
    let (respondWith :
      'tags this ->
        r:[ `U1 of Response.t  | `U2 of Response.t PromiseLike.t_1 ] -> unit)
      =
      fun (x11954 : 'tags this) ->
        fun
          ~r:(x11950 :
               [ `U1 of Response.t  | `U2 of Response.t PromiseLike.t_1 ])
          ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11954) "respondWith"
               [|((match x11950 with
                   | `U1 x11951 -> Response.t_to_js x11951
                   | `U2 x11952 ->
                       PromiseLike.t_1_to_js Response.t_to_js x11952))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FetchEvent")
             "prototype")
    let (create : type_:string -> eventInitDict:FetchEventInit.t -> t) =
      fun ~type_:(x11956 : string) ->
        fun ~eventInitDict:(x11957 : FetchEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FetchEvent")
               [|(Ojs.string_to_js x11956);(FetchEventInit.t_to_js x11957)|])
  end
module FrameType =
  struct
    type t =
      [ `L_s120_nested  | `L_s128_none  | `L_s192_top_level 
      | `L_s42_auxiliary ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11959 : Ojs.t) ->
        let x11960 = x11959 in
        match Ojs.string_of_js x11960 with
        | "nested" -> `L_s120_nested
        | "none" -> `L_s128_none
        | "top-level" -> `L_s192_top_level
        | "auxiliary" -> `L_s42_auxiliary
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11958 :
          [ `L_s120_nested  | `L_s128_none  | `L_s192_top_level 
          | `L_s42_auxiliary ])
        ->
        match x11958 with
        | `L_s120_nested -> Ojs.string_to_js "nested"
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s192_top_level -> Ojs.string_to_js "top-level"
        | `L_s42_auxiliary -> Ojs.string_to_js "auxiliary"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11962 : Ojs.t) -> t_of_js x11962
    and t_0_to_js : t_0 -> Ojs.t = fun (x11961 : t) -> t_to_js x11961
  end
module ClientTypes =
  struct
    type t =
      [ `L_s176_sharedworker  | `L_s208_window  | `L_s209_worker 
      | `L_s35_all ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11964 : Ojs.t) ->
        let x11965 = x11964 in
        match Ojs.string_of_js x11965 with
        | "sharedworker" -> `L_s176_sharedworker
        | "window" -> `L_s208_window
        | "worker" -> `L_s209_worker
        | "all" -> `L_s35_all
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11963 :
          [ `L_s176_sharedworker  | `L_s208_window  | `L_s209_worker 
          | `L_s35_all ])
        ->
        match x11963 with
        | `L_s176_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s208_window -> Ojs.string_to_js "window"
        | `L_s209_worker -> Ojs.string_to_js "worker"
        | `L_s35_all -> Ojs.string_to_js "all"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11967 : Ojs.t) -> t_of_js x11967
    and t_0_to_js : t_0 -> Ojs.t = fun (x11966 : t) -> t_to_js x11966
  end
module Client =
  struct
    type t = [ `Client ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11969 : Ojs.t) -> t_of_js x11969
    and t_0_to_js : t_0 -> Ojs.t = fun (x11968 : t) -> t_to_js x11968
    type tags = [ `Client ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Client ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11972 : Ojs.t) -> intf_of_js __tags_of_js x11972
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11970 : __tags intf) -> intf_to_js __tags_to_js x11970
    let (get_frameType : 'tags this -> FrameType.t) =
      fun (x11974 : 'tags this) ->
        FrameType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11974) "frameType")
    let (get_id : 'tags this -> string) =
      fun (x11976 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11976) "id")
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x11978 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11978) "type")
    let (get_url : 'tags this -> string) =
      fun (x11980 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11980) "url")
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x11985 : 'tags this) ->
        fun ~message:(x11982 : any) ->
          fun ~transfer:(x11983 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11985) "postMessage"
                 [|(any_to_js x11982);(Ojs.list_to_js Transferable.t_to_js
                                         x11983)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x11991 : 'tags this) ->
        fun ~message:(x11987 : any) ->
          fun ?options:(x11988 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x11993 = this_to_js Obj.magic x11991 in
                 Ojs.call (Ojs.get_prop_ascii x11993 "postMessage") "apply"
                   [|x11993;((let x11989 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11989 "push"
                                   [|(any_to_js x11987)|]);
                              (match x11988 with
                               | Some x11990 ->
                                   ignore
                                     (Ojs.call x11989 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x11990)|])
                               | None -> ());
                              x11989))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Client")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Client") [||])
  end
module ExtendableMessageEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11995 : Ojs.t) -> t_of_js x11995
    and t_0_to_js : t_0 -> Ojs.t = fun (x11994 : t) -> t_to_js x11994
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11998 : Ojs.t) -> intf_of_js __tags_of_js x11998
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11996 : __tags intf) -> intf_to_js __tags_to_js x11996
    let (get_data : 'tags this -> any) =
      fun (x12000 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x12000) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x12002 : 'tags this) ->
        fun (x12003 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12002) "data"
            (any_to_js x12003)
    let (get_lastEventId : 'tags this -> string) =
      fun (x12005 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12005) "lastEventId")
    let (set_lastEventId : 'tags this -> string -> unit) =
      fun (x12007 : 'tags this) ->
        fun (x12008 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12007) "lastEventId"
            (Ojs.string_to_js x12008)
    let (get_origin : 'tags this -> string) =
      fun (x12010 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12010) "origin")
    let (set_origin : 'tags this -> string -> unit) =
      fun (x12012 : 'tags this) ->
        fun (x12013 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12012) "origin"
            (Ojs.string_to_js x12013)
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x12015 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12015) "ports")
    let (set_ports : 'tags this -> MessagePort.t list -> unit) =
      fun (x12018 : 'tags this) ->
        fun (x12019 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12018) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x12019)
    let (get_source :
      'tags this -> (Client.t, MessagePort.t, ServiceWorker.t) union3 option)
      =
      fun (x12022 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12024 : Ojs.t) ->
             union3_of_js Client.t_of_js MessagePort.t_of_js
               ServiceWorker.t_of_js x12024)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12022) "source")
    let (set_source :
      'tags this ->
        [ `Null  | `U1 of Client.t  | `U2 of ServiceWorker.t 
        | `U3 of MessagePort.t ] -> unit)
      =
      fun (x12028 : 'tags this) ->
        fun
          (x12029 :
            [ `Null  | `U1 of Client.t  | `U2 of ServiceWorker.t 
            | `U3 of MessagePort.t ])
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12028) "source"
            (match x12029 with
             | `Null -> Ojs.null
             | `U1 x12030 -> Client.t_to_js x12030
             | `U2 x12031 -> ServiceWorker.t_to_js x12031
             | `U3 x12032 -> MessagePort.t_to_js x12032)
    let (create :
      data:any ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:(Client.t, MessagePort.t, ServiceWorker.t) union3 ->
                unit -> t)
      =
      fun ~data:(x12034 : any) ->
        fun ~lastEventId:(x12035 : string) ->
          fun ~origin:(x12036 : string) ->
            fun ~ports:(x12037 : MessagePort.t list) ->
              fun
                ?source:(x12038 :
                          (Client.t, MessagePort.t, ServiceWorker.t) union3
                            option)
                ->
                fun () ->
                  let x12039 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x12039 "data" (any_to_js x12034);
                  Ojs.set_prop_ascii x12039 "lastEventId"
                    (Ojs.string_to_js x12035);
                  Ojs.set_prop_ascii x12039 "origin"
                    (Ojs.string_to_js x12036);
                  Ojs.set_prop_ascii x12039 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x12037);
                  (match x12038 with
                   | Some x12040 ->
                       Ojs.set_prop_ascii x12039 "source"
                         (union3_to_js Client.t_to_js MessagePort.t_to_js
                            ServiceWorker.t_to_js x12040)
                   | None -> ());
                  t_of_js x12039
    let cast_from = Obj.magic
  end
module ExtendableMessageEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12046 : Ojs.t) -> t_of_js x12046
    and t_0_to_js : t_0 -> Ojs.t = fun (x12045 : t) -> t_to_js x12045
    type tags = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12049 : Ojs.t) -> intf_of_js __tags_of_js x12049
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12047 : __tags intf) -> intf_to_js __tags_to_js x12047
    let (get_data : 'tags this -> any) =
      fun (x12051 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x12051) "data")
    let (get_lastEventId : 'tags this -> string) =
      fun (x12053 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12053) "lastEventId")
    let (get_origin : 'tags this -> string) =
      fun (x12055 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12055) "origin")
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x12057 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12057) "ports")
    let (get_source :
      'tags this -> (Client.t, MessagePort.t, ServiceWorker.t) union3 option)
      =
      fun (x12060 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12062 : Ojs.t) ->
             union3_of_js Client.t_of_js MessagePort.t_of_js
               ServiceWorker.t_of_js x12062)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12060) "source")
    let (create :
      data:any ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:(Client.t, MessagePort.t, ServiceWorker.t) union3 ->
                unit -> t)
      =
      fun ~data:(x12066 : any) ->
        fun ~lastEventId:(x12067 : string) ->
          fun ~origin:(x12068 : string) ->
            fun ~ports:(x12069 : MessagePort.t list) ->
              fun
                ?source:(x12070 :
                          (Client.t, MessagePort.t, ServiceWorker.t) union3
                            option)
                ->
                fun () ->
                  let x12071 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x12071 "data" (any_to_js x12066);
                  Ojs.set_prop_ascii x12071 "lastEventId"
                    (Ojs.string_to_js x12067);
                  Ojs.set_prop_ascii x12071 "origin"
                    (Ojs.string_to_js x12068);
                  Ojs.set_prop_ascii x12071 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x12069);
                  (match x12070 with
                   | Some x12072 ->
                       Ojs.set_prop_ascii x12071 "source"
                         (union3_to_js Client.t_to_js MessagePort.t_to_js
                            ServiceWorker.t_to_js x12072)
                   | None -> ());
                  t_of_js x12071
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
             "prototype")
    let (create' :
      type_:string ->
        ?eventInitDict:ExtendableMessageEventInit.t -> unit -> t)
      =
      fun ~type_:(x12077 : string) ->
        fun ?eventInitDict:(x12078 : ExtendableMessageEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
                 (let x12079 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12079 "push" [|(Ojs.string_to_js x12077)|]);
                  (match x12078 with
                   | Some x12080 ->
                       ignore
                         (Ojs.call x12079 "push"
                            [|(ExtendableMessageEventInit.t_to_js x12080)|])
                   | None -> ());
                  x12079))
  end
module ServiceWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12082 : Ojs.t) -> t_of_js x12082
    and t_0_to_js : t_0 -> Ojs.t = fun (x12081 : t) -> t_to_js x12081
    type tags =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12085 : Ojs.t) -> intf_of_js __tags_of_js x12085
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12083 : __tags intf) -> intf_to_js __tags_to_js x12083
    let (get_activate : 'tags this -> ExtendableEvent.t) =
      fun (x12087 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12087) "activate")
    let (set_activate : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x12089 : 'tags this) ->
        fun (x12090 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12089) "activate"
            (ExtendableEvent.t_to_js x12090)
    let (get_fetch : 'tags this -> FetchEvent.t) =
      fun (x12092 : 'tags this) ->
        FetchEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12092) "fetch")
    let (set_fetch : 'tags this -> FetchEvent.t -> unit) =
      fun (x12094 : 'tags this) ->
        fun (x12095 : FetchEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12094) "fetch"
            (FetchEvent.t_to_js x12095)
    let (get_install : 'tags this -> ExtendableEvent.t) =
      fun (x12097 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12097) "install")
    let (set_install : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x12099 : 'tags this) ->
        fun (x12100 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12099) "install"
            (ExtendableEvent.t_to_js x12100)
    let (get_message : 'tags this -> ExtendableMessageEvent.t) =
      fun (x12102 : 'tags this) ->
        ExtendableMessageEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12102) "message")
    let (set_message : 'tags this -> ExtendableMessageEvent.t -> unit) =
      fun (x12104 : 'tags this) ->
        fun (x12105 : ExtendableMessageEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12104) "message"
            (ExtendableMessageEvent.t_to_js x12105)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x12107 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12107) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12109 : 'tags this) ->
        fun (x12110 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12109) "messageerror"
            (MessageEvent.t_0_to_js x12110)
    let (get_notificationclick : 'tags this -> NotificationEvent.t) =
      fun (x12112 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12112)
             "notificationclick")
    let (set_notificationclick : 'tags this -> NotificationEvent.t -> unit) =
      fun (x12114 : 'tags this) ->
        fun (x12115 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12114)
            "notificationclick" (NotificationEvent.t_to_js x12115)
    let (get_notificationclose : 'tags this -> NotificationEvent.t) =
      fun (x12117 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12117)
             "notificationclose")
    let (set_notificationclose : 'tags this -> NotificationEvent.t -> unit) =
      fun (x12119 : 'tags this) ->
        fun (x12120 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12119)
            "notificationclose" (NotificationEvent.t_to_js x12120)
    let (get_push : 'tags this -> PushEvent.t) =
      fun (x12122 : 'tags this) ->
        PushEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12122) "push")
    let (set_push : 'tags this -> PushEvent.t -> unit) =
      fun (x12124 : 'tags this) ->
        fun (x12125 : PushEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12124) "push"
            (PushEvent.t_to_js x12125)
    let (create :
      activate:ExtendableEvent.t ->
        fetch:FetchEvent.t ->
          install:ExtendableEvent.t ->
            message:ExtendableMessageEvent.t ->
              messageerror:MessageEvent.t_0 ->
                notificationclick:NotificationEvent.t ->
                  notificationclose:NotificationEvent.t ->
                    push:PushEvent.t -> unit -> t)
      =
      fun ~activate:(x12127 : ExtendableEvent.t) ->
        fun ~fetch:(x12128 : FetchEvent.t) ->
          fun ~install:(x12129 : ExtendableEvent.t) ->
            fun ~message:(x12130 : ExtendableMessageEvent.t) ->
              fun ~messageerror:(x12131 : MessageEvent.t_0) ->
                fun ~notificationclick:(x12132 : NotificationEvent.t) ->
                  fun ~notificationclose:(x12133 : NotificationEvent.t) ->
                    fun ~push:(x12134 : PushEvent.t) ->
                      fun () ->
                        let x12135 = Ojs.empty_obj () in
                        Ojs.set_prop_ascii x12135 "activate"
                          (ExtendableEvent.t_to_js x12127);
                        Ojs.set_prop_ascii x12135 "fetch"
                          (FetchEvent.t_to_js x12128);
                        Ojs.set_prop_ascii x12135 "install"
                          (ExtendableEvent.t_to_js x12129);
                        Ojs.set_prop_ascii x12135 "message"
                          (ExtendableMessageEvent.t_to_js x12130);
                        Ojs.set_prop_ascii x12135 "messageerror"
                          (MessageEvent.t_0_to_js x12131);
                        Ojs.set_prop_ascii x12135 "notificationclick"
                          (NotificationEvent.t_to_js x12132);
                        Ojs.set_prop_ascii x12135 "notificationclose"
                          (NotificationEvent.t_to_js x12133);
                        Ojs.set_prop_ascii x12135 "push"
                          (PushEvent.t_to_js x12134);
                        t_of_js x12135
    let cast_from = Obj.magic
  end
module ServiceWorkerUpdateViaCache =
  struct
    type t = [ `L_s128_none  | `L_s35_all  | `L_s91_imports ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12137 : Ojs.t) ->
        let x12138 = x12137 in
        match Ojs.string_of_js x12138 with
        | "none" -> `L_s128_none
        | "all" -> `L_s35_all
        | "imports" -> `L_s91_imports
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12136 : [ `L_s128_none  | `L_s35_all  | `L_s91_imports ]) ->
        match x12136 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s35_all -> Ojs.string_to_js "all"
        | `L_s91_imports -> Ojs.string_to_js "imports"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12140 : Ojs.t) -> t_of_js x12140
    and t_0_to_js : t_0 -> Ojs.t = fun (x12139 : t) -> t_to_js x12139
  end
module PushSubscriptionOptionsInit =
  struct
    type t = [ `PushSubscriptionOptionsInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12142 : Ojs.t) -> t_of_js x12142
    and t_0_to_js : t_0 -> Ojs.t = fun (x12141 : t) -> t_to_js x12141
    type tags = [ `PushSubscriptionOptionsInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptionsInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12145 : Ojs.t) -> intf_of_js __tags_of_js x12145
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12143 : __tags intf) -> intf_to_js __tags_to_js x12143
    let (get_applicationServerKey :
      'tags this ->
        [ `String of string  | `Null  | `Other of BufferSource.t ]
          Primitive.t)
      =
      fun (x12147 : 'tags this) ->
        Primitive.t_of_js
          (fun (x12149 : Ojs.t) ->
             let x12150 = x12149 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x12150 "dummy") with
             | "String" -> `String (Ojs.string_of_js x12150)
             | "Null" -> `Null
             | "Other" -> `Other (BufferSource.t_of_js x12150)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12147)
             "applicationServerKey")
    let (set_applicationServerKey :
      'tags this ->
        [ `Null  | `U1 of BufferSource.t  | `U2 of string ] -> unit)
      =
      fun (x12151 : 'tags this) ->
        fun (x12152 : [ `Null  | `U1 of BufferSource.t  | `U2 of string ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12151)
            "applicationServerKey"
            (match x12152 with
             | `Null -> Ojs.null
             | `U1 x12153 -> BufferSource.t_to_js x12153
             | `U2 x12154 -> Ojs.string_to_js x12154)
    let (get_userVisibleOnly : 'tags this -> bool) =
      fun (x12156 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12156) "userVisibleOnly")
    let (set_userVisibleOnly : 'tags this -> bool -> unit) =
      fun (x12158 : 'tags this) ->
        fun (x12159 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12158) "userVisibleOnly"
            (Ojs.bool_to_js x12159)
    let (create :
      ?applicationServerKey:[ `String of string  | `Other of BufferSource.t ]
        Primitive.t -> userVisibleOnly:bool -> unit -> t)
      =
      fun
        ?applicationServerKey:(x12161 :
                                [ `String of string 
                                | `Other of BufferSource.t ] Primitive.t
                                  option)
        ->
        fun ~userVisibleOnly:(x12162 : bool) ->
          fun () ->
            let x12163 = Ojs.empty_obj () in
            (match x12161 with
             | Some x12164 ->
                 Ojs.set_prop_ascii x12163 "applicationServerKey"
                   (Primitive.t_to_js
                      (fun
                         (x12165 :
                           [ `String of string  | `Other of BufferSource.t ])
                         ->
                         match x12165 with
                         | `String x12166 -> Ojs.string_to_js x12166
                         | `Other x12167 -> BufferSource.t_to_js x12167)
                      x12164)
             | None -> ());
            Ojs.set_prop_ascii x12163 "userVisibleOnly"
              (Ojs.bool_to_js x12162);
            t_of_js x12163
    let cast_from = Obj.magic
  end
module PushSubscriptionOptions =
  struct
    type t = [ `PushSubscriptionOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12169 : Ojs.t) -> t_of_js x12169
    and t_0_to_js : t_0 -> Ojs.t = fun (x12168 : t) -> t_to_js x12168
    type tags = [ `PushSubscriptionOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12172 : Ojs.t) -> intf_of_js __tags_of_js x12172
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12170 : __tags intf) -> intf_to_js __tags_to_js x12170
    let (get_applicationServerKey : 'tags this -> ArrayBuffer.t_0 option) =
      fun (x12174 : 'tags this) ->
        Ojs.option_of_js ArrayBuffer.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12174)
             "applicationServerKey")
    let (create : ?applicationServerKey:ArrayBuffer.t_0 -> unit -> t) =
      fun ?applicationServerKey:(x12177 : ArrayBuffer.t_0 option) ->
        fun () ->
          let x12178 = Ojs.empty_obj () in
          (match x12177 with
           | Some x12179 ->
               Ojs.set_prop_ascii x12178 "applicationServerKey"
                 (ArrayBuffer.t_0_to_js x12179)
           | None -> ());
          t_of_js x12178
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions") 
             [||])
  end
module PushSubscriptionJSON =
  struct
    type t = [ `PushSubscriptionJSON ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12181 : Ojs.t) -> t_of_js x12181
    and t_0_to_js : t_0 -> Ojs.t = fun (x12180 : t) -> t_to_js x12180
    type tags = [ `PushSubscriptionJSON ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionJSON ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12184 : Ojs.t) -> intf_of_js __tags_of_js x12184
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12182 : __tags intf) -> intf_to_js __tags_to_js x12182
    let (get_endpoint : 'tags this -> string) =
      fun (x12186 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12186) "endpoint")
    let (set_endpoint : 'tags this -> string -> unit) =
      fun (x12188 : 'tags this) ->
        fun (x12189 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12188) "endpoint"
            (Ojs.string_to_js x12189)
    let (get_expirationTime : 'tags this -> DOMTimeStamp.t option) =
      fun (x12191 : 'tags this) ->
        Ojs.option_of_js DOMTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12191) "expirationTime")
    let (set_expirationTime : 'tags this -> DOMTimeStamp.t option -> unit) =
      fun (x12194 : 'tags this) ->
        fun (x12195 : DOMTimeStamp.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12194) "expirationTime"
            (Ojs.option_to_js DOMTimeStamp.t_to_js x12195)
    let (get_keys : 'tags this -> (string, string) Record.t_2) =
      fun (x12198 : 'tags this) ->
        Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12198) "keys")
    let (set_keys : 'tags this -> (string, string) Record.t_2 -> unit) =
      fun (x12202 : 'tags this) ->
        fun (x12203 : (string, string) Record.t_2) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12202) "keys"
            (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x12203)
    let (create :
      endpoint:string ->
        ?expirationTime:DOMTimeStamp.t ->
          keys:(string, string) Record.t_2 -> unit -> t)
      =
      fun ~endpoint:(x12207 : string) ->
        fun ?expirationTime:(x12208 : DOMTimeStamp.t option) ->
          fun ~keys:(x12209 : (string, string) Record.t_2) ->
            fun () ->
              let x12210 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12210 "endpoint" (Ojs.string_to_js x12207);
              (match x12208 with
               | Some x12213 ->
                   Ojs.set_prop_ascii x12210 "expirationTime"
                     (DOMTimeStamp.t_to_js x12213)
               | None -> ());
              Ojs.set_prop_ascii x12210 "keys"
                (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x12209);
              t_of_js x12210
    let cast_from = Obj.magic
  end
module PushEncryptionKeyName =
  struct
    type t = [ `L_s143_p256dh  | `L_s40_auth ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12215 : Ojs.t) ->
        let x12216 = x12215 in
        match Ojs.string_of_js x12216 with
        | "p256dh" -> `L_s143_p256dh
        | "auth" -> `L_s40_auth
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12214 : [ `L_s143_p256dh  | `L_s40_auth ]) ->
        match x12214 with
        | `L_s143_p256dh -> Ojs.string_to_js "p256dh"
        | `L_s40_auth -> Ojs.string_to_js "auth"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12218 : Ojs.t) -> t_of_js x12218
    and t_0_to_js : t_0 -> Ojs.t = fun (x12217 : t) -> t_to_js x12217
  end
module PushSubscription =
  struct
    type t = [ `PushSubscription ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12220 : Ojs.t) -> t_of_js x12220
    and t_0_to_js : t_0 -> Ojs.t = fun (x12219 : t) -> t_to_js x12219
    type tags = [ `PushSubscription ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushSubscription ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12223 : Ojs.t) -> intf_of_js __tags_of_js x12223
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12221 : __tags intf) -> intf_to_js __tags_to_js x12221
    let (get_endpoint : 'tags this -> string) =
      fun (x12225 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12225) "endpoint")
    let (get_options : 'tags this -> PushSubscriptionOptions.t) =
      fun (x12227 : 'tags this) ->
        PushSubscriptionOptions.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12227) "options")
    let (getKey :
      'tags this -> name:PushEncryptionKeyName.t -> ArrayBuffer.t_0 option) =
      fun (x12230 : 'tags this) ->
        fun ~name:(x12229 : PushEncryptionKeyName.t) ->
          Ojs.option_of_js ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x12230) "getKey"
               [|(PushEncryptionKeyName.t_to_js x12229)|])
    let (toJSON : 'tags this -> PushSubscriptionJSON.t) =
      fun (x12233 : 'tags this) ->
        PushSubscriptionJSON.t_of_js
          (Ojs.call (this_to_js Obj.magic x12233) "toJSON" [||])
    let (unsubscribe : 'tags this -> bool Promise.t_1) =
      fun (x12235 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x12235) "unsubscribe" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscription") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushSubscription")
             [||])
  end
module PushPermissionState =
  struct
    type t = [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12239 : Ojs.t) ->
        let x12240 = x12239 in
        match Ojs.string_of_js x12240 with
        | "prompt" -> `L_s157_prompt
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12238 : [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]) ->
        match x12238 with
        | `L_s157_prompt -> Ojs.string_to_js "prompt"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12242 : Ojs.t) -> t_of_js x12242
    and t_0_to_js : t_0 -> Ojs.t = fun (x12241 : t) -> t_to_js x12241
  end
module PushManager =
  struct
    type t = [ `PushManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12244 : Ojs.t) -> t_of_js x12244
    and t_0_to_js : t_0 -> Ojs.t = fun (x12243 : t) -> t_to_js x12243
    type tags = [ `PushManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12247 : Ojs.t) -> intf_of_js __tags_of_js x12247
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12245 : __tags intf) -> intf_to_js __tags_to_js x12245
    let (getSubscription :
      'tags this -> PushSubscription.t option Promise.t_1) =
      fun (x12249 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x12251 : Ojs.t) ->
             Ojs.option_of_js PushSubscription.t_of_js x12251)
          (Ojs.call (this_to_js Obj.magic x12249) "getSubscription" [||])
    let (permissionState :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushPermissionState.t Promise.t_1)
      =
      fun (x12256 : 'tags this) ->
        fun ?options:(x12253 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushPermissionState.t_of_js
              (let x12258 = this_to_js Obj.magic x12256 in
               Ojs.call (Ojs.get_prop_ascii x12258 "permissionState") "apply"
                 [|x12258;((let x12254 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12253 with
                             | Some x12255 ->
                                 ignore
                                   (Ojs.call x12254 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x12255)|])
                             | None -> ());
                            x12254))|])
    let (subscribe :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushSubscription.t Promise.t_1)
      =
      fun (x12263 : 'tags this) ->
        fun ?options:(x12260 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushSubscription.t_of_js
              (let x12265 = this_to_js Obj.magic x12263 in
               Ojs.call (Ojs.get_prop_ascii x12265 "subscribe") "apply"
                 [|x12265;((let x12261 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12260 with
                             | Some x12262 ->
                                 ignore
                                   (Ojs.call x12261 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x12262)|])
                             | None -> ());
                            x12261))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushManager") [||])
    let (supportedContentEncodings : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "supportedContentEncodings")
  end
module GetNotificationOptions =
  struct
    type t = [ `GetNotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12269 : Ojs.t) -> t_of_js x12269
    and t_0_to_js : t_0 -> Ojs.t = fun (x12268 : t) -> t_to_js x12268
    type tags = [ `GetNotificationOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GetNotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12272 : Ojs.t) -> intf_of_js __tags_of_js x12272
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12270 : __tags intf) -> intf_to_js __tags_to_js x12270
    let (get_tag : 'tags this -> string) =
      fun (x12274 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12274) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x12276 : 'tags this) ->
        fun (x12277 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12276) "tag"
            (Ojs.string_to_js x12277)
    let (create : tag:string -> unit -> t) =
      fun ~tag:(x12279 : string) ->
        fun () ->
          let x12280 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12280 "tag" (Ojs.string_to_js x12279);
          t_of_js x12280
    let cast_from = Obj.magic
  end
module ServiceWorkerRegistration =
  struct
    type t = [ `EventTarget  | `ServiceWorkerRegistration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12282 : Ojs.t) -> t_of_js x12282
    and t_0_to_js : t_0 -> Ojs.t = fun (x12281 : t) -> t_to_js x12281
    type tags = [ `EventTarget  | `ServiceWorkerRegistration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12285 : Ojs.t) -> intf_of_js __tags_of_js x12285
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12283 : __tags intf) -> intf_to_js __tags_to_js x12283
    let (get_active : 'tags this -> ServiceWorker.t option) =
      fun (x12287 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12287) "active")
    let (get_installing : 'tags this -> ServiceWorker.t option) =
      fun (x12290 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12290) "installing")
    let (get_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12293 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12295 : Ojs.t) ->
             fun ~this:(x12296 : t) ->
               fun ~ev:(x12297 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12295
                      [|(t_to_js x12296);(Event.t_to_js x12297)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12293) "onupdatefound")
    let (set_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12298 : 'tags this) ->
        fun (x12299 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12298) "onupdatefound"
            (Ojs.option_to_js
               (fun (x12300 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12301 : Ojs.t) ->
                       fun (x12302 : Ojs.t) ->
                         any_to_js
                           (x12300 ~this:(t_of_js x12301)
                              ~ev:(Event.t_of_js x12302)))) x12299)
    let (get_pushManager : 'tags this -> PushManager.t) =
      fun (x12304 : 'tags this) ->
        PushManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12304) "pushManager")
    let (get_scope : 'tags this -> string) =
      fun (x12306 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12306) "scope")
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x12308 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12308) "updateViaCache")
    let (get_waiting : 'tags this -> ServiceWorker.t option) =
      fun (x12310 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12310) "waiting")
    let (getNotifications :
      'tags this ->
        ?filter:GetNotificationOptions.t ->
          unit -> Notification.t list Promise.t_1)
      =
      fun (x12316 : 'tags this) ->
        fun ?filter:(x12313 : GetNotificationOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12319 : Ojs.t) ->
                 Ojs.list_of_js Notification.t_of_js x12319)
              (let x12318 = this_to_js Obj.magic x12316 in
               Ojs.call (Ojs.get_prop_ascii x12318 "getNotifications")
                 "apply"
                 [|x12318;((let x12314 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12313 with
                             | Some x12315 ->
                                 ignore
                                   (Ojs.call x12314 "push"
                                      [|(GetNotificationOptions.t_to_js
                                           x12315)|])
                             | None -> ());
                            x12314))|])
    let (showNotification :
      'tags this ->
        title:string ->
          ?options:NotificationOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x12325 : 'tags this) ->
        fun ~title:(x12321 : string) ->
          fun ?options:(x12322 : NotificationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x12327 = this_to_js Obj.magic x12325 in
                 Ojs.call (Ojs.get_prop_ascii x12327 "showNotification")
                   "apply"
                   [|x12327;((let x12323 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12323 "push"
                                   [|(Ojs.string_to_js x12321)|]);
                              (match x12322 with
                               | Some x12324 ->
                                   ignore
                                     (Ojs.call x12323 "push"
                                        [|(NotificationOptions.t_to_js x12324)|])
                               | None -> ());
                              x12323))|])
    let (unregister : 'tags this -> bool Promise.t_1) =
      fun (x12329 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x12329) "unregister" [||])
    let (update : 'tags this -> unit Promise.t_1) =
      fun (x12332 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12332) "update" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12344 : 'tags this) ->
        fun ~type_:(x12335 : 'K) ->
          fun ~listener:(x12336 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12337 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12346 = this_to_js Obj.magic x12344 in
                   Ojs.call (Ojs.get_prop_ascii x12346 "addEventListener")
                     "apply"
                     [|x12346;((let x12338 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12338 "push"
                                     [|(Obj.magic x12335)|]);
                                ignore
                                  (Ojs.call x12338 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12342 : Ojs.t) ->
                                             fun (x12343 : Ojs.t) ->
                                               any_to_js
                                                 (x12336
                                                    ~this:(t_of_js x12342)
                                                    ~ev:(any_of_js x12343))))|]);
                                (match x12337 with
                                 | Some x12339 ->
                                     ignore
                                       (Ojs.call x12338 "push"
                                          [|((match x12339 with
                                              | `U1 x12340 ->
                                                  Ojs.bool_to_js x12340
                                              | `U2 x12341 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12341))|])
                                 | None -> ());
                                x12338))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12354 : 'tags this) ->
        fun ~type_:(x12347 : string) ->
          fun ~listener:(x12348 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12349 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12356 = this_to_js Obj.magic x12354 in
                   Ojs.call (Ojs.get_prop_ascii x12356 "addEventListener")
                     "apply"
                     [|x12356;((let x12350 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12350 "push"
                                     [|(Ojs.string_to_js x12347)|]);
                                ignore
                                  (Ojs.call x12350 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12348)|]);
                                (match x12349 with
                                 | Some x12351 ->
                                     ignore
                                       (Ojs.call x12350 "push"
                                          [|((match x12351 with
                                              | `U1 x12352 ->
                                                  Ojs.bool_to_js x12352
                                              | `U2 x12353 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12353))|])
                                 | None -> ());
                                x12350))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12366 : 'tags this) ->
        fun ~type_:(x12357 : 'K) ->
          fun ~listener:(x12358 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12359 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12368 = this_to_js Obj.magic x12366 in
                   Ojs.call (Ojs.get_prop_ascii x12368 "removeEventListener")
                     "apply"
                     [|x12368;((let x12360 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12360 "push"
                                     [|(Obj.magic x12357)|]);
                                ignore
                                  (Ojs.call x12360 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12364 : Ojs.t) ->
                                             fun (x12365 : Ojs.t) ->
                                               any_to_js
                                                 (x12358
                                                    ~this:(t_of_js x12364)
                                                    ~ev:(any_of_js x12365))))|]);
                                (match x12359 with
                                 | Some x12361 ->
                                     ignore
                                       (Ojs.call x12360 "push"
                                          [|((match x12361 with
                                              | `U1 x12362 ->
                                                  Ojs.bool_to_js x12362
                                              | `U2 x12363 ->
                                                  EventListenerOptions.t_to_js
                                                    x12363))|])
                                 | None -> ());
                                x12360))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12376 : 'tags this) ->
        fun ~type_:(x12369 : string) ->
          fun ~listener:(x12370 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12371 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12378 = this_to_js Obj.magic x12376 in
                   Ojs.call (Ojs.get_prop_ascii x12378 "removeEventListener")
                     "apply"
                     [|x12378;((let x12372 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12372 "push"
                                     [|(Ojs.string_to_js x12369)|]);
                                ignore
                                  (Ojs.call x12372 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12370)|]);
                                (match x12371 with
                                 | Some x12373 ->
                                     ignore
                                       (Ojs.call x12372 "push"
                                          [|((match x12373 with
                                              | `U1 x12374 ->
                                                  Ojs.bool_to_js x12374
                                              | `U2 x12375 ->
                                                  EventListenerOptions.t_to_js
                                                    x12375))|])
                                 | None -> ());
                                x12372))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration") 
             [||])
  end
module VisibilityState =
  struct
    type t = [ `L_s205_visible  | `L_s83_hidden ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12380 : Ojs.t) ->
        let x12381 = x12380 in
        match Ojs.string_of_js x12381 with
        | "visible" -> `L_s205_visible
        | "hidden" -> `L_s83_hidden
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12379 : [ `L_s205_visible  | `L_s83_hidden ]) ->
        match x12379 with
        | `L_s205_visible -> Ojs.string_to_js "visible"
        | `L_s83_hidden -> Ojs.string_to_js "hidden"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12383 : Ojs.t) -> t_of_js x12383
    and t_0_to_js : t_0 -> Ojs.t = fun (x12382 : t) -> t_to_js x12382
  end
module WindowClient =
  struct
    type t = [ `Client  | `WindowClient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12385 : Ojs.t) -> t_of_js x12385
    and t_0_to_js : t_0 -> Ojs.t = fun (x12384 : t) -> t_to_js x12384
    type tags = [ `Client  | `WindowClient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WindowClient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12388 : Ojs.t) -> intf_of_js __tags_of_js x12388
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12386 : __tags intf) -> intf_to_js __tags_to_js x12386
    let (get_focused : 'tags this -> bool) =
      fun (x12390 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12390) "focused")
    let (get_visibilityState : 'tags this -> VisibilityState.t) =
      fun (x12392 : 'tags this) ->
        VisibilityState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12392) "visibilityState")
    let (focus : 'tags this -> t Promise.t_1) =
      fun (x12394 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x12394) "focus" [||])
    let (navigate :
      'tags this ->
        url:[ `U1 of string  | `U2 of URL.t ] -> t option Promise.t_1)
      =
      fun (x12400 : 'tags this) ->
        fun ~url:(x12397 : [ `U1 of string  | `U2 of URL.t ]) ->
          Promise.t_1_of_js
            (fun (x12402 : Ojs.t) -> Ojs.option_of_js t_of_js x12402)
            (Ojs.call (this_to_js Obj.magic x12400) "navigate"
               [|((match x12397 with
                   | `U1 x12398 -> Ojs.string_to_js x12398
                   | `U2 x12399 -> URL.t_to_js x12399))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WindowClient")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WindowClient") [||])
  end
module ClientQueryOptions =
  struct
    type t = [ `ClientQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12405 : Ojs.t) -> t_of_js x12405
    and t_0_to_js : t_0 -> Ojs.t = fun (x12404 : t) -> t_to_js x12404
    type tags = [ `ClientQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ClientQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12408 : Ojs.t) -> intf_of_js __tags_of_js x12408
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12406 : __tags intf) -> intf_to_js __tags_to_js x12406
    let (get_includeUncontrolled : 'tags this -> bool) =
      fun (x12410 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12410)
             "includeUncontrolled")
    let (set_includeUncontrolled : 'tags this -> bool -> unit) =
      fun (x12412 : 'tags this) ->
        fun (x12413 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12412)
            "includeUncontrolled" (Ojs.bool_to_js x12413)
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x12415 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12415) "type")
    let (set_type : 'tags this -> ClientTypes.t -> unit) =
      fun (x12417 : 'tags this) ->
        fun (x12418 : ClientTypes.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12417) "type"
            (ClientTypes.t_to_js x12418)
    let (create :
      includeUncontrolled:bool -> type_:ClientTypes.t -> unit -> t) =
      fun ~includeUncontrolled:(x12420 : bool) ->
        fun ~type_:(x12421 : ClientTypes.t) ->
          fun () ->
            let x12422 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x12422 "includeUncontrolled"
              (Ojs.bool_to_js x12420);
            Ojs.set_prop_ascii x12422 "type" (ClientTypes.t_to_js x12421);
            t_of_js x12422
    let cast_from = Obj.magic
  end
module Clients =
  struct
    type t = [ `Clients ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12424 : Ojs.t) -> t_of_js x12424
    and t_0_to_js : t_0 -> Ojs.t = fun (x12423 : t) -> t_to_js x12423
    type tags = [ `Clients ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12427 : Ojs.t) -> intf_of_js __tags_of_js x12427
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12425 : __tags intf) -> intf_to_js __tags_to_js x12425
    let (claim : 'tags this -> unit Promise.t_1) =
      fun (x12429 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12429) "claim" [||])
    let (get_ : 'tags this -> id:string -> Client.t option Promise.t_1) =
      fun (x12433 : 'tags this) ->
        fun ~id:(x12432 : string) ->
          Promise.t_1_of_js
            (fun (x12435 : Ojs.t) -> Ojs.option_of_js Client.t_of_js x12435)
            (Ojs.call (this_to_js Obj.magic x12433) "get"
               [|(Ojs.string_to_js x12432)|])
    let (matchAll :
      'tags this -> ?options:'T -> unit -> any list Promise.t_1) =
      fun (x12440 : 'tags this) ->
        fun ?options:(x12437 : 'T option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12443 : Ojs.t) -> Ojs.list_of_js any_of_js x12443)
              (let x12442 = this_to_js Obj.magic x12440 in
               Ojs.call (Ojs.get_prop_ascii x12442 "matchAll") "apply"
                 [|x12442;((let x12438 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12437 with
                             | Some x12439 ->
                                 ignore
                                   (Ojs.call x12438 "push"
                                      [|(Obj.magic x12439)|])
                             | None -> ());
                            x12438))|])
    let (openWindow :
      'tags this ->
        url:[ `U1 of string  | `U2 of URL.t ] ->
          WindowClient.t option Promise.t_1)
      =
      fun (x12448 : 'tags this) ->
        fun ~url:(x12445 : [ `U1 of string  | `U2 of URL.t ]) ->
          Promise.t_1_of_js
            (fun (x12450 : Ojs.t) ->
               Ojs.option_of_js WindowClient.t_of_js x12450)
            (Ojs.call (this_to_js Obj.magic x12448) "openWindow"
               [|((match x12445 with
                   | `U1 x12446 -> Ojs.string_to_js x12446
                   | `U2 x12447 -> URL.t_to_js x12447))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Clients")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Clients") [||])
  end
module ServiceWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12453 : Ojs.t) -> t_of_js x12453
    and t_0_to_js : t_0 -> Ojs.t = fun (x12452 : t) -> t_to_js x12452
    type tags =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12456 : Ojs.t) -> intf_of_js __tags_of_js x12456
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12454 : __tags intf) -> intf_to_js __tags_to_js x12454
    let (get_clients : 'tags this -> Clients.t) =
      fun (x12458 : 'tags this) ->
        Clients.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12458) "clients")
    let (get_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option) =
      fun (x12460 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12462 : Ojs.t) ->
             fun ~this:(x12463 : t) ->
               fun ~ev:(x12464 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x12462
                      [|(t_to_js x12463);(ExtendableEvent.t_to_js x12464)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12460) "onactivate")
    let (set_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option -> unit) =
      fun (x12465 : 'tags this) ->
        fun (x12466 : (this:t -> ev:ExtendableEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12465) "onactivate"
            (Ojs.option_to_js
               (fun (x12467 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12468 : Ojs.t) ->
                       fun (x12469 : Ojs.t) ->
                         any_to_js
                           (x12467 ~this:(t_of_js x12468)
                              ~ev:(ExtendableEvent.t_of_js x12469)))) x12466)
    let (get_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) option) =
      fun (x12471 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12473 : Ojs.t) ->
             fun ~this:(x12474 : t) ->
               fun ~ev:(x12475 : FetchEvent.t) ->
                 any_of_js
                   (Ojs.apply x12473
                      [|(t_to_js x12474);(FetchEvent.t_to_js x12475)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12471) "onfetch")
    let (set_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) option -> unit) =
      fun (x12476 : 'tags this) ->
        fun (x12477 : (this:t -> ev:FetchEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12476) "onfetch"
            (Ojs.option_to_js
               (fun (x12478 : this:t -> ev:FetchEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12479 : Ojs.t) ->
                       fun (x12480 : Ojs.t) ->
                         any_to_js
                           (x12478 ~this:(t_of_js x12479)
                              ~ev:(FetchEvent.t_of_js x12480)))) x12477)
    let (get_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option) =
      fun (x12482 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12484 : Ojs.t) ->
             fun ~this:(x12485 : t) ->
               fun ~ev:(x12486 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x12484
                      [|(t_to_js x12485);(ExtendableEvent.t_to_js x12486)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12482) "oninstall")
    let (set_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option -> unit) =
      fun (x12487 : 'tags this) ->
        fun (x12488 : (this:t -> ev:ExtendableEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12487) "oninstall"
            (Ojs.option_to_js
               (fun (x12489 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12490 : Ojs.t) ->
                       fun (x12491 : Ojs.t) ->
                         any_to_js
                           (x12489 ~this:(t_of_js x12490)
                              ~ev:(ExtendableEvent.t_of_js x12491)))) x12488)
    let (get_onmessage :
      'tags this -> (this:t -> ev:ExtendableMessageEvent.t -> any) option) =
      fun (x12493 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12495 : Ojs.t) ->
             fun ~this:(x12496 : t) ->
               fun ~ev:(x12497 : ExtendableMessageEvent.t) ->
                 any_of_js
                   (Ojs.apply x12495
                      [|(t_to_js x12496);(ExtendableMessageEvent.t_to_js
                                            x12497)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12493) "onmessage")
    let (set_onmessage :
      'tags this ->
        (this:t -> ev:ExtendableMessageEvent.t -> any) option -> unit)
      =
      fun (x12498 : 'tags this) ->
        fun (x12499 : (this:t -> ev:ExtendableMessageEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12498) "onmessage"
            (Ojs.option_to_js
               (fun (x12500 : this:t -> ev:ExtendableMessageEvent.t -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x12501 : Ojs.t) ->
                       fun (x12502 : Ojs.t) ->
                         any_to_js
                           (x12500 ~this:(t_of_js x12501)
                              ~ev:(ExtendableMessageEvent.t_of_js x12502))))
               x12499)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x12504 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12506 : Ojs.t) ->
             fun ~this:(x12507 : t) ->
               fun ~ev:(x12508 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12506
                      [|(t_to_js x12507);(MessageEvent.t_0_to_js x12508)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12504) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x12509 : 'tags this) ->
        fun (x12510 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12509) "onmessageerror"
            (Ojs.option_to_js
               (fun (x12511 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12512 : Ojs.t) ->
                       fun (x12513 : Ojs.t) ->
                         any_to_js
                           (x12511 ~this:(t_of_js x12512)
                              ~ev:(MessageEvent.t_0_of_js x12513)))) x12510)
    let (get_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option) =
      fun (x12515 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12517 : Ojs.t) ->
             fun ~this:(x12518 : t) ->
               fun ~ev:(x12519 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x12517
                      [|(t_to_js x12518);(NotificationEvent.t_to_js x12519)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12515)
             "onnotificationclick")
    let (set_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option -> unit)
      =
      fun (x12520 : 'tags this) ->
        fun (x12521 : (this:t -> ev:NotificationEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12520)
            "onnotificationclick"
            (Ojs.option_to_js
               (fun (x12522 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12523 : Ojs.t) ->
                       fun (x12524 : Ojs.t) ->
                         any_to_js
                           (x12522 ~this:(t_of_js x12523)
                              ~ev:(NotificationEvent.t_of_js x12524))))
               x12521)
    let (get_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option) =
      fun (x12526 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12528 : Ojs.t) ->
             fun ~this:(x12529 : t) ->
               fun ~ev:(x12530 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x12528
                      [|(t_to_js x12529);(NotificationEvent.t_to_js x12530)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12526)
             "onnotificationclose")
    let (set_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option -> unit)
      =
      fun (x12531 : 'tags this) ->
        fun (x12532 : (this:t -> ev:NotificationEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12531)
            "onnotificationclose"
            (Ojs.option_to_js
               (fun (x12533 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12534 : Ojs.t) ->
                       fun (x12535 : Ojs.t) ->
                         any_to_js
                           (x12533 ~this:(t_of_js x12534)
                              ~ev:(NotificationEvent.t_of_js x12535))))
               x12532)
    let (get_onpush : 'tags this -> (this:t -> ev:PushEvent.t -> any) option)
      =
      fun (x12537 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12539 : Ojs.t) ->
             fun ~this:(x12540 : t) ->
               fun ~ev:(x12541 : PushEvent.t) ->
                 any_of_js
                   (Ojs.apply x12539
                      [|(t_to_js x12540);(PushEvent.t_to_js x12541)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12537) "onpush")
    let (set_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) option -> unit) =
      fun (x12542 : 'tags this) ->
        fun (x12543 : (this:t -> ev:PushEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12542) "onpush"
            (Ojs.option_to_js
               (fun (x12544 : this:t -> ev:PushEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12545 : Ojs.t) ->
                       fun (x12546 : Ojs.t) ->
                         any_to_js
                           (x12544 ~this:(t_of_js x12545)
                              ~ev:(PushEvent.t_of_js x12546)))) x12543)
    let (get_registration : 'tags this -> ServiceWorkerRegistration.t) =
      fun (x12548 : 'tags this) ->
        ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12548) "registration")
    let (skipWaiting : 'tags this -> unit Promise.t_1) =
      fun (x12550 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12550) "skipWaiting" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12562 : 'tags this) ->
        fun ~type_:(x12553 : 'K) ->
          fun ~listener:(x12554 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12555 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12564 = this_to_js Obj.magic x12562 in
                   Ojs.call (Ojs.get_prop_ascii x12564 "addEventListener")
                     "apply"
                     [|x12564;((let x12556 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12556 "push"
                                     [|(Obj.magic x12553)|]);
                                ignore
                                  (Ojs.call x12556 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12560 : Ojs.t) ->
                                             fun (x12561 : Ojs.t) ->
                                               any_to_js
                                                 (x12554
                                                    ~this:(t_of_js x12560)
                                                    ~ev:(any_of_js x12561))))|]);
                                (match x12555 with
                                 | Some x12557 ->
                                     ignore
                                       (Ojs.call x12556 "push"
                                          [|((match x12557 with
                                              | `U1 x12558 ->
                                                  Ojs.bool_to_js x12558
                                              | `U2 x12559 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12559))|])
                                 | None -> ());
                                x12556))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12572 : 'tags this) ->
        fun ~type_:(x12565 : string) ->
          fun ~listener:(x12566 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12567 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12574 = this_to_js Obj.magic x12572 in
                   Ojs.call (Ojs.get_prop_ascii x12574 "addEventListener")
                     "apply"
                     [|x12574;((let x12568 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12568 "push"
                                     [|(Ojs.string_to_js x12565)|]);
                                ignore
                                  (Ojs.call x12568 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12566)|]);
                                (match x12567 with
                                 | Some x12569 ->
                                     ignore
                                       (Ojs.call x12568 "push"
                                          [|((match x12569 with
                                              | `U1 x12570 ->
                                                  Ojs.bool_to_js x12570
                                              | `U2 x12571 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12571))|])
                                 | None -> ());
                                x12568))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12584 : 'tags this) ->
        fun ~type_:(x12575 : 'K) ->
          fun ~listener:(x12576 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12577 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12586 = this_to_js Obj.magic x12584 in
                   Ojs.call (Ojs.get_prop_ascii x12586 "removeEventListener")
                     "apply"
                     [|x12586;((let x12578 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12578 "push"
                                     [|(Obj.magic x12575)|]);
                                ignore
                                  (Ojs.call x12578 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12582 : Ojs.t) ->
                                             fun (x12583 : Ojs.t) ->
                                               any_to_js
                                                 (x12576
                                                    ~this:(t_of_js x12582)
                                                    ~ev:(any_of_js x12583))))|]);
                                (match x12577 with
                                 | Some x12579 ->
                                     ignore
                                       (Ojs.call x12578 "push"
                                          [|((match x12579 with
                                              | `U1 x12580 ->
                                                  Ojs.bool_to_js x12580
                                              | `U2 x12581 ->
                                                  EventListenerOptions.t_to_js
                                                    x12581))|])
                                 | None -> ());
                                x12578))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12594 : 'tags this) ->
        fun ~type_:(x12587 : string) ->
          fun ~listener:(x12588 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12589 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12596 = this_to_js Obj.magic x12594 in
                   Ojs.call (Ojs.get_prop_ascii x12596 "removeEventListener")
                     "apply"
                     [|x12596;((let x12590 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12590 "push"
                                     [|(Ojs.string_to_js x12587)|]);
                                ignore
                                  (Ojs.call x12590 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12588)|]);
                                (match x12589 with
                                 | Some x12591 ->
                                     ignore
                                       (Ojs.call x12590 "push"
                                          [|((match x12591 with
                                              | `U1 x12592 ->
                                                  Ojs.bool_to_js x12592
                                              | `U2 x12593 ->
                                                  EventListenerOptions.t_to_js
                                                    x12593))|])
                                 | None -> ());
                                x12590))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12598 : Ojs.t) -> t_of_js x12598
    and t_0_to_js : t_0 -> Ojs.t = fun (x12597 : t) -> t_to_js x12597
    type tags = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12601 : Ojs.t) -> intf_of_js __tags_of_js x12601
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12599 : __tags intf) -> intf_to_js __tags_to_js x12599
    let (get_statechange : 'tags this -> Event.t) =
      fun (x12603 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12603) "statechange")
    let (set_statechange : 'tags this -> Event.t -> unit) =
      fun (x12605 : 'tags this) ->
        fun (x12606 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12605) "statechange"
            (Event.t_to_js x12606)
    let (create : statechange:Event.t -> unit -> t) =
      fun ~statechange:(x12608 : Event.t) ->
        fun () ->
          let x12609 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12609 "statechange" (Event.t_to_js x12608);
          t_of_js x12609
    let cast_from = Obj.magic
  end
module ServiceWorkerContainerEventMap =
  struct
    type t = [ `ServiceWorkerContainerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12611 : Ojs.t) -> t_of_js x12611
    and t_0_to_js : t_0 -> Ojs.t = fun (x12610 : t) -> t_to_js x12610
    type tags = [ `ServiceWorkerContainerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12614 : Ojs.t) -> intf_of_js __tags_of_js x12614
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12612 : __tags intf) -> intf_to_js __tags_to_js x12612
    let (get_controllerchange : 'tags this -> Event.t) =
      fun (x12616 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12616)
             "controllerchange")
    let (set_controllerchange : 'tags this -> Event.t -> unit) =
      fun (x12618 : 'tags this) ->
        fun (x12619 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12618) "controllerchange"
            (Event.t_to_js x12619)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x12621 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12621) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12623 : 'tags this) ->
        fun (x12624 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12623) "message"
            (MessageEvent.t_0_to_js x12624)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x12626 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12626) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12628 : 'tags this) ->
        fun (x12629 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12628) "messageerror"
            (MessageEvent.t_0_to_js x12629)
    let (create :
      controllerchange:Event.t ->
        message:MessageEvent.t_0 ->
          messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~controllerchange:(x12631 : Event.t) ->
        fun ~message:(x12632 : MessageEvent.t_0) ->
          fun ~messageerror:(x12633 : MessageEvent.t_0) ->
            fun () ->
              let x12634 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12634 "controllerchange"
                (Event.t_to_js x12631);
              Ojs.set_prop_ascii x12634 "message"
                (MessageEvent.t_0_to_js x12632);
              Ojs.set_prop_ascii x12634 "messageerror"
                (MessageEvent.t_0_to_js x12633);
              t_of_js x12634
    let cast_from = Obj.magic
  end
module RegistrationOptions =
  struct
    type t = [ `RegistrationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12636 : Ojs.t) -> t_of_js x12636
    and t_0_to_js : t_0 -> Ojs.t = fun (x12635 : t) -> t_to_js x12635
    type tags = [ `RegistrationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegistrationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12639 : Ojs.t) -> intf_of_js __tags_of_js x12639
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12637 : __tags intf) -> intf_to_js __tags_to_js x12637
    let (get_scope : 'tags this -> string) =
      fun (x12641 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12641) "scope")
    let (set_scope : 'tags this -> string -> unit) =
      fun (x12643 : 'tags this) ->
        fun (x12644 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12643) "scope"
            (Ojs.string_to_js x12644)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x12646 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12646) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x12648 : 'tags this) ->
        fun (x12649 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12648) "type"
            (WorkerType.t_to_js x12649)
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x12651 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12651) "updateViaCache")
    let (set_updateViaCache :
      'tags this -> ServiceWorkerUpdateViaCache.t -> unit) =
      fun (x12653 : 'tags this) ->
        fun (x12654 : ServiceWorkerUpdateViaCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12653) "updateViaCache"
            (ServiceWorkerUpdateViaCache.t_to_js x12654)
    let (create :
      scope:string ->
        type_:WorkerType.t ->
          updateViaCache:ServiceWorkerUpdateViaCache.t -> unit -> t)
      =
      fun ~scope:(x12656 : string) ->
        fun ~type_:(x12657 : WorkerType.t) ->
          fun ~updateViaCache:(x12658 : ServiceWorkerUpdateViaCache.t) ->
            fun () ->
              let x12659 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12659 "scope" (Ojs.string_to_js x12656);
              Ojs.set_prop_ascii x12659 "type" (WorkerType.t_to_js x12657);
              Ojs.set_prop_ascii x12659 "updateViaCache"
                (ServiceWorkerUpdateViaCache.t_to_js x12658);
              t_of_js x12659
    let cast_from = Obj.magic
  end
module ServiceWorkerContainer =
  struct
    type t = [ `EventTarget  | `ServiceWorkerContainer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12661 : Ojs.t) -> t_of_js x12661
    and t_0_to_js : t_0 -> Ojs.t = fun (x12660 : t) -> t_to_js x12660
    type tags = [ `EventTarget  | `ServiceWorkerContainer ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12664 : Ojs.t) -> intf_of_js __tags_of_js x12664
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12662 : __tags intf) -> intf_to_js __tags_to_js x12662
    let (get_controller : 'tags this -> ServiceWorker.t option) =
      fun (x12666 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12666) "controller")
    let (get_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12669 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12671 : Ojs.t) ->
             fun ~this:(x12672 : t) ->
               fun ~ev:(x12673 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12671
                      [|(t_to_js x12672);(Event.t_to_js x12673)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12669)
             "oncontrollerchange")
    let (set_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12674 : 'tags this) ->
        fun (x12675 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12674)
            "oncontrollerchange"
            (Ojs.option_to_js
               (fun (x12676 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12677 : Ojs.t) ->
                       fun (x12678 : Ojs.t) ->
                         any_to_js
                           (x12676 ~this:(t_of_js x12677)
                              ~ev:(Event.t_of_js x12678)))) x12675)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x12680 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12682 : Ojs.t) ->
             fun ~this:(x12683 : t) ->
               fun ~ev:(x12684 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12682
                      [|(t_to_js x12683);(MessageEvent.t_0_to_js x12684)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12680) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x12685 : 'tags this) ->
        fun (x12686 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12685) "onmessage"
            (Ojs.option_to_js
               (fun (x12687 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12688 : Ojs.t) ->
                       fun (x12689 : Ojs.t) ->
                         any_to_js
                           (x12687 ~this:(t_of_js x12688)
                              ~ev:(MessageEvent.t_0_of_js x12689)))) x12686)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x12691 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12693 : Ojs.t) ->
             fun ~this:(x12694 : t) ->
               fun ~ev:(x12695 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12693
                      [|(t_to_js x12694);(MessageEvent.t_0_to_js x12695)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12691) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x12696 : 'tags this) ->
        fun (x12697 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12696) "onmessageerror"
            (Ojs.option_to_js
               (fun (x12698 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12699 : Ojs.t) ->
                       fun (x12700 : Ojs.t) ->
                         any_to_js
                           (x12698 ~this:(t_of_js x12699)
                              ~ev:(MessageEvent.t_0_of_js x12700)))) x12697)
    let (get_ready : 'tags this -> ServiceWorkerRegistration.t Promise.t_1) =
      fun (x12702 : 'tags this) ->
        Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12702) "ready")
    let (getRegistration :
      'tags this ->
        ?clientURL:[ `U1 of string  | `U2 of URL.t ] ->
          unit -> ServiceWorkerRegistration.t option Promise.t_1)
      =
      fun (x12710 : 'tags this) ->
        fun ?clientURL:(x12705 : [ `U1 of string  | `U2 of URL.t ] option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12713 : Ojs.t) ->
                 Ojs.option_of_js ServiceWorkerRegistration.t_of_js x12713)
              (let x12712 = this_to_js Obj.magic x12710 in
               Ojs.call (Ojs.get_prop_ascii x12712 "getRegistration") "apply"
                 [|x12712;((let x12706 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12705 with
                             | Some x12707 ->
                                 ignore
                                   (Ojs.call x12706 "push"
                                      [|((match x12707 with
                                          | `U1 x12708 ->
                                              Ojs.string_to_js x12708
                                          | `U2 x12709 -> URL.t_to_js x12709))|])
                             | None -> ());
                            x12706))|])
    let (getRegistrations :
      'tags this -> ServiceWorkerRegistration.t list Promise.t_1) =
      fun (x12715 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x12717 : Ojs.t) ->
             Ojs.list_of_js ServiceWorkerRegistration.t_of_js x12717)
          (Ojs.call (this_to_js Obj.magic x12715) "getRegistrations" [||])
    let (register :
      'tags this ->
        scriptURL:[ `U1 of string  | `U2 of URL.t ] ->
          ?options:RegistrationOptions.t ->
            unit -> ServiceWorkerRegistration.t Promise.t_1)
      =
      fun (x12725 : 'tags this) ->
        fun ~scriptURL:(x12719 : [ `U1 of string  | `U2 of URL.t ]) ->
          fun ?options:(x12720 : RegistrationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
                (let x12727 = this_to_js Obj.magic x12725 in
                 Ojs.call (Ojs.get_prop_ascii x12727 "register") "apply"
                   [|x12727;((let x12721 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12721 "push"
                                   [|((match x12719 with
                                       | `U1 x12723 ->
                                           Ojs.string_to_js x12723
                                       | `U2 x12724 -> URL.t_to_js x12724))|]);
                              (match x12720 with
                               | Some x12722 ->
                                   ignore
                                     (Ojs.call x12721 "push"
                                        [|(RegistrationOptions.t_to_js x12722)|])
                               | None -> ());
                              x12721))|])
    let (startMessages : 'tags this -> unit) =
      fun (x12729 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12729) "startMessages" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12740 : 'tags this) ->
        fun ~type_:(x12731 : 'K) ->
          fun ~listener:(x12732 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12733 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12742 = this_to_js Obj.magic x12740 in
                   Ojs.call (Ojs.get_prop_ascii x12742 "addEventListener")
                     "apply"
                     [|x12742;((let x12734 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12734 "push"
                                     [|(Obj.magic x12731)|]);
                                ignore
                                  (Ojs.call x12734 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12738 : Ojs.t) ->
                                             fun (x12739 : Ojs.t) ->
                                               any_to_js
                                                 (x12732
                                                    ~this:(t_of_js x12738)
                                                    ~ev:(any_of_js x12739))))|]);
                                (match x12733 with
                                 | Some x12735 ->
                                     ignore
                                       (Ojs.call x12734 "push"
                                          [|((match x12735 with
                                              | `U1 x12736 ->
                                                  Ojs.bool_to_js x12736
                                              | `U2 x12737 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12737))|])
                                 | None -> ());
                                x12734))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12750 : 'tags this) ->
        fun ~type_:(x12743 : string) ->
          fun ~listener:(x12744 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12745 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12752 = this_to_js Obj.magic x12750 in
                   Ojs.call (Ojs.get_prop_ascii x12752 "addEventListener")
                     "apply"
                     [|x12752;((let x12746 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12746 "push"
                                     [|(Ojs.string_to_js x12743)|]);
                                ignore
                                  (Ojs.call x12746 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12744)|]);
                                (match x12745 with
                                 | Some x12747 ->
                                     ignore
                                       (Ojs.call x12746 "push"
                                          [|((match x12747 with
                                              | `U1 x12748 ->
                                                  Ojs.bool_to_js x12748
                                              | `U2 x12749 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12749))|])
                                 | None -> ());
                                x12746))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12762 : 'tags this) ->
        fun ~type_:(x12753 : 'K) ->
          fun ~listener:(x12754 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12755 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12764 = this_to_js Obj.magic x12762 in
                   Ojs.call (Ojs.get_prop_ascii x12764 "removeEventListener")
                     "apply"
                     [|x12764;((let x12756 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12756 "push"
                                     [|(Obj.magic x12753)|]);
                                ignore
                                  (Ojs.call x12756 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12760 : Ojs.t) ->
                                             fun (x12761 : Ojs.t) ->
                                               any_to_js
                                                 (x12754
                                                    ~this:(t_of_js x12760)
                                                    ~ev:(any_of_js x12761))))|]);
                                (match x12755 with
                                 | Some x12757 ->
                                     ignore
                                       (Ojs.call x12756 "push"
                                          [|((match x12757 with
                                              | `U1 x12758 ->
                                                  Ojs.bool_to_js x12758
                                              | `U2 x12759 ->
                                                  EventListenerOptions.t_to_js
                                                    x12759))|])
                                 | None -> ());
                                x12756))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12772 : 'tags this) ->
        fun ~type_:(x12765 : string) ->
          fun ~listener:(x12766 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12767 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12774 = this_to_js Obj.magic x12772 in
                   Ojs.call (Ojs.get_prop_ascii x12774 "removeEventListener")
                     "apply"
                     [|x12774;((let x12768 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12768 "push"
                                     [|(Ojs.string_to_js x12765)|]);
                                ignore
                                  (Ojs.call x12768 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12766)|]);
                                (match x12767 with
                                 | Some x12769 ->
                                     ignore
                                       (Ojs.call x12768 "push"
                                          [|((match x12769 with
                                              | `U1 x12770 ->
                                                  Ojs.bool_to_js x12770
                                              | `U2 x12771 ->
                                                  EventListenerOptions.t_to_js
                                                    x12771))|])
                                 | None -> ());
                                x12768))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer") 
             [||])
  end
module SecurityPolicyViolationEventDisposition =
  struct
    type t = [ `L_s169_report  | `L_s66_enforce ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12776 : Ojs.t) ->
        let x12777 = x12776 in
        match Ojs.string_of_js x12777 with
        | "report" -> `L_s169_report
        | "enforce" -> `L_s66_enforce
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12775 : [ `L_s169_report  | `L_s66_enforce ]) ->
        match x12775 with
        | `L_s169_report -> Ojs.string_to_js "report"
        | `L_s66_enforce -> Ojs.string_to_js "enforce"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12779 : Ojs.t) -> t_of_js x12779
    and t_0_to_js : t_0 -> Ojs.t = fun (x12778 : t) -> t_to_js x12778
  end
module SecurityPolicyViolationEventInit =
  struct
    type t = [ `EventInit  | `SecurityPolicyViolationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12781 : Ojs.t) -> t_of_js x12781
    and t_0_to_js : t_0 -> Ojs.t = fun (x12780 : t) -> t_to_js x12780
    type tags = [ `EventInit  | `SecurityPolicyViolationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12784 : Ojs.t) -> intf_of_js __tags_of_js x12784
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12782 : __tags intf) -> intf_to_js __tags_to_js x12782
    let (get_blockedURI : 'tags this -> string) =
      fun (x12786 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12786) "blockedURI")
    let (set_blockedURI : 'tags this -> string -> unit) =
      fun (x12788 : 'tags this) ->
        fun (x12789 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12788) "blockedURI"
            (Ojs.string_to_js x12789)
    let (get_columnNumber : 'tags this -> float) =
      fun (x12791 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12791) "columnNumber")
    let (set_columnNumber : 'tags this -> float -> unit) =
      fun (x12793 : 'tags this) ->
        fun (x12794 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12793) "columnNumber"
            (Ojs.float_to_js x12794)
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x12796 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12796) "disposition")
    let (set_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t -> unit) =
      fun (x12798 : 'tags this) ->
        fun (x12799 : SecurityPolicyViolationEventDisposition.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12798) "disposition"
            (SecurityPolicyViolationEventDisposition.t_to_js x12799)
    let (get_documentURI : 'tags this -> string) =
      fun (x12801 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12801) "documentURI")
    let (set_documentURI : 'tags this -> string -> unit) =
      fun (x12803 : 'tags this) ->
        fun (x12804 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12803) "documentURI"
            (Ojs.string_to_js x12804)
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x12806 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12806)
             "effectiveDirective")
    let (set_effectiveDirective : 'tags this -> string -> unit) =
      fun (x12808 : 'tags this) ->
        fun (x12809 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12808)
            "effectiveDirective" (Ojs.string_to_js x12809)
    let (get_lineNumber : 'tags this -> float) =
      fun (x12811 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12811) "lineNumber")
    let (set_lineNumber : 'tags this -> float -> unit) =
      fun (x12813 : 'tags this) ->
        fun (x12814 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12813) "lineNumber"
            (Ojs.float_to_js x12814)
    let (get_originalPolicy : 'tags this -> string) =
      fun (x12816 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12816) "originalPolicy")
    let (set_originalPolicy : 'tags this -> string -> unit) =
      fun (x12818 : 'tags this) ->
        fun (x12819 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12818) "originalPolicy"
            (Ojs.string_to_js x12819)
    let (get_referrer : 'tags this -> string) =
      fun (x12821 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12821) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x12823 : 'tags this) ->
        fun (x12824 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12823) "referrer"
            (Ojs.string_to_js x12824)
    let (get_sample : 'tags this -> string) =
      fun (x12826 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12826) "sample")
    let (set_sample : 'tags this -> string -> unit) =
      fun (x12828 : 'tags this) ->
        fun (x12829 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12828) "sample"
            (Ojs.string_to_js x12829)
    let (get_sourceFile : 'tags this -> string) =
      fun (x12831 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12831) "sourceFile")
    let (set_sourceFile : 'tags this -> string -> unit) =
      fun (x12833 : 'tags this) ->
        fun (x12834 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12833) "sourceFile"
            (Ojs.string_to_js x12834)
    let (get_statusCode : 'tags this -> float) =
      fun (x12836 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12836) "statusCode")
    let (set_statusCode : 'tags this -> float -> unit) =
      fun (x12838 : 'tags this) ->
        fun (x12839 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12838) "statusCode"
            (Ojs.float_to_js x12839)
    let (get_violatedDirective : 'tags this -> string) =
      fun (x12841 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12841)
             "violatedDirective")
    let (set_violatedDirective : 'tags this -> string -> unit) =
      fun (x12843 : 'tags this) ->
        fun (x12844 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12843)
            "violatedDirective" (Ojs.string_to_js x12844)
    let (create :
      blockedURI:string ->
        columnNumber:float ->
          disposition:SecurityPolicyViolationEventDisposition.t ->
            documentURI:string ->
              effectiveDirective:string ->
                lineNumber:float ->
                  originalPolicy:string ->
                    referrer:string ->
                      sample:string ->
                        sourceFile:string ->
                          statusCode:float ->
                            violatedDirective:string -> unit -> t)
      =
      fun ~blockedURI:(x12846 : string) ->
        fun ~columnNumber:(x12847 : float) ->
          fun
            ~disposition:(x12848 : SecurityPolicyViolationEventDisposition.t)
            ->
            fun ~documentURI:(x12849 : string) ->
              fun ~effectiveDirective:(x12850 : string) ->
                fun ~lineNumber:(x12851 : float) ->
                  fun ~originalPolicy:(x12852 : string) ->
                    fun ~referrer:(x12853 : string) ->
                      fun ~sample:(x12854 : string) ->
                        fun ~sourceFile:(x12855 : string) ->
                          fun ~statusCode:(x12856 : float) ->
                            fun ~violatedDirective:(x12857 : string) ->
                              fun () ->
                                let x12858 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x12858 "blockedURI"
                                  (Ojs.string_to_js x12846);
                                Ojs.set_prop_ascii x12858 "columnNumber"
                                  (Ojs.float_to_js x12847);
                                Ojs.set_prop_ascii x12858 "disposition"
                                  (SecurityPolicyViolationEventDisposition.t_to_js
                                     x12848);
                                Ojs.set_prop_ascii x12858 "documentURI"
                                  (Ojs.string_to_js x12849);
                                Ojs.set_prop_ascii x12858
                                  "effectiveDirective"
                                  (Ojs.string_to_js x12850);
                                Ojs.set_prop_ascii x12858 "lineNumber"
                                  (Ojs.float_to_js x12851);
                                Ojs.set_prop_ascii x12858 "originalPolicy"
                                  (Ojs.string_to_js x12852);
                                Ojs.set_prop_ascii x12858 "referrer"
                                  (Ojs.string_to_js x12853);
                                Ojs.set_prop_ascii x12858 "sample"
                                  (Ojs.string_to_js x12854);
                                Ojs.set_prop_ascii x12858 "sourceFile"
                                  (Ojs.string_to_js x12855);
                                Ojs.set_prop_ascii x12858 "statusCode"
                                  (Ojs.float_to_js x12856);
                                Ojs.set_prop_ascii x12858 "violatedDirective"
                                  (Ojs.string_to_js x12857);
                                t_of_js x12858
    let cast_from = Obj.magic
  end
module SecurityPolicyViolationEvent =
  struct
    type t = [ `Event  | `SecurityPolicyViolationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12860 : Ojs.t) -> t_of_js x12860
    and t_0_to_js : t_0 -> Ojs.t = fun (x12859 : t) -> t_to_js x12859
    type tags = [ `Event  | `SecurityPolicyViolationEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12863 : Ojs.t) -> intf_of_js __tags_of_js x12863
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12861 : __tags intf) -> intf_to_js __tags_to_js x12861
    let (get_blockedURI : 'tags this -> string) =
      fun (x12865 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12865) "blockedURI")
    let (get_columnNumber : 'tags this -> float) =
      fun (x12867 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12867) "columnNumber")
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x12869 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12869) "disposition")
    let (get_documentURI : 'tags this -> string) =
      fun (x12871 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12871) "documentURI")
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x12873 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12873)
             "effectiveDirective")
    let (get_lineNumber : 'tags this -> float) =
      fun (x12875 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12875) "lineNumber")
    let (get_originalPolicy : 'tags this -> string) =
      fun (x12877 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12877) "originalPolicy")
    let (get_referrer : 'tags this -> string) =
      fun (x12879 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12879) "referrer")
    let (get_sample : 'tags this -> string) =
      fun (x12881 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12881) "sample")
    let (get_sourceFile : 'tags this -> string) =
      fun (x12883 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12883) "sourceFile")
    let (get_statusCode : 'tags this -> float) =
      fun (x12885 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12885) "statusCode")
    let (get_violatedDirective : 'tags this -> string) =
      fun (x12887 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12887)
             "violatedDirective")
    let (create :
      blockedURI:string ->
        columnNumber:float ->
          disposition:SecurityPolicyViolationEventDisposition.t ->
            documentURI:string ->
              effectiveDirective:string ->
                lineNumber:float ->
                  originalPolicy:string ->
                    referrer:string ->
                      sample:string ->
                        sourceFile:string ->
                          statusCode:float ->
                            violatedDirective:string -> unit -> t)
      =
      fun ~blockedURI:(x12889 : string) ->
        fun ~columnNumber:(x12890 : float) ->
          fun
            ~disposition:(x12891 : SecurityPolicyViolationEventDisposition.t)
            ->
            fun ~documentURI:(x12892 : string) ->
              fun ~effectiveDirective:(x12893 : string) ->
                fun ~lineNumber:(x12894 : float) ->
                  fun ~originalPolicy:(x12895 : string) ->
                    fun ~referrer:(x12896 : string) ->
                      fun ~sample:(x12897 : string) ->
                        fun ~sourceFile:(x12898 : string) ->
                          fun ~statusCode:(x12899 : float) ->
                            fun ~violatedDirective:(x12900 : string) ->
                              fun () ->
                                let x12901 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x12901 "blockedURI"
                                  (Ojs.string_to_js x12889);
                                Ojs.set_prop_ascii x12901 "columnNumber"
                                  (Ojs.float_to_js x12890);
                                Ojs.set_prop_ascii x12901 "disposition"
                                  (SecurityPolicyViolationEventDisposition.t_to_js
                                     x12891);
                                Ojs.set_prop_ascii x12901 "documentURI"
                                  (Ojs.string_to_js x12892);
                                Ojs.set_prop_ascii x12901
                                  "effectiveDirective"
                                  (Ojs.string_to_js x12893);
                                Ojs.set_prop_ascii x12901 "lineNumber"
                                  (Ojs.float_to_js x12894);
                                Ojs.set_prop_ascii x12901 "originalPolicy"
                                  (Ojs.string_to_js x12895);
                                Ojs.set_prop_ascii x12901 "referrer"
                                  (Ojs.string_to_js x12896);
                                Ojs.set_prop_ascii x12901 "sample"
                                  (Ojs.string_to_js x12897);
                                Ojs.set_prop_ascii x12901 "sourceFile"
                                  (Ojs.string_to_js x12898);
                                Ojs.set_prop_ascii x12901 "statusCode"
                                  (Ojs.float_to_js x12899);
                                Ojs.set_prop_ascii x12901 "violatedDirective"
                                  (Ojs.string_to_js x12900);
                                t_of_js x12901
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SecurityPolicyViolationEvent")
             "prototype")
    let (create' :
      type_:string ->
        ?eventInitDict:SecurityPolicyViolationEventInit.t -> unit -> t)
      =
      fun ~type_:(x12902 : string) ->
        fun
          ?eventInitDict:(x12903 : SecurityPolicyViolationEventInit.t option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global
                    "SecurityPolicyViolationEvent")
                 (let x12904 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12904 "push" [|(Ojs.string_to_js x12902)|]);
                  (match x12903 with
                   | Some x12905 ->
                       ignore
                         (Ojs.call x12904 "push"
                            [|(SecurityPolicyViolationEventInit.t_to_js
                                 x12905)|])
                   | None -> ());
                  x12904))
  end
module ReadableStreamReader =
  struct
    type 'T t = 'T ReadableStreamDefaultReader.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x12908 : Ojs.t) ->
          ReadableStreamDefaultReader.t_of_js __T_of_js x12908
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x12906 : __T ReadableStreamDefaultReader.t) ->
          ReadableStreamDefaultReader.t_to_js __T_to_js x12906
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x12912 : Ojs.t) -> t_of_js __T_of_js x12912
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x12910 : __T t) -> t_to_js __T_to_js x12910
  end
module PermissionState =
  struct
    type t = [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12915 : Ojs.t) ->
        let x12916 = x12915 in
        match Ojs.string_of_js x12916 with
        | "prompt" -> `L_s157_prompt
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12914 : [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]) ->
        match x12914 with
        | `L_s157_prompt -> Ojs.string_to_js "prompt"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12918 : Ojs.t) -> t_of_js x12918
    and t_0_to_js : t_0 -> Ojs.t = fun (x12917 : t) -> t_to_js x12917
  end
module PermissionStatus =
  struct
    type t = [ `EventTarget  | `PermissionStatus ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12920 : Ojs.t) -> t_of_js x12920
    and t_0_to_js : t_0 -> Ojs.t = fun (x12919 : t) -> t_to_js x12919
    type tags = [ `EventTarget  | `PermissionStatus ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatus ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12923 : Ojs.t) -> intf_of_js __tags_of_js x12923
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12921 : __tags intf) -> intf_to_js __tags_to_js x12921
    let (get_onchange : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12925 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12927 : Ojs.t) ->
             fun ~this:(x12928 : t) ->
               fun ~ev:(x12929 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12927
                      [|(t_to_js x12928);(Event.t_to_js x12929)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12925) "onchange")
    let (set_onchange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12930 : 'tags this) ->
        fun (x12931 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12930) "onchange"
            (Ojs.option_to_js
               (fun (x12932 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12933 : Ojs.t) ->
                       fun (x12934 : Ojs.t) ->
                         any_to_js
                           (x12932 ~this:(t_of_js x12933)
                              ~ev:(Event.t_of_js x12934)))) x12931)
    let (get_state : 'tags this -> PermissionState.t) =
      fun (x12936 : 'tags this) ->
        PermissionState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12936) "state")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12947 : 'tags this) ->
        fun ~type_:(x12938 : 'K) ->
          fun ~listener:(x12939 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12940 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12949 = this_to_js Obj.magic x12947 in
                   Ojs.call (Ojs.get_prop_ascii x12949 "addEventListener")
                     "apply"
                     [|x12949;((let x12941 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12941 "push"
                                     [|(Obj.magic x12938)|]);
                                ignore
                                  (Ojs.call x12941 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12945 : Ojs.t) ->
                                             fun (x12946 : Ojs.t) ->
                                               any_to_js
                                                 (x12939
                                                    ~this:(t_of_js x12945)
                                                    ~ev:(any_of_js x12946))))|]);
                                (match x12940 with
                                 | Some x12942 ->
                                     ignore
                                       (Ojs.call x12941 "push"
                                          [|((match x12942 with
                                              | `U1 x12943 ->
                                                  Ojs.bool_to_js x12943
                                              | `U2 x12944 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12944))|])
                                 | None -> ());
                                x12941))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12957 : 'tags this) ->
        fun ~type_:(x12950 : string) ->
          fun ~listener:(x12951 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12952 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12959 = this_to_js Obj.magic x12957 in
                   Ojs.call (Ojs.get_prop_ascii x12959 "addEventListener")
                     "apply"
                     [|x12959;((let x12953 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12953 "push"
                                     [|(Ojs.string_to_js x12950)|]);
                                ignore
                                  (Ojs.call x12953 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12951)|]);
                                (match x12952 with
                                 | Some x12954 ->
                                     ignore
                                       (Ojs.call x12953 "push"
                                          [|((match x12954 with
                                              | `U1 x12955 ->
                                                  Ojs.bool_to_js x12955
                                              | `U2 x12956 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12956))|])
                                 | None -> ());
                                x12953))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12969 : 'tags this) ->
        fun ~type_:(x12960 : 'K) ->
          fun ~listener:(x12961 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12962 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12971 = this_to_js Obj.magic x12969 in
                   Ojs.call (Ojs.get_prop_ascii x12971 "removeEventListener")
                     "apply"
                     [|x12971;((let x12963 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12963 "push"
                                     [|(Obj.magic x12960)|]);
                                ignore
                                  (Ojs.call x12963 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12967 : Ojs.t) ->
                                             fun (x12968 : Ojs.t) ->
                                               any_to_js
                                                 (x12961
                                                    ~this:(t_of_js x12967)
                                                    ~ev:(any_of_js x12968))))|]);
                                (match x12962 with
                                 | Some x12964 ->
                                     ignore
                                       (Ojs.call x12963 "push"
                                          [|((match x12964 with
                                              | `U1 x12965 ->
                                                  Ojs.bool_to_js x12965
                                              | `U2 x12966 ->
                                                  EventListenerOptions.t_to_js
                                                    x12966))|])
                                 | None -> ());
                                x12963))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12979 : 'tags this) ->
        fun ~type_:(x12972 : string) ->
          fun ~listener:(x12973 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12974 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12981 = this_to_js Obj.magic x12979 in
                   Ojs.call (Ojs.get_prop_ascii x12981 "removeEventListener")
                     "apply"
                     [|x12981;((let x12975 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12975 "push"
                                     [|(Ojs.string_to_js x12972)|]);
                                ignore
                                  (Ojs.call x12975 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12973)|]);
                                (match x12974 with
                                 | Some x12976 ->
                                     ignore
                                       (Ojs.call x12975 "push"
                                          [|((match x12976 with
                                              | `U1 x12977 ->
                                                  Ojs.bool_to_js x12977
                                              | `U2 x12978 ->
                                                  EventListenerOptions.t_to_js
                                                    x12978))|])
                                 | None -> ());
                                x12975))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PermissionStatus") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PermissionStatus")
             [||])
  end
module PermissionName =
  struct
    type t =
      [ `L_s131_notifications  | `L_s148_persistent_storage  | `L_s159_push 
      | `L_s173_screen_wake_lock  | `L_s211_xr_spatial_tracking 
      | `L_s80_geolocation ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12983 : Ojs.t) ->
        let x12984 = x12983 in
        match Ojs.string_of_js x12984 with
        | "notifications" -> `L_s131_notifications
        | "persistent-storage" -> `L_s148_persistent_storage
        | "push" -> `L_s159_push
        | "screen-wake-lock" -> `L_s173_screen_wake_lock
        | "xr-spatial-tracking" -> `L_s211_xr_spatial_tracking
        | "geolocation" -> `L_s80_geolocation
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x12982 :
          [ `L_s131_notifications  | `L_s148_persistent_storage 
          | `L_s159_push  | `L_s173_screen_wake_lock 
          | `L_s211_xr_spatial_tracking  | `L_s80_geolocation ])
        ->
        match x12982 with
        | `L_s131_notifications -> Ojs.string_to_js "notifications"
        | `L_s148_persistent_storage -> Ojs.string_to_js "persistent-storage"
        | `L_s159_push -> Ojs.string_to_js "push"
        | `L_s173_screen_wake_lock -> Ojs.string_to_js "screen-wake-lock"
        | `L_s211_xr_spatial_tracking ->
            Ojs.string_to_js "xr-spatial-tracking"
        | `L_s80_geolocation -> Ojs.string_to_js "geolocation"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12986 : Ojs.t) -> t_of_js x12986
    and t_0_to_js : t_0 -> Ojs.t = fun (x12985 : t) -> t_to_js x12985
  end
module PermissionDescriptor =
  struct
    type t = [ `PermissionDescriptor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12988 : Ojs.t) -> t_of_js x12988
    and t_0_to_js : t_0 -> Ojs.t = fun (x12987 : t) -> t_to_js x12987
    type tags = [ `PermissionDescriptor ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionDescriptor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12991 : Ojs.t) -> intf_of_js __tags_of_js x12991
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12989 : __tags intf) -> intf_to_js __tags_to_js x12989
    let (get_name : 'tags this -> PermissionName.t) =
      fun (x12993 : 'tags this) ->
        PermissionName.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12993) "name")
    let (set_name : 'tags this -> PermissionName.t -> unit) =
      fun (x12995 : 'tags this) ->
        fun (x12996 : PermissionName.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12995) "name"
            (PermissionName.t_to_js x12996)
    let (create : name:PermissionName.t -> unit -> t) =
      fun ~name:(x12998 : PermissionName.t) ->
        fun () ->
          let x12999 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12999 "name" (PermissionName.t_to_js x12998);
          t_of_js x12999
    let cast_from = Obj.magic
  end
module Permissions =
  struct
    type t = [ `Permissions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13001 : Ojs.t) -> t_of_js x13001
    and t_0_to_js : t_0 -> Ojs.t = fun (x13000 : t) -> t_to_js x13000
    type tags = [ `Permissions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Permissions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13004 : Ojs.t) -> intf_of_js __tags_of_js x13004
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13002 : __tags intf) -> intf_to_js __tags_to_js x13002
    let (query :
      'tags this ->
        permissionDesc:PermissionDescriptor.t ->
          PermissionStatus.t Promise.t_1)
      =
      fun (x13007 : 'tags this) ->
        fun ~permissionDesc:(x13006 : PermissionDescriptor.t) ->
          Promise.t_1_of_js PermissionStatus.t_of_js
            (Ojs.call (this_to_js Obj.magic x13007) "query"
               [|(PermissionDescriptor.t_to_js x13006)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Permissions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Permissions") [||])
  end
module PermissionStatusEventMap =
  struct
    type t = [ `PermissionStatusEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13011 : Ojs.t) -> t_of_js x13011
    and t_0_to_js : t_0 -> Ojs.t = fun (x13010 : t) -> t_to_js x13010
    type tags = [ `PermissionStatusEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionStatusEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13014 : Ojs.t) -> intf_of_js __tags_of_js x13014
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13012 : __tags intf) -> intf_to_js __tags_to_js x13012
    let (get_change : 'tags this -> Event.t) =
      fun (x13016 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13016) "change")
    let (set_change : 'tags this -> Event.t -> unit) =
      fun (x13018 : 'tags this) ->
        fun (x13019 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13018) "change"
            (Event.t_to_js x13019)
    let (create : change:Event.t -> unit -> t) =
      fun ~change:(x13021 : Event.t) ->
        fun () ->
          let x13022 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13022 "change" (Event.t_to_js x13021);
          t_of_js x13022
    let cast_from = Obj.magic
  end
module PerformanceServerTiming =
  struct
    type t = [ `PerformanceServerTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13024 : Ojs.t) -> t_of_js x13024
    and t_0_to_js : t_0 -> Ojs.t = fun (x13023 : t) -> t_to_js x13023
    type tags = [ `PerformanceServerTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceServerTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13027 : Ojs.t) -> intf_of_js __tags_of_js x13027
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13025 : __tags intf) -> intf_to_js __tags_to_js x13025
    let (get_description : 'tags this -> string) =
      fun (x13029 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13029) "description")
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13031 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13031) "duration")
    let (get_name : 'tags this -> string) =
      fun (x13033 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13033) "name")
    let (toJSON : 'tags this -> any) =
      fun (x13035 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13035) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming") 
             [||])
  end
module PerformanceResourceTiming =
  struct
    type t = [ `PerformanceEntry  | `PerformanceResourceTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13038 : Ojs.t) -> t_of_js x13038
    and t_0_to_js : t_0 -> Ojs.t = fun (x13037 : t) -> t_to_js x13037
    type tags = [ `PerformanceEntry  | `PerformanceResourceTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceResourceTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13041 : Ojs.t) -> intf_of_js __tags_of_js x13041
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13039 : __tags intf) -> intf_to_js __tags_to_js x13039
    let (get_connectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13043 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13043) "connectEnd")
    let (get_connectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13045 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13045) "connectStart")
    let (get_decodedBodySize : 'tags this -> float) =
      fun (x13047 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13047) "decodedBodySize")
    let (get_domainLookupEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13049 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13049) "domainLookupEnd")
    let (get_domainLookupStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13051 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13051)
             "domainLookupStart")
    let (get_encodedBodySize : 'tags this -> float) =
      fun (x13053 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13053) "encodedBodySize")
    let (get_fetchStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13055 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13055) "fetchStart")
    let (get_initiatorType : 'tags this -> string) =
      fun (x13057 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13057) "initiatorType")
    let (get_nextHopProtocol : 'tags this -> string) =
      fun (x13059 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13059) "nextHopProtocol")
    let (get_redirectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13061 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13061) "redirectEnd")
    let (get_redirectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13063 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13063) "redirectStart")
    let (get_requestStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13065 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13065) "requestStart")
    let (get_responseEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13067 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13067) "responseEnd")
    let (get_responseStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13069 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13069) "responseStart")
    let (get_secureConnectionStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13071 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13071)
             "secureConnectionStart")
    let (get_serverTiming : 'tags this -> PerformanceServerTiming.t list) =
      fun (x13073 : 'tags this) ->
        Ojs.list_of_js PerformanceServerTiming.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13073) "serverTiming")
    let (get_transferSize : 'tags this -> float) =
      fun (x13076 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13076) "transferSize")
    let (get_workerStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13078 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13078) "workerStart")
    let (toJSON : 'tags this -> any) =
      fun (x13080 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13080) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming") 
             [||])
  end
module PerformanceObserverInit =
  struct
    type t = [ `PerformanceObserverInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13083 : Ojs.t) -> t_of_js x13083
    and t_0_to_js : t_0 -> Ojs.t = fun (x13082 : t) -> t_to_js x13082
    type tags = [ `PerformanceObserverInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13086 : Ojs.t) -> intf_of_js __tags_of_js x13086
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13084 : __tags intf) -> intf_to_js __tags_to_js x13084
    let (get_buffered : 'tags this -> bool) =
      fun (x13088 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13088) "buffered")
    let (set_buffered : 'tags this -> bool -> unit) =
      fun (x13090 : 'tags this) ->
        fun (x13091 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13090) "buffered"
            (Ojs.bool_to_js x13091)
    let (get_entryTypes : 'tags this -> string list) =
      fun (x13093 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13093) "entryTypes")
    let (set_entryTypes : 'tags this -> string list -> unit) =
      fun (x13096 : 'tags this) ->
        fun (x13097 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13096) "entryTypes"
            (Ojs.list_to_js Ojs.string_to_js x13097)
    let (get_type : 'tags this -> string) =
      fun (x13100 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13100) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x13102 : 'tags this) ->
        fun (x13103 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13102) "type"
            (Ojs.string_to_js x13103)
    let (create :
      buffered:bool -> entryTypes:string list -> type_:string -> unit -> t) =
      fun ~buffered:(x13105 : bool) ->
        fun ~entryTypes:(x13106 : string list) ->
          fun ~type_:(x13107 : string) ->
            fun () ->
              let x13108 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13108 "buffered" (Ojs.bool_to_js x13105);
              Ojs.set_prop_ascii x13108 "entryTypes"
                (Ojs.list_to_js Ojs.string_to_js x13106);
              Ojs.set_prop_ascii x13108 "type" (Ojs.string_to_js x13107);
              t_of_js x13108
    let cast_from = Obj.magic
  end
module PerformanceObserverEntryList =
  struct
    type t = [ `PerformanceObserverEntryList ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13111 : Ojs.t) -> t_of_js x13111
    and t_0_to_js : t_0 -> Ojs.t = fun (x13110 : t) -> t_to_js x13110
    type tags = [ `PerformanceObserverEntryList ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverEntryList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13114 : Ojs.t) -> intf_of_js __tags_of_js x13114
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13112 : __tags intf) -> intf_to_js __tags_to_js x13112
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x13116 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x13116) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x13122 : 'tags this) ->
        fun ~name:(x13118 : string) ->
          fun ?type_:(x13119 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x13124 = this_to_js Obj.magic x13122 in
                 Ojs.call (Ojs.get_prop_ascii x13124 "getEntriesByName")
                   "apply"
                   [|x13124;((let x13120 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13120 "push"
                                   [|(Ojs.string_to_js x13118)|]);
                              (match x13119 with
                               | Some x13121 ->
                                   ignore
                                     (Ojs.call x13120 "push"
                                        [|(Ojs.string_to_js x13121)|])
                               | None -> ());
                              x13120))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x13126 : 'tags this) ->
        fun ~type_:(x13125 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x13126) "getEntriesByType"
               [|(Ojs.string_to_js x13125)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             [||])
  end
module rec
  PerformanceObserver:sig
                        type t = [ `PerformanceObserver ] intf
                        type t_0 = t
                        [@@@js.stop ]
                        type tags = [ `PerformanceObserver ]
                        type tags_0 = tags
                        [@@@js.start ]
                        [@@@js.implem
                          type tags = [ `PerformanceObserver ]
                          type tags_0 = tags]
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `PerformanceObserver ]
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val disconnect : 'tags this -> unit
                        val observe :
                          'tags this ->
                            ?options:PerformanceObserverInit.t ->
                              unit -> unit
                        val takeRecords :
                          'tags this -> PerformanceEntryList.t
                        val cast_from : 'tags this -> t
                        val prototype : unit -> t
                        val create : PerformanceObserverCallback.t -> t
                        val supportedEntryTypes : unit -> string list
                      end =
  struct
    type t = [ `PerformanceObserver ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13129 : Ojs.t) -> t_of_js x13129
    and t_0_to_js : t_0 -> Ojs.t = fun (x13128 : t) -> t_to_js x13128
    type tags = [ `PerformanceObserver ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserver ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13132 : Ojs.t) -> intf_of_js __tags_of_js x13132
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13130 : __tags intf) -> intf_to_js __tags_to_js x13130
    let (disconnect : 'tags this -> unit) =
      fun (x13134 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13134) "disconnect" [||])
    let (observe :
      'tags this -> ?options:PerformanceObserverInit.t -> unit -> unit) =
      fun (x13139 : 'tags this) ->
        fun ?options:(x13136 : PerformanceObserverInit.t option) ->
          fun () ->
            ignore
              (let x13141 = this_to_js Obj.magic x13139 in
               Ojs.call (Ojs.get_prop_ascii x13141 "observe") "apply"
                 [|x13141;((let x13137 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13136 with
                             | Some x13138 ->
                                 ignore
                                   (Ojs.call x13137 "push"
                                      [|(PerformanceObserverInit.t_to_js
                                           x13138)|])
                             | None -> ());
                            x13137))|])
    let (takeRecords : 'tags this -> PerformanceEntryList.t) =
      fun (x13142 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x13142) "takeRecords" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "prototype")
    let (create : PerformanceObserverCallback.t -> t) =
      fun (x13144 : PerformanceObserverCallback.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             [|(PerformanceObserverCallback.t_to_js x13144)|])
    let (supportedEntryTypes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "supportedEntryTypes")
  end
 and
  PerformanceObserverCallback:sig
                                type t =
                                  [ `PerformanceObserverCallback ] intf
                                type t_0 = t
                                [@@@js.stop ]
                                type tags = [ `PerformanceObserverCallback ]
                                type tags_0 = tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type tags =
                                    [ `PerformanceObserverCallback ]
                                  type tags_0 = tags]
                                type 'tags this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `PerformanceObserverCallback ]
                                val t_to_js : t -> Ojs.t
                                val t_of_js : Ojs.t -> t
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val apply :
                                  'tags this ->
                                    entries:PerformanceObserverEntryList.t ->
                                      observer:PerformanceObserver.t -> unit
                                val cast_from : 'tags this -> t
                              end =
  struct
    type t = [ `PerformanceObserverCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13147 : Ojs.t) -> t_of_js x13147
    and t_0_to_js : t_0 -> Ojs.t = fun (x13146 : t) -> t_to_js x13146
    type tags = [ `PerformanceObserverCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13150 : Ojs.t) -> intf_of_js __tags_of_js x13150
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13148 : __tags intf) -> intf_to_js __tags_to_js x13148
    let (apply :
      'tags this ->
        entries:PerformanceObserverEntryList.t ->
          observer:PerformanceObserver.t -> unit)
      =
      fun (x13154 : 'tags this) ->
        fun ~entries:(x13152 : PerformanceObserverEntryList.t) ->
          fun ~observer:(x13153 : PerformanceObserver.t) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic x13154)
                 [|(PerformanceObserverEntryList.t_to_js x13152);(PerformanceObserver.t_to_js
                                                                    x13153)|])
    let cast_from = Obj.magic
  end
module PerformanceEventMap =
  struct
    type t = [ `PerformanceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13157 : Ojs.t) -> t_of_js x13157
    and t_0_to_js : t_0 -> Ojs.t = fun (x13156 : t) -> t_to_js x13156
    type tags = [ `PerformanceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13160 : Ojs.t) -> intf_of_js __tags_of_js x13160
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13158 : __tags intf) -> intf_to_js __tags_to_js x13158
    let (get_resourcetimingbufferfull : 'tags this -> Event.t) =
      fun (x13162 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13162)
             "resourcetimingbufferfull")
    let (set_resourcetimingbufferfull : 'tags this -> Event.t -> unit) =
      fun (x13164 : 'tags this) ->
        fun (x13165 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13164)
            "resourcetimingbufferfull" (Event.t_to_js x13165)
    let (create : resourcetimingbufferfull:Event.t -> unit -> t) =
      fun ~resourcetimingbufferfull:(x13167 : Event.t) ->
        fun () ->
          let x13168 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13168 "resourcetimingbufferfull"
            (Event.t_to_js x13167);
          t_of_js x13168
    let cast_from = Obj.magic
  end
module DOMMatrix2DInit =
  struct
    type t = [ `DOMMatrix2DInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13170 : Ojs.t) -> t_of_js x13170
    and t_0_to_js : t_0 -> Ojs.t = fun (x13169 : t) -> t_to_js x13169
    type tags = [ `DOMMatrix2DInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix2DInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13173 : Ojs.t) -> intf_of_js __tags_of_js x13173
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13171 : __tags intf) -> intf_to_js __tags_to_js x13171
    let (get_a : 'tags this -> float) =
      fun (x13175 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13175) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x13177 : 'tags this) ->
        fun (x13178 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13177) "a"
            (Ojs.float_to_js x13178)
    let (get_b : 'tags this -> float) =
      fun (x13180 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13180) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x13182 : 'tags this) ->
        fun (x13183 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13182) "b"
            (Ojs.float_to_js x13183)
    let (get_c : 'tags this -> float) =
      fun (x13185 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13185) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x13187 : 'tags this) ->
        fun (x13188 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13187) "c"
            (Ojs.float_to_js x13188)
    let (get_d : 'tags this -> float) =
      fun (x13190 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13190) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x13192 : 'tags this) ->
        fun (x13193 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13192) "d"
            (Ojs.float_to_js x13193)
    let (get_e : 'tags this -> float) =
      fun (x13195 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13195) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x13197 : 'tags this) ->
        fun (x13198 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13197) "e"
            (Ojs.float_to_js x13198)
    let (get_f : 'tags this -> float) =
      fun (x13200 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13200) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x13202 : 'tags this) ->
        fun (x13203 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13202) "f"
            (Ojs.float_to_js x13203)
    let (get_m11 : 'tags this -> float) =
      fun (x13205 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13205) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x13207 : 'tags this) ->
        fun (x13208 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13207) "m11"
            (Ojs.float_to_js x13208)
    let (get_m12 : 'tags this -> float) =
      fun (x13210 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13210) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x13212 : 'tags this) ->
        fun (x13213 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13212) "m12"
            (Ojs.float_to_js x13213)
    let (get_m21 : 'tags this -> float) =
      fun (x13215 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13215) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x13217 : 'tags this) ->
        fun (x13218 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13217) "m21"
            (Ojs.float_to_js x13218)
    let (get_m22 : 'tags this -> float) =
      fun (x13220 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13220) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x13222 : 'tags this) ->
        fun (x13223 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13222) "m22"
            (Ojs.float_to_js x13223)
    let (get_m41 : 'tags this -> float) =
      fun (x13225 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13225) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x13227 : 'tags this) ->
        fun (x13228 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13227) "m41"
            (Ojs.float_to_js x13228)
    let (get_m42 : 'tags this -> float) =
      fun (x13230 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13230) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x13232 : 'tags this) ->
        fun (x13233 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13232) "m42"
            (Ojs.float_to_js x13233)
    let (create :
      a:float ->
        b:float ->
          c:float ->
            d:float ->
              e:float ->
                f:float ->
                  m11:float ->
                    m12:float ->
                      m21:float ->
                        m22:float -> m41:float -> m42:float -> unit -> t)
      =
      fun ~a:(x13235 : float) ->
        fun ~b:(x13236 : float) ->
          fun ~c:(x13237 : float) ->
            fun ~d:(x13238 : float) ->
              fun ~e:(x13239 : float) ->
                fun ~f:(x13240 : float) ->
                  fun ~m11:(x13241 : float) ->
                    fun ~m12:(x13242 : float) ->
                      fun ~m21:(x13243 : float) ->
                        fun ~m22:(x13244 : float) ->
                          fun ~m41:(x13245 : float) ->
                            fun ~m42:(x13246 : float) ->
                              fun () ->
                                let x13247 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x13247 "a"
                                  (Ojs.float_to_js x13235);
                                Ojs.set_prop_ascii x13247 "b"
                                  (Ojs.float_to_js x13236);
                                Ojs.set_prop_ascii x13247 "c"
                                  (Ojs.float_to_js x13237);
                                Ojs.set_prop_ascii x13247 "d"
                                  (Ojs.float_to_js x13238);
                                Ojs.set_prop_ascii x13247 "e"
                                  (Ojs.float_to_js x13239);
                                Ojs.set_prop_ascii x13247 "f"
                                  (Ojs.float_to_js x13240);
                                Ojs.set_prop_ascii x13247 "m11"
                                  (Ojs.float_to_js x13241);
                                Ojs.set_prop_ascii x13247 "m12"
                                  (Ojs.float_to_js x13242);
                                Ojs.set_prop_ascii x13247 "m21"
                                  (Ojs.float_to_js x13243);
                                Ojs.set_prop_ascii x13247 "m22"
                                  (Ojs.float_to_js x13244);
                                Ojs.set_prop_ascii x13247 "m41"
                                  (Ojs.float_to_js x13245);
                                Ojs.set_prop_ascii x13247 "m42"
                                  (Ojs.float_to_js x13246);
                                t_of_js x13247
    let cast_from = Obj.magic
  end
module CanvasPath =
  struct
    type t = [ `CanvasPath ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13249 : Ojs.t) -> t_of_js x13249
    and t_0_to_js : t_0 -> Ojs.t = fun (x13248 : t) -> t_to_js x13248
    type tags = [ `CanvasPath ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPath ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13252 : Ojs.t) -> intf_of_js __tags_of_js x13252
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13250 : __tags intf) -> intf_to_js __tags_to_js x13250
    let (arc :
      'tags this ->
        x:float ->
          y:float ->
            radius:float ->
              startAngle:float ->
                endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x13262 : 'tags this) ->
        fun ~x:(x13254 : float) ->
          fun ~y:(x13255 : float) ->
            fun ~radius:(x13256 : float) ->
              fun ~startAngle:(x13257 : float) ->
                fun ~endAngle:(x13258 : float) ->
                  fun ?counterclockwise:(x13259 : bool option) ->
                    fun () ->
                      ignore
                        (let x13264 = this_to_js Obj.magic x13262 in
                         Ojs.call (Ojs.get_prop_ascii x13264 "arc") "apply"
                           [|x13264;((let x13260 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x13260 "push"
                                           [|(Ojs.float_to_js x13254)|]);
                                      ignore
                                        (Ojs.call x13260 "push"
                                           [|(Ojs.float_to_js x13255)|]);
                                      ignore
                                        (Ojs.call x13260 "push"
                                           [|(Ojs.float_to_js x13256)|]);
                                      ignore
                                        (Ojs.call x13260 "push"
                                           [|(Ojs.float_to_js x13257)|]);
                                      ignore
                                        (Ojs.call x13260 "push"
                                           [|(Ojs.float_to_js x13258)|]);
                                      (match x13259 with
                                       | Some x13261 ->
                                           ignore
                                             (Ojs.call x13260 "push"
                                                [|(Ojs.bool_to_js x13261)|])
                                       | None -> ());
                                      x13260))|])
    let (arcTo :
      'tags this ->
        x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit)
      =
      fun (x13270 : 'tags this) ->
        fun ~x1:(x13265 : float) ->
          fun ~y1:(x13266 : float) ->
            fun ~x2:(x13267 : float) ->
              fun ~y2:(x13268 : float) ->
                fun ~radius:(x13269 : float) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13270) "arcTo"
                       [|(Ojs.float_to_js x13265);(Ojs.float_to_js x13266);(
                         Ojs.float_to_js x13267);(Ojs.float_to_js x13268);(
                         Ojs.float_to_js x13269)|])
    let (bezierCurveTo :
      'tags this ->
        cp1x:float ->
          cp1y:float ->
            cp2x:float -> cp2y:float -> x:float -> y:float -> unit)
      =
      fun (x13278 : 'tags this) ->
        fun ~cp1x:(x13272 : float) ->
          fun ~cp1y:(x13273 : float) ->
            fun ~cp2x:(x13274 : float) ->
              fun ~cp2y:(x13275 : float) ->
                fun ~x:(x13276 : float) ->
                  fun ~y:(x13277 : float) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13278) "bezierCurveTo"
                         [|(Ojs.float_to_js x13272);(Ojs.float_to_js x13273);(
                           Ojs.float_to_js x13274);(Ojs.float_to_js x13275);(
                           Ojs.float_to_js x13276);(Ojs.float_to_js x13277)|])
    let (closePath : 'tags this -> unit) =
      fun (x13280 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13280) "closePath" [||])
    let (ellipse :
      'tags this ->
        x:float ->
          y:float ->
            radiusX:float ->
              radiusY:float ->
                rotation:float ->
                  startAngle:float ->
                    endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x13292 : 'tags this) ->
        fun ~x:(x13282 : float) ->
          fun ~y:(x13283 : float) ->
            fun ~radiusX:(x13284 : float) ->
              fun ~radiusY:(x13285 : float) ->
                fun ~rotation:(x13286 : float) ->
                  fun ~startAngle:(x13287 : float) ->
                    fun ~endAngle:(x13288 : float) ->
                      fun ?counterclockwise:(x13289 : bool option) ->
                        fun () ->
                          ignore
                            (let x13294 = this_to_js Obj.magic x13292 in
                             Ojs.call (Ojs.get_prop_ascii x13294 "ellipse")
                               "apply"
                               [|x13294;((let x13290 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x13290 "push"
                                               [|(Ojs.float_to_js x13282)|]);
                                          ignore
                                            (Ojs.call x13290 "push"
                                               [|(Ojs.float_to_js x13283)|]);
                                          ignore
                                            (Ojs.call x13290 "push"
                                               [|(Ojs.float_to_js x13284)|]);
                                          ignore
                                            (Ojs.call x13290 "push"
                                               [|(Ojs.float_to_js x13285)|]);
                                          ignore
                                            (Ojs.call x13290 "push"
                                               [|(Ojs.float_to_js x13286)|]);
                                          ignore
                                            (Ojs.call x13290 "push"
                                               [|(Ojs.float_to_js x13287)|]);
                                          ignore
                                            (Ojs.call x13290 "push"
                                               [|(Ojs.float_to_js x13288)|]);
                                          (match x13289 with
                                           | Some x13291 ->
                                               ignore
                                                 (Ojs.call x13290 "push"
                                                    [|(Ojs.bool_to_js x13291)|])
                                           | None -> ());
                                          x13290))|])
    let (lineTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x13297 : 'tags this) ->
        fun ~x:(x13295 : float) ->
          fun ~y:(x13296 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13297) "lineTo"
                 [|(Ojs.float_to_js x13295);(Ojs.float_to_js x13296)|])
    let (moveTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x13301 : 'tags this) ->
        fun ~x:(x13299 : float) ->
          fun ~y:(x13300 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13301) "moveTo"
                 [|(Ojs.float_to_js x13299);(Ojs.float_to_js x13300)|])
    let (quadraticCurveTo :
      'tags this -> cpx:float -> cpy:float -> x:float -> y:float -> unit) =
      fun (x13307 : 'tags this) ->
        fun ~cpx:(x13303 : float) ->
          fun ~cpy:(x13304 : float) ->
            fun ~x:(x13305 : float) ->
              fun ~y:(x13306 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13307) "quadraticCurveTo"
                     [|(Ojs.float_to_js x13303);(Ojs.float_to_js x13304);(
                       Ojs.float_to_js x13305);(Ojs.float_to_js x13306)|])
    let (rect :
      'tags this -> x:float -> y:float -> w:float -> h:float -> unit) =
      fun (x13313 : 'tags this) ->
        fun ~x:(x13309 : float) ->
          fun ~y:(x13310 : float) ->
            fun ~w:(x13311 : float) ->
              fun ~h:(x13312 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13313) "rect"
                     [|(Ojs.float_to_js x13309);(Ojs.float_to_js x13310);(
                       Ojs.float_to_js x13311);(Ojs.float_to_js x13312)|])
    let cast_from = Obj.magic
  end
module Path2D =
  struct
    type t = [ `CanvasPath  | `Path2D ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13316 : Ojs.t) -> t_of_js x13316
    and t_0_to_js : t_0 -> Ojs.t = fun (x13315 : t) -> t_to_js x13315
    type tags = [ `CanvasPath  | `Path2D ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13319 : Ojs.t) -> intf_of_js __tags_of_js x13319
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13317 : __tags intf) -> intf_to_js __tags_to_js x13317
    let (addPath :
      'tags this -> path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x13325 : 'tags this) ->
        fun ~path:(x13321 : t) ->
          fun ?transform:(x13322 : DOMMatrix2DInit.t option) ->
            fun () ->
              ignore
                (let x13327 = this_to_js Obj.magic x13325 in
                 Ojs.call (Ojs.get_prop_ascii x13327 "addPath") "apply"
                   [|x13327;((let x13323 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13323 "push" [|(t_to_js x13321)|]);
                              (match x13322 with
                               | Some x13324 ->
                                   ignore
                                     (Ojs.call x13323 "push"
                                        [|(DOMMatrix2DInit.t_to_js x13324)|])
                               | None -> ());
                              x13323))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Path2D")
             "prototype")
    let (create : ?path:[ `U1 of t  | `U2 of string ] -> unit -> t) =
      fun ?path:(x13328 : [ `U1 of t  | `U2 of string ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Path2D")
               (let x13329 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x13328 with
                 | Some x13330 ->
                     ignore
                       (Ojs.call x13329 "push"
                          [|((match x13330 with
                              | `U1 x13331 -> t_to_js x13331
                              | `U2 x13332 -> Ojs.string_to_js x13332))|])
                 | None -> ());
                x13329))
  end
module OnErrorEventHandlerNonNull =
  struct
    type t = [ `OnErrorEventHandlerNonNull ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13334 : Ojs.t) -> t_of_js x13334
    and t_0_to_js : t_0 -> Ojs.t = fun (x13333 : t) -> t_to_js x13333
    type tags = [ `OnErrorEventHandlerNonNull ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OnErrorEventHandlerNonNull ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13337 : Ojs.t) -> intf_of_js __tags_of_js x13337
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13335 : __tags intf) -> intf_to_js __tags_to_js x13335
    let (apply :
      'tags this ->
        event:[ `U1 of Event.t  | `U2 of string ] ->
          ?source:string ->
            ?lineno:float -> ?colno:float -> ?error:Error.t_0 -> unit -> any)
      =
      fun (x13351 : 'tags this) ->
        fun ~event:(x13339 : [ `U1 of Event.t  | `U2 of string ]) ->
          fun ?source:(x13340 : string option) ->
            fun ?lineno:(x13341 : float option) ->
              fun ?colno:(x13342 : float option) ->
                fun ?error:(x13343 : Error.t_0 option) ->
                  fun () ->
                    any_of_js
                      (Ojs.call (this_to_js Obj.magic x13351) "apply"
                         [|Ojs.null;((let x13344 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x13344 "push"
                                           [|((match x13339 with
                                               | `U1 x13349 ->
                                                   Event.t_to_js x13349
                                               | `U2 x13350 ->
                                                   Ojs.string_to_js x13350))|]);
                                      (match x13340 with
                                       | Some x13348 ->
                                           ignore
                                             (Ojs.call x13344 "push"
                                                [|(Ojs.string_to_js x13348)|])
                                       | None -> ());
                                      (match x13341 with
                                       | Some x13347 ->
                                           ignore
                                             (Ojs.call x13344 "push"
                                                [|(Ojs.float_to_js x13347)|])
                                       | None -> ());
                                      (match x13342 with
                                       | Some x13346 ->
                                           ignore
                                             (Ojs.call x13344 "push"
                                                [|(Ojs.float_to_js x13346)|])
                                       | None -> ());
                                      (match x13343 with
                                       | Some x13345 ->
                                           ignore
                                             (Ojs.call x13344 "push"
                                                [|(Error.t_0_to_js x13345)|])
                                       | None -> ());
                                      x13344))|])
    let cast_from = Obj.magic
  end
module OnErrorEventHandler =
  struct
    type t = OnErrorEventHandlerNonNull.t option
    let rec t_of_js : Ojs.t -> t =
      fun (x13355 : Ojs.t) ->
        Ojs.option_of_js OnErrorEventHandlerNonNull.t_of_js x13355
    and t_to_js : t -> Ojs.t =
      fun (x13353 : OnErrorEventHandlerNonNull.t option) ->
        Ojs.option_to_js OnErrorEventHandlerNonNull.t_to_js x13353
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13358 : Ojs.t) -> t_of_js x13358
    and t_0_to_js : t_0 -> Ojs.t = fun (x13357 : t) -> t_to_js x13357
  end
module OES_fbo_render_mipmap =
  struct
    type t = [ `OES_fbo_render_mipmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13360 : Ojs.t) -> t_of_js x13360
    and t_0_to_js : t_0 -> Ojs.t = fun (x13359 : t) -> t_to_js x13359
    type tags = [ `OES_fbo_render_mipmap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_fbo_render_mipmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13363 : Ojs.t) -> intf_of_js __tags_of_js x13363
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13361 : __tags intf) -> intf_to_js __tags_to_js x13361
    let cast_from = Obj.magic
  end
module NotificationEventMap =
  struct
    type t = [ `NotificationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13366 : Ojs.t) -> t_of_js x13366
    and t_0_to_js : t_0 -> Ojs.t = fun (x13365 : t) -> t_to_js x13365
    type tags = [ `NotificationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13369 : Ojs.t) -> intf_of_js __tags_of_js x13369
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13367 : __tags intf) -> intf_to_js __tags_to_js x13367
    let (get_click : 'tags this -> Event.t) =
      fun (x13371 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13371) "click")
    let (set_click : 'tags this -> Event.t -> unit) =
      fun (x13373 : 'tags this) ->
        fun (x13374 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13373) "click"
            (Event.t_to_js x13374)
    let (get_close : 'tags this -> Event.t) =
      fun (x13376 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13376) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x13378 : 'tags this) ->
        fun (x13379 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13378) "close"
            (Event.t_to_js x13379)
    let (get_error : 'tags this -> Event.t) =
      fun (x13381 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13381) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13383 : 'tags this) ->
        fun (x13384 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13383) "error"
            (Event.t_to_js x13384)
    let (get_show : 'tags this -> Event.t) =
      fun (x13386 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13386) "show")
    let (set_show : 'tags this -> Event.t -> unit) =
      fun (x13388 : 'tags this) ->
        fun (x13389 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13388) "show"
            (Event.t_to_js x13389)
    let (create :
      click:Event.t ->
        close:Event.t -> error:Event.t -> show:Event.t -> unit -> t)
      =
      fun ~click:(x13391 : Event.t) ->
        fun ~close:(x13392 : Event.t) ->
          fun ~error:(x13393 : Event.t) ->
            fun ~show:(x13394 : Event.t) ->
              fun () ->
                let x13395 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x13395 "click" (Event.t_to_js x13391);
                Ojs.set_prop_ascii x13395 "close" (Event.t_to_js x13392);
                Ojs.set_prop_ascii x13395 "error" (Event.t_to_js x13393);
                Ojs.set_prop_ascii x13395 "show" (Event.t_to_js x13394);
                t_of_js x13395
    let cast_from = Obj.magic
  end
module MessagePortEventMap =
  struct
    type t = [ `MessagePortEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13397 : Ojs.t) -> t_of_js x13397
    and t_0_to_js : t_0 -> Ojs.t = fun (x13396 : t) -> t_to_js x13396
    type tags = [ `MessagePortEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessagePortEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13400 : Ojs.t) -> intf_of_js __tags_of_js x13400
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13398 : __tags intf) -> intf_to_js __tags_to_js x13398
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x13402 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13402) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13404 : 'tags this) ->
        fun (x13405 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13404) "message"
            (MessageEvent.t_0_to_js x13405)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x13407 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13407) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13409 : 'tags this) ->
        fun (x13410 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13409) "messageerror"
            (MessageEvent.t_0_to_js x13410)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x13412 : MessageEvent.t_0) ->
        fun ~messageerror:(x13413 : MessageEvent.t_0) ->
          fun () ->
            let x13414 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13414 "message"
              (MessageEvent.t_0_to_js x13412);
            Ojs.set_prop_ascii x13414 "messageerror"
              (MessageEvent.t_0_to_js x13413);
            t_of_js x13414
    let cast_from = Obj.magic
  end
module MessageChannel =
  struct
    type t = [ `MessageChannel ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13416 : Ojs.t) -> t_of_js x13416
    and t_0_to_js : t_0 -> Ojs.t = fun (x13415 : t) -> t_to_js x13415
    type tags = [ `MessageChannel ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessageChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13419 : Ojs.t) -> intf_of_js __tags_of_js x13419
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13417 : __tags intf) -> intf_to_js __tags_to_js x13417
    let (get_port1 : 'tags this -> MessagePort.t) =
      fun (x13421 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13421) "port1")
    let (get_port2 : 'tags this -> MessagePort.t) =
      fun (x13423 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13423) "port2")
    let (create : port1:MessagePort.t -> port2:MessagePort.t -> unit -> t) =
      fun ~port1:(x13425 : MessagePort.t) ->
        fun ~port2:(x13426 : MessagePort.t) ->
          fun () ->
            let x13427 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13427 "port1" (MessagePort.t_to_js x13425);
            Ojs.set_prop_ascii x13427 "port2" (MessagePort.t_to_js x13426);
            t_of_js x13427
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MessageChannel") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MessageChannel") [||])
  end
module ImportMeta =
  struct
    type t = [ `ImportMeta ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13429 : Ojs.t) -> t_of_js x13429
    and t_0_to_js : t_0 -> Ojs.t = fun (x13428 : t) -> t_to_js x13428
    type tags = [ `ImportMeta ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13432 : Ojs.t) -> intf_of_js __tags_of_js x13432
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13430 : __tags intf) -> intf_to_js __tags_to_js x13430
    let (get_url : 'tags this -> string) =
      fun (x13434 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13434) "url")
    let (set_url : 'tags this -> string -> unit) =
      fun (x13436 : 'tags this) ->
        fun (x13437 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13436) "url"
            (Ojs.string_to_js x13437)
    let (create : url:string -> unit -> t) =
      fun ~url:(x13439 : string) ->
        fun () ->
          let x13440 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13440 "url" (Ojs.string_to_js x13439);
          t_of_js x13440
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContextSettings =
  struct
    type t = [ `ImageBitmapRenderingContextSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13442 : Ojs.t) -> t_of_js x13442
    and t_0_to_js : t_0 -> Ojs.t = fun (x13441 : t) -> t_to_js x13441
    type tags = [ `ImageBitmapRenderingContextSettings ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContextSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13445 : Ojs.t) -> intf_of_js __tags_of_js x13445
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13443 : __tags intf) -> intf_to_js __tags_to_js x13443
    let (get_alpha : 'tags this -> bool) =
      fun (x13447 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13447) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x13449 : 'tags this) ->
        fun (x13450 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13449) "alpha"
            (Ojs.bool_to_js x13450)
    let (create : alpha:bool -> unit -> t) =
      fun ~alpha:(x13452 : bool) ->
        fun () ->
          let x13453 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13453 "alpha" (Ojs.bool_to_js x13452);
          t_of_js x13453
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContext =
  struct
    type t = [ `ImageBitmapRenderingContext ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13455 : Ojs.t) -> t_of_js x13455
    and t_0_to_js : t_0 -> Ojs.t = fun (x13454 : t) -> t_to_js x13454
    type tags = [ `ImageBitmapRenderingContext ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13458 : Ojs.t) -> intf_of_js __tags_of_js x13458
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13456 : __tags intf) -> intf_to_js __tags_to_js x13456
    let (transferFromImageBitmap :
      'tags this -> bitmap:ImageBitmap.t option -> unit) =
      fun (x13462 : 'tags this) ->
        fun ~bitmap:(x13460 : ImageBitmap.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13462) "transferFromImageBitmap"
               [|(Ojs.option_to_js ImageBitmap.t_to_js x13460)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             [||])
  end
module IDBTransactionEventMap =
  struct
    type t = [ `IDBTransactionEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13465 : Ojs.t) -> t_of_js x13465
    and t_0_to_js : t_0 -> Ojs.t = fun (x13464 : t) -> t_to_js x13464
    type tags = [ `IDBTransactionEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBTransactionEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13468 : Ojs.t) -> intf_of_js __tags_of_js x13468
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13466 : __tags intf) -> intf_to_js __tags_to_js x13466
    let (get_abort : 'tags this -> Event.t) =
      fun (x13470 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13470) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x13472 : 'tags this) ->
        fun (x13473 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13472) "abort"
            (Event.t_to_js x13473)
    let (get_complete : 'tags this -> Event.t) =
      fun (x13475 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13475) "complete")
    let (set_complete : 'tags this -> Event.t -> unit) =
      fun (x13477 : 'tags this) ->
        fun (x13478 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13477) "complete"
            (Event.t_to_js x13478)
    let (get_error : 'tags this -> Event.t) =
      fun (x13480 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13480) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13482 : 'tags this) ->
        fun (x13483 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13482) "error"
            (Event.t_to_js x13483)
    let (create :
      abort:Event.t -> complete:Event.t -> error:Event.t -> unit -> t) =
      fun ~abort:(x13485 : Event.t) ->
        fun ~complete:(x13486 : Event.t) ->
          fun ~error:(x13487 : Event.t) ->
            fun () ->
              let x13488 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13488 "abort" (Event.t_to_js x13485);
              Ojs.set_prop_ascii x13488 "complete" (Event.t_to_js x13486);
              Ojs.set_prop_ascii x13488 "error" (Event.t_to_js x13487);
              t_of_js x13488
    let cast_from = Obj.magic
  end
module IDBRequestEventMap =
  struct
    type t = [ `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13490 : Ojs.t) -> t_of_js x13490
    and t_0_to_js : t_0 -> Ojs.t = fun (x13489 : t) -> t_to_js x13489
    type tags = [ `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13493 : Ojs.t) -> intf_of_js __tags_of_js x13493
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13491 : __tags intf) -> intf_to_js __tags_to_js x13491
    let (get_error : 'tags this -> Event.t) =
      fun (x13495 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13495) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13497 : 'tags this) ->
        fun (x13498 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13497) "error"
            (Event.t_to_js x13498)
    let (get_success : 'tags this -> Event.t) =
      fun (x13500 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13500) "success")
    let (set_success : 'tags this -> Event.t -> unit) =
      fun (x13502 : 'tags this) ->
        fun (x13503 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13502) "success"
            (Event.t_to_js x13503)
    let (create : error:Event.t -> success:Event.t -> unit -> t) =
      fun ~error:(x13505 : Event.t) ->
        fun ~success:(x13506 : Event.t) ->
          fun () ->
            let x13507 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13507 "error" (Event.t_to_js x13505);
            Ojs.set_prop_ascii x13507 "success" (Event.t_to_js x13506);
            t_of_js x13507
    let cast_from = Obj.magic
  end
module IDBOpenDBRequestEventMap =
  struct
    type t = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13509 : Ojs.t) -> t_of_js x13509
    and t_0_to_js : t_0 -> Ojs.t = fun (x13508 : t) -> t_to_js x13508
    type tags = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBOpenDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13512 : Ojs.t) -> intf_of_js __tags_of_js x13512
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13510 : __tags intf) -> intf_to_js __tags_to_js x13510
    let (get_blocked : 'tags this -> Event.t) =
      fun (x13514 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13514) "blocked")
    let (set_blocked : 'tags this -> Event.t -> unit) =
      fun (x13516 : 'tags this) ->
        fun (x13517 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13516) "blocked"
            (Event.t_to_js x13517)
    let (get_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x13519 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13519) "upgradeneeded")
    let (set_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x13521 : 'tags this) ->
        fun (x13522 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13521) "upgradeneeded"
            (IDBVersionChangeEvent.t_to_js x13522)
    let (create :
      blocked:Event.t -> upgradeneeded:IDBVersionChangeEvent.t -> unit -> t)
      =
      fun ~blocked:(x13524 : Event.t) ->
        fun ~upgradeneeded:(x13525 : IDBVersionChangeEvent.t) ->
          fun () ->
            let x13526 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13526 "blocked" (Event.t_to_js x13524);
            Ojs.set_prop_ascii x13526 "upgradeneeded"
              (IDBVersionChangeEvent.t_to_js x13525);
            t_of_js x13526
    let cast_from = Obj.magic
  end
module IDBDatabaseEventMap =
  struct
    type t = [ `IDBDatabaseEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13528 : Ojs.t) -> t_of_js x13528
    and t_0_to_js : t_0 -> Ojs.t = fun (x13527 : t) -> t_to_js x13527
    type tags = [ `IDBDatabaseEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13531 : Ojs.t) -> intf_of_js __tags_of_js x13531
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13529 : __tags intf) -> intf_to_js __tags_to_js x13529
    let (get_abort : 'tags this -> Event.t) =
      fun (x13533 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13533) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x13535 : 'tags this) ->
        fun (x13536 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13535) "abort"
            (Event.t_to_js x13536)
    let (get_close : 'tags this -> Event.t) =
      fun (x13538 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13538) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x13540 : 'tags this) ->
        fun (x13541 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13540) "close"
            (Event.t_to_js x13541)
    let (get_error : 'tags this -> Event.t) =
      fun (x13543 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13543) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13545 : 'tags this) ->
        fun (x13546 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13545) "error"
            (Event.t_to_js x13546)
    let (get_versionchange : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x13548 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13548) "versionchange")
    let (set_versionchange : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x13550 : 'tags this) ->
        fun (x13551 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13550) "versionchange"
            (IDBVersionChangeEvent.t_to_js x13551)
    let (create :
      abort:Event.t ->
        close:Event.t ->
          error:Event.t -> versionchange:IDBVersionChangeEvent.t -> unit -> t)
      =
      fun ~abort:(x13553 : Event.t) ->
        fun ~close:(x13554 : Event.t) ->
          fun ~error:(x13555 : Event.t) ->
            fun ~versionchange:(x13556 : IDBVersionChangeEvent.t) ->
              fun () ->
                let x13557 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x13557 "abort" (Event.t_to_js x13553);
                Ojs.set_prop_ascii x13557 "close" (Event.t_to_js x13554);
                Ojs.set_prop_ascii x13557 "error" (Event.t_to_js x13555);
                Ojs.set_prop_ascii x13557 "versionchange"
                  (IDBVersionChangeEvent.t_to_js x13556);
                t_of_js x13557
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEventInit =
  struct
    type t = [ `EventInit  | `FontFaceSetLoadEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13559 : Ojs.t) -> t_of_js x13559
    and t_0_to_js : t_0 -> Ojs.t = fun (x13558 : t) -> t_to_js x13558
    type tags = [ `EventInit  | `FontFaceSetLoadEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13562 : Ojs.t) -> intf_of_js __tags_of_js x13562
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13560 : __tags intf) -> intf_to_js __tags_to_js x13560
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x13564 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13564) "fontfaces")
    let (set_fontfaces : 'tags this -> FontFace.t list -> unit) =
      fun (x13567 : 'tags this) ->
        fun (x13568 : FontFace.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13567) "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x13568)
    let (create : fontfaces:FontFace.t list -> unit -> t) =
      fun ~fontfaces:(x13571 : FontFace.t list) ->
        fun () ->
          let x13572 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13572 "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x13571);
          t_of_js x13572
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEvent =
  struct
    type t = [ `Event  | `FontFaceSetLoadEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13575 : Ojs.t) -> t_of_js x13575
    and t_0_to_js : t_0 -> Ojs.t = fun (x13574 : t) -> t_to_js x13574
    type tags = [ `Event  | `FontFaceSetLoadEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13578 : Ojs.t) -> intf_of_js __tags_of_js x13578
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13576 : __tags intf) -> intf_to_js __tags_to_js x13576
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x13580 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13580) "fontfaces")
    let (create : fontfaces:FontFace.t list -> unit -> t) =
      fun ~fontfaces:(x13583 : FontFace.t list) ->
        fun () ->
          let x13584 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13584 "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x13583);
          t_of_js x13584
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:FontFaceSetLoadEventInit.t -> unit -> t)
      =
      fun ~type_:(x13586 : string) ->
        fun ?eventInitDict:(x13587 : FontFaceSetLoadEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
                 (let x13588 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13588 "push" [|(Ojs.string_to_js x13586)|]);
                  (match x13587 with
                   | Some x13589 ->
                       ignore
                         (Ojs.call x13588 "push"
                            [|(FontFaceSetLoadEventInit.t_to_js x13589)|])
                   | None -> ());
                  x13588))
  end
module FontFaceSetEventMap =
  struct
    type t = [ `FontFaceSetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13591 : Ojs.t) -> t_of_js x13591
    and t_0_to_js : t_0 -> Ojs.t = fun (x13590 : t) -> t_to_js x13590
    type tags = [ `FontFaceSetEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13594 : Ojs.t) -> intf_of_js __tags_of_js x13594
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13592 : __tags intf) -> intf_to_js __tags_to_js x13592
    let (get_loading : 'tags this -> Event.t) =
      fun (x13596 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13596) "loading")
    let (set_loading : 'tags this -> Event.t -> unit) =
      fun (x13598 : 'tags this) ->
        fun (x13599 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13598) "loading"
            (Event.t_to_js x13599)
    let (get_loadingdone : 'tags this -> Event.t) =
      fun (x13601 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13601) "loadingdone")
    let (set_loadingdone : 'tags this -> Event.t -> unit) =
      fun (x13603 : 'tags this) ->
        fun (x13604 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13603) "loadingdone"
            (Event.t_to_js x13604)
    let (get_loadingerror : 'tags this -> Event.t) =
      fun (x13606 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13606) "loadingerror")
    let (set_loadingerror : 'tags this -> Event.t -> unit) =
      fun (x13608 : 'tags this) ->
        fun (x13609 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13608) "loadingerror"
            (Event.t_to_js x13609)
    let (create :
      loading:Event.t ->
        loadingdone:Event.t -> loadingerror:Event.t -> unit -> t)
      =
      fun ~loading:(x13611 : Event.t) ->
        fun ~loadingdone:(x13612 : Event.t) ->
          fun ~loadingerror:(x13613 : Event.t) ->
            fun () ->
              let x13614 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13614 "loading" (Event.t_to_js x13611);
              Ojs.set_prop_ascii x13614 "loadingdone" (Event.t_to_js x13612);
              Ojs.set_prop_ascii x13614 "loadingerror" (Event.t_to_js x13613);
              t_of_js x13614
    let cast_from = Obj.magic
  end
module FileReaderSync =
  struct
    type t = [ `FileReaderSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13616 : Ojs.t) -> t_of_js x13616
    and t_0_to_js : t_0 -> Ojs.t = fun (x13615 : t) -> t_to_js x13615
    type tags = [ `FileReaderSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13619 : Ojs.t) -> intf_of_js __tags_of_js x13619
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13617 : __tags intf) -> intf_to_js __tags_to_js x13617
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> ArrayBuffer.t_0) =
      fun (x13622 : 'tags this) ->
        fun ~blob:(x13621 : Blob.t) ->
          ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x13622) "readAsArrayBuffer"
               [|(Blob.t_to_js x13621)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> string) =
      fun (x13625 : 'tags this) ->
        fun ~blob:(x13624 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x13625) "readAsBinaryString"
               [|(Blob.t_to_js x13624)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> string) =
      fun (x13628 : 'tags this) ->
        fun ~blob:(x13627 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x13628) "readAsDataURL"
               [|(Blob.t_to_js x13627)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> string) =
      fun (x13634 : 'tags this) ->
        fun ~blob:(x13630 : Blob.t) ->
          fun ?encoding:(x13631 : string option) ->
            fun () ->
              Ojs.string_of_js
                (let x13636 = this_to_js Obj.magic x13634 in
                 Ojs.call (Ojs.get_prop_ascii x13636 "readAsText") "apply"
                   [|x13636;((let x13632 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13632 "push"
                                   [|(Blob.t_to_js x13630)|]);
                              (match x13631 with
                               | Some x13633 ->
                                   ignore
                                     (Ojs.call x13632 "push"
                                        [|(Ojs.string_to_js x13633)|])
                               | None -> ());
                              x13632))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileReaderSync") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReaderSync") [||])
  end
module FileReader =
  struct
    type t = [ `EventTarget  | `FileReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13638 : Ojs.t) -> t_of_js x13638
    and t_0_to_js : t_0 -> Ojs.t = fun (x13637 : t) -> t_to_js x13637
    type tags = [ `EventTarget  | `FileReader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13641 : Ojs.t) -> intf_of_js __tags_of_js x13641
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13639 : __tags intf) -> intf_to_js __tags_to_js x13639
    let (get_error : 'tags this -> DOMException.t option) =
      fun (x13643 : 'tags this) ->
        Ojs.option_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13643) "error")
    let (get_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x13646 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13648 : Ojs.t) ->
             fun ~this:(x13649 : t) ->
               fun ~ev:(x13650 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13648
                      [|(t_to_js x13649);(ProgressEvent.t_to_js t_to_js
                                            x13650)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13646) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x13652 : 'tags this) ->
        fun (x13653 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13652) "onabort"
            (Ojs.option_to_js
               (fun (x13654 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13655 : Ojs.t) ->
                       fun (x13656 : Ojs.t) ->
                         any_to_js
                           (x13654 ~this:(t_of_js x13655)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13656))))
               x13653)
    let (get_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x13659 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13661 : Ojs.t) ->
             fun ~this:(x13662 : t) ->
               fun ~ev:(x13663 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13661
                      [|(t_to_js x13662);(ProgressEvent.t_to_js t_to_js
                                            x13663)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13659) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x13665 : 'tags this) ->
        fun (x13666 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13665) "onerror"
            (Ojs.option_to_js
               (fun (x13667 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13668 : Ojs.t) ->
                       fun (x13669 : Ojs.t) ->
                         any_to_js
                           (x13667 ~this:(t_of_js x13668)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13669))))
               x13666)
    let (get_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x13672 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13674 : Ojs.t) ->
             fun ~this:(x13675 : t) ->
               fun ~ev:(x13676 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13674
                      [|(t_to_js x13675);(ProgressEvent.t_to_js t_to_js
                                            x13676)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13672) "onload")
    let (set_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x13678 : 'tags this) ->
        fun (x13679 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13678) "onload"
            (Ojs.option_to_js
               (fun (x13680 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13681 : Ojs.t) ->
                       fun (x13682 : Ojs.t) ->
                         any_to_js
                           (x13680 ~this:(t_of_js x13681)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13682))))
               x13679)
    let (get_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x13685 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13687 : Ojs.t) ->
             fun ~this:(x13688 : t) ->
               fun ~ev:(x13689 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13687
                      [|(t_to_js x13688);(ProgressEvent.t_to_js t_to_js
                                            x13689)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13685) "onloadend")
    let (set_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x13691 : 'tags this) ->
        fun (x13692 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13691) "onloadend"
            (Ojs.option_to_js
               (fun (x13693 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13694 : Ojs.t) ->
                       fun (x13695 : Ojs.t) ->
                         any_to_js
                           (x13693 ~this:(t_of_js x13694)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13695))))
               x13692)
    let (get_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x13698 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13700 : Ojs.t) ->
             fun ~this:(x13701 : t) ->
               fun ~ev:(x13702 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13700
                      [|(t_to_js x13701);(ProgressEvent.t_to_js t_to_js
                                            x13702)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13698) "onloadstart")
    let (set_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x13704 : 'tags this) ->
        fun (x13705 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13704) "onloadstart"
            (Ojs.option_to_js
               (fun (x13706 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13707 : Ojs.t) ->
                       fun (x13708 : Ojs.t) ->
                         any_to_js
                           (x13706 ~this:(t_of_js x13707)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13708))))
               x13705)
    let (get_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x13711 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13713 : Ojs.t) ->
             fun ~this:(x13714 : t) ->
               fun ~ev:(x13715 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13713
                      [|(t_to_js x13714);(ProgressEvent.t_to_js t_to_js
                                            x13715)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13711) "onprogress")
    let (set_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x13717 : 'tags this) ->
        fun (x13718 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13717) "onprogress"
            (Ojs.option_to_js
               (fun (x13719 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13720 : Ojs.t) ->
                       fun (x13721 : Ojs.t) ->
                         any_to_js
                           (x13719 ~this:(t_of_js x13720)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13721))))
               x13718)
    let (get_readyState : 'tags this -> float) =
      fun (x13724 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13724) "readyState")
    let (get_result :
      'tags this ->
        [ `String of string  | `Null  | `Other of ArrayBuffer.t_0 ]
          Primitive.t)
      =
      fun (x13726 : 'tags this) ->
        Primitive.t_of_js
          (fun (x13728 : Ojs.t) ->
             let x13729 = x13728 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x13729 "dummy") with
             | "String" -> `String (Ojs.string_of_js x13729)
             | "Null" -> `Null
             | "Other" -> `Other (ArrayBuffer.t_0_of_js x13729)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13726) "result")
    let (abort : 'tags this -> unit) =
      fun (x13730 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13730) "abort" [||])
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> unit) =
      fun (x13733 : 'tags this) ->
        fun ~blob:(x13732 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13733) "readAsArrayBuffer"
               [|(Blob.t_to_js x13732)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> unit) =
      fun (x13736 : 'tags this) ->
        fun ~blob:(x13735 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13736) "readAsBinaryString"
               [|(Blob.t_to_js x13735)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> unit) =
      fun (x13739 : 'tags this) ->
        fun ~blob:(x13738 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13739) "readAsDataURL"
               [|(Blob.t_to_js x13738)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> unit) =
      fun (x13745 : 'tags this) ->
        fun ~blob:(x13741 : Blob.t) ->
          fun ?encoding:(x13742 : string option) ->
            fun () ->
              ignore
                (let x13747 = this_to_js Obj.magic x13745 in
                 Ojs.call (Ojs.get_prop_ascii x13747 "readAsText") "apply"
                   [|x13747;((let x13743 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13743 "push"
                                   [|(Blob.t_to_js x13741)|]);
                              (match x13742 with
                               | Some x13744 ->
                                   ignore
                                     (Ojs.call x13743 "push"
                                        [|(Ojs.string_to_js x13744)|])
                               | None -> ());
                              x13743))|])
    let (get_DONE : 'tags this -> float) =
      fun (x13748 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13748) "DONE")
    let (get_EMPTY : 'tags this -> float) =
      fun (x13750 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13750) "EMPTY")
    let (get_LOADING : 'tags this -> float) =
      fun (x13752 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13752) "LOADING")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13763 : 'tags this) ->
        fun ~type_:(x13754 : 'K) ->
          fun ~listener:(x13755 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13756 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13765 = this_to_js Obj.magic x13763 in
                   Ojs.call (Ojs.get_prop_ascii x13765 "addEventListener")
                     "apply"
                     [|x13765;((let x13757 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13757 "push"
                                     [|(Obj.magic x13754)|]);
                                ignore
                                  (Ojs.call x13757 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13761 : Ojs.t) ->
                                             fun (x13762 : Ojs.t) ->
                                               any_to_js
                                                 (x13755
                                                    ~this:(t_of_js x13761)
                                                    ~ev:(any_of_js x13762))))|]);
                                (match x13756 with
                                 | Some x13758 ->
                                     ignore
                                       (Ojs.call x13757 "push"
                                          [|((match x13758 with
                                              | `U1 x13759 ->
                                                  Ojs.bool_to_js x13759
                                              | `U2 x13760 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13760))|])
                                 | None -> ());
                                x13757))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13773 : 'tags this) ->
        fun ~type_:(x13766 : string) ->
          fun ~listener:(x13767 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13768 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13775 = this_to_js Obj.magic x13773 in
                   Ojs.call (Ojs.get_prop_ascii x13775 "addEventListener")
                     "apply"
                     [|x13775;((let x13769 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13769 "push"
                                     [|(Ojs.string_to_js x13766)|]);
                                ignore
                                  (Ojs.call x13769 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13767)|]);
                                (match x13768 with
                                 | Some x13770 ->
                                     ignore
                                       (Ojs.call x13769 "push"
                                          [|((match x13770 with
                                              | `U1 x13771 ->
                                                  Ojs.bool_to_js x13771
                                              | `U2 x13772 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13772))|])
                                 | None -> ());
                                x13769))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13785 : 'tags this) ->
        fun ~type_:(x13776 : 'K) ->
          fun ~listener:(x13777 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13778 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13787 = this_to_js Obj.magic x13785 in
                   Ojs.call (Ojs.get_prop_ascii x13787 "removeEventListener")
                     "apply"
                     [|x13787;((let x13779 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13779 "push"
                                     [|(Obj.magic x13776)|]);
                                ignore
                                  (Ojs.call x13779 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13783 : Ojs.t) ->
                                             fun (x13784 : Ojs.t) ->
                                               any_to_js
                                                 (x13777
                                                    ~this:(t_of_js x13783)
                                                    ~ev:(any_of_js x13784))))|]);
                                (match x13778 with
                                 | Some x13780 ->
                                     ignore
                                       (Ojs.call x13779 "push"
                                          [|((match x13780 with
                                              | `U1 x13781 ->
                                                  Ojs.bool_to_js x13781
                                              | `U2 x13782 ->
                                                  EventListenerOptions.t_to_js
                                                    x13782))|])
                                 | None -> ());
                                x13779))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13795 : 'tags this) ->
        fun ~type_:(x13788 : string) ->
          fun ~listener:(x13789 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13790 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13797 = this_to_js Obj.magic x13795 in
                   Ojs.call (Ojs.get_prop_ascii x13797 "removeEventListener")
                     "apply"
                     [|x13797;((let x13791 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13791 "push"
                                     [|(Ojs.string_to_js x13788)|]);
                                ignore
                                  (Ojs.call x13791 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13789)|]);
                                (match x13790 with
                                 | Some x13792 ->
                                     ignore
                                       (Ojs.call x13791 "push"
                                          [|((match x13792 with
                                              | `U1 x13793 ->
                                                  Ojs.bool_to_js x13793
                                              | `U2 x13794 ->
                                                  EventListenerOptions.t_to_js
                                                    x13794))|])
                                 | None -> ());
                                x13791))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReader") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "DONE")
    let (empty : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "EMPTY")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "LOADING")
  end
module FileReaderEventMap =
  struct
    type t = [ `FileReaderEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13799 : Ojs.t) -> t_of_js x13799
    and t_0_to_js : t_0 -> Ojs.t = fun (x13798 : t) -> t_to_js x13798
    type tags = [ `FileReaderEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13802 : Ojs.t) -> intf_of_js __tags_of_js x13802
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13800 : __tags intf) -> intf_to_js __tags_to_js x13800
    let (get_abort : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13804 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13804) "abort")
    let (set_abort : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x13807 : 'tags this) ->
        fun (x13808 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13807) "abort"
            (ProgressEvent.t_to_js FileReader.t_to_js x13808)
    let (get_error : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13811 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13811) "error")
    let (set_error : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x13814 : 'tags this) ->
        fun (x13815 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13814) "error"
            (ProgressEvent.t_to_js FileReader.t_to_js x13815)
    let (get_load : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13818 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13818) "load")
    let (set_load : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x13821 : 'tags this) ->
        fun (x13822 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13821) "load"
            (ProgressEvent.t_to_js FileReader.t_to_js x13822)
    let (get_loadend : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13825 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13825) "loadend")
    let (set_loadend : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x13828 : 'tags this) ->
        fun (x13829 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13828) "loadend"
            (ProgressEvent.t_to_js FileReader.t_to_js x13829)
    let (get_loadstart : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13832 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13832) "loadstart")
    let (set_loadstart : 'tags this -> FileReader.t ProgressEvent.t -> unit)
      =
      fun (x13835 : 'tags this) ->
        fun (x13836 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13835) "loadstart"
            (ProgressEvent.t_to_js FileReader.t_to_js x13836)
    let (get_progress : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13839 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13839) "progress")
    let (set_progress : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x13842 : 'tags this) ->
        fun (x13843 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13842) "progress"
            (ProgressEvent.t_to_js FileReader.t_to_js x13843)
    let (create :
      abort:FileReader.t ProgressEvent.t ->
        error:FileReader.t ProgressEvent.t ->
          load:FileReader.t ProgressEvent.t ->
            loadend:FileReader.t ProgressEvent.t ->
              loadstart:FileReader.t ProgressEvent.t ->
                progress:FileReader.t ProgressEvent.t -> unit -> t)
      =
      fun ~abort:(x13846 : FileReader.t ProgressEvent.t) ->
        fun ~error:(x13847 : FileReader.t ProgressEvent.t) ->
          fun ~load:(x13848 : FileReader.t ProgressEvent.t) ->
            fun ~loadend:(x13849 : FileReader.t ProgressEvent.t) ->
              fun ~loadstart:(x13850 : FileReader.t ProgressEvent.t) ->
                fun ~progress:(x13851 : FileReader.t ProgressEvent.t) ->
                  fun () ->
                    let x13852 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x13852 "abort"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13846);
                    Ojs.set_prop_ascii x13852 "error"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13847);
                    Ojs.set_prop_ascii x13852 "load"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13848);
                    Ojs.set_prop_ascii x13852 "loadend"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13849);
                    Ojs.set_prop_ascii x13852 "loadstart"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13850);
                    Ojs.set_prop_ascii x13852 "progress"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13851);
                    t_of_js x13852
    let cast_from = Obj.magic
  end
module FileList =
  struct
    type t =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13860 : Ojs.t) -> t_of_js x13860
    and t_0_to_js : t_0 -> Ojs.t = fun (x13859 : t) -> t_to_js x13859
    type tags =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13863 : Ojs.t) -> intf_of_js __tags_of_js x13863
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13861 : __tags intf) -> intf_to_js __tags_to_js x13861
    let (get_length : 'tags this -> float) =
      fun (x13865 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13865) "length")
    let (item : 'tags this -> index:float -> File.t option) =
      fun (x13868 : 'tags this) ->
        fun ~index:(x13867 : float) ->
          Ojs.option_of_js File.t_of_js
            (Ojs.call (this_to_js Obj.magic x13868) "item"
               [|(Ojs.float_to_js x13867)|])
    let (get : 'tags this -> float -> File.t) =
      fun (x13871 : 'tags this) ->
        fun (x13873 : float) ->
          File.t_of_js
            (Ojs.get_prop (this_to_js Obj.magic x13871)
               (Ojs.float_to_js x13873))
    let (set : 'tags this -> float -> File.t -> unit) =
      fun (x13874 : 'tags this) ->
        fun (x13876 : float) ->
          fun (x13877 : File.t) ->
            Ojs.set_prop (this_to_js Obj.magic x13874)
              (Ojs.float_to_js x13876) (File.t_to_js x13877)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileList") [||])
  end
module EventSourceEventMap =
  struct
    type t = [ `EventSourceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13879 : Ojs.t) -> t_of_js x13879
    and t_0_to_js : t_0 -> Ojs.t = fun (x13878 : t) -> t_to_js x13878
    type tags = [ `EventSourceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13882 : Ojs.t) -> intf_of_js __tags_of_js x13882
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13880 : __tags intf) -> intf_to_js __tags_to_js x13880
    let (get_error : 'tags this -> Event.t) =
      fun (x13884 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13884) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13886 : 'tags this) ->
        fun (x13887 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13886) "error"
            (Event.t_to_js x13887)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x13889 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13889) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13891 : 'tags this) ->
        fun (x13892 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13891) "message"
            (MessageEvent.t_0_to_js x13892)
    let (get_open : 'tags this -> Event.t) =
      fun (x13894 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13894) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x13896 : 'tags this) ->
        fun (x13897 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13896) "open"
            (Event.t_to_js x13897)
    let (create :
      error:Event.t -> message:MessageEvent.t_0 -> open_:Event.t -> unit -> t)
      =
      fun ~error:(x13899 : Event.t) ->
        fun ~message:(x13900 : MessageEvent.t_0) ->
          fun ~open_:(x13901 : Event.t) ->
            fun () ->
              let x13902 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13902 "error" (Event.t_to_js x13899);
              Ojs.set_prop_ascii x13902 "message"
                (MessageEvent.t_0_to_js x13900);
              Ojs.set_prop_ascii x13902 "open" (Event.t_to_js x13901);
              t_of_js x13902
    let cast_from = Obj.magic
  end
module EventSourceInit =
  struct
    type t = [ `EventSourceInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13904 : Ojs.t) -> t_of_js x13904
    and t_0_to_js : t_0 -> Ojs.t = fun (x13903 : t) -> t_to_js x13903
    type tags = [ `EventSourceInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13907 : Ojs.t) -> intf_of_js __tags_of_js x13907
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13905 : __tags intf) -> intf_to_js __tags_to_js x13905
    let (get_withCredentials : 'tags this -> bool) =
      fun (x13909 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13909) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x13911 : 'tags this) ->
        fun (x13912 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13911) "withCredentials"
            (Ojs.bool_to_js x13912)
    let (create : withCredentials:bool -> unit -> t) =
      fun ~withCredentials:(x13914 : bool) ->
        fun () ->
          let x13915 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13915 "withCredentials" (Ojs.bool_to_js x13914);
          t_of_js x13915
    let cast_from = Obj.magic
  end
module EventSource =
  struct
    type t = [ `EventSource  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13917 : Ojs.t) -> t_of_js x13917
    and t_0_to_js : t_0 -> Ojs.t = fun (x13916 : t) -> t_to_js x13916
    type tags = [ `EventSource  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13920 : Ojs.t) -> intf_of_js __tags_of_js x13920
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13918 : __tags intf) -> intf_to_js __tags_to_js x13918
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x13922 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13924 : Ojs.t) ->
             fun ~this:(x13925 : t) ->
               fun ~ev:(x13926 : Event.t) ->
                 any_of_js
                   (Ojs.apply x13924
                      [|(t_to_js x13925);(Event.t_to_js x13926)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13922) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x13927 : 'tags this) ->
        fun (x13928 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13927) "onerror"
            (Ojs.option_to_js
               (fun (x13929 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13930 : Ojs.t) ->
                       fun (x13931 : Ojs.t) ->
                         any_to_js
                           (x13929 ~this:(t_of_js x13930)
                              ~ev:(Event.t_of_js x13931)))) x13928)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x13933 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13935 : Ojs.t) ->
             fun ~this:(x13936 : t) ->
               fun ~ev:(x13937 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13935
                      [|(t_to_js x13936);(MessageEvent.t_0_to_js x13937)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13933) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x13938 : 'tags this) ->
        fun (x13939 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13938) "onmessage"
            (Ojs.option_to_js
               (fun (x13940 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13941 : Ojs.t) ->
                       fun (x13942 : Ojs.t) ->
                         any_to_js
                           (x13940 ~this:(t_of_js x13941)
                              ~ev:(MessageEvent.t_0_of_js x13942)))) x13939)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x13944 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13946 : Ojs.t) ->
             fun ~this:(x13947 : t) ->
               fun ~ev:(x13948 : Event.t) ->
                 any_of_js
                   (Ojs.apply x13946
                      [|(t_to_js x13947);(Event.t_to_js x13948)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13944) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x13949 : 'tags this) ->
        fun (x13950 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13949) "onopen"
            (Ojs.option_to_js
               (fun (x13951 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13952 : Ojs.t) ->
                       fun (x13953 : Ojs.t) ->
                         any_to_js
                           (x13951 ~this:(t_of_js x13952)
                              ~ev:(Event.t_of_js x13953)))) x13950)
    let (get_readyState : 'tags this -> float) =
      fun (x13955 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13955) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x13957 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13957) "url")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x13959 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13959) "withCredentials")
    let (close : 'tags this -> unit) =
      fun (x13961 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13961) "close" [||])
    let (get_CLOSED : 'tags this -> float) =
      fun (x13963 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13963) "CLOSED")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x13965 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13965) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x13967 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13967) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13978 : 'tags this) ->
        fun ~type_:(x13969 : 'K) ->
          fun ~listener:(x13970 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13971 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13980 = this_to_js Obj.magic x13978 in
                   Ojs.call (Ojs.get_prop_ascii x13980 "addEventListener")
                     "apply"
                     [|x13980;((let x13972 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13972 "push"
                                     [|(Obj.magic x13969)|]);
                                ignore
                                  (Ojs.call x13972 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13976 : Ojs.t) ->
                                             fun (x13977 : Ojs.t) ->
                                               any_to_js
                                                 (x13970
                                                    ~this:(t_of_js x13976)
                                                    ~ev:(any_of_js x13977))))|]);
                                (match x13971 with
                                 | Some x13973 ->
                                     ignore
                                       (Ojs.call x13972 "push"
                                          [|((match x13973 with
                                              | `U1 x13974 ->
                                                  Ojs.bool_to_js x13974
                                              | `U2 x13975 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13975))|])
                                 | None -> ());
                                x13972))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13988 : 'tags this) ->
        fun ~type_:(x13981 : string) ->
          fun ~listener:(x13982 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13983 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13990 = this_to_js Obj.magic x13988 in
                   Ojs.call (Ojs.get_prop_ascii x13990 "addEventListener")
                     "apply"
                     [|x13990;((let x13984 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13984 "push"
                                     [|(Ojs.string_to_js x13981)|]);
                                ignore
                                  (Ojs.call x13984 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13982)|]);
                                (match x13983 with
                                 | Some x13985 ->
                                     ignore
                                       (Ojs.call x13984 "push"
                                          [|((match x13985 with
                                              | `U1 x13986 ->
                                                  Ojs.bool_to_js x13986
                                              | `U2 x13987 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13987))|])
                                 | None -> ());
                                x13984))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14000 : 'tags this) ->
        fun ~type_:(x13991 : 'K) ->
          fun ~listener:(x13992 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13993 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14002 = this_to_js Obj.magic x14000 in
                   Ojs.call (Ojs.get_prop_ascii x14002 "removeEventListener")
                     "apply"
                     [|x14002;((let x13994 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13994 "push"
                                     [|(Obj.magic x13991)|]);
                                ignore
                                  (Ojs.call x13994 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13998 : Ojs.t) ->
                                             fun (x13999 : Ojs.t) ->
                                               any_to_js
                                                 (x13992
                                                    ~this:(t_of_js x13998)
                                                    ~ev:(any_of_js x13999))))|]);
                                (match x13993 with
                                 | Some x13995 ->
                                     ignore
                                       (Ojs.call x13994 "push"
                                          [|((match x13995 with
                                              | `U1 x13996 ->
                                                  Ojs.bool_to_js x13996
                                              | `U2 x13997 ->
                                                  EventListenerOptions.t_to_js
                                                    x13997))|])
                                 | None -> ());
                                x13994))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14010 : 'tags this) ->
        fun ~type_:(x14003 : string) ->
          fun ~listener:(x14004 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14005 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14012 = this_to_js Obj.magic x14010 in
                   Ojs.call (Ojs.get_prop_ascii x14012 "removeEventListener")
                     "apply"
                     [|x14012;((let x14006 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14006 "push"
                                     [|(Ojs.string_to_js x14003)|]);
                                ignore
                                  (Ojs.call x14006 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14004)|]);
                                (match x14005 with
                                 | Some x14007 ->
                                     ignore
                                       (Ojs.call x14006 "push"
                                          [|((match x14007 with
                                              | `U1 x14008 ->
                                                  Ojs.bool_to_js x14008
                                              | `U2 x14009 ->
                                                  EventListenerOptions.t_to_js
                                                    x14009))|])
                                 | None -> ());
                                x14006))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of URL.t ] ->
        ?eventSourceInitDict:EventSourceInit.t -> unit -> t)
      =
      fun ~url:(x14013 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?eventSourceInitDict:(x14014 : EventSourceInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EventSource")
                 (let x14015 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x14015 "push"
                       [|((match x14013 with
                           | `U1 x14017 -> Ojs.string_to_js x14017
                           | `U2 x14018 -> URL.t_to_js x14018))|]);
                  (match x14014 with
                   | Some x14016 ->
                       ignore
                         (Ojs.call x14015 "push"
                            [|(EventSourceInit.t_to_js x14016)|])
                   | None -> ());
                  x14015))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CLOSED")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "OPEN")
  end
module EXT_texture_compression_rgtc =
  struct
    type t = [ `EXT_texture_compression_rgtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14020 : Ojs.t) -> t_of_js x14020
    and t_0_to_js : t_0 -> Ojs.t = fun (x14019 : t) -> t_to_js x14019
    type tags = [ `EXT_texture_compression_rgtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_compression_rgtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14023 : Ojs.t) -> intf_of_js __tags_of_js x14023
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14021 : __tags intf) -> intf_to_js __tags_to_js x14021
    let (get_COMPRESSED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t) =
      fun (x14025 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14025)
             "COMPRESSED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x14027 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14027)
             "COMPRESSED_RED_RGTC1_EXT")
    let (get_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t)
      =
      fun (x14029 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14029)
             "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_SIGNED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x14031 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14031)
             "COMPRESSED_SIGNED_RED_RGTC1_EXT")
    let (create :
      compressed_red_green_rgtc2_ext:GLenum.t ->
        compressed_red_rgtc1_ext:GLenum.t ->
          compressed_signed_red_green_rgtc2_ext:GLenum.t ->
            compressed_signed_red_rgtc1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_red_green_rgtc2_ext:(x14033 : GLenum.t) ->
        fun ~compressed_red_rgtc1_ext:(x14034 : GLenum.t) ->
          fun ~compressed_signed_red_green_rgtc2_ext:(x14035 : GLenum.t) ->
            fun ~compressed_signed_red_rgtc1_ext:(x14036 : GLenum.t) ->
              fun () ->
                let x14037 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14037 "COMPRESSED_RED_GREEN_RGTC2_EXT"
                  (GLenum.t_to_js x14033);
                Ojs.set_prop_ascii x14037 "COMPRESSED_RED_RGTC1_EXT"
                  (GLenum.t_to_js x14034);
                Ojs.set_prop_ascii x14037
                  "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"
                  (GLenum.t_to_js x14035);
                Ojs.set_prop_ascii x14037 "COMPRESSED_SIGNED_RED_RGTC1_EXT"
                  (GLenum.t_to_js x14036);
                t_of_js x14037
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14039 : Ojs.t) -> t_of_js x14039
    and t_0_to_js : t_0 -> Ojs.t = fun (x14038 : t) -> t_to_js x14038
    type tags =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14042 : Ojs.t) -> intf_of_js __tags_of_js x14042
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14040 : __tags intf) -> intf_to_js __tags_to_js x14040
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14044 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14044) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14046 : 'tags this) ->
        fun (x14047 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14046) "message"
            (MessageEvent.t_0_to_js x14047)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x14049 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14049) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14051 : 'tags this) ->
        fun (x14052 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14051) "messageerror"
            (MessageEvent.t_0_to_js x14052)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x14054 : MessageEvent.t_0) ->
        fun ~messageerror:(x14055 : MessageEvent.t_0) ->
          fun () ->
            let x14056 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14056 "message"
              (MessageEvent.t_0_to_js x14054);
            Ojs.set_prop_ascii x14056 "messageerror"
              (MessageEvent.t_0_to_js x14055);
            t_of_js x14056
    let cast_from = Obj.magic
  end
module FrameRequestCallback =
  struct
    type t = [ `FrameRequestCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14058 : Ojs.t) -> t_of_js x14058
    and t_0_to_js : t_0 -> Ojs.t = fun (x14057 : t) -> t_to_js x14057
    type tags = [ `FrameRequestCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FrameRequestCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14061 : Ojs.t) -> intf_of_js __tags_of_js x14061
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14059 : __tags intf) -> intf_to_js __tags_to_js x14059
    let (apply : 'tags this -> time:DOMHighResTimeStamp.t -> unit) =
      fun (x14064 : 'tags this) ->
        fun ~time:(x14063 : DOMHighResTimeStamp.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic x14064)
               [|(DOMHighResTimeStamp.t_to_js x14063)|])
    let cast_from = Obj.magic
  end
module AnimationFrameProvider =
  struct
    type t = [ `AnimationFrameProvider ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14067 : Ojs.t) -> t_of_js x14067
    and t_0_to_js : t_0 -> Ojs.t = fun (x14066 : t) -> t_to_js x14066
    type tags = [ `AnimationFrameProvider ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AnimationFrameProvider ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14070 : Ojs.t) -> intf_of_js __tags_of_js x14070
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14068 : __tags intf) -> intf_to_js __tags_to_js x14068
    let (cancelAnimationFrame : 'tags this -> handle:float -> unit) =
      fun (x14073 : 'tags this) ->
        fun ~handle:(x14072 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14073) "cancelAnimationFrame"
               [|(Ojs.float_to_js x14072)|])
    let (requestAnimationFrame :
      'tags this -> callback:FrameRequestCallback.t -> float) =
      fun (x14076 : 'tags this) ->
        fun ~callback:(x14075 : FrameRequestCallback.t) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x14076) "requestAnimationFrame"
               [|(FrameRequestCallback.t_to_js x14075)|])
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScope =
  struct
    type t =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14079 : Ojs.t) -> t_of_js x14079
    and t_0_to_js : t_0 -> Ojs.t = fun (x14078 : t) -> t_to_js x14078
    type tags =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14082 : Ojs.t) -> intf_of_js __tags_of_js x14082
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14080 : __tags intf) -> intf_to_js __tags_to_js x14080
    let (get_name : 'tags this -> string) =
      fun (x14084 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14084) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14086 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14088 : Ojs.t) ->
             fun ~this:(x14089 : t) ->
               fun ~ev:(x14090 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14088
                      [|(t_to_js x14089);(MessageEvent.t_0_to_js x14090)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14086) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14091 : 'tags this) ->
        fun (x14092 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14091) "onmessage"
            (Ojs.option_to_js
               (fun (x14093 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14094 : Ojs.t) ->
                       fun (x14095 : Ojs.t) ->
                         any_to_js
                           (x14093 ~this:(t_of_js x14094)
                              ~ev:(MessageEvent.t_0_of_js x14095)))) x14092)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14097 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14099 : Ojs.t) ->
             fun ~this:(x14100 : t) ->
               fun ~ev:(x14101 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14099
                      [|(t_to_js x14100);(MessageEvent.t_0_to_js x14101)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14097) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14102 : 'tags this) ->
        fun (x14103 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14102) "onmessageerror"
            (Ojs.option_to_js
               (fun (x14104 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14105 : Ojs.t) ->
                       fun (x14106 : Ojs.t) ->
                         any_to_js
                           (x14104 ~this:(t_of_js x14105)
                              ~ev:(MessageEvent.t_0_of_js x14106)))) x14103)
    let (close : 'tags this -> unit) =
      fun (x14108 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14108) "close" [||])
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x14113 : 'tags this) ->
        fun ~message:(x14110 : any) ->
          fun ~transfer:(x14111 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14113) "postMessage"
                 [|(any_to_js x14110);(Ojs.list_to_js Transferable.t_to_js
                                         x14111)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x14119 : 'tags this) ->
        fun ~message:(x14115 : any) ->
          fun ?options:(x14116 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x14121 = this_to_js Obj.magic x14119 in
                 Ojs.call (Ojs.get_prop_ascii x14121 "postMessage") "apply"
                   [|x14121;((let x14117 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14117 "push"
                                   [|(any_to_js x14115)|]);
                              (match x14116 with
                               | Some x14118 ->
                                   ignore
                                     (Ojs.call x14117 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x14118)|])
                               | None -> ());
                              x14117))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14131 : 'tags this) ->
        fun ~type_:(x14122 : 'K) ->
          fun ~listener:(x14123 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14124 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14133 = this_to_js Obj.magic x14131 in
                   Ojs.call (Ojs.get_prop_ascii x14133 "addEventListener")
                     "apply"
                     [|x14133;((let x14125 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14125 "push"
                                     [|(Obj.magic x14122)|]);
                                ignore
                                  (Ojs.call x14125 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14129 : Ojs.t) ->
                                             fun (x14130 : Ojs.t) ->
                                               any_to_js
                                                 (x14123
                                                    ~this:(t_of_js x14129)
                                                    ~ev:(any_of_js x14130))))|]);
                                (match x14124 with
                                 | Some x14126 ->
                                     ignore
                                       (Ojs.call x14125 "push"
                                          [|((match x14126 with
                                              | `U1 x14127 ->
                                                  Ojs.bool_to_js x14127
                                              | `U2 x14128 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14128))|])
                                 | None -> ());
                                x14125))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14141 : 'tags this) ->
        fun ~type_:(x14134 : string) ->
          fun ~listener:(x14135 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14136 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14143 = this_to_js Obj.magic x14141 in
                   Ojs.call (Ojs.get_prop_ascii x14143 "addEventListener")
                     "apply"
                     [|x14143;((let x14137 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14137 "push"
                                     [|(Ojs.string_to_js x14134)|]);
                                ignore
                                  (Ojs.call x14137 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14135)|]);
                                (match x14136 with
                                 | Some x14138 ->
                                     ignore
                                       (Ojs.call x14137 "push"
                                          [|((match x14138 with
                                              | `U1 x14139 ->
                                                  Ojs.bool_to_js x14139
                                              | `U2 x14140 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14140))|])
                                 | None -> ());
                                x14137))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14153 : 'tags this) ->
        fun ~type_:(x14144 : 'K) ->
          fun ~listener:(x14145 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14146 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14155 = this_to_js Obj.magic x14153 in
                   Ojs.call (Ojs.get_prop_ascii x14155 "removeEventListener")
                     "apply"
                     [|x14155;((let x14147 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14147 "push"
                                     [|(Obj.magic x14144)|]);
                                ignore
                                  (Ojs.call x14147 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14151 : Ojs.t) ->
                                             fun (x14152 : Ojs.t) ->
                                               any_to_js
                                                 (x14145
                                                    ~this:(t_of_js x14151)
                                                    ~ev:(any_of_js x14152))))|]);
                                (match x14146 with
                                 | Some x14148 ->
                                     ignore
                                       (Ojs.call x14147 "push"
                                          [|((match x14148 with
                                              | `U1 x14149 ->
                                                  Ojs.bool_to_js x14149
                                              | `U2 x14150 ->
                                                  EventListenerOptions.t_to_js
                                                    x14150))|])
                                 | None -> ());
                                x14147))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14163 : 'tags this) ->
        fun ~type_:(x14156 : string) ->
          fun ~listener:(x14157 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14158 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14165 = this_to_js Obj.magic x14163 in
                   Ojs.call (Ojs.get_prop_ascii x14165 "removeEventListener")
                     "apply"
                     [|x14165;((let x14159 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14159 "push"
                                     [|(Ojs.string_to_js x14156)|]);
                                ignore
                                  (Ojs.call x14159 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14157)|]);
                                (match x14158 with
                                 | Some x14160 ->
                                     ignore
                                       (Ojs.call x14159 "push"
                                          [|((match x14160 with
                                              | `U1 x14161 ->
                                                  Ojs.bool_to_js x14161
                                              | `U2 x14162 ->
                                                  EventListenerOptions.t_to_js
                                                    x14162))|])
                                 | None -> ());
                                x14159))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             [||])
  end
module DOMRectInit =
  struct
    type t = [ `DOMRectInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14167 : Ojs.t) -> t_of_js x14167
    and t_0_to_js : t_0 -> Ojs.t = fun (x14166 : t) -> t_to_js x14166
    type tags = [ `DOMRectInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14170 : Ojs.t) -> intf_of_js __tags_of_js x14170
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14168 : __tags intf) -> intf_to_js __tags_to_js x14168
    let (get_height : 'tags this -> float) =
      fun (x14172 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14172) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x14174 : 'tags this) ->
        fun (x14175 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14174) "height"
            (Ojs.float_to_js x14175)
    let (get_width : 'tags this -> float) =
      fun (x14177 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14177) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x14179 : 'tags this) ->
        fun (x14180 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14179) "width"
            (Ojs.float_to_js x14180)
    let (get_x : 'tags this -> float) =
      fun (x14182 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14182) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14184 : 'tags this) ->
        fun (x14185 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14184) "x"
            (Ojs.float_to_js x14185)
    let (get_y : 'tags this -> float) =
      fun (x14187 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14187) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14189 : 'tags this) ->
        fun (x14190 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14189) "y"
            (Ojs.float_to_js x14190)
    let (create :
      height:float -> width:float -> x:float -> y:float -> unit -> t) =
      fun ~height:(x14192 : float) ->
        fun ~width:(x14193 : float) ->
          fun ~x:(x14194 : float) ->
            fun ~y:(x14195 : float) ->
              fun () ->
                let x14196 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14196 "height" (Ojs.float_to_js x14192);
                Ojs.set_prop_ascii x14196 "width" (Ojs.float_to_js x14193);
                Ojs.set_prop_ascii x14196 "x" (Ojs.float_to_js x14194);
                Ojs.set_prop_ascii x14196 "y" (Ojs.float_to_js x14195);
                t_of_js x14196
    let cast_from = Obj.magic
  end
module DOMRectReadOnly =
  struct
    type t = [ `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14198 : Ojs.t) -> t_of_js x14198
    and t_0_to_js : t_0 -> Ojs.t = fun (x14197 : t) -> t_to_js x14197
    type tags = [ `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14201 : Ojs.t) -> intf_of_js __tags_of_js x14201
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14199 : __tags intf) -> intf_to_js __tags_to_js x14199
    let (get_bottom : 'tags this -> float) =
      fun (x14203 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14203) "bottom")
    let (get_height : 'tags this -> float) =
      fun (x14205 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14205) "height")
    let (get_left : 'tags this -> float) =
      fun (x14207 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14207) "left")
    let (get_right : 'tags this -> float) =
      fun (x14209 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14209) "right")
    let (get_top : 'tags this -> float) =
      fun (x14211 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14211) "top")
    let (get_width : 'tags this -> float) =
      fun (x14213 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14213) "width")
    let (get_x : 'tags this -> float) =
      fun (x14215 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14215) "x")
    let (get_y : 'tags this -> float) =
      fun (x14217 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14217) "y")
    let (toJSON : 'tags this -> any) =
      fun (x14219 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14219) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly") "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x14221 : float option) ->
        fun ?y:(x14222 : float option) ->
          fun ?width:(x14223 : float option) ->
            fun ?height:(x14224 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly")
                     (let x14225 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14221 with
                       | Some x14229 ->
                           ignore
                             (Ojs.call x14225 "push"
                                [|(Ojs.float_to_js x14229)|])
                       | None -> ());
                      (match x14222 with
                       | Some x14228 ->
                           ignore
                             (Ojs.call x14225 "push"
                                [|(Ojs.float_to_js x14228)|])
                       | None -> ());
                      (match x14223 with
                       | Some x14227 ->
                           ignore
                             (Ojs.call x14225 "push"
                                [|(Ojs.float_to_js x14227)|])
                       | None -> ());
                      (match x14224 with
                       | Some x14226 ->
                           ignore
                             (Ojs.call x14225 "push"
                                [|(Ojs.float_to_js x14226)|])
                       | None -> ());
                      x14225))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x14230 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x14233 = Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x14233 "fromRect") "apply"
               [|x14233;((let x14231 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14230 with
                           | Some x14232 ->
                               ignore
                                 (Ojs.call x14231 "push"
                                    [|(DOMRectInit.t_to_js x14232)|])
                           | None -> ());
                          x14231))|])
  end
module DOMRect =
  struct
    type t = [ `DOMRect  | `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14235 : Ojs.t) -> t_of_js x14235
    and t_0_to_js : t_0 -> Ojs.t = fun (x14234 : t) -> t_to_js x14234
    type tags = [ `DOMRect  | `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14238 : Ojs.t) -> intf_of_js __tags_of_js x14238
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14236 : __tags intf) -> intf_to_js __tags_to_js x14236
    let (get_height : 'tags this -> float) =
      fun (x14240 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14240) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x14242 : 'tags this) ->
        fun (x14243 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14242) "height"
            (Ojs.float_to_js x14243)
    let (get_width : 'tags this -> float) =
      fun (x14245 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14245) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x14247 : 'tags this) ->
        fun (x14248 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14247) "width"
            (Ojs.float_to_js x14248)
    let (get_x : 'tags this -> float) =
      fun (x14250 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14250) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14252 : 'tags this) ->
        fun (x14253 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14252) "x"
            (Ojs.float_to_js x14253)
    let (get_y : 'tags this -> float) =
      fun (x14255 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14255) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14257 : 'tags this) ->
        fun (x14258 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14257) "y"
            (Ojs.float_to_js x14258)
    let (create :
      height:float -> width:float -> x:float -> y:float -> unit -> t) =
      fun ~height:(x14260 : float) ->
        fun ~width:(x14261 : float) ->
          fun ~x:(x14262 : float) ->
            fun ~y:(x14263 : float) ->
              fun () ->
                let x14264 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14264 "height" (Ojs.float_to_js x14260);
                Ojs.set_prop_ascii x14264 "width" (Ojs.float_to_js x14261);
                Ojs.set_prop_ascii x14264 "x" (Ojs.float_to_js x14262);
                Ojs.set_prop_ascii x14264 "y" (Ojs.float_to_js x14263);
                t_of_js x14264
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMRect")
             "prototype")
    let (create' :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x14265 : float option) ->
        fun ?y:(x14266 : float option) ->
          fun ?width:(x14267 : float option) ->
            fun ?height:(x14268 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMRect")
                     (let x14269 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14265 with
                       | Some x14273 ->
                           ignore
                             (Ojs.call x14269 "push"
                                [|(Ojs.float_to_js x14273)|])
                       | None -> ());
                      (match x14266 with
                       | Some x14272 ->
                           ignore
                             (Ojs.call x14269 "push"
                                [|(Ojs.float_to_js x14272)|])
                       | None -> ());
                      (match x14267 with
                       | Some x14271 ->
                           ignore
                             (Ojs.call x14269 "push"
                                [|(Ojs.float_to_js x14271)|])
                       | None -> ());
                      (match x14268 with
                       | Some x14270 ->
                           ignore
                             (Ojs.call x14269 "push"
                                [|(Ojs.float_to_js x14270)|])
                       | None -> ());
                      x14269))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x14274 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x14277 = Ojs.get_prop_ascii Ojs.global "DOMRect" in
             Ojs.call (Ojs.get_prop_ascii x14277 "fromRect") "apply"
               [|x14277;((let x14275 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14274 with
                           | Some x14276 ->
                               ignore
                                 (Ojs.call x14275 "push"
                                    [|(DOMRectInit.t_to_js x14276)|])
                           | None -> ());
                          x14275))|])
  end
module DOMPointInit =
  struct
    type t = [ `DOMPointInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14279 : Ojs.t) -> t_of_js x14279
    and t_0_to_js : t_0 -> Ojs.t = fun (x14278 : t) -> t_to_js x14278
    type tags = [ `DOMPointInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14282 : Ojs.t) -> intf_of_js __tags_of_js x14282
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14280 : __tags intf) -> intf_to_js __tags_to_js x14280
    let (get_w : 'tags this -> float) =
      fun (x14284 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14284) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x14286 : 'tags this) ->
        fun (x14287 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14286) "w"
            (Ojs.float_to_js x14287)
    let (get_x : 'tags this -> float) =
      fun (x14289 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14289) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14291 : 'tags this) ->
        fun (x14292 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14291) "x"
            (Ojs.float_to_js x14292)
    let (get_y : 'tags this -> float) =
      fun (x14294 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14294) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14296 : 'tags this) ->
        fun (x14297 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14296) "y"
            (Ojs.float_to_js x14297)
    let (get_z : 'tags this -> float) =
      fun (x14299 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14299) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x14301 : 'tags this) ->
        fun (x14302 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14301) "z"
            (Ojs.float_to_js x14302)
    let (create : w:float -> x:float -> y:float -> z:float -> unit -> t) =
      fun ~w:(x14304 : float) ->
        fun ~x:(x14305 : float) ->
          fun ~y:(x14306 : float) ->
            fun ~z:(x14307 : float) ->
              fun () ->
                let x14308 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14308 "w" (Ojs.float_to_js x14304);
                Ojs.set_prop_ascii x14308 "x" (Ojs.float_to_js x14305);
                Ojs.set_prop_ascii x14308 "y" (Ojs.float_to_js x14306);
                Ojs.set_prop_ascii x14308 "z" (Ojs.float_to_js x14307);
                t_of_js x14308
    let cast_from = Obj.magic
  end
module DOMQuadInit =
  struct
    type t = [ `DOMQuadInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14310 : Ojs.t) -> t_of_js x14310
    and t_0_to_js : t_0 -> Ojs.t = fun (x14309 : t) -> t_to_js x14309
    type tags = [ `DOMQuadInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuadInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14313 : Ojs.t) -> intf_of_js __tags_of_js x14313
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14311 : __tags intf) -> intf_to_js __tags_to_js x14311
    let (get_p1 : 'tags this -> DOMPointInit.t) =
      fun (x14315 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14315) "p1")
    let (set_p1 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14317 : 'tags this) ->
        fun (x14318 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14317) "p1"
            (DOMPointInit.t_to_js x14318)
    let (get_p2 : 'tags this -> DOMPointInit.t) =
      fun (x14320 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14320) "p2")
    let (set_p2 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14322 : 'tags this) ->
        fun (x14323 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14322) "p2"
            (DOMPointInit.t_to_js x14323)
    let (get_p3 : 'tags this -> DOMPointInit.t) =
      fun (x14325 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14325) "p3")
    let (set_p3 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14327 : 'tags this) ->
        fun (x14328 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14327) "p3"
            (DOMPointInit.t_to_js x14328)
    let (get_p4 : 'tags this -> DOMPointInit.t) =
      fun (x14330 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14330) "p4")
    let (set_p4 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14332 : 'tags this) ->
        fun (x14333 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14332) "p4"
            (DOMPointInit.t_to_js x14333)
    let (create :
      p1:DOMPointInit.t ->
        p2:DOMPointInit.t ->
          p3:DOMPointInit.t -> p4:DOMPointInit.t -> unit -> t)
      =
      fun ~p1:(x14335 : DOMPointInit.t) ->
        fun ~p2:(x14336 : DOMPointInit.t) ->
          fun ~p3:(x14337 : DOMPointInit.t) ->
            fun ~p4:(x14338 : DOMPointInit.t) ->
              fun () ->
                let x14339 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14339 "p1" (DOMPointInit.t_to_js x14335);
                Ojs.set_prop_ascii x14339 "p2" (DOMPointInit.t_to_js x14336);
                Ojs.set_prop_ascii x14339 "p3" (DOMPointInit.t_to_js x14337);
                Ojs.set_prop_ascii x14339 "p4" (DOMPointInit.t_to_js x14338);
                t_of_js x14339
    let cast_from = Obj.magic
  end
module DOMMatrixInit =
  struct
    type t = [ `DOMMatrix2DInit  | `DOMMatrixInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14341 : Ojs.t) -> t_of_js x14341
    and t_0_to_js : t_0 -> Ojs.t = fun (x14340 : t) -> t_to_js x14340
    type tags = [ `DOMMatrix2DInit  | `DOMMatrixInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14344 : Ojs.t) -> intf_of_js __tags_of_js x14344
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14342 : __tags intf) -> intf_to_js __tags_to_js x14342
    let (get_is2D : 'tags this -> bool) =
      fun (x14346 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14346) "is2D")
    let (set_is2D : 'tags this -> bool -> unit) =
      fun (x14348 : 'tags this) ->
        fun (x14349 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14348) "is2D"
            (Ojs.bool_to_js x14349)
    let (get_m13 : 'tags this -> float) =
      fun (x14351 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14351) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x14353 : 'tags this) ->
        fun (x14354 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14353) "m13"
            (Ojs.float_to_js x14354)
    let (get_m14 : 'tags this -> float) =
      fun (x14356 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14356) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x14358 : 'tags this) ->
        fun (x14359 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14358) "m14"
            (Ojs.float_to_js x14359)
    let (get_m23 : 'tags this -> float) =
      fun (x14361 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14361) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x14363 : 'tags this) ->
        fun (x14364 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14363) "m23"
            (Ojs.float_to_js x14364)
    let (get_m24 : 'tags this -> float) =
      fun (x14366 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14366) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x14368 : 'tags this) ->
        fun (x14369 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14368) "m24"
            (Ojs.float_to_js x14369)
    let (get_m31 : 'tags this -> float) =
      fun (x14371 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14371) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x14373 : 'tags this) ->
        fun (x14374 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14373) "m31"
            (Ojs.float_to_js x14374)
    let (get_m32 : 'tags this -> float) =
      fun (x14376 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14376) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x14378 : 'tags this) ->
        fun (x14379 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14378) "m32"
            (Ojs.float_to_js x14379)
    let (get_m33 : 'tags this -> float) =
      fun (x14381 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14381) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x14383 : 'tags this) ->
        fun (x14384 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14383) "m33"
            (Ojs.float_to_js x14384)
    let (get_m34 : 'tags this -> float) =
      fun (x14386 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14386) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x14388 : 'tags this) ->
        fun (x14389 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14388) "m34"
            (Ojs.float_to_js x14389)
    let (get_m43 : 'tags this -> float) =
      fun (x14391 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14391) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x14393 : 'tags this) ->
        fun (x14394 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14393) "m43"
            (Ojs.float_to_js x14394)
    let (get_m44 : 'tags this -> float) =
      fun (x14396 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14396) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x14398 : 'tags this) ->
        fun (x14399 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14398) "m44"
            (Ojs.float_to_js x14399)
    let (create :
      is2D:bool ->
        m13:float ->
          m14:float ->
            m23:float ->
              m24:float ->
                m31:float ->
                  m32:float ->
                    m33:float ->
                      m34:float -> m43:float -> m44:float -> unit -> t)
      =
      fun ~is2D:(x14401 : bool) ->
        fun ~m13:(x14402 : float) ->
          fun ~m14:(x14403 : float) ->
            fun ~m23:(x14404 : float) ->
              fun ~m24:(x14405 : float) ->
                fun ~m31:(x14406 : float) ->
                  fun ~m32:(x14407 : float) ->
                    fun ~m33:(x14408 : float) ->
                      fun ~m34:(x14409 : float) ->
                        fun ~m43:(x14410 : float) ->
                          fun ~m44:(x14411 : float) ->
                            fun () ->
                              let x14412 = Ojs.empty_obj () in
                              Ojs.set_prop_ascii x14412 "is2D"
                                (Ojs.bool_to_js x14401);
                              Ojs.set_prop_ascii x14412 "m13"
                                (Ojs.float_to_js x14402);
                              Ojs.set_prop_ascii x14412 "m14"
                                (Ojs.float_to_js x14403);
                              Ojs.set_prop_ascii x14412 "m23"
                                (Ojs.float_to_js x14404);
                              Ojs.set_prop_ascii x14412 "m24"
                                (Ojs.float_to_js x14405);
                              Ojs.set_prop_ascii x14412 "m31"
                                (Ojs.float_to_js x14406);
                              Ojs.set_prop_ascii x14412 "m32"
                                (Ojs.float_to_js x14407);
                              Ojs.set_prop_ascii x14412 "m33"
                                (Ojs.float_to_js x14408);
                              Ojs.set_prop_ascii x14412 "m34"
                                (Ojs.float_to_js x14409);
                              Ojs.set_prop_ascii x14412 "m43"
                                (Ojs.float_to_js x14410);
                              Ojs.set_prop_ascii x14412 "m44"
                                (Ojs.float_to_js x14411);
                              t_of_js x14412
    let cast_from = Obj.magic
  end
module rec
  DOMPoint:sig
             type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
             type t_0 = t
             [@@@js.stop ]
             type tags = [ `DOMPoint  | `DOMPointReadOnly ]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags = [ `DOMPoint  | `DOMPointReadOnly ]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_w : 'tags this -> float
             val set_w : 'tags this -> float -> unit
             val get_x : 'tags this -> float
             val set_x : 'tags this -> float -> unit
             val get_y : 'tags this -> float
             val set_y : 'tags this -> float -> unit
             val get_z : 'tags this -> float
             val set_z : 'tags this -> float -> unit
             val create :
               w:float -> x:float -> y:float -> z:float -> unit -> t
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create' :
               ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t
             val fromPoint : ?other:DOMPointInit.t -> unit -> t
           end =
  struct
    type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14414 : Ojs.t) -> t_of_js x14414
    and t_0_to_js : t_0 -> Ojs.t = fun (x14413 : t) -> t_to_js x14413
    type tags = [ `DOMPoint  | `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14417 : Ojs.t) -> intf_of_js __tags_of_js x14417
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14415 : __tags intf) -> intf_to_js __tags_to_js x14415
    let (get_w : 'tags this -> float) =
      fun (x14419 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14419) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x14421 : 'tags this) ->
        fun (x14422 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14421) "w"
            (Ojs.float_to_js x14422)
    let (get_x : 'tags this -> float) =
      fun (x14424 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14424) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14426 : 'tags this) ->
        fun (x14427 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14426) "x"
            (Ojs.float_to_js x14427)
    let (get_y : 'tags this -> float) =
      fun (x14429 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14429) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14431 : 'tags this) ->
        fun (x14432 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14431) "y"
            (Ojs.float_to_js x14432)
    let (get_z : 'tags this -> float) =
      fun (x14434 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14434) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x14436 : 'tags this) ->
        fun (x14437 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14436) "z"
            (Ojs.float_to_js x14437)
    let (create : w:float -> x:float -> y:float -> z:float -> unit -> t) =
      fun ~w:(x14439 : float) ->
        fun ~x:(x14440 : float) ->
          fun ~y:(x14441 : float) ->
            fun ~z:(x14442 : float) ->
              fun () ->
                let x14443 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14443 "w" (Ojs.float_to_js x14439);
                Ojs.set_prop_ascii x14443 "x" (Ojs.float_to_js x14440);
                Ojs.set_prop_ascii x14443 "y" (Ojs.float_to_js x14441);
                Ojs.set_prop_ascii x14443 "z" (Ojs.float_to_js x14442);
                t_of_js x14443
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMPoint")
             "prototype")
    let (create' : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x14444 : float option) ->
        fun ?y:(x14445 : float option) ->
          fun ?z:(x14446 : float option) ->
            fun ?w:(x14447 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMPoint")
                     (let x14448 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14444 with
                       | Some x14452 ->
                           ignore
                             (Ojs.call x14448 "push"
                                [|(Ojs.float_to_js x14452)|])
                       | None -> ());
                      (match x14445 with
                       | Some x14451 ->
                           ignore
                             (Ojs.call x14448 "push"
                                [|(Ojs.float_to_js x14451)|])
                       | None -> ());
                      (match x14446 with
                       | Some x14450 ->
                           ignore
                             (Ojs.call x14448 "push"
                                [|(Ojs.float_to_js x14450)|])
                       | None -> ());
                      (match x14447 with
                       | Some x14449 ->
                           ignore
                             (Ojs.call x14448 "push"
                                [|(Ojs.float_to_js x14449)|])
                       | None -> ());
                      x14448))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x14453 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x14456 = Ojs.get_prop_ascii Ojs.global "DOMPoint" in
             Ojs.call (Ojs.get_prop_ascii x14456 "fromPoint") "apply"
               [|x14456;((let x14454 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14453 with
                           | Some x14455 ->
                               ignore
                                 (Ojs.call x14454 "push"
                                    [|(DOMPointInit.t_to_js x14455)|])
                           | None -> ());
                          x14454))|])
  end
 and
  DOMPointReadOnly:sig
                     type t = [ `DOMPointReadOnly ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `DOMPointReadOnly ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `DOMPointReadOnly ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `DOMPointReadOnly ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_w : 'tags this -> float
                     val get_x : 'tags this -> float
                     val get_y : 'tags this -> float
                     val get_z : 'tags this -> float
                     val matrixTransform :
                       'tags this ->
                         ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t
                     val toJSON : 'tags this -> any
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create :
                       ?x:float ->
                         ?y:float -> ?z:float -> ?w:float -> unit -> t
                     val fromPoint : ?other:DOMPointInit.t -> unit -> t
                   end =
  struct
    type t = [ `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14458 : Ojs.t) -> t_of_js x14458
    and t_0_to_js : t_0 -> Ojs.t = fun (x14457 : t) -> t_to_js x14457
    type tags = [ `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14461 : Ojs.t) -> intf_of_js __tags_of_js x14461
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14459 : __tags intf) -> intf_to_js __tags_to_js x14459
    let (get_w : 'tags this -> float) =
      fun (x14463 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14463) "w")
    let (get_x : 'tags this -> float) =
      fun (x14465 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14465) "x")
    let (get_y : 'tags this -> float) =
      fun (x14467 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14467) "y")
    let (get_z : 'tags this -> float) =
      fun (x14469 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14469) "z")
    let (matrixTransform :
      'tags this -> ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t) =
      fun (x14474 : 'tags this) ->
        fun ?matrix:(x14471 : DOMMatrixInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x14476 = this_to_js Obj.magic x14474 in
               Ojs.call (Ojs.get_prop_ascii x14476 "matrixTransform") "apply"
                 [|x14476;((let x14472 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14471 with
                             | Some x14473 ->
                                 ignore
                                   (Ojs.call x14472 "push"
                                      [|(DOMMatrixInit.t_to_js x14473)|])
                             | None -> ());
                            x14472))|])
    let (toJSON : 'tags this -> any) =
      fun (x14477 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14477) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly") "prototype")
    let (create : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x14479 : float option) ->
        fun ?y:(x14480 : float option) ->
          fun ?z:(x14481 : float option) ->
            fun ?w:(x14482 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly")
                     (let x14483 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14479 with
                       | Some x14487 ->
                           ignore
                             (Ojs.call x14483 "push"
                                [|(Ojs.float_to_js x14487)|])
                       | None -> ());
                      (match x14480 with
                       | Some x14486 ->
                           ignore
                             (Ojs.call x14483 "push"
                                [|(Ojs.float_to_js x14486)|])
                       | None -> ());
                      (match x14481 with
                       | Some x14485 ->
                           ignore
                             (Ojs.call x14483 "push"
                                [|(Ojs.float_to_js x14485)|])
                       | None -> ());
                      (match x14482 with
                       | Some x14484 ->
                           ignore
                             (Ojs.call x14483 "push"
                                [|(Ojs.float_to_js x14484)|])
                       | None -> ());
                      x14483))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x14488 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x14491 = Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x14491 "fromPoint") "apply"
               [|x14491;((let x14489 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14488 with
                           | Some x14490 ->
                               ignore
                                 (Ojs.call x14489 "push"
                                    [|(DOMPointInit.t_to_js x14490)|])
                           | None -> ());
                          x14489))|])
  end
module DOMQuad =
  struct
    type t = [ `DOMQuad ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14493 : Ojs.t) -> t_of_js x14493
    and t_0_to_js : t_0 -> Ojs.t = fun (x14492 : t) -> t_to_js x14492
    type tags = [ `DOMQuad ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14496 : Ojs.t) -> intf_of_js __tags_of_js x14496
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14494 : __tags intf) -> intf_to_js __tags_to_js x14494
    let (get_p1 : 'tags this -> DOMPoint.t) =
      fun (x14498 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14498) "p1")
    let (get_p2 : 'tags this -> DOMPoint.t) =
      fun (x14500 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14500) "p2")
    let (get_p3 : 'tags this -> DOMPoint.t) =
      fun (x14502 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14502) "p3")
    let (get_p4 : 'tags this -> DOMPoint.t) =
      fun (x14504 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14504) "p4")
    let (getBounds : 'tags this -> DOMRect.t) =
      fun (x14506 : 'tags this) ->
        DOMRect.t_of_js
          (Ojs.call (this_to_js Obj.magic x14506) "getBounds" [||])
    let (toJSON : 'tags this -> any) =
      fun (x14508 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14508) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMQuad")
             "prototype")
    let (create :
      ?p1:DOMPointInit.t ->
        ?p2:DOMPointInit.t ->
          ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t)
      =
      fun ?p1:(x14510 : DOMPointInit.t option) ->
        fun ?p2:(x14511 : DOMPointInit.t option) ->
          fun ?p3:(x14512 : DOMPointInit.t option) ->
            fun ?p4:(x14513 : DOMPointInit.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMQuad")
                     (let x14514 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14510 with
                       | Some x14518 ->
                           ignore
                             (Ojs.call x14514 "push"
                                [|(DOMPointInit.t_to_js x14518)|])
                       | None -> ());
                      (match x14511 with
                       | Some x14517 ->
                           ignore
                             (Ojs.call x14514 "push"
                                [|(DOMPointInit.t_to_js x14517)|])
                       | None -> ());
                      (match x14512 with
                       | Some x14516 ->
                           ignore
                             (Ojs.call x14514 "push"
                                [|(DOMPointInit.t_to_js x14516)|])
                       | None -> ());
                      (match x14513 with
                       | Some x14515 ->
                           ignore
                             (Ojs.call x14514 "push"
                                [|(DOMPointInit.t_to_js x14515)|])
                       | None -> ());
                      x14514))
    let (fromQuad : ?other:DOMQuadInit.t -> unit -> t) =
      fun ?other:(x14519 : DOMQuadInit.t option) ->
        fun () ->
          t_of_js
            (let x14522 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x14522 "fromQuad") "apply"
               [|x14522;((let x14520 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14519 with
                           | Some x14521 ->
                               ignore
                                 (Ojs.call x14520 "push"
                                    [|(DOMQuadInit.t_to_js x14521)|])
                           | None -> ());
                          x14520))|])
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x14523 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x14526 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x14526 "fromRect") "apply"
               [|x14526;((let x14524 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14523 with
                           | Some x14525 ->
                               ignore
                                 (Ojs.call x14524 "push"
                                    [|(DOMRectInit.t_to_js x14525)|])
                           | None -> ());
                          x14524))|])
  end
module rec
  DOMMatrix:sig
              type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem
                type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_a : 'tags this -> float
              val set_a : 'tags this -> float -> unit
              val get_b : 'tags this -> float
              val set_b : 'tags this -> float -> unit
              val get_c : 'tags this -> float
              val set_c : 'tags this -> float -> unit
              val get_d : 'tags this -> float
              val set_d : 'tags this -> float -> unit
              val get_e : 'tags this -> float
              val set_e : 'tags this -> float -> unit
              val get_f : 'tags this -> float
              val set_f : 'tags this -> float -> unit
              val get_m11 : 'tags this -> float
              val set_m11 : 'tags this -> float -> unit
              val get_m12 : 'tags this -> float
              val set_m12 : 'tags this -> float -> unit
              val get_m13 : 'tags this -> float
              val set_m13 : 'tags this -> float -> unit
              val get_m14 : 'tags this -> float
              val set_m14 : 'tags this -> float -> unit
              val get_m21 : 'tags this -> float
              val set_m21 : 'tags this -> float -> unit
              val get_m22 : 'tags this -> float
              val set_m22 : 'tags this -> float -> unit
              val get_m23 : 'tags this -> float
              val set_m23 : 'tags this -> float -> unit
              val get_m24 : 'tags this -> float
              val set_m24 : 'tags this -> float -> unit
              val get_m31 : 'tags this -> float
              val set_m31 : 'tags this -> float -> unit
              val get_m32 : 'tags this -> float
              val set_m32 : 'tags this -> float -> unit
              val get_m33 : 'tags this -> float
              val set_m33 : 'tags this -> float -> unit
              val get_m34 : 'tags this -> float
              val set_m34 : 'tags this -> float -> unit
              val get_m41 : 'tags this -> float
              val set_m41 : 'tags this -> float -> unit
              val get_m42 : 'tags this -> float
              val set_m42 : 'tags this -> float -> unit
              val get_m43 : 'tags this -> float
              val set_m43 : 'tags this -> float -> unit
              val get_m44 : 'tags this -> float
              val set_m44 : 'tags this -> float -> unit
              val invertSelf : 'tags this -> t
              val multiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val preMultiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val rotateAxisAngleSelf :
                'tags this ->
                  ?x:float ->
                    ?y:float -> ?z:float -> ?angle:float -> unit -> t
              val rotateFromVectorSelf :
                'tags this -> ?x:float -> ?y:float -> unit -> t
              val rotateSelf :
                'tags this ->
                  ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t
              val scale3dSelf :
                'tags this ->
                  ?scale:float ->
                    ?originX:float ->
                      ?originY:float -> ?originZ:float -> unit -> t
              val scaleSelf :
                'tags this ->
                  ?scaleX:float ->
                    ?scaleY:float ->
                      ?scaleZ:float ->
                        ?originX:float ->
                          ?originY:float -> ?originZ:float -> unit -> t
              val skewXSelf : 'tags this -> ?sx:float -> unit -> t
              val skewYSelf : 'tags this -> ?sy:float -> unit -> t
              val translateSelf :
                'tags this ->
                  ?tx:float -> ?ty:float -> ?tz:float -> unit -> t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create :
                ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t
              val fromFloat32Array : Float32Array.t_0 -> t
              val fromFloat64Array : Float64Array.t_0 -> t
              val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
            end =
  struct
    type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14528 : Ojs.t) -> t_of_js x14528
    and t_0_to_js : t_0 -> Ojs.t = fun (x14527 : t) -> t_to_js x14527
    type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14531 : Ojs.t) -> intf_of_js __tags_of_js x14531
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14529 : __tags intf) -> intf_to_js __tags_to_js x14529
    let (get_a : 'tags this -> float) =
      fun (x14533 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14533) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x14535 : 'tags this) ->
        fun (x14536 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14535) "a"
            (Ojs.float_to_js x14536)
    let (get_b : 'tags this -> float) =
      fun (x14538 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14538) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x14540 : 'tags this) ->
        fun (x14541 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14540) "b"
            (Ojs.float_to_js x14541)
    let (get_c : 'tags this -> float) =
      fun (x14543 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14543) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x14545 : 'tags this) ->
        fun (x14546 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14545) "c"
            (Ojs.float_to_js x14546)
    let (get_d : 'tags this -> float) =
      fun (x14548 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14548) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x14550 : 'tags this) ->
        fun (x14551 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14550) "d"
            (Ojs.float_to_js x14551)
    let (get_e : 'tags this -> float) =
      fun (x14553 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14553) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x14555 : 'tags this) ->
        fun (x14556 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14555) "e"
            (Ojs.float_to_js x14556)
    let (get_f : 'tags this -> float) =
      fun (x14558 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14558) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x14560 : 'tags this) ->
        fun (x14561 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14560) "f"
            (Ojs.float_to_js x14561)
    let (get_m11 : 'tags this -> float) =
      fun (x14563 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14563) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x14565 : 'tags this) ->
        fun (x14566 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14565) "m11"
            (Ojs.float_to_js x14566)
    let (get_m12 : 'tags this -> float) =
      fun (x14568 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14568) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x14570 : 'tags this) ->
        fun (x14571 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14570) "m12"
            (Ojs.float_to_js x14571)
    let (get_m13 : 'tags this -> float) =
      fun (x14573 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14573) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x14575 : 'tags this) ->
        fun (x14576 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14575) "m13"
            (Ojs.float_to_js x14576)
    let (get_m14 : 'tags this -> float) =
      fun (x14578 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14578) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x14580 : 'tags this) ->
        fun (x14581 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14580) "m14"
            (Ojs.float_to_js x14581)
    let (get_m21 : 'tags this -> float) =
      fun (x14583 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14583) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x14585 : 'tags this) ->
        fun (x14586 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14585) "m21"
            (Ojs.float_to_js x14586)
    let (get_m22 : 'tags this -> float) =
      fun (x14588 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14588) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x14590 : 'tags this) ->
        fun (x14591 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14590) "m22"
            (Ojs.float_to_js x14591)
    let (get_m23 : 'tags this -> float) =
      fun (x14593 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14593) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x14595 : 'tags this) ->
        fun (x14596 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14595) "m23"
            (Ojs.float_to_js x14596)
    let (get_m24 : 'tags this -> float) =
      fun (x14598 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14598) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x14600 : 'tags this) ->
        fun (x14601 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14600) "m24"
            (Ojs.float_to_js x14601)
    let (get_m31 : 'tags this -> float) =
      fun (x14603 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14603) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x14605 : 'tags this) ->
        fun (x14606 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14605) "m31"
            (Ojs.float_to_js x14606)
    let (get_m32 : 'tags this -> float) =
      fun (x14608 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14608) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x14610 : 'tags this) ->
        fun (x14611 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14610) "m32"
            (Ojs.float_to_js x14611)
    let (get_m33 : 'tags this -> float) =
      fun (x14613 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14613) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x14615 : 'tags this) ->
        fun (x14616 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14615) "m33"
            (Ojs.float_to_js x14616)
    let (get_m34 : 'tags this -> float) =
      fun (x14618 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14618) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x14620 : 'tags this) ->
        fun (x14621 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14620) "m34"
            (Ojs.float_to_js x14621)
    let (get_m41 : 'tags this -> float) =
      fun (x14623 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14623) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x14625 : 'tags this) ->
        fun (x14626 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14625) "m41"
            (Ojs.float_to_js x14626)
    let (get_m42 : 'tags this -> float) =
      fun (x14628 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14628) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x14630 : 'tags this) ->
        fun (x14631 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14630) "m42"
            (Ojs.float_to_js x14631)
    let (get_m43 : 'tags this -> float) =
      fun (x14633 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14633) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x14635 : 'tags this) ->
        fun (x14636 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14635) "m43"
            (Ojs.float_to_js x14636)
    let (get_m44 : 'tags this -> float) =
      fun (x14638 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14638) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x14640 : 'tags this) ->
        fun (x14641 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14640) "m44"
            (Ojs.float_to_js x14641)
    let (invertSelf : 'tags this -> t) =
      fun (x14643 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x14643) "invertSelf" [||])
    let (multiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t) =
      fun (x14648 : 'tags this) ->
        fun ?other:(x14645 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x14650 = this_to_js Obj.magic x14648 in
               Ojs.call (Ojs.get_prop_ascii x14650 "multiplySelf") "apply"
                 [|x14650;((let x14646 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14645 with
                             | Some x14647 ->
                                 ignore
                                   (Ojs.call x14646 "push"
                                      [|(DOMMatrixInit.t_to_js x14647)|])
                             | None -> ());
                            x14646))|])
    let (preMultiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t)
      =
      fun (x14654 : 'tags this) ->
        fun ?other:(x14651 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x14656 = this_to_js Obj.magic x14654 in
               Ojs.call (Ojs.get_prop_ascii x14656 "preMultiplySelf") "apply"
                 [|x14656;((let x14652 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14651 with
                             | Some x14653 ->
                                 ignore
                                   (Ojs.call x14652 "push"
                                      [|(DOMMatrixInit.t_to_js x14653)|])
                             | None -> ());
                            x14652))|])
    let (rotateAxisAngleSelf :
      'tags this ->
        ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> t)
      =
      fun (x14666 : 'tags this) ->
        fun ?x:(x14657 : float option) ->
          fun ?y:(x14658 : float option) ->
            fun ?z:(x14659 : float option) ->
              fun ?angle:(x14660 : float option) ->
                fun () ->
                  t_of_js
                    (let x14668 = this_to_js Obj.magic x14666 in
                     Ojs.call
                       (Ojs.get_prop_ascii x14668 "rotateAxisAngleSelf")
                       "apply"
                       [|x14668;((let x14661 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x14657 with
                                   | Some x14665 ->
                                       ignore
                                         (Ojs.call x14661 "push"
                                            [|(Ojs.float_to_js x14665)|])
                                   | None -> ());
                                  (match x14658 with
                                   | Some x14664 ->
                                       ignore
                                         (Ojs.call x14661 "push"
                                            [|(Ojs.float_to_js x14664)|])
                                   | None -> ());
                                  (match x14659 with
                                   | Some x14663 ->
                                       ignore
                                         (Ojs.call x14661 "push"
                                            [|(Ojs.float_to_js x14663)|])
                                   | None -> ());
                                  (match x14660 with
                                   | Some x14662 ->
                                       ignore
                                         (Ojs.call x14661 "push"
                                            [|(Ojs.float_to_js x14662)|])
                                   | None -> ());
                                  x14661))|])
    let (rotateFromVectorSelf :
      'tags this -> ?x:float -> ?y:float -> unit -> t) =
      fun (x14674 : 'tags this) ->
        fun ?x:(x14669 : float option) ->
          fun ?y:(x14670 : float option) ->
            fun () ->
              t_of_js
                (let x14676 = this_to_js Obj.magic x14674 in
                 Ojs.call (Ojs.get_prop_ascii x14676 "rotateFromVectorSelf")
                   "apply"
                   [|x14676;((let x14671 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14669 with
                               | Some x14673 ->
                                   ignore
                                     (Ojs.call x14671 "push"
                                        [|(Ojs.float_to_js x14673)|])
                               | None -> ());
                              (match x14670 with
                               | Some x14672 ->
                                   ignore
                                     (Ojs.call x14671 "push"
                                        [|(Ojs.float_to_js x14672)|])
                               | None -> ());
                              x14671))|])
    let (rotateSelf :
      'tags this -> ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t) =
      fun (x14684 : 'tags this) ->
        fun ?rotX:(x14677 : float option) ->
          fun ?rotY:(x14678 : float option) ->
            fun ?rotZ:(x14679 : float option) ->
              fun () ->
                t_of_js
                  (let x14686 = this_to_js Obj.magic x14684 in
                   Ojs.call (Ojs.get_prop_ascii x14686 "rotateSelf") "apply"
                     [|x14686;((let x14680 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x14677 with
                                 | Some x14683 ->
                                     ignore
                                       (Ojs.call x14680 "push"
                                          [|(Ojs.float_to_js x14683)|])
                                 | None -> ());
                                (match x14678 with
                                 | Some x14682 ->
                                     ignore
                                       (Ojs.call x14680 "push"
                                          [|(Ojs.float_to_js x14682)|])
                                 | None -> ());
                                (match x14679 with
                                 | Some x14681 ->
                                     ignore
                                       (Ojs.call x14680 "push"
                                          [|(Ojs.float_to_js x14681)|])
                                 | None -> ());
                                x14680))|])
    let (scale3dSelf :
      'tags this ->
        ?scale:float ->
          ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x14696 : 'tags this) ->
        fun ?scale:(x14687 : float option) ->
          fun ?originX:(x14688 : float option) ->
            fun ?originY:(x14689 : float option) ->
              fun ?originZ:(x14690 : float option) ->
                fun () ->
                  t_of_js
                    (let x14698 = this_to_js Obj.magic x14696 in
                     Ojs.call (Ojs.get_prop_ascii x14698 "scale3dSelf")
                       "apply"
                       [|x14698;((let x14691 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x14687 with
                                   | Some x14695 ->
                                       ignore
                                         (Ojs.call x14691 "push"
                                            [|(Ojs.float_to_js x14695)|])
                                   | None -> ());
                                  (match x14688 with
                                   | Some x14694 ->
                                       ignore
                                         (Ojs.call x14691 "push"
                                            [|(Ojs.float_to_js x14694)|])
                                   | None -> ());
                                  (match x14689 with
                                   | Some x14693 ->
                                       ignore
                                         (Ojs.call x14691 "push"
                                            [|(Ojs.float_to_js x14693)|])
                                   | None -> ());
                                  (match x14690 with
                                   | Some x14692 ->
                                       ignore
                                         (Ojs.call x14691 "push"
                                            [|(Ojs.float_to_js x14692)|])
                                   | None -> ());
                                  x14691))|])
    let (scaleSelf :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x14712 : 'tags this) ->
        fun ?scaleX:(x14699 : float option) ->
          fun ?scaleY:(x14700 : float option) ->
            fun ?scaleZ:(x14701 : float option) ->
              fun ?originX:(x14702 : float option) ->
                fun ?originY:(x14703 : float option) ->
                  fun ?originZ:(x14704 : float option) ->
                    fun () ->
                      t_of_js
                        (let x14714 = this_to_js Obj.magic x14712 in
                         Ojs.call (Ojs.get_prop_ascii x14714 "scaleSelf")
                           "apply"
                           [|x14714;((let x14705 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x14699 with
                                       | Some x14711 ->
                                           ignore
                                             (Ojs.call x14705 "push"
                                                [|(Ojs.float_to_js x14711)|])
                                       | None -> ());
                                      (match x14700 with
                                       | Some x14710 ->
                                           ignore
                                             (Ojs.call x14705 "push"
                                                [|(Ojs.float_to_js x14710)|])
                                       | None -> ());
                                      (match x14701 with
                                       | Some x14709 ->
                                           ignore
                                             (Ojs.call x14705 "push"
                                                [|(Ojs.float_to_js x14709)|])
                                       | None -> ());
                                      (match x14702 with
                                       | Some x14708 ->
                                           ignore
                                             (Ojs.call x14705 "push"
                                                [|(Ojs.float_to_js x14708)|])
                                       | None -> ());
                                      (match x14703 with
                                       | Some x14707 ->
                                           ignore
                                             (Ojs.call x14705 "push"
                                                [|(Ojs.float_to_js x14707)|])
                                       | None -> ());
                                      (match x14704 with
                                       | Some x14706 ->
                                           ignore
                                             (Ojs.call x14705 "push"
                                                [|(Ojs.float_to_js x14706)|])
                                       | None -> ());
                                      x14705))|])
    let (skewXSelf : 'tags this -> ?sx:float -> unit -> t) =
      fun (x14718 : 'tags this) ->
        fun ?sx:(x14715 : float option) ->
          fun () ->
            t_of_js
              (let x14720 = this_to_js Obj.magic x14718 in
               Ojs.call (Ojs.get_prop_ascii x14720 "skewXSelf") "apply"
                 [|x14720;((let x14716 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14715 with
                             | Some x14717 ->
                                 ignore
                                   (Ojs.call x14716 "push"
                                      [|(Ojs.float_to_js x14717)|])
                             | None -> ());
                            x14716))|])
    let (skewYSelf : 'tags this -> ?sy:float -> unit -> t) =
      fun (x14724 : 'tags this) ->
        fun ?sy:(x14721 : float option) ->
          fun () ->
            t_of_js
              (let x14726 = this_to_js Obj.magic x14724 in
               Ojs.call (Ojs.get_prop_ascii x14726 "skewYSelf") "apply"
                 [|x14726;((let x14722 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14721 with
                             | Some x14723 ->
                                 ignore
                                   (Ojs.call x14722 "push"
                                      [|(Ojs.float_to_js x14723)|])
                             | None -> ());
                            x14722))|])
    let (translateSelf :
      'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> t) =
      fun (x14734 : 'tags this) ->
        fun ?tx:(x14727 : float option) ->
          fun ?ty:(x14728 : float option) ->
            fun ?tz:(x14729 : float option) ->
              fun () ->
                t_of_js
                  (let x14736 = this_to_js Obj.magic x14734 in
                   Ojs.call (Ojs.get_prop_ascii x14736 "translateSelf")
                     "apply"
                     [|x14736;((let x14730 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x14727 with
                                 | Some x14733 ->
                                     ignore
                                       (Ojs.call x14730 "push"
                                          [|(Ojs.float_to_js x14733)|])
                                 | None -> ());
                                (match x14728 with
                                 | Some x14732 ->
                                     ignore
                                       (Ojs.call x14730 "push"
                                          [|(Ojs.float_to_js x14732)|])
                                 | None -> ());
                                (match x14729 with
                                 | Some x14731 ->
                                     ignore
                                       (Ojs.call x14730 "push"
                                          [|(Ojs.float_to_js x14731)|])
                                 | None -> ());
                                x14730))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "prototype")
    let (create : ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t)
      =
      fun ?init:(x14737 : [ `U1 of string  | `U2 of float list ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
               (let x14738 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x14737 with
                 | Some x14739 ->
                     ignore
                       (Ojs.call x14738 "push"
                          [|((match x14739 with
                              | `U1 x14740 -> Ojs.string_to_js x14740
                              | `U2 x14741 ->
                                  Ojs.list_to_js Ojs.float_to_js x14741))|])
                 | None -> ());
                x14738))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x14743 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x14743)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x14744 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x14744)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x14745 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x14748 = Ojs.get_prop_ascii Ojs.global "DOMMatrix" in
             Ojs.call (Ojs.get_prop_ascii x14748 "fromMatrix") "apply"
               [|x14748;((let x14746 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14745 with
                           | Some x14747 ->
                               ignore
                                 (Ojs.call x14746 "push"
                                    [|(DOMMatrixInit.t_to_js x14747)|])
                           | None -> ());
                          x14746))|])
  end
 and
  DOMMatrixReadOnly:sig
                      type t = [ `DOMMatrixReadOnly ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `DOMMatrixReadOnly ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `DOMMatrixReadOnly ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_a : 'tags this -> float
                      val get_b : 'tags this -> float
                      val get_c : 'tags this -> float
                      val get_d : 'tags this -> float
                      val get_e : 'tags this -> float
                      val get_f : 'tags this -> float
                      val get_is2D : 'tags this -> bool
                      val get_isIdentity : 'tags this -> bool
                      val get_m11 : 'tags this -> float
                      val get_m12 : 'tags this -> float
                      val get_m13 : 'tags this -> float
                      val get_m14 : 'tags this -> float
                      val get_m21 : 'tags this -> float
                      val get_m22 : 'tags this -> float
                      val get_m23 : 'tags this -> float
                      val get_m24 : 'tags this -> float
                      val get_m31 : 'tags this -> float
                      val get_m32 : 'tags this -> float
                      val get_m33 : 'tags this -> float
                      val get_m34 : 'tags this -> float
                      val get_m41 : 'tags this -> float
                      val get_m42 : 'tags this -> float
                      val get_m43 : 'tags this -> float
                      val get_m44 : 'tags this -> float
                      val flipX : 'tags this -> DOMMatrix.t
                      val flipY : 'tags this -> DOMMatrix.t
                      val inverse : 'tags this -> DOMMatrix.t
                      val multiply :
                        'tags this ->
                          ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t
                      val rotate :
                        'tags this ->
                          ?rotX:float ->
                            ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t
                      val rotateAxisAngle :
                        'tags this ->
                          ?x:float ->
                            ?y:float ->
                              ?z:float -> ?angle:float -> unit -> DOMMatrix.t
                      val rotateFromVector :
                        'tags this ->
                          ?x:float -> ?y:float -> unit -> DOMMatrix.t
                      val scale :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float ->
                              ?scaleZ:float ->
                                ?originX:float ->
                                  ?originY:float ->
                                    ?originZ:float -> unit -> DOMMatrix.t
                      val scale3d :
                        'tags this ->
                          ?scale:float ->
                            ?originX:float ->
                              ?originY:float ->
                                ?originZ:float -> unit -> DOMMatrix.t
                      val scaleNonUniform :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float -> unit -> DOMMatrix.t
                      val skewX :
                        'tags this -> ?sx:float -> unit -> DOMMatrix.t
                      val skewY :
                        'tags this -> ?sy:float -> unit -> DOMMatrix.t
                      val toFloat32Array : 'tags this -> Float32Array.t_0
                      val toFloat64Array : 'tags this -> Float64Array.t_0
                      val toJSON : 'tags this -> any
                      val transformPoint :
                        'tags this ->
                          ?point:DOMPointInit.t -> unit -> DOMPoint.t
                      val translate :
                        'tags this ->
                          ?tx:float ->
                            ?ty:float -> ?tz:float -> unit -> DOMMatrix.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create :
                        ?init:[ `U1 of string  | `U2 of float list ] ->
                          unit -> t
                      val fromFloat32Array : Float32Array.t_0 -> t
                      val fromFloat64Array : Float64Array.t_0 -> t
                      val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
                    end =
  struct
    type t = [ `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14750 : Ojs.t) -> t_of_js x14750
    and t_0_to_js : t_0 -> Ojs.t = fun (x14749 : t) -> t_to_js x14749
    type tags = [ `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14753 : Ojs.t) -> intf_of_js __tags_of_js x14753
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14751 : __tags intf) -> intf_to_js __tags_to_js x14751
    let (get_a : 'tags this -> float) =
      fun (x14755 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14755) "a")
    let (get_b : 'tags this -> float) =
      fun (x14757 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14757) "b")
    let (get_c : 'tags this -> float) =
      fun (x14759 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14759) "c")
    let (get_d : 'tags this -> float) =
      fun (x14761 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14761) "d")
    let (get_e : 'tags this -> float) =
      fun (x14763 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14763) "e")
    let (get_f : 'tags this -> float) =
      fun (x14765 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14765) "f")
    let (get_is2D : 'tags this -> bool) =
      fun (x14767 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14767) "is2D")
    let (get_isIdentity : 'tags this -> bool) =
      fun (x14769 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14769) "isIdentity")
    let (get_m11 : 'tags this -> float) =
      fun (x14771 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14771) "m11")
    let (get_m12 : 'tags this -> float) =
      fun (x14773 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14773) "m12")
    let (get_m13 : 'tags this -> float) =
      fun (x14775 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14775) "m13")
    let (get_m14 : 'tags this -> float) =
      fun (x14777 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14777) "m14")
    let (get_m21 : 'tags this -> float) =
      fun (x14779 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14779) "m21")
    let (get_m22 : 'tags this -> float) =
      fun (x14781 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14781) "m22")
    let (get_m23 : 'tags this -> float) =
      fun (x14783 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14783) "m23")
    let (get_m24 : 'tags this -> float) =
      fun (x14785 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14785) "m24")
    let (get_m31 : 'tags this -> float) =
      fun (x14787 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14787) "m31")
    let (get_m32 : 'tags this -> float) =
      fun (x14789 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14789) "m32")
    let (get_m33 : 'tags this -> float) =
      fun (x14791 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14791) "m33")
    let (get_m34 : 'tags this -> float) =
      fun (x14793 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14793) "m34")
    let (get_m41 : 'tags this -> float) =
      fun (x14795 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14795) "m41")
    let (get_m42 : 'tags this -> float) =
      fun (x14797 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14797) "m42")
    let (get_m43 : 'tags this -> float) =
      fun (x14799 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14799) "m43")
    let (get_m44 : 'tags this -> float) =
      fun (x14801 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14801) "m44")
    let (flipX : 'tags this -> DOMMatrix.t) =
      fun (x14803 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x14803) "flipX" [||])
    let (flipY : 'tags this -> DOMMatrix.t) =
      fun (x14805 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x14805) "flipY" [||])
    let (inverse : 'tags this -> DOMMatrix.t) =
      fun (x14807 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x14807) "inverse" [||])
    let (multiply :
      'tags this -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t) =
      fun (x14812 : 'tags this) ->
        fun ?other:(x14809 : DOMMatrixInit.t option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x14814 = this_to_js Obj.magic x14812 in
               Ojs.call (Ojs.get_prop_ascii x14814 "multiply") "apply"
                 [|x14814;((let x14810 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14809 with
                             | Some x14811 ->
                                 ignore
                                   (Ojs.call x14810 "push"
                                      [|(DOMMatrixInit.t_to_js x14811)|])
                             | None -> ());
                            x14810))|])
    let (rotate :
      'tags this ->
        ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t)
      =
      fun (x14822 : 'tags this) ->
        fun ?rotX:(x14815 : float option) ->
          fun ?rotY:(x14816 : float option) ->
            fun ?rotZ:(x14817 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x14824 = this_to_js Obj.magic x14822 in
                   Ojs.call (Ojs.get_prop_ascii x14824 "rotate") "apply"
                     [|x14824;((let x14818 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x14815 with
                                 | Some x14821 ->
                                     ignore
                                       (Ojs.call x14818 "push"
                                          [|(Ojs.float_to_js x14821)|])
                                 | None -> ());
                                (match x14816 with
                                 | Some x14820 ->
                                     ignore
                                       (Ojs.call x14818 "push"
                                          [|(Ojs.float_to_js x14820)|])
                                 | None -> ());
                                (match x14817 with
                                 | Some x14819 ->
                                     ignore
                                       (Ojs.call x14818 "push"
                                          [|(Ojs.float_to_js x14819)|])
                                 | None -> ());
                                x14818))|])
    let (rotateAxisAngle :
      'tags this ->
        ?x:float ->
          ?y:float -> ?z:float -> ?angle:float -> unit -> DOMMatrix.t)
      =
      fun (x14834 : 'tags this) ->
        fun ?x:(x14825 : float option) ->
          fun ?y:(x14826 : float option) ->
            fun ?z:(x14827 : float option) ->
              fun ?angle:(x14828 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x14836 = this_to_js Obj.magic x14834 in
                     Ojs.call (Ojs.get_prop_ascii x14836 "rotateAxisAngle")
                       "apply"
                       [|x14836;((let x14829 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x14825 with
                                   | Some x14833 ->
                                       ignore
                                         (Ojs.call x14829 "push"
                                            [|(Ojs.float_to_js x14833)|])
                                   | None -> ());
                                  (match x14826 with
                                   | Some x14832 ->
                                       ignore
                                         (Ojs.call x14829 "push"
                                            [|(Ojs.float_to_js x14832)|])
                                   | None -> ());
                                  (match x14827 with
                                   | Some x14831 ->
                                       ignore
                                         (Ojs.call x14829 "push"
                                            [|(Ojs.float_to_js x14831)|])
                                   | None -> ());
                                  (match x14828 with
                                   | Some x14830 ->
                                       ignore
                                         (Ojs.call x14829 "push"
                                            [|(Ojs.float_to_js x14830)|])
                                   | None -> ());
                                  x14829))|])
    let (rotateFromVector :
      'tags this -> ?x:float -> ?y:float -> unit -> DOMMatrix.t) =
      fun (x14842 : 'tags this) ->
        fun ?x:(x14837 : float option) ->
          fun ?y:(x14838 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x14844 = this_to_js Obj.magic x14842 in
                 Ojs.call (Ojs.get_prop_ascii x14844 "rotateFromVector")
                   "apply"
                   [|x14844;((let x14839 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14837 with
                               | Some x14841 ->
                                   ignore
                                     (Ojs.call x14839 "push"
                                        [|(Ojs.float_to_js x14841)|])
                               | None -> ());
                              (match x14838 with
                               | Some x14840 ->
                                   ignore
                                     (Ojs.call x14839 "push"
                                        [|(Ojs.float_to_js x14840)|])
                               | None -> ());
                              x14839))|])
    let (scale :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float ->
                ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x14858 : 'tags this) ->
        fun ?scaleX:(x14845 : float option) ->
          fun ?scaleY:(x14846 : float option) ->
            fun ?scaleZ:(x14847 : float option) ->
              fun ?originX:(x14848 : float option) ->
                fun ?originY:(x14849 : float option) ->
                  fun ?originZ:(x14850 : float option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x14860 = this_to_js Obj.magic x14858 in
                         Ojs.call (Ojs.get_prop_ascii x14860 "scale") "apply"
                           [|x14860;((let x14851 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x14845 with
                                       | Some x14857 ->
                                           ignore
                                             (Ojs.call x14851 "push"
                                                [|(Ojs.float_to_js x14857)|])
                                       | None -> ());
                                      (match x14846 with
                                       | Some x14856 ->
                                           ignore
                                             (Ojs.call x14851 "push"
                                                [|(Ojs.float_to_js x14856)|])
                                       | None -> ());
                                      (match x14847 with
                                       | Some x14855 ->
                                           ignore
                                             (Ojs.call x14851 "push"
                                                [|(Ojs.float_to_js x14855)|])
                                       | None -> ());
                                      (match x14848 with
                                       | Some x14854 ->
                                           ignore
                                             (Ojs.call x14851 "push"
                                                [|(Ojs.float_to_js x14854)|])
                                       | None -> ());
                                      (match x14849 with
                                       | Some x14853 ->
                                           ignore
                                             (Ojs.call x14851 "push"
                                                [|(Ojs.float_to_js x14853)|])
                                       | None -> ());
                                      (match x14850 with
                                       | Some x14852 ->
                                           ignore
                                             (Ojs.call x14851 "push"
                                                [|(Ojs.float_to_js x14852)|])
                                       | None -> ());
                                      x14851))|])
    let (scale3d :
      'tags this ->
        ?scale:float ->
          ?originX:float ->
            ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x14870 : 'tags this) ->
        fun ?scale:(x14861 : float option) ->
          fun ?originX:(x14862 : float option) ->
            fun ?originY:(x14863 : float option) ->
              fun ?originZ:(x14864 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x14872 = this_to_js Obj.magic x14870 in
                     Ojs.call (Ojs.get_prop_ascii x14872 "scale3d") "apply"
                       [|x14872;((let x14865 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x14861 with
                                   | Some x14869 ->
                                       ignore
                                         (Ojs.call x14865 "push"
                                            [|(Ojs.float_to_js x14869)|])
                                   | None -> ());
                                  (match x14862 with
                                   | Some x14868 ->
                                       ignore
                                         (Ojs.call x14865 "push"
                                            [|(Ojs.float_to_js x14868)|])
                                   | None -> ());
                                  (match x14863 with
                                   | Some x14867 ->
                                       ignore
                                         (Ojs.call x14865 "push"
                                            [|(Ojs.float_to_js x14867)|])
                                   | None -> ());
                                  (match x14864 with
                                   | Some x14866 ->
                                       ignore
                                         (Ojs.call x14865 "push"
                                            [|(Ojs.float_to_js x14866)|])
                                   | None -> ());
                                  x14865))|])
    let (scaleNonUniform :
      'tags this -> ?scaleX:float -> ?scaleY:float -> unit -> DOMMatrix.t) =
      fun (x14878 : 'tags this) ->
        fun ?scaleX:(x14873 : float option) ->
          fun ?scaleY:(x14874 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x14880 = this_to_js Obj.magic x14878 in
                 Ojs.call (Ojs.get_prop_ascii x14880 "scaleNonUniform")
                   "apply"
                   [|x14880;((let x14875 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14873 with
                               | Some x14877 ->
                                   ignore
                                     (Ojs.call x14875 "push"
                                        [|(Ojs.float_to_js x14877)|])
                               | None -> ());
                              (match x14874 with
                               | Some x14876 ->
                                   ignore
                                     (Ojs.call x14875 "push"
                                        [|(Ojs.float_to_js x14876)|])
                               | None -> ());
                              x14875))|])
    let (skewX : 'tags this -> ?sx:float -> unit -> DOMMatrix.t) =
      fun (x14884 : 'tags this) ->
        fun ?sx:(x14881 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x14886 = this_to_js Obj.magic x14884 in
               Ojs.call (Ojs.get_prop_ascii x14886 "skewX") "apply"
                 [|x14886;((let x14882 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14881 with
                             | Some x14883 ->
                                 ignore
                                   (Ojs.call x14882 "push"
                                      [|(Ojs.float_to_js x14883)|])
                             | None -> ());
                            x14882))|])
    let (skewY : 'tags this -> ?sy:float -> unit -> DOMMatrix.t) =
      fun (x14890 : 'tags this) ->
        fun ?sy:(x14887 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x14892 = this_to_js Obj.magic x14890 in
               Ojs.call (Ojs.get_prop_ascii x14892 "skewY") "apply"
                 [|x14892;((let x14888 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14887 with
                             | Some x14889 ->
                                 ignore
                                   (Ojs.call x14888 "push"
                                      [|(Ojs.float_to_js x14889)|])
                             | None -> ());
                            x14888))|])
    let (toFloat32Array : 'tags this -> Float32Array.t_0) =
      fun (x14893 : 'tags this) ->
        Float32Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x14893) "toFloat32Array" [||])
    let (toFloat64Array : 'tags this -> Float64Array.t_0) =
      fun (x14895 : 'tags this) ->
        Float64Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x14895) "toFloat64Array" [||])
    let (toJSON : 'tags this -> any) =
      fun (x14897 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14897) "toJSON" [||])
    let (transformPoint :
      'tags this -> ?point:DOMPointInit.t -> unit -> DOMPoint.t) =
      fun (x14902 : 'tags this) ->
        fun ?point:(x14899 : DOMPointInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x14904 = this_to_js Obj.magic x14902 in
               Ojs.call (Ojs.get_prop_ascii x14904 "transformPoint") "apply"
                 [|x14904;((let x14900 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14899 with
                             | Some x14901 ->
                                 ignore
                                   (Ojs.call x14900 "push"
                                      [|(DOMPointInit.t_to_js x14901)|])
                             | None -> ());
                            x14900))|])
    let (translate :
      'tags this ->
        ?tx:float -> ?ty:float -> ?tz:float -> unit -> DOMMatrix.t)
      =
      fun (x14912 : 'tags this) ->
        fun ?tx:(x14905 : float option) ->
          fun ?ty:(x14906 : float option) ->
            fun ?tz:(x14907 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x14914 = this_to_js Obj.magic x14912 in
                   Ojs.call (Ojs.get_prop_ascii x14914 "translate") "apply"
                     [|x14914;((let x14908 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x14905 with
                                 | Some x14911 ->
                                     ignore
                                       (Ojs.call x14908 "push"
                                          [|(Ojs.float_to_js x14911)|])
                                 | None -> ());
                                (match x14906 with
                                 | Some x14910 ->
                                     ignore
                                       (Ojs.call x14908 "push"
                                          [|(Ojs.float_to_js x14910)|])
                                 | None -> ());
                                (match x14907 with
                                 | Some x14909 ->
                                     ignore
                                       (Ojs.call x14908 "push"
                                          [|(Ojs.float_to_js x14909)|])
                                 | None -> ());
                                x14908))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly") "prototype")
    let (create : ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t)
      =
      fun ?init:(x14915 : [ `U1 of string  | `U2 of float list ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
               (let x14916 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x14915 with
                 | Some x14917 ->
                     ignore
                       (Ojs.call x14916 "push"
                          [|((match x14917 with
                              | `U1 x14918 -> Ojs.string_to_js x14918
                              | `U2 x14919 ->
                                  Ojs.list_to_js Ojs.float_to_js x14919))|])
                 | None -> ());
                x14916))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x14921 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x14921)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x14922 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x14922)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x14923 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x14926 = Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x14926 "fromMatrix") "apply"
               [|x14926;((let x14924 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14923 with
                           | Some x14925 ->
                               ignore
                                 (Ojs.call x14924 "push"
                                    [|(DOMMatrixInit.t_to_js x14925)|])
                           | None -> ());
                          x14924))|])
  end
module CustomEventInit =
  struct
    type 'T t = [ `CustomEventInit of 'T  | `EventInit ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x14929 : Ojs.t) -> t_of_js __T_of_js x14929
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x14927 : __T t) -> t_to_js __T_to_js x14927
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x14933 : Ojs.t) -> t_of_js any_of_js x14933
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x14931 : any t) -> t_to_js any_to_js x14931
    type 'T tags = [ `CustomEventInit of 'T  | `EventInit ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x14937 : Ojs.t) -> intf_of_js __tags_of_js x14937
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x14935 : __tags intf) -> intf_to_js __tags_to_js x14935
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x14939 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x14939)
             "detail")
    let (set_detail : ('tags, 'T) this -> 'T -> unit) =
      fun (x14942 : ('tags, 'T) this) ->
        fun (x14943 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x14942) "detail"
            (Obj.magic x14943)
    let (create : detail:'T -> unit -> 'T t) =
      fun ~detail:(x14946 : 'T) ->
        fun () ->
          let x14947 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x14947 "detail" (Obj.magic x14946);
          t_of_js Obj.magic x14947
    let cast_from = Obj.magic
  end
module CustomEvent =
  struct
    type 'T t = [ `CustomEvent of 'T  | `Event ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x14951 : Ojs.t) -> t_of_js __T_of_js x14951
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x14949 : __T t) -> t_to_js __T_to_js x14949
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x14955 : Ojs.t) -> t_of_js any_of_js x14955
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x14953 : any t) -> t_to_js any_to_js x14953
    type 'T tags = [ `CustomEvent of 'T  | `Event ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x14959 : Ojs.t) -> intf_of_js __tags_of_js x14959
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x14957 : __tags intf) -> intf_to_js __tags_to_js x14957
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x14961 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x14961)
             "detail")
    let (initCustomEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:'T -> unit -> unit)
      =
      fun (x14972 : ('tags, 'T) this) ->
        fun ~type_:(x14964 : string) ->
          fun ?bubbles:(x14965 : bool option) ->
            fun ?cancelable:(x14966 : bool option) ->
              fun ?detail:(x14967 : 'T option) ->
                fun () ->
                  ignore
                    (let x14975 = this_to_js Obj.magic Obj.magic x14972 in
                     Ojs.call (Ojs.get_prop_ascii x14975 "initCustomEvent")
                       "apply"
                       [|x14975;((let x14968 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14968 "push"
                                       [|(Ojs.string_to_js x14964)|]);
                                  (match x14965 with
                                   | Some x14971 ->
                                       ignore
                                         (Ojs.call x14968 "push"
                                            [|(Ojs.bool_to_js x14971)|])
                                   | None -> ());
                                  (match x14966 with
                                   | Some x14970 ->
                                       ignore
                                         (Ojs.call x14968 "push"
                                            [|(Ojs.bool_to_js x14970)|])
                                   | None -> ());
                                  (match x14967 with
                                   | Some x14969 ->
                                       ignore
                                         (Ojs.call x14968 "push"
                                            [|(Obj.magic x14969)|])
                                   | None -> ());
                                  x14968))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CustomEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t) =
      fun ~type_:(x14976 : string) ->
        fun ?eventInitDict:(x14977 : 'T CustomEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CustomEvent")
                 (let x14978 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x14978 "push" [|(Ojs.string_to_js x14976)|]);
                  (match x14977 with
                   | Some x14979 ->
                       ignore
                         (Ojs.call x14978 "push"
                            [|(CustomEventInit.t_to_js Obj.magic x14979)|])
                   | None -> ());
                  x14978))
  end
module QueuingStrategyInit =
  struct
    type t = [ `QueuingStrategyInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14983 : Ojs.t) -> t_of_js x14983
    and t_0_to_js : t_0 -> Ojs.t = fun (x14982 : t) -> t_to_js x14982
    type tags = [ `QueuingStrategyInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `QueuingStrategyInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14986 : Ojs.t) -> intf_of_js __tags_of_js x14986
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14984 : __tags intf) -> intf_to_js __tags_to_js x14984
    let (get_highWaterMark : 'tags this -> float) =
      fun (x14988 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14988) "highWaterMark")
    let (set_highWaterMark : 'tags this -> float -> unit) =
      fun (x14990 : 'tags this) ->
        fun (x14991 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14990) "highWaterMark"
            (Ojs.float_to_js x14991)
    let (create : highWaterMark:float -> unit -> t) =
      fun ~highWaterMark:(x14993 : float) ->
        fun () ->
          let x14994 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x14994 "highWaterMark" (Ojs.float_to_js x14993);
          t_of_js x14994
    let cast_from = Obj.magic
  end
module CountQueuingStrategy =
  struct
    type t = [ `CountQueuingStrategy  | `QueuingStrategy of any ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14996 : Ojs.t) -> t_of_js x14996
    and t_0_to_js : t_0 -> Ojs.t = fun (x14995 : t) -> t_to_js x14995
    type tags = [ `CountQueuingStrategy  | `QueuingStrategy of any ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `CountQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14999 : Ojs.t) -> intf_of_js __tags_of_js x14999
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14997 : __tags intf) -> intf_to_js __tags_to_js x14997
    let (get_highWaterMark : 'tags this -> float) =
      fun (x15001 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15001) "highWaterMark")
    let (get_size : 'tags this -> QueuingStrategySize.t_0) =
      fun (x15003 : 'tags this) ->
        QueuingStrategySize.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15003) "size")
    let (create :
      highWaterMark:float -> size:QueuingStrategySize.t_0 -> unit -> t) =
      fun ~highWaterMark:(x15005 : float) ->
        fun ~size:(x15006 : QueuingStrategySize.t_0) ->
          fun () ->
            let x15007 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x15007 "highWaterMark"
              (Ojs.float_to_js x15005);
            Ojs.set_prop_ascii x15007 "size"
              (QueuingStrategySize.t_0_to_js x15006);
            t_of_js x15007
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             "prototype")
    let (create' : QueuingStrategyInit.t -> t) =
      fun (x15008 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x15008)|])
  end
module Console =
  struct
    type t = [ `Console ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15010 : Ojs.t) -> t_of_js x15010
    and t_0_to_js : t_0 -> Ojs.t = fun (x15009 : t) -> t_to_js x15009
    type tags = [ `Console ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Console ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15013 : Ojs.t) -> intf_of_js __tags_of_js x15013
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15011 : __tags intf) -> intf_to_js __tags_to_js x15011
    let (assert_ :
      'tags this -> ?condition:bool -> data:any list -> unit -> unit) =
      fun (x15020 : 'tags this) ->
        fun ?condition:(x15015 : bool option) ->
          fun ~data:(x15016 : any list) ->
            fun () ->
              ignore
                (let x15022 = this_to_js Obj.magic x15020 in
                 Ojs.call (Ojs.get_prop_ascii x15022 "assert") "apply"
                   [|x15022;((let x15017 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15015 with
                               | Some x15019 ->
                                   ignore
                                     (Ojs.call x15017 "push"
                                        [|(Ojs.bool_to_js x15019)|])
                               | None -> ());
                              List.iter
                                (fun (x15018 : any) ->
                                   ignore
                                     (Ojs.call x15017 "push"
                                        [|(any_to_js x15018)|])) x15016;
                              x15017))|])
    let (clear : 'tags this -> unit) =
      fun (x15023 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15023) "clear" [||])
    let (count : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15028 : 'tags this) ->
        fun ?label:(x15025 : string option) ->
          fun () ->
            ignore
              (let x15030 = this_to_js Obj.magic x15028 in
               Ojs.call (Ojs.get_prop_ascii x15030 "count") "apply"
                 [|x15030;((let x15026 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15025 with
                             | Some x15027 ->
                                 ignore
                                   (Ojs.call x15026 "push"
                                      [|(Ojs.string_to_js x15027)|])
                             | None -> ());
                            x15026))|])
    let (countReset : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15034 : 'tags this) ->
        fun ?label:(x15031 : string option) ->
          fun () ->
            ignore
              (let x15036 = this_to_js Obj.magic x15034 in
               Ojs.call (Ojs.get_prop_ascii x15036 "countReset") "apply"
                 [|x15036;((let x15032 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15031 with
                             | Some x15033 ->
                                 ignore
                                   (Ojs.call x15032 "push"
                                      [|(Ojs.string_to_js x15033)|])
                             | None -> ());
                            x15032))|])
    let (debug : 'tags this -> data:any list -> unit) =
      fun (x15040 : 'tags this) ->
        fun ~data:(x15037 : any list) ->
          ignore
            (let x15042 = this_to_js Obj.magic x15040 in
             Ojs.call (Ojs.get_prop_ascii x15042 "debug") "apply"
               [|x15042;((let x15038 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15039 : any) ->
                               ignore
                                 (Ojs.call x15038 "push"
                                    [|(any_to_js x15039)|])) x15037;
                          x15038))|])
    let (dir : 'tags this -> ?item:any -> ?options:any -> unit -> unit) =
      fun (x15048 : 'tags this) ->
        fun ?item:(x15043 : any option) ->
          fun ?options:(x15044 : any option) ->
            fun () ->
              ignore
                (let x15050 = this_to_js Obj.magic x15048 in
                 Ojs.call (Ojs.get_prop_ascii x15050 "dir") "apply"
                   [|x15050;((let x15045 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15043 with
                               | Some x15047 ->
                                   ignore
                                     (Ojs.call x15045 "push"
                                        [|(any_to_js x15047)|])
                               | None -> ());
                              (match x15044 with
                               | Some x15046 ->
                                   ignore
                                     (Ojs.call x15045 "push"
                                        [|(any_to_js x15046)|])
                               | None -> ());
                              x15045))|])
    let (dirxml : 'tags this -> data:any list -> unit) =
      fun (x15054 : 'tags this) ->
        fun ~data:(x15051 : any list) ->
          ignore
            (let x15056 = this_to_js Obj.magic x15054 in
             Ojs.call (Ojs.get_prop_ascii x15056 "dirxml") "apply"
               [|x15056;((let x15052 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15053 : any) ->
                               ignore
                                 (Ojs.call x15052 "push"
                                    [|(any_to_js x15053)|])) x15051;
                          x15052))|])
    let (error : 'tags this -> data:any list -> unit) =
      fun (x15060 : 'tags this) ->
        fun ~data:(x15057 : any list) ->
          ignore
            (let x15062 = this_to_js Obj.magic x15060 in
             Ojs.call (Ojs.get_prop_ascii x15062 "error") "apply"
               [|x15062;((let x15058 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15059 : any) ->
                               ignore
                                 (Ojs.call x15058 "push"
                                    [|(any_to_js x15059)|])) x15057;
                          x15058))|])
    let (group : 'tags this -> data:any list -> unit) =
      fun (x15066 : 'tags this) ->
        fun ~data:(x15063 : any list) ->
          ignore
            (let x15068 = this_to_js Obj.magic x15066 in
             Ojs.call (Ojs.get_prop_ascii x15068 "group") "apply"
               [|x15068;((let x15064 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15065 : any) ->
                               ignore
                                 (Ojs.call x15064 "push"
                                    [|(any_to_js x15065)|])) x15063;
                          x15064))|])
    let (groupCollapsed : 'tags this -> data:any list -> unit) =
      fun (x15072 : 'tags this) ->
        fun ~data:(x15069 : any list) ->
          ignore
            (let x15074 = this_to_js Obj.magic x15072 in
             Ojs.call (Ojs.get_prop_ascii x15074 "groupCollapsed") "apply"
               [|x15074;((let x15070 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15071 : any) ->
                               ignore
                                 (Ojs.call x15070 "push"
                                    [|(any_to_js x15071)|])) x15069;
                          x15070))|])
    let (groupEnd : 'tags this -> unit) =
      fun (x15075 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15075) "groupEnd" [||])
    let (info : 'tags this -> data:any list -> unit) =
      fun (x15080 : 'tags this) ->
        fun ~data:(x15077 : any list) ->
          ignore
            (let x15082 = this_to_js Obj.magic x15080 in
             Ojs.call (Ojs.get_prop_ascii x15082 "info") "apply"
               [|x15082;((let x15078 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15079 : any) ->
                               ignore
                                 (Ojs.call x15078 "push"
                                    [|(any_to_js x15079)|])) x15077;
                          x15078))|])
    let (log : 'tags this -> data:any list -> unit) =
      fun (x15086 : 'tags this) ->
        fun ~data:(x15083 : any list) ->
          ignore
            (let x15088 = this_to_js Obj.magic x15086 in
             Ojs.call (Ojs.get_prop_ascii x15088 "log") "apply"
               [|x15088;((let x15084 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15085 : any) ->
                               ignore
                                 (Ojs.call x15084 "push"
                                    [|(any_to_js x15085)|])) x15083;
                          x15084))|])
    let (table :
      'tags this ->
        ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun (x15095 : 'tags this) ->
        fun ?tabularData:(x15089 : any option) ->
          fun ?properties:(x15090 : string list option) ->
            fun () ->
              ignore
                (let x15097 = this_to_js Obj.magic x15095 in
                 Ojs.call (Ojs.get_prop_ascii x15097 "table") "apply"
                   [|x15097;((let x15091 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15089 with
                               | Some x15094 ->
                                   ignore
                                     (Ojs.call x15091 "push"
                                        [|(any_to_js x15094)|])
                               | None -> ());
                              (match x15090 with
                               | Some x15092 ->
                                   ignore
                                     (Ojs.call x15091 "push"
                                        [|(Ojs.list_to_js Ojs.string_to_js
                                             x15092)|])
                               | None -> ());
                              x15091))|])
    let (time : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15101 : 'tags this) ->
        fun ?label:(x15098 : string option) ->
          fun () ->
            ignore
              (let x15103 = this_to_js Obj.magic x15101 in
               Ojs.call (Ojs.get_prop_ascii x15103 "time") "apply"
                 [|x15103;((let x15099 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15098 with
                             | Some x15100 ->
                                 ignore
                                   (Ojs.call x15099 "push"
                                      [|(Ojs.string_to_js x15100)|])
                             | None -> ());
                            x15099))|])
    let (timeEnd : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15107 : 'tags this) ->
        fun ?label:(x15104 : string option) ->
          fun () ->
            ignore
              (let x15109 = this_to_js Obj.magic x15107 in
               Ojs.call (Ojs.get_prop_ascii x15109 "timeEnd") "apply"
                 [|x15109;((let x15105 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15104 with
                             | Some x15106 ->
                                 ignore
                                   (Ojs.call x15105 "push"
                                      [|(Ojs.string_to_js x15106)|])
                             | None -> ());
                            x15105))|])
    let (timeLog :
      'tags this -> ?label:string -> data:any list -> unit -> unit) =
      fun (x15115 : 'tags this) ->
        fun ?label:(x15110 : string option) ->
          fun ~data:(x15111 : any list) ->
            fun () ->
              ignore
                (let x15117 = this_to_js Obj.magic x15115 in
                 Ojs.call (Ojs.get_prop_ascii x15117 "timeLog") "apply"
                   [|x15117;((let x15112 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15110 with
                               | Some x15114 ->
                                   ignore
                                     (Ojs.call x15112 "push"
                                        [|(Ojs.string_to_js x15114)|])
                               | None -> ());
                              List.iter
                                (fun (x15113 : any) ->
                                   ignore
                                     (Ojs.call x15112 "push"
                                        [|(any_to_js x15113)|])) x15111;
                              x15112))|])
    let (timeStamp : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15121 : 'tags this) ->
        fun ?label:(x15118 : string option) ->
          fun () ->
            ignore
              (let x15123 = this_to_js Obj.magic x15121 in
               Ojs.call (Ojs.get_prop_ascii x15123 "timeStamp") "apply"
                 [|x15123;((let x15119 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15118 with
                             | Some x15120 ->
                                 ignore
                                   (Ojs.call x15119 "push"
                                      [|(Ojs.string_to_js x15120)|])
                             | None -> ());
                            x15119))|])
    let (trace : 'tags this -> data:any list -> unit) =
      fun (x15127 : 'tags this) ->
        fun ~data:(x15124 : any list) ->
          ignore
            (let x15129 = this_to_js Obj.magic x15127 in
             Ojs.call (Ojs.get_prop_ascii x15129 "trace") "apply"
               [|x15129;((let x15125 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15126 : any) ->
                               ignore
                                 (Ojs.call x15125 "push"
                                    [|(any_to_js x15126)|])) x15124;
                          x15125))|])
    let (warn : 'tags this -> data:any list -> unit) =
      fun (x15133 : 'tags this) ->
        fun ~data:(x15130 : any list) ->
          ignore
            (let x15135 = this_to_js Obj.magic x15133 in
             Ojs.call (Ojs.get_prop_ascii x15135 "warn") "apply"
               [|x15135;((let x15131 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15132 : any) ->
                               ignore
                                 (Ojs.call x15131 "push"
                                    [|(any_to_js x15132)|])) x15130;
                          x15131))|])
    let cast_from = Obj.magic
  end
module CanvasPattern =
  struct
    type t = [ `CanvasPattern ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15137 : Ojs.t) -> t_of_js x15137
    and t_0_to_js : t_0 -> Ojs.t = fun (x15136 : t) -> t_to_js x15136
    type tags = [ `CanvasPattern ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPattern ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15140 : Ojs.t) -> intf_of_js __tags_of_js x15140
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15138 : __tags intf) -> intf_to_js __tags_to_js x15138
    let (setTransform :
      'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x15145 : 'tags this) ->
        fun ?transform:(x15142 : DOMMatrix2DInit.t option) ->
          fun () ->
            ignore
              (let x15147 = this_to_js Obj.magic x15145 in
               Ojs.call (Ojs.get_prop_ascii x15147 "setTransform") "apply"
                 [|x15147;((let x15143 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15142 with
                             | Some x15144 ->
                                 ignore
                                   (Ojs.call x15143 "push"
                                      [|(DOMMatrix2DInit.t_to_js x15144)|])
                             | None -> ());
                            x15143))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CanvasPattern")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasPattern") [||])
  end
module CanvasGradient =
  struct
    type t = [ `CanvasGradient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15149 : Ojs.t) -> t_of_js x15149
    and t_0_to_js : t_0 -> Ojs.t = fun (x15148 : t) -> t_to_js x15148
    type tags = [ `CanvasGradient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasGradient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15152 : Ojs.t) -> intf_of_js __tags_of_js x15152
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15150 : __tags intf) -> intf_to_js __tags_to_js x15150
    let (addColorStop : 'tags this -> offset:float -> color:string -> unit) =
      fun (x15156 : 'tags this) ->
        fun ~offset:(x15154 : float) ->
          fun ~color:(x15155 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x15156) "addColorStop"
                 [|(Ojs.float_to_js x15154);(Ojs.string_to_js x15155)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CanvasGradient") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasGradient") [||])
  end
module ByteLengthQueuingStrategy =
  struct
    type t =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15159 : Ojs.t) -> t_of_js x15159
    and t_0_to_js : t_0 -> Ojs.t = fun (x15158 : t) -> t_to_js x15158
    type tags =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ByteLengthQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15162 : Ojs.t) -> intf_of_js __tags_of_js x15162
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15160 : __tags intf) -> intf_to_js __tags_to_js x15160
    let (get_highWaterMark : 'tags this -> float) =
      fun (x15164 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15164) "highWaterMark")
    let (get_size : 'tags this -> ArrayBufferView.t_0 QueuingStrategySize.t)
      =
      fun (x15166 : 'tags this) ->
        QueuingStrategySize.t_of_js ArrayBufferView.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15166) "size")
    let (create :
      highWaterMark:float ->
        size:ArrayBufferView.t_0 QueuingStrategySize.t -> unit -> t)
      =
      fun ~highWaterMark:(x15169 : float) ->
        fun ~size:(x15170 : ArrayBufferView.t_0 QueuingStrategySize.t) ->
          fun () ->
            let x15171 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x15171 "highWaterMark"
              (Ojs.float_to_js x15169);
            Ojs.set_prop_ascii x15171 "size"
              (QueuingStrategySize.t_to_js ArrayBufferView.t_0_to_js x15170);
            t_of_js x15171
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             "prototype")
    let (create' : QueuingStrategyInit.t -> t) =
      fun (x15173 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x15173)|])
  end
module BroadcastChannelEventMap =
  struct
    type t = [ `BroadcastChannelEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15175 : Ojs.t) -> t_of_js x15175
    and t_0_to_js : t_0 -> Ojs.t = fun (x15174 : t) -> t_to_js x15174
    type tags = [ `BroadcastChannelEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `BroadcastChannelEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15178 : Ojs.t) -> intf_of_js __tags_of_js x15178
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15176 : __tags intf) -> intf_to_js __tags_to_js x15176
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x15180 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15180) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x15182 : 'tags this) ->
        fun (x15183 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15182) "message"
            (MessageEvent.t_0_to_js x15183)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x15185 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15185) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x15187 : 'tags this) ->
        fun (x15188 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15187) "messageerror"
            (MessageEvent.t_0_to_js x15188)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x15190 : MessageEvent.t_0) ->
        fun ~messageerror:(x15191 : MessageEvent.t_0) ->
          fun () ->
            let x15192 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x15192 "message"
              (MessageEvent.t_0_to_js x15190);
            Ojs.set_prop_ascii x15192 "messageerror"
              (MessageEvent.t_0_to_js x15191);
            t_of_js x15192
    let cast_from = Obj.magic
  end
module BroadcastChannel =
  struct
    type t = [ `BroadcastChannel  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15194 : Ojs.t) -> t_of_js x15194
    and t_0_to_js : t_0 -> Ojs.t = fun (x15193 : t) -> t_to_js x15193
    type tags = [ `BroadcastChannel  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15197 : Ojs.t) -> intf_of_js __tags_of_js x15197
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15195 : __tags intf) -> intf_to_js __tags_to_js x15195
    let (get_name : 'tags this -> string) =
      fun (x15199 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15199) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x15201 : 'tags this) ->
        Ojs.option_of_js
          (fun (x15203 : Ojs.t) ->
             fun ~this:(x15204 : t) ->
               fun ~ev:(x15205 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x15203
                      [|(t_to_js x15204);(MessageEvent.t_0_to_js x15205)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15201) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x15206 : 'tags this) ->
        fun (x15207 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15206) "onmessage"
            (Ojs.option_to_js
               (fun (x15208 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x15209 : Ojs.t) ->
                       fun (x15210 : Ojs.t) ->
                         any_to_js
                           (x15208 ~this:(t_of_js x15209)
                              ~ev:(MessageEvent.t_0_of_js x15210)))) x15207)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x15212 : 'tags this) ->
        Ojs.option_of_js
          (fun (x15214 : Ojs.t) ->
             fun ~this:(x15215 : t) ->
               fun ~ev:(x15216 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x15214
                      [|(t_to_js x15215);(MessageEvent.t_0_to_js x15216)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15212) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x15217 : 'tags this) ->
        fun (x15218 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15217) "onmessageerror"
            (Ojs.option_to_js
               (fun (x15219 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x15220 : Ojs.t) ->
                       fun (x15221 : Ojs.t) ->
                         any_to_js
                           (x15219 ~this:(t_of_js x15220)
                              ~ev:(MessageEvent.t_0_of_js x15221)))) x15218)
    let (close : 'tags this -> unit) =
      fun (x15223 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15223) "close" [||])
    let (postMessage : 'tags this -> message:any -> unit) =
      fun (x15226 : 'tags this) ->
        fun ~message:(x15225 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x15226) "postMessage"
               [|(any_to_js x15225)|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15237 : 'tags this) ->
        fun ~type_:(x15228 : 'K) ->
          fun ~listener:(x15229 : this:t -> ev:any -> any) ->
            fun
              ?options:(x15230 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15239 = this_to_js Obj.magic x15237 in
                   Ojs.call (Ojs.get_prop_ascii x15239 "addEventListener")
                     "apply"
                     [|x15239;((let x15231 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15231 "push"
                                     [|(Obj.magic x15228)|]);
                                ignore
                                  (Ojs.call x15231 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15235 : Ojs.t) ->
                                             fun (x15236 : Ojs.t) ->
                                               any_to_js
                                                 (x15229
                                                    ~this:(t_of_js x15235)
                                                    ~ev:(any_of_js x15236))))|]);
                                (match x15230 with
                                 | Some x15232 ->
                                     ignore
                                       (Ojs.call x15231 "push"
                                          [|((match x15232 with
                                              | `U1 x15233 ->
                                                  Ojs.bool_to_js x15233
                                              | `U2 x15234 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x15234))|])
                                 | None -> ());
                                x15231))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15247 : 'tags this) ->
        fun ~type_:(x15240 : string) ->
          fun ~listener:(x15241 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15242 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15249 = this_to_js Obj.magic x15247 in
                   Ojs.call (Ojs.get_prop_ascii x15249 "addEventListener")
                     "apply"
                     [|x15249;((let x15243 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15243 "push"
                                     [|(Ojs.string_to_js x15240)|]);
                                ignore
                                  (Ojs.call x15243 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15241)|]);
                                (match x15242 with
                                 | Some x15244 ->
                                     ignore
                                       (Ojs.call x15243 "push"
                                          [|((match x15244 with
                                              | `U1 x15245 ->
                                                  Ojs.bool_to_js x15245
                                              | `U2 x15246 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x15246))|])
                                 | None -> ());
                                x15243))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15259 : 'tags this) ->
        fun ~type_:(x15250 : 'K) ->
          fun ~listener:(x15251 : this:t -> ev:any -> any) ->
            fun
              ?options:(x15252 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15261 = this_to_js Obj.magic x15259 in
                   Ojs.call (Ojs.get_prop_ascii x15261 "removeEventListener")
                     "apply"
                     [|x15261;((let x15253 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15253 "push"
                                     [|(Obj.magic x15250)|]);
                                ignore
                                  (Ojs.call x15253 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15257 : Ojs.t) ->
                                             fun (x15258 : Ojs.t) ->
                                               any_to_js
                                                 (x15251
                                                    ~this:(t_of_js x15257)
                                                    ~ev:(any_of_js x15258))))|]);
                                (match x15252 with
                                 | Some x15254 ->
                                     ignore
                                       (Ojs.call x15253 "push"
                                          [|((match x15254 with
                                              | `U1 x15255 ->
                                                  Ojs.bool_to_js x15255
                                              | `U2 x15256 ->
                                                  EventListenerOptions.t_to_js
                                                    x15256))|])
                                 | None -> ());
                                x15253))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15269 : 'tags this) ->
        fun ~type_:(x15262 : string) ->
          fun ~listener:(x15263 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15264 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15271 = this_to_js Obj.magic x15269 in
                   Ojs.call (Ojs.get_prop_ascii x15271 "removeEventListener")
                     "apply"
                     [|x15271;((let x15265 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15265 "push"
                                     [|(Ojs.string_to_js x15262)|]);
                                ignore
                                  (Ojs.call x15265 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15263)|]);
                                (match x15264 with
                                 | Some x15266 ->
                                     ignore
                                       (Ojs.call x15265 "push"
                                          [|((match x15266 with
                                              | `U1 x15267 ->
                                                  Ojs.bool_to_js x15267
                                              | `U2 x15268 ->
                                                  EventListenerOptions.t_to_js
                                                    x15268))|])
                                 | None -> ());
                                x15265))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "BroadcastChannel") "prototype")
    let (create : string -> t) =
      fun (x15272 : string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BroadcastChannel")
             [|(Ojs.string_to_js x15272)|])
  end
module AbortSignalEventMap =
  struct
    type t = [ `AbortSignalEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15274 : Ojs.t) -> t_of_js x15274
    and t_0_to_js : t_0 -> Ojs.t = fun (x15273 : t) -> t_to_js x15273
    type tags = [ `AbortSignalEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignalEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15277 : Ojs.t) -> intf_of_js __tags_of_js x15277
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15275 : __tags intf) -> intf_to_js __tags_to_js x15275
    let (get_abort : 'tags this -> Event.t) =
      fun (x15279 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15279) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x15281 : 'tags this) ->
        fun (x15282 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15281) "abort"
            (Event.t_to_js x15282)
    let (create : abort:Event.t -> unit -> t) =
      fun ~abort:(x15284 : Event.t) ->
        fun () ->
          let x15285 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x15285 "abort" (Event.t_to_js x15284);
          t_of_js x15285
    let cast_from = Obj.magic
  end
module AbortController =
  struct
    type t = [ `AbortController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15287 : Ojs.t) -> t_of_js x15287
    and t_0_to_js : t_0 -> Ojs.t = fun (x15286 : t) -> t_to_js x15286
    type tags = [ `AbortController ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15290 : Ojs.t) -> intf_of_js __tags_of_js x15290
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15288 : __tags intf) -> intf_to_js __tags_to_js x15288
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x15292 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15292) "signal")
    let (abort : 'tags this -> unit) =
      fun (x15294 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15294) "abort" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "AbortController") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortController") [||])
  end
module CustomEventInit_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T CustomEventInit.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent = fun
      (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x15298 : Ojs.t) -> CustomEventInit.t_of_js __T_of_js x15298
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t = fun (type
      __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x15296 : __T CustomEventInit.t) ->
          CustomEventInit.t_to_js __T_to_js x15296
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15302 : Ojs.t) -> parent_of_js T.t_of_js x15302
    and t_to_js : t -> Ojs.t =
      fun (x15300 : T.t parent) -> parent_to_js T.t_to_js x15300
    let (get_detail : t -> T.t) =
      fun (x15304 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15304) "detail")
    let (set_detail : t -> T.t -> unit) =
      fun (x15305 : t) ->
        fun (x15306 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x15305) "detail" (T.t_to_js x15306)
  end
module MessageEventInit_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T MessageEventInit.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent = fun
      (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x15309 : Ojs.t) -> MessageEventInit.t_of_js __T_of_js x15309
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t = fun (type
      __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x15307 : __T MessageEventInit.t) ->
          MessageEventInit.t_to_js __T_to_js x15307
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15313 : Ojs.t) -> parent_of_js T.t_of_js x15313
    and t_to_js : t -> Ojs.t =
      fun (x15311 : T.t parent) -> parent_to_js T.t_to_js x15311
    let (get_data : t -> T.t) =
      fun (x15315 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15315) "data")
    let (set_data : t -> T.t -> unit) =
      fun (x15316 : t) ->
        fun (x15317 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x15316) "data" (T.t_to_js x15317)
    let (get_lastEventId : t -> string) =
      fun (x15318 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15318) "lastEventId")
    let (set_lastEventId : t -> string -> unit) =
      fun (x15319 : t) ->
        fun (x15320 : string) ->
          Ojs.set_prop_ascii (t_to_js x15319) "lastEventId"
            (Ojs.string_to_js x15320)
    let (get_origin : t -> string) =
      fun (x15321 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15321) "origin")
    let (set_origin : t -> string -> unit) =
      fun (x15322 : t) ->
        fun (x15323 : string) ->
          Ojs.set_prop_ascii (t_to_js x15322) "origin"
            (Ojs.string_to_js x15323)
    let (get_ports : t -> MessagePort.t list) =
      fun (x15324 : t) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15324) "ports")
    let (set_ports : t -> MessagePort.t list -> unit) =
      fun (x15326 : t) ->
        fun (x15327 : MessagePort.t list) ->
          Ojs.set_prop_ascii (t_to_js x15326) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x15327)
    let (get_source : t -> MessageEventSource.t option) =
      fun (x15329 : t) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15329) "source")
    let (set_source : t -> MessageEventSource.t option -> unit) =
      fun (x15331 : t) ->
        fun (x15332 : MessageEventSource.t option) ->
          Ojs.set_prop_ascii (t_to_js x15331) "source"
            (Ojs.option_to_js MessageEventSource.t_to_js x15332)
  end
module QueuingStrategy_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T QueuingStrategy.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent = fun
      (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x15336 : Ojs.t) -> QueuingStrategy.t_of_js __T_of_js x15336
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t = fun (type
      __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x15334 : __T QueuingStrategy.t) ->
          QueuingStrategy.t_to_js __T_to_js x15334
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15340 : Ojs.t) -> parent_of_js T.t_of_js x15340
    and t_to_js : t -> Ojs.t =
      fun (x15338 : T.t parent) -> parent_to_js T.t_to_js x15338
    let (get_highWaterMark : t -> float) =
      fun (x15342 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x15342) "highWaterMark")
    let (set_highWaterMark : t -> float -> unit) =
      fun (x15343 : t) ->
        fun (x15344 : float) ->
          Ojs.set_prop_ascii (t_to_js x15343) "highWaterMark"
            (Ojs.float_to_js x15344)
    let (get_size : t -> T.t QueuingStrategySize.t) =
      fun (x15345 : t) ->
        QueuingStrategySize.t_of_js T.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15345) "size")
    let (set_size : t -> T.t QueuingStrategySize.t -> unit) =
      fun (x15347 : t) ->
        fun (x15348 : T.t QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (t_to_js x15347) "size"
            (QueuingStrategySize.t_to_js T.t_to_js x15348)
  end
module ReadableStreamDefaultReadValueResult_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T ReadableStreamDefaultReadValueResult.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent = fun
      (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x15352 : Ojs.t) ->
          ReadableStreamDefaultReadValueResult.t_of_js __T_of_js x15352
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t = fun (type
      __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x15350 : __T ReadableStreamDefaultReadValueResult.t) ->
          ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x15350
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15356 : Ojs.t) -> parent_of_js T.t_of_js x15356
    and t_to_js : t -> Ojs.t =
      fun (x15354 : T.t parent) -> parent_to_js T.t_to_js x15354
    let (get_done : t -> [ `L_b_false ]) =
      fun (x15358 : t) ->
        let x15359 = Ojs.get_prop_ascii (t_to_js x15358) "done" in
        match Ojs.bool_of_js x15359 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : t -> [ `L_b_false ] -> unit) =
      fun (x15360 : t) ->
        fun (x15361 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (t_to_js x15360) "done"
            (match x15361 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : t -> T.t) =
      fun (x15362 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15362) "value")
    let (set_value : t -> T.t -> unit) =
      fun (x15363 : t) ->
        fun (x15364 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x15363) "value" (T.t_to_js x15364)
  end
module ReadableWritablePair_Make(R:Ojs.T)(W:Ojs.T) =
  struct
    type ('R, 'W) parent = ('R, 'W) ReadableWritablePair.t
    let rec parent_of_js :
      'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) parent =
      fun (type __R) -> fun (type __W) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x15368 : Ojs.t) ->
            ReadableWritablePair.t_of_js __R_of_js __W_of_js x15368
    and parent_to_js :
      'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) parent -> Ojs.t =
      fun (type __R) -> fun (type __W) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x15365 : (__R, __W) ReadableWritablePair.t) ->
            ReadableWritablePair.t_to_js __R_to_js __W_to_js x15365
    type t = (R.t, W.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15374 : Ojs.t) -> parent_of_js R.t_of_js W.t_of_js x15374
    and t_to_js : t -> Ojs.t =
      fun (x15371 : (R.t, W.t) parent) ->
        parent_to_js R.t_to_js W.t_to_js x15371
    let (get_readable : t -> R.t ReadableStream.t) =
      fun (x15377 : t) ->
        ReadableStream.t_of_js R.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15377) "readable")
    let (set_readable : t -> R.t ReadableStream.t -> unit) =
      fun (x15379 : t) ->
        fun (x15380 : R.t ReadableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x15379) "readable"
            (ReadableStream.t_to_js R.t_to_js x15380)
    let (get_writable : t -> W.t WritableStream.t) =
      fun (x15382 : t) ->
        WritableStream.t_of_js W.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15382) "writable")
    let (set_writable : t -> W.t WritableStream.t -> unit) =
      fun (x15384 : t) ->
        fun (x15385 : W.t WritableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x15384) "writable"
            (WritableStream.t_to_js W.t_to_js x15385)
  end
module Transformer_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) Transformer.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15390 : Ojs.t) ->
            Transformer.t_of_js __I_of_js __O_of_js x15390
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15387 : (__I, __O) Transformer.t) ->
            Transformer.t_to_js __I_to_js __O_to_js x15387
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15396 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x15396
    and t_to_js : t -> Ojs.t =
      fun (x15393 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x15393
    let (get_flush : t -> O.t TransformerFlushCallback.t) =
      fun (x15399 : t) ->
        TransformerFlushCallback.t_of_js O.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15399) "flush")
    let (set_flush : t -> O.t TransformerFlushCallback.t -> unit) =
      fun (x15401 : t) ->
        fun (x15402 : O.t TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15401) "flush"
            (TransformerFlushCallback.t_to_js O.t_to_js x15402)
    let (get_readableType : t -> undefined) =
      fun (x15404 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x15404) "readableType")
    let (set_readableType : t -> undefined -> unit) =
      fun (x15405 : t) ->
        fun (x15406 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x15405) "readableType"
            (undefined_to_js x15406)
    let (get_start : t -> O.t TransformerStartCallback.t) =
      fun (x15407 : t) ->
        TransformerStartCallback.t_of_js O.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15407) "start")
    let (set_start : t -> O.t TransformerStartCallback.t -> unit) =
      fun (x15409 : t) ->
        fun (x15410 : O.t TransformerStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15409) "start"
            (TransformerStartCallback.t_to_js O.t_to_js x15410)
    let (get_transform : t -> (I.t, O.t) TransformerTransformCallback.t) =
      fun (x15412 : t) ->
        TransformerTransformCallback.t_of_js I.t_of_js O.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15412) "transform")
    let (set_transform :
      t -> (I.t, O.t) TransformerTransformCallback.t -> unit) =
      fun (x15415 : t) ->
        fun (x15416 : (I.t, O.t) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15415) "transform"
            (TransformerTransformCallback.t_to_js I.t_to_js O.t_to_js x15416)
    let (get_writableType : t -> undefined) =
      fun (x15419 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x15419) "writableType")
    let (set_writableType : t -> undefined -> unit) =
      fun (x15420 : t) ->
        fun (x15421 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x15420) "writableType"
            (undefined_to_js x15421)
  end
module UnderlyingSink_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W UnderlyingSink.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent = fun
      (type __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x15424 : Ojs.t) -> UnderlyingSink.t_of_js __W_of_js x15424
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t = fun (type
      __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x15422 : __W UnderlyingSink.t) ->
          UnderlyingSink.t_to_js __W_to_js x15422
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15428 : Ojs.t) -> parent_of_js W.t_of_js x15428
    and t_to_js : t -> Ojs.t =
      fun (x15426 : W.t parent) -> parent_to_js W.t_to_js x15426
    let (get_abort : t -> UnderlyingSinkAbortCallback.t) =
      fun (x15430 : t) ->
        UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15430) "abort")
    let (set_abort : t -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x15431 : t) ->
        fun (x15432 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15431) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x15432)
    let (get_close : t -> UnderlyingSinkCloseCallback.t) =
      fun (x15433 : t) ->
        UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15433) "close")
    let (set_close : t -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x15434 : t) ->
        fun (x15435 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15434) "close"
            (UnderlyingSinkCloseCallback.t_to_js x15435)
    let (get_start : t -> UnderlyingSinkStartCallback.t) =
      fun (x15436 : t) ->
        UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15436) "start")
    let (set_start : t -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x15437 : t) ->
        fun (x15438 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15437) "start"
            (UnderlyingSinkStartCallback.t_to_js x15438)
    let (get_type : t -> undefined) =
      fun (x15439 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x15439) "type")
    let (set_type : t -> undefined -> unit) =
      fun (x15440 : t) ->
        fun (x15441 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x15440) "type" (undefined_to_js x15441)
    let (get_write : t -> W.t UnderlyingSinkWriteCallback.t) =
      fun (x15442 : t) ->
        UnderlyingSinkWriteCallback.t_of_js W.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15442) "write")
    let (set_write : t -> W.t UnderlyingSinkWriteCallback.t -> unit) =
      fun (x15444 : t) ->
        fun (x15445 : W.t UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15444) "write"
            (UnderlyingSinkWriteCallback.t_to_js W.t_to_js x15445)
  end
module UnderlyingSource_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSource.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent = fun
      (type __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x15449 : Ojs.t) -> UnderlyingSource.t_of_js __R_of_js x15449
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t = fun (type
      __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x15447 : __R UnderlyingSource.t) ->
          UnderlyingSource.t_to_js __R_to_js x15447
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15453 : Ojs.t) -> parent_of_js R.t_of_js x15453
    and t_to_js : t -> Ojs.t =
      fun (x15451 : R.t parent) -> parent_to_js R.t_to_js x15451
    let (get_cancel : t -> UnderlyingSourceCancelCallback.t) =
      fun (x15455 : t) ->
        UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15455) "cancel")
    let (set_cancel : t -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x15456 : t) ->
        fun (x15457 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15456) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x15457)
    let (get_pull : t -> R.t UnderlyingSourcePullCallback.t) =
      fun (x15458 : t) ->
        UnderlyingSourcePullCallback.t_of_js R.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15458) "pull")
    let (set_pull : t -> R.t UnderlyingSourcePullCallback.t -> unit) =
      fun (x15460 : t) ->
        fun (x15461 : R.t UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15460) "pull"
            (UnderlyingSourcePullCallback.t_to_js R.t_to_js x15461)
    let (get_start : t -> R.t UnderlyingSourceStartCallback.t) =
      fun (x15463 : t) ->
        UnderlyingSourceStartCallback.t_of_js R.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15463) "start")
    let (set_start : t -> R.t UnderlyingSourceStartCallback.t -> unit) =
      fun (x15465 : t) ->
        fun (x15466 : R.t UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15465) "start"
            (UnderlyingSourceStartCallback.t_to_js R.t_to_js x15466)
    let (get_type : t -> undefined) =
      fun (x15468 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x15468) "type")
    let (set_type : t -> undefined -> unit) =
      fun (x15469 : t) ->
        fun (x15470 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x15469) "type" (undefined_to_js x15470)
  end
module CustomEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T CustomEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent = fun
      (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x15473 : Ojs.t) -> CustomEvent.t_of_js __T_of_js x15473
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t = fun (type
      __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x15471 : __T CustomEvent.t) ->
          CustomEvent.t_to_js __T_to_js x15471
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15477 : Ojs.t) -> parent_of_js T.t_of_js x15477
    and t_to_js : t -> Ojs.t =
      fun (x15475 : T.t parent) -> parent_to_js T.t_to_js x15475
    let (get_detail : t -> T.t) =
      fun (x15479 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15479) "detail")
    let (initCustomEvent :
      t ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:T.t -> unit -> unit)
      =
      fun (x15488 : t) ->
        fun ~type_:(x15480 : string) ->
          fun ?bubbles:(x15481 : bool option) ->
            fun ?cancelable:(x15482 : bool option) ->
              fun ?detail:(x15483 : T.t option) ->
                fun () ->
                  ignore
                    (let x15489 = t_to_js x15488 in
                     Ojs.call (Ojs.get_prop_ascii x15489 "initCustomEvent")
                       "apply"
                       [|x15489;((let x15484 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x15484 "push"
                                       [|(Ojs.string_to_js x15480)|]);
                                  (match x15481 with
                                   | Some x15487 ->
                                       ignore
                                         (Ojs.call x15484 "push"
                                            [|(Ojs.bool_to_js x15487)|])
                                   | None -> ());
                                  (match x15482 with
                                   | Some x15486 ->
                                       ignore
                                         (Ojs.call x15484 "push"
                                            [|(Ojs.bool_to_js x15486)|])
                                   | None -> ());
                                  (match x15483 with
                                   | Some x15485 ->
                                       ignore
                                         (Ojs.call x15484 "push"
                                            [|(T.t_to_js x15485)|])
                                   | None -> ());
                                  x15484))|])
  end
module IDBRequest_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T IDBRequest.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent = fun
      (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x15492 : Ojs.t) -> IDBRequest.t_of_js __T_of_js x15492
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t = fun (type
      __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x15490 : __T IDBRequest.t) ->
          IDBRequest.t_to_js __T_to_js x15490
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15496 : Ojs.t) -> parent_of_js T.t_of_js x15496
    and t_to_js : t -> Ojs.t =
      fun (x15494 : T.t parent) -> parent_to_js T.t_to_js x15494
    let (get_error : t -> DOMException.t option) =
      fun (x15498 : t) ->
        Ojs.option_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15498) "error")
    let (get_onerror : t -> (this:t -> ev:Event.t -> any) option) =
      fun (x15500 : t) ->
        Ojs.option_of_js
          (fun (x15501 : Ojs.t) ->
             fun ~this:(x15502 : t) ->
               fun ~ev:(x15503 : Event.t) ->
                 any_of_js
                   (Ojs.apply x15501
                      [|(t_to_js x15502);(Event.t_to_js x15503)|]))
          (Ojs.get_prop_ascii (t_to_js x15500) "onerror")
    let (set_onerror : t -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x15504 : t) ->
        fun (x15505 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (t_to_js x15504) "onerror"
            (Ojs.option_to_js
               (fun (x15506 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x15507 : Ojs.t) ->
                       fun (x15508 : Ojs.t) ->
                         any_to_js
                           (x15506 ~this:(t_of_js x15507)
                              ~ev:(Event.t_of_js x15508)))) x15505)
    let (get_onsuccess : t -> (this:t -> ev:Event.t -> any) option) =
      fun (x15509 : t) ->
        Ojs.option_of_js
          (fun (x15510 : Ojs.t) ->
             fun ~this:(x15511 : t) ->
               fun ~ev:(x15512 : Event.t) ->
                 any_of_js
                   (Ojs.apply x15510
                      [|(t_to_js x15511);(Event.t_to_js x15512)|]))
          (Ojs.get_prop_ascii (t_to_js x15509) "onsuccess")
    let (set_onsuccess : t -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x15513 : t) ->
        fun (x15514 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (t_to_js x15513) "onsuccess"
            (Ojs.option_to_js
               (fun (x15515 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x15516 : Ojs.t) ->
                       fun (x15517 : Ojs.t) ->
                         any_to_js
                           (x15515 ~this:(t_of_js x15516)
                              ~ev:(Event.t_of_js x15517)))) x15514)
    let (get_readyState : t -> IDBRequestReadyState.t) =
      fun (x15518 : t) ->
        IDBRequestReadyState.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15518) "readyState")
    let (get_result : t -> T.t) =
      fun (x15519 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15519) "result")
    let (get_source :
      t -> (IDBCursor.t, IDBIndex.t, IDBObjectStore.t) union3) =
      fun (x15520 : t) ->
        union3_of_js IDBCursor.t_of_js IDBIndex.t_of_js
          IDBObjectStore.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15520) "source")
    let (get_transaction : t -> IDBTransaction.t option) =
      fun (x15524 : t) ->
        Ojs.option_of_js IDBTransaction.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15524) "transaction")
    let (addEventListener :
      t ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15535 : t) ->
        fun ~type_:(x15526 : 'K) ->
          fun ~listener:(x15527 : this:t -> ev:any -> any) ->
            fun
              ?options:(x15528 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15536 = t_to_js x15535 in
                   Ojs.call (Ojs.get_prop_ascii x15536 "addEventListener")
                     "apply"
                     [|x15536;((let x15529 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15529 "push"
                                     [|(Obj.magic x15526)|]);
                                ignore
                                  (Ojs.call x15529 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15533 : Ojs.t) ->
                                             fun (x15534 : Ojs.t) ->
                                               any_to_js
                                                 (x15527
                                                    ~this:(t_of_js x15533)
                                                    ~ev:(any_of_js x15534))))|]);
                                (match x15528 with
                                 | Some x15530 ->
                                     ignore
                                       (Ojs.call x15529 "push"
                                          [|((match x15530 with
                                              | `U1 x15531 ->
                                                  Ojs.bool_to_js x15531
                                              | `U2 x15532 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x15532))|])
                                 | None -> ());
                                x15529))|])
    let (addEventListener' :
      t ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15544 : t) ->
        fun ~type_:(x15537 : string) ->
          fun ~listener:(x15538 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15539 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15545 = t_to_js x15544 in
                   Ojs.call (Ojs.get_prop_ascii x15545 "addEventListener")
                     "apply"
                     [|x15545;((let x15540 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15540 "push"
                                     [|(Ojs.string_to_js x15537)|]);
                                ignore
                                  (Ojs.call x15540 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15538)|]);
                                (match x15539 with
                                 | Some x15541 ->
                                     ignore
                                       (Ojs.call x15540 "push"
                                          [|((match x15541 with
                                              | `U1 x15542 ->
                                                  Ojs.bool_to_js x15542
                                              | `U2 x15543 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x15543))|])
                                 | None -> ());
                                x15540))|])
    let (removeEventListener :
      t ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15555 : t) ->
        fun ~type_:(x15546 : 'K) ->
          fun ~listener:(x15547 : this:t -> ev:any -> any) ->
            fun
              ?options:(x15548 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15556 = t_to_js x15555 in
                   Ojs.call (Ojs.get_prop_ascii x15556 "removeEventListener")
                     "apply"
                     [|x15556;((let x15549 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15549 "push"
                                     [|(Obj.magic x15546)|]);
                                ignore
                                  (Ojs.call x15549 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15553 : Ojs.t) ->
                                             fun (x15554 : Ojs.t) ->
                                               any_to_js
                                                 (x15547
                                                    ~this:(t_of_js x15553)
                                                    ~ev:(any_of_js x15554))))|]);
                                (match x15548 with
                                 | Some x15550 ->
                                     ignore
                                       (Ojs.call x15549 "push"
                                          [|((match x15550 with
                                              | `U1 x15551 ->
                                                  Ojs.bool_to_js x15551
                                              | `U2 x15552 ->
                                                  EventListenerOptions.t_to_js
                                                    x15552))|])
                                 | None -> ());
                                x15549))|])
    let (removeEventListener' :
      t ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15564 : t) ->
        fun ~type_:(x15557 : string) ->
          fun ~listener:(x15558 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15559 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15565 = t_to_js x15564 in
                   Ojs.call (Ojs.get_prop_ascii x15565 "removeEventListener")
                     "apply"
                     [|x15565;((let x15560 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15560 "push"
                                     [|(Ojs.string_to_js x15557)|]);
                                ignore
                                  (Ojs.call x15560 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15558)|]);
                                (match x15559 with
                                 | Some x15561 ->
                                     ignore
                                       (Ojs.call x15560 "push"
                                          [|((match x15561 with
                                              | `U1 x15562 ->
                                                  Ojs.bool_to_js x15562
                                              | `U2 x15563 ->
                                                  EventListenerOptions.t_to_js
                                                    x15563))|])
                                 | None -> ());
                                x15560))|])
  end
module MessageEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T MessageEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent = fun
      (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x15568 : Ojs.t) -> MessageEvent.t_of_js __T_of_js x15568
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t = fun (type
      __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x15566 : __T MessageEvent.t) ->
          MessageEvent.t_to_js __T_to_js x15566
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15572 : Ojs.t) -> parent_of_js T.t_of_js x15572
    and t_to_js : t -> Ojs.t =
      fun (x15570 : T.t parent) -> parent_to_js T.t_to_js x15570
    let (initMessageEvent :
      t ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t Iterable.t_1 -> unit -> unit)
      =
      fun (x15592 : t) ->
        fun ~type_:(x15574 : string) ->
          fun ?bubbles:(x15575 : bool option) ->
            fun ?cancelable:(x15576 : bool option) ->
              fun ?data:(x15577 : any option) ->
                fun ?origin:(x15578 : string option) ->
                  fun ?lastEventId:(x15579 : string option) ->
                    fun ?source:(x15580 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x15581 : MessagePort.t Iterable.t_1 option)
                        ->
                        fun () ->
                          ignore
                            (let x15593 = t_to_js x15592 in
                             Ojs.call
                               (Ojs.get_prop_ascii x15593 "initMessageEvent")
                               "apply"
                               [|x15593;((let x15582 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x15582 "push"
                                               [|(Ojs.string_to_js x15574)|]);
                                          (match x15575 with
                                           | Some x15591 ->
                                               ignore
                                                 (Ojs.call x15582 "push"
                                                    [|(Ojs.bool_to_js x15591)|])
                                           | None -> ());
                                          (match x15576 with
                                           | Some x15590 ->
                                               ignore
                                                 (Ojs.call x15582 "push"
                                                    [|(Ojs.bool_to_js x15590)|])
                                           | None -> ());
                                          (match x15577 with
                                           | Some x15589 ->
                                               ignore
                                                 (Ojs.call x15582 "push"
                                                    [|(any_to_js x15589)|])
                                           | None -> ());
                                          (match x15578 with
                                           | Some x15588 ->
                                               ignore
                                                 (Ojs.call x15582 "push"
                                                    [|(Ojs.string_to_js
                                                         x15588)|])
                                           | None -> ());
                                          (match x15579 with
                                           | Some x15587 ->
                                               ignore
                                                 (Ojs.call x15582 "push"
                                                    [|(Ojs.string_to_js
                                                         x15587)|])
                                           | None -> ());
                                          (match x15580 with
                                           | Some x15585 ->
                                               ignore
                                                 (Ojs.call x15582 "push"
                                                    [|(Ojs.option_to_js
                                                         MessageEventSource.t_to_js
                                                         x15585)|])
                                           | None -> ());
                                          (match x15581 with
                                           | Some x15583 ->
                                               ignore
                                                 (Ojs.call x15582 "push"
                                                    [|(Iterable.t_1_to_js
                                                         MessagePort.t_to_js
                                                         x15583)|])
                                           | None -> ());
                                          x15582))|])
    let (get_data : t -> T.t) =
      fun (x15594 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15594) "data")
    let (get_lastEventId : t -> string) =
      fun (x15595 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15595) "lastEventId")
    let (get_origin : t -> string) =
      fun (x15596 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15596) "origin")
    let (get_ports : t -> MessagePort.t list) =
      fun (x15597 : t) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15597) "ports")
    let (get_source : t -> MessageEventSource.t option) =
      fun (x15599 : t) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15599) "source")
    let (initMessageEvent' :
      t ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t list -> unit -> unit)
      =
      fun (x15619 : t) ->
        fun ~type_:(x15601 : string) ->
          fun ?bubbles:(x15602 : bool option) ->
            fun ?cancelable:(x15603 : bool option) ->
              fun ?data:(x15604 : any option) ->
                fun ?origin:(x15605 : string option) ->
                  fun ?lastEventId:(x15606 : string option) ->
                    fun ?source:(x15607 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x15608 : MessagePort.t list option) ->
                        fun () ->
                          ignore
                            (let x15620 = t_to_js x15619 in
                             Ojs.call
                               (Ojs.get_prop_ascii x15620 "initMessageEvent")
                               "apply"
                               [|x15620;((let x15609 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x15609 "push"
                                               [|(Ojs.string_to_js x15601)|]);
                                          (match x15602 with
                                           | Some x15618 ->
                                               ignore
                                                 (Ojs.call x15609 "push"
                                                    [|(Ojs.bool_to_js x15618)|])
                                           | None -> ());
                                          (match x15603 with
                                           | Some x15617 ->
                                               ignore
                                                 (Ojs.call x15609 "push"
                                                    [|(Ojs.bool_to_js x15617)|])
                                           | None -> ());
                                          (match x15604 with
                                           | Some x15616 ->
                                               ignore
                                                 (Ojs.call x15609 "push"
                                                    [|(any_to_js x15616)|])
                                           | None -> ());
                                          (match x15605 with
                                           | Some x15615 ->
                                               ignore
                                                 (Ojs.call x15609 "push"
                                                    [|(Ojs.string_to_js
                                                         x15615)|])
                                           | None -> ());
                                          (match x15606 with
                                           | Some x15614 ->
                                               ignore
                                                 (Ojs.call x15609 "push"
                                                    [|(Ojs.string_to_js
                                                         x15614)|])
                                           | None -> ());
                                          (match x15607 with
                                           | Some x15612 ->
                                               ignore
                                                 (Ojs.call x15609 "push"
                                                    [|(Ojs.option_to_js
                                                         MessageEventSource.t_to_js
                                                         x15612)|])
                                           | None -> ());
                                          (match x15608 with
                                           | Some x15610 ->
                                               ignore
                                                 (Ojs.call x15609 "push"
                                                    [|(Ojs.list_to_js
                                                         MessagePort.t_to_js
                                                         x15610)|])
                                           | None -> ());
                                          x15609))|])
  end
module ProgressEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T ProgressEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent = fun
      (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x15623 : Ojs.t) -> ProgressEvent.t_of_js __T_of_js x15623
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t = fun (type
      __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x15621 : __T ProgressEvent.t) ->
          ProgressEvent.t_to_js __T_to_js x15621
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15627 : Ojs.t) -> parent_of_js T.t_of_js x15627
    and t_to_js : t -> Ojs.t =
      fun (x15625 : T.t parent) -> parent_to_js T.t_to_js x15625
    let (get_lengthComputable : t -> bool) =
      fun (x15629 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x15629) "lengthComputable")
    let (get_loaded : t -> float) =
      fun (x15630 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x15630) "loaded")
    let (get_target : t -> T.t option) =
      fun (x15631 : t) ->
        Ojs.option_of_js T.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15631) "target")
    let (get_total : t -> float) =
      fun (x15633 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x15633) "total")
  end
module ReadableStream_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStream.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent = fun
      (type __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x15636 : Ojs.t) -> ReadableStream.t_of_js __R_of_js x15636
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t = fun (type
      __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x15634 : __R ReadableStream.t) ->
          ReadableStream.t_to_js __R_to_js x15634
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15640 : Ojs.t) -> parent_of_js R.t_of_js x15640
    and t_to_js : t -> Ojs.t =
      fun (x15638 : R.t parent) -> parent_to_js R.t_to_js x15638
    let (get_locked : t -> bool) =
      fun (x15642 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x15642) "locked")
    let (cancel : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x15646 : t) ->
        fun ?reason:(x15643 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x15647 = t_to_js x15646 in
               Ojs.call (Ojs.get_prop_ascii x15647 "cancel") "apply"
                 [|x15647;((let x15644 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15643 with
                             | Some x15645 ->
                                 ignore
                                   (Ojs.call x15644 "push"
                                      [|(any_to_js x15645)|])
                             | None -> ());
                            x15644))|])
    let (getReader : t -> R.t ReadableStreamDefaultReader.t) =
      fun (x15649 : t) ->
        ReadableStreamDefaultReader.t_of_js R.t_of_js
          (Ojs.call (t_to_js x15649) "getReader" [||])
    let (pipeThrough :
      t ->
        transform:('T, R.t) ReadableWritablePair.t ->
          ?options:StreamPipeOptions.t -> unit -> 'T parent)
      =
      fun (x15657 : t) ->
        fun ~transform:(x15651 : ('T, R.t) ReadableWritablePair.t) ->
          fun ?options:(x15652 : StreamPipeOptions.t option) ->
            fun () ->
              parent_of_js Obj.magic
                (let x15658 = t_to_js x15657 in
                 Ojs.call (Ojs.get_prop_ascii x15658 "pipeThrough") "apply"
                   [|x15658;((let x15653 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x15653 "push"
                                   [|(ReadableWritablePair.t_to_js Obj.magic
                                        R.t_to_js x15651)|]);
                              (match x15652 with
                               | Some x15654 ->
                                   ignore
                                     (Ojs.call x15653 "push"
                                        [|(StreamPipeOptions.t_to_js x15654)|])
                               | None -> ());
                              x15653))|])
    let (pipeTo :
      t ->
        destination:R.t WritableStream.t ->
          ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x15665 : t) ->
        fun ~destination:(x15660 : R.t WritableStream.t) ->
          fun ?options:(x15661 : StreamPipeOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x15666 = t_to_js x15665 in
                 Ojs.call (Ojs.get_prop_ascii x15666 "pipeTo") "apply"
                   [|x15666;((let x15662 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x15662 "push"
                                   [|(WritableStream.t_to_js R.t_to_js x15660)|]);
                              (match x15661 with
                               | Some x15663 ->
                                   ignore
                                     (Ojs.call x15662 "push"
                                        [|(StreamPipeOptions.t_to_js x15663)|])
                               | None -> ());
                              x15662))|])
    let (tee : t -> (t * t)) =
      fun (x15668 : t) ->
        let x15669 = Ojs.call (t_to_js x15668) "tee" [||] in
        ((t_of_js (Ojs.array_get x15669 0)),
          (t_of_js (Ojs.array_get x15669 1)))
  end
module ReadableStreamDefaultController_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStreamDefaultController.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent = fun
      (type __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x15672 : Ojs.t) ->
          ReadableStreamDefaultController.t_of_js __R_of_js x15672
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t = fun (type
      __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x15670 : __R ReadableStreamDefaultController.t) ->
          ReadableStreamDefaultController.t_to_js __R_to_js x15670
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15676 : Ojs.t) -> parent_of_js R.t_of_js x15676
    and t_to_js : t -> Ojs.t =
      fun (x15674 : R.t parent) -> parent_to_js R.t_to_js x15674
    let (get_desiredSize : t -> float option) =
      fun (x15678 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x15678) "desiredSize")
    let (close : t -> unit) =
      fun (x15680 : t) -> ignore (Ojs.call (t_to_js x15680) "close" [||])
    let (enqueue : t -> ?chunk:R.t -> unit -> unit) =
      fun (x15684 : t) ->
        fun ?chunk:(x15681 : R.t option) ->
          fun () ->
            ignore
              (let x15685 = t_to_js x15684 in
               Ojs.call (Ojs.get_prop_ascii x15685 "enqueue") "apply"
                 [|x15685;((let x15682 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15681 with
                             | Some x15683 ->
                                 ignore
                                   (Ojs.call x15682 "push"
                                      [|(R.t_to_js x15683)|])
                             | None -> ());
                            x15682))|])
    let (error : t -> ?e:any -> unit -> unit) =
      fun (x15689 : t) ->
        fun ?e:(x15686 : any option) ->
          fun () ->
            ignore
              (let x15690 = t_to_js x15689 in
               Ojs.call (Ojs.get_prop_ascii x15690 "error") "apply"
                 [|x15690;((let x15687 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15686 with
                             | Some x15688 ->
                                 ignore
                                   (Ojs.call x15687 "push"
                                      [|(any_to_js x15688)|])
                             | None -> ());
                            x15687))|])
  end
module ReadableStreamDefaultReader_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStreamDefaultReader.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent = fun
      (type __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x15693 : Ojs.t) ->
          ReadableStreamDefaultReader.t_of_js __R_of_js x15693
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t = fun (type
      __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x15691 : __R ReadableStreamDefaultReader.t) ->
          ReadableStreamDefaultReader.t_to_js __R_to_js x15691
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15697 : Ojs.t) -> parent_of_js R.t_of_js x15697
    and t_to_js : t -> Ojs.t =
      fun (x15695 : R.t parent) -> parent_to_js R.t_to_js x15695
    let (read : t -> R.t ReadableStreamDefaultReadResult.t Promise.t_1) =
      fun (x15699 : t) ->
        Promise.t_1_of_js
          (fun (x15700 : Ojs.t) ->
             ReadableStreamDefaultReadResult.t_of_js R.t_of_js x15700)
          (Ojs.call (t_to_js x15699) "read" [||])
    let (releaseLock : t -> unit) =
      fun (x15702 : t) ->
        ignore (Ojs.call (t_to_js x15702) "releaseLock" [||])
  end
module TransformStream_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) TransformStream.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15706 : Ojs.t) ->
            TransformStream.t_of_js __I_of_js __O_of_js x15706
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15703 : (__I, __O) TransformStream.t) ->
            TransformStream.t_to_js __I_to_js __O_to_js x15703
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15712 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x15712
    and t_to_js : t -> Ojs.t =
      fun (x15709 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x15709
    let (get_readable : t -> O.t ReadableStream.t) =
      fun (x15715 : t) ->
        ReadableStream.t_of_js O.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15715) "readable")
    let (get_writable : t -> I.t WritableStream.t) =
      fun (x15717 : t) ->
        WritableStream.t_of_js I.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15717) "writable")
  end
module TransformStreamDefaultController_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformStreamDefaultController.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent = fun
      (type __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x15721 : Ojs.t) ->
          TransformStreamDefaultController.t_of_js __O_of_js x15721
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t = fun (type
      __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x15719 : __O TransformStreamDefaultController.t) ->
          TransformStreamDefaultController.t_to_js __O_to_js x15719
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15725 : Ojs.t) -> parent_of_js O.t_of_js x15725
    and t_to_js : t -> Ojs.t =
      fun (x15723 : O.t parent) -> parent_to_js O.t_to_js x15723
    let (get_desiredSize : t -> float option) =
      fun (x15727 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x15727) "desiredSize")
    let (enqueue : t -> ?chunk:O.t -> unit -> unit) =
      fun (x15732 : t) ->
        fun ?chunk:(x15729 : O.t option) ->
          fun () ->
            ignore
              (let x15733 = t_to_js x15732 in
               Ojs.call (Ojs.get_prop_ascii x15733 "enqueue") "apply"
                 [|x15733;((let x15730 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15729 with
                             | Some x15731 ->
                                 ignore
                                   (Ojs.call x15730 "push"
                                      [|(O.t_to_js x15731)|])
                             | None -> ());
                            x15730))|])
    let (error : t -> ?reason:any -> unit -> unit) =
      fun (x15737 : t) ->
        fun ?reason:(x15734 : any option) ->
          fun () ->
            ignore
              (let x15738 = t_to_js x15737 in
               Ojs.call (Ojs.get_prop_ascii x15738 "error") "apply"
                 [|x15738;((let x15735 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15734 with
                             | Some x15736 ->
                                 ignore
                                   (Ojs.call x15735 "push"
                                      [|(any_to_js x15736)|])
                             | None -> ());
                            x15735))|])
    let (terminate : t -> unit) =
      fun (x15739 : t) -> ignore (Ojs.call (t_to_js x15739) "terminate" [||])
  end
module WritableStream_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W WritableStream.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent = fun
      (type __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x15742 : Ojs.t) -> WritableStream.t_of_js __W_of_js x15742
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t = fun (type
      __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x15740 : __W WritableStream.t) ->
          WritableStream.t_to_js __W_to_js x15740
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15746 : Ojs.t) -> parent_of_js W.t_of_js x15746
    and t_to_js : t -> Ojs.t =
      fun (x15744 : W.t parent) -> parent_to_js W.t_to_js x15744
    let (get_locked : t -> bool) =
      fun (x15748 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x15748) "locked")
    let (abort : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x15752 : t) ->
        fun ?reason:(x15749 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x15753 = t_to_js x15752 in
               Ojs.call (Ojs.get_prop_ascii x15753 "abort") "apply"
                 [|x15753;((let x15750 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15749 with
                             | Some x15751 ->
                                 ignore
                                   (Ojs.call x15750 "push"
                                      [|(any_to_js x15751)|])
                             | None -> ());
                            x15750))|])
    let (close : t -> unit Promise.t_1) =
      fun (x15755 : t) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (t_to_js x15755) "close" [||])
    let (getWriter : t -> W.t WritableStreamDefaultWriter.t) =
      fun (x15757 : t) ->
        WritableStreamDefaultWriter.t_of_js W.t_of_js
          (Ojs.call (t_to_js x15757) "getWriter" [||])
  end
module WritableStreamDefaultWriter_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W WritableStreamDefaultWriter.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent = fun
      (type __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x15761 : Ojs.t) ->
          WritableStreamDefaultWriter.t_of_js __W_of_js x15761
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t = fun (type
      __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x15759 : __W WritableStreamDefaultWriter.t) ->
          WritableStreamDefaultWriter.t_to_js __W_to_js x15759
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15765 : Ojs.t) -> parent_of_js W.t_of_js x15765
    and t_to_js : t -> Ojs.t =
      fun (x15763 : W.t parent) -> parent_to_js W.t_to_js x15763
    let (get_closed : t -> undefined Promise.t_1) =
      fun (x15767 : t) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (t_to_js x15767) "closed")
    let (get_desiredSize : t -> float option) =
      fun (x15769 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x15769) "desiredSize")
    let (get_ready : t -> undefined Promise.t_1) =
      fun (x15771 : t) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (t_to_js x15771) "ready")
    let (abort : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x15776 : t) ->
        fun ?reason:(x15773 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x15777 = t_to_js x15776 in
               Ojs.call (Ojs.get_prop_ascii x15777 "abort") "apply"
                 [|x15777;((let x15774 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15773 with
                             | Some x15775 ->
                                 ignore
                                   (Ojs.call x15774 "push"
                                      [|(any_to_js x15775)|])
                             | None -> ());
                            x15774))|])
    let (close : t -> unit Promise.t_1) =
      fun (x15779 : t) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (t_to_js x15779) "close" [||])
    let (releaseLock : t -> unit) =
      fun (x15781 : t) ->
        ignore (Ojs.call (t_to_js x15781) "releaseLock" [||])
    let (write : t -> ?chunk:W.t -> unit -> unit Promise.t_1) =
      fun (x15785 : t) ->
        fun ?chunk:(x15782 : W.t option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x15786 = t_to_js x15785 in
               Ojs.call (Ojs.get_prop_ascii x15786 "write") "apply"
                 [|x15786;((let x15783 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15782 with
                             | Some x15784 ->
                                 ignore
                                   (Ojs.call x15783 "push"
                                      [|(W.t_to_js x15784)|])
                             | None -> ());
                            x15783))|])
  end
module QueuingStrategySize_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T QueuingStrategySize.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent = fun
      (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x15790 : Ojs.t) -> QueuingStrategySize.t_of_js __T_of_js x15790
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t = fun (type
      __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x15788 : __T QueuingStrategySize.t) ->
          QueuingStrategySize.t_to_js __T_to_js x15788
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15794 : Ojs.t) -> parent_of_js T.t_of_js x15794
    and t_to_js : t -> Ojs.t =
      fun (x15792 : T.t parent) -> parent_to_js T.t_to_js x15792
    let (apply : t -> chunk:T.t -> float) =
      fun (x15797 : t) ->
        fun ~chunk:(x15796 : T.t) ->
          Ojs.float_of_js (Ojs.apply (t_to_js x15797) [|(T.t_to_js x15796)|])
  end
module TransformerFlushCallback_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformerFlushCallback.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent = fun
      (type __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x15800 : Ojs.t) ->
          TransformerFlushCallback.t_of_js __O_of_js x15800
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t = fun (type
      __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x15798 : __O TransformerFlushCallback.t) ->
          TransformerFlushCallback.t_to_js __O_to_js x15798
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15804 : Ojs.t) -> parent_of_js O.t_of_js x15804
    and t_to_js : t -> Ojs.t =
      fun (x15802 : O.t parent) -> parent_to_js O.t_to_js x15802
    let (apply :
      t ->
        controller:O.t TransformStreamDefaultController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x15808 : t) ->
        fun ~controller:(x15806 : O.t TransformStreamDefaultController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x15810 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x15810)
            (Ojs.apply (t_to_js x15808)
               [|(TransformStreamDefaultController.t_to_js O.t_to_js x15806)|])
  end
module TransformerStartCallback_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformerStartCallback.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent = fun
      (type __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x15814 : Ojs.t) ->
          TransformerStartCallback.t_of_js __O_of_js x15814
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t = fun (type
      __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x15812 : __O TransformerStartCallback.t) ->
          TransformerStartCallback.t_to_js __O_to_js x15812
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15818 : Ojs.t) -> parent_of_js O.t_of_js x15818
    and t_to_js : t -> Ojs.t =
      fun (x15816 : O.t parent) -> parent_to_js O.t_to_js x15816
    let (apply :
      t -> controller:O.t TransformStreamDefaultController.t -> any) =
      fun (x15822 : t) ->
        fun ~controller:(x15820 : O.t TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (t_to_js x15822)
               [|(TransformStreamDefaultController.t_to_js O.t_to_js x15820)|])
  end
module TransformerTransformCallback_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) TransformerTransformCallback.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15826 : Ojs.t) ->
            TransformerTransformCallback.t_of_js __I_of_js __O_of_js x15826
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15823 : (__I, __O) TransformerTransformCallback.t) ->
            TransformerTransformCallback.t_to_js __I_to_js __O_to_js x15823
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15832 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x15832
    and t_to_js : t -> Ojs.t =
      fun (x15829 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x15829
    let (apply :
      t ->
        chunk:I.t ->
          controller:O.t TransformStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x15838 : t) ->
        fun ~chunk:(x15835 : I.t) ->
          fun ~controller:(x15836 : O.t TransformStreamDefaultController.t)
            ->
            union2_of_js Ojs.unit_of_js
              (fun (x15840 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x15840)
              (Ojs.apply (t_to_js x15838)
                 [|(I.t_to_js x15835);(TransformStreamDefaultController.t_to_js
                                         O.t_to_js x15836)|])
  end
module UnderlyingSinkWriteCallback_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W UnderlyingSinkWriteCallback.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent = fun
      (type __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x15844 : Ojs.t) ->
          UnderlyingSinkWriteCallback.t_of_js __W_of_js x15844
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t = fun (type
      __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x15842 : __W UnderlyingSinkWriteCallback.t) ->
          UnderlyingSinkWriteCallback.t_to_js __W_to_js x15842
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15848 : Ojs.t) -> parent_of_js W.t_of_js x15848
    and t_to_js : t -> Ojs.t =
      fun (x15846 : W.t parent) -> parent_to_js W.t_to_js x15846
    let (apply :
      t ->
        chunk:W.t ->
          controller:WritableStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x15852 : t) ->
        fun ~chunk:(x15850 : W.t) ->
          fun ~controller:(x15851 : WritableStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x15854 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x15854)
              (Ojs.apply (t_to_js x15852)
                 [|(W.t_to_js x15850);(WritableStreamDefaultController.t_to_js
                                         x15851)|])
  end
module UnderlyingSourcePullCallback_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSourcePullCallback.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent = fun
      (type __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x15858 : Ojs.t) ->
          UnderlyingSourcePullCallback.t_of_js __R_of_js x15858
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t = fun (type
      __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x15856 : __R UnderlyingSourcePullCallback.t) ->
          UnderlyingSourcePullCallback.t_to_js __R_to_js x15856
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15862 : Ojs.t) -> parent_of_js R.t_of_js x15862
    and t_to_js : t -> Ojs.t =
      fun (x15860 : R.t parent) -> parent_to_js R.t_to_js x15860
    let (apply :
      t ->
        controller:R.t ReadableStreamController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x15866 : t) ->
        fun ~controller:(x15864 : R.t ReadableStreamController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x15868 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x15868)
            (Ojs.apply (t_to_js x15866)
               [|(ReadableStreamController.t_to_js R.t_to_js x15864)|])
  end
module UnderlyingSourceStartCallback_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSourceStartCallback.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent = fun
      (type __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x15872 : Ojs.t) ->
          UnderlyingSourceStartCallback.t_of_js __R_of_js x15872
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t = fun (type
      __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x15870 : __R UnderlyingSourceStartCallback.t) ->
          UnderlyingSourceStartCallback.t_to_js __R_to_js x15870
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15876 : Ojs.t) -> parent_of_js R.t_of_js x15876
    and t_to_js : t -> Ojs.t =
      fun (x15874 : R.t parent) -> parent_to_js R.t_to_js x15874
    let (apply : t -> controller:R.t ReadableStreamController.t -> any) =
      fun (x15880 : t) ->
        fun ~controller:(x15878 : R.t ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (t_to_js x15880)
               [|(ReadableStreamController.t_to_js R.t_to_js x15878)|])
  end
let (importScripts : string list -> unit) =
  fun (x15881 : string list) ->
    ignore
      (let x15884 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x15884 "importScripts") "apply"
         [|x15884;((let x15882 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x15883 : string) ->
                         ignore
                           (Ojs.call x15882 "push"
                              [|(Ojs.string_to_js x15883)|])) x15881;
                    x15882))|])
let (console : unit -> Console.t) =
  fun () -> Console.t_of_js (Ojs.get_prop_ascii Ojs.global "console")
let (name : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "name")
let (onmessage :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x15885 : Ojs.t) ->
         fun ~this:(x15886 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15887 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x15885
                  [|(DedicatedWorkerGlobalScope.t_to_js x15886);(MessageEvent.t_0_to_js
                                                                   x15887)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessage")
let (onmessageerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x15888 : Ojs.t) ->
         fun ~this:(x15889 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15890 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x15888
                  [|(DedicatedWorkerGlobalScope.t_to_js x15889);(MessageEvent.t_0_to_js
                                                                   x15890)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessageerror")
let (close : unit -> unit) =
  fun () -> ignore (Ojs.call Ojs.global "close" [||])
let (postMessage : message:any -> transfer:Transferable.t list -> unit) =
  fun ~message:(x15891 : any) ->
    fun ~transfer:(x15892 : Transferable.t list) ->
      ignore
        (Ojs.call Ojs.global "postMessage"
           [|(any_to_js x15891);(Ojs.list_to_js Transferable.t_to_js x15892)|])
let (postMessage' :
  message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit) =
  fun ~message:(x15894 : any) ->
    fun ?options:(x15895 : StructuredSerializeOptions.t option) ->
      fun () ->
        ignore
          (let x15898 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x15898 "postMessage") "apply"
             [|x15898;((let x15896 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x15896 "push" [|(any_to_js x15894)|]);
                        (match x15895 with
                         | Some x15897 ->
                             ignore
                               (Ojs.call x15896 "push"
                                  [|(StructuredSerializeOptions.t_to_js
                                       x15897)|])
                         | None -> ());
                        x15896))|])
let (dispatchEvent : Event.t -> bool) =
  fun (x15899 : Event.t) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "dispatchEvent" [|(Event.t_to_js x15899)|])
let (location : unit -> WorkerLocation.t) =
  fun () -> WorkerLocation.t_of_js (Ojs.get_prop_ascii Ojs.global "location")
let (navigator : unit -> WorkerNavigator.t) =
  fun () ->
    WorkerNavigator.t_of_js (Ojs.get_prop_ascii Ojs.global "navigator")
let (onerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:ErrorEvent.t -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x15900 : Ojs.t) ->
         fun ~this:(x15901 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15902 : ErrorEvent.t) ->
             any_of_js
               (Ojs.apply x15900
                  [|(DedicatedWorkerGlobalScope.t_to_js x15901);(ErrorEvent.t_to_js
                                                                   x15902)|]))
      (Ojs.get_prop_ascii Ojs.global "onerror")
let (onlanguagechange :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x15903 : Ojs.t) ->
         fun ~this:(x15904 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15905 : Event.t) ->
             any_of_js
               (Ojs.apply x15903
                  [|(DedicatedWorkerGlobalScope.t_to_js x15904);(Event.t_to_js
                                                                   x15905)|]))
      (Ojs.get_prop_ascii Ojs.global "onlanguagechange")
let (onoffline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x15906 : Ojs.t) ->
         fun ~this:(x15907 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15908 : Event.t) ->
             any_of_js
               (Ojs.apply x15906
                  [|(DedicatedWorkerGlobalScope.t_to_js x15907);(Event.t_to_js
                                                                   x15908)|]))
      (Ojs.get_prop_ascii Ojs.global "onoffline")
let (ononline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x15909 : Ojs.t) ->
         fun ~this:(x15910 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15911 : Event.t) ->
             any_of_js
               (Ojs.apply x15909
                  [|(DedicatedWorkerGlobalScope.t_to_js x15910);(Event.t_to_js
                                                                   x15911)|]))
      (Ojs.get_prop_ascii Ojs.global "ononline")
let (onrejectionhandled :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x15912 : Ojs.t) ->
         fun ~this:(x15913 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15914 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x15912
                  [|(DedicatedWorkerGlobalScope.t_to_js x15913);(PromiseRejectionEvent.t_to_js
                                                                   x15914)|]))
      (Ojs.get_prop_ascii Ojs.global "onrejectionhandled")
let (onunhandledrejection :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x15915 : Ojs.t) ->
         fun ~this:(x15916 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15917 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x15915
                  [|(DedicatedWorkerGlobalScope.t_to_js x15916);(PromiseRejectionEvent.t_to_js
                                                                   x15917)|]))
      (Ojs.get_prop_ascii Ojs.global "onunhandledrejection")
let (self : unit -> (WorkerGlobalScope.t, any) intersection2) =
  fun () ->
    intersection2_of_js WorkerGlobalScope.t_of_js any_of_js
      (Ojs.get_prop_ascii Ojs.global "self")
let (importScripts' :
  [ `String of string  | `Other of URL.t ] Primitive.t list -> unit) =
  fun (x15920 : [ `String of string  | `Other of URL.t ] Primitive.t list) ->
    ignore
      (let x15926 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x15926 "importScripts") "apply"
         [|x15926;((let x15921 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun
                         (x15922 :
                           [ `String of string  | `Other of URL.t ]
                             Primitive.t)
                         ->
                         ignore
                           (Ojs.call x15921 "push"
                              [|(Primitive.t_to_js
                                   (fun
                                      (x15923 :
                                        [ `String of string 
                                        | `Other of URL.t ])
                                      ->
                                      match x15923 with
                                      | `String x15924 ->
                                          Ojs.string_to_js x15924
                                      | `Other x15925 -> URL.t_to_js x15925)
                                   x15922)|])) x15920;
                    x15921))|])
let (fonts : unit -> FontFaceSet.t) =
  fun () -> FontFaceSet.t_of_js (Ojs.get_prop_ascii Ojs.global "fonts")
let (caches : unit -> CacheStorage.t) =
  fun () -> CacheStorage.t_of_js (Ojs.get_prop_ascii Ojs.global "caches")
let (crossOriginIsolated : unit -> bool) =
  fun () ->
    Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "crossOriginIsolated")
let (crypto : unit -> Crypto.t) =
  fun () -> Crypto.t_of_js (Ojs.get_prop_ascii Ojs.global "crypto")
let (indexedDB : unit -> IDBFactory.t) =
  fun () -> IDBFactory.t_of_js (Ojs.get_prop_ascii Ojs.global "indexedDB")
let (isSecureContext : unit -> bool) =
  fun () -> Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "isSecureContext")
let (origin : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "origin")
let (performance : unit -> Performance.t) =
  fun () -> Performance.t_of_js (Ojs.get_prop_ascii Ojs.global "performance")
let (atob : string -> string) =
  fun (x15927 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "atob" [|(Ojs.string_to_js x15927)|])
let (btoa : string -> string) =
  fun (x15928 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "btoa" [|(Ojs.string_to_js x15928)|])
let (clearInterval : ?handle:float -> unit -> unit) =
  fun ?handle:(x15929 : float option) ->
    fun () ->
      ignore
        (let x15932 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x15932 "clearInterval") "apply"
           [|x15932;((let x15930 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15929 with
                       | Some x15931 ->
                           ignore
                             (Ojs.call x15930 "push"
                                [|(Ojs.float_to_js x15931)|])
                       | None -> ());
                      x15930))|])
let (clearTimeout : ?handle:float -> unit -> unit) =
  fun ?handle:(x15933 : float option) ->
    fun () ->
      ignore
        (let x15936 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x15936 "clearTimeout") "apply"
           [|x15936;((let x15934 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15933 with
                       | Some x15935 ->
                           ignore
                             (Ojs.call x15934 "push"
                                [|(Ojs.float_to_js x15935)|])
                       | None -> ());
                      x15934))|])
let (createImageBitmap :
  image:ImageBitmapSource.t ->
    ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x15937 : ImageBitmapSource.t) ->
    fun ?options:(x15938 : ImageBitmapOptions.t option) ->
      fun () ->
        Promise.t_1_of_js ImageBitmap.t_of_js
          (let x15941 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x15941 "createImageBitmap") "apply"
             [|x15941;((let x15939 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x15939 "push"
                             [|(ImageBitmapSource.t_to_js x15937)|]);
                        (match x15938 with
                         | Some x15940 ->
                             ignore
                               (Ojs.call x15939 "push"
                                  [|(ImageBitmapOptions.t_to_js x15940)|])
                         | None -> ());
                        x15939))|])
let (createImageBitmap' :
  image:ImageBitmapSource.t ->
    sx:float ->
      sy:float ->
        sw:float ->
          sh:float ->
            ?options:ImageBitmapOptions.t ->
              unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x15943 : ImageBitmapSource.t) ->
    fun ~sx:(x15944 : float) ->
      fun ~sy:(x15945 : float) ->
        fun ~sw:(x15946 : float) ->
          fun ~sh:(x15947 : float) ->
            fun ?options:(x15948 : ImageBitmapOptions.t option) ->
              fun () ->
                Promise.t_1_of_js ImageBitmap.t_of_js
                  (let x15951 = Ojs.global in
                   Ojs.call (Ojs.get_prop_ascii x15951 "createImageBitmap")
                     "apply"
                     [|x15951;((let x15949 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15949 "push"
                                     [|(ImageBitmapSource.t_to_js x15943)|]);
                                ignore
                                  (Ojs.call x15949 "push"
                                     [|(Ojs.float_to_js x15944)|]);
                                ignore
                                  (Ojs.call x15949 "push"
                                     [|(Ojs.float_to_js x15945)|]);
                                ignore
                                  (Ojs.call x15949 "push"
                                     [|(Ojs.float_to_js x15946)|]);
                                ignore
                                  (Ojs.call x15949 "push"
                                     [|(Ojs.float_to_js x15947)|]);
                                (match x15948 with
                                 | Some x15950 ->
                                     ignore
                                       (Ojs.call x15949 "push"
                                          [|(ImageBitmapOptions.t_to_js
                                               x15950)|])
                                 | None -> ());
                                x15949))|])
let (fetch :
  input:RequestInfo.t ->
    ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
  =
  fun ~input:(x15953 : RequestInfo.t) ->
    fun ?init:(x15954 : RequestInit.t option) ->
      fun () ->
        Promise.t_1_of_js Response.t_of_js
          (let x15957 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x15957 "fetch") "apply"
             [|x15957;((let x15955 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x15955 "push"
                             [|(RequestInfo.t_to_js x15953)|]);
                        (match x15954 with
                         | Some x15956 ->
                             ignore
                               (Ojs.call x15955 "push"
                                  [|(RequestInit.t_to_js x15956)|])
                         | None -> ());
                        x15955))|])
let (queueMicrotask : VoidFunction.t -> unit) =
  fun (x15959 : VoidFunction.t) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask" [|(VoidFunction.t_to_js x15959)|])
let (setInterval :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x15960 : TimerHandler.t) ->
    fun ?timeout:(x15961 : float option) ->
      fun ~arguments:(x15962 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x15966 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x15966 "setInterval") "apply"
               [|x15966;((let x15963 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15963 "push"
                               [|(TimerHandler.t_to_js x15960)|]);
                          (match x15961 with
                           | Some x15965 ->
                               ignore
                                 (Ojs.call x15963 "push"
                                    [|(Ojs.float_to_js x15965)|])
                           | None -> ());
                          List.iter
                            (fun (x15964 : any) ->
                               ignore
                                 (Ojs.call x15963 "push"
                                    [|(any_to_js x15964)|])) x15962;
                          x15963))|])
let (setTimeout :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x15967 : TimerHandler.t) ->
    fun ?timeout:(x15968 : float option) ->
      fun ~arguments:(x15969 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x15973 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x15973 "setTimeout") "apply"
               [|x15973;((let x15970 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15970 "push"
                               [|(TimerHandler.t_to_js x15967)|]);
                          (match x15968 with
                           | Some x15972 ->
                               ignore
                                 (Ojs.call x15970 "push"
                                    [|(Ojs.float_to_js x15972)|])
                           | None -> ());
                          List.iter
                            (fun (x15971 : any) ->
                               ignore
                                 (Ojs.call x15970 "push"
                                    [|(any_to_js x15971)|])) x15969;
                          x15970))|])
let (cancelAnimationFrame : float -> unit) =
  fun (x15974 : float) ->
    ignore
      (Ojs.call Ojs.global "cancelAnimationFrame"
         [|(Ojs.float_to_js x15974)|])
let (requestAnimationFrame : FrameRequestCallback.t -> float) =
  fun (x15975 : FrameRequestCallback.t) ->
    Ojs.float_of_js
      (Ojs.call Ojs.global "requestAnimationFrame"
         [|(FrameRequestCallback.t_to_js x15975)|])
let (addEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:[ `Boolean of bool  | `Other of AddEventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x15976 : 'K) ->
    fun
      ~listener:(x15977 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun
        ?options:(x15978 :
                   [ `Boolean of bool 
                   | `Other of AddEventListenerOptions.t ] Primitive.t option)
        ->
        fun () ->
          ignore
            (let x15986 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x15986 "addEventListener") "apply"
               [|x15986;((let x15979 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15979 "push" [|(Obj.magic x15976)|]);
                          ignore
                            (Ojs.call x15979 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x15984 : Ojs.t) ->
                                       fun (x15985 : Ojs.t) ->
                                         any_to_js
                                           (x15977
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x15984)
                                              ~ev:(any_of_js x15985))))|]);
                          (match x15978 with
                           | Some x15980 ->
                               ignore
                                 (Ojs.call x15979 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x15981 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  AddEventListenerOptions.t ])
                                            ->
                                            match x15981 with
                                            | `Boolean x15982 ->
                                                Ojs.bool_to_js x15982
                                            | `Other x15983 ->
                                                AddEventListenerOptions.t_to_js
                                                  x15983) x15980)|])
                           | None -> ());
                          x15979))|])
let (addEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:[ `Boolean of bool  | `Other of AddEventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x15987 : string) ->
    fun ~listener:(x15988 : EventListenerOrEventListenerObject.t) ->
      fun
        ?options:(x15989 :
                   [ `Boolean of bool 
                   | `Other of AddEventListenerOptions.t ] Primitive.t option)
        ->
        fun () ->
          ignore
            (let x15995 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x15995 "addEventListener") "apply"
               [|x15995;((let x15990 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15990 "push"
                               [|(Ojs.string_to_js x15987)|]);
                          ignore
                            (Ojs.call x15990 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x15988)|]);
                          (match x15989 with
                           | Some x15991 ->
                               ignore
                                 (Ojs.call x15990 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x15992 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  AddEventListenerOptions.t ])
                                            ->
                                            match x15992 with
                                            | `Boolean x15993 ->
                                                Ojs.bool_to_js x15993
                                            | `Other x15994 ->
                                                AddEventListenerOptions.t_to_js
                                                  x15994) x15991)|])
                           | None -> ());
                          x15990))|])
let (removeEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:[ `Boolean of bool  | `Other of EventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x15996 : 'K) ->
    fun
      ~listener:(x15997 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun
        ?options:(x15998 :
                   [ `Boolean of bool  | `Other of EventListenerOptions.t ]
                     Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16006 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16006 "removeEventListener")
               "apply"
               [|x16006;((let x15999 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15999 "push" [|(Obj.magic x15996)|]);
                          ignore
                            (Ojs.call x15999 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16004 : Ojs.t) ->
                                       fun (x16005 : Ojs.t) ->
                                         any_to_js
                                           (x15997
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16004)
                                              ~ev:(any_of_js x16005))))|]);
                          (match x15998 with
                           | Some x16000 ->
                               ignore
                                 (Ojs.call x15999 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16001 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  EventListenerOptions.t ])
                                            ->
                                            match x16001 with
                                            | `Boolean x16002 ->
                                                Ojs.bool_to_js x16002
                                            | `Other x16003 ->
                                                EventListenerOptions.t_to_js
                                                  x16003) x16000)|])
                           | None -> ());
                          x15999))|])
let (removeEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:[ `Boolean of bool  | `Other of EventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16007 : string) ->
    fun ~listener:(x16008 : EventListenerOrEventListenerObject.t) ->
      fun
        ?options:(x16009 :
                   [ `Boolean of bool  | `Other of EventListenerOptions.t ]
                     Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16015 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16015 "removeEventListener")
               "apply"
               [|x16015;((let x16010 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16010 "push"
                               [|(Ojs.string_to_js x16007)|]);
                          ignore
                            (Ojs.call x16010 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16008)|]);
                          (match x16009 with
                           | Some x16011 ->
                               ignore
                                 (Ojs.call x16010 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16012 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  EventListenerOptions.t ])
                                            ->
                                            match x16012 with
                                            | `Boolean x16013 ->
                                                Ojs.bool_to_js x16013
                                            | `Other x16014 ->
                                                EventListenerOptions.t_to_js
                                                  x16014) x16011)|])
                           | None -> ());
                          x16010))|])
